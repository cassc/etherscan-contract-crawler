{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NomoNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\r\\n\\r\\n/// @title NFT athletes contract.\\r\\n/// @notice This contract is the NFTs cards for NOMO fantasy sport.\\r\\n/// @dev Each token/card/NFT ID refers to the one card image. CardImage stores athletes data, their names,scores, etc. CardImages and cards/NFTs starts from first id (1), not from zero id. That's done in that way because we don't want to mess up with default zero value in variables\\r\\ncontract NomoNFT is ERC721, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // ============ Structs ============\\r\\n    struct CardImageData {\\r\\n        string name;\\r\\n        string imageURL;\\r\\n        uint256 league;\\r\\n        uint256 gen;\\r\\n        uint256 playerPosition;\\r\\n        uint256 parametersUpdateTime;\\r\\n        uint256 parametersSetId;\\r\\n    }\\r\\n\\r\\n    // ============ Variables ============\\r\\n\\r\\n    Counters.Counter private _tokenIds;\\r\\n    Counters.Counter private _cardImageIds;\\r\\n    Counters.Counter private _namesSetsIds;\\r\\n\\r\\n    // solhint-disable-next-line max-line-length\\r\\n    /// @notice Stores created card images. Card image is the data of the card. All NFTs are linked to appropriate image card.\\r\\n    mapping(uint256 => CardImageData) public cardsImages;\\r\\n\\r\\n    /// @notice parameters set id => parameters names\\r\\n    mapping(uint256 => string[]) public parametersNamesSets;\\r\\n\\r\\n    /// @notice namesSetId => existence\\r\\n    mapping(uint256 => bool) public namesSetToExistence;\\r\\n\\r\\n    /// @notice parameters names set id => card image id => parameters values array\\r\\n    /// @dev values indexes must be the same as corresponding names indexes in the parametersNamesSet\\r\\n    mapping(uint256 => mapping(uint256 => uint256[])) public cardImagesParameters;\\r\\n\\r\\n    /// @notice Parameters have 2 decimals, thus, for example, parameter value 3.4 must be stored as 340\\r\\n    uint256 public constant PARAMETERS_DECIMALS = 100;\\r\\n\\r\\n    /// @notice cardImageId => existence\\r\\n    mapping(uint256 => bool) public cardImageToExistence; // added that mapping because it can be more expensive to get image data structure for existence checks\\r\\n\\r\\n    /// @notice token id => card image id\\r\\n    mapping(uint256 => uint256) public cardToCardImageID;\\r\\n\\r\\n    /// @notice position code => position name\\r\\n    mapping(uint256 => string) public positionCodeToName;\\r\\n\\r\\n    /// @notice base for tokens URIs\\r\\n    string public baseURI;\\r\\n\\r\\n    // ============ Events ============\\r\\n\\r\\n    event NewCardImageCreated(\\r\\n        uint256 indexed _cardImageId,\\r\\n        string _name,\\r\\n        string _imageURL,\\r\\n        uint256 indexed _league,\\r\\n        uint256 indexed _gen,\\r\\n        uint256 _playerPosition,\\r\\n        uint256 _setId\\r\\n    );\\r\\n    event NewCardCreated(uint256 indexed _cardImageId, uint256 indexed _tokenId, address indexed _player);\\r\\n    event ChangedCardImageName(uint256 indexed _cardImageId, string _name);\\r\\n    event UpdatedCardImageParameters(uint256 indexed _cardImageId);\\r\\n\\r\\n    event CreatedPositionCode(uint256 indexed _position, string _positionName);\\r\\n    event ChangedCardImagePosition(uint256 indexed _cardImageId, uint256 indexed _position, string _positionName);\\r\\n\\r\\n    event CreatedParametersNamesSet(uint256 indexed _setId);\\r\\n    event UpdatedParametersNamesSet(uint256 indexed _setId);\\r\\n    event BindedCardImageToNamesSet(uint256 indexed _cardImageId, uint256 indexed _setId);\\r\\n\\r\\n    // ============ Constructor ============\\r\\n\\r\\n    /// @notice Contract constructor\\r\\n    constructor() ERC721(\\\"LeagueDAO: Nomo Player Token\\\", \\\"NOMO\\\") {}\\r\\n\\r\\n    // ============ Modifiers ============\\r\\n\\r\\n    modifier onlyExistingCardImage(uint256 _cardImageId) {\\r\\n        require(cardImageToExistence[_cardImageId], \\\"Card image !exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExistingParametersNamesSet(uint256 _setId) {\\r\\n        require(namesSetToExistence[_setId], \\\"Params names set !exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonEmptyName(string memory _name) {\\r\\n        require(keccak256(abi.encodePacked(_name)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"Empty name\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Positions functionality ============\\r\\n\\r\\n    /// @notice Sets a position. The corresponding name to the position code (number)\\r\\n    /// @param _code The code of the position.\\r\\n    /// @param _name The name of the position.\\r\\n    function setPosition(uint256 _code, string memory _name) external nonEmptyName(_name) onlyOwner {\\r\\n        positionCodeToName[_code] = _name;\\r\\n        emit CreatedPositionCode(_code, _name);\\r\\n    }\\r\\n\\r\\n    // ============ Cards Images functionality ============\\r\\n\\r\\n    // @todo gen must be calculated or leave it as passed value?\\r\\n    /// @notice Creates card image for athlete card\\r\\n    /// @param _name The name of the card corresponds to the name of the athlete. Can be changed after creation.\\r\\n    /// @param _league Number of the league. Cannot be changed after creation.\\r\\n    /// @param _gen Generation number.  Cannot be changed after creation.\\r\\n    /// @param _setId Parameters names set id, can be changed after creation.\\r\\n    /// @param _playerPosition Player's position code (number), can be changed after creation.\\r\\n    function createCardImage(\\r\\n        string memory _name,\\r\\n        string memory _imageURL,\\r\\n        uint256 _league,\\r\\n        uint256 _gen,\\r\\n        uint256 _playerPosition,\\r\\n        uint256 _setId\\r\\n    ) public nonEmptyName(_name) onlyOwner {\\r\\n        // we didn't create modifier for this require (and second same require) because of gas optimization\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(positionCodeToName[_playerPosition])) != keccak256(abi.encodePacked(\\\"\\\")),\\r\\n            \\\"Unknown position code\\\"\\r\\n        );\\r\\n\\r\\n        _cardImageIds.increment();\\r\\n        uint256 _cardImageId = _cardImageIds.current();\\r\\n        CardImageData storage cardImage = cardsImages[_cardImageId];\\r\\n        cardImage.name = _name;\\r\\n        cardImage.imageURL = _imageURL;\\r\\n        cardImage.league = _league;\\r\\n        cardImage.gen = _gen;\\r\\n        cardImage.playerPosition = _playerPosition;\\r\\n        cardImage.parametersSetId = _setId;\\r\\n\\r\\n        cardImageToExistence[_cardImageId] = true;\\r\\n        emit NewCardImageCreated(_cardImageId, _name, _imageURL, _league, _gen, _playerPosition, _setId);\\r\\n        emit BindedCardImageToNamesSet(_cardImageId, _setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a set of cards images for athletes cards\\r\\n    /// @param _names The names of the cards corresponds to the name of the athletes. Can be changed after creation.\\r\\n    /// @param _leagues Numbers of the leagues. Cannot be changed after creation.\\r\\n    /// @param _gen Generation number - one number for all new cards. Cannot be changed after creation.\\r\\n    /// @param _playerPositions Codes (numbers) of players' positions, can be changed after creation.\\r\\n    /// @param _setId Parameters names set id, can be changed after creation.\\r\\n    function createCardsImages(\\r\\n        string[] memory _names,\\r\\n        string[] memory _imagesURLs,\\r\\n        uint256[] calldata _leagues,\\r\\n        uint256 _gen,\\r\\n        uint256[] calldata _playerPositions,\\r\\n        uint256 _setId\\r\\n    ) external onlyOwner {\\r\\n        require(_names.length == _leagues.length, \\\"names.length != leagues.length\\\");\\r\\n        require(_imagesURLs.length == _names.length, \\\"imagesURLs.length != names.length\\\");\\r\\n        require(_playerPositions.length == _names.length, \\\"playerPositions.length != names.length\\\");\\r\\n        for (uint256 i = 0; i < _names.length; i++) {\\r\\n            createCardImage(_names[i], _imagesURLs[i], _leagues[i], _gen, _playerPositions[i], _setId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the name of the card image\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @param _newName New card name\\r\\n    /// @dev Reverts on non-existent card image id.\\r\\n    function changeCardImageName(uint256 _cardImageId, string calldata _newName)\\r\\n        external\\r\\n        nonEmptyName(_newName)\\r\\n        onlyExistingCardImage(_cardImageId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        cardsImages[_cardImageId].name = _newName;\\r\\n        emit ChangedCardImageName(_cardImageId, _newName);\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the player's position of the card image\\r\\n    /// @param _cardImageId Card Image id.\\r\\n    /// @param _newPosition New code (number) of the player's position of the card image.\\r\\n    /// @dev Reverts on non-existent card image id, non-existent position.\\r\\n    function changeCardImagePosition(uint256 _cardImageId, uint256 _newPosition)\\r\\n        external\\r\\n        onlyExistingCardImage(_cardImageId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        string memory positionName = positionCodeToName[_newPosition];\\r\\n        require(keccak256(abi.encodePacked(positionName)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"Unknown position code\\\");\\r\\n        cardsImages[_cardImageId].playerPosition = _newPosition;\\r\\n        emit ChangedCardImagePosition(_cardImageId, _newPosition, positionName);\\r\\n    }\\r\\n\\r\\n    // ============ Cards Images getters ============\\r\\n\\r\\n    /// @notice Returns all data from card image.\\r\\n    /// @dev Reverts on non-existent card image id => revert on non-existent NFT with \\\"Card image !exists\\\" revert message. parametersNames.length == parametersValues.length.\\r\\n    /// @param _cardImageId Card Image id.\\r\\n    /// @return name - the name of the card corresponds to the name of the athlete.\\r\\n    /// @return imageURL - link to the card's/player's image.\\r\\n    /// @return league - number of the league.\\r\\n    /// @return gen - number of the generation.\\r\\n    /// @return playerPosition - code (number) of the player's position.\\r\\n    /// @return parametersSetId - id of the parameters names set array.\\r\\n    /// @return parametersNames - parameters names array. Must be combined with params values and displayed as NFT player stats.\\r\\n    /// @return parametersValues - parameters values array.\\r\\n    /// @return parametersUpdateTime - unix timestamp when params was updated last time.\\r\\n    function getCardImage(uint256 _cardImageId)\\r\\n        external\\r\\n        view\\r\\n        onlyExistingCardImage(_cardImageId)\\r\\n        returns (\\r\\n            string memory name,\\r\\n            string memory imageURL,\\r\\n            uint256 league,\\r\\n            uint256 gen,\\r\\n            uint256 playerPosition,\\r\\n            uint256 parametersSetId,\\r\\n            string[] memory parametersNames,\\r\\n            uint256[] memory parametersValues,\\r\\n            uint256 parametersUpdateTime\\r\\n        )\\r\\n    {\\r\\n        CardImageData memory cardImage = cardsImages[_cardImageId];\\r\\n        name = cardImage.name;\\r\\n        imageURL = cardImage.imageURL;\\r\\n        league = cardImage.league;\\r\\n        gen = cardImage.gen;\\r\\n\\r\\n        playerPosition = cardImage.playerPosition;\\r\\n\\r\\n        parametersSetId = cardImage.parametersSetId;\\r\\n        parametersValues = cardImagesParameters[parametersSetId][_cardImageId];\\r\\n        parametersNames = parametersNamesSets[parametersSetId];\\r\\n        parametersUpdateTime = cardImage.parametersUpdateTime;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns all data from card image binded to specified token.\\r\\n    /// @dev Reverts on non-existent card image id => revert on non-existent NFT with \\\"Card image !exists\\\" revert message. parametersNames.length == parametersValues.length.\\r\\n    /// @param _tokenId NFT id which card image data will be returned.\\r\\n    /// @return name - the name of the card corresponds to the name of the athlete.\\r\\n    /// @return imageURL - link to the card's/player's image.\\r\\n    /// @return league - number of the league.\\r\\n    /// @return gen - number of the generation.\\r\\n    /// @return playerPosition - code (number) of the player's position.\\r\\n    /// @return parametersSetId - id of the parameters names set array.\\r\\n    /// @return parametersNames - parameters names array. Must be combined with params values and displayed as NFT player stats.\\r\\n    /// @return parametersValues - parameters values array.\\r\\n    /// @return parametersUpdateTime - unix timestamp when params was updated last time.\\r\\n    function getCardImageDataByTokenId(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory name,\\r\\n            string memory imageURL,\\r\\n            uint256 league,\\r\\n            uint256 gen,\\r\\n            uint256 playerPosition,\\r\\n            uint256 parametersSetId,\\r\\n            string[] memory parametersNames,\\r\\n            uint256[] memory parametersValues,\\r\\n            uint256 parametersUpdateTime\\r\\n        )\\r\\n    {\\r\\n        uint256 cardImageId = cardToCardImageID[_tokenId];\\r\\n        require(cardImageToExistence[cardImageId], \\\"Card image !exists\\\");\\r\\n        CardImageData memory cardImage = cardsImages[cardImageId];\\r\\n        name = cardImage.name;\\r\\n        imageURL = cardImage.imageURL;\\r\\n        league = cardImage.league;\\r\\n        gen = cardImage.gen;\\r\\n        playerPosition = cardImage.playerPosition;\\r\\n\\r\\n        parametersSetId = cardImage.parametersSetId;\\r\\n        parametersValues = cardImagesParameters[parametersSetId][cardImageId];\\r\\n        parametersNames = parametersNamesSets[parametersSetId];\\r\\n\\r\\n        parametersUpdateTime = cardImage.parametersUpdateTime;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns position name from card image binded to specified token.\\r\\n    /// @dev Reverts on non-existent card image id => revert on non-existent NFT with \\\"Card image !exists\\\" revert message. parametersNames.length == parametersValues.length.\\r\\n    /// @param _tokenId NFT id which card image position name will be returned.\\r\\n    /// @return playerPosition - code (number) of the player's position.\\r\\n    function getCardImagePositionNameByTokenId(uint256 _tokenId) external view returns (string memory playerPosition) {\\r\\n        uint256 cardImageId = cardToCardImageID[_tokenId];\\r\\n        require(cardImageToExistence[cardImageId], \\\"Card image !exists\\\");\\r\\n        playerPosition = positionCodeToName[cardsImages[cardImageId].playerPosition];\\r\\n    }\\r\\n\\r\\n    // ============ Card Images parameters functionality ============\\r\\n\\r\\n    /// @notice Creates new parameters names set. Ids of the sets starting from one, not zero.\\r\\n    /// @param _parametersNames New names values for the set\\r\\n    function createParametersSet(string[] memory _parametersNames) external onlyOwner {\\r\\n        _namesSetsIds.increment();\\r\\n        uint256 setId = _namesSetsIds.current();\\r\\n\\r\\n        parametersNamesSets[setId] = _parametersNames;\\r\\n        namesSetToExistence[setId] = true;\\r\\n        emit CreatedParametersNamesSet(setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Rewrites name in the set\\r\\n    /// @param _setId Id of the set to update\\r\\n    /// @param _parameterNameId Id of the parameter name to update in the set\\r\\n    /// @param _parameterNewName New name value\\r\\n    function updateParametersNameInSet(\\r\\n        uint256 _setId,\\r\\n        uint256 _parameterNameId,\\r\\n        string memory _parameterNewName\\r\\n    ) external onlyExistingParametersNamesSet(_setId) onlyOwner {\\r\\n        parametersNamesSets[_setId][_parameterNameId] = _parameterNewName;\\r\\n        emit UpdatedParametersNamesSet(_setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Rewrites names set with length check (checks that new names array length will be equal to previous name array length).\\r\\n    /// @dev Be careful with names updates - values array won't be changed, thus values can refer to wrong names after incorrect names update. Consider if you can create new names set instead of changing existing one.\\r\\n    /// @param _setId Id of the set to update\\r\\n    /// @param _parametersNames New names values for the set\\r\\n    function updateParametersNamesSet(uint256 _setId, string[] memory _parametersNames)\\r\\n        external\\r\\n        onlyExistingParametersNamesSet(_setId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(parametersNamesSets[_setId].length == _parametersNames.length, \\\"New set length differs\\\");\\r\\n\\r\\n        parametersNamesSets[_setId] = _parametersNames;\\r\\n        emit UpdatedParametersNamesSet(_setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Rewrites names set without length check. New set can be bigger or smaller then previous set, thus CardImages parameters values would have missing or excess values. Consider if you can create new names set instead of changing existing one.\\r\\n    /// @dev Front-/Back-end can get errors while trying to receive parameters with missing or excess values.\\r\\n    /// @param _setId Id of the set to update\\r\\n    /// @param _parametersNames New names values for the set\\r\\n    function updateParametersNamesSetUnsafe(uint256 _setId, string[] memory _parametersNames)\\r\\n        external\\r\\n        onlyExistingParametersNamesSet(_setId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        parametersNamesSets[_setId] = _parametersNames;\\r\\n        emit UpdatedParametersNamesSet(_setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates Card Image's parameters names set\\r\\n    /// @param _cardImageId Card Image id to bind to the set\\r\\n    /// @param _setId Id of the set to bind\\r\\n    function bindCardImageToParametersNamesSet(uint256 _cardImageId, uint256 _setId)\\r\\n        external\\r\\n        onlyExistingCardImage(_cardImageId)\\r\\n        onlyExistingParametersNamesSet(_setId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        CardImageData storage cardImage = cardsImages[_cardImageId];\\r\\n        cardImage.parametersSetId = _setId;\\r\\n        emit BindedCardImageToNamesSet(_cardImageId, _setId);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates Card Images' parameters names set. Iterates through the array of the Cards Images and sets parameters set to them.\\r\\n    /// @param _cardImagesIds Cards images ids to bind to the set\\r\\n    /// @param _setId Id of the set to bind\\r\\n    function bindCardImageToParametersNamesSetForMany(uint256[] calldata _cardImagesIds, uint256 _setId)\\r\\n        external\\r\\n        onlyExistingParametersNamesSet(_setId)\\r\\n        onlyOwner\\r\\n    {\\r\\n        for (uint256 i = 0; i < _cardImagesIds.length; i++) {\\r\\n            uint256 cardImageId = _cardImagesIds[i];\\r\\n\\r\\n            require(cardImageToExistence[cardImageId], \\\"Card image !exists\\\");\\r\\n\\r\\n            CardImageData storage cardImage = cardsImages[cardImageId];\\r\\n            cardImage.parametersSetId = _setId;\\r\\n            emit BindedCardImageToNamesSet(cardImageId, _setId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updates CardImage's parameters values\\r\\n    /// @dev parameters values have decimals\\r\\n    /// @param _cardImageId Card image to update\\r\\n    /// @param _parametersValues New player's parameters values\\r\\n    function updateParameters(uint256 _cardImageId, uint256[] calldata _parametersValues) public onlyOwner {\\r\\n        CardImageData storage cardImage = cardsImages[_cardImageId];\\r\\n        uint256 setId = cardImage.parametersSetId;\\r\\n        uint256 parametersLength = parametersNamesSets[setId].length;\\r\\n\\r\\n        require(parametersLength == _parametersValues.length, \\\"unexpected parameters length\\\");\\r\\n\\r\\n        cardImagesParameters[setId][_cardImageId] = _parametersValues;\\r\\n        cardImage.parametersUpdateTime = block.timestamp;\\r\\n\\r\\n        emit UpdatedCardImageParameters(_cardImageId);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates CardsImages' parameters values points. Parameters values have decimals\\r\\n    /// @dev All CardsImages passed to that function must have the same setId. Or you can pass CardsImages with different sets they binded to, but these sets must have the same length.\\r\\n    /// @param _cardsImagesIds Cards images to update. All must have the same _setId.\\r\\n    /// @param _parametersValues New players' parameters values. This array must contain parameters values for all CardsImages glued together in one array. This function will iterate on them with constant step (step = length of the names set). E.g. you passed 10 Cards Images, all of them binded to the names set that consists of the 5 names. So, you parameters values array must contain 10*5= 50 values, where first 5 parameters would go to the first CardImage, next 5 values to the second one and so on.\\r\\n    function updateParametersForMany(uint256[] calldata _cardsImagesIds, uint256[] calldata _parametersValues)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 setId = cardsImages[_cardsImagesIds[0]].parametersSetId;\\r\\n        uint256 parametersLength = parametersNamesSets[setId].length;\\r\\n        uint256 expectedParametersLength = parametersLength * _cardsImagesIds.length;\\r\\n\\r\\n        require(expectedParametersLength == _parametersValues.length, \\\"unexpected parameters length\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _cardsImagesIds.length; i++) {\\r\\n            updateParameters(_cardsImagesIds[i], _parametersValues[i * parametersLength:(i + 1) * parametersLength]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Card Images parameters getters ============\\r\\n\\r\\n    /// @notice Returns amount of the namesSets\\r\\n    /// @return numberOfNamesSets is current number of existing names sets ids\\r\\n    function getNumberOfNamesSets() external view returns (uint256 numberOfNamesSets) {\\r\\n        numberOfNamesSets = _namesSetsIds.current();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns names set by id\\r\\n    /// @param _setId Id of the names set to return\\r\\n    /// @return names set string array\\r\\n    function getNamesSet(uint256 _setId) external view returns (string[] memory) {\\r\\n        return parametersNamesSets[_setId];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns parameter value for specified Card Image\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @param _parameterId Id of the parameter to return\\r\\n    /// @return parameterValue is the value of the parameter stored in the card image\\r\\n    function getParameter(uint256 _cardImageId, uint256 _parameterId) external view returns (uint256 parameterValue) {\\r\\n        uint256 setId = cardsImages[_cardImageId].parametersSetId;\\r\\n        parameterValue = cardImagesParameters[setId][_cardImageId][_parameterId];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns parameters values array for specified Card Image\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @return parametersValues is the parameters values stored in the card image\\r\\n    function getParameters(uint256 _cardImageId) external view returns (uint256[] memory parametersValues) {\\r\\n        uint256 setId = cardsImages[_cardImageId].parametersSetId;\\r\\n        parametersValues = cardImagesParameters[setId][_cardImageId];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns parameter value and its name for specified Card Image\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @param _parameterId Id of the parameter to return\\r\\n    /// @return parameterValue is the value of the parameter stored in the card image\\r\\n    /// @return parameterName is the name of the parameter stored in the card image\\r\\n    function getParameterValueAndName(uint256 _cardImageId, uint256 _parameterId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 parameterValue, string memory parameterName)\\r\\n    {\\r\\n        uint256 setId = cardsImages[_cardImageId].parametersSetId;\\r\\n        parameterValue = cardImagesParameters[setId][_cardImageId][_parameterId];\\r\\n        parameterName = parametersNamesSets[setId][_parameterId];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns parameters values and names arrays for specified Card Image\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @return parametersValues is the parameters values stored in the card image\\r\\n    /// @return parametersNames is the parameters names stored in the card image\\r\\n    function getParameterValuesAndNames(uint256 _cardImageId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory parametersValues, string[] memory parametersNames)\\r\\n    {\\r\\n        uint256 setId = cardsImages[_cardImageId].parametersSetId;\\r\\n        parametersValues = cardImagesParameters[setId][_cardImageId];\\r\\n        parametersNames = parametersNamesSets[setId];\\r\\n    }\\r\\n\\r\\n    // ============ Tokens functionality ============\\r\\n\\r\\n    /// @notice Sets base URI for token URIs\\r\\n    /// @param _baseURI base URI string, base URI will be concatenated with the token ID and the resulted string would be tokenURI (look getter - tokenURI())\\r\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\r\\n        baseURI = _baseURI;\\r\\n    }\\r\\n\\r\\n    /// @notice Assigning a token to a user and binding it to a card image\\r\\n    /// @param _player Player address\\r\\n    /// @param _cardImageId Card Image id\\r\\n    /// @dev Reverts on non-existent card image id.\\r\\n    function mintCard(address _player, uint256 _cardImageId) public onlyExistingCardImage(_cardImageId) onlyOwner {\\r\\n        _tokenIds.increment(); // @todo starting from 1. or must be 0? if so, change also getNumberOfTokens\\r\\n        uint256 _tokenId = _tokenIds.current();\\r\\n\\r\\n        _mint(_player, _tokenId); // @todo do we need to use safeMint?\\r\\n\\r\\n        cardToCardImageID[_tokenId] = _cardImageId;\\r\\n\\r\\n        emit NewCardCreated(_cardImageId, _tokenId, _player);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigning a token to a user and binding it to a card image\\r\\n    /// @param _players Players array address\\r\\n    /// @param _cardsImagesIds Card Image ids array\\r\\n    /// @dev Reverts on non-existent card image id. For each player creates new token with the specified card image id. _players.length must be equal to _cardsImagesIds.length\\r\\n    function mintCards(address[] calldata _players, uint256[] calldata _cardsImagesIds) external onlyOwner {\\r\\n        require(_players.length == _cardsImagesIds.length);\\r\\n        for (uint256 i = 0; i < _players.length; i++) {\\r\\n            mintCard(_players[i], _cardsImagesIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Assigning tokens to a user and binding then to cards images\\r\\n    /// @param _player Player address\\r\\n    /// @param _cardsImagesIds Card Image ids array\\r\\n    /// @dev Reverts on non-existent card image id. Creates new tokens and assigns them to specified account.\\r\\n    function mintCardsToPlayer(address _player, uint256[] calldata _cardsImagesIds) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _cardsImagesIds.length; i++) {\\r\\n            mintCard(_player, _cardsImagesIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Tokens getters ============\\r\\n\\r\\n    /// @notice Used in tokenURI standard function\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /// @notice Getting the number of tokens\\r\\n    /// @return numberOfTokenIds is current number of existing token ids\\r\\n    function getNumberOfTokens() external view returns (uint256 numberOfTokenIds) {\\r\\n        numberOfTokenIds = _tokenIds.current();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"BindedCardImageToNamesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"ChangedCardImageName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_positionName\",\"type\":\"string\"}],\"name\":\"ChangedCardImagePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"CreatedParametersNamesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_positionName\",\"type\":\"string\"}],\"name\":\"CreatedPositionCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"NewCardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_imageURL\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_league\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_playerPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"NewCardImageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"}],\"name\":\"UpdatedCardImageParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"UpdatedParametersNamesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PARAMETERS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"bindCardImageToParametersNamesSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardImagesIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"bindCardImageToParametersNamesSetForMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardImageToExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardImagesParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardToCardImageID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"league\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parametersUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parametersSetId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"changeCardImageName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPosition\",\"type\":\"uint256\"}],\"name\":\"changeCardImagePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_league\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"createCardImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_imagesURLs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_leagues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_playerPositions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"createCardsImages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_parametersNames\",\"type\":\"string[]\"}],\"name\":\"createParametersSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"}],\"name\":\"getCardImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"league\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parametersSetId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"parametersNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"parametersValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parametersUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCardImageDataByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"league\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parametersSetId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"parametersNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"parametersValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"parametersUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCardImagePositionNameByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"playerPosition\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getNamesSet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfNamesSets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNamesSets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokenIds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parameterId\",\"type\":\"uint256\"}],\"name\":\"getParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parameterValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parameterId\",\"type\":\"uint256\"}],\"name\":\"getParameterValueAndName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"parameterValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parameterName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"}],\"name\":\"getParameterValuesAndNames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"parametersValues\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"parametersNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"parametersValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"}],\"name\":\"mintCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardsImagesIds\",\"type\":\"uint256[]\"}],\"name\":\"mintCards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardsImagesIds\",\"type\":\"uint256[]\"}],\"name\":\"mintCardsToPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"namesSetToExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parametersNamesSets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionCodeToName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cardImageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_parametersValues\",\"type\":\"uint256[]\"}],\"name\":\"updateParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_cardsImagesIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_parametersValues\",\"type\":\"uint256[]\"}],\"name\":\"updateParametersForMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parameterNameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_parameterNewName\",\"type\":\"string\"}],\"name\":\"updateParametersNameInSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_parametersNames\",\"type\":\"string[]\"}],\"name\":\"updateParametersNamesSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_parametersNames\",\"type\":\"string[]\"}],\"name\":\"updateParametersNamesSetUnsafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NomoNFT", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}