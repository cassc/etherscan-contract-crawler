{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Tradix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../interface/IOrderRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/IPinecore.sol\\\";\\n\\ncontract Tradix is Ownable {\\n    // Address of the fund receiver\\n    address public UNISWAP_V2_ROUTER;\\n\\n    // Address of WETH token\\n    address public WETH;\\n    // Address of the fund receiver\\n    address public maintainerAddress;\\n    address public OrderRouter;\\n\\n    address public GelatoPineCoreAddress;\\n\\n    event EthDeposited(\\n        address indexed sender,\\n        uint256 amount,\\n        bytes data,\\n        uint256 maintainerFee\\n    );\\n\\n    event TokenDeposited(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        uint256 amountOutMin,\\n        address module,\\n        address inputToken,\\n        address owner,\\n        address witness,\\n        bytes data,\\n        bytes32 secret,\\n        bool taxable\\n    );\\n\\n    modifier ZeroAddress(address _account) {\\n        require(_account != address(0), \\\"TRDX: Invalid address\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _orderRouter,\\n        address _gelatoPineCoreAddress,\\n        address _router,\\n        address _Weth,\\n        address _maintainerAddress\\n    )\\n        ZeroAddress(_orderRouter)\\n        ZeroAddress(_gelatoPineCoreAddress)\\n        ZeroAddress(_router)\\n        ZeroAddress(_Weth)\\n        ZeroAddress(_maintainerAddress)\\n    {\\n        OrderRouter = _orderRouter;\\n        GelatoPineCoreAddress = _gelatoPineCoreAddress;\\n        UNISWAP_V2_ROUTER = _router;\\n        WETH = _Weth;\\n        maintainerAddress = _maintainerAddress;\\n    }\\n\\n    /**\\n     * @dev Function to deposit Ether into the GelatoPineCore contract and transfer maintainer fee.\\n     * @param _data Additional data to be passed to the GelatoPineCore contract.\\n     * @param _maintainerFee The amount of Ether to be transferred to the maintainer as a fee for using this contract.\\n     */\\n    function depositEth(\\n        bytes calldata _data,\\n        uint256 _maintainerFee\\n    ) external payable {\\n        require(msg.value > _maintainerFee, \\\"TRDX: Invalid Eth Amount\\\");\\n\\n        uint256 tValue = msg.value - _maintainerFee;\\n\\n        (bool success, ) = maintainerAddress.call{value: _maintainerFee}(\\\"\\\");\\n        require(success, \\\"TRDX: Transfer Failed\\\");\\n\\n        IPineCore(GelatoPineCoreAddress).depositEth{value: tValue}(_data);\\n\\n        emit EthDeposited(msg.sender, tValue, _data, _maintainerFee);\\n    }\\n\\n    /**\\n     * @dev Function to deposit tokens into the GelatoPineCore contract and transfer a fee in tokens.\\n     * @param _amount The amount of tokens to deposit.\\n     * @param _feeAmount The amount of tokens to transfer as a fee.\\n     * @param _amountOutMin The minimum amount of ETH to receive in exchange for tokens.\\n     * @param _module The address of the module.\\n     * @param _inputToken The address of the token to deposit.\\n     * @param _owner The address of the owner.\\n     * @param _witness The address of the witness.\\n     * @param _data Additional data to be passed to the GelatoPineCore contract.\\n     * @param _secret A secret value.\\n     * @param _taxable A flag indicating if the token transfer is taxable.\\n     */\\n    function depositToken(\\n        uint256 _amount,\\n        uint256 _feeAmount,\\n        uint256 _amountOutMin,\\n        address _module,\\n        address _inputToken,\\n        address payable _owner,\\n        address _witness,\\n        bytes calldata _data,\\n        bytes32 _secret,\\n        bool _taxable\\n    ) external {\\n        address[] memory path = new address[](2);\\n        path[0] = _inputToken;\\n        path[1] = WETH;\\n\\n        IERC20(_inputToken).transferFrom(msg.sender, address(this), _feeAmount);\\n        IERC20(_inputToken).approve(UNISWAP_V2_ROUTER, _feeAmount);\\n        if (_taxable) {\\n            IUniswapV2Router02(UNISWAP_V2_ROUTER)\\n                .swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    IERC20(_inputToken).balanceOf(address(this)),\\n                    _amountOutMin,\\n                    path,\\n                    maintainerAddress,\\n                    block.timestamp\\n                );\\n        } else {\\n            IUniswapV2Router02(UNISWAP_V2_ROUTER).swapExactTokensForETH(\\n                _feeAmount,\\n                _amountOutMin,\\n                path,\\n                maintainerAddress,\\n                block.timestamp\\n            );\\n        }\\n\\n        IOrderRouter(OrderRouter).depositToken(\\n            _amount,\\n            _module,\\n            _inputToken,\\n            _owner,\\n            _witness,\\n            _data,\\n            _secret\\n        );\\n\\n        emit TokenDeposited(\\n            msg.sender,\\n            _amount,\\n            _feeAmount,\\n            _amountOutMin,\\n            _module,\\n            _inputToken,\\n            _owner,\\n            _witness,\\n            _data,\\n            _secret,\\n            _taxable\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to set the maintainer address.\\n     * @param _account The new maintainer address.\\n     */\\n    function setMaintainerAddress(\\n        address _account\\n    ) external onlyOwner ZeroAddress(_account) {\\n        maintainerAddress = _account;\\n    }\\n\\n    /**\\n     * @dev Function to set the OrderRouter address.\\n     * @param _orderRouter The new OrderRouter address.\\n     */\\n    function setOrderRouter(\\n        address _orderRouter\\n    ) external onlyOwner ZeroAddress(_orderRouter) {\\n        OrderRouter = _orderRouter;\\n    }\\n\\n    /**\\n     * @dev Function to set the gelatoPineCoreAddress address.\\n     * @param _gelatoPineCoreAddress The new OrderRouter address.\\n     */\\n\\n    function setGelatoPineCoreAddress(\\n        address _gelatoPineCoreAddress\\n    ) external onlyOwner ZeroAddress(_gelatoPineCoreAddress) {\\n        GelatoPineCoreAddress = _gelatoPineCoreAddress;\\n    }\\n\\n    function setUNISWAPROUTER(\\n        address _uniswaoRouter\\n    ) external onlyOwner ZeroAddress(_uniswaoRouter) {\\n        UNISWAP_V2_ROUTER = _uniswaoRouter;\\n    }\\n\\n    function setWETH(address _weth) external onlyOwner ZeroAddress(_weth) {\\n        WETH = _weth;\\n    }\\n}\\n\"\r\n    },\r\n    \"interface/IOrderRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IOrderRouter {\\n    function depositToken(\\n        uint256 _amount,\\n        address _module,\\n        address _inputToken,\\n        address payable _owner,\\n        address _witness,\\n        bytes calldata _data,\\n        bytes32 _secret\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"interface/IPinecore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface IPineCore {\\n    function depositEth(bytes calldata _data) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gelatoPineCoreAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maintainerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maintainerFee\",\"type\":\"uint256\"}],\"name\":\"EthDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"witness\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"taxable\",\"type\":\"bool\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GelatoPineCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OrderRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maintainerFee\",\"type\":\"uint256\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_taxable\",\"type\":\"bool\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoPineCoreAddress\",\"type\":\"address\"}],\"name\":\"setGelatoPineCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setMaintainerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderRouter\",\"type\":\"address\"}],\"name\":\"setOrderRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswaoRouter\",\"type\":\"address\"}],\"name\":\"setUNISWAPROUTER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tradix", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000016773fca1bd726e1eafab52699bcf738fe4adf6900000000000000000000000038c4092b28dab7f3d98ee6524549571c283cdfa5000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000cfe307639de6a9c1e931f977b7aca83356560700", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}