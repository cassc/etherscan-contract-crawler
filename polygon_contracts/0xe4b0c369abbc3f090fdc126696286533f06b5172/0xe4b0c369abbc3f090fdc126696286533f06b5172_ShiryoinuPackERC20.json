{"SourceCode": "// File contracts/@openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File contracts/@openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/@openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/final.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n        * @dev Returns the amount of tokens owned by `account`.\r\n        */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n        * @dev Returns the remaining number of tokens that `spender` will be\r\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n        * zero by default.\r\n        *\r\n        * This value changes when {approve} or {transferFrom} are called.\r\n        */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n        * that someone may use both the old and the new allowance by unfortunate\r\n        * transaction ordering. One possible solution to mitigate this race\r\n        * condition is to first reduce the spender's allowance to 0 and set the\r\n        * desired value afterwards:\r\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        *\r\n        * Emits an {Approval} event.\r\n        */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n        * allowance mechanism. `amount` is then deducted from the caller's\r\n        * allowance.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n        * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n        * another (`to`).\r\n        *\r\n        * Note that `value` may be zero.\r\n        */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n        * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n        * a call to {approve}. `value` is the new allowance.\r\n        */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IShiryoinuPack {\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\ncontract ShiryoinuPackERC20 is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    modifier onlyClevel() {\r\n        require(msg.sender == walletA || msg.sender == walletB || msg.sender == owner());\r\n    _;\r\n    }\r\n\r\n    modifier onlyBridge() {\r\n        require(msg.sender == bridgeAddress);\r\n    _;\r\n    }\r\n\r\n    address bridgeAddress;\r\n\r\n    address walletA;\r\n    address walletB;\r\n    uint256 walletBPercentage = 20;\r\n\r\n    //IERC20 public founderToken;\r\n    IShiryoinuPack public founderPack;\r\n    IShiryoinuPack public normalPack;\r\n    //uint256 public minimumFounderAmount = 25000000000000*10**9;  // founder token has 9 decimals!!\r\n\r\n    mapping(uint256=>uint256) public mintAmountToPrice;\r\n\r\n    constructor(\r\n    //IERC20 _founderToken, \r\n    IShiryoinuPack _founderPack, \r\n    IShiryoinuPack _normalPack, \r\n    address _walletA, \r\n    address _walletB) \r\n    {\r\n        walletA = _walletA;\r\n        walletB = _walletB;\r\n        //founderToken = _founderToken;\r\n\r\n        founderPack = _founderPack;\r\n        normalPack = _normalPack;\r\n\r\n        mintAmountToPrice[1]=  100*0.05 ether;\r\n        mintAmountToPrice[5]=  100*0.25 ether;\r\n        mintAmountToPrice[10]= 100*0.45 ether;\r\n        mintAmountToPrice[20]= 100*0.85 ether;\r\n\r\n    }\r\n\r\n    function mint_pack(uint256 _amount) public payable {\r\n        require(_amount>0 &&  mintAmountToPrice[_amount]>0, \"Invalid amount to mint.\");\r\n        require(msg.value>0 && msg.value==mintAmountToPrice[_amount] , \"Invalid value.\");\r\n\r\n        /*\r\n        bool founder = founderToken.balanceOf(msg.sender)>=minimumFounderAmount;\r\n\r\n        if (founder){\r\n            // mint founder\r\n            founderPack.mint(msg.sender, _amount);\r\n        }else{\r\n            // mint normal\r\n            normalPack.mint(msg.sender, _amount);\r\n        }*/\r\n        // only mint normal packs here\r\n         normalPack.mint(msg.sender, _amount);\r\n    }\r\n\r\n    // admin and clevel functions\r\n    /*\r\n    function setMinimumFounderTokenAmount(uint256 _amount) public onlyOwner {\r\n             minimumFounderAmount = _amount;\r\n    }*/\r\n\r\n    function setMintPrice(uint256 _amount, uint256 _price) public onlyOwner {\r\n             mintAmountToPrice[_amount]=_price;\r\n    }\r\n\r\n    function withdraw_all() public onlyClevel {\r\n        require (address(this).balance > 0);\r\n        uint256 amountB = SafeMath.div(address(this).balance,100).mul(walletBPercentage);\r\n        uint256 amountA = address(this).balance.sub(amountB);\r\n        payable(walletA).transfer(amountA);\r\n        payable(walletB).transfer(amountB);\r\n    }\r\n\r\n    function setWalletA(address _walletA) public {\r\n        require (msg.sender == walletA, \"Who are you?\");\r\n        require (_walletA != address(0x0), \"Invalid wallet\");\r\n        walletA = _walletA;\r\n    }\r\n\r\n    function setWalletB(address _walletB) public {\r\n        require (msg.sender == walletB, \"Who are you?\");\r\n        require (_walletB != address(0x0), \"Invalid wallet.\");\r\n        walletB = _walletB;\r\n    }\r\n\r\n    function setWalletBPercentage(uint256 _percentage) public onlyOwner{\r\n        require (_percentage>walletBPercentage && _percentage<=100, \"Invalid new slice.\");\r\n        walletBPercentage = _percentage;\r\n    }\r\n\r\n    function setBridgeAddress(address _bridge) public onlyOwner{\r\n        bridgeAddress = _bridge;\r\n    }\r\n\r\n    function setMintAmountToPrice(uint256 _mintAmount, uint256 _price) public onlyOwner{\r\n         mintAmountToPrice[_mintAmount]=  _price;\r\n    }\r\n\r\n    function bridge_mint_normal_packs(uint256 _amount, address _receiver) public onlyBridge {\r\n        require(_amount>0 , \"Cannot bridge zero packs\");\r\n        require(_receiver!=address(0x0) , \"Cannot mint to zero address\");\r\n        normalPack.mint(_receiver, _amount);\r\n    }\r\n    \r\n    function bridge_mint_founder_packs(uint256 _amount, address _receiver) public onlyBridge {\r\n        require(_amount>0 , \"Cannot bridge zero packs\");\r\n        require(_receiver!=address(0x0) , \"Cannot mint to zero address\");\r\n        founderPack.mint(_receiver, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IShiryoinuPack\",\"name\":\"_founderPack\",\"type\":\"address\"},{\"internalType\":\"contract IShiryoinuPack\",\"name\":\"_normalPack\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"bridge_mint_founder_packs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"bridge_mint_normal_packs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderPack\",\"outputs\":[{\"internalType\":\"contract IShiryoinuPack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintAmountToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint_pack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalPack\",\"outputs\":[{\"internalType\":\"contract IShiryoinuPack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMintAmountToPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletA\",\"type\":\"address\"}],\"name\":\"setWalletA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletB\",\"type\":\"address\"}],\"name\":\"setWalletB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setWalletBPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShiryoinuPackERC20", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d425e3fc693a8eaf8fa2b6aa6cd3167c4fcb1ca50000000000000000000000006afd7e2bf1e3e1fa1bde11d6ca1e3cfe0a757f440000000000000000000000006df08c7b0ce433e29a77281b6e776487730ee9000000000000000000000000006df08c7b0ce433e29a77281b6e776487730ee900", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5fa81d67567623bc6c3e33b9e1a4d9a129fd1a04fb35d670816e0f3f7cc0cbf1"}