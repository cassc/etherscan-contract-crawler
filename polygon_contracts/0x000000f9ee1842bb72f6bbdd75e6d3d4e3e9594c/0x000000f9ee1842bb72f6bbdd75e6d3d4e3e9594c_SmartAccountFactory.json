{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@account-abstraction/contracts/core/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\": {\r\n      \"content\": \"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/INonceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/base/Executor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {Enum} from \\\"../common/Enum.sol\\\";\\n\\n/// @title Executor - A contract that can execute transactions\\nabstract contract Executor {\\n    // Could add a flag fromEntryPoint for AA txn\\n    event ExecutionFailure(\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes indexed data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    );\\n    event ExecutionSuccess(\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes indexed data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    );\\n\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(\\n                    txGas,\\n                    to,\\n                    add(data, 0x20),\\n                    mload(data),\\n                    0,\\n                    0\\n                )\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(\\n                    txGas,\\n                    to,\\n                    value,\\n                    add(data, 0x20),\\n                    mload(data),\\n                    0,\\n                    0\\n                )\\n            }\\n        }\\n        if (success) emit ExecutionSuccess(to, value, data, operation, txGas);\\n        else emit ExecutionFailure(to, value, data, operation, txGas);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/base/FallbackManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {FallbackManagerErrors} from \\\"../common/Errors.sol\\\";\\n\\n/**\\n *   @title Fallback Manager - A contract that manages fallback calls made to the Smart Account\\n *   @dev Fallback calls are handled by a `handler` contract that is stored at FALLBACK_HANDLER_STORAGE_SLOT\\n *        fallback calls are not delegated to the `handler` so they can not directly change Smart Account storage\\n */\\ncontract FallbackManager is SelfAuthorized, FallbackManagerErrors {\\n    // keccak-256 hash of \\\"fallback_manager.handler.address\\\" subtracted by 1\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT =\\n        0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d4;\\n\\n    event ChangedFallbackHandler(\\n        address indexed previousHandler,\\n        address indexed handler\\n    );\\n\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(\\n                gas(),\\n                handler,\\n                0,\\n                0,\\n                add(calldatasize(), 20),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n\\n    function getFallbackHandler() external view returns (address _handler) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\\n        }\\n    }\\n\\n    /// @dev Allows to add a contract to handle fallback calls.\\n    ///      Only fallback calls without value and with data will be forwarded.\\n    ///      This can only be done via a smartAccount transaction.\\n    /// @param handler contract to handle fallback calls.\\n    function setFallbackHandler(address handler) public authorized {\\n        address previousHandler;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            previousHandler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\\n        }\\n        _setFallbackHandler(handler);\\n        emit ChangedFallbackHandler(previousHandler, handler);\\n    }\\n\\n    function _setFallbackHandler(address handler) internal {\\n        if (handler == address(0)) revert HandlerCannotBeZero();\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    uint256[24] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/base/ModuleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {SelfAuthorized} from \\\"../common/SelfAuthorized.sol\\\";\\nimport {Executor, Enum} from \\\"./Executor.sol\\\";\\nimport {ModuleManagerErrors} from \\\"../common/Errors.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract that manages modules that can execute transactions\\n *        on behalf of the Smart Account via this contract.\\n */\\ncontract ModuleManager is SelfAuthorized, Executor, ModuleManagerErrors {\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    // Events\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n    event ModuleTransaction(\\n        address module,\\n        address to,\\n        uint256 value,\\n        bytes data,\\n        Enum.Operation operation\\n    );\\n\\n    /**\\n     * @dev Returns array of modules. Useful for a widget\\n     * @param start Start of the page.\\n     * @param pageSize Maximum number of modules that should be returned.\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(\\n        address start,\\n        uint256 pageSize\\n    ) external view returns (address[] memory array, address next) {\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount;\\n        address currentModule = modules[start];\\n        while (\\n            currentModule != address(0x0) &&\\n            currentModule != SENTINEL_MODULES &&\\n            moduleCount < pageSize\\n        ) {\\n            array[moduleCount] = currentModule;\\n            currentModule = modules[currentModule];\\n            moduleCount++;\\n        }\\n        next = currentModule;\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a module to the allowlist.\\n     * @notice This can only be done via a wallet transaction.\\n     * @notice Enables the module `module` for the wallet.\\n     * @param module Module to be allow-listed.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        if (module == address(0) || module == SENTINEL_MODULES)\\n            revert ModuleCannotBeZeroOrSentinel(module);\\n        // Module cannot be added twice.\\n        if (modules[module] != address(0)) revert ModuleAlreadyEnabled(module);\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @dev Removes a module from the allowlist.\\n     * @notice This can only be done via a wallet transaction.\\n     * @notice Disables the module `module` for the wallet.\\n     * @param prevModule Module that pointed to the module to be removed in the linked list\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(\\n        address prevModule,\\n        address module\\n    ) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        if (module == address(0) || module == SENTINEL_MODULES)\\n            revert ModuleCannotBeZeroOrSentinel(module);\\n        if (modules[prevModule] != module)\\n            revert ModuleAndPrevModuleMismatch(\\n                module,\\n                modules[prevModule],\\n                prevModule\\n            );\\n        modules[prevModule] = modules[module];\\n        delete modules[module];\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @dev Allows a Module to execute a Smart Account transaction without any further confirmations.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        if (msg.sender == SENTINEL_MODULES || modules[msg.sender] == address(0))\\n            revert ModuleNotEnabled(msg.sender);\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, gasleft());\\n        if (success) {\\n            emit ModuleTransaction(msg.sender, to, value, data, operation);\\n            emit ExecutionFromModuleSuccess(msg.sender);\\n        } else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows a Module to execute a wallet transaction without any further confirmations and returns data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns if a module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function _setupModules(address to, bytes memory data) internal {\\n        if (modules[SENTINEL_MODULES] != address(0))\\n            revert ModulesAlreadyInitialized();\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0))\\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()))\\n                // Setup has to complete successfully or transaction fails.\\n                revert ModulesSetupExecutionFailed();\\n    }\\n\\n    uint256[24] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/BaseSmartAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport {IAccount} from \\\"@account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport {IEntryPoint} from \\\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport {UserOperationLib, UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport {Enum} from \\\"./common/Enum.sol\\\";\\nimport {BaseSmartAccountErrors} from \\\"./common/Errors.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\n\\nstruct Transaction {\\n    address to;\\n    Enum.Operation operation;\\n    uint256 value;\\n    bytes data;\\n    uint256 targetTxGas;\\n}\\n\\nstruct FeeRefund {\\n    uint256 baseGas;\\n    uint256 gasPrice; //gasPrice or tokenGasPrice\\n    uint256 tokenGasPriceFactor;\\n    address gasToken;\\n    address payable refundReceiver;\\n}\\n\\n/**\\n * Basic account implementation.\\n * This contract provides the basic logic for implementing the IAccount interface: validateUserOp function\\n * Specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseSmartAccount is IAccount, BaseSmartAccountErrors {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * @return nonce the account nonce.\\n     * @dev This method returns the next sequential nonce.\\n     * @notice For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function nonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * Subclass doesn't need to override this method.\\n     * Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external virtual override returns (uint256 validationData) {\\n        if (msg.sender != address(entryPoint()))\\n            revert CallerIsNotAnEntryPoint(msg.sender);\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {}\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            payable(msg.sender).call{\\n                value: missingAccountFunds,\\n                gas: type(uint256).max\\n            }(\\\"\\\");\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n\\n    /**\\n     * @dev Initialize the Smart Account with required states\\n     * @param _owner Signatory of the Smart Account\\n     * @param _handler Default fallback handler provided in Smart Account\\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\\n     */\\n    function init(address _owner, address _handler) external virtual;\\n\\n    /**\\n     * @dev Gnosis style transaction with optional repay in native tokens OR ERC20\\n     * @dev Allows to execute a transaction confirmed by required signature/s and then pays the account that submitted the transaction.\\n     * @notice The fees are always transferred, even if the user transaction fails.\\n     * @param _tx Smart Account transaction\\n     * @param refundInfo Required information for gas refunds\\n     * @param signatures Packed signature/s data ({bytes32 r}{bytes32 s}{uint8 v})\\n     */\\n    function execTransaction(\\n        Transaction memory _tx,\\n        FeeRefund memory refundInfo,\\n        bytes memory signatures\\n    ) external payable virtual returns (bool success);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/Enum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @title Enum - Collection of enums\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ncontract BaseSmartAccountErrors {\\n    /**\\n     * @notice Throws at onlyEntryPoint when msg.sender is not an EntryPoint set for this Smart Account\\n     * @param caller address that tried to call onlyEntryPoint-protected method\\n     */\\n    error CallerIsNotAnEntryPoint(address caller);\\n}\\n\\ncontract FallbackManagerErrors {\\n    /**\\n     * @notice Throws if zero address has been provided as Fallback Handler address\\n     */\\n    error HandlerCannotBeZero();\\n}\\n\\ncontract SmartAccountErrors is BaseSmartAccountErrors {\\n    /**\\n     * @notice Throws if zero address has been provided as Entry Point address\\n     */\\n    error EntryPointCannotBeZero();\\n\\n    /**\\n     * @notice Throws at mixedAuth when msg.sender is not an owner neither _self\\n     * @param caller address that tried to call mixedAuth-protected method\\n     */\\n    error MixedAuthFail(address caller);\\n\\n    /**\\n     * @notice Throws if transfer of tokens failed\\n     * @param token token contract address\\n     * @param dest token transfer receiver\\n     * @param amount the amount of tokens in a failed transfer\\n     */\\n    error TokenTransferFailed(address token, address dest, uint256 amount);\\n\\n    /**\\n     * @notice Throws if trying to change an owner of a SmartAccount to the zero address\\n     */\\n    error OwnerCannotBeZero();\\n\\n    /**\\n     * @notice Throws if zero address has been provided as Base Implementation address\\n     */\\n    error BaseImplementationCannotBeZero();\\n\\n    /**\\n     * @notice Throws if there is no code at implementationAddress\\n     * @param implementationAddress implementation address provided\\n     */\\n    error InvalidImplementation(address implementationAddress);\\n\\n    /**\\n     * @notice Throws at onlyOwner when msg.sender is not an owner\\n     * @param caller address that tried to call onlyOwner method\\n     */\\n    error CallerIsNotOwner(address caller);\\n\\n    /**\\n     * @notice Throws at _requireFromEntryPointOrOwner when msg.sender is not an EntryPoint neither an owner\\n     * @param caller address that tried to call _requireFromEntryPointOrOwner-protected method\\n     */\\n    error CallerIsNotEntryPointOrOwner(address caller);\\n\\n    /**\\n     * @notice Throws if trying to initialize a Smart Account that has already been initialized\\n     * @param smartAccount Smart Account Address\\n     */\\n    error AlreadyInitialized(address smartAccount);\\n\\n    /**\\n     * @notice Throws if not if enough gas is left at some point\\n     * @param gasLeft how much gas left at the moment of a check\\n     * @param gasRequired how much gas required to proceed\\n     */\\n    error NotEnoughGasLeft(uint256 gasLeft, uint256 gasRequired);\\n\\n    /**\\n     * @notice Throws if not able to estimate gas\\n     * It can be when amount of gas and its price are both zero and at the same time\\n     * Transaction has failed to be executed\\n     * @param targetTxGas gas required for target transaction\\n     * @param gasPrice gas price passed in Refund Info\\n     * @param success whether transaction has been executed successfully or not\\n     */\\n    error CanNotEstimateGas(\\n        uint256 targetTxGas,\\n        uint256 gasPrice,\\n        bool success\\n    );\\n\\n    /**\\n     * @notice Throws if contract signature is provided in frong format\\n     * @param uintS s converted to uint256\\n     * @param contractSignatureLength length of a contract signature\\n     * @param signatureLength the whole signature length\\n     */\\n    error WrongContractSignatureFormat(\\n        uint256 uintS,\\n        uint256 contractSignatureLength,\\n        uint256 signatureLength\\n    );\\n\\n    /**\\n     * @notice Throws when isValidSignature for the conrtact signature and data hash return differs from EIP1271 Magic Value\\n     * @param contractSignature the contract signature that has been verified\\n     */\\n    error WrongContractSignature(bytes contractSignature);\\n\\n    /**\\n     * @notice Throws when the address that signed the data (restored from signature)\\n     * differs from the address we expected to sign the data (i.e. some authorized address)\\n     * @param restoredSigner the signer address restored from signature\\n     * @param expectedSigner the address that was expected to be a signer\\n     */\\n    error InvalidSignature(address restoredSigner, address expectedSigner);\\n\\n    /**\\n     * @notice Throws when the transaction execution fails\\n     */\\n    error ExecutionFailed();\\n\\n    /**\\n     * @notice Throws when if trying to transfer to zero address\\n     */\\n    error TransferToZeroAddressAttempt();\\n\\n    /**\\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\\n     * @param destLength length of destination contracts array\\n     * @param valueLength length of txn values array\\n     * @param funcLength length of function signatures array\\n     */\\n    error WrongBatchProvided(\\n        uint256 destLength,\\n        uint256 valueLength,\\n        uint256 funcLength\\n    );\\n\\n    /**\\n     * @notice Throws when invalid nonce has been provided in an AA flow\\n     * @param nonceProvided nonce that has been provided within User Operation\\n     * @param nonceExpected expected nonce\\n     */\\n    error InvalidUserOpNonceProvided(\\n        uint256 nonceProvided,\\n        uint256 nonceExpected\\n    );\\n}\\n\\ncontract SmartAccountFactoryErrors is SmartAccountErrors {\\n    /**\\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\\n     * @param owner Owner of a Proxy (Smart Account)\\n     * @param index Deployment index\\n     */\\n    error ProxyDeploymentFailed(address owner, uint256 index);\\n}\\n\\ncontract ModuleManagerErrors {\\n    /**\\n     * @notice Throws when trying to initialize module manager that already been initialized\\n     */\\n    error ModulesAlreadyInitialized();\\n\\n    /**\\n     * @notice Throws when a delegatecall in course of module manager initialization has failed\\n     */\\n    error ModulesSetupExecutionFailed();\\n\\n    /**\\n     * @notice Throws when address(0) or SENTINEL_MODULES constant has been provided as a module address\\n     * @param module Module address provided\\n     */\\n    error ModuleCannotBeZeroOrSentinel(address module);\\n\\n    /**\\n     * @notice Throws when trying to enable module that has already been enabled\\n     * @param module Module address provided\\n     */\\n    error ModuleAlreadyEnabled(address module);\\n\\n    /**\\n     * @notice Throws when module and previous module mismatch\\n     * @param expectedModule expected module at modules[prevModule]\\n     * @param returnedModule the module that has been found at modules[prevModule]\\n     * @param prevModule previous module address provided at call\\n     */\\n    error ModuleAndPrevModuleMismatch(\\n        address expectedModule,\\n        address returnedModule,\\n        address prevModule\\n    );\\n\\n    /**\\n     * @notice Throws when trying to execute transaction from module that is not enabled\\n     * @param module Module address provided\\n     */\\n    error ModuleNotEnabled(address module);\\n}\\n\\ncontract SelfAuthorizedErrors {\\n    /**\\n     * @notice Throws when the caller is not address(this)\\n     * @param caller Caller address\\n     */\\n    error CallerIsNotSelf(address caller);\\n}\\n\\ncontract SingletonPaymasterErrors {\\n    /**\\n     * @notice Throws when the Entrypoint address provided is address(0)\\n     */\\n    error EntryPointCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the verifiying signer address provided is address(0)\\n     */\\n    error VerifyingSignerCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the paymaster address provided is address(0)\\n     */\\n    error PaymasterIdCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the 0 has been provided as deposit\\n     */\\n    error DepositCanNotBeZero();\\n\\n    /**\\n     * @notice Throws when trying to withdraw to address(0)\\n     */\\n    error CanNotWithdrawToZeroAddress();\\n\\n    /**\\n     * @notice Throws when trying to withdraw more than balance available\\n     * @param amountRequired required balance\\n     * @param currentBalance available balance\\n     */\\n    error InsufficientBalance(uint256 amountRequired, uint256 currentBalance);\\n\\n    /**\\n     * @notice Throws when signature provided has invalid length\\n     * @param sigLength length oif the signature provided\\n     */\\n    error InvalidPaymasterSignatureLength(uint256 sigLength);\\n}\\n\\n//\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @title Reentrancy Guard - reentrancy protection\\nabstract contract ReentrancyGuard {\\n    error ReentrancyProtectionActivated();\\n\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private reentrancyStatus;\\n\\n    constructor() {\\n        reentrancyStatus = NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (reentrancyStatus == ENTERED) revert ReentrancyProtectionActivated();\\n        reentrancyStatus = ENTERED;\\n        _;\\n        reentrancyStatus = NOT_ENTERED;\\n    }\\n\\n    function _isReentrancyGuardEntered() internal view returns (bool) {\\n        return reentrancyStatus == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/SecuredTokenTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @title SecuredTokenTransfer - Secure token transfer\\nabstract contract SecuredTokenTransfer {\\n    /// @dev Transfers a token and returns if it was a success\\n    /// @param token Token that should be transferred\\n    /// @param receiver Receiver to whom the token should be transferred\\n    /// @param amount The amount of tokens that should be transferred\\n    function transferToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal returns (bool transferred) {\\n        require(token != address(0), \\\"token can not be zero address\\\");\\n        require(token.code.length > 0, \\\"token contract doesn't exist\\\");\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(\\n            0xa9059cbb,\\n            receiver,\\n            amount\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(\\n                sub(gas(), 10000),\\n                token,\\n                0,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0x20\\n            )\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/SelfAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {SelfAuthorizedErrors} from \\\"../common/Errors.sol\\\";\\n\\n/// @title SelfAuthorized - authorizes current contract to perform actions\\ncontract SelfAuthorized is SelfAuthorizedErrors {\\n    function requireSelfCall() private view {\\n        if (msg.sender != address(this)) revert CallerIsNotSelf(msg.sender);\\n    }\\n\\n    modifier authorized() {\\n        // This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/common/SignatureDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\\nabstract contract SignatureDecoder {\\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\n    /// @param signature concatenated rsv signatures\\n    function signatureSplit(\\n        bytes memory signature\\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            // Here we are loading the last 32 bytes, including 31 bytes\\n            // of 's'. There is no 'mload8' to do this.\\n            //\\n            // 'byte' is not working due to the Solidity parser, so let's\\n            // use the second best option, 'and'\\n            v := and(mload(add(signature, 0x41)), 0xff)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/handler/DefaultCallbackHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {IERC1155TokenReceiver} from \\\"../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {IERC721TokenReceiver} from \\\"../interfaces/IERC721TokenReceiver.sol\\\";\\nimport {IERC777TokensRecipient} from \\\"../interfaces/IERC777TokensRecipient.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {SmartAccount} from \\\"../SmartAccount.sol\\\";\\n\\n/** @title Default Callback Handler - returns true for known token callbacks\\n *   @dev Handles EIP-1271 compliant isValidSignature requests.\\n *  @notice inspired by Richard Meissner's <richard@gnosis.pm> implementation\\n */\\ncontract DefaultCallbackHandler is\\n    IERC1155TokenReceiver,\\n    IERC777TokensRecipient,\\n    IERC721TokenReceiver,\\n    IERC165\\n{\\n    string public constant NAME = \\\"Default Callback Handler\\\";\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC777TokensRecipient).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface IERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/IERC721TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/IERC777TokensRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IERC777TokensRecipient {\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/IModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\n\\n// interface for modules to verify singatures signed over userOpHash\\ninterface IModule {\\n    /**\\n     * @dev standard validateSignature for modules to validate and mark userOpHash as seen\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @return sigValidationResult sigAuthorizer to be passed back to trusting Account, aligns with validationData\\n     */\\n    function validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) external returns (uint256 sigValidationResult);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/interfaces/ISignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _dataHash Arbitrary length data signed on behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(\\n        bytes32 _dataHash,\\n        bytes memory _signature\\n    ) public view virtual returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/libs/LibAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary LibAddress {\\n    /**\\n     * @notice Will return true if provided address is a contract\\n     * @param account Address to verify if contract or not\\n     * @dev This contract will return false if called within the constructor of\\n     *      a contract's deployment, as the code is not yet stored on-chain.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 csize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            csize := extcodesize(account)\\n        }\\n        return csize != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/libs/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(\\n        uint256 a,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return\\n                result +\\n                (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(\\n        uint256 value,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return\\n                result +\\n                (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Proxy // This is the user's Smart Account\\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\\n */\\ncontract Proxy {\\n    constructor(address _implementation) {\\n        require(\\n            _implementation != address(0),\\n            \\\"Invalid implementation address\\\"\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(address(), _implementation)\\n        }\\n    }\\n\\n    fallback() external payable {\\n        address target;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            target := sload(address())\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/SmartAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {BaseSmartAccount, IEntryPoint, Transaction, FeeRefund, Enum, UserOperation} from \\\"./BaseSmartAccount.sol\\\";\\nimport {ModuleManager} from \\\"./base/ModuleManager.sol\\\";\\nimport {FallbackManager} from \\\"./base/FallbackManager.sol\\\";\\nimport {SignatureDecoder} from \\\"./common/SignatureDecoder.sol\\\";\\nimport {SecuredTokenTransfer} from \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport {LibAddress} from \\\"./libs/LibAddress.sol\\\";\\nimport {ISignatureValidator} from \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport {Math} from \\\"./libs/Math.sol\\\";\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {ReentrancyGuard} from \\\"./common/ReentrancyGuard.sol\\\";\\nimport {SmartAccountErrors} from \\\"./common/Errors.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {IModule} from \\\"./interfaces/IModule.sol\\\";\\n\\n/**\\n * @title SmartAccount - EIP-4337 compatible smart contract wallet.\\n * @dev This contract is the base for the Smart Account functionality.\\n *         - It provides the functionality to execute both gnosis-style txns and AA (EIP-4337) userOps\\n *         - It allows to receive and manage assets.\\n *         - It is responsible for managing the modules and fallbacks.\\n *         - The Smart Account can be extended with modules, such as Social Recovery, Session Key and others.\\n * @author Chirag Titiya - <chirag@biconomy.io>\\n */\\ncontract SmartAccount is\\n    BaseSmartAccount,\\n    ModuleManager,\\n    FallbackManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    IERC165,\\n    ReentrancyGuard,\\n    SmartAccountErrors,\\n    ISignatureValidator\\n{\\n    using ECDSA for bytes32;\\n    using LibAddress for address;\\n\\n    // Storage Version\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    // Domain Seperators keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    bytes32 internal constant DOMAIN_SEPARATOR_TYPEHASH =\\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"AccountTx(address to,uint256 value,bytes data,uint8 operation,uint256 targetTxGas,uint256 baseGas,uint256 gasPrice,uint256 tokenGasPriceFactor,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 internal constant ACCOUNT_TX_TYPEHASH =\\n        0xda033865d68bf4a40a5a7cb4159a99e33dba8569e65ea3e38222eb12d9e66eee;\\n\\n    // Owner storage\\n    address public owner;\\n\\n    // changed to 2D nonce below\\n    // @notice there is no _nonce\\n    mapping(uint256 => uint256) public nonces;\\n\\n    // AA immutable storage\\n    IEntryPoint private immutable _entryPoint;\\n    uint256 private immutable _chainId;\\n    address private immutable _self;\\n\\n    // Events\\n\\n    event ImplementationUpdated(\\n        address indexed oldImplementation,\\n        address indexed newImplementation\\n    );\\n    event EOAChanged(\\n        address indexed _scw,\\n        address indexed _oldEOA,\\n        address indexed _newEOA\\n    );\\n    event AccountHandlePayment(bytes32 indexed txHash, uint256 indexed payment);\\n    event SmartAccountReceivedNativeToken(\\n        address indexed sender,\\n        uint256 indexed value\\n    );\\n\\n    /**\\n     * @dev Constructor that sets the owner of the contract and the entry point contract.\\n     * @param anEntryPoint The address of the entry point contract.\\n     */\\n    constructor(IEntryPoint anEntryPoint) {\\n        _self = address(this);\\n        // By setting the owner it is not possible to call init anymore,\\n        // so we create an account with fixed non-zero owner.\\n        // This is an unusable account, perfect for the singleton\\n        owner = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n        if (address(anEntryPoint) == address(0))\\n            revert EntryPointCannotBeZero();\\n        _entryPoint = anEntryPoint;\\n        _chainId = block.chainid;\\n    }\\n\\n    /// modifiers\\n    /**\\n     * @dev Modifier to allow only the owner to call the function.\\n     * Reverts with CallerIsNotOwner if the caller is not the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert CallerIsNotOwner(msg.sender);\\n        _;\\n    }\\n    /**\\n     * @dev Modifier to allow only the owner or the contract itself to call the function.\\n     * Reverts with MixedAuthFail if the caller is not the owner or the contract itself.\\n     */\\n    modifier mixedAuth() {\\n        if (msg.sender != owner && msg.sender != address(this))\\n            revert MixedAuthFail(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev This function allows the owner or entry point to execute certain actions.\\n     * If the caller is not authorized, the function will revert with an error message.\\n     * @notice This modifier is marked as internal and can only be called within the contract itself.\\n     */\\n    function _requireFromEntryPointOrOwner() internal view {\\n        if (msg.sender != address(entryPoint()) && msg.sender != owner)\\n            revert CallerIsNotEntryPointOrOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows to change the owner of the smart account by current owner or self-call (modules)\\n     * @param _newOwner Address of the new signatory\\n     */\\n    function setOwner(address _newOwner) public mixedAuth {\\n        if (_newOwner == address(0)) revert OwnerCannotBeZero();\\n        require(\\n            _newOwner != address(this),\\n            \\\"Smart Account:: new Signatory address cannot be self\\\"\\n        );\\n        require(\\n            _newOwner != owner,\\n            \\\"new Signatory address cannot be same as old one\\\"\\n        );\\n        address oldOwner = owner;\\n        assembly {\\n            sstore(owner.slot, _newOwner)\\n        }\\n        emit EOAChanged(address(this), oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @notice All the new implementations MUST have this method!\\n     * @notice Updates the implementation of the base wallet\\n     * @param _implementation New wallet implementation\\n     */\\n    function updateImplementation(\\n        address _implementation\\n    ) public virtual mixedAuth {\\n        require(_implementation != address(0), \\\"Address cannot be zero\\\");\\n        if (!_implementation.isContract())\\n            revert InvalidImplementation(_implementation);\\n        address oldImplementation;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            oldImplementation := sload(address())\\n            sstore(address(), _implementation)\\n        }\\n        emit ImplementationUpdated(oldImplementation, _implementation);\\n    }\\n\\n    /// Getters\\n    /**\\n     * @dev Returns the address of the implementation contract associated with this contract.\\n     * @notice The implementation address is stored in the contract's storage slot with index 0.\\n     */\\n    function getImplementation()\\n        external\\n        view\\n        returns (address _implementation)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _implementation := sload(address())\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_SEPARATOR_TYPEHASH,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return _chainId The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        return _chainId;\\n    }\\n\\n    /**\\n     * @dev returns a value from the nonces 2d mapping\\n     * @param batchId : the key of the user's batch being queried\\n     * @return nonce : the number of transactions made within said batch\\n     */\\n    function getNonce(uint256 batchId) public view virtual returns (uint256) {\\n        return nonces[batchId];\\n    }\\n\\n    /**\\n     * @dev Returns the current entry point used by this account.\\n     * @return EntryPoint as an `IEntryPoint` interface.\\n     * @dev This function should be implemented by the subclass to return the current entry point used by this account.\\n     */\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\n        return _entryPoint;\\n    }\\n\\n    /**\\n     * @dev Initialize the Smart Account with required states\\n     * @param _owner Signatory of the Smart Account\\n     * @param _handler Default fallback handler provided in Smart Account\\n     * @notice devs need to make sure it is only callble once by initiazer or state check restrictions\\n     * @notice any further implementations that introduces a new state must have a reinit method\\n     * @notice init is prevented here by setting owner in the constructor and checking here for address(0)\\n     */\\n    function init(address _owner, address _handler) external virtual override {\\n        if (owner != address(0)) revert AlreadyInitialized(address(this));\\n        if (_owner == address(0)) revert OwnerCannotBeZero();\\n        owner = _owner;\\n        _setFallbackHandler(_handler);\\n        _setupModules(address(0), bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Gnosis style transaction with optional repay in native tokens OR ERC20\\n     * @dev Allows to execute a transaction confirmed by required signature/s and then pays the account that submitted the transaction.\\n     * @dev Function name optimized to have hash started with zeros to make this function calls cheaper\\n     * @notice The fees are always transferred, even if the user transaction fails.\\n     * @param _tx Smart Account transaction\\n     * @param refundInfo Required information for gas refunds\\n     * @param signatures Packed signature/s data ({bytes32 r}{bytes32 s}{uint8 v})\\n     */\\n    function execTransaction_S6W(\\n        Transaction memory _tx,\\n        FeeRefund memory refundInfo,\\n        bytes memory signatures\\n    ) public payable virtual nonReentrant returns (bool success) {\\n        uint256 startGas = gasleft();\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                _tx,\\n                // Payment info\\n                refundInfo,\\n                // Signature info\\n                nonces[1]++\\n            );\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, signatures);\\n        }\\n\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        // Bitshift left 6 bits means multiplying by 64, just more gas efficient\\n        if (\\n            gasleft() <\\n            Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) + 500\\n        )\\n            revert NotEnoughGasLeft(\\n                gasleft(),\\n                Math.max((_tx.targetTxGas << 6) / 63, _tx.targetTxGas + 2500) +\\n                    500\\n            );\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than targetTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than targetTxGas\\n            success = execute(\\n                _tx.to,\\n                _tx.value,\\n                _tx.data,\\n                _tx.operation,\\n                refundInfo.gasPrice == 0 ? (gasleft() - 2500) : _tx.targetTxGas\\n            );\\n            // If no targetTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            if (!success && _tx.targetTxGas == 0 && refundInfo.gasPrice == 0)\\n                revert CanNotEstimateGas(\\n                    _tx.targetTxGas,\\n                    refundInfo.gasPrice,\\n                    success\\n                );\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment;\\n            if (refundInfo.gasPrice != 0) {\\n                payment = handlePayment(\\n                    startGas - gasleft(),\\n                    refundInfo.baseGas,\\n                    refundInfo.gasPrice,\\n                    refundInfo.tokenGasPriceFactor,\\n                    refundInfo.gasToken,\\n                    refundInfo.refundReceiver\\n                );\\n                emit AccountHandlePayment(txHash, payment);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Interface function with the standard name for execTransaction_S6W\\n     */\\n    function execTransaction(\\n        Transaction memory _tx,\\n        FeeRefund memory refundInfo,\\n        bytes memory signatures\\n    ) external payable virtual override returns (bool) {\\n        return execTransaction_S6W(_tx, refundInfo, signatures);\\n    }\\n\\n    /**\\n     * @dev Handles the payment for a transaction refund from Smart Account to Relayer.\\n     * @param gasUsed Gas used by the transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution\\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\\n     * that should be used for the payment calculation.\\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        uint256 tokenGasPriceFactor,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        require(tokenGasPriceFactor != 0, \\\"invalid tokenGasPriceFactor\\\");\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0)\\n            ? payable(tx.origin)\\n            : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment =\\n                (gasUsed + baseGas) *\\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            bool success;\\n            assembly {\\n                success := call(gas(), receiver, payment, 0, 0, 0, 0)\\n            }\\n            if (!success)\\n                revert TokenTransferFailed(address(0), receiver, payment);\\n        } else {\\n            payment =\\n                ((gasUsed + baseGas) * (gasPrice)) /\\n                (tokenGasPriceFactor);\\n            if (!transferToken(gasToken, receiver, payment))\\n                revert TokenTransferFailed(gasToken, receiver, payment);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows to estimate a transaction.\\n     * @notice This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\\n     * @notice Call this method to get an estimate of the handlePayment costs that are deducted with `execTransaction`\\n     * @param gasUsed Gas used by the transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution\\n     * (e.g. base transaction fee, signature check, payment of the refund, emitted events).\\n     * @param gasPrice Gas price / TokenGasPrice (gas price in the context of token using offchain price feeds)\\n     * that should be used for the payment calculation.\\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return requiredGas Estimate of refunds\\n     */\\n    function handlePaymentRevert(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        uint256 tokenGasPriceFactor,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) external returns (uint256 requiredGas) {\\n        require(tokenGasPriceFactor != 0, \\\"invalid tokenGasPriceFactor\\\");\\n        uint256 startGas = gasleft();\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0)\\n            ? payable(tx.origin)\\n            : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            uint256 payment = (gasUsed + baseGas) *\\n                (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            bool success;\\n            assembly {\\n                success := call(gas(), receiver, payment, 0, 0, 0, 0)\\n            }\\n            if (!success)\\n                revert TokenTransferFailed(address(0), receiver, payment);\\n        } else {\\n            uint256 payment = ((gasUsed + baseGas) * (gasPrice)) /\\n                (tokenGasPriceFactor);\\n            if (!transferToken(gasToken, receiver, payment))\\n                revert TokenTransferFailed(gasToken, receiver, payment);\\n        }\\n        unchecked {\\n            requiredGas = startGas - gasleft();\\n        }\\n        revert(string(abi.encodePacked(requiredGas)));\\n    }\\n\\n    /**\\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(\\n        bytes32 dataHash,\\n        bytes memory signatures\\n    ) public view virtual {\\n        require(signatures.length >= 65, \\\"Invalid signatures length\\\");\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        address _signer;\\n        (v, r, s) = signatureSplit(signatures);\\n        if (v == 0) {\\n            // If v is 0 then it is a contract signature\\n            // When handling contract signatures the address of the signer contract is encoded into r\\n            _signer = address(uint160(uint256(r)));\\n\\n            // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n            // Here we check that the pointer is not pointing inside the part that is being processed\\n            if (uint256(s) < 65)\\n                revert WrongContractSignatureFormat(uint256(s), 0, 0);\\n\\n            // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n            uint256 contractSignatureLen;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n            }\\n            if (uint256(s) + 32 + contractSignatureLen > signatures.length)\\n                revert WrongContractSignatureFormat(\\n                    uint256(s),\\n                    contractSignatureLen,\\n                    signatures.length\\n                );\\n\\n            // Check signature\\n            bytes memory contractSignature;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                contractSignature := add(add(signatures, s), 0x20)\\n            }\\n            if (\\n                ISignatureValidator(_signer).isValidSignature(\\n                    dataHash,\\n                    contractSignature\\n                ) != EIP1271_MAGIC_VALUE\\n            ) revert WrongContractSignature(contractSignature);\\n        } else if (v > 30) {\\n            // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n            // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n            (_signer, ) = dataHash.toEthSignedMessageHash().tryRecover(\\n                v - 4,\\n                r,\\n                s\\n            );\\n        } else {\\n            (_signer, ) = dataHash.tryRecover(v, r, s);\\n        }\\n        if (_signer != owner) revert InvalidSignature(_signer, owner);\\n    }\\n\\n    /**\\n     * @dev Allows to estimate a transaction.\\n     *      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\\n     *      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the wallet with `execTransaction`\\n     * @param to Destination address of the transaction.\\n     * @param value Ether value of transaction.\\n     * @param data Data payload of transaction.\\n     * @param operation Operation type of transaction.\\n     * @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\\n     */\\n    function requiredTxGas(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (uint256) {\\n        uint256 startGas = gasleft();\\n        // We don't provide an error message here, as we use it to return the estimate\\n        if (!execute(to, value, data, operation, gasleft()))\\n            revert ExecutionFailed();\\n        // Convert response to string and return via error message\\n        unchecked {\\n            revert(string(abi.encodePacked(startGas - gasleft())));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns hash to be signed by owner.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param targetTxGas Fas that should be used for the internal Smart Account transaction.\\n     * @param baseGas Additional Gas costs for data used to trigger the transaction.\\n     * @param gasPrice Maximum gas price/ token gas price that should be used for this transaction.\\n     * @param tokenGasPriceFactor factor by which calculated token gas price is already multiplied.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 targetTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        uint256 tokenGasPriceFactor,\\n        address gasToken,\\n        address payable refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        Transaction memory _tx = Transaction({\\n            to: to,\\n            value: value,\\n            data: data,\\n            operation: operation,\\n            targetTxGas: targetTxGas\\n        });\\n        FeeRefund memory refundInfo = FeeRefund({\\n            baseGas: baseGas,\\n            gasPrice: gasPrice,\\n            tokenGasPriceFactor: tokenGasPriceFactor,\\n            gasToken: gasToken,\\n            refundReceiver: refundReceiver\\n        });\\n        return keccak256(encodeTransactionData(_tx, refundInfo, _nonce));\\n    }\\n\\n    /**\\n     * @dev Returns the bytes that are hashed to be signed by owner.\\n     * @param _tx The wallet transaction to be signed.\\n     * @param refundInfo Required information for gas refunds.\\n     * @param _nonce Transaction nonce.\\n     * @return transactionHash bytes that are hashed to be signed by the owner.\\n     */\\n    function encodeTransactionData(\\n        Transaction memory _tx,\\n        FeeRefund memory refundInfo,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 accountTxHash = keccak256(\\n            abi.encode(\\n                ACCOUNT_TX_TYPEHASH,\\n                _tx.to,\\n                _tx.value,\\n                keccak256(_tx.data),\\n                _tx.operation,\\n                _tx.targetTxGas,\\n                refundInfo.baseGas,\\n                refundInfo.gasPrice,\\n                refundInfo.tokenGasPriceFactor,\\n                refundInfo.gasToken,\\n                refundInfo.refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return\\n            bytes.concat(\\n                bytes1(0x19),\\n                bytes1(0x01),\\n                domainSeparator(),\\n                accountTxHash\\n            );\\n    }\\n\\n    /**\\n     * @dev Utility method to be able to transfer native tokens out of Smart Account\\n     * @notice only owner/ signatory of Smart Account with enough gas to spend can call this method\\n     * @notice While enabling multisig module and renouncing ownership this will not work\\n     * @param dest Destination address\\n     * @param amount Amount of native tokens\\n     */\\n    function transfer(address payable dest, uint256 amount) external onlyOwner {\\n        if (dest == address(0)) revert TransferToZeroAddressAttempt();\\n        bool success;\\n        assembly {\\n            success := call(gas(), dest, amount, 0, 0, 0, 0)\\n        }\\n        if (!success) revert TokenTransferFailed(address(0), dest, amount);\\n    }\\n\\n    /**\\n     * @dev Utility method to be able to transfer ERC20 tokens out of Smart Account\\n     * @notice only owner/ signatory of Smart Account with enough gas to spend can call this method\\n     * @notice While enabling multisig module and renouncing ownership this will not work\\n     * @param token Token address\\n     * @param dest Destination/ Receiver address\\n     * @param amount Amount of tokens\\n     */\\n    function pullTokens(\\n        address token,\\n        address dest,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (dest == address(0)) revert TransferToZeroAddressAttempt();\\n        if (!transferToken(token, dest, amount))\\n            revert TokenTransferFailed(token, dest, amount);\\n    }\\n\\n    /**\\n     * @dev Execute a transaction (called directly from owner, or by entryPoint)\\n     * @notice Name is optimized for this method to be cheaper to be called\\n     * @param dest Address of the contract to call\\n     * @param value Amount of native tokens to send along with the transaction\\n     * @param func Data of the transaction\\n     */\\n    function executeCall_s1m(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) public {\\n        _requireFromEntryPointOrOwner();\\n        _call(dest, value, func);\\n    }\\n\\n    /**\\n     * @dev Interface function with the standard name for executeCall_s1m\\n     * @param dest Address of the contract to call\\n     * @param value Amount of native tokens to send along with the transaction\\n     * @param func Data of the transaction\\n     */\\n    function executeCall(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) external {\\n        executeCall_s1m(dest, value, func);\\n    }\\n\\n    /**\\n     * @dev Execute a sequence of transactions\\n     * @notice Name is optimized for this method to be cheaper to be called\\n     * @param dest Addresses of the contracts to call\\n     * @param value Amounts of native tokens to send along with the transactions\\n     * @param func Data of the transactions\\n     */\\n    function executeBatchCall_4by(\\n        address[] calldata dest,\\n        uint256[] calldata value,\\n        bytes[] calldata func\\n    ) public {\\n        _requireFromEntryPointOrOwner();\\n        if (\\n            dest.length == 0 ||\\n            dest.length != value.length ||\\n            value.length != func.length\\n        ) revert WrongBatchProvided(dest.length, value.length, func.length);\\n        for (uint256 i; i < dest.length; ) {\\n            _call(dest[i], value[i], func[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Interface function with the standard name for executeBatchCall_4by\\n     * @param dest Addresses of the contracts to call\\n     * @param value Amounts of native tokens to send along with the transactions\\n     * @param func Data of the transactions\\n     */\\n    function executeBatchCall(\\n        address[] calldata dest,\\n        uint256[] calldata value,\\n        bytes[] calldata func\\n    ) external {\\n        executeBatchCall_4by(dest, value, func);\\n    }\\n\\n    /**\\n     * @dev internal method that fecilitates the extenral calls from SmartAccount\\n     * @dev similar to execute() of Executor.sol\\n     * @param target destination address contract/non-contract\\n     * @param value amount of native tokens\\n     * @param data function singature of destination\\n     */\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        assembly {\\n            let success := call(\\n                gas(),\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            if iszero(success) {\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Implements the template method of BaseAccount and validates the user's signature for a given operation.\\n     * @notice This function is marked as internal and virtual, and it overrides the BaseAccount function of the same name.\\n     * @param userOp The user operation to be validated, provided as a `UserOperation` calldata struct.\\n     * @param userOpHash The hashed version of the user operation, provided as a `bytes32` value.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual override returns (uint256 validationData) {\\n        // below changes need formal verification.\\n        bytes calldata userOpData = userOp.callData;\\n        if (userOpData.length > 0) {\\n            bytes4 methodSig = bytes4(userOpData[:4]);\\n            // If method to be called is executeCall then only check for module transaction\\n            if (methodSig == this.executeCall.selector) {\\n                (address _to, uint _amount, bytes memory _data) = abi.decode(\\n                    userOpData[4:],\\n                    (address, uint, bytes)\\n                );\\n                if (address(modules[_to]) != address(0))\\n                    return IModule(_to).validateSignature(userOp, userOpHash);\\n            }\\n        }\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\n        if (owner != hash.recover(userOp.signature))\\n            return SIG_VALIDATION_FAILED;\\n        return 0;\\n    }\\n\\n    /**\\n     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)\\n     * @dev If owner is a smart-contract (other smart contract wallet or module, that controls\\n     *      signature verifications - like multisig), forward isValidSignature request to it.\\n     *      In case of multisig, _signature can be several concatenated signatures\\n     *      If owner is EOA, perform a regular ecrecover.\\n     * @param _dataHash 32 bytes hash of the data signed on the behalf of address(msg.sender)\\n     * @param _signature Signature byte array associated with _dataHash\\n     * @return bytes4 value.\\n     */\\n    function isValidSignature(\\n        bytes32 _dataHash,\\n        bytes memory _signature\\n    ) public view override returns (bytes4) {\\n        if (owner.code.length > 0) {\\n            return\\n                ISignatureValidator(owner).isValidSignature(\\n                    _dataHash,\\n                    _signature\\n                );\\n        }\\n        if (owner == _dataHash.recover(_signature)) {\\n            return EIP1271_MAGIC_VALUE;\\n        }\\n        return bytes4(0xffffffff);\\n    }\\n\\n    /**\\n     * @dev Check current account deposit in the entryPoint\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint().balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Deposit more funds for this account in the entryPoint\\n     */\\n    function addDeposit() public payable {\\n        entryPoint().depositTo{value: msg.value}(address(this));\\n    }\\n\\n    /**\\n     * @dev Withdraw value from the account's deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawDepositTo(\\n        address payable withdrawAddress,\\n        uint256 amount\\n    ) public payable onlyOwner {\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param _interfaceId The interface identifier, as specified in ERC165\\n     * @return `true` if the contract implements `_interfaceID`\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) external view virtual override returns (bool) {\\n        return _interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n\\n    /**\\n     * @dev This function is a special fallback function that is triggered when the contract receives Ether.\\n     * It logs an event indicating the amount of Ether received and the sender's address.\\n     * @notice This function is marked as external and payable, meaning it can be called from external\\n     * sources and accepts Ether as payment.\\n     */\\n    receive() external payable {\\n        require(address(this) != _self, \\\"only allowed via delegateCall\\\");\\n        emit SmartAccountReceivedNativeToken(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-contract-wallet/SmartAccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./BaseSmartAccount.sol\\\";\\nimport {DefaultCallbackHandler} from \\\"./handler/DefaultCallbackHandler.sol\\\";\\nimport {SmartAccountFactoryErrors} from \\\"./common/Errors.sol\\\";\\n\\n/**\\n * @title Smart Account Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\\n * @author Chirag Titiya - <chirag@biconomy.io>\\n */\\ncontract SmartAccountFactory {\\n    address public immutable basicImplementation;\\n    DefaultCallbackHandler public immutable minimalHandler;\\n\\n    event AccountCreation(\\n        address indexed account,\\n        address indexed owner,\\n        uint256 indexed index\\n    );\\n    event AccountCreationWithoutIndex(\\n        address indexed account,\\n        address indexed owner\\n    );\\n\\n    constructor(address _basicImplementation) {\\n        require(\\n            _basicImplementation != address(0),\\n            \\\"implementation cannot be zero\\\"\\n        );\\n        basicImplementation = _basicImplementation;\\n        minimalHandler = new DefaultCallbackHandler();\\n    }\\n\\n    /**\\n     * @dev Allows to retrieve the creation code used for the Proxy deployment.\\n     * @return The creation code for the Proxy.\\n     */\\n    function accountCreationCode() public pure returns (bytes memory) {\\n        return type(Proxy).creationCode;\\n    }\\n\\n    /**\\n     * @notice Deploys account using create2 and points it to basicImplementation\\n     * @param _owner EOA signatory for the account to be deployed\\n     * @param _index extra salt that allows to deploy more account if needed for same EOA (default 0)\\n     */\\n    function deployCounterFactualAccount(\\n        address _owner,\\n        uint256 _index\\n    ) public returns (address proxy) {\\n        // create initializer data based on init method, _owner and minimalHandler\\n        bytes memory initializer = getInitializer(_owner);\\n\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(keccak256(initializer), _index)\\n        );\\n\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(\\n                0x0,\\n                add(0x20, deploymentData),\\n                mload(deploymentData),\\n                salt\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n\\n        // calldata for init method\\n        if (initializer.length > 0) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(\\n                    call(\\n                        gas(),\\n                        proxy,\\n                        0,\\n                        add(initializer, 0x20),\\n                        mload(initializer),\\n                        0,\\n                        0\\n                    ),\\n                    0\\n                ) {\\n                    revert(0, 0)\\n                }\\n            }\\n        }\\n        emit AccountCreation(proxy, _owner, _index);\\n    }\\n\\n    /**\\n     * @notice Deploys account using create and points it to _implementation\\n     * @param _owner EOA signatory for the account to be deployed\\n     * @return proxy address of the deployed account\\n     */\\n    function deployAccount(address _owner) public returns (address proxy) {\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create(\\n                0x0,\\n                add(0x20, deploymentData),\\n                mload(deploymentData)\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create call failed\\\");\\n\\n        bytes memory initializer = getInitializer(_owner);\\n\\n        // calldata for init method\\n        if (initializer.length > 0) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                if eq(\\n                    call(\\n                        gas(),\\n                        proxy,\\n                        0,\\n                        add(initializer, 0x20),\\n                        mload(initializer),\\n                        0,\\n                        0\\n                    ),\\n                    0\\n                ) {\\n                    revert(0, 0)\\n                }\\n            }\\n        }\\n        emit AccountCreationWithoutIndex(proxy, _owner);\\n    }\\n\\n    /**\\n     * @dev Allows to retrieve the initializer data for the account.\\n     * @param _owner EOA signatory for the account to be deployed\\n     * @return initializer bytes for init method\\n     */\\n    function getInitializer(\\n        address _owner\\n    ) internal view returns (bytes memory) {\\n        return\\n            abi.encodeCall(\\n                BaseSmartAccount.init,\\n                (_owner, address(minimalHandler))\\n            );\\n    }\\n\\n    /**\\n     * @notice Allows to find out account address prior to deployment\\n     * @param _owner EOA signatory for the account to be deployed\\n     * @param _index extra salt that allows to deploy more accounts if needed for same EOA (default 0)\\n     */\\n    function getAddressForCounterFactualAccount(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (address _account) {\\n        // create initializer data based on init method, _owner and minimalHandler\\n        bytes memory initializer = getInitializer(_owner);\\n        bytes memory code = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(keccak256(initializer), _index)\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\\n        );\\n        _account = address(uint160(uint256(hash)));\\n    }\\n    // off-chain calculation\\n    // return ethers.utils.getCreate2Address(<factory address>, <create2 salt>, ethers.utils.keccak256(creationCode + implementation));\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basicImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AccountCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountCreationWithoutIndex\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deployAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deployCounterFactualAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAddressForCounterFactualAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalHandler\",\"outputs\":[{\"internalType\":\"contract DefaultCallbackHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartAccountFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000000006b7e42e01957da540dc6a8f7c30c4d816af5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}