{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AlgebraToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n/**\\n * @title BEP20Basic\\n * @dev Simpler version of BEP20 interface\\n */\\ncontract BEP20Basic {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address who) public view returns (uint256);\\n\\n    function transfer(address to, uint256 value) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is BEP20Basic {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) balances;\\n\\n    uint256 _totalSupply;\\n\\n    /**\\n     * @dev total number of tokens in existence\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev transfer token for a specified address\\n     * @param _to The address to transfer to.\\n     * @param _value The amount to be transferred.\\n     */\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[msg.sender]);\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _owner The address to query the the balance of.\\n     * @return An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n}\\n\\n/**\\n * @title BEP20 interface\\n */\\ncontract BEP20 is BEP20Basic {\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public returns (bool);\\n\\n    function approve(address spender, uint256 value) public returns (bool);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @title Standard BEP20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BEP20, BasicToken {\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        require(_to != address(0));\\n        require(_value <= balances[_from]);\\n        require(_value <= allowed[_from][msg.sender]);\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     *\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n     * @param _owner address The address which owns the funds.\\n     * @param _spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n     *\\n     * approve should be called when allowed[_spender] == 0. To increment\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseApproval(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = (\\n            allowed[msg.sender][_spender].add(_addedValue)\\n        );\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n     *\\n     * approve should be called when allowed[_spender] == 0. To decrement\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n     * the first transaction is mined)\\n     * From MonolithDAO Token.sol\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue > oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipRenounced(address indexed previousOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipRenounced(owner);\\n        owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address _newOwner) internal {\\n        require(_newOwner != address(0));\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n}\\n\\ncontract FreezableToken is StandardToken {\\n    // freezing chains\\n    mapping(bytes32 => uint64) internal chains;\\n    // freezing amounts for each chain\\n    mapping(bytes32 => uint256) internal freezings;\\n    // total freezing balance per address\\n    mapping(address => uint256) internal freezingBalance;\\n\\n    event Freezed(address indexed to, uint64 release, uint256 amount);\\n    event Released(address indexed owner, uint256 amount);\\n\\n    /**\\n     * @dev Gets the balance of the specified address include freezing tokens.\\n     * @param _owner The address to query the the balance of.\\n     * @return An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return super.balanceOf(_owner) + freezingBalance[_owner];\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address without freezing tokens.\\n     * @param _owner The address to query the the balance of.\\n     * @return An uint256 representing the amount owned by the passed address.\\n     */\\n    function actualBalanceOf(address _owner)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return super.balanceOf(_owner);\\n    }\\n\\n    function freezingBalanceOf(address _owner)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return freezingBalance[_owner];\\n    }\\n\\n    /**\\n     * @dev gets freezing count\\n     * @param _addr Address of freeze tokens owner.\\n     */\\n    function freezingCount(address _addr) public view returns (uint256 count) {\\n        uint64 release = chains[toKey(_addr, 0)];\\n        while (release != 0) {\\n            count++;\\n            release = chains[toKey(_addr, release)];\\n        }\\n    }\\n\\n    /**\\n     * @dev gets freezing end date and freezing balance for the freezing portion specified by index.\\n     * @param _addr Address of freeze tokens owner.\\n     * @param _index Freezing portion index. It ordered by release date descending.\\n     */\\n    function getFreezing(address _addr, uint256 _index)\\n        public\\n        view\\n        returns (uint64 _release, uint256 _balance)\\n    {\\n        for (uint256 i = 0; i < _index + 1; i++) {\\n            _release = chains[toKey(_addr, _release)];\\n            if (_release == 0) {\\n                return;\\n            }\\n        }\\n        _balance = freezings[toKey(_addr, _release)];\\n    }\\n\\n    /**\\n     * @dev freeze your tokens to the specified address.\\n     *      Be careful, gas usage is not deterministic,\\n     *      and depends on how many freezes _to address already has.\\n     * @param _to Address to which token will be freeze.\\n     * @param _amount Amount of token to freeze.\\n     * @param _until Release date, must be in future.\\n     */\\n    function freezeTo(\\n        address _to,\\n        uint256 _amount,\\n        uint64 _until\\n    ) public {\\n        require(_to != address(0));\\n        require(_amount <= balances[msg.sender]);\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\\n\\n        bytes32 currentKey = toKey(_to, _until);\\n        freezings[currentKey] = freezings[currentKey].add(_amount);\\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\\n\\n        freeze(_to, _until);\\n        emit Transfer(msg.sender, _to, _amount);\\n        emit Freezed(_to, _until, _amount);\\n    }\\n\\n    /**\\n     * @dev release first available freezing tokens.\\n     */\\n    function releaseOnce(address account) public {\\n        bytes32 headKey = toKey(account, 0);\\n        uint64 head = chains[headKey];\\n        require(head != 0);\\n        require(uint64(block.timestamp) > head);\\n        bytes32 currentKey = toKey(account, head);\\n\\n        uint64 next = chains[currentKey];\\n\\n        uint256 amount = freezings[currentKey];\\n        delete freezings[currentKey];\\n\\n        balances[account] = balances[account].add(amount);\\n        freezingBalance[account] = freezingBalance[account].sub(amount);\\n\\n        if (next == 0) {\\n            delete chains[headKey];\\n        } else {\\n            chains[headKey] = next;\\n            delete chains[currentKey];\\n        }\\n        emit Released(account, amount);\\n    }\\n\\n    /**\\n     * @dev release all available for release freezing tokens. Gas usage is not deterministic!\\n     * @return how many tokens was released\\n     */\\n    function releaseAll(address account) public returns (uint256 tokens) {\\n        uint256 release;\\n        uint256 balance;\\n        (release, balance) = getFreezing(account, 0);\\n        while (release != 0 && block.timestamp > release) {\\n            releaseOnce(account);\\n            tokens += balance;\\n            (release, balance) = getFreezing(account, 0);\\n        }\\n    }\\n\\n    function toKey(address _addr, uint256 _release)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        // WISH masc to increase entropy\\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\\n        assembly {\\n            result := or(result, mul(_addr, 0x10000000000000000))\\n            result := or(result, and(_release, 0xffffffffffffffff))\\n        }\\n    }\\n\\n    function freeze(address _to, uint64 _until) internal {\\n        require(_until > block.timestamp);\\n        bytes32 key = toKey(_to, _until);\\n        bytes32 parentKey = toKey(_to, uint64(0));\\n        uint64 next = chains[parentKey];\\n\\n        if (next == 0) {\\n            chains[parentKey] = _until;\\n            return;\\n        }\\n\\n        bytes32 nextKey = toKey(_to, next);\\n        uint256 parent;\\n\\n        while (next != 0 && _until > next) {\\n            parent = next;\\n            parentKey = nextKey;\\n\\n            next = chains[nextKey];\\n            nextKey = toKey(_to, next);\\n        }\\n\\n        if (_until == next) {\\n            return;\\n        }\\n\\n        if (next != 0) {\\n            chains[key] = next;\\n        }\\n\\n        chains[parentKey] = _until;\\n    }\\n}\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract BurnableToken is BasicToken {\\n    event Burn(address indexed burner, uint256 value);\\n\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param _value The amount of token to be burned.\\n     */\\n    function burn(uint256 _value) public {\\n        _burn(msg.sender, _value);\\n    }\\n\\n    function _burn(address _who, uint256 _value) internal {\\n        require(_value <= balances[_who]);\\n        // no need to require value <= totalSupply, since that would imply the\\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n        balances[_who] = balances[_who].sub(_value);\\n        _totalSupply = _totalSupply.sub(_value);\\n        emit Burn(_who, _value);\\n        emit Transfer(_who, address(0), _value);\\n    }\\n}\\n\\ncontract FreezableMintableToken is FreezableToken {\\n    /**\\n     * @dev Mint the specified amount of token to the specified address and freeze it until the specified date.\\n     *      Be careful, gas usage is not deterministic,\\n     *      and depends on how many freezes _to address already has.\\n     * @param _to Address to which token will be freeze.\\n     * @param _amount Amount of token to mint and freeze.\\n     * @param _until Release date, must be in future.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mintAndFreeze(\\n        address _to,\\n        uint256 _amount,\\n        uint64 _until\\n    ) internal returns (bool) {\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        bytes32 currentKey = toKey(_to, _until);\\n        freezings[currentKey] = freezings[currentKey].add(_amount);\\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\\n\\n        freeze(_to, _until);\\n        emit Freezed(_to, _until, _amount);\\n        emit Transfer(address(0), _to, _amount);\\n        return true;\\n    }\\n}\\n\\ncontract Consts {\\n    uint256 public constant TOKEN_DECIMALS = 18;\\n    uint8 public constant TOKEN_DECIMALS_UINT8 = 18;\\n    uint256 public constant TOKEN_DECIMAL_MULTIPLIER = 10**TOKEN_DECIMALS;\\n\\n    string public constant TOKEN_NAME = \\\"Algebra\\\";\\n    string public constant TOKEN_SYMBOL = \\\"ALGB\\\";\\n\\n    uint64 public constant months3 = 1643382000; // 1/28/2022\\n    uint64 public constant months6 = 1651158000; // 4/28/2022\\n    uint64 public constant months9 = 1659020400; // 7/28/2022\\n    uint64 public constant months12 = 1666969200; // 10/28/2022\\n    uint64 public constant months18 = 1682694000; // 4/28/2023\\n    uint64 public constant months24 = 1698505200; // 10/28/2023\\n    uint64 public constant months30 = 1714316400; // 4/28/2024\\n}\\n\\ncontract MainToken is Consts, FreezableMintableToken, BurnableToken, Ownable {\\n    address public sweepAddress;\\n\\n    constructor(\\n        address listingPool,\\n        address WishRbcAirDrop,\\n        address treasuryFund,\\n        address liquidityMining,\\n        address team,\\n        address funds\\n    ) public {\\n        _mint(treasuryFund, 140000000 * TOKEN_DECIMAL_MULTIPLIER);\\n        _mint(liquidityMining, 210000000 * TOKEN_DECIMAL_MULTIPLIER);\\n        _mint(listingPool, 20000000 * TOKEN_DECIMAL_MULTIPLIER);\\n        _mint(funds, 280000000 * TOKEN_DECIMAL_MULTIPLIER);\\n\\n        mintAndFreeze(team, 12500000 * TOKEN_DECIMAL_MULTIPLIER, months12);\\n        mintAndFreeze(team, 12500000 * TOKEN_DECIMAL_MULTIPLIER, months18);\\n        mintAndFreeze(team, 12500000 * TOKEN_DECIMAL_MULTIPLIER, months24);\\n        mintAndFreeze(team, 12500000 * TOKEN_DECIMAL_MULTIPLIER, months30);\\n\\n        mintAndFreeze(\\n            WishRbcAirDrop,\\n            12500000 * TOKEN_DECIMAL_MULTIPLIER,\\n            months6\\n        );\\n        mintAndFreeze(\\n            WishRbcAirDrop,\\n            12500000 * TOKEN_DECIMAL_MULTIPLIER,\\n            months9\\n        );\\n        mintAndFreeze(\\n            WishRbcAirDrop,\\n            12500000 * TOKEN_DECIMAL_MULTIPLIER,\\n            months12\\n        );\\n        mintAndFreeze(\\n            WishRbcAirDrop,\\n            12500000 * TOKEN_DECIMAL_MULTIPLIER,\\n            months24\\n        );\\n    }\\n\\n    function name() public pure returns (string _name) {\\n        return TOKEN_NAME;\\n    }\\n\\n    function symbol() public pure returns (string _symbol) {\\n        return TOKEN_SYMBOL;\\n    }\\n\\n    function decimals() public pure returns (uint8 _decimals) {\\n        return TOKEN_DECIMALS_UINT8;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool _success) {\\n        return super.transferFrom(_from, _to, _value);\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        public\\n        returns (bool _success)\\n    {\\n        return super.transfer(_to, _value);\\n    }\\n\\n    // sets new treasury fund address for tokens that accidentally transferred here\\n    function setSweepAddress(address _sweepAddress) external onlyOwner {\\n        sweepAddress = _sweepAddress;\\n    }\\n\\n    function sweep(BEP20Basic _token) external onlyOwner {\\n        _token.transfer(sweepAddress, _token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFreezing\",\"outputs\":[{\"name\":\"_release\",\"type\":\"uint64\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sweepAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months18\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"actualBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sweepAddress\",\"type\":\"address\"}],\"name\":\"setSweepAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_until\",\"type\":\"uint64\"}],\"name\":\"freezeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months9\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMAL_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseAll\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months30\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freezingCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months24\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS_UINT8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseOnce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"months12\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"listingPool\",\"type\":\"address\"},{\"name\":\"WishRbcAirDrop\",\"type\":\"address\"},{\"name\":\"treasuryFund\",\"type\":\"address\"},{\"name\":\"liquidityMining\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"address\"},{\"name\":\"funds\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"release\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "MainToken", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000001d8b6fa722230153be08c4fa4aa4b4c7cd01a95a00000000000000000000000081764b6e81d842d52d7791d20f335802af31c64a000000000000000000000000de0820170c2c104c275c33ff912f4c4ae4e1297600000000000000000000000085f351e5f1079ac8f30e259303d9b898b421188600000000000000000000000053f89e551a4eb21f6c5a4066da236aa074a4bc390000000000000000000000006d39df45c4459e666ed100f88883359efb3b032a", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}