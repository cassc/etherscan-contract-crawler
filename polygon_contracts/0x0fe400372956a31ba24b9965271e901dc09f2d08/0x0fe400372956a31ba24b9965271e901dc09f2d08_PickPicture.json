{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IrePointGames.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IrePointGames {\\n    function register(\\n        string memory _username,\\n        string memory _referral,\\n        address _userAddr,\\n        bytes32 _avatarId\\n    ) external payable;\\n    function userAddrRegistered(address userAddr) external view returns(bool);\\n    function userAddr(string memory username) external view returns(address);\\n    function userReferral(address userAddr) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/PickPicture/PickPicture.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IrePointGames.sol\\\";\\nimport \\\"../utils/PriceFeed.sol\\\";\\n\\ninterface ISys {\\n    function distribute() external;\\n}\\n\\ncontract PickPicture is PriceFeed, Ownable {\\n    using Strings for uint256;\\n\\n    IrePointGames public rePointGames;\\n    address payable public rePointPool;\\n    address payable public heroPool;\\n    address payable public systemPool;\\n\\n    uint256 public roundCounter;\\n    uint256 public totalEntered;\\n\\n    mapping(uint256 => Round) _rounds;\\n    mapping(address => Game) _userGame;\\n\\n    struct Game {\\n        uint256 entrance;\\n        uint256 points;\\n        uint256 earned;\\n    }\\n\\n    struct Round {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 totalEntered;\\n        uint256 totalPoints;\\n        uint256 pointValue;\\n        address[] users;\\n        address[] winners;\\n        mapping(address => Game[]) userGames;\\n        mapping(address => Game) userRound;\\n    }\\n\\n    constructor(\\n        IrePointGames _rePointGames,\\n        address _aggregator,\\n        address payable _rePointPool, \\n        address payable _heroPool, \\n        address payable _systemPool\\n    ) PriceFeed(_aggregator) {\\n        rePointGames = _rePointGames;\\n        rePointPool = _rePointPool;\\n        heroPool = _heroPool;\\n        systemPool = _systemPool;\\n        _rounds[roundCounter].startTime = block.timestamp;\\n    }\\n\\n    function changeRepoint(\\n        address payable _rePointPool, \\n        address payable _heroPool\\n    ) public onlyOwner {\\n        rePointPool = _rePointPool;\\n        heroPool = _heroPool;\\n    }\\n\\n    function roundPointValue(uint256 roundId) internal view returns(uint256) {\\n        uint256 denominator = _rounds[roundCounter].totalPoints;\\n        denominator = denominator > 0 ? denominator : 1;\\n        return _rounds[roundId].totalEntered * 70/100 / denominator;\\n    }\\n\\n    function newGame3(\\n        string memory _username,\\n        bytes32 _avatarId\\n    ) public payable {\\n        newGame2(_username, \\\"\\\", _avatarId);\\n    }\\n\\n    function newGame2(\\n        string memory _username,\\n        string memory _referral,\\n        bytes32 _avatarId\\n    ) public payable {\\n        rePointGames.register(\\n            _username, _referral, msg.sender, _avatarId\\n        );\\n        newGame1();\\n    }\\n\\n    function newGame1() public payable {\\n        address userAddr = msg.sender;\\n        Round storage round = _rounds[roundCounter];\\n        uint256 enterPricePOL = msg.value;\\n        require(\\n            rePointGames.userAddrRegistered(userAddr),\\n            \\\"PickPicture : First you have to register in rePoint Games\\\"\\n        );\\n        uint256 enterPriceUSD = enterPricePOL * POL_USD() /10 ** 18;\\n\\n        heroPool.transfer(enterPricePOL * 5/100);\\n        systemPool.transfer(enterPricePOL * 5/100);\\n        address referral = rePointGames.userReferral(userAddr);\\n        if(referral != address(0)) {\\n            payable(referral).transfer(enterPricePOL * 5/100);\\n            rePointPool.transfer(enterPricePOL * 15/100);\\n        } else {\\n            rePointPool.transfer(enterPricePOL * 20/100);\\n        }\\n\\n        if(round.userRound[userAddr].entrance == 0) {\\n            round.users.push(userAddr);\\n        }\\n\\n        _userGame[userAddr].entrance += enterPriceUSD;\\n        round.userGames[userAddr].push(Game(enterPriceUSD, 0, 0));\\n        round.userRound[userAddr].entrance += enterPriceUSD;\\n        round.totalEntered += enterPriceUSD;\\n        totalEntered += enterPriceUSD;\\n    }\\n\\n    function score(address userAddr, uint256 points) public onlyOwner {\\n        Round storage round = _rounds[roundCounter];\\n        uint256 len = round.userGames[userAddr].length;\\n        require(\\n            len > 0,\\n            \\\"PickPicture : The user has no games in this round\\\"\\n        );\\n\\n        uint256 userRoundPoints = round.userRound[userAddr].points;\\n        uint256 lastGamePoints = round.userGames[userAddr][len - 1].points;\\n        \\n        if(lastGamePoints == 0) {\\n            require(points != 0, \\\"PickPicture : What are you doing? zero points is not allowed to score.\\\");\\n        } else {\\n            round.userRound[userAddr].points -= lastGamePoints;\\n            round.totalPoints -= lastGamePoints;\\n            _userGame[userAddr].points -= lastGamePoints;\\n        }\\n        \\n        round.userGames[userAddr][len - 1].points = points;\\n        round.userRound[userAddr].points += points;\\n        round.totalPoints += points;\\n        _userGame[userAddr].points += points;\\n\\n        if(userRoundPoints == 0) {\\n            _rounds[roundCounter].winners.push(userAddr);\\n        }\\n    }\\n\\n    function distribute() public onlyOwner {\\n        Round storage round = _rounds[roundCounter];\\n        uint256 len = round.winners.length;\\n\\n        if(len > 0) {\\n            uint256 _pointValue = address(this).balance / round.totalPoints;\\n            address userAddr;\\n            uint256 earned;\\n            uint256 maticUSD = POL_USD();\\n            for(uint256 i; i < len; i++) {\\n                userAddr = round.winners[i];\\n                earned = round.userRound[userAddr].points * _pointValue;\\n                round.userRound[userAddr].earned = earned * maticUSD / 10 ** 18;\\n                _userGame[userAddr].earned += earned * maticUSD / 10 ** 18;\\n                payable(userAddr).transfer(earned);\\n            }\\n            round.pointValue = _pointValue * maticUSD / 10 ** 18;\\n        }\\n        ISys(systemPool).distribute();\\n\\n        round.endTime = block.timestamp;\\n        _rounds[roundCounter + 1].startTime = block.timestamp;\\n        roundCounter ++;\\n    }\\n\\n    function userCurrentRoundGames(address userAddr) public view returns(Game[] memory) {\\n        return userRoundGames(userAddr, roundCounter);\\n    }\\n\\n    function userRoundGames(address userAddr, uint256 roundId) public view returns(Game[] memory) {\\n        Round storage round = _rounds[roundId];\\n        return round.userGames[userAddr];\\n    }\\n\\n    function roundInfo(uint256 roundId) public view returns(string memory temp) {\\n        Round storage round = _rounds[roundId];\\n        temp = string.concat(\\n            \\\"PickPicture : {\\\",\\n                \\\"currentRoundId : \\\", roundCounter.toString(),\\n                \\\" ,totalEntered : \\\", totalEntered.toString(),\\n                \\\" ,roundStart : \\\", round.startTime.toString(),\\n                \\\" ,roundEnd : \\\", round.endTime.toString(),\\n                \\\" ,roundEntered : \\\", round.totalEntered.toString(),\\n                \\\" ,roundPoints : \\\", round.totalPoints.toString(),\\n                \\\" ,roundPointValue : \\\", roundPointValue(roundId).toString(),\\n                \\\" ,roundUsers : \\\", round.users.length.toString(),\\n                \\\" ,roundWiners : \\\", round.winners.length.toString(),\\n            \\\"}\\\"\\n        );\\n    }\\n\\n    function userRoundInfo(address userAddr, uint256 roundId) public view returns(string memory temp) {\\n        Round storage round = _rounds[roundId];\\n        temp = string.concat(\\n            \\\"PickPicture : {\\\",\\n                \\\"totalEntered : \\\", _userGame[userAddr].entrance.toString(),\\n                \\\" ,totalPoints : \\\", _userGame[userAddr].points.toString(),\\n                \\\" ,totalEarned : \\\", _userGame[userAddr].earned.toString(),\\n                \\\" ,roundEntered : \\\", round.userRound[userAddr].entrance.toString(),\\n                \\\" ,roundPoints : \\\", round.userRound[userAddr].points.toString(),\\n                \\\" ,roundEarned : \\\", round.userRound[userAddr].earned.toString(),\\n                \\\" ,roundGames : \\\", round.userGames[userAddr].length.toString(),\\n            \\\"}\\\"\\n        );\\n    }\\n\\n    function gameInfo() public view returns(string memory temp) {\\n        Round storage round = _rounds[roundCounter];\\n        temp = string.concat(\\n            \\\"PickPicture : {\\\",\\n                \\\"currentRoundId : \\\", roundCounter.toString(),\\n                \\\" ,totalEntered : \\\", totalEntered.toString(),\\n                \\\" ,roundStart : \\\", round.startTime.toString(),\\n                \\\" ,roundEnd : \\\", round.endTime.toString(),\\n                \\\" ,roundEntered : \\\", round.totalEntered.toString(),\\n                \\\" ,roundPoints : \\\", round.totalPoints.toString(),\\n                \\\" ,roundPointValue : \\\", roundPointValue(roundCounter).toString(),\\n                \\\" ,roundUsers : \\\", round.users.length.toString(),\\n                \\\" ,roundWiners : \\\", round.winners.length.toString(),\\n            \\\"}\\\"\\n        );\\n    }\\n\\n    function userGameInfo(address userAddr) public view returns(string memory temp) {\\n        Round storage round = _rounds[roundCounter];\\n        temp = string.concat(\\n            \\\"PickPicture : {\\\",\\n                \\\"totalEntered : \\\", _userGame[userAddr].entrance.toString(),\\n                \\\" ,totalPoints : \\\", _userGame[userAddr].points.toString(),\\n                \\\" ,totalEarned : \\\", _userGame[userAddr].earned.toString(),\\n                \\\" ,roundEntered : \\\", round.userRound[userAddr].entrance.toString(),\\n                \\\" ,roundPoints : \\\", round.userRound[userAddr].points.toString(),\\n                \\\" ,roundEarned : 0\\\",\\n                \\\" ,roundGames : \\\", round.userGames[userAddr].length.toString(),\\n            \\\"}\\\"\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\n\\nabstract contract PriceFeed {\\n    AggregatorInterface immutable AGGREGATOR_POL_USD;\\n\\n    uint256 public chainId;\\n\\n    constructor(\\n        address aggregatorAddr\\n    ) {\\n        AGGREGATOR_POL_USD = AggregatorInterface(aggregatorAddr);\\n        uint256 _chainId;\\n        assembly{\\n            _chainId := chainid()\\n        }\\n        chainId = _chainId;\\n    }\\n\\n    function POL_USD() public view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return uint256(AGGREGATOR_POL_USD.latestAnswer()) * 10 ** 10;\\n        }\\n    }\\n\\n    function USD_POL() public view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return 10 ** 26 / uint256(AGGREGATOR_POL_USD.latestAnswer());\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IrePointGames\",\"name\":\"_rePointGames\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_rePointPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_heroPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_systemPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POL_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_POL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_rePointPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_heroPool\",\"type\":\"address\"}],\"name\":\"changeRepoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"temp\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGame1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_referral\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_avatarId\",\"type\":\"bytes32\"}],\"name\":\"newGame2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_avatarId\",\"type\":\"bytes32\"}],\"name\":\"newGame3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rePointGames\",\"outputs\":[{\"internalType\":\"contract IrePointGames\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rePointPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"temp\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"score\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEntered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userCurrentRoundGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entrance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct PickPicture.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userGameInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"temp\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"userRoundGames\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entrance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"internalType\":\"struct PickPicture.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"userRoundInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"temp\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PickPicture", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000be7de8c957889aaeaccd801806b314fbb826c56b000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de00000000000000000000000002a88349b27d8e48aa5133dbcf2c5777347dee6720000000000000000000000008b633da1627b9fce1a4d93aa91cf9b23c1283097000000000000000000000000e5bded5d8c5a8427ba77c52ac4e4ce52586ceb32", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}