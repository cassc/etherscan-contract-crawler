{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IGameAccess.sol\\\";\\n\\ncontract AccessControl is Ownable {\\n    IGameAccess internal _gameAccess;\\n\\n    constructor(address gameAddress) {\\n        _gameAccess = IGameAccess(gameAddress);\\n    }\\n\\n    modifier onlyGameOwner() {\\n        bool isGameAdmin = checkAccess(msg.sender, _gameAccess.getGameAdminAddresses());\\n        bool isInternal = checkAccess(msg.sender, _gameAccess.getInterfaceAddresses());\\n        bool isOwner = msg.sender == owner();\\n        bool isGame = msg.sender == address(_gameAccess);\\n\\n        require(isGameAdmin || isInternal || isOwner || isGame, \\\"WorldAccess: caller is not GameOwner\\\");\\n        _;\\n    }\\n\\n    function setGameAddress(address gameAddress) public virtual onlyGameOwner {\\n        _gameAccess = IGameAccess(gameAddress);\\n    }\\n\\n    function checkAccess(address sender, address[] memory addresses) internal view returns(bool) {\\n        bool result = false;\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            if (addresses[i] == sender) {\\n                result = true;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/WorldAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IGameAccess.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\n\\ncontract WorldAccess is Ownable, AccessControl {\\n    uint256 internal _worldId;\\n\\n    constructor(uint256 worldId, address gameAddress)\\n    AccessControl(gameAddress) {\\n        _worldId = worldId;\\n    }\\n\\n    modifier onlyGame() {\\n        bool isInternal = checkAccess(msg.sender, _gameAccess.getInterfaceAddresses());\\n        bool isGameAdmin = checkAccess(msg.sender, _gameAccess.getGameAdminAddresses());\\n        bool isWorldOwner = checkAccess(msg.sender, _gameAccess.getWorldOwnerAddresses(_worldId));\\n        bool isItemPackNFT = checkAccess(msg.sender, _gameAccess.getItemPackNFTAddresses(_worldId));\\n        bool isOwner = msg.sender == owner();\\n        bool isGame = msg.sender == address(_gameAccess);\\n\\n        require(isInternal || isGameAdmin || isWorldOwner || isItemPackNFT || isOwner || isGame, \\\"WorldAccess: caller is not Game/Owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyWorldAdmin() {\\n        bool isGameAdmin = checkAccess(msg.sender, _gameAccess.getGameAdminAddresses());\\n        bool isWorldOwner = checkAccess(msg.sender, _gameAccess.getWorldOwnerAddresses(_worldId));\\n        bool isWorldAdmin = checkAccess(msg.sender, _gameAccess.getWorldAdminAddresses(_worldId));\\n        bool isOwner = msg.sender == owner();\\n        bool isGame = msg.sender == address(_gameAccess);\\n\\n        require(isWorldAdmin || isGameAdmin || isWorldOwner || isOwner || isGame, \\\"WorldAccess: caller is not WorldAdmin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/definitions/EventDefinition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../access/WorldAccess.sol\\\";\\n\\ncontract EventDefinition is WorldAccess {\\n    struct EventDefinitionRecord {\\n        uint256 eventDefinitionId;\\n        bool enabled;\\n        uint256 itemPackDefinitionId;\\n        address eventNftAddress;\\n        uint256 executableTimes;\\n        uint256 executableTimesPerUser;\\n        uint256 endPeriod;\\n        uint256 userExecutableInterval;\\n        bool gpsCheckEnabled;\\n    }\\n\\n    mapping(uint256 => EventDefinitionRecord) private _eventDefinitions;\\n\\n    constructor(uint256 worldId, address gameAddress)\\n    WorldAccess(worldId, gameAddress) {\\n    }\\n\\n    function getItemPackDefinitionId(uint256 eventDefinitionId) public virtual view returns(uint256) {\\n        EventDefinitionRecord memory record = _eventDefinitions[eventDefinitionId];\\n\\n        return record.itemPackDefinitionId;\\n    }\\n\\n    function getEventDefinition(uint256 eventDefinitionId) external virtual view returns(\\n            uint256, bool, uint256, address, uint256, uint256, uint256, uint256, bool) {\\n        EventDefinitionRecord memory record = _eventDefinitions[eventDefinitionId];\\n\\n        return (\\n            record.eventDefinitionId,\\n            record.enabled,\\n            record.itemPackDefinitionId,\\n            record.eventNftAddress,\\n            record.executableTimes,\\n            record.executableTimesPerUser,\\n            record.endPeriod,\\n            record.userExecutableInterval,\\n            record.gpsCheckEnabled\\n        );\\n    }\\n\\n    function setEventDefinitions(EventDefinitionRecord[] memory eventDefinitions_) public virtual onlyWorldAdmin {\\n        for (uint256 i = 0; i < eventDefinitions_.length; i++) {\\n            EventDefinitionRecord memory record = eventDefinitions_[i];\\n            _addEventDefinition(\\n                record.eventDefinitionId,\\n                record.enabled,\\n                record.itemPackDefinitionId,\\n                record.eventNftAddress,\\n                record.executableTimes,\\n                record.executableTimesPerUser,\\n                record.endPeriod,\\n                record.userExecutableInterval,\\n                record.gpsCheckEnabled\\n            );\\n        }\\n    }\\n\\n    function _addEventDefinition(\\n        uint256 eventDefinitionId,\\n        bool enabled_,\\n        uint256 itemPackDefinitionId_,\\n        address eventNftAddress_,\\n        uint256 executableTimes_,\\n        uint256 executableTimesPerUser_,\\n        uint256 endPeriod_,\\n        uint256 userExecutableInterval,\\n        bool gpsCheckEnabled\\n    ) private {\\n        _eventDefinitions[eventDefinitionId] = EventDefinitionRecord(\\n            eventDefinitionId,\\n            enabled_,\\n            itemPackDefinitionId_,\\n            eventNftAddress_,\\n            executableTimes_,\\n            executableTimesPerUser_,\\n            endPeriod_,\\n            userExecutableInterval,\\n            gpsCheckEnabled\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGameAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IGameAccess {\\n    function getInterfaceAddresses() external view returns(address[] memory);\\n    function getWorldOwnerAddresses(uint256 worldId) external view returns(address[] memory);\\n    function getWorldAdminAddresses(uint256 worldId) external view returns(address[] memory);\\n    function getGameAdminAddresses() external view returns(address[] memory);\\n    function getTokenOwnerAddress(uint256 worldId, uint256 tokenId) external view returns(address);\\n    function getItemPackNFTAddresses(uint256 worldId) external view returns(address[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"worldId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventDefinitionId\",\"type\":\"uint256\"}],\"name\":\"getEventDefinition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventDefinitionId\",\"type\":\"uint256\"}],\"name\":\"getItemPackDefinitionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventDefinitionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"itemPackDefinitionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"eventNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executableTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executableTimesPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userExecutableInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gpsCheckEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct EventDefinition.EventDefinitionRecord[]\",\"name\":\"eventDefinitions_\",\"type\":\"tuple[]\"}],\"name\":\"setEventDefinitions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"}],\"name\":\"setGameAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EventDefinition", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000300000000000000000000000017cd61a2b4aba15df88c8a5f26b61f0d2b2e2b8c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}