{"SourceCode": "// File: contracts/compliance/modular/modules/IModule.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IModule {\r\n\r\n    /// events\r\n\r\n    /**\r\n     *  this event is emitted when the compliance contract is bound to the module.\r\n     *  the event is emitted by the bindCompliance function\r\n     *  `_compliance` is the address of the compliance contract being bound\r\n     */\r\n    event ComplianceBound(address indexed _compliance);\r\n\r\n    /**\r\n     *  this event is emitted when the compliance contract is unbound from the module.\r\n     *  the event is emitted by the unbindCompliance function\r\n     *  `_compliance` is the address of the compliance contract being unbound\r\n     */\r\n    event ComplianceUnbound(address indexed _compliance);\r\n\r\n    /// functions\r\n\r\n    /**\r\n     *  @dev binds the module to a compliance contract\r\n     *  once the module is bound, the compliance contract can interact with the module\r\n     *  this function can be called ONLY by the compliance contract itself (_compliance), through the\r\n     *  addModule function, which calls bindCompliance\r\n     *  the module cannot be already bound to the compliance\r\n     *  @param _compliance address of the compliance contract\r\n     *  Emits a ComplianceBound event\r\n     */\r\n    function bindCompliance(address _compliance) external;\r\n\r\n    /**\r\n     *  @dev unbinds the module from a compliance contract\r\n     *  once the module is unbound, the compliance contract cannot interact with the module anymore\r\n     *  this function can be called ONLY by the compliance contract itself (_compliance), through the\r\n     *  removeModule function, which calls unbindCompliance\r\n     *  @param _compliance address of the compliance contract\r\n     *  Emits a ComplianceUnbound event\r\n     */\r\n    function unbindCompliance(address _compliance) external;\r\n\r\n    /**\r\n     *  @dev action performed on the module during a transfer action\r\n     *  this function is used to update variables of the module upon transfer if it is required\r\n     *  if the module does not require state updates in case of transfer, this function remains empty\r\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\r\n     *  This function can be called only on a compliance contract that is bound to the module\r\n     *  @param _from address of the transfer sender\r\n     *  @param _to address of the transfer receiver\r\n     *  @param _value amount of tokens sent\r\n     */\r\n    function moduleTransferAction(address _from, address _to, uint256 _value) external;\r\n\r\n    /**\r\n     *  @dev action performed on the module during a mint action\r\n     *  this function is used to update variables of the module upon minting if it is required\r\n     *  if the module does not require state updates in case of mint, this function remains empty\r\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\r\n     *  This function can be called only on a compliance contract that is bound to the module\r\n     *  @param _to address used for minting\r\n     *  @param _value amount of tokens minted\r\n     */\r\n    function moduleMintAction(address _to, uint256 _value) external;\r\n\r\n    /**\r\n     *  @dev action performed on the module during a burn action\r\n     *  this function is used to update variables of the module upon burning if it is required\r\n     *  if the module does not require state updates in case of burn, this function remains empty\r\n     *  This function can be called ONLY by the compliance contract itself (_compliance)\r\n     *  This function can be called only on a compliance contract that is bound to the module\r\n     *  @param _from address on which tokens are burnt\r\n     *  @param _value amount of tokens burnt\r\n     */\r\n    function moduleBurnAction(address _from, uint256 _value) external;\r\n\r\n    /**\r\n     *  @dev compliance check on the module for a specific transaction on a specific compliance contract\r\n     *  this function is used to check if the transfer is allowed by the module\r\n     *  This function can be called only on a compliance contract that is bound to the module\r\n     *  @param _from address of the transfer sender\r\n     *  @param _to address of the transfer receiver\r\n     *  @param _value amount of tokens sent\r\n     *  @param _compliance address of the compliance contract concerned by the transfer action\r\n     *  the function returns TRUE if the module allows the transfer, FALSE otherwise\r\n     */\r\n    function moduleCheck(address _from, address _to, uint256 _value, address _compliance) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev getter for compliance binding status on module\r\n     *  @param _compliance address of the compliance contract\r\n     */\r\n    function isComplianceBound(address _compliance) external view returns (bool);\r\n}\r\n\r\n// File: contracts/compliance/modular/MCStorage.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MCStorage {\r\n    /// token linked to the compliance contract\r\n    address internal _tokenBound;\r\n\r\n    /// Array of modules bound to the compliance\r\n    address[] internal _modules;\r\n\r\n    /// Mapping of module binding status\r\n    mapping(address => bool) internal _moduleBound;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/compliance/modular/IModularCompliance.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IModularCompliance {\r\n\r\n    /// events\r\n\r\n    /**\r\n     *  @dev Event emitted for each executed interaction with a module contract.\r\n     *  For gas efficiency, only the interaction calldata selector (first 4\r\n     *  bytes) is included in the event. For interactions without calldata or\r\n     *  whose calldata is shorter than 4 bytes, the selector will be `0`.\r\n     */\r\n    event ModuleInteraction(address indexed target, bytes4 selector);\r\n\r\n    /**\r\n     *  this event is emitted when a token has been bound to the compliance contract\r\n     *  the event is emitted by the bindToken function\r\n     *  `_token` is the address of the token to bind\r\n     */\r\n    event TokenBound(address _token);\r\n\r\n    /**\r\n     *  this event is emitted when a token has been unbound from the compliance contract\r\n     *  the event is emitted by the unbindToken function\r\n     *  `_token` is the address of the token to unbind\r\n     */\r\n    event TokenUnbound(address _token);\r\n\r\n    /**\r\n     *  this event is emitted when a module has been added to the list of modules bound to the compliance contract\r\n     *  the event is emitted by the addModule function\r\n     *  `_module` is the address of the compliance module\r\n     */\r\n    event ModuleAdded(address indexed _module);\r\n\r\n    /**\r\n     *  this event is emitted when a module has been removed from the list of modules bound to the compliance contract\r\n     *  the event is emitted by the removeModule function\r\n     *  `_module` is the address of the compliance module\r\n     */\r\n    event ModuleRemoved(address indexed _module);\r\n\r\n    /// functions\r\n\r\n    /**\r\n     *  @dev binds a token to the compliance contract\r\n     *  @param _token address of the token to bind\r\n     *  This function can be called ONLY by the owner of the compliance contract\r\n     *  Emits a TokenBound event\r\n     */\r\n    function bindToken(address _token) external;\r\n\r\n    /**\r\n     *  @dev unbinds a token from the compliance contract\r\n     *  @param _token address of the token to unbind\r\n     *  This function can be called ONLY by the owner of the compliance contract\r\n     *  Emits a TokenUnbound event\r\n     */\r\n    function unbindToken(address _token) external;\r\n\r\n    /**\r\n     *  @dev adds a module to the list of compliance modules\r\n     *  @param _module address of the module to add\r\n     *  there cannot be more than 25 modules bound to the modular compliance for gas cost reasons\r\n     *  This function can be called ONLY by the owner of the compliance contract\r\n     *  Emits a ModuleAdded event\r\n     */\r\n    function addModule(address _module) external;\r\n\r\n    /**\r\n     *  @dev removes a module from the list of compliance modules\r\n     *  @param _module address of the module to remove\r\n     *  This function can be called ONLY by the owner of the compliance contract\r\n     *  Emits a ModuleRemoved event\r\n     */\r\n    function removeModule(address _module) external;\r\n\r\n    /**\r\n     *  @dev calls any function on bound modules\r\n     *  can be called only on bound modules\r\n     *  @param callData the bytecode for interaction with the module, abi encoded\r\n     *  @param _module The address of the module\r\n     *  This function can be called only by the modular compliance owner\r\n     *  emits a `ModuleInteraction` event\r\n     */\r\n    function callModuleFunction(bytes calldata callData, address _module) external;\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are transferred\r\n     *  from one wallet to another\r\n     *  this function can update state variables in the modules bound to the compliance\r\n     *  these state variables being used by the module checks to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the modules\r\n     *  This function can be called ONLY by the token contract bound to the compliance\r\n     *  @param _from The address of the sender\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     *  This function calls moduleTransferAction() on each module bound to the compliance contract\r\n     */\r\n    function transferred(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are created on a wallet\r\n     *  this function can update state variables in the modules bound to the compliance\r\n     *  these state variables being used by the module checks to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the modules\r\n     *  This function can be called ONLY by the token contract bound to the compliance\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the minting\r\n     *  This function calls moduleMintAction() on each module bound to the compliance contract\r\n     */\r\n    function created(address _to, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev function called whenever tokens are destroyed from a wallet\r\n     *  this function can update state variables in the modules bound to the compliance\r\n     *  these state variables being used by the module checks to decide if a transfer\r\n     *  is compliant or not depending on the values stored in these state variables and on\r\n     *  the parameters of the modules\r\n     *  This function can be called ONLY by the token contract bound to the compliance\r\n     *  @param _from The address on which tokens are burnt\r\n     *  @param _amount The amount of tokens involved in the burn\r\n     *  This function calls moduleBurnAction() on each module bound to the compliance contract\r\n     */\r\n    function destroyed(address _from, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev checks that the transfer is compliant.\r\n     *  default compliance always returns true\r\n     *  READ ONLY FUNCTION, this function cannot be used to increment\r\n     *  counters, emit events, ...\r\n     *  @param _from The address of the sender\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The amount of tokens involved in the transfer\r\n     *  This function will call moduleCheck() on every module bound to the compliance\r\n     *  If each of the module checks return TRUE, this function will return TRUE as well\r\n     *  returns FALSE otherwise\r\n     */\r\n    function canTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev getter for the modules bound to the compliance contract\r\n     *  returns address array of module contracts bound to the compliance\r\n     */\r\n    function getModules() external view returns (address[] memory);\r\n\r\n    /**\r\n     *  @dev getter for the address of the token bound\r\n     *  returns the address of the token\r\n     */\r\n    function getTokenBound() external view returns (address);\r\n\r\n    /**\r\n     *  @dev checks if a module is bound to the compliance contract\r\n     *  returns true if module is bound, false otherwise\r\n     */\r\n    function isModuleBound(address _module) external view returns (bool);\r\n}\r\n\r\n// File: contracts/registry/interface/IClaimTopicsRegistry.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IClaimTopicsRegistry {\r\n    /**\r\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\r\n     *  the event is emitted by the 'addClaimTopic' function\r\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\r\n     */\r\n    event ClaimTopicAdded(uint256 indexed claimTopic);\r\n\r\n    /**\r\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\r\n     *  the event is emitted by the 'removeClaimTopic' function\r\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\r\n     */\r\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\r\n\r\n    /**\r\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\r\n     * Only owner can call.\r\n     * emits `ClaimTopicAdded` event\r\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\r\n     * @param _claimTopic The claim topic index\r\n     */\r\n    function addClaimTopic(uint256 _claimTopic) external;\r\n\r\n    /**\r\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\r\n     *  Only owner can call.\r\n     *  emits `ClaimTopicRemoved` event\r\n     *  @param _claimTopic The claim topic index\r\n     */\r\n    function removeClaimTopic(uint256 _claimTopic) external;\r\n\r\n    /**\r\n     *  @dev Get the trusted claim topics for the security token\r\n     *  @return Array of trusted claim topics\r\n     */\r\n    function getClaimTopics() external view returns (uint256[] memory);\r\n}\r\n\r\n// File: @onchain-id/solidity/contracts/interface/IERC735.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\r\n */\r\ninterface IERC735 {\r\n\r\n    /**\r\n     * @dev Emitted when a claim was added.\r\n     *\r\n     * Specification: MUST be triggered when a claim was successfully added.\r\n     */\r\n    event ClaimAdded(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri);\r\n\r\n    /**\r\n     * @dev Emitted when a claim was removed.\r\n     *\r\n     * Specification: MUST be triggered when removeClaim was successfully called.\r\n     */\r\n    event ClaimRemoved(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri);\r\n\r\n    /**\r\n     * @dev Emitted when a claim was changed.\r\n     *\r\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\r\n     */\r\n    event ClaimChanged(\r\n        bytes32 indexed claimId,\r\n        uint256 indexed topic,\r\n        uint256 scheme,\r\n        address indexed issuer,\r\n        bytes signature,\r\n        bytes data,\r\n        string uri);\r\n\r\n    /**\r\n     * @dev Add or update a claim.\r\n     *\r\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\r\n     *\r\n     * Specification: Add or update a claim from an issuer.\r\n     *\r\n     * _signature is a signed message of the following structure:\r\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\r\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\r\n     */\r\n    function addClaim(\r\n        uint256 _topic,\r\n        uint256 _scheme,\r\n        address issuer,\r\n        bytes calldata _signature,\r\n        bytes calldata _data,\r\n        string calldata _uri)\r\n    external returns (bytes32 claimRequestId);\r\n\r\n    /**\r\n     * @dev Removes a claim.\r\n     *\r\n     * Triggers Event: `ClaimRemoved`\r\n     *\r\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\r\n     */\r\n    function removeClaim(bytes32 _claimId) external returns (bool success);\r\n\r\n    /**\r\n     * @dev Get a claim by its ID.\r\n     *\r\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\r\n     */\r\n    function getClaim(bytes32 _claimId)\r\n    external view returns(\r\n        uint256 topic,\r\n        uint256 scheme,\r\n        address issuer,\r\n        bytes memory signature,\r\n        bytes memory data,\r\n        string memory uri);\r\n\r\n    /**\r\n     * @dev Returns an array of claim IDs by topic.\r\n     */\r\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\r\n}\r\n\r\n// File: @onchain-id/solidity/contracts/interface/IERC734.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\r\n */\r\ninterface IERC734 {\r\n\r\n    /**\r\n     * @dev Emitted when an execution request was approved.\r\n     *\r\n     * Specification: MUST be triggered when approve was successfully called.\r\n     */\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when an execute operation was approved and successfully performed.\r\n     *\r\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\r\n     */\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when an execution request was performed via `execute`.\r\n     *\r\n     * Specification: MUST be triggered when execute was successfully called.\r\n     */\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when an execute operation was called and failed\r\n     *\r\n     * Specification: MUST be triggered when execute call failed\r\n     */\r\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when a key was added to the Identity.\r\n     *\r\n     * Specification: MUST be triggered when addKey was successfully called.\r\n     */\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\r\n    /**\r\n     * @dev Emitted when a key was removed from the Identity.\r\n     *\r\n     * Specification: MUST be triggered when removeKey was successfully called.\r\n     */\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\r\n    /**\r\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\r\n     *\r\n     * Triggers Event: `KeyAdded`\r\n     *\r\n     * Specification: MUST only be done by keys of purpose 1, or the identity\r\n     * itself. If it's the identity itself, the approval process will determine its approval.\r\n     */\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\r\n\r\n    /**\r\n    * @dev Approves an execution.\r\n    *\r\n    * Triggers Event: `Approved`\r\n    * Triggers on execution successful Event: `Executed`\r\n    * Triggers on execution failure Event: `ExecutionFailed`\r\n    */\r\n    function approve(uint256 _id, bool _approve) external returns (bool success);\r\n\r\n    /**\r\n     * @dev Removes _purpose for _key from the identity.\r\n     *\r\n     * Triggers Event: `KeyRemoved`\r\n     *\r\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\r\n     * If it's the identity itself, the approval process will determine its approval.\r\n     */\r\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\r\n\r\n    /**\r\n     * @dev Passes an execution instruction to an ERC734 identity.\r\n     * How the execution is handled is up to the identity implementation:\r\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\r\n     * approve this execution.\r\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\r\n     *\r\n     * Triggers Event: ExecutionRequested\r\n     * Triggers on direct execution Event: Executed\r\n     */\r\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\r\n\r\n    /**\r\n     * @dev Returns the full key data, if present in the identity.\r\n     */\r\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\r\n\r\n    /**\r\n     * @dev Returns the list of purposes associated with a key.\r\n     */\r\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\r\n\r\n    /**\r\n     * @dev Returns an array of public key bytes32 held by this identity.\r\n     */\r\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\r\n\r\n    /**\r\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\r\n     */\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\r\n}\r\n\r\n// File: @onchain-id/solidity/contracts/interface/IIdentity.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ninterface IIdentity is IERC734, IERC735 {}\r\n\r\n// File: contracts/registry/interface/IIdentityRegistryStorage.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IIdentityRegistryStorage {\r\n\r\n    /// events\r\n\r\n    /**\r\n     *  this event is emitted when an Identity is registered into the storage contract.\r\n     *  the event is emitted by the 'registerIdentity' function\r\n     *  `investorAddress` is the address of the investor's wallet\r\n     *  `identity` is the address of the Identity smart contract (onchainID)\r\n     */\r\n    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity is removed from the storage contract.\r\n     *  the event is emitted by the 'deleteIdentity' function\r\n     *  `investorAddress` is the address of the investor's wallet\r\n     *  `identity` is the address of the Identity smart contract (onchainID)\r\n     */\r\n    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity has been updated\r\n     *  the event is emitted by the 'updateIdentity' function\r\n     *  `oldIdentity` is the old Identity contract's address to update\r\n     *  `newIdentity` is the new Identity contract's\r\n     */\r\n    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity's country has been updated\r\n     *  the event is emitted by the 'updateCountry' function\r\n     *  `investorAddress` is the address on which the country has been updated\r\n     *  `country` is the numeric code (ISO 3166-1) of the new country\r\n     */\r\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity Registry is bound to the storage contract\r\n     *  the event is emitted by the 'addIdentityRegistry' function\r\n     *  `identityRegistry` is the address of the identity registry added\r\n     */\r\n    event IdentityRegistryBound(address indexed identityRegistry);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\r\n     *  the event is emitted by the 'removeIdentityRegistry' function\r\n     *  `identityRegistry` is the address of the identity registry removed\r\n     */\r\n    event IdentityRegistryUnbound(address indexed identityRegistry);\r\n\r\n    /// functions\r\n\r\n    /**\r\n     *  @dev adds an identity contract corresponding to a user address in the storage.\r\n     *  Requires that the user doesn't have an identity contract already registered.\r\n     *  This function can only be called by an address set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _identity The address of the user's identity contract\r\n     *  @param _country The country of the investor\r\n     *  emits `IdentityStored` event\r\n     */\r\n    function addIdentityToStorage(\r\n        address _userAddress,\r\n        IIdentity _identity,\r\n        uint16 _country\r\n    ) external;\r\n\r\n    /**\r\n     *  @dev Removes an user from the storage.\r\n     *  Requires that the user have an identity contract already deployed that will be deleted.\r\n     *  This function can only be called by an address set as agent of the smart contract\r\n     *  @param _userAddress The address of the user to be removed\r\n     *  emits `IdentityUnstored` event\r\n     */\r\n    function removeIdentityFromStorage(address _userAddress) external;\r\n\r\n    /**\r\n     *  @dev Updates the country corresponding to a user address.\r\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\r\n     *  This function can only be called by an address set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _country The new country of the user\r\n     *  emits `CountryModified` event\r\n     */\r\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\r\n\r\n    /**\r\n     *  @dev Updates an identity contract corresponding to a user address.\r\n     *  Requires that the user address should be the owner of the identity contract.\r\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\r\n     *  This function can only be called by an address set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _identity The address of the user's new identity contract\r\n     *  emits `IdentityModified` event\r\n     */\r\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\r\n\r\n    /**\r\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\r\n     *  This function can only be called by the wallet set as owner of the smart contract\r\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\r\n     *  cannot bind more than 300 IR to 1 IRS\r\n     *  @param _identityRegistry The identity registry address to add.\r\n     */\r\n    function bindIdentityRegistry(address _identityRegistry) external;\r\n\r\n    /**\r\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\r\n     *  This function can only be called by the wallet set as owner of the smart contract\r\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\r\n     *  @param _identityRegistry The identity registry address to remove.\r\n     */\r\n    function unbindIdentityRegistry(address _identityRegistry) external;\r\n\r\n    /**\r\n     *  @dev Returns the identity registries linked to the storage contract\r\n     */\r\n    function linkedIdentityRegistries() external view returns (address[] memory);\r\n\r\n    /**\r\n     *  @dev Returns the onchainID of an investor.\r\n     *  @param _userAddress The wallet of the investor\r\n     */\r\n    function storedIdentity(address _userAddress) external view returns (IIdentity);\r\n\r\n    /**\r\n     *  @dev Returns the country code of an investor.\r\n     *  @param _userAddress The wallet of the investor\r\n     */\r\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\r\n}\r\n\r\n// File: @onchain-id/solidity/contracts/interface/IClaimIssuer.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IClaimIssuer is IIdentity {\r\n\r\n    /**\r\n     * @dev Emitted when a claim is revoked.\r\n     *\r\n     * Specification: MUST be triggered when revoking a claim.\r\n     */\r\n    event ClaimRevoked(bytes indexed signature);\r\n\r\n    /**\r\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\r\n     * @notice will fetch the claim from the identity contract (unsafe).\r\n     * @param _claimId the id of the claim\r\n     * @param _identity the address of the identity contract\r\n     * @return isRevoked true when the claim is revoked\r\n     */\r\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\r\n\r\n    /**\r\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\r\n     * @param signature the signature of the claim\r\n     */\r\n    function revokeClaimBySignature(bytes calldata signature) external;\r\n\r\n    /**\r\n     * @dev Returns revocation status of a claim.\r\n     * @param _sig the signature of the claim\r\n     * @return isRevoked true if the claim is revoked and false otherwise\r\n     */\r\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Checks if a claim is valid.\r\n     * @param _identity the identity contract related to the claim\r\n     * @param claimTopic the claim topic of the claim\r\n     * @param sig the signature of the claim\r\n     * @param data the data field of the claim\r\n     * @return claimValid true if the claim is valid, false otherwise\r\n     */\r\n    function isClaimValid(\r\n        IIdentity _identity,\r\n        uint256 claimTopic,\r\n        bytes calldata sig,\r\n        bytes calldata data)\r\n    external view returns (bool);\r\n\r\n    /**\r\n     * @dev returns the address that signed the given data\r\n     * @param sig the signature of the data\r\n     * @param dataHash the data that was signed\r\n     * returns the address that signed dataHash and created the signature sig\r\n     */\r\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\r\n}\r\n\r\n// File: contracts/registry/interface/ITrustedIssuersRegistry.sol\r\n\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface ITrustedIssuersRegistry {\r\n    /**\r\n     *  this event is emitted when a trusted issuer is added in the registry.\r\n     *  the event is emitted by the addTrustedIssuer function\r\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\r\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\r\n     */\r\n    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\r\n\r\n    /**\r\n     *  this event is emitted when a trusted issuer is removed from the registry.\r\n     *  the event is emitted by the removeTrustedIssuer function\r\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\r\n     */\r\n    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\r\n\r\n    /**\r\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\r\n     *  the event is emitted by the updateIssuerClaimTopics function\r\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\r\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\r\n     */\r\n    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\r\n\r\n    /**\r\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\r\n     *  Requires that a ClaimIssuer contract doesn't already exist\r\n     *  Requires that the claimTopics set is not empty\r\n     *  Requires that there is no more than 15 claimTopics\r\n     *  Requires that there is no more than 50 Trusted issuers\r\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\r\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\r\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\r\n     *  emits a `TrustedIssuerAdded` event\r\n     */\r\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\r\n\r\n    /**\r\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\r\n     *  Requires that the claim issuer contract to be registered first\r\n     *  @param _trustedIssuer the claim issuer to remove.\r\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\r\n     *  emits a `TrustedIssuerRemoved` event\r\n     */\r\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\r\n\r\n    /**\r\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\r\n     *  Requires that this ClaimIssuer contract already exists in the registry\r\n     *  Requires that the provided claimTopics set is not empty\r\n     *  Requires that there is no more than 15 claimTopics\r\n     *  @param _trustedIssuer the claim issuer to update.\r\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\r\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\r\n     *  emits a `ClaimTopicsUpdated` event\r\n     */\r\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\r\n\r\n    /**\r\n     *  @dev Function for getting all the trusted claim issuers stored.\r\n     *  @return array of all claim issuers registered.\r\n     */\r\n    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\r\n\r\n    /**\r\n     *  @dev Function for getting all the trusted issuer allowed for a given claim topic.\r\n     *  @param claimTopic the claim topic to get the trusted issuers for.\r\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\r\n     */\r\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view returns (IClaimIssuer[] memory);\r\n\r\n    /**\r\n     *  @dev Checks if the ClaimIssuer contract is trusted\r\n     *  @param _issuer the address of the ClaimIssuer contract\r\n     *  @return true if the issuer is trusted, false otherwise.\r\n     */\r\n    function isTrustedIssuer(address _issuer) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev Function for getting all the claim topic of trusted claim issuer\r\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\r\n     *  @param _trustedIssuer the trusted issuer concerned.\r\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\r\n     */\r\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     *  @dev Function for checking if the trusted claim issuer is allowed\r\n     *  to emit a certain claim topic\r\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\r\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\r\n     *  @return true if the issuer is trusted for this claim topic.\r\n     */\r\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\r\n}\r\n\r\n// File: contracts/registry/interface/IIdentityRegistry.sol\r\n\r\n\r\n//\r\n//                                             :+#####%%%%%%%%%%%%%%+\r\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\r\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\r\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\r\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\r\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\r\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\r\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\r\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\r\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\r\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\r\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\r\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\r\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\r\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\r\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\r\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\r\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\r\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\r\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\r\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\r\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\r\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\r\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\r\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\r\n//                                          +@@@@@. =@@@=  .+@@@@@*:\r\n//                                          #@@@@#:%@@#. :*@@@@#-\r\n//                                          @@@@@%@@@= :#@@@@+.\r\n//                                         :@@@@@@@#.:#@@@%-\r\n//                                         +@@@@@@-.*@@@*:\r\n//                                         #@@@@#.=@@@+.\r\n//                                         @@@@+-%@%=\r\n//                                        :@@@#%@%=\r\n//                                        +@@@@%-\r\n//                                        :#%%=\r\n//\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IIdentityRegistry {\r\n    /**\r\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\r\n     *  the event is emitted by the IdentityRegistry constructor\r\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\r\n     */\r\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\r\n\r\n    /**\r\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\r\n     *  the event is emitted by the IdentityRegistry constructor\r\n     *  `identityStorage` is the address of the Identity Registry Storage contract\r\n     */\r\n    event IdentityStorageSet(address indexed identityStorage);\r\n\r\n    /**\r\n     *  this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry\r\n     *  the event is emitted by the IdentityRegistry constructor\r\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\r\n     */\r\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity is registered into the Identity Registry.\r\n     *  the event is emitted by the 'registerIdentity' function\r\n     *  `investorAddress` is the address of the investor's wallet\r\n     *  `identity` is the address of the Identity smart contract (onchainID)\r\n     */\r\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity is removed from the Identity Registry.\r\n     *  the event is emitted by the 'deleteIdentity' function\r\n     *  `investorAddress` is the address of the investor's wallet\r\n     *  `identity` is the address of the Identity smart contract (onchainID)\r\n     */\r\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity has been updated\r\n     *  the event is emitted by the 'updateIdentity' function\r\n     *  `oldIdentity` is the old Identity contract's address to update\r\n     *  `newIdentity` is the new Identity contract's\r\n     */\r\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\r\n\r\n    /**\r\n     *  this event is emitted when an Identity's country has been updated\r\n     *  the event is emitted by the 'updateCountry' function\r\n     *  `investorAddress` is the address on which the country has been updated\r\n     *  `country` is the numeric code (ISO 3166-1) of the new country\r\n     */\r\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\r\n\r\n    /**\r\n     *  @dev Register an identity contract corresponding to a user address.\r\n     *  Requires that the user doesn't have an identity contract already registered.\r\n     *  This function can only be called by a wallet set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _identity The address of the user's identity contract\r\n     *  @param _country The country of the investor\r\n     *  emits `IdentityRegistered` event\r\n     */\r\n    function registerIdentity(\r\n        address _userAddress,\r\n        IIdentity _identity,\r\n        uint16 _country\r\n    ) external;\r\n\r\n    /**\r\n     *  @dev Removes an user from the identity registry.\r\n     *  Requires that the user have an identity contract already deployed that will be deleted.\r\n     *  This function can only be called by a wallet set as agent of the smart contract\r\n     *  @param _userAddress The address of the user to be removed\r\n     *  emits `IdentityRemoved` event\r\n     */\r\n    function deleteIdentity(address _userAddress) external;\r\n\r\n    /**\r\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\r\n     *  This function can only be called by the wallet set as owner of the smart contract\r\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\r\n     *  emits `IdentityStorageSet` event\r\n     */\r\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\r\n\r\n    /**\r\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\r\n     *  This function can only be called by the wallet set as owner of the smart contract\r\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\r\n     *  emits `ClaimTopicsRegistrySet` event\r\n     */\r\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\r\n\r\n    /**\r\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\r\n     *  This function can only be called by the wallet set as owner of the smart contract\r\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\r\n     *  emits `TrustedIssuersRegistrySet` event\r\n     */\r\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\r\n\r\n    /**\r\n     *  @dev Updates the country corresponding to a user address.\r\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\r\n     *  This function can only be called by a wallet set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _country The new country of the user\r\n     *  emits `CountryUpdated` event\r\n     */\r\n    function updateCountry(address _userAddress, uint16 _country) external;\r\n\r\n    /**\r\n     *  @dev Updates an identity contract corresponding to a user address.\r\n     *  Requires that the user address should be the owner of the identity contract.\r\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\r\n     *  This function can only be called by a wallet set as agent of the smart contract\r\n     *  @param _userAddress The address of the user\r\n     *  @param _identity The address of the user's new identity contract\r\n     *  emits `IdentityUpdated` event\r\n     */\r\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\r\n\r\n    /**\r\n     *  @dev function allowing to register identities in batch\r\n     *  This function can only be called by a wallet set as agent of the smart contract\r\n     *  Requires that none of the users has an identity contract already registered.\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _userAddresses The addresses of the users\r\n     *  @param _identities The addresses of the corresponding identity contracts\r\n     *  @param _countries The countries of the corresponding investors\r\n     *  emits _userAddresses.length `IdentityRegistered` events\r\n     */\r\n    function batchRegisterIdentity(\r\n        address[] calldata _userAddresses,\r\n        IIdentity[] calldata _identities,\r\n        uint16[] calldata _countries\r\n    ) external;\r\n\r\n    /**\r\n     *  @dev This functions checks whether a wallet has its Identity registered or not\r\n     *  in the Identity Registry.\r\n     *  @param _userAddress The address of the user to be checked.\r\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\r\n     */\r\n    function contains(address _userAddress) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev This functions checks whether an identity contract\r\n     *  corresponding to the provided user address has the required claims or not based\r\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\r\n     *  @param _userAddress The address of the user to be verified.\r\n     *  @return 'True' if the address is verified, 'false' if not.\r\n     */\r\n    function isVerified(address _userAddress) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev Returns the onchainID of an investor.\r\n     *  @param _userAddress The wallet of the investor\r\n     */\r\n    function identity(address _userAddress) external view returns (IIdentity);\r\n\r\n    /**\r\n     *  @dev Returns the country code of an investor.\r\n     *  @param _userAddress The wallet of the investor\r\n     */\r\n    function investorCountry(address _userAddress) external view returns (uint16);\r\n\r\n    /**\r\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\r\n     */\r\n    function identityStorage() external view returns (IIdentityRegistryStorage);\r\n\r\n    /**\r\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\r\n     */\r\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\r\n\r\n    /**\r\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\r\n     */\r\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\r\n}\r\n\r\n// File: contracts/token/IToken.sol\r\n\r\n\r\n//\r\n//                                             :+#####%%%%%%%%%%%%%%+\r\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\r\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\r\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\r\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\r\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\r\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\r\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\r\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\r\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\r\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\r\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\r\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\r\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\r\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\r\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\r\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\r\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\r\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\r\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\r\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\r\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\r\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\r\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\r\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\r\n//                                          +@@@@@. =@@@=  .+@@@@@*:\r\n//                                          #@@@@#:%@@#. :*@@@@#-\r\n//                                          @@@@@%@@@= :#@@@@+.\r\n//                                         :@@@@@@@#.:#@@@%-\r\n//                                         +@@@@@@-.*@@@*:\r\n//                                         #@@@@#.=@@@+.\r\n//                                         @@@@+-%@%=\r\n//                                        :@@@#%@%=\r\n//                                        +@@@@%-\r\n//                                        :#%%=\r\n//\r\n\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n/// @dev interface\r\ninterface IToken is IERC20 {\r\n\r\n    /// events\r\n\r\n    /**\r\n     *  this event is emitted when the token information is updated.\r\n     *  the event is emitted by the token init function and by the setTokenInformation function\r\n     *  `_newName` is the name of the token\r\n     *  `_newSymbol` is the symbol of the token\r\n     *  `_newDecimals` is the decimals of the token\r\n     *  `_newVersion` is the version of the token, current version is 3.0\r\n     *  `_newOnchainID` is the address of the onchainID of the token\r\n     */\r\n    event UpdatedTokenInformation(string indexed _newName, string indexed _newSymbol, uint8 _newDecimals, string\r\n    _newVersion, address indexed _newOnchainID);\r\n\r\n    /**\r\n     *  this event is emitted when the IdentityRegistry has been set for the token\r\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\r\n     *  `_identityRegistry` is the address of the Identity Registry of the token\r\n     */\r\n    event IdentityRegistryAdded(address indexed _identityRegistry);\r\n\r\n    /**\r\n     *  this event is emitted when the Compliance has been set for the token\r\n     *  the event is emitted by the token constructor and by the setCompliance function\r\n     *  `_compliance` is the address of the Compliance contract of the token\r\n     */\r\n    event ComplianceAdded(address indexed _compliance);\r\n\r\n    /**\r\n     *  this event is emitted when an investor successfully recovers his tokens\r\n     *  the event is emitted by the recoveryAddress function\r\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\r\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\r\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\r\n     */\r\n    event RecoverySuccess(address indexed _lostWallet, address indexed _newWallet, address indexed _investorOnchainID);\r\n\r\n    /**\r\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\r\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\r\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\r\n     *  `_isFrozen` is the freezing status of the wallet\r\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\r\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\r\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\r\n     */\r\n    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\r\n\r\n    /**\r\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\r\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\r\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\r\n     *  `_amount` is the amount of tokens that are frozen\r\n     */\r\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\r\n\r\n    /**\r\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\r\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\r\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\r\n     *  `_amount` is the amount of tokens that are unfrozen\r\n     */\r\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\r\n\r\n    /**\r\n     *  this event is emitted when the token is paused\r\n     *  the event is emitted by the pause function\r\n     *  `_userAddress` is the address of the wallet that called the pause function\r\n     */\r\n    event Paused(address _userAddress);\r\n\r\n    /**\r\n     *  this event is emitted when the token is unpaused\r\n     *  the event is emitted by the unpause function\r\n     *  `_userAddress` is the address of the wallet that called the unpause function\r\n     */\r\n    event Unpaused(address _userAddress);\r\n\r\n    /// functions\r\n\r\n    /**\r\n     *  @dev sets the token name\r\n     *  @param _name the name of token to set\r\n     *  Only the owner of the token smart contract can call this function\r\n     *  emits a `UpdatedTokenInformation` event\r\n     */\r\n    function setName(string calldata _name) external;\r\n\r\n    /**\r\n     *  @dev sets the token symbol\r\n     *  @param _symbol the token symbol to set\r\n     *  Only the owner of the token smart contract can call this function\r\n     *  emits a `UpdatedTokenInformation` event\r\n     */\r\n    function setSymbol(string calldata _symbol) external;\r\n\r\n    /**\r\n     *  @dev sets the onchain ID of the token\r\n     *  @param _onchainID the address of the onchain ID to set\r\n     *  Only the owner of the token smart contract can call this function\r\n     *  emits a `UpdatedTokenInformation` event\r\n     */\r\n    function setOnchainID(address _onchainID) external;\r\n\r\n    /**\r\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `Paused` event\r\n     */\r\n    function pause() external;\r\n\r\n    /**\r\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\r\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits an `Unpaused` event\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n     *  @dev sets an address frozen status for this token.\r\n     *  @param _userAddress The address for which to update frozen status\r\n     *  @param _freeze Frozen status of the address\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits an `AddressFrozen` event\r\n     */\r\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\r\n\r\n    /**\r\n     *  @dev freezes token amount specified for given address.\r\n     *  @param _userAddress The address for which to update frozen tokens\r\n     *  @param _amount Amount of Tokens to be frozen\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `TokensFrozen` event\r\n     */\r\n    function freezePartialTokens(address _userAddress, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev unfreezes token amount specified for given address\r\n     *  @param _userAddress The address for which to update frozen tokens\r\n     *  @param _amount Amount of Tokens to be unfrozen\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `TokensUnfrozen` event\r\n     */\r\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev sets the Identity Registry for the token\r\n     *  @param _identityRegistry the address of the Identity Registry to set\r\n     *  Only the owner of the token smart contract can call this function\r\n     *  emits an `IdentityRegistryAdded` event\r\n     */\r\n    function setIdentityRegistry(address _identityRegistry) external;\r\n\r\n    /**\r\n     *  @dev sets the compliance contract of the token\r\n     *  @param _compliance the address of the compliance contract to set\r\n     *  Only the owner of the token smart contract can call this function\r\n     *  calls bindToken on the compliance contract\r\n     *  emits a `ComplianceAdded` event\r\n     */\r\n    function setCompliance(address _compliance) external;\r\n\r\n    /**\r\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\r\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\r\n     *  but has a total balance higher or equal to the `amount`\r\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\r\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\r\n     *  account is 100% composed of frozen tokens post-transfer.\r\n     *  Require that the `to` address is a verified address,\r\n     *  @param _from The address of the sender\r\n     *  @param _to The address of the receiver\r\n     *  @param _amount The number of tokens to transfer\r\n     *  @return `true` if successful and revert if unsuccessful\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\r\n     *  emits a `Transfer` event\r\n     */\r\n    function forcedTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     *  @dev mint tokens on a wallet\r\n     *  Improved version of default mint method. Tokens can be minted\r\n     *  to an address if only it is a verified address as per the security token.\r\n     *  @param _to Address to mint the tokens to.\r\n     *  @param _amount Amount of tokens to mint.\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `Transfer` event\r\n     */\r\n    function mint(address _to, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev burn tokens on a wallet\r\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\r\n     *  but has a total balance higher or equal to the `value` amount\r\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\r\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\r\n     *  is 100% composed of frozen tokens post-transaction.\r\n     *  @param _userAddress Address to burn the tokens from.\r\n     *  @param _amount Amount of tokens to burn.\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\r\n     *  emits a `Transfer` event\r\n     */\r\n    function burn(address _userAddress, uint256 _amount) external;\r\n\r\n    /**\r\n     *  @dev recovery function used to force transfer tokens from a\r\n     *  lost wallet to a new wallet for an investor.\r\n     *  @param _lostWallet the wallet that the investor lost\r\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\r\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\r\n     *  emits a `Transfer` event if the recovery process is successful\r\n     *  emits a `RecoverySuccess` event if the recovery process is successful\r\n     *  emits a `RecoveryFails` event if the recovery process fails\r\n     */\r\n    function recoveryAddress(\r\n        address _lostWallet,\r\n        address _newWallet,\r\n        address _investorOnchainID\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     *  @dev function allowing to issue transfers in batch\r\n     *  Require that the msg.sender and `to` addresses are not frozen.\r\n     *  Require that the total value should not exceed available balance.\r\n     *  Require that the `to` addresses are all verified addresses,\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _toList The addresses of the receivers\r\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\r\n     *  emits _toList.length `Transfer` events\r\n     */\r\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\r\n\r\n    /**\r\n     *  @dev function allowing to issue forced transfers in batch\r\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\r\n     *  Require that the `_toList` addresses are all verified addresses\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _fromList The addresses of the senders\r\n     *  @param _toList The addresses of the receivers\r\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\r\n     *  emits _fromList.length `Transfer` events\r\n     */\r\n    function batchForcedTransfer(\r\n        address[] calldata _fromList,\r\n        address[] calldata _toList,\r\n        uint256[] calldata _amounts\r\n    ) external;\r\n\r\n    /**\r\n     *  @dev function allowing to mint tokens in batch\r\n     *  Require that the `_toList` addresses are all verified addresses\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _toList The addresses of the receivers\r\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits _toList.length `Transfer` events\r\n     */\r\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\r\n\r\n    /**\r\n     *  @dev function allowing to burn tokens in batch\r\n     *  Require that the `_userAddresses` addresses are all verified addresses\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\r\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits _userAddresses.length `Transfer` events\r\n     */\r\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\r\n\r\n    /**\r\n     *  @dev function allowing to set frozen addresses in batch\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _userAddresses The addresses for which to update frozen status\r\n     *  @param _freeze Frozen status of the corresponding address\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits _userAddresses.length `AddressFrozen` events\r\n     */\r\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\r\n\r\n    /**\r\n     *  @dev function allowing to freeze tokens partially in batch\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _userAddresses The addresses on which tokens need to be frozen\r\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits _userAddresses.length `TokensFrozen` events\r\n     */\r\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\r\n\r\n    /**\r\n     *  @dev function allowing to unfreeze tokens partially in batch\r\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\r\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\r\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\r\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\r\n     *  This function can only be called by a wallet set as agent of the token\r\n     *  emits _userAddresses.length `TokensUnfrozen` events\r\n     */\r\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * balanceOf() and transfer().\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the address of the onchainID of the token.\r\n     * the onchainID of the token gives all the information available\r\n     * about the token and is managed by the token issuer or his agent.\r\n     */\r\n    function onchainID() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the TREX version of the token.\r\n     * current version is 3.0.0\r\n     */\r\n    function version() external view returns (string memory);\r\n\r\n    /**\r\n     *  @dev Returns the Identity Registry linked to the token\r\n     */\r\n    function identityRegistry() external view returns (IIdentityRegistry);\r\n\r\n    /**\r\n     *  @dev Returns the Compliance contract linked to the token\r\n     */\r\n    function compliance() external view returns (IModularCompliance);\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() external view returns (bool);\r\n\r\n    /**\r\n     *  @dev Returns the freezing status of a wallet\r\n     *  if isFrozen returns `true` the wallet is frozen\r\n     *  if isFrozen returns `false` the wallet is not frozen\r\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\r\n     *  a partial freeze or the whole token could be blocked by pause\r\n     *  @param _userAddress the address of the wallet on which isFrozen is called\r\n     */\r\n    function isFrozen(address _userAddress) external view returns (bool);\r\n\r\n    /**\r\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\r\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\r\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\r\n     */\r\n    function getFrozenTokens(address _userAddress) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/compliance/modular/ModularCompliance.sol\r\n\r\n\r\n//\r\n//                                             :+#####%%%%%%%%%%%%%%+\r\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\r\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\r\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\r\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\r\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\r\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\r\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\r\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\r\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\r\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\r\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\r\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\r\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\r\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\r\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\r\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\r\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\r\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\r\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\r\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\r\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\r\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\r\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\r\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\r\n//                                          +@@@@@. =@@@=  .+@@@@@*:\r\n//                                          #@@@@#:%@@#. :*@@@@#-\r\n//                                          @@@@@%@@@= :#@@@@+.\r\n//                                         :@@@@@@@#.:#@@@%-\r\n//                                         +@@@@@@-.*@@@*:\r\n//                                         #@@@@#.=@@@+.\r\n//                                         @@@@+-%@%=\r\n//                                        :@@@#%@%=\r\n//                                        +@@@@%-\r\n//                                        :#%%=\r\n//\r\n/**\r\n *     NOTICE\r\n *\r\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\r\n *     If you choose to receive it under the GPL v.3 license, the following applies:\r\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\r\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\r\n *\r\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\r\n *\r\n *     This program is free software: you can redistribute it and/or modify\r\n *     it under the terms of the GNU General Public License as published by\r\n *     the Free Software Foundation, either version 3 of the License, or\r\n *     (at your option) any later version.\r\n *\r\n *     This program is distributed in the hope that it will be useful,\r\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *     GNU General Public License for more details.\r\n *\r\n *     You should have received a copy of the GNU General Public License\r\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ModularCompliance is IModularCompliance, OwnableUpgradeable, MCStorage {\r\n\r\n    /// modifiers\r\n\r\n    /**\r\n     * @dev Throws if called by any address that is not a token bound to the compliance.\r\n     */\r\n    modifier onlyToken() {\r\n        require(msg.sender == _tokenBound, \"error : this address is not a token bound to the compliance contract\");\r\n        _;\r\n    }\r\n\r\n    function init() external initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-bindToken}.\r\n     */\r\n    function bindToken(address _token) external override {\r\n        require(owner() == msg.sender || (_tokenBound == address(0) && msg.sender == _token),\r\n        \"only owner or token can call\");\r\n        require(_token != address(0), \"invalid argument - zero address\");\r\n        _tokenBound = _token;\r\n        emit TokenBound(_token);\r\n    }\r\n\r\n    /**\r\n    *  @dev See {IModularCompliance-unbindToken}.\r\n    */\r\n    function unbindToken(address _token) external override {\r\n        require(owner() == msg.sender || msg.sender == _token , \"only owner or token can call\");\r\n        require(_token == _tokenBound, \"This token is not bound\");\r\n        require(_token != address(0), \"invalid argument - zero address\");\r\n        delete _tokenBound;\r\n        emit TokenUnbound(_token);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-addModule}.\r\n     */\r\n    function addModule(address _module) external override onlyOwner {\r\n        require(_module != address(0), \"invalid argument - zero address\");\r\n        require(!_moduleBound[_module], \"module already bound\");\r\n        require(_modules.length <= 24, \"cannot add more than 25 modules\");\r\n        IModule(_module).bindCompliance(address(this));\r\n        _modules.push(_module);\r\n        _moduleBound[_module] = true;\r\n        emit ModuleAdded(_module);\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-removeModule}.\r\n     */\r\n    function removeModule(address _module) external override onlyOwner {\r\n        require(_module != address(0), \"invalid argument - zero address\");\r\n        require(_moduleBound[_module], \"module not bound\");\r\n        uint256 length = _modules.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (_modules[i] == _module) {\r\n                IModule(_module).unbindCompliance(address(this));\r\n                _modules[i] = _modules[length - 1];\r\n                _modules.pop();\r\n                _moduleBound[_module] = false;\r\n                emit ModuleRemoved(_module);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *  @dev See {IModularCompliance-transferred}.\r\n    */\r\n    function transferred(address _from, address _to, uint256 _value) external onlyToken override {\r\n        require(\r\n            _from != address(0)\r\n            && _to != address(0)\r\n        , \"invalid argument - zero address\");\r\n        require(_value > 0, \"invalid argument - no value transfer\");\r\n        uint256 length = _modules.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IModule(_modules[i]).moduleTransferAction(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-created}.\r\n     */\r\n    function created(address _to, uint256 _value) external onlyToken override {\r\n        require(_to != address(0), \"invalid argument - zero address\");\r\n        require(_value > 0, \"invalid argument - no value mint\");\r\n        uint256 length = _modules.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IModule(_modules[i]).moduleMintAction(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-destroyed}.\r\n     */\r\n    function destroyed(address _from, uint256 _value) external onlyToken override {\r\n        require(_from != address(0), \"invalid argument - zero address\");\r\n        require(_value > 0, \"invalid argument - no value burn\");\r\n        uint256 length = _modules.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IModule(_modules[i]).moduleBurnAction(_from, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @dev see {IModularCompliance-callModuleFunction}.\r\n     */\r\n    function callModuleFunction(bytes calldata callData, address _module) external override onlyOwner {\r\n        require(_moduleBound[_module], \"call only on bound module\");\r\n        // NOTE: Use assembly to call the interaction instead of a low level\r\n        // call for two reasons:\r\n        // - We don't want to copy the return data, since we discard it for\r\n        // interactions.\r\n        // - Solidity will under certain conditions generate code to copy input\r\n        // calldata twice to memory (the second being a \"memcopy loop\").\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let freeMemoryPointer := mload(0x40)\r\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\r\n            if iszero(\r\n            call(\r\n            gas(),\r\n            _module,\r\n            0,\r\n            freeMemoryPointer,\r\n            callData.length,\r\n            0,\r\n            0\r\n            ))\r\n            {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        emit ModuleInteraction(_module, _selector(callData));\r\n\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-isModuleBound}.\r\n     */\r\n    function isModuleBound(address _module) external view override returns (bool) {\r\n        return _moduleBound[_module];\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-getModules}.\r\n     */\r\n    function getModules() external view override returns (address[] memory) {\r\n        return _modules;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-getTokenBound}.\r\n     */\r\n    function getTokenBound() external view override returns (address) {\r\n        return _tokenBound;\r\n    }\r\n\r\n    /**\r\n     *  @dev See {IModularCompliance-canTransfer}.\r\n     */\r\n    function canTransfer(address _from, address _to, uint256 _value) external view override returns (bool) {\r\n        uint256 length = _modules.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (!IModule(_modules[i]).moduleCheck(_from, _to, _value, address(this))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\r\n    /// @param callData Interaction data.\r\n    /// @return result The 4 byte function selector of the call encoded in\r\n    /// this interaction.\r\n    function _selector(bytes calldata callData) internal pure returns (bytes4 result) {\r\n        if (callData.length >= 4) {\r\n            // NOTE: Read the first word of the interaction's calldata. The\r\n            // value does not need to be shifted since `bytesN` values are left\r\n            // aligned, and the value does not need to be masked since masking\r\n            // occurs when the value is accessed and not stored:\r\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\r\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                result := calldataload(callData.offset)\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ModuleInteraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenUnbound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"bindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"callModuleFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"created\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"destroyed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"isModuleBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unbindToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ModularCompliance", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94c40b8878a547fe9e647dac080ff6af918555882e9bfc490db23648a1d6d77d"}