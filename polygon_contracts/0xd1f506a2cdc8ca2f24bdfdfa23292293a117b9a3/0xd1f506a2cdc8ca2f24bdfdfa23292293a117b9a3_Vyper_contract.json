{"SourceCode": "# Declare the contract's version\r\n# @version  ^0.2.0\r\n\r\n# Custom ERC20 interface with decimals function\r\ninterface CustomERC20Interface:\r\n    def decimals() -> uint256: view\r\n    def transfer(to: address, amount: uint256) -> bool: nonpayable\r\n\r\n# Variables\r\ntoken: CustomERC20Interface\r\nowner: public(address)\r\nrecipients: public(address[100])\r\namounts: public(uint256[4])\r\nprobabilities: public(uint256[4])\r\nrecipient_count: public(uint256)\r\nlast_claimed: public(HashMap[address, uint256])\r\n\r\n# Events\r\nevent Transfer:\r\n    recipient: indexed(address)\r\n    amount: uint256\r\n\r\n# Constructor\r\n@external\r\ndef __init__(tokenAddress: address):\r\n    self.owner = msg.sender\r\n    self.token = CustomERC20Interface(tokenAddress)\r\n\r\n# Set recipients\r\n@external\r\ndef setRecipients(_recipients: address[100], count: uint256):\r\n    assert msg.sender == self.owner\r\n    assert 2 <= count and count <= 100, \"Number of recipients must be between 2 and 100\"\r\n    for i in range(100):\r\n        if i < count:\r\n            self.recipients[i] = _recipients[i]\r\n        else:\r\n            self.recipients[i] = ZERO_ADDRESS\r\n    self.recipient_count = count\r\n\r\n# Set amounts and probabilities\r\n@external\r\ndef setAmountsAndProbabilities(_amounts: uint256[4], _probabilities: uint256[4]):\r\n    assert msg.sender == self.owner\r\n    decimals: uint256 = self.token.decimals()\r\n    for i in range(4):\r\n        self.amounts[i] = _amounts[i] * (10 ** decimals)\r\n        self.probabilities[i] = _probabilities[i]\r\n\r\n# Send funds\r\n@external\r\ndef sendFunds():\r\n    recipient_found: bool = False\r\n    for i in range(100):\r\n        if i >= self.recipient_count:\r\n            break\r\n        if self.recipients[i] == msg.sender:\r\n            recipient_found = True\r\n            current_time: uint256 = block.timestamp\r\n            last_claim_time: uint256 = self.last_claimed[msg.sender]\r\n\r\n            assert current_time >= last_claim_time + 24 * 60 * 60, \"Must wait 24 hours between claims\"\r\n\r\n            # Random payout selection\r\n            rand_value: uint256 = convert(keccak256(convert(current_time, bytes32)), uint256) % 100\r\n            payout_amount: uint256 = 0\r\n            probability_sum: uint256 = 0\r\n\r\n            for j in range(4):\r\n                probability_sum += self.probabilities[j]\r\n                if rand_value < probability_sum:\r\n                    payout_amount = self.amounts[j]\r\n                    break\r\n\r\n            self.token.transfer(msg.sender, payout_amount)\r\n            log Transfer(msg.sender, payout_amount)\r\n            self.last_claimed[msg.sender] = current_time\r\n            break\r\n\r\n    assert recipient_found, \"Caller is not a recipient\"", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setRecipients\",\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[100]\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":3560726},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setAmountsAndProbabilities\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[4]\"},{\"name\":\"_probabilities\",\"type\":\"uint256[4]\"}],\"outputs\":[],\"gas\":289572},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sendFunds\",\"inputs\":[],\"outputs\":[],\"gas\":6812187},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2478},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recipients\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2553},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"amounts\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2583},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"probabilities\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2613},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recipient_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_claimed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2843}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.16", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}