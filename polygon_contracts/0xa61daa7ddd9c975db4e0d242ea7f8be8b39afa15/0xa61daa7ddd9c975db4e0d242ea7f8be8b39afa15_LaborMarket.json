{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/auth/NBadgeAuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @dev Core dependencies.\\nimport { NBadgeAuthInterface } from '../interfaces/auth/NBadgeAuthInterface.sol';\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nabstract contract NBadgeAuth is NBadgeAuthInterface, Initializable {\\n    /// @dev The address of the Labor Market deployer.\\n    address public deployer;\\n\\n    /// @dev The list of nodes that are allowed to call this contract.\\n    mapping(bytes4 => Node) internal sigToNode;\\n\\n    /// @notice Ensure that the caller has permission to use this function.\\n    modifier requiresAuth() virtual {\\n        /// @dev Confirm the user has permission to run this function.\\n        require(isAuthorized(msg.sender, msg.sig), 'NBadgeAuth::requiresAuth: Not authorized');\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the deployer and the N-Badge module.\\n     * @param _deployer The address of the deployer.\\n     * @param _sigs The list of function signatures N-Badge is applied to.\\n     * @param _nodes The list of nodes that are allowed to call this contract.\\n     */\\n    function __NBadgeAuth_init(\\n        address _deployer,\\n        bytes4[] calldata _sigs,\\n        Node[] calldata _nodes\\n    ) internal onlyInitializing {\\n        /// @notice Set the local deployer of the Labor Market.\\n        deployer = _deployer;\\n\\n        /// @notice Announce the change in access configuration.\\n        emit OwnershipTransferred(address(0), _deployer);\\n\\n        /// @dev Initialize the contract.\\n        __NBadgeAuth_init_unchained(_sigs, _nodes);\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the deployer and the N-Badge module.\\n     * @param _nodes The list of nodes that are allowed to call this contract.\\n     */\\n    function __NBadgeAuth_init_unchained(bytes4[] calldata _sigs, Node[] calldata _nodes) internal onlyInitializing {\\n        /// @notice Ensure that the arrays provided are of equal lengths.\\n        require(_sigs.length == _nodes.length, 'NBadgeAuth::__NBadgeAuth_init_unchained: Invalid input');\\n\\n        /// @dev Load the loop stack.\\n        uint256 i;\\n\\n        /// @notice Loop through all of the signatures provided and load in the access management.\\n        for (i; i < _sigs.length; i++) {\\n            /// @dev Initialize all the nodes related to each signature.\\n            sigToNode[_sigs[i]] = _nodes[i];\\n        }\\n\\n        /// @dev Announce the change in access configuration.\\n        emit NodesUpdated(_sigs, _nodes);\\n    }\\n\\n    /**\\n     * @dev Determines if a user has the required credentials to call a function.\\n     * @param _node The node to check.\\n     * @param _user The user to check.\\n     * @return True if the user has the required credentials, false otherwise.\\n     */\\n    function _canCall(\\n        Node memory _node,\\n        address _user,\\n        address\\n    ) internal view returns (bool) {\\n        /// @dev Load in the first badge to warm the slot.\\n        Badge memory badge = _node.badges[0];\\n\\n        /// @dev Load in the stack.\\n        uint256 points;\\n        uint256 i;\\n\\n        /// @dev Determine if the user has met the proper conditions of access.\\n        for (i; i < _node.badges.length; i++) {\\n            /// @dev Step through the nodes until we have enough points or we run out.\\n            badge = _node.badges[i];\\n\\n            /// @notice Determine the balance of the Badge the user.\\n            uint256 balance = badge.badge.balanceOf(_user, badge.id);\\n\\n            /// @notice If the user has sufficient balance, account for the balance in points.\\n            if (badge.min <= balance && badge.max >= balance) points += badge.points;\\n\\n            /// @notice If enough points have been accumulated, terminate the loop.\\n            if (points >= _node.required) i = _node.badges.length;\\n\\n            /// @notice Keep on swimming.\\n        }\\n\\n        /// @notice Return if the user has met the required points.\\n        return points >= _node.required;\\n    }\\n\\n    /**\\n     * See {NBadgeAuthInterface-isAuthorized}.\\n     */\\n    function isAuthorized(address user, bytes4 _sig) public view virtual returns (bool) {\\n        /// @notice Load in the established for this function.\\n        Node memory node = sigToNode[_sig];\\n\\n        /// @notice If no configuration was set, the access of the function is open to the public.\\n        bool global = node.badges.length == 0;\\n\\n        /// @notice Determine and return if a user has permission to call the function.\\n        return (global || _canCall(node, user, address(this))) || (user == deployer && node.deployerAllowed);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/auth/NBadgeAuthInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @dev Helper interfaces.\\nimport { IERC1155 } from '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface NBadgeAuthInterface {\\n    /// @notice The schema of node in the authority graph.\\n    struct Badge {\\n        IERC1155 badge;\\n        uint256 id;\\n        uint256 min;\\n        uint256 max;\\n        uint256 points;\\n    }\\n\\n    /// @notice Access definition for a signature.\\n    struct Node {\\n        bool deployerAllowed;\\n        uint256 required;\\n        Badge[] badges;\\n    }\\n\\n    /// @notice Announces when the contract gets a new owner.\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /// @notice Announces the permission definition of the contract.\\n    event NodesUpdated(bytes4[] sigs, Node[] nodes);\\n\\n    /**\\n     * @notice Determine if a user has the required credentials to call a function.\\n     * @param user The user to check.\\n     * @param sig The signature of the function to check.\\n     * @return authorized as `true` if the user has the required credentials, `false` otherwise.\\n     */\\n    function isAuthorized(address user, bytes4 sig) external view returns (bool authorized);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/enforcement/EnforcementCriteriaInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface EnforcementCriteriaInterface {\\n    /// @notice Announces the definition of the criteria configuration.\\n    event EnforcementConfigured(address indexed _market, uint256[] _auxiliaries, uint256[] _alphas, uint256[] _betas);\\n\\n    /// @notice Announces change in Submission reviews.\\n    event SubmissionReviewed(\\n        address indexed _market,\\n        uint256 indexed _requestId,\\n        uint256 indexed _submissionId,\\n        uint256 intentChange,\\n        uint256 earnings,\\n        uint256 remainder,\\n        bool newSubmission\\n    );\\n\\n    /**\\n     * @notice Set the configuration for a Labor Market using the generalized parameters.\\n     * @param _auxiliaries The auxiliary parameters for the Labor Market.\\n     * @param _alphas The alpha parameters for the Labor Market.\\n     * @param _betas The beta parameters for the Labor Market.\\n     */\\n    function setConfiguration(\\n        uint256[] calldata _auxiliaries,\\n        uint256[] calldata _alphas,\\n        uint256[] calldata _betas\\n    ) external;\\n\\n    /**\\n     * @notice Submit a new score for a submission.\\n     * @param _requestId The ID of the request.\\n     * @param _submissionId The ID of the submission.\\n     * @param _score The score of the submission.\\n     * @param _availableShare The amount of the $pToken available for this submission.\\n     * @param _enforcer The individual submitting the score.\\n     */\\n    function enforce(\\n        uint256 _requestId,\\n        uint256 _submissionId,\\n        uint256 _score,\\n        uint256 _availableShare,\\n        address _enforcer\\n    ) external returns (bool, uint24);\\n\\n    /**\\n     * @notice Retrieve and distribute the rewards for a submission.\\n     * @param _requestId The ID of the request.\\n     * @param _submissionId The ID of the submission.\\n     * @return amount The amount of $pToken to be distributed.\\n     * @return requiresSubmission Whether or not the submission requires a new score.\\n     */\\n    function rewards(uint256 _requestId, uint256 _submissionId)\\n        external\\n        returns (uint256 amount, bool requiresSubmission);\\n\\n    /**\\n     * @notice Retrieve the amount of $pToken owed back to the Requester.\\n     * @param _requestId The ID of the request.\\n     * @return amount The amount of $pToken owed back to the Requester.\\n     */\\n    function remainder(uint256 _requestId) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/LaborMarketInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @dev Helper interfaces.\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { EnforcementCriteriaInterface } from './enforcement/EnforcementCriteriaInterface.sol';\\nimport { NBadgeAuthInterface } from './auth/NBadgeAuthInterface.sol';\\n\\ninterface LaborMarketInterface {\\n    /// @notice Schema definition of a Request.\\n    struct ServiceRequest {\\n        uint48 signalExp;\\n        uint48 submissionExp;\\n        uint48 enforcementExp;\\n        uint64 providerLimit;\\n        uint64 reviewerLimit;\\n        uint256 pTokenProviderTotal;\\n        uint256 pTokenReviewerTotal;\\n        IERC20 pTokenProvider;\\n        IERC20 pTokenReviewer;\\n    }\\n\\n    /// @notice Schema definition of the state a Request may be in.\\n    /// @dev Used to track signal:attendance rates.\\n    struct ServiceSignalState {\\n        uint64 providers;\\n        uint64 reviewers;\\n        uint64 reviewersArrived;\\n    }\\n\\n    /// @notice Emitted when labor market parameters are updated.\\n    event LaborMarketConfigured(address deployer, string uri, address criteria);\\n\\n    /// @notice Announces when a new Request has been configured inside a Labor Market.\\n    event RequestConfigured(\\n        address indexed requester,\\n        uint256 indexed requestId,\\n        uint48 signalExp,\\n        uint48 submissionExp,\\n        uint48 enforcementExp,\\n        uint64 providerLimit,\\n        uint64 reviewerLimit,\\n        uint256 pTokenProviderTotal,\\n        uint256 pTokenReviewerTotal,\\n        IERC20 pTokenProvider,\\n        IERC20 pTokenReviewer,\\n        string uri\\n    );\\n\\n    /// @notice Announces when a Request has been signaled by a Provider.\\n    event RequestSignal(address indexed signaler, uint256 indexed requestId);\\n\\n    /// @notice Announces when a Reviewer signals interest in reviewing a Request.\\n    event ReviewSignal(address indexed signaler, uint256 indexed requestId, uint256 indexed quantity);\\n\\n    /// @notice Announces when a Request has been fulfilled by a Provider.\\n    event RequestFulfilled(\\n        address indexed fulfiller,\\n        uint256 indexed requestId,\\n        uint256 indexed submissionId,\\n        string uri\\n    );\\n\\n    /// @notice Announces when a Submission for a Request has been reviewed.\\n    event RequestReviewed(\\n        address indexed reviewer,\\n        uint256 indexed requestId,\\n        uint256 indexed submissionId,\\n        uint256 reviewId,\\n        uint256 reviewScore,\\n        string uri\\n    );\\n\\n    /// @notice Announces when a Provider has claimed earnings for a Submission.\\n    event RequestPayClaimed(\\n        address indexed claimer,\\n        uint256 indexed requestId,\\n        uint256 indexed submissionId,\\n        uint256 payAmount,\\n        address to\\n    );\\n\\n    /// @notice Announces the status of the remaining balance of a Request.\\n    event RemainderClaimed(address claimer, uint256 indexed requestId, address indexed to, bool indexed settled);\\n\\n    /// @notice Announces when a Request has been withdrawn (cancelled) by the Requester.\\n    event RequestWithdrawn(uint256 indexed requestId);\\n\\n    /**\\n     * @notice Initializes the newly deployed Labor Market contract.\\n     * @dev An initializer can only be called once and will throw if called twice in place of the constructor.\\n     * @param _deployer The address of the deployer.\\n     * @param _uri The internet-accessible uri of the Labor Market.\\n     * @param _criteria The enforcement criteria module used for this Labor Market.\\n     * @param _auxilaries The auxiliary values for the ennforcement criteria that is being used.\\n     * @param _alphas The alpha values for the enforcement criteria that is being used.\\n     * @param _betas The beta values for the enforcement criteria that is being used.\\n     * @param _sigs The signatures of the functions with permission gating.\\n     * @param _nodes The node definitions that are allowed to perform the functions with permission gating.\\n     */\\n    function initialize(\\n        address _deployer,\\n        string calldata _uri,\\n        EnforcementCriteriaInterface _criteria,\\n        uint256[] calldata _auxilaries,\\n        uint256[] calldata _alphas,\\n        uint256[] calldata _betas,\\n        bytes4[] calldata _sigs,\\n        NBadgeAuthInterface.Node[] calldata _nodes\\n    ) external;\\n\\n    /**\\n     * @notice Submit a new Request to a Marketplace.\\n     * @param _request The Request being submit for work in the Labor Market.\\n     * @param _uri The internet-accessible URI of the Request.\\n     * @return requestId The id of the Request established onchain.\\n     */\\n    function submitRequest(\\n        uint8 _blockNonce,\\n        ServiceRequest calldata _request,\\n        string calldata _uri\\n    ) external returns (uint256 requestId);\\n\\n    /**\\n     * @notice Signals interest in fulfilling a service Request.\\n     * @param _requestId The id of the Request the caller is signaling intent for.\\n     */\\n    function signal(uint256 _requestId) external;\\n\\n    /**\\n     * @notice Signals interest in reviewing a Submission.\\n     * @param _requestId The id of the Request a Reviewer would like to assist in maintaining.\\n     * @param _quantity The amount of Submissions a Reviewer has intent to manage.\\n     */\\n    function signalReview(uint256 _requestId, uint24 _quantity) external;\\n\\n    /**\\n     * @notice Allows a Provider to fulfill a Request.\\n     * @param _requestId The id of the Request being fulfilled.\\n     * @param _uri The internet-accessible uri of the Submission data.\\n     * @return submissionId The id of the Submission for the respective Request.\\n     */\\n    function provide(uint256 _requestId, string calldata _uri) external returns (uint256 submissionId);\\n\\n    /**\\n     * @notice Allows a maintainer to participate in grading a Submission.\\n     * @param _requestId The id of the Request being fulfilled.\\n     * @param _submissionId The id of the Submission.\\n     * @param _score The score of the Submission.\\n     */\\n    function review(\\n        uint256 _requestId,\\n        uint256 _submissionId,\\n        uint256 _score,\\n        string calldata _uri\\n    ) external;\\n\\n    /**\\n     * @notice Allows a Provider to claim earnings for a Request Submission after enforcement.\\n     * @dev When you want to determine what the earned amount is, you can use this\\n     *      function with a static call to determine the qausi-state of claiming.\\n     * @param _requestId The id of the Request being fulfilled.\\n     * @param _submissionId The id of the Submission.\\n     * @return success Whether or not the claim was successful.\\n     * @return amount The amount of tokens earned by the Submission.\\n     */\\n    function claim(uint256 _requestId, uint256 _submissionId) external returns (bool success, uint256 amount);\\n\\n    /**\\n     * @notice Allows a Requester to claim the remainder of funds not allocated to participants.\\n     * @dev This model has been implemented to allow for bulk distribution of unclaimed rewards to\\n     *      assist in keeping the economy as healthy as possible.\\n     * @param _requestId The id of the Request.\\n     */\\n    function claimRemainder(uint256 _requestId)\\n        external\\n        returns (\\n            bool pTokenProviderSuccess,\\n            bool pTokenReviewerSuccess,\\n            uint256 pTokenProviderSurplus,\\n            uint256 pTokenReviewerSurplus\\n        );\\n\\n    /**\\n     * @notice Allows a Requester to withdraw a Request and refund the pToken.\\n     * @param _requestId The id of the Request being withdrawn.\\n     */\\n    function withdrawRequest(uint256 _requestId) external;\\n}\\n\"\r\n    },\r\n    \"src/LaborMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\n/// @dev Core dependencies.\\nimport {LaborMarketInterface} from \\\"./interfaces/LaborMarketInterface.sol\\\";\\nimport {NBadgeAuth} from \\\"./auth/NBadgeAuth.sol\\\";\\n\\n/// @dev Helper interfaces\\nimport {EnforcementCriteriaInterface} from \\\"./interfaces/enforcement/EnforcementCriteriaInterface.sol\\\";\\n\\n/// @dev Helper libraries.\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract LaborMarket is LaborMarketInterface, NBadgeAuth {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev The enforcement criteria module used for this Labor Market.\\n    EnforcementCriteriaInterface internal criteria;\\n\\n    /// @dev Primary struct containing the definition of a Request.\\n    mapping(uint256 => ServiceRequest) public requestIdToRequest;\\n\\n    /// @dev State id for a user relative to a single Request.\\n    mapping(uint256 => mapping(address => uint24))\\n        public requestIdToAddressToPerformance;\\n\\n    /// @dev Tracking the amount of Provider and Reviewer interested that has been signaled.\\n    mapping(uint256 => ServiceSignalState) public requestIdToSignalState;\\n\\n    /// @dev Definition of active Provider submissions for a request.\\n    mapping(uint256 => EnumerableSet.AddressSet) internal requestIdToProviders;\\n\\n    /// @dev Prevent implementation from being initialized.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-initialize}.\\n     */\\n    function initialize(\\n        address _deployer,\\n        string calldata _uri,\\n        EnforcementCriteriaInterface _criteria,\\n        uint256[] calldata _auxilaries,\\n        uint256[] calldata _alphas,\\n        uint256[] calldata _betas,\\n        bytes4[] calldata _sigs,\\n        Node[] calldata _nodes\\n    ) external override initializer {\\n        /// @dev Initialize the access controls of N-Badge.\\n        __NBadgeAuth_init(_deployer, _sigs, _nodes);\\n\\n        /// @dev Configure the Labor Market enforcement criteria module.\\n        criteria = _criteria;\\n\\n        /// @notice Set the auxiliary value for the criteria that is being used.\\n        /// @dev This is stored as a relative `uint256` however you may choose to bitpack\\n        ///      this value with a segment of smaller bits which is only measurable by\\n        ///      enabled enforcement criteria.\\n        /// @dev Cross-integration of newly connected modules CANNOT be audited therefore,\\n        ///      all onus and liability of the integration is on the individual market\\n        ///      instantiator and the module developer. Risk is mitigated by the fact that\\n        ///      the module developer is required to deploy the module and the market\\n        ///      instantiator is required to deploy the market.\\n        criteria.setConfiguration(_auxilaries, _alphas, _betas);\\n\\n        /// @dev Announce the configuration of the Labor Market.\\n        emit LaborMarketConfigured(_deployer, _uri, address(criteria));\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-submitRequest}.\\n     */\\n    function submitRequest(\\n        uint8 _blockNonce,\\n        ServiceRequest calldata _request,\\n        string calldata _uri\\n    ) public virtual requiresAuth returns (uint256 requestId) {\\n        /// @notice Ensure the timestamps of the Request phases are valid.\\n        require(\\n            block.timestamp < _request.signalExp &&\\n                _request.signalExp < _request.submissionExp &&\\n                _request.submissionExp < _request.enforcementExp,\\n            \\\"LaborMarket::submitRequest: Invalid timestamps\\\"\\n        );\\n\\n        /// @notice Ensure the Reviewer and Provider limit are not zero.\\n        require(\\n            _request.providerLimit > 0 && _request.reviewerLimit > 0,\\n            \\\"LaborMarket::submitRequest: Invalid limits\\\"\\n        );\\n\\n        /// @notice Generate the uuid for the Request using the nonce, timestamp and address.\\n        requestId = uint256(\\n            bytes32(\\n                abi.encodePacked(\\n                    _blockNonce,\\n                    uint88(block.timestamp),\\n                    uint160(msg.sender)\\n                )\\n            )\\n        );\\n\\n        /// @notice Ensure the Request does not already exist.\\n        require(\\n            requestIdToRequest[requestId].signalExp == 0,\\n            \\\"LaborMarket::submitRequest: Request already exists\\\"\\n        );\\n\\n        /// @notice Store the Request in the Labor Market.\\n        requestIdToRequest[requestId] = _request;\\n\\n        /// @notice Announce the creation of a new Request in the Labor Market.\\n        emit RequestConfigured(\\n            msg.sender,\\n            requestId,\\n            _request.signalExp,\\n            _request.submissionExp,\\n            _request.enforcementExp,\\n            _request.providerLimit,\\n            _request.reviewerLimit,\\n            _request.pTokenProviderTotal,\\n            _request.pTokenReviewerTotal,\\n            _request.pTokenProvider,\\n            _request.pTokenReviewer,\\n            _uri\\n        );\\n\\n        /// @notice Determine the active balances of the tokens held.\\n        /// @notice Get the balance of tokens denoted for providers.\\n        uint256 providerBalance = _request.pTokenProvider.balanceOf(msg.sender);\\n\\n        /// @notice Provide the funding for the Request.\\n        if (_request.pTokenProviderTotal > 0) {\\n            /// @dev Transfer the Provider tokens that support the compensation of the Request.\\n            _request.pTokenProvider.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _request.pTokenProviderTotal\\n            );\\n\\n            /// @notice Ensure the Provider balance is correct.\\n            require(\\n                _request.pTokenProvider.balanceOf(msg.sender) ==\\n                    providerBalance - _request.pTokenProviderTotal,\\n                \\\"LaborMarket::submitRequest: Invalid Provider balance.\\\"\\n            );\\n        }\\n\\n        /// @notice Retrieve the balance of Reviewer tokens.\\n        /// @dev Is calculated down here as Provider and Reviewer token may be the same.\\n        uint256 reviewerBalance = _request.pTokenReviewer.balanceOf(msg.sender);\\n\\n        /// @notice Provide the funding for the Request to incentivize Reviewers.\\n        if (_request.pTokenReviewerTotal > 0) {\\n            /// @dev Transfer the Reviewer tokens that support the compensation of the Request.\\n            _request.pTokenReviewer.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _request.pTokenReviewerTotal\\n            );\\n\\n            /// @notice Ensure the Reviewer balance is correct.\\n            require(\\n                _request.pTokenReviewer.balanceOf(msg.sender) ==\\n                    reviewerBalance - _request.pTokenReviewerTotal,\\n                \\\"LaborMarket::submitRequest: Invalid Provider balance.\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-signal}.\\n     */\\n    function signal(uint256 _requestId) public virtual requiresAuth {\\n        /// @dev Pull the Request out of the storage slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @notice Ensure the signal phase is still active.\\n        require(\\n            block.timestamp <= requestIdToRequest[_requestId].signalExp,\\n            \\\"LaborMarket::signal: Signal deadline passed\\\"\\n        );\\n\\n        /// @dev Retrieve the state of the Providers for this Request.\\n        ServiceSignalState storage signalState = requestIdToSignalState[\\n            _requestId\\n        ];\\n\\n        /// @dev Confirm the maximum number of Providers is never exceeded.\\n        require(\\n            signalState.providers + 1 <= request.providerLimit,\\n            \\\"LaborMarket::signal: Exceeds signal limit\\\"\\n        );\\n\\n        /// @notice Increment the number of Providers that have signaled.\\n        ++signalState.providers;\\n\\n        /// @notice Get the performance state of the user.\\n        uint24 performance = requestIdToAddressToPerformance[_requestId][\\n            msg.sender\\n        ];\\n\\n        /// @notice Require the user has not signaled.\\n        /// @dev Get the first bit of the user's signal value.\\n        require(\\n            performance & 0x3 == 0,\\n            \\\"LaborMarket::signal: Already signaled\\\"\\n        );\\n\\n        /// @notice Set the first two bits of the performance state to 1 to indicate the user has signaled\\n        ///         without affecting the rest of the performance state.\\n        requestIdToAddressToPerformance[_requestId][msg.sender] =\\n            /// @dev Keep the last 22 bits but clear the first two bits.\\n            (performance & 0xFFFFFC) |\\n            /// @dev Set the first two bits of the performance state to 1 to indicate the user has signaled.\\n            0x1;\\n\\n        /// @notice Announce the signaling of a Provider.\\n        emit RequestSignal(msg.sender, _requestId);\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-signalReview}.\\n     */\\n    function signalReview(\\n        uint256 _requestId,\\n        uint24 _quantity\\n    ) public virtual requiresAuth {\\n        /// @dev Pull the Request out of the storage slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @notice Ensure the enforcement phase is still active.\\n        require(\\n            block.timestamp <= request.enforcementExp,\\n            \\\"LaborMarket::signalReview: Enforcement deadline passed\\\"\\n        );\\n\\n        /// @dev Retrieve the state of the Providers for this Request.\\n        ServiceSignalState storage signalState = requestIdToSignalState[\\n            _requestId\\n        ];\\n\\n        /// @notice Ensure the signal limit is not exceeded.\\n        require(\\n            signalState.reviewers + _quantity <= request.reviewerLimit,\\n            \\\"LaborMarket::signalReview: Exceeds signal limit\\\"\\n        );\\n\\n        /// @notice Increment the number of Reviewers that have signaled.\\n        signalState.reviewers += _quantity;\\n\\n        /// @notice Get the performance state of the caller.\\n        uint24 performance = requestIdToAddressToPerformance[_requestId][\\n            msg.sender\\n        ];\\n\\n        /// @notice Get the intent of the Reviewer.\\n        /// @dev Shift the performance value to the right by two bits and then mask down to\\n        ///      the next 22 bits with an overlap of 0x3fffff.\\n        uint24 reviewIntent = ((performance >> 2) & 0x3fffff);\\n\\n        /// @notice Ensure that we are the intent will not overflow the 22 bits saved for the quantity.\\n        /// @dev Mask the `_quantity` down to 22 bits to prevent overflow and user error.\\n        require(\\n            reviewIntent + (_quantity & 0x3fffff) <= 4_194_304,\\n            \\\"LaborMarket::signalReview: Exceeds maximum signal value\\\"\\n        );\\n\\n        /// @notice Update the intent of reviewing by summing already signaled quantity with the new quantity\\n        ///         and then shift it to the left by two bits to make room for the intent of providing.\\n        requestIdToAddressToPerformance[_requestId][msg.sender] =\\n            /// @dev Set the last 22 bits of the performance state to the sum of the current intent and the new quantity.\\n            ((reviewIntent + _quantity) << 2) |\\n            /// @dev Keep the first two bits of the performance state the same.\\n            (performance & 0x3);\\n\\n        /// @notice Announce the signaling of a Reviewer.\\n        emit ReviewSignal(msg.sender, _requestId, _quantity);\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-provide}.\\n     */\\n    function provide(\\n        uint256 _requestId,\\n        string calldata _uri\\n    ) public virtual returns (uint256 submissionId) {\\n        /// @dev Get the Request out of storage to warm the slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @notice Require the submission phase is still active.\\n        require(\\n            block.timestamp <= request.submissionExp,\\n            \\\"LaborMarket::provide: Submission deadline passed\\\"\\n        );\\n\\n        /// @notice Get the performance state of the caller.\\n        uint24 performance = requestIdToAddressToPerformance[_requestId][\\n            msg.sender\\n        ];\\n\\n        /// @notice Ensure that the Provider has signaled, but has not already submitted.\\n        /// @dev Get the first two bits of the user's performance value.\\n        ///      0: Not signaled, 1: Signaled, 2: Submitted.\\n        require(performance & 0x3 == 1, \\\"LaborMarket::provide: Not signaled\\\");\\n\\n        /// @dev Set the submission ID to reflect the Providers address.\\n        submissionId = uint256(uint160(msg.sender));\\n\\n        /// @dev Provider has submitted and set the value of the first two bits to 2.\\n        requestIdToAddressToPerformance[_requestId][msg.sender] =\\n            /// @dev Keep the last 22 bits but clear the first two bits.\\n            (performance & 0xFFFFFC) |\\n            /// @dev Set the first two bits to 2.\\n            0x2;\\n\\n        /// @notice Announce the submission of a Provider.\\n        emit RequestFulfilled(msg.sender, _requestId, submissionId, _uri);\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-review}.\\n     */\\n    function review(\\n        uint256 _requestId,\\n        uint256 _submissionId,\\n        uint256 _score,\\n        string calldata _uri\\n    ) public virtual {\\n        /// @notice Determine the number-derived id of the caller.\\n        uint256 reviewId = uint256(uint160(msg.sender));\\n\\n        /// @notice Ensure that no one is grading their own Submission.\\n        require(\\n            _submissionId != reviewId,\\n            \\\"LaborMarket::review: Cannot review own submission\\\"\\n        );\\n\\n        /// @notice Ensure reviewing a valid submission by confirming that the \\n        ///         first 2 bits of of the performance state are set to 2.\\n        require(\\n            requestIdToAddressToPerformance[_requestId][\\n                address(uint160(_submissionId))\\n            ] & 0x3 == 2,\\n            \\\"LaborMarket::review: Cannot review submission that does not exist\\\"\\n        );\\n\\n        /// @notice Get the Request out of storage to warm the slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @notice Ensure the Request is still in the enforcement phase.\\n        require(\\n            block.timestamp <= request.enforcementExp,\\n            \\\"LaborMarket::review: Enforcement deadline passed\\\"\\n        );\\n\\n        /// @notice Make the external call into the enforcement module to submit the callers score.\\n        (bool newSubmission, uint24 intentChange) = criteria.enforce(\\n            _requestId,\\n            _submissionId,\\n            _score,\\n            request.pTokenProviderTotal / request.providerLimit,\\n            msg.sender\\n        );\\n\\n        /// @notice If the user is submitting a \\\"new score\\\" according to the module, then deduct their signal.\\n        /// @dev This implicitly enables the ability to have an enforcement criteria that supports\\n        ///       many different types of scoring rubrics, but also \\\"submitting a score multiple times.\\\"\\n        ///       In the case that only one response from each reviewer is wanted, then the enforcement\\n        ///       criteria should return `true` to indicate signal deduction is owed at all times.\\n        if (newSubmission) {\\n            /// @dev Record that the Provider made a valid submission.\\n            requestIdToProviders[_requestId].add(address(uint160(_submissionId)));\\n\\n            /// @notice Calculate the active intent value of the Reviewer.\\n            uint24 intent = requestIdToAddressToPerformance[_requestId][\\n                msg.sender\\n            ];\\n\\n            /// @notice Get the remaining signal value of the Reviewer.\\n            /// @dev Uses the last 22 bits of the performance value by shifting over 2 values and then\\n            ///      masking down to the last 22 bits with an overlap of 0x3fffff.\\n            uint24 remainingIntent = (requestIdToAddressToPerformance[\\n                _requestId\\n            ][msg.sender] >> 2) & 0x3fffff;\\n\\n            /// @notice Ensure the Reviewer is not exceeding their signaled intent.\\n            require(remainingIntent > 0, \\\"LaborMarket::review: Not signaled\\\");\\n\\n            /// @notice Lower the bitpacked value representing the remaining signal value of\\n            ///         the caller for this Request.\\n            /// @dev This bitwise shifts shifts 22 bits to the left to clear the previous value\\n            ///      and then bitwise ORs the remaining signal value minus 1 to the left by 2 bits.\\n            requestIdToAddressToPerformance[_requestId][msg.sender] =\\n                /// @dev Keep all the bits besides the 22 bits that represent the remaining signal value.\\n                (intent & 0x3) |\\n                /// @dev Shift the remaining signal value minus 1 to the left by 2 bits to fill the 22.\\n                ((remainingIntent - intentChange) << 2);\\n\\n            /// @dev Decrement the total amount of enforcement capacity needed to finalize this Request.\\n            requestIdToSignalState[_requestId].reviewersArrived += intentChange;\\n\\n            /// @notice Determine if the Request incentivized Reviewers to participate.\\n            if (request.pTokenReviewerTotal > 0)\\n                /// @notice Transfer the tokens from the Market to the Reviewer.\\n                request.pTokenReviewer.transfer(\\n                    msg.sender,\\n                    request.pTokenReviewerTotal / request.reviewerLimit\\n                );\\n\\n            /// @notice Announce the new submission of a score by a maintainer.\\n            emit RequestReviewed(\\n                msg.sender,\\n                _requestId,\\n                _submissionId,\\n                reviewId,\\n                _score,\\n                _uri\\n            );\\n        }\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-claim}.\\n     */\\n    function claim(\\n        uint256 _requestId,\\n        uint256 _submissionId\\n    ) external returns (bool success, uint256) {\\n        /// @notice Get the Request out of storage to warm the slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @notice Ensure the Request is no longer in the enforcement phase.\\n        require(\\n            block.timestamp >= request.enforcementExp,\\n            \\\"LaborMarket::claim: Enforcement deadline not passed\\\"\\n        );\\n\\n        /// @notice Get the rewards attributed to this Submission.\\n        (uint256 amount, bool requiresSubmission) = criteria.rewards(\\n            _requestId,\\n            _submissionId\\n        );\\n\\n        /// @notice Ensure the Submission has funds to claim.\\n        if (amount != 0) {\\n            /// @notice Recover the address by truncating the Submission id.\\n            address provider = address(uint160(_submissionId));\\n\\n            /// @notice Determine if a verified submission was made.\\n            if(\\n                requestIdToAddressToPerformance[_requestId][provider] & 0x3 == 2\\n            ) { \\n                /// @dev Set the performance state to zero as the Provider has concluded\\n                ///      their participation in the Request.\\n                /// @notice This prevents the Provider from taking any more actions within\\n                ///         the protocol as well as prevents future claims unless an\\n                ///         enforcement module that has `requiresSubmission` set to false\\n                ///         is used in which case there may be a situation where the\\n                ///         Provider is not required to submit anything.\\n                requestIdToAddressToPerformance[_requestId][provider] = 0;\\n            }\\n\\n            /// @dev Allow the enforcement criteria to perform any additional logic.\\n            require(\\n                !requiresSubmission || requestIdToAddressToPerformance[_requestId][provider] == 0,\\n                \\\"LaborMarket::claim: Invalid submission claim\\\"\\n            );\\n\\n            /// @notice Transfer the pTokens to the network participant.\\n            /// @dev Update health status for bulk processing offchain.\\n            success = request.pTokenProvider.transfer(provider, amount);\\n\\n            /// @notice Announce the claiming of a service provider reward.\\n            emit RequestPayClaimed(\\n                msg.sender,\\n                _requestId,\\n                _submissionId,\\n                amount,\\n                provider\\n            );\\n        }\\n\\n        /// @notice If there were no funds to claim, acknowledge the failure of the transfer\\n        ///         and return false without blocking the transaction.\\n\\n        /// @notice Return the amount of pTokens claimed.\\n        return (success, amount);\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-claimRemainder}.\\n     */\\n    function claimRemainder(\\n        uint256 _requestId\\n    )\\n        public\\n        virtual\\n        returns (\\n            bool pTokenProviderSuccess,\\n            bool pTokenReviewerSuccess,\\n            uint256 pTokenProviderSurplus,\\n            uint256 pTokenReviewerSurplus\\n        )\\n    {\\n        /// @dev Get the Request out of storage to warm the slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @dev Ensure the Request is no longer in the enforcement phase.\\n        require(\\n            block.timestamp >= request.enforcementExp,\\n            \\\"LaborMarket::claimRemainder: Enforcement deadline not passed\\\"\\n        );\\n\\n        /// @notice Get the signal state of the Request.\\n        ServiceSignalState storage signalState = requestIdToSignalState[\\n            _requestId\\n        ];\\n\\n        /// @notice Determine the amount of available Provider payments never redeemed.\\n        pTokenProviderSurplus =\\n            (request.providerLimit - requestIdToProviders[_requestId].length()) *\\n            (request.pTokenProviderTotal / request.providerLimit);\\n\\n        /// @notice Determine the amount of available Reviewer payments never redeemed.\\n        pTokenReviewerSurplus =\\n            (request.reviewerLimit - signalState.reviewersArrived) *\\n            (request.pTokenReviewerTotal / request.reviewerLimit);\\n\\n        /// @notice Determine the amount of undistributed money remaining in the Request.\\n        /// @dev This accounts for funds that were attempted to be earned, but failed to be by\\n        ///      not meeting the enforcement standards of the criteria module enabled.\\n        pTokenProviderSurplus += criteria.remainder(_requestId);\\n\\n        /// @dev Pull the address of the Requester out of storage.\\n        address requester = address(uint160(_requestId));\\n\\n        /// @notice Redistribute the Provider allocated funds that were not earned.\\n        if (pTokenProviderSurplus != 0) {\\n            /// @notice Transfer the remainder of the deposit funds back to the requester.\\n            pTokenProviderSuccess = request.pTokenProvider.transfer(requester, pTokenProviderSurplus);\\n\\n            /// @dev Clear the Provider payment token from storage.\\n            delete request.pTokenProviderTotal;\\n        }\\n\\n        /// @notice Redistribute the Reviewer allocated funds that were not earned.\\n        if (pTokenReviewerSurplus != 0) {\\n            /// @notice Transfer the remainder of the deposit funds back to the Requester.\\n            pTokenReviewerSuccess = request.pTokenReviewer.transfer(requester, pTokenReviewerSurplus);\\n\\n            /// @dev Clear the Reviewer payment token from storage.\\n            delete request.pTokenReviewerTotal;\\n        }\\n\\n        if(request.pTokenProviderTotal == 0 || request.pTokenReviewerTotal == 0) { \\n            /// @dev Determine if there will be a remainder after the claim.\\n            bool settled = (request.pTokenProviderTotal == 0 && request.pTokenReviewerTotal == 0);\\n\\n            /// @notice Announce the claiming of a service requester reward.\\n            emit RemainderClaimed(msg.sender, _requestId, requester, settled);\\n        }\\n\\n        /// @notice If there were no funds to reclaim, acknowledge the failure of the claim\\n        ///         and return false without blocking the transaction.\\n    }\\n\\n    /**\\n     * See {LaborMarketInterface-withdrawRequest}.\\n     */\\n    function withdrawRequest(uint256 _requestId) public virtual {\\n        /// @dev Get the Request out of storage to warm the slot.\\n        ServiceRequest storage request = requestIdToRequest[_requestId];\\n\\n        /// @dev Ensure that only the Requester may withdraw the Request.\\n        require(\\n            address(uint160(_requestId)) == msg.sender,\\n            \\\"LaborMarket::withdrawRequest: Not requester\\\"\\n        );\\n\\n        /// @dev Require that the Request does not have any signal state and\\n        ///      that no valid submission has been made.\\n        require(\\n            (requestIdToSignalState[_requestId].providers |\\n                requestIdToSignalState[_requestId].reviewers |\\n                requestIdToSignalState[_requestId].reviewersArrived |\\n                requestIdToProviders[_requestId].length()) == 0,\\n            \\\"LaborMarket::withdrawRequest: Already active\\\"\\n        );\\n\\n        /// @dev Initialize the refund amounts before clearing storage.\\n        uint256 pTokenProviderRemainder = request.pTokenProviderTotal;\\n        uint256 pTokenReviewerRemainder = request.pTokenReviewerTotal;\\n\\n        /// @notice Delete the Request and prevent further action.\\n        delete request.signalExp;\\n        delete request.submissionExp;\\n        delete request.enforcementExp;\\n        delete request.providerLimit;\\n        delete request.reviewerLimit;\\n        delete request.pTokenProviderTotal;\\n        delete request.pTokenReviewerTotal;\\n\\n        /// @notice Return the Provider payment token back to the Requester.\\n        if (pTokenProviderRemainder > 0)\\n            request.pTokenProvider.transfer(\\n                msg.sender,\\n                pTokenProviderRemainder\\n            );\\n\\n        /// @notice Return the Reviewer payment token back to the Requester.\\n        if (pTokenReviewerRemainder > 0)\\n            request.pTokenReviewer.transfer(\\n                msg.sender,\\n                pTokenReviewerRemainder\\n            );\\n\\n        /// @dev Delete the pToken interface references.\\n        delete request.pTokenProvider;\\n        delete request.pTokenReviewer;\\n\\n        /// @dev Announce the withdrawal of a Request.\\n        emit RequestWithdrawn(_requestId);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"criteria\",\"type\":\"address\"}],\"name\":\"LaborMarketConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"sigs\",\"type\":\"bytes4[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deployerAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC1155\",\"name\":\"badge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"internalType\":\"struct NBadgeAuthInterface.Badge[]\",\"name\":\"badges\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct NBadgeAuthInterface.Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"}],\"name\":\"NodesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"name\":\"RemainderClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"signalExp\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"submissionExp\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"enforcementExp\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"providerLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"reviewerLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pTokenProviderTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pTokenReviewerTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"pTokenProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"pTokenReviewer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"RequestConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fulfiller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RequestPayClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"submissionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reviewScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"RequestReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signaler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestSignal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signaler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ReviewSignal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claimRemainder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pTokenProviderSuccess\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pTokenReviewerSuccess\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pTokenProviderSurplus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pTokenReviewerSurplus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"contract EnforcementCriteriaInterface\",\"name\":\"_criteria\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_auxilaries\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_alphas\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_betas\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deployerAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC1155\",\"name\":\"badge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"internalType\":\"struct NBadgeAuthInterface.Badge[]\",\"name\":\"badges\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NBadgeAuthInterface.Node[]\",\"name\":\"_nodes\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"provide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"submissionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestIdToAddressToPerformance\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToRequest\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"signalExp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"submissionExp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"enforcementExp\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"providerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"pTokenProviderTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pTokenReviewerTotal\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"pTokenProvider\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pTokenReviewer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToSignalState\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"providers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewersArrived\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"review\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"signal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_quantity\",\"type\":\"uint24\"}],\"name\":\"signalReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_blockNonce\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"signalExp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"submissionExp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"enforcementExp\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"providerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reviewerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"pTokenProviderTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pTokenReviewerTotal\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"pTokenProvider\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pTokenReviewer\",\"type\":\"address\"}],\"internalType\":\"struct LaborMarketInterface.ServiceRequest\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"submitRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaborMarket", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}