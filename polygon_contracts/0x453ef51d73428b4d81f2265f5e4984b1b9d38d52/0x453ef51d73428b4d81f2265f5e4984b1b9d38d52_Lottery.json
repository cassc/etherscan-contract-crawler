{"SourceCode": "/**\r\n *Submitted for verification at PolygonScan.com on 2023-10-20\r\n*/\r\n\r\n// /*\r\n//  *   Take part in a simple and fair game in which absolutely everyone has a chance to win.\r\n//  *   The decentralised smart contract makes all processes transparent and fully automated!\r\n//  *\r\n//  *   The essence of the game is very simple and it consists in the fact that the user\r\n//  *   is offered to buy tickets in the active round and after the expiry of the round\r\n//  *   time or if the pool is collected, the smart contract algorithm will select three \r\n//  *   random tickets between which the pool of the round will be distributed in the\r\n//  *   proportions of 80% / 10% / 10%.\r\n//  *\r\n//  *   To become a participant of the game you need to have a cryptocurrency wallet\r\n//  *   and enough USDT to buy the desired number of tickets.\r\n//  *\r\n//  *   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \r\n//  *   \u2502   Website: https://bro2bro.com/                                       \u2502\r\n//  *   \u2502                                                                       \u2502  \r\n//  *   \u2502   Telegram Public Group: https://t.me/Bro2BroCom                      |\r\n//  *   \u2502   Telegram Support:      https://t.me/Bro2BroSupport                  |\r\n//  *   |                                                                       |\r\n//  *   |   E-mail:                press@bro2bro.com                            |\r\n//  *   |   Support:               support@bro2bro.com                          |\r\n//  *   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \r\n//  *\r\n//  *   [POOL]\r\n//  *\r\n//  *   - Round pool:   1000 USDT\r\n//  *   - Ticket price: 10 USDT\r\n//  *   - Round time:   7 days (or if the pool is collected)\r\n//  *\r\n//  *   [FUNDING TIERS]\r\n//  * \r\n//  *   - The smart contract algorithm will select three random tickets between which the\r\n//  *     pool of the round will be distributed in the proportions of 80% / 10% / 10%\r\n//  * \r\n//  *   [REFERRAL BONUSES]\r\n//  *\r\n//  *   - 2% of the ticket price\r\n//  *\r\n//  *   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n//  *\r\n//  *   [SMART-CONTRACT AUDITION AND SAFETY]\r\n//  *\r\n//  *   - Audited by independent company HACKEN (https://hacken.io)\r\n\r\n\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface OwnableInterface {\r\n  function owner() external returns (address);\r\n\r\n  function transferOwnership(address recipient) external;\r\n\r\n  function acceptOwnership() external;\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title The ConfirmedOwner contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\r\n  address private s_owner;\r\n  address private s_pendingOwner;\r\n\r\n  event OwnershipTransferRequested(address indexed from, address indexed to);\r\n  event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n  constructor(address newOwner, address pendingOwner) {\r\n    require(newOwner != address(0), \"Cannot set owner to zero\");\r\n\r\n    s_owner = newOwner;\r\n    if (pendingOwner != address(0)) {\r\n      _transferOwnership(pendingOwner);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address to) public override onlyOwner {\r\n    _transferOwnership(to);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership() external override {\r\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = s_owner;\r\n    s_owner = msg.sender;\r\n    s_pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current owner\r\n   */\r\n  function owner() public view override returns (address) {\r\n    return s_owner;\r\n  }\r\n\r\n  /**\r\n   * @notice validate, transfer ownership, and emit relevant events\r\n   */\r\n  function _transferOwnership(address to) private {\r\n    require(to != msg.sender, \"Cannot transfer to self\");\r\n\r\n    s_pendingOwner = to;\r\n\r\n    emit OwnershipTransferRequested(s_owner, to);\r\n  }\r\n\r\n  /**\r\n   * @notice validate access\r\n   */\r\n  function _validateOwnership() internal view {\r\n    require(msg.sender == s_owner, \"Only callable by owner\");\r\n  }\r\n\r\n  /**\r\n   * @notice Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _validateOwnership();\r\n    _;\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/ConfirmedOwner.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title The ConfirmedOwner contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\r\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(\r\n    uint64 subId\r\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/lottery.sol\r\n\r\npragma solidity >=0.8.0 <=0.8.20;\r\n\r\n\r\n\r\n\r\n\r\ncontract Lottery is VRFConsumerBaseV2, ConfirmedOwner {\r\n    VRFCoordinatorV2Interface private COORDINATOR;\r\n\r\n    uint16 private constant requestConfirmations = 3;\r\n    uint32 private constant numWords = 3;\r\n    uint32 private constant callbackGasLimit = 2500000;\r\n    uint64 private s_subscriptionId;\r\n\r\n    uint256 public maxTickets;\r\n    uint256 public currentTickets;\r\n    uint256 public endDate;\r\n    uint256 public startDate;\r\n    uint256 public duration;\r\n    uint256 public minForClaim;\r\n    uint256 public maxTicketsForWallet;\r\n    uint256 public currentId;\r\n    uint256 public price;\r\n    uint256 public percentageCommission;\r\n    uint256 public percentageRefferalReward;\r\n    address public operator;\r\n    address public usdt;\r\n    address public treasury;\r\n\r\n    bytes32 private constant keyHash =\r\n        0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd;\r\n\r\n    mapping(uint256 => RequestStatus) public s_requests;\r\n    mapping(address => mapping(uint256 => uint256)) public walletWithIdToAmount;\r\n    mapping(address => address) public walletToRefferal;\r\n    mapping(address => uint256) public walletToRefferalReward;\r\n    mapping(address => uint256) public walletToRefferalRewardForClaim;\r\n    mapping(address => uint256) public walletToCountRefferal;\r\n    mapping(address => uint256) public walletToAmountReward;\r\n    mapping(uint256 => bool) public lotteryIdToEnded;\r\n    mapping(uint256 => Winners) public lotteryIdToWinners;\r\n\r\n    address[] public tickets;\r\n\r\n    struct RequestStatus {\r\n        bool fulfilled;\r\n        bool exists;\r\n        uint256[] randomWords;\r\n    }\r\n    struct Winners {\r\n        address first;\r\n        address second;\r\n        address third;\r\n    }\r\n\r\n    event NewCoin(address coin);\r\n    event NewOperator(address operator);\r\n    event NewTreasury(address treasury);\r\n    event BuyTicket(\r\n        uint256 lotteryId,\r\n        uint256 ticketAmount,\r\n        address buyer,\r\n        address refferal\r\n    );\r\n    event EndLottery(\r\n        uint256 lotteryId,\r\n        uint256 amount,\r\n        uint256 tickets,\r\n        uint256 requestId\r\n    );\r\n\r\n    constructor(\r\n        uint64 _subscriptionId,\r\n        uint256 _duration,\r\n        uint256 _price,\r\n        uint256 _amountMaxForWallet,\r\n        uint256 _amountMax,\r\n        address _usdt,\r\n        address _operator\r\n    ) VRFConsumerBaseV2(0xAE975071Be8F8eE67addBC1A82488F1C24858067) ConfirmedOwner(msg.sender) {\r\n        require(_usdt != address(0), \"zero address\");\r\n        require(_operator != address(0), \"zero address\");\r\n        COORDINATOR = VRFCoordinatorV2Interface(0xAE975071Be8F8eE67addBC1A82488F1C24858067);\r\n        s_subscriptionId = _subscriptionId;\r\n        currentId = 1;\r\n        startDate = block.timestamp;\r\n        endDate = block.timestamp + _duration;\r\n        duration = _duration;\r\n        price = _price;\r\n        maxTicketsForWallet = _amountMaxForWallet;\r\n        maxTickets = _amountMax;\r\n        usdt = _usdt;\r\n        operator = _operator;\r\n        percentageCommission = 10;\r\n        percentageRefferalReward = 20;\r\n        minForClaim = 20000000;\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOwner {\r\n        require(_operator != address(0), \"zero address\");\r\n        require(tickets.length == 0, \"lottery is running\");\r\n        operator = _operator;\r\n        emit NewOperator(_operator);\r\n    }\r\n\r\n    function setCoin(address _coin) external onlyOwner {\r\n        require(_coin != address(0), \"zero address\");\r\n        require(tickets.length == 0, \"lottery is running\");\r\n        usdt = _coin;\r\n        emit NewCoin(_coin);\r\n    }\r\n\r\n    function setMaxTickets(uint256 _count) external onlyOwner {\r\n        require(tickets.length == 0, \"lottery is running\");\r\n        maxTickets = _count;\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(_treasury != address(0), \"zero address\");\r\n        treasury = _treasury;\r\n        emit NewTreasury(_treasury);\r\n    }\r\n\r\n    function buyTickets(uint256 _amount, address refferal) external {\r\n        require(currentTickets + _amount <= maxTickets, \"max tickets\");\r\n        require(\r\n            IERC20(usdt).balanceOf(msg.sender) >= _amount * price,\r\n            \"not enough balance\"\r\n        );\r\n        require(endDate >= block.timestamp, \"end lottery wait\");\r\n        require(\r\n            walletWithIdToAmount[msg.sender][currentId] + _amount <=\r\n                maxTicketsForWallet,\r\n            \"only 50% buy tickets\"\r\n        );\r\n        uint256 commission = ((_amount * price) / 100) * percentageCommission;\r\n        _safeTransferIn(usdt, msg.sender, (_amount * price) + commission);\r\n        walletWithIdToAmount[msg.sender][currentId] += _amount;\r\n\r\n        currentTickets += _amount;\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            tickets.push(msg.sender);\r\n        }\r\n        if (\r\n            refferal != address(0) || walletToRefferal[msg.sender] != address(0)\r\n        ) {\r\n            if (walletToRefferal[msg.sender] == address(0)) {\r\n                walletToRefferal[msg.sender] = refferal;\r\n                walletToCountRefferal[refferal]++;\r\n            }\r\n            walletToRefferalReward[refferal] +=\r\n                (commission / 100) *\r\n                percentageRefferalReward;\r\n            walletToRefferalRewardForClaim[refferal] +=\r\n                (commission / 100) *\r\n                percentageRefferalReward;\r\n        }\r\n        emit BuyTicket(\r\n            currentId,\r\n            _amount,\r\n            msg.sender,\r\n            walletToRefferal[msg.sender]\r\n        );\r\n    }\r\n\r\n    function endLottery() external {\r\n        require(\r\n            currentTickets == maxTickets || endDate <= block.timestamp,\r\n            \"not ended\"\r\n        );\r\n        require(msg.sender == operator || msg.sender == owner(), \"not owner\");\r\n        if (tickets.length > 0) {\r\n            uint256 requestId = COORDINATOR.requestRandomWords(\r\n                keyHash,\r\n                s_subscriptionId,\r\n                requestConfirmations,\r\n                callbackGasLimit,\r\n                numWords\r\n            );\r\n\r\n            s_requests[requestId] = RequestStatus({\r\n                randomWords: new uint256[](0),\r\n                exists: true,\r\n                fulfilled: false\r\n            });\r\n            emit EndLottery(\r\n                currentId,\r\n                tickets.length * price,\r\n                tickets.length,\r\n                requestId\r\n            );\r\n        } else {\r\n            _restartLottery();\r\n        }\r\n    }\r\n\r\n    function claimReward() public {\r\n        require(\r\n            walletToRefferalRewardForClaim[msg.sender] > minForClaim,\r\n            \"not enough balance\"\r\n        );\r\n        IERC20 erc20 = IERC20(usdt);\r\n        erc20.transfer(msg.sender, walletToRefferalRewardForClaim[msg.sender]);\r\n        walletToRefferalRewardForClaim[msg.sender] = 0;\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n        uint256 value = tickets.length * price;\r\n        require(\r\n            IERC20(usdt).balanceOf(address(this)) >= value,\r\n            \"not enough balance\"\r\n        );\r\n        address firstWinner = tickets[(_randomWords[0] % tickets.length)];\r\n        address secondWinner = tickets[(_randomWords[1] % tickets.length)];\r\n        address thirdWinner = tickets[(_randomWords[2] % tickets.length)];\r\n        _safeTransferOut(usdt, firstWinner, (value / 100) * 80);\r\n        _safeTransferOut(usdt, secondWinner, (value / 100) * 10);\r\n        _safeTransferOut(usdt, thirdWinner, (value / 100) * 10);\r\n\r\n        _safeTransferOut(usdt, treasury, IERC20(usdt).balanceOf(address(this)));\r\n\r\n        Winners memory winners = lotteryIdToWinners[currentId];\r\n        winners.first = firstWinner;\r\n        winners.second = secondWinner;\r\n        winners.third = thirdWinner;\r\n        lotteryIdToWinners[currentId] = winners;\r\n        _restartLottery();\r\n    }\r\n\r\n    function _safeTransferIn(\r\n        address _token,\r\n        address _from,\r\n        uint256 _amount\r\n    ) internal {\r\n        IERC20 erc20 = IERC20(_token);\r\n        uint256 balBefore = erc20.balanceOf(address(this));\r\n        erc20.transferFrom(_from, address(this), _amount);\r\n        require(\r\n            erc20.balanceOf(address(this)) - balBefore == _amount,\r\n            \"!transfer from\"\r\n        );\r\n    }\r\n\r\n    function _safeTransferOut(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        IERC20 erc20 = IERC20(_token);\r\n        erc20.transfer(_to, _amount);\r\n    }\r\n\r\n    function _restartLottery() internal {\r\n        startDate = block.timestamp;\r\n        endDate = block.timestamp + duration;\r\n        tickets = new address[](0);\r\n        lotteryIdToEnded[currentId] = true;\r\n        currentTickets = 0;\r\n        currentId++;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMaxForWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"BuyTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"EndLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"NewCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIdToEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIdToWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"first\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"second\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"third\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTicketsForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageRefferalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"setCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setMaxTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToAmountReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToCountRefferal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToRefferal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToRefferalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToRefferalRewardForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletWithIdToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000003bf0000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000099a5116128821826e88f9c06b4c0d6454bb2ded3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19f71826bbd382350769ea94b07c90993010623c24b8079d5f264d202a0709b9"}