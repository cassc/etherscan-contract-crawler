{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function safeMint(address to, uint8 index) external returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MaticCats is Ownable {\r\n    using SafeMath for uint256;\r\n    address payable public feeReceiver;\r\n    address public silverNft;\r\n    address public goldNft;\r\n    address public platinumNft;\r\n\r\n    uint256 public totalUsers;\r\n    uint256 public totalMiners;\r\n    uint256 public totalInvested;\r\n    uint256 public totalRefRewards;\r\n\r\n    uint256 private marketValue;\r\n    uint256 private creditsToHire1Miner = 1080000; \r\n    uint256 private silverToHire1Miner = 864000;\r\n    uint256 private goldToHire1Miner = 720000;\r\n    uint256 private platinumToHire1Miner = 575424;\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 public depositFee = 50;\r\n    uint256 public withdrawFee = 50;\r\n    uint256 public refPercent = 100;\r\n    uint256 public percentDivider = 1000;\r\n    uint256 public minBuy = 10 ether;\r\n    uint256 public maxWallet = 500 ether;\r\n    uint256 public buyLimit = 10000 ether;\r\n    address private nullAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    bool private initialized;\r\n\r\n    struct RefData {\r\n        address referrer;\r\n        uint256 referals;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => uint256) public investedBnb;\r\n    mapping(address => uint256) public hiredMiners;\r\n    mapping(address => RefData) private userRefData;\r\n    mapping(address => uint256) public claimedProfit;\r\n    mapping(address => uint256) public lastHireAt;\r\n    mapping(address => uint256) public userCurrentTier;\r\n    mapping(address => uint256) public lastWithdraw;\r\n\r\n    constructor() {\r\n        feeReceiver = payable(msg.sender);\r\n    }\r\n\r\n    receive() external payable{}\r\n\r\n    // Can be initiated once.\r\n    function startMining() public payable onlyOwner {\r\n        require(!initialized && marketValue == 0, \"Mining already started.\");\r\n        initialized = true;\r\n        marketValue = 108000000000;\r\n    }\r\n\r\n    function hireMiners(address ref) public payable {\r\n        require(initialized,\"Not started yet\");\r\n        require(msg.value >= minBuy, \"Less than min amount\");\r\n\r\n        // Prevent whales in the beginning of mining to sustain the TVL.\r\n        if (getBalance() <= buyLimit) {\r\n            require(\r\n                investedBnb[msg.sender] + msg.value <= maxWallet,\r\n                \"Exceeds max wallet limit\"\r\n            );\r\n        }\r\n\r\n        if(investedBnb[msg.sender] == 0){\r\n            totalUsers++;\r\n        }\r\n\r\n        investedBnb[msg.sender] = investedBnb[msg.sender].add(msg.value);\r\n        totalInvested = totalInvested.add(msg.value);\r\n\r\n        if (ref == msg.sender) {\r\n            ref = address(0); \r\n        }\r\n\r\n        if (\r\n            userRefData[msg.sender].referrer == address(0) &&\r\n            userRefData[msg.sender].referrer != msg.sender\r\n        ) {\r\n            userRefData[msg.sender].referrer = ref;\r\n            userRefData[ref].referals++;\r\n        }\r\n\r\n        uint256 refReawrd = msg.value * refPercent / percentDivider;\r\n\r\n        // Send ref reward if referral is not the null address and keep track of total rewards distributed.\r\n        if(ref != address(0)) {\r\n            payable(ref).transfer(refReawrd);\r\n            userRefData[msg.sender].amount = userRefData[msg.sender].amount.add(refReawrd);\r\n            totalRefRewards = totalRefRewards.add(refReawrd);\r\n        }\r\n\r\n        if(IERC721(platinumNft).balanceOf(msg.sender) > 0) {\r\n            userCurrentTier[msg.sender] = platinumToHire1Miner;\r\n        } else if(IERC721(goldNft).balanceOf(msg.sender) > 0) {\r\n            userCurrentTier[msg.sender] = goldToHire1Miner;\r\n        } else if(IERC721(silverNft).balanceOf(msg.sender) > 0) {\r\n            userCurrentTier[msg.sender] = silverToHire1Miner;\r\n        } else {\r\n            userCurrentTier[msg.sender] = creditsToHire1Miner;\r\n        }\r\n\r\n        uint256 profit = calculateProfit(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n\r\n        profit = profit.sub(\r\n            profit.mul(depositFee).div(percentDivider)\r\n        );\r\n\r\n        uint256 fee = msg.value.mul(depositFee).div(percentDivider);\r\n        feeReceiver.transfer(fee);\r\n\r\n        claimedProfit[msg.sender] = claimedProfit[msg.sender].add(profit);\r\n        rehireMiners();\r\n    }\r\n\r\n    function rehireMiners() public {\r\n        require(initialized,\"Not started yet\");\r\n\r\n        uint256 profitGenrated = getMyProfit(msg.sender);\r\n        uint256 newMiners = profitGenrated.div(userCurrentTier[msg.sender]);\r\n        hiredMiners[msg.sender] = hiredMiners[msg.sender].add(newMiners);\r\n        totalMiners = totalMiners.add(newMiners);\r\n        claimedProfit[msg.sender] = 0;\r\n        lastHireAt[msg.sender] = block.timestamp;\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketValue = marketValue.add(profitGenrated.div(5));\r\n    }\r\n\r\n    function takeProfit() public {\r\n        require(initialized,\"Not started yet\");\r\n        uint256 hasProfit = getMyProfit(msg.sender);\r\n        uint256 profit = calculateSellProfit(hasProfit);\r\n        uint256 caBalances = address(this).balance;\r\n        // prevent stuck\r\n        if(profit >= caBalances) {\r\n            profit = caBalances;\r\n        }\r\n        require(profit > 0,\"0 profit\");\r\n        uint256 userTimeTax = checkUserWithdrawTax(msg.sender);\r\n        uint256 fee = (profit * withdrawFee) / percentDivider;\r\n        uint256 additionalTimeFee = (profit * userTimeTax) / percentDivider;\r\n        uint256 totalFee = fee + additionalTimeFee;\r\n        claimedProfit[msg.sender] = 0;\r\n        lastWithdraw[msg.sender] = block.timestamp;\r\n        lastHireAt[msg.sender] = block.timestamp;\r\n        marketValue = SafeMath.add(marketValue, hasProfit);\r\n\r\n        // Transfer regular withdraw fee to fee receiver.\r\n        feeReceiver.transfer(fee); \r\n\r\n        // Deduct regular withdraw fee + early withdraw fee (if any) from user and keep the early withdraw fee in the contract.\r\n        payable(msg.sender).transfer(SafeMath.sub(profit, totalFee));\r\n    }\r\n\r\n    function checkWithdrawElapsedTime(address who) public view returns (uint256) {\r\n        return  block.timestamp - lastWithdraw[who];\r\n    }\r\n\r\n    function checkUserWithdrawTax(address who) public view returns (uint256) {\r\n\r\n        uint256 elapsedTime = checkWithdrawElapsedTime(who);\r\n        if(elapsedTime <= 43200) return 900;\r\n        if(elapsedTime <= 86400)  return 850;\r\n        if(elapsedTime <= 129600)  return 800;\r\n        if(elapsedTime <= 172800)  return 750;\r\n        if(elapsedTime <= 216000)  return 700;\r\n        if(elapsedTime <= 259200)  return 650;\r\n        if(elapsedTime <= 302400)  return 600;\r\n        if(elapsedTime <= 345600)  return 550;\r\n        if(elapsedTime <= 388800)  return 500;\r\n        if(elapsedTime <= 432000)  return 450;\r\n        if(elapsedTime <= 475200)  return 400;\r\n        if(elapsedTime <= 518400)  return 350;\r\n        if(elapsedTime <= 561600)  return 300;\r\n        if(elapsedTime <= 604800)  return 250;\r\n        if(elapsedTime <= 648000)  return 200;\r\n        if(elapsedTime <= 691200)  return 150;\r\n        if(elapsedTime <= 734400)  return 100;\r\n        if(elapsedTime <= 777600)  return 50;\r\n        if(elapsedTime <= 820800)  return 0;\r\n        if(elapsedTime > 820800)  return 0;\r\n       \r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) private view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateSellProfit(uint256 profit) public view returns (uint256) {\r\n        return calculateTrade(profit, marketValue, address(this).balance);\r\n    }\r\n\r\n    function calculateProfit(uint256 bnb, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(bnb, contractBalance, marketValue);\r\n    }\r\n\r\n    function calculateProfitSimple(uint256 bnb) public view returns (uint256) {\r\n        return calculateProfit(bnb, address(this).balance);\r\n    }\r\n\r\n    function getProfit(address adr) public view returns (uint256) {\r\n        uint256 hasProfit = getMyProfit(adr);   // 3801600000\r\n        uint256 profit = calculateSellProfit(hasProfit);\r\n        return profit;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function bnbToMiners(address user, uint256 bnb) public view returns (uint256 newMiners) {\r\n        uint256 profitGenrated = calculateProfitSimple(bnb);\r\n        newMiners = profitGenrated.div(userCurrentTier[user] != 0 ? userCurrentTier[user] : creditsToHire1Miner);\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        return hiredMiners[adr];\r\n    }\r\n\r\n    function getMyProfit(address adr) public view returns (uint256) {\r\n        return SafeMath.add(claimedProfit[adr], getProfitSinceLastHire(adr));\r\n    }\r\n       \r\n\r\n    function getUserRefData(address adr) public view returns (address referrer, uint256 referals, uint256 amount) {\r\n        referrer = userRefData[adr].referrer;\r\n        referals = userRefData[adr].referals;\r\n        amount = userRefData[adr].amount;\r\n    }\r\n        \r\n    function getProfitSinceLastHire(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = calculateMin(\r\n            userCurrentTier[adr] != 0 ? userCurrentTier[adr] : creditsToHire1Miner,\r\n            SafeMath.sub(block.timestamp, lastHireAt[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hiredMiners[adr]);\r\n    }\r\n\r\n    function calculateMin(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    // Can be initiated once.\r\n    function setNftAddresses(address adrSilver, address adrGold, address adrPlatinum) external onlyOwner {\r\n        require(silverNft == address(0) && goldNft == address(0) && platinumNft == address(0), \"Already set.\");\r\n        silverNft = adrSilver;\r\n        goldNft = adrGold;\r\n        platinumNft = adrPlatinum;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"bnbToMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMiners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"calculateProfitSimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"calculateSellProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"checkUserWithdrawTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"checkWithdrawElapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getProfitSinceLastHire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getUserRefData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hireMiners\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hiredMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHireAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platinumNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rehireMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adrSilver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adrGold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adrPlatinum\",\"type\":\"address\"}],\"name\":\"setNftAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMining\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCurrentTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MaticCats", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca716b5813ab5707b95ce7d069be6938aa5b4d2b90124fdf76744c5969407f85"}