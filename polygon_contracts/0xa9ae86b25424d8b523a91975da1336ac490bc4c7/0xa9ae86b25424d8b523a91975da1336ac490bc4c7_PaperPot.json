{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PaperPot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n//import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"./ERC1155URIStorageSrb.sol\\\";\\nimport \\\"./AdminControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./JsonBuilder.sol\\\";\\n\\nimport {IPaperPotMetadata} from \\\"./PaperPotMetadata.sol\\\";\\nimport \\\"./PaperPotEnum.sol\\\";\\n\\n\\ncontract PaperPot is AdminControl, ERC1155, ERC1155Supply, ERC1155URIStorageSrb, JsonBuilder {\\n    IPaperPotMetadata public _metadataGenerator;\\n    // This is multiple to handle possibility of future seed series\\n    address[] public SEED_CONTRACT_ADDRESSES;\\n    uint constant POT_TOKENID = 1;\\n    uint constant FERTILIZER_TOKENID = 2;\\n    uint constant WATER_TOKENID = 3;\\n    address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint constant POTTED_PLANT_BASE_TOKENID = 10 ** 6;\\n    uint constant SHRUB_BASE_TOKENID = 2 * 10 ** 6;\\n    bytes4 constant ERC1155ID = 0xd9b67a26;\\n\\n    bool public mintingPaused = true;\\n    bool private freeze = false;\\n    uint private NFTTicketTokenId;\\n    address private NFTTicketAddress;\\n\\n    string private CONTRACT_URI = \\\"ipfs://QmZ7GM5AYS8fZKXhVJ518uHV4Wdx8nAdyquPhDH6TNY4Q5\\\";\\n\\n    uint private _fertForHappy = 3;\\n    uint private _fertForName = 5;\\n\\n    uint public pottedPlantCurrentIndex = 0;\\n    uint public shrubCurrentIndex = 0;\\n    uint private waterNonce = 0;\\n\\n    struct Growth {\\n        uint16 growthBps;   // 0 to 10000\\n        uint lastWatering;  // timestamp of the last watering\\n    }\\n\\n    using Strings for uint256;\\n\\n    // Valid seedContractAddresses\\n    mapping(address => bool) private _seedContractAddresses;\\n\\n    // True indicates sad seed\\n    // IMPORTANT: even though it is possible to add new seed contract addresses tokenIds must not be reused\\n    mapping(uint256 => bool) private _sadSeeds;\\n\\n    // seed planted in potted plant (tokenId, seedTokenId)\\n    mapping(uint => uint) private _plantedSeed;\\n\\n    // seed that shrub is based on (tokenId, seedTokenId)\\n    mapping(uint => uint) private _shrubBaseSeed;\\n\\n    // indicates growth state of a potted plant\\n    mapping(uint => Growth) private _growthState;\\n\\n    // indicates order number of a potted plant (only increases)\\n    mapping(uint => uint) private _pottedPlantNumber;\\n\\n    // indicates number of each class of potted plant\\n    mapping(NftClass => uint) public pottedPlantsByClass;\\n\\n    // Royalties.\\n    bytes4 private constant _INTERFACE_ID_EIP2981 = 0x2a55205a;\\n    mapping(uint256 => address payable) internal _royaltiesReceivers;\\n    mapping(uint256 => uint256) internal _royaltiesBps;\\n\\n\\n    event Grow(uint tokenId, uint16 growthAmount, uint16 growthBps);\\n    event Plant(uint256 tokenId, uint256 seedTokenId, address account);\\n    event Happy(uint256 tokenId);\\n    event Harvest(uint256 pottedPlantTokenId, uint256 shrubTokenId, address account);\\n\\n// Constructor\\n    constructor(\\n        address[] memory seedContractAddresses,\\n        uint[] memory sadSeeds,\\n        string[3] memory resourceUris_,\\n        address metadataGenerator_\\n    ) ERC1155(\\\"\\\") {\\n        require(seedContractAddresses.length > 0, \\\"Must be at least 1 seedContractAddress\\\");\\n        require(resourceUris_.length == 3, \\\"must be 3 uris - pot, fertilizer, water\\\");\\n        // setup the initial admin as the contract deployer\\n        setAdmin(_msgSender(), true);\\n        // Set the uri for pot, fertilizer, water\\n        for (uint i = 0; i < resourceUris_.length; i++) {\\n            _setURI(i + 1, resourceUris_[i]);\\n            emit URI(resourceUris_[i], i+1);\\n        }\\n        for (uint i = 0; i < seedContractAddresses.length; i++) {\\n            _seedContractAddresses[seedContractAddresses[i]] = true;\\n            SEED_CONTRACT_ADDRESSES.push(seedContractAddresses[i]);\\n        }\\n        for (uint i = 0; i < sadSeeds.length; i++) {\\n            _sadSeeds[sadSeeds[i]] = true;\\n        }\\n        _metadataGenerator = IPaperPotMetadata(metadataGenerator_);\\n    }\\n\\n    // Receive Function\\n\\n\\n    // Fallback Function\\n\\n    // External Functions\\n\\n    function plantAndMakeHappy(address _seedContractAddress, uint _seedTokenId) public {\\n        // User must burn 3 Fertilizer to make the seed happy (can be configured later)\\n        _burn(_msgSender(), FERTILIZER_TOKENID, _fertForHappy);\\n        // Ensure that the seed is sad\\n        require(_sadSeeds[_seedTokenId] == true, \\\"PaperPot: Seed already happy\\\");\\n        // Update the sad metadata for _seedTokenId\\n        _sadSeeds[_seedTokenId] = false;\\n        // run plant\\n        uint pottedPlantTokenId = plant(_seedContractAddress, _seedTokenId);\\n        // emit happy event\\n        emit Happy(pottedPlantTokenId);\\n    }\\n\\n    function _water(uint[] memory _tokenIds, bool fertilizer) internal {\\n        // Burn the water\\n        _burn(_msgSender(), WATER_TOKENID, _tokenIds.length);\\n        if (fertilizer) {\\n            // Burn the fertilizer\\n            _burn(_msgSender(), FERTILIZER_TOKENID, _tokenIds.length);\\n        }\\n        // Loop through and water each plant\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            require(_eligibleForWatering(_tokenIds[i]), \\\"PaperPot: provided tokenIds not eligible\\\");\\n            require(balanceOf(_msgSender(), _tokenIds[i]) > 0, \\\"PaperPot: Potted plant not owned by sender\\\");\\n            require(_growthState[_tokenIds[i]].growthBps < 10000, \\\"PaperPot: Potted plant is already fully grown\\\");\\n            waterNonce++;\\n            uint16 relativeGrowth = fertilizer ? (\\n                _sadSeeds[_plantedSeed[_tokenIds[i]]] ?\\n                    getRandomInt(113, 150, waterNonce) : // Case: Sad Potted Plant with Fertilizer (150-263)\\n                    getRandomInt(225, 300, waterNonce)    // Case: Happy Potted Plant with Fertilizer (300-525)\\n            ) : (\\n                _sadSeeds[_plantedSeed[_tokenIds[i]]] ?\\n                    getRandomInt(75, 100, waterNonce) : // Case: Sad Potted Plant (100-175)\\n                    getRandomInt(150, 200, waterNonce)    // Case: Happy Potted Plant (200-350)\\n            );\\n            _growPlant(_tokenIds[i], relativeGrowth);\\n            emit URI(uri(_tokenIds[i]),_tokenIds[i]);\\n        }\\n    }\\n\\n    function water(uint[] calldata _tokenIds) external {\\n        _water(_tokenIds, false);\\n    }\\n\\n    function waterWithFertilizer(uint[] calldata _tokenIds) external {\\n        _water(_tokenIds, true);\\n    }\\n\\n    function setShrubName(uint tokenId_, string memory newName_) external {\\n        // Must be the tokenId of a shrub\\n        require(tokenId_ > SHRUB_BASE_TOKENID, \\\"PaperPot: Invalid tokenId\\\");\\n        // Must own SHRUB\\n        require(balanceOf(_msgSender(), tokenId_) > 0, \\\"PaperPot: Must own Shrub to name\\\");\\n        // Must pay 5 fertilizer\\n        _burn(_msgSender(), FERTILIZER_TOKENID, _fertForName);\\n        // update the name based on the seedTokenId\\n        _metadataGenerator.setShrubName(_shrubBaseSeed[tokenId_], newName_);\\n    }\\n\\n    function harvest(uint _tokenId) external {\\n        // Ensure that tokenId is eligible for Harvest\\n        require(_growthState[_tokenId].growthBps == 10000, \\\"PaperPot: Not eligible for harvest\\\");\\n        // Ensure that tokenId is owned by caller\\n        require(balanceOf(_msgSender(), _tokenId) > 0, \\\"PaperPot: Potted plant not owned by sender\\\");\\n        // burn the potted plant\\n        _burn(_msgSender(), _tokenId, 1);\\n        // increment shrubCurrentIndex;\\n        shrubCurrentIndex++;\\n        uint shrubTokenId = SHRUB_BASE_TOKENID + shrubCurrentIndex;\\n        // set metadata for shrub\\n        _shrubBaseSeed[shrubTokenId] = _plantedSeed[_tokenId];\\n        // mint the shrub to the caller\\n        _mint(_msgSender(), shrubTokenId, 1, new bytes(0));\\n        emit Harvest(_tokenId, shrubTokenId, _msgSender());\\n//        emit URI(uri(shrubTokenId), shrubTokenId);\\n    }\\n\\n    // Owner Write Functions\\n    function setNftTicketInfo(uint NFTTicketTokenId_, address NFTTicketAddress_) external adminOnly {\\n        NFTTicketTokenId = NFTTicketTokenId_;\\n        NFTTicketAddress = NFTTicketAddress_;\\n    }\\n\\n    function addSeedContractAddress(address _seedContractAddress) external adminOnly {\\n        require(_seedContractAddresses[_seedContractAddress] == false, \\\"address already on seedContractAddresses\\\");\\n        require(ERC165Checker.supportsInterface(_seedContractAddress, type(IERC721).interfaceId), \\\"not a valid ERC-721 implementation\\\");\\n        SEED_CONTRACT_ADDRESSES.push(_seedContractAddress);\\n        _seedContractAddresses[_seedContractAddress] = true;\\n    }\\n\\n    function removeSeedContractAddress(address _seedContractAddress) external adminOnly {\\n        require(_seedContractAddresses[_seedContractAddress] == true, \\\"address not on seedContractAddresses\\\");\\n        _seedContractAddresses[_seedContractAddress] = false;\\n        for (uint i = 0; i < SEED_CONTRACT_ADDRESSES.length; i++) {\\n            if (SEED_CONTRACT_ADDRESSES[i] == _seedContractAddress) {\\n                SEED_CONTRACT_ADDRESSES[i] = SEED_CONTRACT_ADDRESSES[SEED_CONTRACT_ADDRESSES.length - 1];\\n                SEED_CONTRACT_ADDRESSES.pop();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function adminMintPot(address _to, uint _amount) external adminOnly {\\n        _mint(_to, POT_TOKENID, _amount, new bytes(0));\\n    }\\n\\n    function unpauseMinting() external adminOnly {\\n        mintingPaused = false;\\n    }\\n\\n    function pauseMinting() external adminOnly {\\n        mintingPaused = true;\\n    }\\n\\n    function mintFromTicket(address _to, uint _amount, uint ticketTokenId) external returns (bool) {\\n        require(mintingPaused == false, \\\"PaperPot: minting paused\\\");\\n        require(ticketTokenId == NFTTicketTokenId, \\\"PaperPot: invalid ticket tokenId\\\");\\n        require(_msgSender() == NFTTicketAddress, \\\"PaperPot: invalid sender\\\");\\n        _mint(_to, POT_TOKENID, _amount, new bytes(0));\\n        return true;\\n    }\\n\\n    function adminSetFreeze(bool freeze_) external adminOnly {\\n        freeze = freeze_;\\n    }\\n\\n    function adminDistributeWater(address _to, uint _amount) external adminOnly {\\n        _mint(_to, WATER_TOKENID, _amount, new bytes(0));\\n    }\\n\\n    function adminDistributeFertilizer(address _to, uint _amount) external adminOnly {\\n        _mint(_to, FERTILIZER_TOKENID, _amount, new bytes(0));\\n    }\\n\\n    function adminSetSadSeeds(uint[] memory seedTokenIds, bool[] memory isSads) external adminOnly {\\n        require(seedTokenIds.length == isSads.length, \\\"seedTokenIds and isSads must be equal length\\\");\\n        for (uint i = 0; i < seedTokenIds.length; i++) {\\n            _sadSeeds[seedTokenIds[i]] = isSads[i];\\n        }\\n    }\\n\\n    function adminSetFertForHappy(uint fertForHappy_) external adminOnly {\\n        _fertForHappy = fertForHappy_;\\n    }\\n\\n    function adminSetFertForName(uint fertForName_) external adminOnly {\\n        _fertForName = fertForName_;\\n    }\\n\\n    function setURI(uint tokenId_, string calldata tokenURI_) external adminOnly {\\n        _setURI(tokenId_, tokenURI_);\\n        emit URI(tokenURI_, tokenId_);\\n    }\\n\\n    function setMetadataGenerator(address metadataGenerator_) external adminOnly {\\n        require(ERC165Checker.supportsInterface(metadataGenerator_, type(IPaperPotMetadata).interfaceId), \\\"PaperPot: not a valid IPaperPotMetadata implementation\\\");\\n        _metadataGenerator = IPaperPotMetadata(metadataGenerator_);\\n    }\\n\\n    function adminEmitUri(uint tokenId_) external adminOnly {\\n        emit URI(uri(tokenId_), tokenId_);\\n    }\\n\\n    function setContractURI(string memory _contractUri) external adminOnly {\\n        CONTRACT_URI = _contractUri;\\n    }\\n\\n    // External View\\n\\n    function getPlantedSeed(uint _tokenId) external view validPottedPlant(_tokenId) returns (uint seedTokenId) {\\n        return _plantedSeed[_tokenId];\\n    }\\n\\n    function getGrowthLevel(uint _tokenId) external view validPottedPlant(_tokenId) returns (uint) {\\n        return _growthState[_tokenId].growthBps;\\n    }\\n\\n    function getLastWatering(uint _tokenId) external view validPottedPlant(_tokenId) returns (uint) {\\n        return _growthState[_tokenId].lastWatering;\\n    }\\n\\n    function eligibleForWatering(uint[] calldata _tokenIds) external view returns (bool eligible) {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            _validPottedPlant(_tokenIds[i]);\\n            // Check for duplicates\\n            for (uint j = 0; j < i; j++) {\\n                require(_tokenIds[j] != _tokenIds[i], \\\"PaperPot: duplicate tokenId\\\");\\n            }\\n            if (_eligibleForWatering(_tokenIds[i]) == false) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function isSeedSad(uint seedTokenId_) external view returns (bool) {\\n        return _sadSeeds[seedTokenId_];\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        return CONTRACT_URI;\\n    }\\n\\n    // Public Functions\\n\\n    function plant(address _seedContractAddress, uint _seedTokenId) public returns(uint) {\\n        // Pot is decremented from msg_sender()\\n        // Seed with _seedTokenId gets transferred to the Zero address (burned)\\n        // Mint new potted plant with tokenId POTTED_PLANT_BASE_TOKENID + pottedPlantCurrentIndex\\n        // Save metadata of potted plant\\n        // increment pottedPlantCurrentIndex\\n\\n        // _seedContractAddress must be valid\\n        require(_seedContractAddresses[_seedContractAddress] == true, \\\"Invalid seedContractAddress\\\");\\n        // must own a pot\\n        require(balanceOf(_msgSender(), POT_TOKENID) > 0, \\\"Must own a pot token to plant\\\");\\n        // must own the specified seed\\n        require(IERC721(_seedContractAddress).ownerOf(_seedTokenId) == _msgSender(), \\\"Must own seed to plant\\\");\\n        // Pot is decremented from msg_sender()\\n        _burn(_msgSender(), POT_TOKENID, 1);\\n        // Seed with _seedTokenId gets transferred to the Zero address (burned)\\n        IERC721(_seedContractAddress).transferFrom(_msgSender(), BURN_ADDRESS, _seedTokenId);\\n        // increment pottedPlantCurrentIndex\\n        pottedPlantCurrentIndex++;\\n        NftClass class = getClassFromSeedId(_seedTokenId);\\n        pottedPlantsByClass[class]++;\\n        // Mint new potted plant with tokenId POTTED_PLANT_BASE_TOKENID + pottedPlantCurrentIndex\\n        uint tokenId = POTTED_PLANT_BASE_TOKENID + pottedPlantCurrentIndex;\\n        _mint(_msgSender(), tokenId, 1, new bytes(0));\\n        _pottedPlantNumber[tokenId] = pottedPlantsByClass[class];\\n        // Save metadata of potted plant\\n        _plantedSeed[tokenId] = _seedTokenId;\\n        // Set initial growth state of potted plant\\n        _growthState[tokenId] = Growth({\\n            growthBps: 0,\\n            lastWatering: 1             // Initialized to 1 to differentiate from uninitialized\\n        });\\n        emit Plant(tokenId, _seedTokenId, _msgSender());\\n        emit URI(uri(tokenId), tokenId);\\n        return tokenId;\\n    }\\n\\n    function uri(uint _tokenId) public view override(ERC1155, ERC1155URIStorageSrb) returns (string memory) {\\n        require(exists(_tokenId), \\\"PaperPot: URI query for nonexistent token\\\");\\n        // use the baseUri for the pots, water, and fertilizer\\n        string memory storageUri = super.uri(_tokenId);\\n        if (bytes(storageUri).length > 0) {\\n            return storageUri;\\n        }\\n        if (_tokenId < SHRUB_BASE_TOKENID) {\\n            return generatePottedPlantMetadata(_tokenId);\\n        } else {\\n            return generateShrubMetatdata(_tokenId);\\n        }\\n    }\\n\\n    // Internal Functions\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        if (from != address(0)) {\\n            // sufficient balance check can be skipped for minting\\n            for (uint i = 0; i < ids.length; i++) {\\n                require(balanceOf(from, ids[i]) >= amounts[i], \\\"PaperPot: Insufficient balance\\\");\\n            }\\n        }\\n        require(freeze == false, \\\"Shrub: freeze in effect\\\");\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _eligibleForWatering(uint tokenId) internal view returns (bool) {\\n        Growth memory potGrowth = _growthState[tokenId];\\n        require(potGrowth.lastWatering != 0, \\\"PaperPot: ineligible tokenId\\\");\\n        // Check if timestamp is more than 8 hours ago\\n        if (block.timestamp < potGrowth.lastWatering + 8 hours) {\\n            return false;\\n        }\\n        // Check that timestamp is from previous day\\n        if (block.timestamp / 1 days == potGrowth.lastWatering / 1 days) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    // Private Functions\\n\\n    function _growPlant(uint _tokenId, uint16 growthAmount) private returns (uint growthBps) {\\n        if (_growthState[_tokenId].growthBps + growthAmount > 10000) {\\n            emit Grow(_tokenId, 10000 - _growthState[_tokenId].growthBps, 10000);\\n            _growthState[_tokenId].growthBps = 10000;\\n        } else {\\n            _growthState[_tokenId].growthBps += growthAmount;\\n            emit Grow(_tokenId, growthAmount, _growthState[_tokenId].growthBps);\\n        }\\n        _growthState[_tokenId].lastWatering = block.timestamp;\\n        return _growthState[_tokenId].growthBps;\\n    }\\n\\n    function generatePottedPlantMetadata(uint _tokenId) private view returns (string memory) {\\n        uint seedTokenId = _plantedSeed[_tokenId];\\n        return _metadataGenerator.tokenMetadata(\\n            getPottedPlantName(_tokenId),\\n            seedTokenId,\\n            _growthState[_tokenId].growthBps,\\n            _sadSeeds[seedTokenId]\\n        );\\n    }\\n\\n    function generateShrubMetatdata(uint _tokenId) private view returns (string memory) {\\n        uint seedTokenId = _shrubBaseSeed[_tokenId];\\n        return _metadataGenerator.shrubTokenMetadata(_tokenId, seedTokenId, _sadSeeds[seedTokenId]);\\n    }\\n\\n    function getPottedPlantName(uint _tokenId) private view returns (string memory) {\\n        NftClass class = getClassFromSeedId(_plantedSeed[_tokenId]);\\n        string memory className = class == NftClass.wonder ? \\\"Wonder\\\" :\\n        class == NftClass.passion ? \\\"Passion\\\" :\\n        class == NftClass.hope ? \\\"Hope\\\" : \\\"Power\\\";\\n        return string(abi.encodePacked('Potted Plant of ',className,' #',_pottedPlantNumber[_tokenId].toString()));\\n    }\\n\\n    function getRandomInt(uint16 _range, uint16 _min, uint _nonce) private view returns (uint16) {\\n        return uint16(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _nonce))) % _range) + _min;\\n    }\\n\\n    function seedIdInRange(uint256 _seedTokenId) private pure returns (bool) {\\n        return _seedTokenId > 0 && _seedTokenId < 10001;\\n    }\\n\\n    function getClassFromSeedId(uint256 _seedTokenId) private pure returns (NftClass) {\\n        require(seedIdInRange(_seedTokenId), \\\"seedTokenId not in range\\\");\\n        if (_seedTokenId > 1110) {\\n            return NftClass.wonder;\\n        }\\n        if (_seedTokenId > 110) {\\n            return NftClass.passion;\\n        }\\n        if (_seedTokenId > 10) {\\n            return NftClass.hope;\\n        }\\n        return NftClass.power;\\n    }\\n\\n    function _validPottedPlant(uint tokenId_) private view validPottedPlant(tokenId_) {}\\n\\n    /**\\n * @dev Throws if not a valid tokenId for a pottedplant or does not exist.\\n     */\\n    modifier validPottedPlant(uint tokenId_) {\\n        require(\\n            tokenId_ > POTTED_PLANT_BASE_TOKENID && tokenId_ < SHRUB_BASE_TOKENID,\\n            \\\"PaperPot: invalid potted plant tokenId\\\"\\n        );\\n        require(exists(tokenId_), \\\"PaperPot: query for nonexistent token\\\");\\n        _;\\n    }\\n\\n//    Payment functions\\n\\n    function setRoyalties(uint256 tokenId, address payable receiver, uint256 bps) external adminOnly {\\n        require(bps < 10000, \\\"invalid bps\\\");\\n        _royaltiesReceivers[tokenId] = receiver;\\n        _royaltiesBps[tokenId] = bps;\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) public view returns (address, uint256) {\\n        if (_royaltiesReceivers[tokenId] == address(0)) return (address(this), 1000*value/10000);\\n        return (_royaltiesReceivers[tokenId], _royaltiesBps[tokenId]*value/10000);\\n    }\\n\\n    function p(\\n        address token,\\n        address recipient,\\n        uint amount\\n    ) external adminOnly {\\n        if (token == address(0)) {\\n            require(\\n                amount == 0 || address(this).balance >= amount,\\n                'invalid amount value'\\n            );\\n            (bool success, ) = recipient.call{value: amount}('');\\n            require(success, 'amount transfer failed');\\n        } else {\\n            require(\\n                IERC20(token).transfer(recipient, amount),\\n                'amount transfer failed'\\n            );\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155URIStorageSrb.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n// Modified to not emit events when _setURI is called\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageSrb is ERC1155 {\\n    using Strings for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI = \\\"\\\";\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        // Remove this emit\\n//        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract AdminControl is Context {\\n    // Contract admins.\\n    mapping(address => bool) private _admins;\\n\\n    /**\\n * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _admins[_msgSender()] = true;\\n    }\\n\\n    function setAdmin(address addr, bool add) public adminOnly {\\n        if (add) {\\n            _admins[addr] = true;\\n        } else {\\n            delete _admins[addr];\\n        }\\n    }\\n\\n    function isAdmin(address addr) public view returns (bool) {\\n        return true == _admins[addr];\\n    }\\n\\n    modifier adminOnly() {\\n        require(isAdmin(msg.sender), \\\"AdminControl: caller is not an admin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/JsonBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ncontract JsonBuilder {\\n    function _openJsonObject() internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"{\\\"));\\n    }\\n\\n    function _closeJsonObject() internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"}\\\"));\\n    }\\n\\n    function _openJsonArray() internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"[\\\"));\\n    }\\n\\n    function _closeJsonArray() internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"]\\\"));\\n    }\\n\\n    function _pushJsonPrimitiveStringAttribute(string memory key, string memory value, bool insertComma) internal pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": \\\"', value, '\\\"', insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonPrimitiveNonStringAttribute(string memory key, string memory value, bool insertComma) internal pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": ', value, insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonComplexAttribute(string memory key, string memory value, bool insertComma) internal pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": ', value, insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonArrayElement(string memory value, bool insertComma) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value, insertComma ? ',' : ''));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PaperPotMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n// Inspired by merge\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./JsonBuilder.sol\\\";\\nimport \\\"./AdminControl.sol\\\";\\nimport \\\"./PaperPotEnum.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./basic/baseERC1155.sol\\\";\\nimport \\\"./PaperPotEnum.sol\\\";\\n\\ninterface IPaperPotMetadata {\\n    function tokenMetadata(\\n        string memory name,\\n        uint seedTokenId,\\n        uint growth,\\n        bool isSad\\n    ) external view returns (string memory);\\n\\n    function shrubTokenMetadata(\\n        uint tokenId,\\n        uint seedTokenId,\\n        bool isSad\\n    ) external view returns (string memory);\\n\\n    function setShrubName(uint seedTokenId_, string memory newName_) external;\\n}\\n\\ncontract PaperPotMetadata is IPaperPotMetadata, JsonBuilder, Ownable, AdminControl, ERC165 {\\n    uint constant POTTED_PLANT_BASE_TOKENID = 10 ** 6;\\n\\n    struct ERC1155MetadataStructure {\\n        bool isImageLinked;\\n        string name;\\n        string description;\\n        string createdBy;\\n        string image;\\n        ERC1155MetadataAttribute[] attributes;\\n    }\\n\\n    struct ERC1155MetadataAttribute {\\n        bool includeDisplayType;\\n        bool includeTraitType;\\n        bool isValueAString;\\n        string displayType;\\n        string traitType;\\n        string value;\\n    }\\n    \\n    struct CustomMetadata {\\n        string name;\\n        string imageUri;\\n        string bodyType;\\n        string background;\\n        string top;\\n        string hat;\\n        string expression;\\n        string leftHand;\\n        string rightHand;\\n        string clothes;\\n        string accessory;\\n    }\\n\\n    string private _imageBaseUri;\\n\\n    // images for the potted plants by class and stage\\n    mapping(NftClass => mapping(GrowthStages => string)) private _pottedPlantImages;\\n\\n    // default image uri for shrubs based on class\\n    mapping(NftClass => string) private _shrubDefaultUris;\\n\\n    // uri for shrubs based on seedTokenId\\n    mapping(uint => CustomMetadata) private _shrubSeedUris;\\n\\n    using Base64 for string;\\n    using Strings for uint256;\\n\\n    constructor(\\n        string memory imageBaseUri_,\\n        string[4] memory shrubDefaultUris_\\n) {\\n        require(shrubDefaultUris_.length == 4, \\\"PaperPotMetadata: must be 4 uris - wonder, passion, hope, power\\\");\\n\\n        // setup the initial admin as the contract deployer\\n        setAdmin(_msgSender(), true);\\n\\n        adminSetDefaultUris(shrubDefaultUris_);\\n        _imageBaseUri = imageBaseUri_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n        interfaceId == type(IPaperPotMetadata).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenMetadata(\\n        string memory name,\\n        uint seedTokenId,\\n        uint growth,\\n        bool isSad\\n    ) external view returns (string memory) {\\n        string memory base64json = Base64.encode(bytes(string(abi.encodePacked(_getJson(name, seedTokenId, growth, isSad)))));\\n        return string(abi.encodePacked('data:application/json;base64,', base64json));\\n    }\\n\\n    function shrubTokenMetadata(\\n        uint tokenId,\\n        uint seedTokenId,\\n        bool isSad\\n    ) external view returns (string memory) {\\n        string memory base64json = Base64.encode(bytes(string(abi.encodePacked(_getJsonShrub(tokenId, seedTokenId, isSad)))));\\n        return string(abi.encodePacked('data:application/json;base64,', base64json));\\n    }\\n\\n    function _getJson(string memory name, uint _seedTokenId, uint _growth, bool _isSad) private view returns (string memory) {\\n        ERC1155MetadataStructure memory metadata = ERC1155MetadataStructure({\\n            isImageLinked: true,\\n            name: name,\\n            description: \\\"created by Shrub.finance\\\",\\n            createdBy: \\\"Shrub.finance\\\",\\n            image: string(abi.encodePacked(_getImage(_seedTokenId, _growth, _isSad))),\\n            attributes: _getJsonAttributes(_seedTokenId, _growth, _isSad)\\n        });\\n        return _generateERC1155Metadata(metadata);\\n    }\\n\\n    function _getJsonShrub(uint _tokenId, uint _seedTokenId, bool _isSad) private view returns (string memory) {\\n        ERC1155MetadataStructure memory metadata = ERC1155MetadataStructure({\\n            isImageLinked: true,\\n            name: _getNameShrub(_tokenId, _seedTokenId),\\n            description: \\\"created by Shrub.finance\\\",\\n            createdBy: \\\"Shrub.finance\\\",\\n            image: string(abi.encodePacked(_getImageShrub(_seedTokenId))),\\n            attributes: _getJsonAttributesShrub(_tokenId, _seedTokenId, _isSad)\\n        });\\n        return _generateERC1155Metadata(metadata);\\n    }\\n\\n    function _getImage(uint seedTokenId, uint growth, bool isSad) private view returns (string memory) {\\n        string[3] memory classRarity = getClassFromSeedId(seedTokenId);\\n        string memory class = classRarity[0];\\n        string memory sadString = isSad ? \\\"sad\\\" : \\\"happy\\\";\\n        uint growthLevel = getGrowthLevel(growth);\\n        return string(abi.encodePacked(_imageBaseUri, \\\"pottedplant-\\\", class, \\\"-\\\", growthLevel.toString(), \\\"-\\\", sadString, \\\".svg\\\"));\\n    }\\n\\n    function _getImageShrub(uint seedTokenId) private view returns (string memory) {\\n        // Return the seedTokenId specific image if it exists\\n        if (seedTokenId != 0) {\\n            string memory shrubSeedUri = _shrubSeedUris[seedTokenId].imageUri;\\n            if (bytes(shrubSeedUri).length > 0) {\\n                return shrubSeedUri;\\n            }\\n        }\\n\\n        // Otherwise return the default based on class\\n        NftClass class = getNftClassFromSeedId(seedTokenId);\\n        return _shrubDefaultUris[class];\\n    }\\n    \\n    function _getNameShrub(uint tokenId_, uint seedTokenId_) private view returns (string memory) {\\n        // Return the seedTokenId specific image if it exists\\n        if (seedTokenId_ != 0) {\\n            string memory shrubSeedUriName = _shrubSeedUris[seedTokenId_].name;\\n            if (bytes(shrubSeedUriName).length > 0) {\\n                return shrubSeedUriName;\\n            }\\n        }\\n        \\n        // Otherwise return the default based on tokenId\\n        return string(abi.encodePacked(\\\"Shrub #\\\", (tokenId_ - 2000000).toString()));\\n    }\\n\\n    function getGrowthLevel(uint growth) internal pure returns (uint) {\\n        return growth / 2000;\\n    }\\n\\n    function _getJsonAttributes(uint _seedTokenId, uint growth, bool isSad) private pure returns (ERC1155MetadataAttribute[] memory) {\\n        string[3] memory classRarity = getClassFromSeedId(_seedTokenId);\\n        ERC1155MetadataAttribute[] memory attributes = new ERC1155MetadataAttribute[](6);\\n        attributes[0] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Class\\\", classRarity[0]);\\n        attributes[1] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Rarity\\\", classRarity[1]);\\n        attributes[2] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"DNA\\\", getDnaFromSeedId(_seedTokenId).toString());\\n        attributes[3] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Growth\\\", growth.toString());\\n        attributes[4] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Emotion\\\", isSad ? \\\"Sad\\\" : \\\"Happy\\\");\\n        attributes[5] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Planted Seed\\\", classRarity[2]);\\n        return attributes;\\n    }\\n\\n    function _getJsonAttributesShrub(uint _tokenId, uint _seedTokenId, bool isSad) private view returns (ERC1155MetadataAttribute[] memory) {\\n        string[3] memory classRarity = getClassFromSeedId(_seedTokenId);\\n        ERC1155MetadataAttribute[] memory attributes = new ERC1155MetadataAttribute[](14);\\n        attributes[0] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Class\\\", classRarity[0]);\\n        attributes[1] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"DNA\\\", getDnaFromSeedId(_seedTokenId).toString());\\n        attributes[2] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Emotion\\\", isSad ? \\\"Sad\\\" : \\\"Happy\\\");\\n        attributes[3] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Planted Seed\\\", classRarity[2]);\\n        attributes[4] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Birth Order\\\", (_tokenId - 2000000).toString());\\n        if (bytes(_shrubSeedUris[_seedTokenId].bodyType).length == 0) {\\n            return attributes;\\n        }\\n        uint i = 5;\\n        attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Body Type\\\", _shrubSeedUris[_seedTokenId].bodyType);\\n        i++;\\n        if (bytes(_shrubSeedUris[_seedTokenId].background).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Background\\\", _shrubSeedUris[_seedTokenId].background);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].top).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Top\\\", _shrubSeedUris[_seedTokenId].top);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].hat).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Hat\\\", _shrubSeedUris[_seedTokenId].hat);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].leftHand).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Left Hand\\\", _shrubSeedUris[_seedTokenId].leftHand);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].rightHand).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Right Hand\\\", _shrubSeedUris[_seedTokenId].rightHand);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].clothes).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Clothes\\\", _shrubSeedUris[_seedTokenId].clothes);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].accessory).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Accessory\\\", _shrubSeedUris[_seedTokenId].accessory);\\n            i++;\\n        }\\n        if (bytes(_shrubSeedUris[_seedTokenId].expression).length > 0) {\\n            attributes[i] = _getERC721MetadataAttribute(false, true, true, \\\"\\\", \\\"Expression\\\", _shrubSeedUris[_seedTokenId].expression);\\n        }\\n\\n        return attributes;\\n    }\\n\\n    function _getERC721MetadataAttribute(\\n        bool includeDisplayType,\\n        bool includeTraitType,\\n        bool isValueAString,\\n        string memory displayType,\\n        string memory traitType,\\n        string memory value\\n    ) private pure returns (ERC1155MetadataAttribute memory) {\\n        ERC1155MetadataAttribute memory attribute = ERC1155MetadataAttribute({\\n        includeDisplayType: includeDisplayType,\\n        includeTraitType: includeTraitType,\\n        isValueAString: isValueAString,\\n        displayType: displayType,\\n        traitType: traitType,\\n        value: value\\n        });\\n        return attribute;\\n    }\\n\\n    function _generateERC1155Metadata(ERC1155MetadataStructure memory metadata) private pure returns (string memory) {\\n        bytes memory byteString;\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _openJsonObject());\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"name\\\", metadata.name, true));\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"description\\\", metadata.description, true));\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"created_by\\\", metadata.createdBy, true));\\n\\n        if(metadata.isImageLinked) {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"image\\\", metadata.image, true));\\n        } else {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"image_data\\\", metadata.image, true));\\n        }\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonComplexAttribute(\\\"attributes\\\", _getAttributes(metadata.attributes), false));\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _closeJsonObject());\\n\\n        return string(byteString);\\n    }\\n\\n    function _getAttributes(ERC1155MetadataAttribute[] memory attributes) private pure returns (string memory) {\\n        bytes memory byteString;\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _openJsonArray());\\n\\n        for (uint i = 0; i < attributes.length; i++) {\\n            ERC1155MetadataAttribute memory attribute = attributes[i];\\n            // Added this to handle the case where there is no value\\n            if (bytes(attribute.value).length == 0) {\\n                continue;\\n            }\\n\\n            bool insertComma = i < (attributes.length - 1) && !(i == 4 && bytes(attributes[5].value).length == 0);\\n\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonArrayElement(_getAttribute(attribute), insertComma));\\n        }\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _closeJsonArray());\\n\\n        return string(byteString);\\n    }\\n\\n    function _getAttribute(ERC1155MetadataAttribute memory attribute) private pure returns (string memory) {\\n        bytes memory byteString;\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _openJsonObject());\\n\\n        if(attribute.includeDisplayType) {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"display_type\\\", attribute.displayType, true));\\n        }\\n\\n        if(attribute.includeTraitType) {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"trait_type\\\", attribute.traitType, true));\\n        }\\n\\n        if(attribute.isValueAString) {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"value\\\", attribute.value, false));\\n        } else {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveNonStringAttribute(\\\"value\\\", attribute.value, false));\\n        }\\n\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _closeJsonObject());\\n\\n        return string(byteString);\\n    }\\n\\n    function seedIdInRange(uint256 _seedTokenId) private pure returns (bool) {\\n        return _seedTokenId > 0 && _seedTokenId < 10001;\\n    }\\n\\n    function getClassFromSeedId(uint256 _seedTokenId) private pure returns (string[3] memory) {\\n        require(seedIdInRange(_seedTokenId), \\\"PaperPotMetadata: seedTokenId not in range\\\");\\n        if (_seedTokenId > 1110) {\\n            return [\\\"Wonder\\\", \\\"Common\\\", string(abi.encodePacked(\\\"Paper Seed of Wonder #\\\",(_seedTokenId - 1110).toString()))];\\n        }\\n        if (_seedTokenId > 110) {\\n            return [\\\"Passion\\\", \\\"Uncommon\\\", string(abi.encodePacked(\\\"Paper Seed of Passion #\\\",(_seedTokenId - 110).toString()))];\\n        }\\n        if (_seedTokenId > 10) {\\n            return [\\\"Hope\\\", \\\"Rare\\\", string(abi.encodePacked(\\\"Paper Seed of Hope #\\\",(_seedTokenId - 10).toString()))];\\n        }\\n        return [\\\"Power\\\", \\\"Legendary\\\", string(abi.encodePacked(\\\"Paper Seed of Power #\\\",_seedTokenId.toString()))];\\n    }\\n\\n    function getNftClassFromSeedId(uint256 _seedTokenId) private pure returns (NftClass) {\\n        require(seedIdInRange(_seedTokenId), \\\"PaperPotMetadata: seedTokenId not in range\\\");\\n        if (_seedTokenId > 1110) {\\n            return NftClass.wonder;\\n        }\\n        if (_seedTokenId > 110) {\\n            return NftClass.passion;\\n        }\\n        if (_seedTokenId > 10) {\\n            return NftClass.hope;\\n        }\\n        return NftClass.power;\\n    }\\n\\n    function getDnaFromSeedId(uint256 _seedTokenId) private pure returns (uint256 dna) {\\n        require(seedIdInRange(_seedTokenId), \\\"PaperPotMetadata: seedTokenId not in range\\\");\\n        return _seedTokenId % 100;\\n    }\\n\\n    function adminSetDefaultUris(string[4] memory shrubDefaultUris_) public adminOnly {\\n        // must be 4 uris - wonder, passion, hope, power\\n        for (uint8 i = 0; i < shrubDefaultUris_.length; i++) {\\n            _shrubDefaultUris[NftClass(i)] = shrubDefaultUris_[i];\\n        }\\n    }\\n\\n    function setShrubSeedUris(uint[] calldata seedTokenIds_, CustomMetadata[] calldata metadatas_) external adminOnly {\\n        require(seedTokenIds_.length == metadatas_.length, \\\"PaperPotMetadata: seedTokenIds and uris must be same length\\\");\\n        for (uint i = 0; i < seedTokenIds_.length; i++) {\\n            require(seedTokenIds_[i] < POTTED_PLANT_BASE_TOKENID, \\\"PaperPotMetadata: invalid seedTokenId\\\");\\n            _shrubSeedUris[seedTokenIds_[i]] = metadatas_[i];\\n        }\\n    }\\n\\n    function setShrubName(uint seedTokenId_, string memory newName_) external adminOnly {\\n        require(bytes(_shrubSeedUris[seedTokenId_].imageUri).length > 0, \\\"PaperPotMetadata: Can only set name for already set Shrub\\\");\\n        require(bytes(newName_).length < 27, \\\"PaperPotMetadata: Maximum characters in name is 26.\\\");\\n        require(validateMessage(newName_), \\\"PaperPotMetadata: Invalid Name\\\");\\n        _shrubSeedUris[seedTokenId_].name = newName_;\\n    }\\n\\n    function validateMessage(string memory message_) public pure returns(bool) {\\n        // a-z,A-Z only\\n        bytes memory messageBytes = bytes(message_);\\n        if (messageBytes.length == 0) {\\n            // Length 0 is allow to revert\\n            return true;\\n        }\\n\\n        // cannot begin or end with a space\\n        require(messageBytes.length > 0 && messageBytes[0] != 0x20 && messageBytes[messageBytes.length-1] != 0x20, \\\"Invalid characters\\\");\\n\\n        for (uint i = 0; i < messageBytes.length; i++) {\\n            bytes1 char = messageBytes[i];\\n            if (!(char >= 0x41 && char <= 0x5A) && !(char >= 0x61 && char <= 0x7A) && char != 0x20) {\\n                revert(\\\"Invalid character\\\");\\n            } else if (i >= 1 && char == 0x20 && messageBytes[i-1] == 0x20) {\\n                revert(\\\"Cannot have multiple sequential spaces\\\");\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/PaperPotEnum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\nenum NftClass {\\n    wonder, // 0\\n    passion, // 1\\n    hope, // 2\\n    power    // 3\\n}\\n\\nenum GrowthStages {\\n    none, // 0\\n    stage1, // 1\\n    stage2, // 2\\n    stage3, // 3\\n    stage4   // 4\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/basic/baseERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\ncontract BaseERC1155 is ERC1155 {\\n    constructor(string memory _baseUri) ERC1155(_baseUri) {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"seedContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sadSeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[3]\",\"name\":\"resourceUris_\",\"type\":\"string[3]\"},{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"growthAmount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"growthBps\",\"type\":\"uint16\"}],\"name\":\"Grow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Happy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pottedPlantTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shrubTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Plant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEED_CONTRACT_ADDRESSES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_metadataGenerator\",\"outputs\":[{\"internalType\":\"contract IPaperPotMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedContractAddress\",\"type\":\"address\"}],\"name\":\"addSeedContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminDistributeFertilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminDistributeWater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"adminEmitUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminMintPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fertForHappy_\",\"type\":\"uint256\"}],\"name\":\"adminSetFertForHappy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fertForName_\",\"type\":\"uint256\"}],\"name\":\"adminSetFertForName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"freeze_\",\"type\":\"bool\"}],\"name\":\"adminSetFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"seedTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isSads\",\"type\":\"bool[]\"}],\"name\":\"adminSetSadSeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"eligibleForWatering\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getGrowthLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastWatering\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPlantedSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seedTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seedTokenId_\",\"type\":\"uint256\"}],\"name\":\"isSeedSad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"mintFromTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"p\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seedTokenId\",\"type\":\"uint256\"}],\"name\":\"plant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seedTokenId\",\"type\":\"uint256\"}],\"name\":\"plantAndMakeHappy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pottedPlantCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NftClass\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pottedPlantsByClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seedContractAddress\",\"type\":\"address\"}],\"name\":\"removeSeedContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"}],\"name\":\"setMetadataGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFTTicketTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NFTTicketAddress_\",\"type\":\"address\"}],\"name\":\"setNftTicketInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName_\",\"type\":\"string\"}],\"name\":\"setShrubName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shrubCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"water\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"waterWithFertilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaperPot", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000ace145115066ac46a2a98b799893d9541a02462a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d415517378fe6832f8aa94037c52c0757a3a99150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d55533832666576315048426b4e335438667247357477765a557a544131575a79654872366147623143724a7200000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d614d55445773727463414650796a4c6a6a386e4b41576561466331666a3951546e50774c336364795047745100000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d58474d39394a71536e435238663374663851633259364a4c3838344e6832456b73687275676f3753414871580000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}