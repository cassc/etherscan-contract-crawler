{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Presale.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract FutureNowTokenPresale is Ownable, ReentrancyGuard {\r\n    // Struct to store user purchase information\r\n    struct PurchaseInfo {\r\n        address user;\r\n        uint256 amount;\r\n    }\r\n\r\n    // Mapping to store user's purchase amount\r\n    mapping(address => uint256) public purchases;\r\n\r\n    // Array to store all the purchases (for export purposes)\r\n    PurchaseInfo[] public purchaseList;\r\n    address public withdrawalWallet;\r\n\r\n    // Token prices\r\n    uint256 public usdtPrice = 300000; // 0.30 USDT (6 decimals for USDT)\r\n    uint256 public ethTokenPrice = 180000000000000; // 0.00018 ETH as a token on Polygon\r\n    uint256 public maticPrice = 575000000000000000; // 0.575 MATIC\r\n     // Token addresses\r\n    address public usdtAddress = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n    address public ethTokenAddress = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\r\n\r\n    // Presale status\r\n    bool public isPresaleActive = true;\r\n\r\n    // Max tokens purchasable\r\n    uint256 public maxTokensPurchasable = 3000000;\r\n    uint256 public tokensSold = 0;\r\n    uint256 public maxPerWallet = 300000;\r\n\r\n    // Events\r\n    event TokensPurchased(address indexed user, uint256 amount);\r\n\r\n    constructor(address _withdrawalWallet) {\r\n        withdrawalWallet = _withdrawalWallet;\r\n    }\r\n\r\n    function startPresale() external onlyOwner {\r\n        isPresaleActive = true;\r\n    }\r\n\r\n    function stopPresale() external onlyOwner {\r\n        isPresaleActive = false;\r\n    }\r\n\r\n    function setPrices(uint256 _usdtPrice, uint256 _ethTokenPrice, uint256 _maticPrice) external onlyOwner {\r\n        usdtPrice = _usdtPrice;\r\n        ethTokenPrice = _ethTokenPrice;\r\n        maticPrice = _maticPrice;\r\n    }\r\n\r\n    function setMaxTokensPurchasable(uint256 _maxTokens) external onlyOwner {\r\n        maxTokensPurchasable = _maxTokens;\r\n    }\r\n\r\n    function buyTokensWithUSDT(uint256 tokenAmount) external nonReentrant {\r\n        require(isPresaleActive, \"Presale is not active\");\r\n        require(tokenAmount + tokensSold <= maxTokensPurchasable, \"Exceeds max tokens purchasable\");\r\n        require(tokenAmount + purchases[msg.sender] <= maxPerWallet, \"Exceeds max tokens purchasable\");\r\n        uint256 requiredPayment = tokenAmount * usdtPrice;\r\n\r\n        // Transfer USDT from user to this contract\r\n        bool success = IERC20(usdtAddress).transferFrom(msg.sender, address(this), requiredPayment);\r\n        require(success, \"USDT transfer failed\");\r\n\r\n        // Update user's purchase\r\n        _updatePurchase(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function buyTokensWithETHToken(uint256 tokenAmount) external nonReentrant {\r\n        require(isPresaleActive, \"Presale is not active\");\r\n        require(tokenAmount + tokensSold <= maxTokensPurchasable, \"Exceeds max tokens purchasable\");\r\n        require(tokenAmount + purchases[msg.sender] <= maxPerWallet, \"Exceeds max tokens purchasable\");\r\n\r\n        uint256 requiredPayment = tokenAmount * ethTokenPrice;\r\n\r\n        // Transfer ETH token from user to this contract\r\n        bool success = IERC20(ethTokenAddress).transferFrom(msg.sender, address(this), requiredPayment);\r\n        require(success, \"ETH token transfer failed\");\r\n\r\n        // Update user's purchase\r\n        _updatePurchase(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function buyTokensWithMATIC(address receiver, uint256 tokenAmount) external payable {\r\n        require(isPresaleActive, \"Presale is not active\");\r\n        require(tokenAmount + tokensSold <= maxTokensPurchasable, \"Exceeds max tokens purchasable\");\r\n        require(tokenAmount + purchases[receiver] <= maxPerWallet, \"Exceeds max tokens purchasable\");\r\n\r\n        uint256 requiredPayment = tokenAmount * maticPrice;\r\n        require(msg.value == requiredPayment, \"Incorrect MATIC sent\");\r\n\r\n        // Update user's purchase\r\n        _updatePurchase(receiver, tokenAmount);\r\n    }\r\n\r\n    function _updatePurchase(address receiver, uint256 tokensToBuy) private {\r\n        purchases[receiver] += tokensToBuy;\r\n        purchaseList.push(PurchaseInfo({user: receiver, amount: tokensToBuy}));\r\n        tokensSold += tokensToBuy;\r\n        emit TokensPurchased(receiver, tokensToBuy);\r\n    }\r\n\r\n    function withdrawUSDT() external onlyOwner {\r\n        uint256 balance = IERC20(usdtAddress).balanceOf(address(this));\r\n        IERC20(usdtAddress).transfer(withdrawalWallet, balance);\r\n    }\r\n\r\n    function withdrawETHToken() external onlyOwner {\r\n        uint256 balance = IERC20(ethTokenAddress).balanceOf(address(this));\r\n        IERC20(ethTokenAddress).transfer(withdrawalWallet, balance);\r\n    }\r\n\r\n    function withdrawMATIC() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(withdrawalWallet).transfer(balance);\r\n    }\r\n\r\n    function exportPurchases() external view returns (PurchaseInfo[] memory) {\r\n        return purchaseList;\r\n    }\r\n    function changeWithdrawalWallet(address _withdrawalWallet) external onlyOwner{\r\n        withdrawalWallet = _withdrawalWallet;\r\n    }\r\n    function changeTokens(address _newEth, address _newUSDT) external onlyOwner{\r\n        usdtAddress = _newUSDT;\r\n        ethTokenAddress = _newEth;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawalWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithETHToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithMATIC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newUSDT\",\"type\":\"address\"}],\"name\":\"changeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawalWallet\",\"type\":\"address\"}],\"name\":\"changeWithdrawalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exportPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FutureNowTokenPresale.PurchaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPurchasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchaseList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensPurchasable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maticPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETHToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FutureNowTokenPresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006ef57bb8f405de7fa864e68e718a67b36fc08745", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20e219cb1fb73f18bceaf0f5135b46e02bc110bd5997417918c0b6cded44f210"}