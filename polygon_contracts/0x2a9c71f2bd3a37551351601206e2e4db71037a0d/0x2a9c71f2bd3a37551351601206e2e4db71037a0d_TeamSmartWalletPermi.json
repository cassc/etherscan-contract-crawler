{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/escrow/IEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Tax} from \\\"../taxes/Tax.sol\\\";\\nimport {Signature} from \\\"../../utils/Signature.sol\\\";\\n\\n/**\\n * @title IEscrow\\n * @notice This interface outlines the functions necessary for an escrow system in a marketplace trading ERC721 and ERC20 tokens.\\n * @dev Any contract implementing this interface can act as an escrow in the marketplace.\\n */\\ninterface IEscrow is IMarketHubRegistrar, IERC165 {\\n    /**\\n     * @dev Emitted when a sale is created.\\n     */\\n    event CreateSale(\\n        uint256 saleId,\\n        State state,\\n        address buyer,\\n        address spender,\\n        address erc20,\\n        uint256 price,\\n        bytes32 tier,\\n        address seller,\\n        address erc721,\\n        uint256 tokenId,\\n        string metadata\\n    );\\n\\n    /**\\n     * @dev Emitted when a sale's state is updated.\\n     */\\n    event UpdateSale(uint256 saleId, State newState);\\n\\n    /**\\n     * @dev Emitted when a sale's tax is updated.\\n     */\\n    event SaleTaxesUpdated(uint256 saleId, uint256 amount, uint256 countryCode, uint256 regionCode);\\n\\n    /**\\n     * @notice Updates the sales tax for a pre-pending sale.\\n     * @param _saleId The id of the sale.\\n     * @param _taxes The new taxes to collect in ERC20 tokens.\\n     */\\n    function updateSaleTaxesToCollect(uint256 _saleId, Tax memory _taxes) external;\\n\\n    /**\\n     * @dev Emitted when a royalty is paid out.\\n     */\\n    event RoyaltyPayout(uint256 saleId, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when a commission is paid out.\\n     */\\n    event CommissionPayout(uint256 saleId, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when a sale is completed and any on-chain tax are collected/to be remitted.\\n     */\\n    event TaxCollected(uint256 saleId, address receiver, uint256 taxes, uint256 country, uint256 region);\\n\\n    /**\\n     * @dev Emitted when a sale is complete.\\n     */\\n    event SaleComplete(uint256 saleId, uint256 payoutAmount);\\n\\n    /**\\n     * @dev Emitted when a sale is cancelled.\\n     */\\n    event SaleCancelled(uint256 saleId, address erc20ReturnedTo, address erc721ReturnedTo);\\n\\n    /**\\n     * @dev Emitted when the challenge window for buyers is changed.\\n     */\\n    event BuyerChallengeWindowChanged(uint256 numberOfHours);\\n\\n    /**\\n     * @dev Emitted when the funding window for a sale is changed.\\n     */\\n    event SaleFundingWindowChanged(uint256 numberOfHours);\\n\\n    /**\\n     * @notice Represents the different states a sale can be in.\\n     */\\n    enum State {\\n        AwaitingSettlement,\\n        AwaitingERC20Deposit,\\n        PendingSale,\\n        ProcessingSale,\\n        ShippingToBuyer,\\n        Received,\\n        ShippingToColleForAuthentication,\\n        ColleProcessingSale,\\n        ShippingToColleForDispute,\\n        IssueWithDelivery,\\n        IssueWithProduct,\\n        SaleCancelled,\\n        SaleSuccess\\n    }\\n\\n    /**\\n     * @notice Represents a sale.\\n     */\\n    struct Sale {\\n        uint256 id;\\n        address buyer;\\n        address spender;\\n        address erc20;\\n        uint256 price;\\n        Tax taxes;\\n        bytes32 tier;\\n        address seller;\\n        address erc721;\\n        uint256 tokenId;\\n        State state;\\n        uint256 createdTimestamp;\\n        uint256 receivedTimestamp;\\n    }\\n\\n    /**\\n     * @notice Sets the time window during which buyers can challenge a sale.\\n     * @param _hours The new challenge window in hours.\\n     */\\n    function setBuyerChallengeWindow(uint256 _hours) external;\\n\\n    /**\\n     * @notice Returns the current challenge window for buyers.\\n     * @return uint256 The challenge window in hours.\\n     */\\n    function buyerChallengeWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the time window during which a sale can be funded.\\n     * Can only be called by the colle.\\n     * @param _hours The new funding window in hours.\\n     */\\n    function setSaleFundingWindow(uint256 _hours) external;\\n\\n    /**\\n     * @notice Returns the current funding window for buyers.\\n     * @return uint256 The funding window in hours.\\n     */\\n    function saleFundingWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new sale.\\n     * @param _buyer The buyer's address.\\n     * @param _spender The address spending the ERC20 tokens.\\n     * @param _erc20 The address of the ERC20 token being used as currency.\\n     * @param _price The price in ERC20 tokens.\\n     * @param _seller The seller's address.\\n     * @param _erc721 The address of the ERC721 token being sold.\\n     * @param _tokenId The id of the ERC721 token being sold.\\n     */\\n    function createSale(\\n        address _buyer,\\n        address _spender,\\n        address _erc20,\\n        uint256 _price,\\n        address _seller,\\n        address _erc721,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Returns details of a sale.\\n     * @param _saleId The id of the sale.\\n     * @return Sale The details of the sale.\\n     */\\n    function getSale(uint256 _saleId) external view returns (Sale memory);\\n\\n    /**\\n     * @notice Checks if a particular ERC721 token is currently part of an active sale.\\n     * @param _erc721 The address of the ERC721 token.\\n     * @param _tokenId The id of the ERC721 token.\\n     * @return bool Whether the token is part of an active sale or not.\\n     */\\n    function hasActiveSale(address _erc721, uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Updates the state of a sale.\\n     * @param _saleId The id of the sale.\\n     * @param _newState The new state of the sale.\\n     */\\n    function updateSale(uint256 _saleId, State _newState) external;\\n\\n    /**\\n     * @notice Allows a signer to permit the update of a sale's state.\\n     * @param _saleId The id of the sale.\\n     * @param _newState The new state of the sale.\\n     * @param _signature The signer's signature, deadline and signer address.\\n     */\\n    function permitUpdateSale(uint256 _saleId, State _newState, Signature memory _signature) external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IMarketHubRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title IMarketHubRegistrar\\n * @dev This contract defines the interface for registering and unregistering to the MarketHub.\\n */\\ninterface IMarketHubRegistrar {\\n    /**\\n     * @dev Emitted when a marketHub is registered.\\n     */\\n    event RegisteredMarketHub(address marketHub);\\n\\n    /**\\n     * @dev Emitted when a marketHub is registered.\\n     */\\n    event UnregisteredMarketHub(address marketHub);\\n\\n    /**\\n     * @dev Register the calling contract to the MarketHub.\\n     * Only contracts that meet certain criteria may successfully register.\\n     */\\n    function register() external;\\n\\n    /**\\n     * @dev Unregister the calling contract from the MarketHub.\\n     * Only contracts that are currently registered can successfully unregister.\\n     */\\n    function unregister() external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/taxes/Tax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nstruct Tax {\\n    uint256 amount;\\n    uint256 countryCode;\\n    uint256 regionCode;\\n}\\n\"\r\n    },\r\n    \"contracts/team-smart-wallet/ITeamSmartWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {IERC1155ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport {IEscrow} from \\\"../marketplace/escrow/IEscrow.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Tax} from \\\"../marketplace/taxes/Tax.sol\\\";\\nimport {Signature} from \\\"../utils/Signature.sol\\\";\\n\\n/**\\n * @title TeamSmartWallet\\n *\\n * @notice A smart contract for managing access-controlled and upgradable smart wallets for teams.\\n * Includes capabilities for trading NFTs, managing financials, and upgrading the smart wallet.\\n *\\n * @dev The contract uses OpenZeppelin's AccessControlUpgradeable for access control functionality,\\n * and UUPSUpgradeable for the upgradeability. It implements the IERC721ReceiverUpgradeable and\\n * IERC1155ReceiverUpgradeable interfaces to enable receiving NFTs, and uses the SignatureValidator\\n * contract to enable off-chain approval of transactions.\\n */\\ninterface ITeamSmartWallet is IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\\n    /**\\n     * @dev Emitted when a admin consents to a contract upgade.\\n     */\\n    event AllowUpgrade(bool isAllowed);\\n\\n    /**\\n     * @dev Emitted when the registered MarketHub is updated.\\n     */\\n    event UpdateMarketHub(address marketHub);\\n\\n    /**\\n     * @notice Sets the address of the MarketHub contract.\\n     * @param _marketHub The new MarketHub contract address.\\n     */\\n    function setMarketHub(address _marketHub) external;\\n\\n    /**\\n     * @notice This function is used to execute raw transactions.\\n     * @dev Can only be called by the DEFAULT_ADMIN_ROLE. Calls an arbitrary function in a smart contract.\\n     * @param _target The target smart contract address.\\n     * @param _value The amount of native token to be sent.\\n     * @param _data The raw data representing a function and its parameters in the smart contract.\\n     * @return success Boolean indicator for the status of transaction execution.\\n     * @return returnData Data returned from function call.\\n     */\\n    function executeRawTransaction(\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /**\\n     * @notice This function is used to transfer ERC721 NFTs from this contract to another address.\\n     * @dev Can only be called by the FINANCIAL_ROLE.\\n     * @param _collection The address of the NFT collection.\\n     * @param _recipient The address to receive the NFT.\\n     * @param _tokenId The ID of the NFT to transfer.\\n     */\\n    function transferERC721(address _collection, address _recipient, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice This function is used to list a token for trading.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to list.\\n     * @param _erc20 The address of the ERC20 token to be used for payment.\\n     * @param _price The listing price of the token.\\n     */\\n    function list(address _collection, uint256 _tokenId, address _erc20, uint256 _price) external;\\n\\n    /**\\n     * @notice This function is used to delist a token from trading.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to delist.\\n     * @param _erc20 The address of the ERC20 token previously used for payment.\\n     */\\n    function delist(address _collection, uint256 _tokenId, address _erc20) external;\\n\\n    /**\\n     * @notice This function is used to buy a listed token.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _collection The address of the collection contract to which the token belongs.\\n     * @param _tokenId The ID of the token to be bought.\\n     * @param _erc20 The address of the ERC20 token to be used as the payment currency.\\n     */\\n    function buy(address _collection, uint256 _tokenId, address _erc20) external;\\n\\n    /**\\n     * @notice This function is used to make an offer for a token.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to offer.\\n     * @param _erc20 The address of the ERC20 token to be used for payment.\\n     * @param _price The offered price for the token.\\n     */\\n    function offer(address _collection, uint256 _tokenId, address _erc20, uint256 _price) external;\\n\\n    /**\\n     * @notice This function is used to revoke an offer for a token.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token for which the offer is revoked.\\n     * @param _erc20 The address of the ERC20 token previously used for the offer.\\n     */\\n    function revokeOffer(address _collection, uint256 _tokenId, address _erc20) external;\\n\\n    /**\\n     * @notice This function is used to accept an offer for a token.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _buyer The address of the buyer whose offer is being accepted.\\n     * @param _erc20 The address of the ERC20 token used in the offer.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token for which the offer is accepted.\\n     */\\n    function acceptOffer(address _buyer, address _erc20, address _collection, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice This function is used to update the state of a sale.\\n     * @dev Can only be called by the TRADING_ROLE.\\n     * @param _saleId The ID of the sale to update.\\n     * @param _newState The new state of the sale.\\n     */\\n    function updateSale(uint256 _saleId, IEscrow.State _newState) external;\\n\\n    /**\\n     * @notice Turns on or off the offchain payout behaviour\\n     * @dev When on, payouts will be redirected to Colle, and emit a event stating Colle owes the user the amount\\n     * @param _offchainPayout Whether to turn on or off offchain payouts.\\n     */\\n    function setOffchainPayout(bool _offchainPayout) external;\\n\\n    /**\\n     * @notice This function allows the caller to perform a native transfer.\\n     * @dev The caller must be a user with the FINANCIAL_ROLE.\\n     * @param _recipient The address of the recipient.\\n     * @param _amount The amount to transfer.\\n     */\\n    function transferNative(address payable _recipient, uint256 _amount) external;\\n\\n    /**\\n     * @notice This function allows a user to approve a ERC20 transfer.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC20 token to approve.\\n     * @param _spender The address of the spender.\\n     * @param _amount The amount to approve.\\n     */\\n    function approveERC20(IERC20 _token, address _spender, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice This function allows the caller permit to perform a ERC20 transfer.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC20 token to transfer.\\n     * @param _recipient The address of the recipient.\\n     * @param _amount The amount to transfer.\\n     */\\n    function transferERC20(address _token, address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice This function allows the caller to approve a ERC721 transfer.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC721 token to approve.\\n     * @param _to The address to approve.\\n     * @param _tokenId The ID of the token to approve.\\n     */\\n    function approveERC721(address _token, address _to, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice This function allows a caller to approve or revoke approval of an operator to transfer any NFT by the owner.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _erc721 The ERC721 contract to approve.\\n     * @param _operator The address to approve.\\n     * @param _approved The approval status.\\n     */\\n    function setApprovalForAllERC721(address _erc721, address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice This function allows a caller to set approval for all ERC1155 tokens.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _erc1155 The ERC1155 token contract.\\n     * @param _operator The operator to be approved or disapproved.\\n     * @param _approved Approval status to set for the operator.\\n     */\\n    function setApprovalForAllERC1155(address _erc1155, address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice This function allows a caller to perform a ERC1155 transfer.\\n     * @dev The function must be called by a user with the FINANCIAL_ROLE.\\n     * @param _erc1155 The ERC1155 token contract.\\n     * @param _from The address to transfer from.\\n     * @param _to The address to transfer to.\\n     * @param _id The ID of the token to transfer.\\n     * @param _amount The amount of the token to transfer.\\n     */\\n    function transferFromERC1155(address _erc1155, address _from, address _to, uint256 _id, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/team-smart-wallet/ITeamSmartWalletHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title ITeamSmartWalletHelper\\n *\\n * @notice A smart wallet which helps users more easily access TeamSmartWallet functionality\\n */\\ninterface ITeamSmartWalletHelper {\\n    /**\\n     * @notice Initialize function used instead of constructor to properly support proxy contracts.\\n     * @param _teamSmartWallet The TeamSmartWallet associated with this helper.\\n     */\\n    function initialize(address _teamSmartWallet) external;\\n\\n    /**\\n     * @notice Function to permanently renounce this helper from a team.\\n     */\\n    function unregister() external;\\n}\\n\"\r\n    },\r\n    \"contracts/team-smart-wallet/TeamSmartWalletPermitHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport {SignatureValidator, Signature} from \\\"../utils/SignatureValidator.sol\\\";\\nimport {ITeamSmartWallet, IERC20, IEscrow} from \\\"./ITeamSmartWallet.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ITeamSmartWalletHelper} from \\\"./ITeamSmartWalletHelper.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Tax} from \\\"../marketplace/taxes/Tax.sol\\\";\\n\\n/**\\n * @title TeamSmartWalletPermitHelper\\n *\\n * @notice A smart contract for managing permit calls on behalf of a TeamSmartWallet.\\n *\\n * @dev It follows EIP-712 standard to allow permit access.\\n */\\ncontract TeamSmartWalletPermitHelper is ITeamSmartWalletHelper, SignatureValidator, Initializable {\\n    /// @notice Role that allows a user to execute trading functions\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x0;\\n\\n    /// @notice Role that allows a user to execute trading functions\\n    bytes32 public constant TRADING_ROLE = keccak256(\\\"TRADING_ROLE\\\");\\n\\n    /// @notice Role that allows a user to execute financial functions\\n    bytes32 public constant FINANCIAL_ROLE = keccak256(\\\"FINANCIAL_ROLE\\\");\\n\\n    /// @notice Role that allows a user to upgrade the smart contract\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    ITeamSmartWallet public teamSmartWallet; // The TeamSmartWallet it assists with\\n\\n    /**\\n     * @notice Initialize function used instead of constructor to properly support proxy contracts.\\n     * @param _teamSmartWallet The TeamSmartWallet associated with this helper.\\n     */\\n    function initialize(address _teamSmartWallet) public initializer {\\n        teamSmartWallet = ITeamSmartWallet(_teamSmartWallet);\\n        __SignatureValidator_init(\\\"TeamSmartWalletPermitHelper\\\", \\\"v1.0\\\");\\n    }\\n\\n    /**\\n     * @notice Modifier to check if signer has a given role.\\n     * @param _role The role to check.\\n     * @param _signature The signer struct containing the signature, signer and deadline.\\n     * @param _permitHash The EIP-712 hash to validate.\\n     */\\n    modifier isSignerAndSignatureValid(\\n        bytes32 _role,\\n        Signature memory _signature,\\n        bytes32 _permitHash\\n    ) {\\n        require(IAccessControl(address(teamSmartWallet)).hasRole(_role, _signature.signer), \\\"Signer missing role\\\");\\n        validateSignatureAndUpdateNonce(_signature, _permitHash);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Function to permanently renounce this helper from a team.\\n     */\\n    function unregister() public {\\n        require(\\n            IAccessControl(address(teamSmartWallet)).hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"Caller cannot unregister\\\"\\n        );\\n        address teamSmartWalletAddress = address(teamSmartWallet);\\n        teamSmartWallet = ITeamSmartWallet(address(0));\\n\\n        IAccessControl(address(teamSmartWalletAddress)).renounceRole(DEFAULT_ADMIN_ROLE, address(this));\\n        IAccessControl(address(teamSmartWalletAddress)).renounceRole(TRADING_ROLE, address(this));\\n        IAccessControl(address(teamSmartWalletAddress)).renounceRole(FINANCIAL_ROLE, address(this));\\n        IAccessControl(address(teamSmartWalletAddress)).renounceRole(UPGRADER_ROLE, address(this));\\n    }\\n\\n    /**\\n     * @notice This function is used to grant a role to a user using a permit mechanism.\\n     * @dev The permit must be signed by a user with the DEFAULT_ADMIN_ROLE.\\n     * @param _role The role to grant.\\n     * @param _user The address of the user to grant the role to.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitGrantRole(\\n        bytes32 _role,\\n        address _user,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(DEFAULT_ADMIN_ROLE, _signature, _getPermitGrantRoleHash(_signature, _role, _user))\\n    {\\n        IAccessControl(address(teamSmartWallet)).grantRole(_role, _user);\\n    }\\n\\n    /**\\n     * @notice This function is used to revoke a role from a user using a permit mechanism.\\n     * @dev The permit must be signed by a user with the DEFAULT_ADMIN_ROLE.\\n     * @param _role The role to revoke.\\n     * @param _user The address of the user from whom to revoke the role.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitRevokeRole(\\n        bytes32 _role,\\n        address _user,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(DEFAULT_ADMIN_ROLE, _signature, _getPermitRevokeRoleHash(_signature, _role, _user))\\n    {\\n        IAccessControl(address(teamSmartWallet)).revokeRole(_role, _user);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to perform a native transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _recipient The address of the recipient.\\n     * @param _amount The amount to transfer.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitTransferNative(\\n        address payable _recipient,\\n        uint256 _amount,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(FINANCIAL_ROLE, _signature, _getPermitTransferHash(_signature, _recipient, _amount))\\n    {\\n        teamSmartWallet.transferNative(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to approve a ERC20 transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC20 token to approve.\\n     * @param _spender The address of the spender.\\n     * @param _amount The amount to approve.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitApproveERC20(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitApproveERC20Hash(_signature, _token, _spender, _amount)\\n        )\\n        returns (bool)\\n    {\\n        return teamSmartWallet.approveERC20(_token, _spender, _amount);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to perform a ERC20 transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC20 token to transfer.\\n     * @param _recipient The address of the recipient.\\n     * @param _amount The amount to transfer.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitTransferERC20(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitTransferERC20Hash(_signature, _token, _recipient, _amount)\\n        )\\n        returns (bool)\\n    {\\n        return teamSmartWallet.transferERC20(_token, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to approve a ERC721 transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC721 token to approve.\\n     * @param _to The address to approve.\\n     * @param _tokenId The ID of the token to approve.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitApproveERC721(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitApproveERC721Hash(_signature, _token, _to, _tokenId)\\n        )\\n    {\\n        teamSmartWallet.approveERC721(_token, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to approve or revoke approval of an operator to transfer any NFT by the owner.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _erc721 The ERC721 contract to approve.\\n     * @param _operator The address to approve.\\n     * @param _approved The approval status.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitSetApprovalForAllERC721(\\n        address _erc721,\\n        address _operator,\\n        bool _approved,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitSetApprovalForAllERC721Hash(_signature, _erc721, _operator, _approved)\\n        )\\n    {\\n        teamSmartWallet.setApprovalForAllERC721(_erc721, _operator, _approved);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to perform a ERC721 transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _token The ERC721 token to transfer.\\n     * @param _recipient The address of the recipient.\\n     * @param _tokenId The ID of the token to transfer.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitTransferERC721(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitTransferERC721Hash(_signature, _token, _recipient, _tokenId)\\n        )\\n    {\\n        teamSmartWallet.transferERC721(_token, _recipient, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to set approval for all ERC1155 tokens.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _erc1155 The ERC1155 token contract.\\n     * @param _operator The operator to be approved or disapproved.\\n     * @param _approved Approval status to set for the operator.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitSetApprovalForAllERC1155(\\n        address _erc1155,\\n        address _operator,\\n        bool _approved,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitSetApprovalForAllERC1155Hash(_signature, _erc1155, _operator, _approved)\\n        )\\n    {\\n        teamSmartWallet.setApprovalForAllERC1155(_erc1155, _operator, _approved);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to perform a ERC1155 transfer.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _erc1155 The ERC1155 token contract.\\n     * @param _from The address to transfer from.\\n     * @param _to The address to transfer to.\\n     * @param _id The ID of the token to transfer.\\n     * @param _amount The amount of the token to transfer.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitTransferFromERC1155(\\n        address _erc1155,\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitTransferFromERC1155Hash(_signature, _erc1155, _from, _to, _id, _amount)\\n        )\\n    {\\n        teamSmartWallet.transferFromERC1155(_erc1155, _from, _to, _id, _amount);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to list an NFT for sale.\\n     * @dev The permit must be signed by a user with the FINANCIAL_ROLE.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT to list.\\n     * @param _erc20 The ERC20 token in which the NFT will be priced.\\n     * @param _price The listing price of the NFT.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitList(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        uint256 _price,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitListHash(_signature, _collection, _tokenId, _erc20, _price)\\n        )\\n    {\\n        teamSmartWallet.list(_collection, _tokenId, _erc20, _price);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to delist an NFT from sale.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT to delist.\\n     * @param _erc20 The ERC20 token in which the NFT is priced.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitDelist(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitDelistHash(_signature, _collection, _tokenId, _erc20)\\n        )\\n    {\\n        teamSmartWallet.delist(_collection, _tokenId, _erc20);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to buy an NFT.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT to buy.\\n     * @param _erc20 The ERC20 token in which the NFT is priced.\\n     * @param _signature Signature from the user invoking the buy.\\n     */\\n    function permitBuy(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitBuyHash(_signature, _collection, _tokenId, _erc20)\\n        )\\n    {\\n        teamSmartWallet.buy(_collection, _tokenId, _erc20);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to make an offer for an NFT.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT to make an offer for.\\n     * @param _erc20 The ERC20 token in which the offer is priced.\\n     * @param _price The offering price.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitOffer(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        uint256 _price,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitOfferHash(_signature, _collection, _tokenId, _erc20, _price)\\n        )\\n    {\\n        teamSmartWallet.offer(_collection, _tokenId, _erc20, _price);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to revoke an offer for an NFT.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT for which to revoke the offer.\\n     * @param _erc20 The ERC20 token in which the offer is priced.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitRevokeOffer(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitRevokeOfferHash(_signature, _collection, _tokenId, _erc20)\\n        )\\n    {\\n        teamSmartWallet.revokeOffer(_collection, _tokenId, _erc20);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to accept an offer for an NFT.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _buyer The address of the user who made the offer.\\n     * @param _erc20 The ERC20 token in which the offer is priced.\\n     * @param _collection The NFT collection contract.\\n     * @param _tokenId The ID of the NFT for which to accept the offer.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitAcceptOffer(\\n        address _buyer,\\n        address _erc20,\\n        address _collection,\\n        uint256 _tokenId,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            TRADING_ROLE,\\n            _signature,\\n            _getPermitAcceptOfferHash(_signature, _buyer, _erc20, _collection, _tokenId)\\n        )\\n    {\\n        teamSmartWallet.acceptOffer(_buyer, _erc20, _collection, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This function allows a signed permit to update the state of a sale.\\n     * @dev The permit must be signed by a user with the TRADING_ROLE.\\n     * @param _saleId The ID of the sale to update.\\n     * @param _newState The new state of the sale.\\n     * @param _signature The signers signature, address and deadline.\\n     */\\n    function permitUpdateSale(\\n        uint256 _saleId,\\n        IEscrow.State _newState,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(TRADING_ROLE, _signature, _getPermitUpdateSaleHash(_signature, _saleId, _newState))\\n    {\\n        teamSmartWallet.updateSale(_saleId, _newState);\\n    }\\n\\n    /**\\n     * @notice Turns on or off the offchain payout behaviour, via a EIP-712 signature\\n     * @dev When on, payouts will be redirected to Colle, and emit a event stating Colle owes the user the amount\\n     * @param _offchainPayout Whether to turn on or off offchain payouts.\\n     */\\n    function permitSetOffchainPayout(\\n        bool _offchainPayout,\\n        Signature memory _signature\\n    )\\n        public\\n        isSignerAndSignatureValid(\\n            FINANCIAL_ROLE,\\n            _signature,\\n            _getPermitSetOffchainPayoutHash(_offchainPayout, _signature)\\n        )\\n    {\\n        teamSmartWallet.setOffchainPayout(_offchainPayout);\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for granting a role to a user.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _role The role identifier to grant.\\n     * @param _user The address of the user to grant the role to.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitGrantRoleHash(\\n        Signature memory _signature,\\n        bytes32 _role,\\n        address _user\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"GrantRole(address owner,bytes32 role,address user,uint256 deadline,uint256 nonce)\\\"),\\n                    _signature.signer,\\n                    _role,\\n                    _user,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for revoking a role from a user.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _role The role identifier to revoke.\\n     * @param _user The address of the user from whom to revoke the role.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitRevokeRoleHash(\\n        Signature memory _signature,\\n        bytes32 _role,\\n        address _user\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"RevokeRole(address owner,bytes32 role,address user,uint256 deadline,uint256 nonce)\\\"),\\n                    _signature.signer,\\n                    _role,\\n                    _user,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for transferring native token (such as ETH) from the owner to the recipient.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _recipient The address of the user to whom the token will be transferred.\\n     * @param _amount The amount of token to transfer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitTransferHash(\\n        Signature memory _signature,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"Transfer(address owner,address recipient,uint256 amount,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _recipient,\\n                    _amount,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for approving an ERC20 token allowance.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _token The ERC20 token to approve.\\n     * @param _spender The address of the user to grant the allowance to.\\n     * @param _amount The amount of tokens to approve.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitApproveERC20Hash(\\n        Signature memory _signature,\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"ApproveERC20(address owner,address token,address spender,uint256 amount,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    address(_token),\\n                    _spender,\\n                    _amount,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for transferring ERC20 tokens.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _token The ERC20 token to transfer.\\n     * @param _recipient The address of the user to whom the tokens will be transferred.\\n     * @param _amount The amount of tokens to transfer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitTransferERC20Hash(\\n        Signature memory _signature,\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"TransferERC20(address owner,address token,address recipient,uint256 amount,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _token,\\n                    _recipient,\\n                    _amount,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for approving an ERC721 token transfer.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _token The ERC721 token to approve.\\n     * @param _to The address of the user to whom the token transfer will be approved.\\n     * @param _tokenId The ID of the token to approve.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitApproveERC721Hash(\\n        Signature memory _signature,\\n        address _token,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"ApproveERC721(address owner,address token,address to,uint256 tokenId,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    address(_token),\\n                    _to,\\n                    _tokenId,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for approving a operator to transfer all NFTs by the owner.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _erc721 The ERC721 contract to approve.\\n     * @param _operator The address of the user to whom the token transfer will be approved.\\n     * @param _approved The approval status of the operator.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitSetApprovalForAllERC721Hash(\\n        Signature memory _signature,\\n        address _erc721,\\n        address _operator,\\n        bool _approved\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"SetApprovalForAllERC721(address signer,address erc721,address operator,bool approved,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _erc721,\\n                    _operator,\\n                    _approved,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for transferring an ERC721 token.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _token The ERC721 token to transfer.\\n     * @param _recipient The address of the user to whom the token will be transferred.\\n     * @param _tokenId The ID of the token to transfer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitTransferERC721Hash(\\n        Signature memory _signature,\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"TransferERC721(address owner,address token,address recipient,uint256 tokenId,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _token,\\n                    _recipient,\\n                    _tokenId,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for listing a token on a marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to list.\\n     * @param _erc20 The address of the ERC20 token to accept as payment.\\n     * @param _price The price at which the token will be listed.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitListHash(\\n        Signature memory _signature,\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        uint256 _price\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"List(address owner,address collection,uint256 tokenId,address erc20,uint256 price,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _collection,\\n                    _tokenId,\\n                    _erc20,\\n                    _price,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for delisting a token from the marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to delist.\\n     * @param _erc20 The address of the ERC20 token used in the original listing.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitDelistHash(\\n        Signature memory _signature,\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"Delist(address owner,address collection,uint256 tokenId,address erc20,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _collection,\\n                    _tokenId,\\n                    _erc20,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for buying a token from the marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The buyers signature, address and deadline.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to buy.\\n     * @param _erc20 The address of the ERC20 token used to pay.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitBuyHash(\\n        Signature memory _signature,\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"Buy(address buyer,address collection,uint256 tokenId,address erc20,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _collection,\\n                    _tokenId,\\n                    _erc20,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for offering to buy a token from the marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token to buy.\\n     * @param _erc20 The address of the ERC20 token used to pay.\\n     * @param _price The price at which the offer is made.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitOfferHash(\\n        Signature memory _signature,\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20,\\n        uint256 _price\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"Offer(address offerer,address collection,uint256 tokenId,address erc20,uint256 price,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _collection,\\n                    _tokenId,\\n                    _erc20,\\n                    _price,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for revoking an offer from the marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token involved in the offer.\\n     * @param _erc20 The address of the ERC20 token used in the offer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitRevokeOfferHash(\\n        Signature memory _signature,\\n        address _collection,\\n        uint256 _tokenId,\\n        address _erc20\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"RevokeOffer(address owner,address collection,uint256 tokenId,address erc20,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _collection,\\n                    _tokenId,\\n                    _erc20,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for accepting an offer from the marketplace.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _buyer The address of the user who made the offer.\\n     * @param _erc20 The address of the ERC20 token used in the offer.\\n     * @param _collection The address of the token's collection.\\n     * @param _tokenId The ID of the token involved in the offer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitAcceptOfferHash(\\n        Signature memory _signature,\\n        address _buyer,\\n        address _erc20,\\n        address _collection,\\n        uint256 _tokenId\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"AcceptOffer(address owner,address buyer,address erc20,address collection,uint256 tokenId,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _buyer,\\n                    _erc20,\\n                    _collection,\\n                    _tokenId,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for updating the state of a sale.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _saleId The ID of the sale to update.\\n     * @param _newState The new state of the sale.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitUpdateSaleHash(\\n        Signature memory _signature,\\n        uint256 _saleId,\\n        IEscrow.State _newState\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"UpdateSale(address signer,uint256 saleId,uint256 newState,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _saleId,\\n                    uint256(_newState),\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Computes the EIP-712 hash that should be signed by the buyer to buy a token.\\n     * @param _offchainPayout Whether to turn on or off offchain payouts.\\n     * @param _signature The address of the buyer and the deadline\\n     * @return Returns the EIP-712 hash.\\n     */\\n    function _getPermitSetOffchainPayoutHash(\\n        bool _offchainPayout,\\n        Signature memory _signature\\n    ) internal view virtual returns (bytes32) {\\n        address signer = _signature.signer;\\n        uint256 deadline = _signature.deadline;\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"SetOffchainPayout(address signer,bool offchainPayout,uint256 deadline,uint256 nonce)\\\"),\\n                    signer,\\n                    _offchainPayout,\\n                    deadline,\\n                    nonces(signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for setting an operator's approval status on all tokens of a certain ERC1155 contract for a user.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _erc1155 The address of the ERC1155 contract.\\n     * @param _operator The address of the operator.\\n     * @param _approved Whether the operator is approved or not.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitSetApprovalForAllERC1155Hash(\\n        Signature memory _signature,\\n        address _erc1155,\\n        address _operator,\\n        bool _approved\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"SetApprovalForAllERC1155(address signer,address erc1155,address operator,bool approved,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _erc1155,\\n                    _operator,\\n                    _approved,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Generates a unique hash to be signed for transferring a certain amount of a specific ERC1155 token from one address to another.\\n     * @dev This method is compliant with the EIP712 standard.\\n     * @param _signature The signers signature, address and deadline.\\n     * @param _erc1155 The address of the ERC1155 contract.\\n     * @param _from The address from which the tokens will be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _id The ID of the token to transfer.\\n     * @param _value The amount of the token to transfer.\\n     * @return A unique hash that represents the requested operation.\\n     */\\n    function _getPermitTransferFromERC1155Hash(\\n        Signature memory _signature,\\n        address _erc1155,\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _value\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"TransferFromERC1155(address signer,address erc1155,address from,address to,uint256 id,uint256 value,uint256 deadline,uint256 nonce)\\\"\\n                    ),\\n                    _signature.signer,\\n                    _erc1155,\\n                    _from,\\n                    _to,\\n                    _id,\\n                    _value,\\n                    _signature.deadline,\\n                    nonces(_signature.signer)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nstruct Signature {\\n    address signer;\\n    uint256 deadline;\\n    bytes signature;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Signature} from \\\"./Signature.sol\\\";\\n\\n/// @title SignatureValidator\\n/// @dev This contract validates the signatures associated with EIP-712 typed structures.\\ncontract SignatureValidator {\\n    using Counters for Counters.Counter;\\n    using ECDSA for bytes32;\\n\\n    // @dev Each address has a nonce that is incremented after each use.\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // @dev Domain name and version for EIP712 signatures\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    string private name_;\\n    string private version_;\\n\\n    /// @notice Initializes the `DOMAIN_SEPARATOR` value.\\n    /// @dev The function is meant to be called in the constructor of the contract implementing this logic.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __SignatureValidator_init(string memory _name, string memory _version) internal {\\n        name_ = _name;\\n        version_ = _version;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(_version)),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice Validates a signature.\\n    /// @dev This modifier checks if the signature associated with a `_permitHash` is valid.\\n    /// @param _signature The signer struct containing the signature, signer and deadline.\\n    /// @param _permitHash The EIP-712 permit hash.\\n    modifier isValidSignature(Signature memory _signature, bytes32 _permitHash) {\\n        validateSignatureAndUpdateNonce(_signature, _permitHash);\\n        _;\\n    }\\n\\n    /// @notice Validates a signature.\\n    /// @dev This function checks if the signature associated with a `_permitHash` is valid.\\n    /// @param _signature The signer struct containing the signature, signer and deadline.\\n    /// @param _permitHash The EIP-712 permit hash.\\n    function validateSignatureAndUpdateNonce(Signature memory _signature, bytes32 _permitHash) internal {\\n        bytes32 permitHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", // EIP191: Indicates EIP712\\n                DOMAIN_SEPARATOR,\\n                _permitHash\\n            )\\n        );\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= _signature.deadline, \\\"Expired deadline\\\");\\n        address verifiedSigner = permitHash.recover(_signature.signature);\\n        require(verifiedSigner == _signature.signer, \\\"Invalid signature\\\");\\n        Counters.Counter storage nonce = _nonces[_signature.signer];\\n        nonce.increment();\\n    }\\n\\n    /// @notice Returns the nonce associated with a user.\\n    /// @dev The nonce is incremented after each use.\\n    /// @param _user The user's address.\\n    /// @return Returns the current nonce value.\\n    function nonces(address _user) public view returns (uint256) {\\n        return _nonces[_user].current();\\n    }\\n\\n    /// @notice Returns the EIP712 domain separator components.\\n    /// @dev This can be used to verify the domain of the EIP712 signature.\\n    /// @return name The domain name.\\n    /// @return version The domain version.\\n    /// @return chainId The current chain ID.\\n    /// @return verifyingContract The address of the verifying contract.\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (string memory name, string memory version, uint256 chainId, address verifyingContract)\\n    {\\n        return (name_, version_, block.chainid, address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINANCIAL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADING_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamSmartWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitAcceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitApproveERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitApproveERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitDelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitGrantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitRevokeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitRevokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitSetApprovalForAllERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitSetApprovalForAllERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_offchainPayout\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitSetOffchainPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitTransferERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitTransferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitTransferFromERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitTransferNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"enum IEscrow.State\",\"name\":\"_newState\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"permitUpdateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSmartWallet\",\"outputs\":[{\"internalType\":\"contract ITeamSmartWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TeamSmartWalletPermitHelper", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}