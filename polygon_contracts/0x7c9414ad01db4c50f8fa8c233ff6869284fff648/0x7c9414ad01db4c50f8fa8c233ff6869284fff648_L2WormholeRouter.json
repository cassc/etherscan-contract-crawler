{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node_modules/@opengsn/contracts/src/BaseRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@opengsn/contracts/src/interfaces/IRelayRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/solady/src/utils/Multicallable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Contract that enables a single call to call multiple methods on itself.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Multicallable.sol)\\n/// @dev WARNING!\\n/// Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value`\\n/// (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism.\\n/// It WILL open up your contract to double-spend vulnerabilities / exploits.\\n/// See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)\\nabstract contract Multicallable {\\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n        assembly {\\n            if data.length {\\n                results := mload(0x40) // Point `results` to start of free memory.\\n                mstore(results, data.length) // Store `data.length` into `results`.\\n                results := add(results, 0x20)\\n\\n                // `shl` 5 is equivalent to multiplying by 0x20.\\n                let end := shl(5, data.length)\\n                // Copy the offsets from calldata into memory.\\n                calldatacopy(results, data.offset, end)\\n                // Pointer to the top of the memory (i.e. start of the free memory).\\n                let memPtr := add(results, end)\\n                end := add(results, end)\\n\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    // The offset of the current bytes in the calldata.\\n                    let o := add(data.offset, mload(results))\\n                    // Copy the current bytes from calldata to the memory.\\n                    calldatacopy(\\n                        memPtr,\\n                        add(o, 0x20), // The offset of the current bytes' bytes.\\n                        calldataload(o) // The length of the current bytes.\\n                    )\\n                    if iszero(delegatecall(gas(), address(), memPtr, calldataload(o), 0x00, 0x00)) {\\n                        // Bubble up the revert if the delegatecall reverts.\\n                        returndatacopy(0x00, 0x00, returndatasize())\\n                        revert(0x00, returndatasize())\\n                    }\\n                    // Append the current `memPtr` into `results`.\\n                    mstore(results, memPtr)\\n                    results := add(results, 0x20)\\n                    // Append the `returndatasize()`, and the return data.\\n                    mstore(memPtr, returndatasize())\\n                    returndatacopy(add(memPtr, 0x20), 0x00, returndatasize())\\n                    // Advance the `memPtr` by `returndatasize() + 0x20`,\\n                    // rounded up to the next multiple of 32.\\n                    memPtr := and(add(add(memPtr, returndatasize()), 0x3f), 0xffffffffffffffe0)\\n                    // prettier-ignore\\n                    if iszero(lt(results, end)) { break }\\n                }\\n                // Restore `results` and allocate memory for it.\\n                results := mload(0x40)\\n                mstore(0x40, memPtr)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\n/// @author Open Zeppelin\\ninterface IERC4626 {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller, address indexed receiver, address indexed owner, uint256 assets, uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     * call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     * in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     * deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     * deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     * approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     * in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     * same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     * would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     * execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     * approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     * call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     * called\\n     * in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     * the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     * withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     * not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     * in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     * same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     * redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     * redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     * not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWormhole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\ninterface IWormhole {\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n\\n    function publishMessage(uint32 nonce, bytes memory payload, uint8 consistencyLevel)\\n        external\\n        payable\\n        returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (VM memory vm, bool valid, string memory reason);\\n\\n    function nextSequence(address emitter) external view returns (uint64);\\n}\\n\"\r\n    },\r\n    \"src/libs/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.16;\\n\\nlibrary Constants {\\n    // Message types\\n    // Messages received by L1\\n    bytes32 constant L2_FUND_TRANSFER_REPORT = keccak256(\\\"L2_FUND_TRANSFER_REPORT\\\");\\n    bytes32 constant L2_FUND_REQUEST = keccak256(\\\"L2_FUND_REQUEST\\\");\\n\\n    // Messages received by L2\\n    bytes32 constant L1_TVL = keccak256(\\\"L1_TVL\\\");\\n    bytes32 constant L1_FUND_TRANSFER_REPORT = keccak256(\\\"L1_FUND_TRANSFER_REPORT\\\");\\n}\\n\"\r\n    },\r\n    \"src/libs/Unchecked.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\n/*  solhint-disable func-visibility */\\nfunction uncheckedInc(uint256 i) pure returns (uint256) {\\n    unchecked {\\n        return i + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {AffineVault} from \\\"src/vaults/AffineVault.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @notice Base strategy contract\\nabstract contract BaseStrategy {\\n    using SafeTransferLib for ERC20;\\n\\n    constructor(AffineVault _vault) {\\n        vault = _vault;\\n        asset = ERC20(_vault.asset());\\n    }\\n\\n    /// @notice The vault which will deposit/withdraw from the this contract\\n    AffineVault public immutable vault;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"BS: only vault\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == vault.governance(), \\\"BS: only governance\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns the underlying ERC20 asset the strategy accepts.\\n    ERC20 public immutable asset;\\n\\n    /// @notice Strategy's balance of underlying asset.\\n    /// @return assets Strategy's balance.\\n    function balanceOfAsset() public view returns (uint256 assets) {\\n        assets = asset.balanceOf(address(this));\\n    }\\n\\n    /// @notice Deposit vault's underlying asset into strategy.\\n    /// @param amount The amount to invest.\\n    /// @dev This function must revert if investment fails.\\n    function invest(uint256 amount) external {\\n        asset.safeTransferFrom(msg.sender, address(this), amount);\\n        _afterInvest(amount);\\n    }\\n\\n    /// @notice After getting money from the vault, do something with it.\\n    /// @param amount The amount received from the vault.\\n    /// @dev Since investment is often gas-intensive and may require off-chain data, this will often be unimplemented.\\n    /// @dev Strategists will call custom functions for handling deployment of capital.\\n    function _afterInvest(uint256 amount) internal virtual {}\\n\\n    /// @notice Withdraw vault's underlying asset from strategy.\\n    /// @param amount The amount to withdraw.\\n    /// @return The amount of `asset` divested from the strategy\\n    function divest(uint256 amount) external onlyVault returns (uint256) {\\n        return _divest(amount);\\n    }\\n\\n    /// @dev This function should not revert if we get less than `amount` out of the strategy\\n    function _divest(uint256 amount) internal virtual returns (uint256) {}\\n\\n    /// @notice The total amount of `asset` that the strategy is managing\\n    /// @dev This should not overestimate, and should account for slippage during divestment\\n    /// @return The strategy tvl\\n    function totalLockedValue() external virtual returns (uint256);\\n\\n    function sweep(ERC20 token) external onlyGovernance {\\n        token.safeTransfer(vault.governance(), token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/AffineGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\ncontract AffineGovernable {\\n    /// @notice The governance address\\n    address public governance;\\n\\n    modifier onlyGovernance() {\\n        _onlyGovernance();\\n        _;\\n    }\\n\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"Only Governance.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nabstract contract DetailedShare {\\n    /**\\n     * @notice A representation of a floating point number.\\n     * `decimals` is the number of digits before the where the decimal point would be placeds\\n     */\\n    struct Number {\\n        uint256 num;\\n        uint8 decimals;\\n    }\\n\\n    /// @notice The tvl is a dollar amount representing the total value locked in the vault.\\n    function detailedTVL() external virtual returns (Number memory);\\n\\n    /**\\n     * @notice The number of dollars that \\\"one\\\" share is worth.\\n     * @dev \\\"One\\\" share is always 1 * 10 ^ (decimals). Note that `decimals` refers\\n     * to the ERC20 property.\\n     */\\n    function detailedPrice() external virtual returns (Number memory);\\n\\n    /**\\n     * @notice The total supply of the token. The value of Number.num here is the same as `totalSupply()`\\n     * @dev detailedTVL() / detailedTotalSupply() ==  detailedPrice()\\n     */\\n    function detailedTotalSupply() external virtual returns (Number memory);\\n}\\n\"\r\n    },\r\n    \"src/vaults/AffineVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {AffineGovernable} from \\\"src/utils/AffineGovernable.sol\\\";\\nimport {BaseStrategy as Strategy} from \\\"src/strategies/BaseStrategy.sol\\\";\\nimport {uncheckedInc} from \\\"src/libs/Unchecked.sol\\\";\\n\\n/**\\n * @notice A core contract to be inherited by the L1 and L2 vault contracts. This contract handles adding\\n * and removing strategies, investing in (and divesting from) strategies, harvesting gains/losses, and\\n * strategy liquidation.\\n */\\ncontract AffineVault is AffineGovernable, AccessControlUpgradeable {\\n    using SafeTransferLib for ERC20;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 _asset;\\n\\n    /// @notice The token that the vault takes in and tries to get more of, e.g. USDC\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /**\\n     * @dev Initialize the vault.\\n     * @param _governance The governance address.\\n     * @param vaultAsset The vault's input asset.\\n     */\\n    function baseInitialize(address _governance, ERC20 vaultAsset) internal virtual {\\n        governance = _governance;\\n        _asset = vaultAsset;\\n\\n        // All roles use the default admin role\\n        // Governance has the admin role and all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, governance);\\n        _grantRole(HARVESTER, governance);\\n\\n        lastHarvest = uint128(block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             AUTHENTICATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Role with authority to call \\\"harvest\\\", i.e. update this vault's tvl\\n    bytes32 public constant HARVESTER = keccak256(\\\"HARVESTER\\\");\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            WITHDRAWAL QUEUE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint8 constant MAX_STRATEGIES = 20;\\n\\n    /**\\n     * @notice An ordered array of strategies representing the withdrawal queue. The withdrawal queue is used\\n     * whenever the vault wants to pull money out of strategies.\\n     * @dev The first strategy in the array (index 0) is withdrawn from first.\\n     * This is a list of the currently active strategies  (all non-zero addresses are active).\\n     */\\n    Strategy[MAX_STRATEGIES] public withdrawalQueue;\\n\\n    /**\\n     * @notice Gets the full withdrawal queue.\\n     * @return The withdrawal queue.\\n     * @dev This gives easy access to the whole array (by default we can only get one index at a time)\\n     */\\n    function getWithdrawalQueue() external view returns (Strategy[MAX_STRATEGIES] memory) {\\n        return withdrawalQueue;\\n    }\\n\\n    /**\\n     * @notice Sets a new withdrawal queue.\\n     * @param newQueue The new withdrawal queue.\\n     */\\n    function setWithdrawalQueue(Strategy[MAX_STRATEGIES] calldata newQueue) external onlyGovernance {\\n        // Maintain queue size\\n        require(newQueue.length == MAX_STRATEGIES, \\\"BV: bad qu size\\\");\\n\\n        // Replace the withdrawal queue.\\n        withdrawalQueue = newQueue;\\n\\n        emit WithdrawalQueueSet(newQueue);\\n    }\\n\\n    /**\\n     * @notice Emitted when the withdrawal queue is updated.\\n     * @param newQueue The new withdrawal queue.\\n     */\\n    event WithdrawalQueueSet(Strategy[MAX_STRATEGIES] newQueue);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STRATEGIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The total amount of underlying assets held in strategies at the time of the last harvest.\\n    uint256 public totalStrategyHoldings;\\n\\n    struct StrategyInfo {\\n        bool isActive;\\n        uint16 tvlBps;\\n        uint232 balance;\\n    }\\n\\n    /// @notice A map of strategy addresses to details\\n    mapping(Strategy => StrategyInfo) public strategies;\\n\\n    uint256 constant MAX_BPS = 10_000;\\n    /// @notice The number of bps of the vault's tvl which may be given to strategies (at most MAX_BPS)\\n    uint256 public totalBps;\\n\\n    /// @notice Emitted when a strategy is added by governance\\n    event StrategyAdded(Strategy indexed strategy);\\n    /// @notice Emitted when a strategy is removed by governance\\n    event StrategyRemoved(Strategy indexed strategy);\\n\\n    /**\\n     * @notice Add a strategy\\n     * @param strategy The strategy to add\\n     * @param tvlBps The number of bps of our tvl the strategy will get when funds are distributed to strategies\\n     */\\n    function addStrategy(Strategy strategy, uint16 tvlBps) external onlyGovernance {\\n        _increaseTVLBps(tvlBps);\\n        strategies[strategy] = StrategyInfo({isActive: true, tvlBps: tvlBps, balance: 0});\\n        //  Add strategy to withdrawal queue\\n        withdrawalQueue[MAX_STRATEGIES - 1] = strategy;\\n        emit StrategyAdded(strategy);\\n        _organizeWithdrawalQueue();\\n    }\\n\\n    /// @notice A helper function for increasing `totalBps`. Used when adding strategies or updating strategy allocs\\n    function _increaseTVLBps(uint256 tvlBps) internal {\\n        uint256 newTotalBps = totalBps + tvlBps;\\n        require(newTotalBps <= MAX_BPS, \\\"BV: too many bps\\\");\\n        totalBps = newTotalBps;\\n    }\\n\\n    /**\\n     * @notice Push all zero addresses to the end of the array. This function is used whenever a strategy is\\n     * added or removed from the withdrawal queue\\n     * @dev Relative ordering of non-zero values is maintained.\\n     */\\n    function _organizeWithdrawalQueue() internal {\\n        // number or empty values we've seen iterating from left to right\\n        uint256 offset;\\n\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                offset += 1;\\n            } else if (offset > 0) {\\n                // index of first empty value seen takes on value of `strategy`\\n                withdrawalQueue[i - offset] = strategy;\\n                withdrawalQueue[i] = Strategy(address(0));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove a strategy from the withdrawal queue. Fully divest from the strategy.\\n     * @param strategy The strategy to remove\\n     * @dev  removeStrategy MUST be called with harvest via multicall. This helps get the most accurate tvl numbers\\n     * and allows us to add any realized profits to our lockedProfit\\n     */\\n    function removeStrategy(Strategy strategy) external onlyGovernance {\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            if (strategy != withdrawalQueue[i]) {\\n                continue;\\n            }\\n\\n            strategies[strategy].isActive = false;\\n\\n            // The vault can re-allocate bps to a new strategy\\n            totalBps -= strategies[strategy].tvlBps;\\n            strategies[strategy].tvlBps = 0;\\n\\n            // Remove strategy from withdrawal queue\\n            withdrawalQueue[i] = Strategy(address(0));\\n            emit StrategyRemoved(strategy);\\n            _organizeWithdrawalQueue();\\n\\n            // Take all money out of strategy.\\n            _withdrawFromStrategy(strategy, strategy.totalLockedValue());\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update tvl bps assigned to the given list of strategies\\n     * @param strategyList The list of strategies\\n     * @param strategyBps The new bps\\n     */\\n    function updateStrategyAllocations(Strategy[] calldata strategyList, uint16[] calldata strategyBps)\\n        external\\n        onlyRole(HARVESTER)\\n    {\\n        for (uint256 i = 0; i < strategyList.length; i = uncheckedInc(i)) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = strategyList[i];\\n\\n            // Ignore inactive (removed) strategies\\n            if (!strategies[strategy].isActive) continue;\\n\\n            // update tvl bps\\n            totalBps -= strategies[strategy].tvlBps;\\n            _increaseTVLBps(strategyBps[i]);\\n            strategies[strategy].tvlBps = strategyBps[i];\\n        }\\n        emit StrategyAllocsUpdated(strategyList, strategyBps);\\n    }\\n\\n    /**\\n     * @notice Emitted when we update tvl bps for a list of strategies.\\n     * @param strategyList The list of strategies.\\n     * @param strategyBps The new tvl bps for the strategies\\n     */\\n    event StrategyAllocsUpdated(Strategy[] strategyList, uint16[] strategyBps);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      STRATEGY DEPOSIT/WITHDRAWAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Emitted after the Vault deposits into a strategy contract.\\n     * @param strategy The strategy that was deposited into.\\n     * @param assets The amount of assets deposited.\\n     */\\n    event StrategyDeposit(Strategy indexed strategy, uint256 assets);\\n\\n    /**\\n     * @notice Emitted after the Vault withdraws funds from a strategy contract.\\n     * @param strategy The strategy that was withdrawn from.\\n     * @param assetsRequested The amount of assets we tried to divest from the strategy.\\n     * @param assetsReceived The amount of assets actually withdrawn.\\n     */\\n    event StrategyWithdrawal(Strategy indexed strategy, uint256 assetsRequested, uint256 assetsReceived);\\n\\n    /// @notice Deposit `assetAmount` amount of `asset` into strategies according to each strategy's `tvlBps`.\\n    function _depositIntoStrategies(uint256 assetAmount) internal {\\n        // All non-zero strategies are active\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n            _depositIntoStrategy(strategy, (assetAmount * strategies[strategy].tvlBps) / MAX_BPS);\\n        }\\n    }\\n\\n    function _depositIntoStrategy(Strategy strategy, uint256 assets) internal {\\n        // Don't allow empty investments\\n        if (assets == 0) return;\\n\\n        // Increase totalStrategyHoldings to account for the deposit.\\n        totalStrategyHoldings += assets;\\n\\n        unchecked {\\n            // Without this the next harvest would count the deposit as profit.\\n            // Cannot overflow as the balance of one strategy can't exceed the sum of all.\\n            strategies[strategy].balance += uint232(assets);\\n        }\\n\\n        // Approve assets to the strategy so we can deposit.\\n        _asset.safeApprove(address(strategy), assets);\\n\\n        // Deposit into the strategy, will revert upon failure\\n        strategy.invest(assets);\\n        emit StrategyDeposit(strategy, assets);\\n    }\\n\\n    /**\\n     * @notice Withdraw a specific amount of underlying tokens from a strategy.\\n     * @dev This is a \\\"best effort\\\" withdrawal. It could potentially withdraw nothing.\\n     * @param strategy The strategy to withdraw from.\\n     * @param assets  The amount of underlying tokens to withdraw.\\n     * @return The amount of assets actually received.\\n     */\\n    function _withdrawFromStrategy(Strategy strategy, uint256 assets) internal returns (uint256) {\\n        // Withdraw from the strategy\\n        uint256 amountWithdrawn = _divest(strategy, assets);\\n\\n        // Without this the next harvest would count the withdrawal as a loss.\\n        // We update the balance to the current tvl because a withdrawal can reduce the tvl by more than the amount\\n        // withdrawn (e.g. fees during a swap)\\n        uint256 oldStratTVL = strategies[strategy].balance;\\n        uint256 newStratTvl = strategy.totalLockedValue();\\n        strategies[strategy].balance = uint232(newStratTvl);\\n\\n        // Decrease totalStrategyHoldings to account for the withdrawal.\\n        // If we haven't harvested in a long time, newStratTvl could be bigger than oldStratTvl\\n        totalStrategyHoldings -= oldStratTVL > newStratTvl ? oldStratTVL - newStratTvl : 0;\\n        emit StrategyWithdrawal({strategy: strategy, assetsRequested: assets, assetsReceived: amountWithdrawn});\\n        return amountWithdrawn;\\n    }\\n\\n    /// @dev A small wrapper around divest(). We try-catch to make sure that a bad strategy does not pause withdrawals.\\n    function _divest(Strategy strategy, uint256 assets) internal returns (uint256) {\\n        try strategy.divest(assets) returns (uint256 amountDivested) {\\n            return amountDivested;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               HARVESTING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice A timestamp representing when the most recent harvest occurred.\\n     * @dev Since the time since the last harvest is used to calculate management fees, this is set\\n     * to `block.timestamp` (instead of 0) during initialization.\\n     */\\n    uint128 public lastHarvest;\\n    /// @notice The amount of profit *originally* locked after harvesting from a strategy\\n    uint128 public maxLockedProfit;\\n    /// @notice Amount of time in seconds that profit takes to fully unlock. See lockedProfit().\\n    uint256 public constant LOCK_INTERVAL = 24 hours;\\n\\n    /**\\n     * @notice Emitted after a successful harvest.\\n     * @param user The authorized user who triggered the harvest.\\n     * @param strategies The trusted strategies that were harvested.\\n     */\\n    event Harvest(address indexed user, Strategy[] strategies);\\n\\n    /**\\n     * @notice Harvest a set of trusted strategies.\\n     * @param strategyList The trusted strategies to harvest.\\n     * @dev Will always revert if profit from last harvest has not finished unlocking.\\n     */\\n    function harvest(Strategy[] calldata strategyList) external onlyRole(HARVESTER) {\\n        // Profit must not be unlocking\\n        require(block.timestamp >= lastHarvest + LOCK_INTERVAL, \\\"BV: profit unlocking\\\");\\n\\n        // Get the Vault's current total strategy holdings.\\n        uint256 oldTotalStrategyHoldings = totalStrategyHoldings;\\n\\n        // Used to store the new total strategy holdings after harvesting.\\n        uint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\\n\\n        // Used to store the total profit accrued by the strategies.\\n        uint256 totalProfitAccrued;\\n\\n        // Will revert if any of the specified strategies are untrusted.\\n        for (uint256 i = 0; i < strategyList.length; i = uncheckedInc(i)) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = strategyList[i];\\n\\n            // Ignore inactive (removed) strategies\\n            if (!strategies[strategy].isActive) {\\n                continue;\\n            }\\n\\n            // Get the strategy's previous and current balance.\\n            uint232 balanceLastHarvest = strategies[strategy].balance;\\n            uint256 balanceThisHarvest = strategy.totalLockedValue();\\n\\n            // Update the strategy's stored balance.\\n            strategies[strategy].balance = uint232(balanceThisHarvest);\\n\\n            // Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\\n            // We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\\n            newTotalStrategyHoldings = newTotalStrategyHoldings + balanceThisHarvest - balanceLastHarvest;\\n\\n            unchecked {\\n                // Update the total profit accrued while counting losses as zero profit.\\n                // Cannot overflow as we already increased total holdings without reverting.\\n                totalProfitAccrued += balanceThisHarvest > balanceLastHarvest\\n                    ? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\\n                    : 0; // If the strategy registered a net loss we don't have any new profit.\\n            }\\n        }\\n\\n        // Update max unlocked profit based on any remaining locked profit plus new profit.\\n        maxLockedProfit = uint128(lockedProfit() + totalProfitAccrued);\\n\\n        // Set strategy holdings to our new total.\\n        totalStrategyHoldings = newTotalStrategyHoldings;\\n\\n        // Assess fees (using old lastHarvest) and update the last harvest timestamp.\\n        _assessFees();\\n        lastHarvest = uint128(block.timestamp);\\n\\n        emit Harvest(msg.sender, strategyList);\\n    }\\n\\n    /**\\n     * @notice Current locked profit amount.\\n     * @dev Profit unlocks uniformly over `LOCK_INTERVAL` seconds after the last harvest\\n     */\\n    function lockedProfit() public view virtual returns (uint256) {\\n        if (block.timestamp >= lastHarvest + LOCK_INTERVAL) {\\n            return 0;\\n        }\\n\\n        uint256 unlockedProfit = (maxLockedProfit * (block.timestamp - lastHarvest)) / LOCK_INTERVAL;\\n        return maxLockedProfit - unlockedProfit;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        LIQUIDATION/REBALANCING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The total amount of the underlying asset the vault has.\\n    function vaultTVL() public view returns (uint256) {\\n        return _asset.balanceOf(address(this)) + totalStrategyHoldings;\\n    }\\n\\n    /**\\n     * @notice Emitted when the vault must make a certain amount of assets available\\n     * @dev We liquidate during cross chain rebalancing or withdrawals.\\n     * @param assetsRequested The amount we wanted to make available for withdrawal.\\n     * @param assetsLiquidated The amount we actually liquidated.\\n     */\\n    event Liquidation(uint256 assetsRequested, uint256 assetsLiquidated);\\n\\n    /**\\n     * @notice Withdraw `amount` of underlying asset from strategies.\\n     * @dev Always check the return value when using this function, we might not liquidate anything!\\n     * @param amount The amount we want to liquidate\\n     * @return The amount we actually liquidated\\n     */\\n    function _liquidate(uint256 amount) internal returns (uint256) {\\n        uint256 amountLiquidated;\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n\\n            uint256 balance = _asset.balanceOf(address(this));\\n            if (balance >= amount) {\\n                break;\\n            }\\n\\n            uint256 amountNeeded = amount - balance;\\n            amountNeeded = Math.min(amountNeeded, strategies[strategy].balance);\\n\\n            // Force withdraw of token from strategy\\n            uint256 withdrawn = _withdrawFromStrategy(strategy, amountNeeded);\\n            amountLiquidated += withdrawn;\\n        }\\n        emit Liquidation({assetsRequested: amount, assetsLiquidated: amountLiquidated});\\n        return amountLiquidated;\\n    }\\n\\n    /**\\n     * @notice Assess fees.\\n     * @dev This is called during harvest() to assess management fees.\\n     */\\n    function _assessFees() internal virtual {}\\n\\n    /**\\n     * @notice Emitted when we do a strategy rebalance, i.e. when we make the strategy tvls match their tvl bps\\n     * @param caller The caller\\n     */\\n    event Rebalance(address indexed caller);\\n\\n    /// @notice  Rebalance strategies according to given tvl bps\\n    function rebalance() external onlyRole(HARVESTER) {\\n        uint256 tvl = vaultTVL();\\n\\n        // Loop through all strategies. Divesting from those whose tvl is too high,\\n        // Invest in those whose tvl is too low\\n\\n        // MAX_STRATEGIES is always equal to withdrawalQueue.length\\n        uint256[MAX_STRATEGIES] memory amountsToInvest;\\n\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n\\n            uint256 idealStrategyTVL = (tvl * strategies[strategy].tvlBps) / MAX_BPS;\\n            uint256 currStrategyTVL = strategy.totalLockedValue();\\n            if (idealStrategyTVL < currStrategyTVL) {\\n                _withdrawFromStrategy(strategy, currStrategyTVL - idealStrategyTVL);\\n            }\\n            if (idealStrategyTVL > currStrategyTVL) {\\n                amountsToInvest[i] = idealStrategyTVL - currStrategyTVL;\\n            }\\n        }\\n\\n        // Loop through the strategies to invest in, and invest in them\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            uint256 amountToInvest = amountsToInvest[i];\\n            if (amountToInvest == 0) {\\n                continue;\\n            }\\n\\n            // We aren't guaranteed that the vault has `amountToInvest` since there can be slippage\\n            // when divesting from strategies\\n            // NOTE: Strategies closer to the start of the queue are more likely to get the exact\\n            // amount of money needed\\n            amountToInvest = Math.min(amountToInvest, _asset.balanceOf(address(this)));\\n            if (amountToInvest == 0) {\\n                break;\\n            }\\n            // Deposit into strategy, making sure to not count this investment as a profit\\n            _depositIntoStrategy(withdrawalQueue[i], amountToInvest);\\n        }\\n\\n        emit Rebalance(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {Multicallable} from \\\"solady/src/utils/Multicallable.sol\\\";\\n\\nimport {BaseStrategy as Strategy} from \\\"src/strategies/BaseStrategy.sol\\\";\\nimport {AffineGovernable} from \\\"src/utils/AffineGovernable.sol\\\";\\nimport {BridgeEscrow} from \\\"./escrow/BridgeEscrow.sol\\\";\\nimport {WormholeRouter} from \\\"./wormhole/WormholeRouter.sol\\\";\\nimport {uncheckedInc} from \\\"src/libs/Unchecked.sol\\\";\\n\\n/**\\n * @notice A core contract to be inherited by the L1 and L2 vault contracts. This contract handles adding\\n * and removing strategies, investing in (and divesting from) strategies, harvesting gains/losses, and\\n * strategy liquidation.\\n */\\nabstract contract BaseVault is AccessControlUpgradeable, AffineGovernable, Multicallable {\\n    using SafeTransferLib for ERC20;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 _asset;\\n\\n    /// @notice The token that the vault takes in and tries to get more of, e.g. USDC\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /**\\n     * @dev Initialize the vault.\\n     * @param _governance The governance address.\\n     * @param vaultAsset The vault's input asset.\\n     * @param _wormholeRouter The wormhole router.\\n     * @param _bridgeEscrow Bridge escrow for receiving cross-chain transfers.\\n     */\\n    function baseInitialize(address _governance, ERC20 vaultAsset, address _wormholeRouter, BridgeEscrow _bridgeEscrow)\\n        internal\\n        virtual\\n    {\\n        governance = _governance;\\n        _asset = vaultAsset;\\n        wormholeRouter = _wormholeRouter;\\n        bridgeEscrow = _bridgeEscrow;\\n\\n        // All roles use the default admin role\\n        // Governance has the admin role and all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, governance);\\n        _grantRole(HARVESTER, governance);\\n\\n        lastHarvest = uint128(block.timestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        CROSS-CHAIN REBALANCING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice A contract used for sending and receiving messages via wormhole.\\n     * @dev We use an address since we need to cast this to the L1 and L2 router types.\\n     */\\n    address public wormholeRouter;\\n    /// @notice A \\\"BridgeEscrow\\\" contract for sending and receiving `token` across a bridge.\\n    BridgeEscrow public bridgeEscrow;\\n\\n    /**\\n     * @notice Update the address of the wormhole router.\\n     * @param _router The new router.\\n     */\\n    function setWormholeRouter(address _router) external onlyGovernance {\\n        emit WormholeRouterSet({oldRouter: wormholeRouter, newRouter: _router});\\n        wormholeRouter = _router;\\n    }\\n    /**\\n     * @notice Update the address of the bridge escrow.\\n     * @param _escrow The new escrow.\\n     */\\n\\n    function setBridgeEscrow(BridgeEscrow _escrow) external onlyGovernance {\\n        emit BridgeEscrowSet({oldEscrow: address(bridgeEscrow), newEscrow: address(_escrow)});\\n        bridgeEscrow = _escrow;\\n    }\\n\\n    /**\\n     * @notice Emitted when the wormhole router is updated.\\n     * @param oldRouter The old router.\\n     * @param newRouter The new router.\\n     */\\n    event WormholeRouterSet(address indexed oldRouter, address indexed newRouter);\\n    /**\\n     * @notice Emitted when the escorw is updated.\\n     * @param oldEscrow The old router.\\n     * @param newEscrow The new router.\\n     */\\n    event BridgeEscrowSet(address indexed oldEscrow, address indexed newEscrow);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             AUTHENTICATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Role with authority to call \\\"harvest\\\", i.e. update this vault's tvl\\n    bytes32 public constant HARVESTER = keccak256(\\\"HARVESTER\\\");\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            WITHDRAWAL QUEUE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint8 constant MAX_STRATEGIES = 20;\\n\\n    /**\\n     * @notice An ordered array of strategies representing the withdrawal queue. The withdrawal queue is used\\n     * whenever the vault wants to pull money out of strategies (cross-chain rebalancing and user withdrawals).\\n     * @dev The first strategy in the array (index 0) is withdrawn from first.\\n     * This is a list of the currently active strategies  (all non-zero addresses are active).\\n     */\\n    Strategy[MAX_STRATEGIES] public withdrawalQueue;\\n\\n    /**\\n     * @notice Gets the full withdrawal queue.\\n     * @return The withdrawal queue.\\n     * @dev This gives easy access to the whole array (by default we can only get one index at a time)\\n     */\\n    function getWithdrawalQueue() external view returns (Strategy[MAX_STRATEGIES] memory) {\\n        return withdrawalQueue;\\n    }\\n\\n    /**\\n     * @notice Sets a new withdrawal queue.\\n     * @param newQueue The new withdrawal queue.\\n     */\\n    function setWithdrawalQueue(Strategy[MAX_STRATEGIES] calldata newQueue) external onlyGovernance {\\n        // Maintain queue size\\n        require(newQueue.length == MAX_STRATEGIES, \\\"BV: bad qu size\\\");\\n\\n        // Replace the withdrawal queue.\\n        withdrawalQueue = newQueue;\\n\\n        emit WithdrawalQueueSet(newQueue);\\n    }\\n\\n    /**\\n     * @notice Emitted when the withdrawal queue is updated.\\n     * @param newQueue The new withdrawal queue.\\n     */\\n    event WithdrawalQueueSet(Strategy[MAX_STRATEGIES] newQueue);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               STRATEGIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The total amount of underlying assets held in strategies at the time of the last harvest.\\n    uint256 public totalStrategyHoldings;\\n\\n    struct StrategyInfo {\\n        bool isActive;\\n        uint16 tvlBps;\\n        uint232 balance;\\n    }\\n\\n    /// @notice A map of strategy addresses to details\\n    mapping(Strategy => StrategyInfo) public strategies;\\n\\n    uint256 constant MAX_BPS = 10_000;\\n    /// @notice The number of bps of the vault's tvl which may be given to strategies (at most MAX_BPS)\\n    uint256 public totalBps;\\n\\n    /// @notice Emitted when a strategy is added by governance\\n    event StrategyAdded(Strategy indexed strategy);\\n    /// @notice Emitted when a strategy is removed by governance\\n    event StrategyRemoved(Strategy indexed strategy);\\n\\n    /**\\n     * @notice Add a strategy\\n     * @param strategy The strategy to add\\n     * @param tvlBps The number of bps of our tvl the strategy will get when funds are distributed to strategies\\n     */\\n    function addStrategy(Strategy strategy, uint16 tvlBps) external onlyGovernance {\\n        _increaseTVLBps(tvlBps);\\n        strategies[strategy] = StrategyInfo({isActive: true, tvlBps: tvlBps, balance: 0});\\n        //  Add strategy to withdrawal queue\\n        withdrawalQueue[MAX_STRATEGIES - 1] = strategy;\\n        emit StrategyAdded(strategy);\\n        _organizeWithdrawalQueue();\\n    }\\n\\n    /// @notice A helper function for increasing `totalBps`. Used when adding strategies or updating strategy allocs\\n    function _increaseTVLBps(uint256 tvlBps) internal {\\n        uint256 newTotalBps = totalBps + tvlBps;\\n        require(newTotalBps <= MAX_BPS, \\\"BV: too many bps\\\");\\n        totalBps = newTotalBps;\\n    }\\n\\n    /**\\n     * @notice Push all zero addresses to the end of the array. This function is used whenever a strategy is\\n     * added or removed from the withdrawal queue\\n     * @dev Relative ordering of non-zero values is maintained.\\n     */\\n    function _organizeWithdrawalQueue() internal {\\n        // number or empty values we've seen iterating from left to right\\n        uint256 offset;\\n\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                offset += 1;\\n            } else if (offset > 0) {\\n                // index of first empty value seen takes on value of `strategy`\\n                withdrawalQueue[i - offset] = strategy;\\n                withdrawalQueue[i] = Strategy(address(0));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove a strategy from the withdrawal queue. Fully divest from the strategy.\\n     * @param strategy The strategy to remove\\n     * @dev  removeStrategy MUST be called with harvest via multicall. This helps get the most accurate tvl numbers\\n     * and allows us to add any realized profits to our lockedProfit\\n     */\\n    function removeStrategy(Strategy strategy) external onlyGovernance {\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            if (strategy != withdrawalQueue[i]) {\\n                continue;\\n            }\\n\\n            strategies[strategy].isActive = false;\\n\\n            // The vault can re-allocate bps to a new strategy\\n            totalBps -= strategies[strategy].tvlBps;\\n            strategies[strategy].tvlBps = 0;\\n\\n            // Remove strategy from withdrawal queue\\n            withdrawalQueue[i] = Strategy(address(0));\\n            emit StrategyRemoved(strategy);\\n            _organizeWithdrawalQueue();\\n\\n            // Take all money out of strategy.\\n            _withdrawFromStrategy(strategy, strategy.totalLockedValue());\\n            break;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update tvl bps assigned to the given list of strategies\\n     * @param strategyList The list of strategies\\n     * @param strategyBps The new bps\\n     */\\n    function updateStrategyAllocations(Strategy[] calldata strategyList, uint16[] calldata strategyBps)\\n        external\\n        onlyRole(HARVESTER)\\n    {\\n        for (uint256 i = 0; i < strategyList.length; i = uncheckedInc(i)) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = strategyList[i];\\n\\n            // Ignore inactive (removed) strategies\\n            if (!strategies[strategy].isActive) continue;\\n\\n            // update tvl bps\\n            totalBps -= strategies[strategy].tvlBps;\\n            _increaseTVLBps(strategyBps[i]);\\n            strategies[strategy].tvlBps = strategyBps[i];\\n        }\\n        emit StrategyAllocsUpdated(strategyList, strategyBps);\\n    }\\n\\n    /**\\n     * @notice Emitted when we update tvl bps for a list of strategies.\\n     * @param strategyList The list of strategies.\\n     * @param strategyBps The new tvl bps for the strategies\\n     */\\n    event StrategyAllocsUpdated(Strategy[] strategyList, uint16[] strategyBps);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      STRATEGY DEPOSIT/WITHDRAWAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Emitted after the Vault deposits into a strategy contract.\\n     * @param strategy The strategy that was deposited into.\\n     * @param assets The amount of assets deposited.\\n     */\\n    event StrategyDeposit(Strategy indexed strategy, uint256 assets);\\n\\n    /**\\n     * @notice Emitted after the Vault withdraws funds from a strategy contract.\\n     * @param strategy The strategy that was withdrawn from.\\n     * @param assetsRequested The amount of assets we tried to divest from the strategy.\\n     * @param assetsReceived The amount of assets actually withdrawn.\\n     */\\n    event StrategyWithdrawal(Strategy indexed strategy, uint256 assetsRequested, uint256 assetsReceived);\\n\\n    /// @notice Deposit `assetAmount` amount of `asset` into strategies according to each strategy's `tvlBps`.\\n    function _depositIntoStrategies(uint256 assetAmount) internal {\\n        // All non-zero strategies are active\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n            _depositIntoStrategy(strategy, (assetAmount * strategies[strategy].tvlBps) / MAX_BPS);\\n        }\\n    }\\n\\n    function _depositIntoStrategy(Strategy strategy, uint256 assets) internal {\\n        // Don't allow empty investments\\n        if (assets == 0) return;\\n\\n        // Increase totalStrategyHoldings to account for the deposit.\\n        totalStrategyHoldings += assets;\\n\\n        unchecked {\\n            // Without this the next harvest would count the deposit as profit.\\n            // Cannot overflow as the balance of one strategy can't exceed the sum of all.\\n            strategies[strategy].balance += uint232(assets);\\n        }\\n\\n        // Approve assets to the strategy so we can deposit.\\n        _asset.safeApprove(address(strategy), assets);\\n\\n        // Deposit into the strategy, will revert upon failure\\n        strategy.invest(assets);\\n        emit StrategyDeposit(strategy, assets);\\n    }\\n\\n    /**\\n     * @notice Withdraw a specific amount of underlying tokens from a strategy.\\n     * @dev This is a \\\"best effort\\\" withdrawal. It could potentially withdraw nothing.\\n     * @param strategy The strategy to withdraw from.\\n     * @param assets  The amount of underlying tokens to withdraw.\\n     * @return The amount of assets actually received.\\n     */\\n    function _withdrawFromStrategy(Strategy strategy, uint256 assets) internal returns (uint256) {\\n        // Withdraw from the strategy\\n        uint256 amountWithdrawn = _divest(strategy, assets);\\n\\n        // Without this the next harvest would count the withdrawal as a loss.\\n        // We update the balance to the current tvl because a withdrawal can reduce the tvl by more than the amount\\n        // withdrawn (e.g. fees during a swap)\\n        uint256 oldStratTVL = strategies[strategy].balance;\\n        uint256 newStratTvl = strategy.totalLockedValue();\\n        strategies[strategy].balance = uint232(newStratTvl);\\n\\n        // Decrease totalStrategyHoldings to account for the withdrawal.\\n        // If we haven't harvested in a long time, newStratTvl could be bigger than oldStratTvl\\n        totalStrategyHoldings -= oldStratTVL > newStratTvl ? oldStratTVL - newStratTvl : 0;\\n        emit StrategyWithdrawal({strategy: strategy, assetsRequested: assets, assetsReceived: amountWithdrawn});\\n        return amountWithdrawn;\\n    }\\n\\n    /// @dev A small wrapper around divest(). We try-catch to make sure that a bad strategy does not pause withdrawals.\\n    function _divest(Strategy strategy, uint256 assets) internal returns (uint256) {\\n        try strategy.divest(assets) returns (uint256 amountDivested) {\\n            return amountDivested;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               HARVESTING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice A timestamp representing when the most recent harvest occurred.\\n     * @dev Since the time since the last harvest is used to calculate management fees, this is set\\n     * to `block.timestamp` (instead of 0) during initialization.\\n     */\\n    uint128 public lastHarvest;\\n    /// @notice The amount of profit *originally* locked after harvesting from a strategy\\n    uint128 public maxLockedProfit;\\n    /// @notice Amount of time in seconds that profit takes to fully unlock. See lockedProfit().\\n    uint256 public constant LOCK_INTERVAL = 24 hours;\\n\\n    /**\\n     * @notice Emitted after a successful harvest.\\n     * @param user The authorized user who triggered the harvest.\\n     * @param strategies The trusted strategies that were harvested.\\n     */\\n    event Harvest(address indexed user, Strategy[] strategies);\\n\\n    /**\\n     * @notice Harvest a set of trusted strategies.\\n     * @param strategyList The trusted strategies to harvest.\\n     * @dev Will always revert if profit from last harvest has not finished unlocking.\\n     */\\n    function harvest(Strategy[] calldata strategyList) external onlyRole(HARVESTER) {\\n        // Profit must not be unlocking\\n        require(block.timestamp >= lastHarvest + LOCK_INTERVAL, \\\"BV: profit unlocking\\\");\\n\\n        // Get the Vault's current total strategy holdings.\\n        uint256 oldTotalStrategyHoldings = totalStrategyHoldings;\\n\\n        // Used to store the new total strategy holdings after harvesting.\\n        uint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\\n\\n        // Used to store the total profit accrued by the strategies.\\n        uint256 totalProfitAccrued;\\n\\n        // Will revert if any of the specified strategies are untrusted.\\n        for (uint256 i = 0; i < strategyList.length; i = uncheckedInc(i)) {\\n            // Get the strategy at the current index.\\n            Strategy strategy = strategyList[i];\\n\\n            // Ignore inactive (removed) strategies\\n            if (!strategies[strategy].isActive) {\\n                continue;\\n            }\\n\\n            // Get the strategy's previous and current balance.\\n            uint232 balanceLastHarvest = strategies[strategy].balance;\\n            uint256 balanceThisHarvest = strategy.totalLockedValue();\\n\\n            // Update the strategy's stored balance.\\n            strategies[strategy].balance = uint232(balanceThisHarvest);\\n\\n            // Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\\n            // We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\\n            newTotalStrategyHoldings = newTotalStrategyHoldings + balanceThisHarvest - balanceLastHarvest;\\n\\n            unchecked {\\n                // Update the total profit accrued while counting losses as zero profit.\\n                // Cannot overflow as we already increased total holdings without reverting.\\n                totalProfitAccrued += balanceThisHarvest > balanceLastHarvest\\n                    ? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\\n                    : 0; // If the strategy registered a net loss we don't have any new profit.\\n            }\\n        }\\n\\n        // Update max unlocked profit based on any remaining locked profit plus new profit.\\n        maxLockedProfit = uint128(lockedProfit() + totalProfitAccrued);\\n\\n        // Set strategy holdings to our new total.\\n        totalStrategyHoldings = newTotalStrategyHoldings;\\n\\n        // Assess fees (using old lastHarvest) and update the last harvest timestamp.\\n        _assessFees();\\n        lastHarvest = uint128(block.timestamp);\\n\\n        emit Harvest(msg.sender, strategyList);\\n    }\\n\\n    /**\\n     * @notice Current locked profit amount.\\n     * @dev Profit unlocks uniformly over `LOCK_INTERVAL` seconds after the last harvest\\n     */\\n    function lockedProfit() public view virtual returns (uint256) {\\n        if (block.timestamp >= lastHarvest + LOCK_INTERVAL) {\\n            return 0;\\n        }\\n\\n        uint256 unlockedProfit = (maxLockedProfit * (block.timestamp - lastHarvest)) / LOCK_INTERVAL;\\n        return maxLockedProfit - unlockedProfit;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        LIQUIDATION/REBALANCING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The total amount of the underlying asset the vault has.\\n    function vaultTVL() public view returns (uint256) {\\n        return _asset.balanceOf(address(this)) + totalStrategyHoldings;\\n    }\\n\\n    /**\\n     * @notice Emitted when the vault must make a certain amount of assets available\\n     * @dev We liquidate during cross chain rebalancing or withdrawals.\\n     * @param assetsRequested The amount we wanted to make available for withdrawal.\\n     * @param assetsLiquidated The amount we actually liquidated.\\n     */\\n    event Liquidation(uint256 assetsRequested, uint256 assetsLiquidated);\\n\\n    /**\\n     * @notice Withdraw `amount` of underlying asset from strategies.\\n     * @dev Always check the return value when using this function, we might not liquidate anything!\\n     * @param amount The amount we want to liquidate\\n     * @return The amount we actually liquidated\\n     */\\n    function _liquidate(uint256 amount) internal returns (uint256) {\\n        uint256 amountLiquidated;\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n\\n            uint256 balance = _asset.balanceOf(address(this));\\n            if (balance >= amount) {\\n                break;\\n            }\\n\\n            uint256 amountNeeded = amount - balance;\\n            amountNeeded = Math.min(amountNeeded, strategies[strategy].balance);\\n\\n            // Force withdraw of token from strategy\\n            uint256 withdrawn = _withdrawFromStrategy(strategy, amountNeeded);\\n            amountLiquidated += withdrawn;\\n        }\\n        emit Liquidation({assetsRequested: amount, assetsLiquidated: amountLiquidated});\\n        return amountLiquidated;\\n    }\\n\\n    /**\\n     * @notice Assess fees.\\n     * @dev This is called during harvest() to assess management fees.\\n     */\\n    function _assessFees() internal virtual {}\\n\\n    /**\\n     * @notice Emitted when we do a strategy rebalance, i.e. when we make the strategy tvls match their tvl bps\\n     * @param caller The caller\\n     */\\n    event Rebalance(address indexed caller);\\n\\n    /// @notice  Rebalance strategies according to given tvl bps\\n    function rebalance() external onlyRole(HARVESTER) {\\n        uint256 tvl = vaultTVL();\\n\\n        // Loop through all strategies. Divesting from those whose tvl is too high,\\n        // Invest in those whose tvl is too low\\n        uint256[MAX_STRATEGIES] memory amountsToInvest;\\n\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            Strategy strategy = withdrawalQueue[i];\\n            if (address(strategy) == address(0)) {\\n                break;\\n            }\\n\\n            uint256 idealStrategyTVL = (tvl * strategies[strategy].tvlBps) / MAX_BPS;\\n            uint256 currStrategyTVL = strategy.totalLockedValue();\\n            if (idealStrategyTVL < currStrategyTVL) {\\n                _withdrawFromStrategy(strategy, currStrategyTVL - idealStrategyTVL);\\n            }\\n            if (idealStrategyTVL > currStrategyTVL) {\\n                amountsToInvest[i] = idealStrategyTVL - currStrategyTVL;\\n            }\\n        }\\n\\n        // Loop through the strategies to invest in, and invest in them\\n        for (uint256 i = 0; i < MAX_STRATEGIES; i = uncheckedInc(i)) {\\n            uint256 amountToInvest = amountsToInvest[i];\\n            if (amountToInvest == 0) {\\n                continue;\\n            }\\n\\n            // We aren't guaranteed that the vault has `amountToInvest` since there can be slippage\\n            // when divesting from strategies\\n            // NOTE: Strategies closer to the start of the queue are more likely to get the exact\\n            // amount of money needed\\n            amountToInvest = Math.min(amountToInvest, _asset.balanceOf(address(this)));\\n            if (amountToInvest == 0) {\\n                break;\\n            }\\n            // Deposit into strategy, making sure to not count this investment as a profit\\n            _depositIntoStrategy(withdrawalQueue[i], amountToInvest);\\n        }\\n\\n        emit Rebalance(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/EmergencyWithdrawalQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {L2Vault} from \\\"./L2Vault.sol\\\";\\nimport {uncheckedInc} from \\\"src/libs/Unchecked.sol\\\";\\n\\ncontract EmergencyWithdrawalQueue {\\n    /// @notice Address of Alpine vault.\\n    L2Vault public immutable vault;\\n\\n    constructor(L2Vault _vault) {\\n        vault = _vault;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              QUEUE STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Struct representing withdrawalRequest stored in each queue node.\\n    struct WithdrawalRequest {\\n        address owner;\\n        address receiver;\\n        uint256 shares;\\n        uint256 pushTime;\\n    }\\n    /// @notice Mapping representing the queue.\\n\\n    mapping(uint256 => WithdrawalRequest) queue;\\n\\n    /**\\n     * @dev The tailPtr is to the right of the headPtr on a number line\\n     * We start with tail(0) -> head(1)\\n     * After an enqueue we have tail(1) == head(1)\\n     */\\n    /// @notice Pointer to head of the queue.\\n    uint128 public headPtr = 1;\\n    /// @notice Pointer to tail of the queue.\\n    uint128 public tailPtr = 0;\\n\\n    /// @notice current size of the queue\\n    function size() public view returns (uint256) {\\n        return (tailPtr + 1) - headPtr;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  DEBT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Debt in shares unit.\\n    uint256 public shareDebt;\\n\\n    /// @notice Total debt\\n    function totalDebt() public view returns (uint256) {\\n        return vault.convertToAssets(shareDebt);\\n    }\\n\\n    // @notice User debts in share unit\\n    mapping(address => uint256) public ownerToDebt;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                PUSH/POP\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Emitted when we push onto the queue.\\n     * @param pos The users position in the queue.\\n     * @param owner The owner of the shares.\\n     * @param receiver The user who will receive the assets during share redemption\\n     * @param shares The number of shares to redeem.\\n     */\\n    event Push(uint256 indexed pos, address indexed owner, address indexed receiver, uint256 shares);\\n    /// @notice Emitted when we pop a request from the queue. See `Push` for the parameter info\\n    /// @dev This is only emitted when we successfully burn the user's shares. Invalid requests are skipped.\\n    event Pop(uint256 indexed pos, address indexed owner, address indexed receiver, uint256 shares);\\n\\n    /// @notice Enqueue user withdrawal requests to the queue.\\n    function enqueue(address owner, address receiver, uint256 shares) external {\\n        require(msg.sender == address(vault), \\\"EWQ: only vault\\\");\\n        tailPtr += 1;\\n        queue[tailPtr] = WithdrawalRequest(owner, receiver, shares, block.timestamp);\\n        shareDebt += shares;\\n        ownerToDebt[owner] += shares;\\n        emit Push(tailPtr, owner, receiver, shares);\\n    }\\n\\n    /// @notice Dequeue user withdrawal requests.\\n    function dequeue() external {\\n        require(tailPtr >= headPtr, \\\"EWQ: queue is empty\\\");\\n        WithdrawalRequest memory withdrawalRequest = queue[headPtr];\\n        delete queue[headPtr];\\n        shareDebt -= withdrawalRequest.shares;\\n        ownerToDebt[withdrawalRequest.owner] -= withdrawalRequest.shares;\\n\\n        try vault.redeem(withdrawalRequest.shares, withdrawalRequest.receiver, withdrawalRequest.owner) {\\n            emit Pop(headPtr, withdrawalRequest.owner, withdrawalRequest.receiver, withdrawalRequest.shares);\\n            headPtr += 1;\\n        } catch Error(string memory reason) {\\n            if (keccak256(bytes(reason)) == keccak256(\\\"L2Vault: bad dequeue\\\")) {\\n                // Do nothing while we wait for the vault to get enough assets\\n                revert(\\\"Ewq: assets pending\\\");\\n            } else {\\n                // The request is invalid for some reason\\n                // (e.g. the user has a lower balance than they did when making request)\\n                headPtr += 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Dequeue user withdrawal requests in a batch.\\n    function dequeueBatch(uint256 batchSize) external {\\n        require(size() >= batchSize, \\\"EWQ: batch too big\\\");\\n\\n        uint256 batchTailPtr = headPtr + batchSize;\\n        uint256 shareDebtReduction;\\n\\n        for (uint256 ptr = headPtr; ptr < batchTailPtr; ptr = uncheckedInc(ptr)) {\\n            WithdrawalRequest memory withdrawalRequest = queue[ptr];\\n            delete queue[ptr];\\n            shareDebtReduction += withdrawalRequest.shares;\\n            ownerToDebt[withdrawalRequest.owner] -= withdrawalRequest.shares;\\n\\n            try vault.redeem(withdrawalRequest.shares, withdrawalRequest.receiver, withdrawalRequest.owner) {\\n                emit Pop(ptr, withdrawalRequest.owner, withdrawalRequest.receiver, withdrawalRequest.shares);\\n            } catch Error(string memory reason) {\\n                if (keccak256(bytes(reason)) == keccak256(\\\"L2Vault: bad dequeue\\\")) {\\n                    // Not enough assets\\n                    revert(\\\"Ewq: assets pending\\\");\\n                } else {\\n                    // The request is invalid for some reason\\n                    // (e.g. the user has a lower balance than they did when making request)\\n                }\\n            }\\n        }\\n        shareDebt -= shareDebtReduction;\\n        headPtr += uint128(batchSize);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/L2Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {BaseRelayRecipient} from \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\nimport {BaseVault} from \\\"src/vaults/cross-chain-vault/BaseVault.sol\\\";\\nimport {L2BridgeEscrow} from \\\"./escrow/L2BridgeEscrow.sol\\\";\\nimport {DetailedShare} from \\\"src/utils/Detailed.sol\\\";\\nimport {L2WormholeRouter} from \\\"./wormhole/L2WormholeRouter.sol\\\";\\nimport {IERC4626} from \\\"src/interfaces/IERC4626.sol\\\";\\nimport {EmergencyWithdrawalQueue} from \\\"./EmergencyWithdrawalQueue.sol\\\";\\n\\n/**\\n * @notice An L2 vault. This is a cross-chain vault, i.e. some funds deposited here will be moved to L1 for investment.\\n * @dev This vault is ERC4626 compliant. See the EIP description here: https://eips.ethereum.org/EIPS/eip-4626.\\n * @author Affine Devs. Inspired by OpenZeppelin and Rari-Capital.\\n */\\ncontract L2Vault is\\n    ERC20Upgradeable,\\n    UUPSUpgradeable,\\n    PausableUpgradeable,\\n    BaseVault,\\n    BaseRelayRecipient,\\n    DetailedShare,\\n    IERC4626\\n{\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function initialize(\\n        address _governance,\\n        ERC20 _vaultAsset,\\n        address _wormholeRouter,\\n        L2BridgeEscrow _bridgeEscrow,\\n        EmergencyWithdrawalQueue _emergencyWithdrawalQueue,\\n        address forwarder,\\n        uint8[2] memory layerRatios,\\n        uint256[2] memory fees,\\n        uint256[2] memory ewqParams\\n    ) public initializer {\\n        __ERC20_init(\\\"USD Earn\\\", \\\"usdEarn\\\");\\n        __UUPSUpgradeable_init();\\n        __Pausable_init();\\n        baseInitialize(_governance, _vaultAsset, _wormholeRouter, _bridgeEscrow);\\n\\n        emergencyWithdrawalQueue = _emergencyWithdrawalQueue;\\n        l1Ratio = layerRatios[0];\\n        l2Ratio = layerRatios[1];\\n        rebalanceDelta = 10_000 * _asset.decimals();\\n        canTransferToL1 = true;\\n        canRequestFromL1 = true;\\n        lastTVLUpdate = uint128(block.timestamp);\\n\\n        _grantRole(GUARDIAN_ROLE, _governance);\\n        _setTrustedForwarder(forwarder);\\n\\n        withdrawalFee = fees[0];\\n        managementFee = fees[1];\\n\\n        ewqMinAssets = ewqParams[0];\\n        ewqMinFee = ewqParams[1];\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyGovernance {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        META-TRANSACTION SUPPORT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient) returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient) returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @notice Set the trusted forwarder address\\n     * @param forwarder The new forwarder address\\n     */\\n    function setTrustedForwarder(address forwarder) external onlyGovernance {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC4626 BASICS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc BaseVault\\n    function asset() public view override(BaseVault, IERC4626) returns (address assetTokenAddress) {\\n        return address(_asset);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        // E.g. for USDC, we want the initial price of a share to be $100.\\n        // For an initial price of 1 USDC / share we would have 1e6 * 1e8 / 1 = 1e14 shares given that we have 14 (6 + 8) decimals\\n        // in our share token. But since we want 100 USDC / share for the initial price, we add an extra two decimal places\\n        return _asset.decimals() + 10;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             AUTHENTICATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Accounts with thiss role can pause and unpause the contract.\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN\\\");\\n\\n    /// @notice Pause the contract.\\n    function pause() external onlyRole(GUARDIAN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract.\\n    function unpause() external onlyRole(GUARDIAN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                  FEES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Fee charged to vault over a year, number is in bps.\\n    uint256 public managementFee;\\n    /// @notice  Fee charged on redemption of shares, number is in bps.\\n    uint256 public withdrawalFee;\\n    /// @notice Minimal fee charged if withdrawal or redeem request is added to ewq, number is in `asset`.\\n    uint256 public ewqMinFee;\\n    /// @notice Minimal amount needed to enqueue a request to ewq, number is in `asset`.\\n    uint256 public ewqMinAssets;\\n\\n    event ManagementFeeSet(uint256 oldFee, uint256 newFee);\\n    event WithdrawalFeeSet(uint256 oldFee, uint256 newFee);\\n\\n    function setManagementFee(uint256 feeBps) external onlyGovernance {\\n        emit ManagementFeeSet({oldFee: managementFee, newFee: feeBps});\\n        managementFee = feeBps;\\n    }\\n\\n    function setWithdrawalFee(uint256 feeBps) external onlyGovernance {\\n        emit WithdrawalFeeSet({oldFee: withdrawalFee, newFee: feeBps});\\n        withdrawalFee = feeBps;\\n    }\\n\\n    function setEwqParams(uint256 _ewqMinFee, uint256 _ewqMinAssets) external onlyGovernance {\\n        ewqMinFee = _ewqMinFee;\\n        ewqMinAssets = _ewqMinAssets;\\n    }\\n\\n    uint256 constant SECS_PER_YEAR = 365 days;\\n\\n    /// @dev Collect management fees during calls to `harvest`.\\n    function _assessFees() internal override {\\n        // duration / SECS_PER_YEAR * feebps / MAX_BPS * totalSupply\\n        uint256 duration = block.timestamp - lastHarvest;\\n\\n        uint256 feesBps = (duration * managementFee) / SECS_PER_YEAR;\\n        uint256 numSharesToMint = (feesBps * totalSupply()) / MAX_BPS;\\n\\n        if (numSharesToMint == 0) {\\n            return;\\n        }\\n        _mint(governance, numSharesToMint);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                DEPOSITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) external whenNotPaused returns (uint256 shares) {\\n        shares = previewDeposit(assets);\\n        _deposit(assets, shares, receiver);\\n    }\\n\\n    function mint(uint256 shares, address receiver) external whenNotPaused returns (uint256 assets) {\\n        assets = previewMint(shares);\\n        _deposit(assets, shares, receiver);\\n    }\\n\\n    /// @dev Deposit helper used in deposit/mint.\\n    function _deposit(uint256 assets, uint256 shares, address receiver) internal {\\n        require(shares > 0, \\\"L2Vault: zero shares\\\");\\n        address caller = _msgSender();\\n\\n        _asset.safeTransferFrom(caller, address(this), assets);\\n        _mint(receiver, shares);\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @notice Deposit `asset` into strategies\\n     * @param amount The amount of `asset` to deposit\\n     */\\n    function depositIntoStrategies(uint256 amount) external whenNotPaused onlyRole(HARVESTER) {\\n        // Deposit entire balance of `_asset` into strategies\\n        _depositIntoStrategies(amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              WITHDRAWALS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice A withdrawal registry. When this vault has no liquidity, requests go here.\\n    EmergencyWithdrawalQueue public emergencyWithdrawalQueue;\\n\\n    event EwqSet(EmergencyWithdrawalQueue indexed oldQ, EmergencyWithdrawalQueue indexed newQ);\\n\\n    /**\\n     * @notice Update the address of the emergency withdrawal queue.\\n     * @param _ewq The new queue.\\n     */\\n    function setEwq(EmergencyWithdrawalQueue _ewq) external onlyGovernance {\\n        emit EwqSet({oldQ: emergencyWithdrawalQueue, newQ: _ewq});\\n        emergencyWithdrawalQueue = _ewq;\\n    }\\n\\n    function redeem(uint256 shares, address receiver, address owner) external whenNotPaused returns (uint256 assets) {\\n        assets = _redeem(_convertToAssets(shares, Rounding.Down), shares, receiver, owner);\\n    }\\n\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        external\\n        whenNotPaused\\n        returns (uint256 shares)\\n    {\\n        shares = previewWithdraw(assets);\\n        _redeem(assets, shares, receiver, owner);\\n    }\\n\\n    /// @dev A withdraw helper used in withdraw/redeem.\\n    function _redeem(uint256 assets, uint256 shares, address receiver, address owner)\\n        internal\\n        returns (uint256 assetsToUser)\\n    {\\n        EmergencyWithdrawalQueue ewq = emergencyWithdrawalQueue;\\n        // Only real share amounts are allowed since we might create an ewq request\\n        require(shares <= balanceOf(owner) + ewq.ownerToDebt(owner), \\\"L2Vault: min shares\\\");\\n\\n        uint256 assetsFee = _getWithdrawalFee(assets);\\n        assetsToUser = assets - assetsFee;\\n\\n        // We must be able to repay all queued users and the current user.\\n        uint256 assetDemand = assets + ewq.totalDebt();\\n        _liquidate(assetDemand);\\n\\n        // The ewq does not need approval to burn shares.\\n        address caller = _msgSender();\\n        if (caller != owner && caller != address(ewq)) _spendAllowance(owner, caller, shares);\\n\\n        // Add to emergency withdrawal queue if there is not enough liquidity to satify requests.\\n        if (_asset.balanceOf(address(this)) < assetDemand) {\\n            if (caller != address(ewq)) {\\n                // We need to enqueue, make sure that the requested amount is large enough.\\n                if (assets < ewqMinAssets) {\\n                    revert(\\\"L2Vault: bad enqueue, min assets\\\");\\n                }\\n                ewq.enqueue(owner, receiver, shares);\\n                return 0;\\n            } else {\\n                revert(\\\"L2Vault: bad dequeue\\\");\\n            }\\n        }\\n\\n        // Burn shares and give user equivalent value in `asset` (minus withdrawal fees).\\n        _burn(owner, shares);\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n\\n        _asset.safeTransfer(receiver, assetsToUser);\\n        _asset.safeTransfer(governance, assetsFee);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EXCHANGE RATES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    function totalAssets() public view returns (uint256 totalManagedAssets) {\\n        return vaultTVL() + l1TotalLockedValue - lockedProfit() - lockedTVL();\\n    }\\n\\n    function convertToShares(uint256 assets) public view returns (uint256 shares) {\\n        shares = _convertToShares(assets, Rounding.Down);\\n    }\\n\\n    /// @dev In previewDeposit we want to round down, but in previewWithdraw we want to round up\\n    function _convertToShares(uint256 assets, Rounding roundingDirection) internal view returns (uint256 shares) {\\n        // Even if there are no shares or assets in the vault, we start with 1 wei of asset and 1e8 shares\\n        // This helps mitigate price inflation attacks: https://github.com/transmissions11/solmate/issues/178\\n        // See https://www.rileyholterhus.com/writing/bunni as well.\\n        // The solution is inspired by YieldBox\\n        uint256 totalShares = totalSupply() + 1e8;\\n        uint256 _totalAssets = totalAssets() + 1;\\n\\n        if (roundingDirection == Rounding.Up) {\\n            shares = assets.mulDivUp(totalShares, _totalAssets);\\n        } else {\\n            shares = assets.mulDivDown(totalShares, _totalAssets);\\n        }\\n    }\\n\\n    function convertToAssets(uint256 shares) public view returns (uint256 assets) {\\n        assets = _convertToAssets(shares, Rounding.Down);\\n    }\\n\\n    /// @dev In previewMint, we want to round up, but in previewRedeem we want to round down\\n    function _convertToAssets(uint256 shares, Rounding roundingDirection) internal view returns (uint256 assets) {\\n        uint256 totalShares = totalSupply() + 1e8;\\n        uint256 _totalAssets = totalAssets() + 1;\\n\\n        if (roundingDirection == Rounding.Up) {\\n            assets = shares.mulDivUp(_totalAssets, totalShares);\\n        } else {\\n            assets = shares.mulDivDown(_totalAssets, totalShares);\\n        }\\n    }\\n\\n    function previewDeposit(uint256 assets) public view returns (uint256 shares) {\\n        return _convertToShares(assets, Rounding.Down);\\n    }\\n\\n    function previewMint(uint256 shares) public view returns (uint256 assets) {\\n        assets = _convertToAssets(shares, Rounding.Up);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view returns (uint256 shares) {\\n        shares = _convertToShares(assets, Rounding.Up);\\n    }\\n\\n    function previewRedeem(uint256 shares) public view returns (uint256 assets) {\\n        uint256 rawAssets = _convertToAssets(shares, Rounding.Down);\\n        uint256 assetsFee = _getWithdrawalFee(rawAssets);\\n        assets = rawAssets - assetsFee;\\n    }\\n\\n    /// @dev  Return amount of `asset` to be given to user after applying withdrawal fee\\n    function _getWithdrawalFee(uint256 tokenAmount) internal view returns (uint256) {\\n        uint256 feeAmount = tokenAmount.mulDivUp(withdrawalFee, MAX_BPS);\\n        if (_msgSender() == address(emergencyWithdrawalQueue)) {\\n            feeAmount = Math.max(feeAmount, ewqMinFee);\\n        }\\n        return feeAmount;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       DEPOSIT/WITHDRAWAL LIMITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address receiver) public pure returns (uint256 maxAssets) {\\n        receiver;\\n        maxAssets = type(uint256).max;\\n    }\\n\\n    function maxMint(address receiver) public pure returns (uint256 maxShares) {\\n        receiver;\\n        maxShares = type(uint256).max;\\n    }\\n\\n    function maxRedeem(address owner) public view returns (uint256 maxShares) {\\n        maxShares = balanceOf(owner);\\n    }\\n\\n    function maxWithdraw(address owner) public view returns (uint256 maxAssets) {\\n        maxAssets = _convertToAssets(balanceOf(owner), Rounding.Down);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        CROSS-CHAIN REBALANCING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice TVL of L1 denominated in `asset` (e.g. USDC). This value will be updated by wormhole messages.\\n    uint256 public l1TotalLockedValue;\\n\\n    /// @notice Represents the amount of tvl (in `asset`) that should exist on L1\\n    uint8 public l1Ratio;\\n    /// @notice Represents the amount of tvl (in `asset`) that should exist on L2\\n    uint8 public l2Ratio;\\n\\n    /// @notice If true, we can send assets to L1.\\n    bool public canTransferToL1;\\n    /// @notice If false, we can requests assets from L1.\\n    bool public canRequestFromL1;\\n\\n    /**\\n     * @notice The delta required to trigger a rebalance. The delta is the difference between current and ideal tvl\\n     * on a given layer.\\n     * @dev Fits into the same slot as the four above variables.\\n     */\\n    uint224 public rebalanceDelta;\\n\\n    /**\\n     * @notice Set the layer ratios\\n     * @param _l1Ratio The layer 1 ratio\\n     * @param _l2Ratio The layer 2 ratio\\n     */\\n    function setLayerRatios(uint8 _l1Ratio, uint8 _l2Ratio) external onlyGovernance {\\n        l1Ratio = _l1Ratio;\\n        l2Ratio = _l2Ratio;\\n        emit LayerRatiosSet({l1Ratio: l1Ratio, l2Ratio: l2Ratio});\\n    }\\n\\n    event LayerRatiosSet(uint8 l1Ratio, uint8 l2Ratio);\\n\\n    /**\\n     * @notice Set the rebalance delta\\n     * @param _rebalanceDelta The new rebalance delta\\n     */\\n    function setRebalanceDelta(uint224 _rebalanceDelta) external onlyGovernance {\\n        emit RebalanceDeltaSet({oldDelta: rebalanceDelta, newDelta: _rebalanceDelta});\\n        rebalanceDelta = _rebalanceDelta;\\n    }\\n\\n    event RebalanceDeltaSet(uint224 oldDelta, uint224 newDelta);\\n\\n    /// @notice The last time the tvl was updated. We need this to let L1 tvl updates unlock over time.\\n    uint128 lastTVLUpdate;\\n\\n    /// @notice See maxLockedProfit\\n    uint128 maxLockedTVL;\\n\\n    /// @notice See lockedProfit. This is the same, except we are profiting from L1 tvl info.\\n    function lockedTVL() public view returns (uint256) {\\n        uint256 _maxLockedTVL = maxLockedTVL;\\n        uint256 _lastTVLUpdate = lastTVLUpdate;\\n        if (block.timestamp >= _lastTVLUpdate + LOCK_INTERVAL) {\\n            return 0;\\n        }\\n\\n        uint256 unlockedTVL = (_maxLockedTVL * (block.timestamp - _lastTVLUpdate)) / LOCK_INTERVAL;\\n        return _maxLockedTVL - unlockedTVL;\\n    }\\n\\n    /**\\n     * @notice Receive a tvl message from the womhole router.\\n     * @param tvl The L1 tvl.\\n     * @param received True if L1 has received our last transfer.\\n     */\\n    function receiveTVL(uint256 tvl, bool received) external {\\n        require(msg.sender == wormholeRouter, \\\"L2Vault: only router\\\");\\n\\n        // If L1 has received the last transfer we sent it, unlock the L2->L1 bridge\\n        if (received && !canTransferToL1) {\\n            canTransferToL1 = true;\\n        }\\n\\n        // Only rebalance if all cross chain transfers have been settled.\\n        // If the L1 vault is sending assets (!canRequestFromL1), then its TVL could be wrong. Also\\n        // we don't to accidentally request assets again. If (!canTransferToL1), we don't want to accidentally\\n        // send assets when one transfer to L1 is already in progress\\n        if (!canTransferToL1 || !canRequestFromL1) {\\n            revert(\\\"Rebalance in progress\\\");\\n        }\\n\\n        // Update l1TotalLockedValue to match what we received from L1\\n        // Any increase in L1's tvl will unlock linearly, just as when harvesting from strategies\\n        uint256 oldL1TVL = l1TotalLockedValue;\\n        uint256 totalProfit = tvl > oldL1TVL ? tvl - oldL1TVL : 0;\\n        maxLockedTVL = uint128(totalProfit + lockedTVL());\\n        lastTVLUpdate = uint128(block.timestamp);\\n        l1TotalLockedValue = tvl;\\n\\n        (bool invest, uint256 delta) = _computeRebalance();\\n        if (delta < rebalanceDelta) {\\n            return;\\n        }\\n        _l1L2Rebalance(invest, delta);\\n    }\\n\\n    /// @dev Compute the amount of assets to be sent to/from L1\\n    function _computeRebalance() internal view returns (bool, uint256) {\\n        uint256 numSlices = l1Ratio + l2Ratio;\\n        // Set aside assets for the withdrawal queue\\n        uint256 l1IdealAmount =\\n            (l1Ratio * (vaultTVL() + l1TotalLockedValue - emergencyWithdrawalQueue.totalDebt())) / numSlices;\\n\\n        bool invest;\\n        uint256 delta;\\n        if (l1IdealAmount >= l1TotalLockedValue) {\\n            invest = true;\\n            delta = l1IdealAmount - l1TotalLockedValue;\\n        } else {\\n            delta = l1TotalLockedValue - l1IdealAmount;\\n        }\\n        return (invest, delta);\\n    }\\n\\n    /// @dev Send/receive assets from L1\\n    function _l1L2Rebalance(bool invest, uint256 amount) internal {\\n        if (invest) {\\n            _liquidate(amount);\\n            uint256 amountToSend = Math.min(_asset.balanceOf(address(this)), amount);\\n            _transferToL1(amountToSend);\\n        } else {\\n            _divestFromL1(amount);\\n        }\\n    }\\n\\n    /// @dev Transfer assets to L1 via Polygon Pos bridge\\n    function _transferToL1(uint256 amount) internal {\\n        // Send assets\\n        _asset.safeTransfer(address(bridgeEscrow), amount);\\n        L2BridgeEscrow(address(bridgeEscrow)).withdraw(amount);\\n        emit TransferToL1(amount);\\n\\n        // Update bridge state and L1 TVL (value of totalAssets is unchanged)\\n        canTransferToL1 = false;\\n        l1TotalLockedValue += amount;\\n\\n        // Let L1 know how much assets we sent\\n        L2WormholeRouter(wormholeRouter).reportFundTransfer(amount);\\n    }\\n\\n    event TransferToL1(uint256 amount);\\n\\n    /// @dev Request assets from L1\\n    function _divestFromL1(uint256 amount) internal {\\n        L2WormholeRouter(wormholeRouter).requestFunds(amount);\\n        canRequestFromL1 = false;\\n        emit RequestFromL1(amount);\\n    }\\n\\n    event RequestFromL1(uint256 amount);\\n\\n    /**\\n     * @notice Called by bridgeEscrow after assets are transferred to vault.\\n     * @param amount The amount of assets.\\n     */\\n    function afterReceive(uint256 amount) external {\\n        require(_msgSender() == address(bridgeEscrow), \\\"L2Vault: only escrow\\\");\\n        l1TotalLockedValue -= amount;\\n        canRequestFromL1 = true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          DETAILED PRICE INFO\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function detailedTVL() external view override returns (Number memory tvl) {\\n        tvl = Number({num: totalAssets(), decimals: _asset.decimals()});\\n    }\\n\\n    function detailedPrice() external view override returns (Number memory price) {\\n        price = Number({num: convertToAssets(10 ** decimals()), decimals: _asset.decimals()});\\n    }\\n\\n    function detailedTotalSupply() external view override returns (Number memory supply) {\\n        supply = Number({num: totalSupply(), decimals: decimals()});\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/escrow/BridgeEscrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {BaseVault} from \\\"src/vaults/cross-chain-vault/BaseVault.sol\\\";\\n\\nabstract contract BridgeEscrow {\\n    using SafeTransferLib for ERC20;\\n\\n    /// @notice The input asset.\\n    ERC20 public immutable asset;\\n    /// @notice The wormhole router contract.\\n    address public immutable wormholeRouter;\\n    /// @notice Governance address (shared with vault).\\n    address public immutable governance;\\n\\n    /**\\n     * @notice Emitted whenever we transfer funds from this escrow to the vault\\n     * @param assets The amount of assets transferred\\n     */\\n    event TransferToVault(uint256 assets);\\n\\n    constructor(BaseVault _vault) {\\n        wormholeRouter = _vault.wormholeRouter();\\n        asset = ERC20(_vault.asset());\\n        governance = _vault.governance();\\n    }\\n\\n    /**\\n     * @notice Send assets to vault.\\n     * @param assets The amount of assets to send.\\n     * @param exitProof Proof needed by Polygon Pos bridge to unlock assets on Ethereum.\\n     */\\n    function clearFunds(uint256 assets, bytes calldata exitProof) external {\\n        require(msg.sender == wormholeRouter, \\\"BE: Only wormhole router\\\");\\n        _clear(assets, exitProof);\\n    }\\n\\n    /// @notice Escape hatch for governance in an emergency.\\n    function rescueFunds(uint256 amount, bytes calldata exitProof) external {\\n        require(msg.sender == governance, \\\"BE: Only Governance\\\");\\n        _clear(amount, exitProof);\\n    }\\n\\n    function _clear(uint256 assets, bytes calldata exitProof) internal virtual;\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/escrow/L2BridgeEscrow.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {BridgeEscrow} from \\\"./BridgeEscrow.sol\\\";\\nimport {L2Vault} from \\\"src/vaults/cross-chain-vault/L2Vault.sol\\\";\\n\\ninterface IChildERC20 {\\n    function withdraw(uint256 amount) external;\\n}\\n\\ncontract L2BridgeEscrow is BridgeEscrow {\\n    using SafeTransferLib for ERC20;\\n\\n    /// @notice The L2Vault.\\n    L2Vault public immutable vault;\\n\\n    constructor(L2Vault _vault) BridgeEscrow(_vault) {\\n        vault = _vault;\\n    }\\n\\n    /// @notice Send `amount` of `asset` to L1BridgeEscrow.\\n    function withdraw(uint256 amount) external {\\n        require(msg.sender == address(vault), \\\"BE: Only vault\\\");\\n        IChildERC20(address(asset)).withdraw(amount);\\n    }\\n\\n    function _clear(uint256 amount, bytes calldata /* exitProof */ ) internal override {\\n        uint256 balance = asset.balanceOf(address(this));\\n        require(balance >= amount, \\\"BE: Funds not received\\\");\\n        asset.safeTransfer(address(vault), balance);\\n\\n        emit TransferToVault(balance);\\n        vault.afterReceive(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/wormhole/L2WormholeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.16;\\n\\nimport {IWormhole} from \\\"src/interfaces/IWormhole.sol\\\";\\nimport {L2Vault} from \\\"src/vaults/cross-chain-vault/L2Vault.sol\\\";\\nimport {WormholeRouter} from \\\"./WormholeRouter.sol\\\";\\nimport {Constants} from \\\"src/libs/Constants.sol\\\";\\n\\ncontract L2WormholeRouter is WormholeRouter {\\n    function otherLayerWormholeId() public pure override returns (uint16) {\\n        return 2;\\n    }\\n\\n    constructor(L2Vault _vault, IWormhole _wormhole) WormholeRouter(_vault, _wormhole) {}\\n\\n    /// @notice Let L1 know that is should receive `amount` of `asset`.\\n    function reportFundTransfer(uint256 amount) external payable {\\n        require(msg.sender == address(vault), \\\"WR: Only vault\\\");\\n        bytes memory payload = abi.encode(Constants.L2_FUND_TRANSFER_REPORT, amount);\\n        uint64 sequence = wormhole.nextSequence(address(this));\\n        wormhole.publishMessage{value: msg.value}(uint32(sequence), payload, consistencyLevel);\\n    }\\n\\n    /// @notice Request of `amount` of `asset` from L1Vault.\\n    function requestFunds(uint256 amount) external payable {\\n        require(msg.sender == address(vault), \\\"WR: Only vault\\\");\\n        bytes memory payload = abi.encode(Constants.L2_FUND_REQUEST, amount);\\n        uint64 sequence = wormhole.nextSequence(address(this));\\n        wormhole.publishMessage{value: msg.value}(uint32(sequence), payload, consistencyLevel);\\n    }\\n\\n    /// @notice Receive `message` confirming transfer from L1Vault.\\n    function receiveFunds(bytes calldata message) external {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole.parseAndVerifyVM(message);\\n        require(valid, reason);\\n        _validateWormholeMessageEmitter(vm);\\n        nextValidNonce = vm.nonce + 1;\\n        (bytes32 msgType, uint256 amount) = abi.decode(vm.payload, (bytes32, uint256));\\n        require(msgType == Constants.L1_FUND_TRANSFER_REPORT, \\\"WR: bad msg type\\\");\\n        vault.bridgeEscrow().clearFunds(amount, \\\"\\\");\\n    }\\n\\n    /// @notice Receive `message` with L1Vault's tvl data.\\n    function receiveTVL(bytes calldata message) external {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole.parseAndVerifyVM(message);\\n        require(valid, reason);\\n        _validateWormholeMessageEmitter(vm);\\n        nextValidNonce = vm.nonce + 1;\\n        (bytes32 msgType, uint256 tvl, bool received) = abi.decode(vm.payload, (bytes32, uint256, bool));\\n        require(msgType == Constants.L1_TVL, \\\"WR: bad msg type\\\");\\n        L2Vault(address(vault)).receiveTVL(tvl, received);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/vaults/cross-chain-vault/wormhole/WormholeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity =0.8.16;\\n\\nimport {IWormhole} from \\\"src/interfaces/IWormhole.sol\\\";\\nimport {BaseVault} from \\\"src/vaults/cross-chain-vault/BaseVault.sol\\\";\\nimport {AffineGovernable} from \\\"src/utils/AffineGovernable.sol\\\";\\n\\nabstract contract WormholeRouter is AffineGovernable {\\n    /// @notice The vault that sends/receives messages.\\n    BaseVault public immutable vault;\\n\\n    constructor(BaseVault _vault, IWormhole _wormhole) {\\n        vault = _vault;\\n        governance = vault.governance();\\n        wormhole = _wormhole;\\n    }\\n    /*//////////////////////////////////////////////////////////////\\n                         WORMHOLE CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The address of the core wormhole contract.\\n    IWormhole public immutable wormhole;\\n    /**\\n     * @notice The number of blocks it takes to emit produce the VAA.\\n     * See https://book.wormholenetwork.com/wormhole/4_vaa.html\\n     * @dev This consistency level is actually being ignored on Polygon as of August 16, 2022. The minimum number of blocks\\n     * is actually hardcoded to 512. See https://github.com/certusone/wormhole/blob/9ba75ddb97162839e0cacd91851a9a0ef9b45496/node/cmd/guardiand/node.go#L969-L981\\n     */\\n    uint8 public consistencyLevel = 4;\\n\\n    ///@notice Set the number of blocks needed for wormhole guardians to produce VAA\\n    function setConsistencyLevel(uint8 _consistencyLevel) external onlyGovernance {\\n        consistencyLevel = _consistencyLevel;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             WORMHOLE STATE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function otherLayerWormholeId() public view virtual returns (uint16) {}\\n\\n    uint256 public nextValidNonce;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               VALIDATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _validateWormholeMessageEmitter(IWormhole.VM memory vm) internal view {\\n        require(vm.emitterAddress == bytes32(uint256(uint160(address(this)))), \\\"WR: bad emitter address\\\");\\n        require(vm.emitterChainId == otherLayerWormholeId(), \\\"WR: bad emitter chain\\\");\\n        require(vm.nonce >= nextValidNonce, \\\"WR: old transaction\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@opengsn/=node_modules/@opengsn/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"script/=script/\",\r\n      \"solady/=node_modules/solady/\",\r\n      \"solmate/=node_modules/solmate/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 256\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract L2Vault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IWormhole\",\"name\":\"_wormhole\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"consistencyLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextValidNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherLayerWormholeId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTVL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reportFundTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_consistencyLevel\",\"type\":\"uint8\"}],\"name\":\"setConsistencyLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract BaseVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "L2WormholeRouter", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "256", "ConstructorArguments": "000000000000000000000000829363736a5a9080e05549db6d1271f070a7e2240000000000000000000000007a4b5a56256163f07b2c80a7ca55abe66c4ec4d7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}