{"SourceCode": "/**\r\n *Submitted for verification at bscscan.com on 2022-12-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size; assembly {\r\n            size := extcodesize(account)\r\n        } return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target,bytes memory data,string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target,bytes memory data,uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target,bytes memory data,uint256 value,string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target,bytes memory data,string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target,bytes memory data,string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(bool success,bytes memory returndata,string memory errorMessage) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token,address spender,uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token,address spender,uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {   \r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Basic {\r\n  function totalSupply() public virtual view returns (uint256);\r\n  function balanceOf(address who) public virtual view returns (uint256);\r\n  function transfer(address to, uint256 value) public virtual returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n//..............................................................................................\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public virtual view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n  function approve(address spender, uint256 value) public virtual returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//..................................................................................................\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public override view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n   \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public  override view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n//........................................................................................\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n using SafeMath for uint256;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public override returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public override view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  address public administrator;\r\n\r\n  modifier onlyAdminstrator(){\r\n     require(administrator == msg.sender, \"requires admin priviledge\");\r\n     _;\r\n   }\r\n\r\n}\r\n//....................................................................................\r\n\r\n\r\ncontract SwissBonds is StandardToken {\r\n\tusing SafeMath for uint256;\r\n    \r\n    uint256 public START_DATE;\r\n    address public DEV;\r\n\tuint256 public INVEST_MIN_AMOUNT = 10 * (10**6);\r\n\tuint256 public REFERRAL_PERCENTS = 100;\r\n\tuint256 public VAULT_TAX = 100;\r\n    uint256 public WITHDRAW_TAX = 200;\r\n    uint256 public LOTTO_FEE = 200;\r\n    uint256  public ROI = 50;\r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n    mapping (address => User) public users;\r\n    mapping (address => mapping(uint256 => Stake)) public stakes;\r\n    uint256 public lottoBalance = 0;\r\n    uint256 public constant ticketPrice = 20 * (10**6);\r\n    address[] public players;\r\n\tuint256 public totalStaked = 0;\r\n    using SafeERC20 for IERC20;\r\n    IERC20 public USDT;\r\n\r\n\r\n    constructor(address _dev, uint256 _startDate) {\r\n            administrator = msg.sender;\r\n            DEV = _dev;\r\n            START_DATE = _startDate;\r\n            USDT = IERC20(0xc2132D05D31c914a87C6611C10748AEb04B58e8F); \r\n    }\r\n\r\n\r\nstruct User {\r\n    uint256 startDate;\r\n    uint256 refBonus;\r\n    uint256 amountStaked;\r\n    uint256 bonds;\r\n    Stake [] stakeList;\r\n}\r\n\r\nstruct Stake {\r\n    uint256 key;\r\n    uint256 timeStamp;\r\n    uint256 timeToExpire;\r\n    uint256 amount;\r\n    address wallet;\r\n}\r\n\r\nstruct lottoTime {\r\n    uint256 index;\r\n    uint256 timestamp;\r\n}\r\n\r\nstruct Winner {\r\n    uint256 reward;\r\n    address wallet;\r\n    uint256 lottoPlan;\r\n    uint256 timestamp;\r\n}\r\n\r\n    mapping(uint256 => lottoTime) public timeId;\r\n    Winner[] public winners;\r\n    Winner[] public pastWinners;\r\n\r\n\r\nevent NewStake(address indexed wallet, uint256 amount);\r\nevent NewWinner(address indexed wallet, uint256 amount, uint256 timeStamp);\r\n\r\n\r\n function invest(uint256 _amount, address ref) external {\r\n        require(block.timestamp >= START_DATE, \"App has not launch yet.\");\r\n        require(ref != msg.sender, \"You cannot refer yourself!\");\r\n        require(_amount >= INVEST_MIN_AMOUNT , \"You should stake at least 10 Bonds.\");\r\n        User storage user = users[msg.sender];\r\n        User storage refUser = users[ref];\r\n\r\n        uint256 fees = _amount.mul(VAULT_TAX).div(PERCENTS_DIVIDER);\r\n        uint256 lottoFees = _amount.mul(LOTTO_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 totalFees = fees.add(lottoFees);\r\n        uint256 _amountToStaked = _amount.sub(totalFees);\r\n        totalStaked = totalStaked.add(_amountToStaked);\r\n        contractTx(false, _amount, msg.sender);\r\n        contractTx(true, fees, DEV);\r\n        \r\n        if(user.startDate == 0) user.startDate = block.timestamp;\r\n        user.amountStaked = user.amountStaked.add(_amountToStaked);\r\n        refUser.refBonus = refUser.refBonus.add(fees);\r\n\r\n        user.stakeList.push(Stake({\r\n            key: user.stakeList.length,\r\n            timeStamp: block.timestamp,\r\n            amount: _amountToStaked,\r\n            timeToExpire: block.timestamp + 365 days,\r\n            wallet: msg.sender\r\n        }));\r\n        \r\n        uint256 tickets = lottoFees.div(ticketPrice);\r\n        if(tickets >= 1) lottoEntry(tickets, lottoFees);\r\n\r\n        emit NewStake(msg.sender, _amount);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nfunction lottoEntry(uint256 tickets, uint256 _lottoFees) internal {\r\n        lottoBalance = lottoBalance + _lottoFees;\r\n        tickets = tickets > 20 ? 20 : tickets;\r\n        for (uint256 i = 0 ; i < tickets; i++) {\r\n              players.push(msg.sender);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\nfunction compound() external {\r\n        User storage user = users[msg.sender];\r\n        uint256 earnings = calcEarnings(msg.sender);\r\n        require(earnings > 0, \"earnings should be greater than 0\");\r\n        for (uint i = 0; i < user.stakeList.length; i++){\r\n            user.stakeList[i].timeStamp = block.timestamp;\r\n        }\r\n        user.amountStaked = user.amountStaked.add(earnings);\r\n        totalStaked = totalStaked.add(earnings);\r\n        user.stakeList.push(Stake({\r\n            key: user.stakeList.length,\r\n            timeStamp: block.timestamp,\r\n            timeToExpire: block.timestamp + 365 days,\r\n            amount: earnings,\r\n            wallet: msg.sender\r\n        }));\r\n        \r\n       if(timeId[1].timestamp <= block.timestamp) pickWinner_lotto();\r\n}\r\n\r\n\r\nfunction stakeRefBonus() external {\r\n        User storage user = users[msg.sender];\r\n        uint256 bonus = user.refBonus;\r\n        require(bonus > 0, \"bonus should be greater than 0\");\r\n        user.amountStaked = user.amountStaked.add(bonus);\r\n        totalStaked = totalStaked.add(bonus);\r\n        user.stakeList.push(Stake({\r\n            key: user.stakeList.length,\r\n            timeStamp: block.timestamp,\r\n            timeToExpire: block.timestamp + 365 days,\r\n            amount: bonus,\r\n            wallet: msg.sender\r\n        }));\r\n\r\n        user.refBonus = 0;\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction withdrawRefBonus() external {\r\n        User storage user = users[msg.sender];\r\n        uint256 bonus = user.refBonus;\r\n        require(bonus > 0, \"bonus should be greater than 0\");\r\n        uint256 fees = bonus.mul(VAULT_TAX).div(PERCENTS_DIVIDER);\r\n        uint256 _amountToReceive = bonus.sub(fees);\r\n        contractTx(true, _amountToReceive, msg.sender);\r\n        user.refBonus = 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction exchange(bool isBuy, uint256 _amount) external {\r\n    if(isBuy) {\r\n        USDT.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 bondsAmount = _amount.mul(2);\r\n        contractTx(true, bondsAmount, msg.sender);\r\n    }else {\r\n        uint256 usdtTokenAmount = _amount.div(2);\r\n        contractTx(false, _amount, msg.sender);\r\n        USDT.safeTransfer(msg.sender, usdtTokenAmount);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction withdrawEarnings() external {\r\n    User storage user = users[msg.sender];\r\n    uint256 earnings = calcEarnings(msg.sender);\r\n      \r\n      \tfor (uint i = 0; i < user.stakeList.length; i++){\r\n            user.stakeList[i].timeStamp = block.timestamp;\r\n        }\r\n\r\n        uint256 fees = earnings.mul(WITHDRAW_TAX).div(PERCENTS_DIVIDER);\r\n        uint256 devfees = earnings.mul(VAULT_TAX).div(PERCENTS_DIVIDER);\r\n        uint256 _amountToReceive = earnings.sub(fees);\r\n\r\n        contractTx(true, _amountToReceive, msg.sender);\r\n        contractTx(true, devfees, DEV);\r\n\r\n        if(timeId[1].timestamp <= block.timestamp) pickWinner_lotto();\r\n}\r\n\r\n\r\n\r\n\r\nfunction calcEarnings(address _wallet) public view returns(uint256) {\r\n    User storage user = users[_wallet];\t\r\n        uint256 earnings;\r\n        \r\n        for (uint256 i = 0; i < user.stakeList.length; i++){\t\r\n             if(block.timestamp < user.stakeList[i].timeToExpire) {\r\n                uint256 elapsedTime = block.timestamp.sub(user.stakeList[i].timeStamp);\r\n                uint256 amount = user.stakeList[i].amount;\r\n                uint256 dailyReturn = amount.mul(ROI).div(PERCENTS_DIVIDER);\r\n                uint256 currentReturn = dailyReturn.mul(elapsedTime).div(1 days);\r\n                earnings += currentReturn;\r\n             }\r\n        }\r\n        return earnings;\r\n}\r\n\r\n\r\n\r\n\r\nfunction random() private view returns(uint){\r\n       return uint256(keccak256(abi.encodePacked(block.difficulty,block.timestamp,players)));\r\n    }\r\n\r\nfunction pickWinner_lotto() public {\r\n        // timer set to the contract\r\n        require(timeId[1].timestamp <= block.timestamp , \"not time yet for lotto\");\r\n        if(players.length <= 0) {\r\n            uint256 lottoTimeStamp = block.timestamp + 1 days;\r\n            timeId[1] = lottoTime(1,lottoTimeStamp);\r\n        }\r\n        else {\r\n            uint256 index = random() % players.length;\r\n            uint256 lottoTimeStamp = block.timestamp + 1 days;\r\n            timeId[1] = lottoTime(1,lottoTimeStamp);\r\n            uint256 contractFees = lottoBalance.mul(LOTTO_FEE).div(PERCENTS_DIVIDER);\r\n            uint256 marketingFees = lottoBalance.mul(VAULT_TAX).div(PERCENTS_DIVIDER);\r\n\r\n            uint256 totalFee = contractFees.add(marketingFees);\r\n            uint256 userReward = lottoBalance.sub(totalFee);\r\n            Winner memory m; m.reward = userReward; m.wallet = players[index]; m.lottoPlan = 1; m.timestamp = block.timestamp;\r\n            pastWinners.push(m);\r\n            winners.push(m);\r\n            lottoBalance = 0;\r\n            address playerWallet = players[index];\r\n            delete players;\r\n            contractTx(true, marketingFees, DEV);\r\n            emit NewWinner(playerWallet, userReward, block.timestamp);\r\n        }\r\n     }\r\n\r\nfunction checkWin(uint256 _lottoPlan, address _wallet) public view returns(bool isWinner, uint256 reward, uint256 index){\r\n         for (uint256 i = 0 ; i < winners.length; i++) {\r\n              if(winners[i].wallet == _wallet && winners[i].lottoPlan == _lottoPlan) {\r\n                  return (true, winners[i].reward, i);\r\n              }\r\n          }\r\n    }\r\n\r\n\r\nfunction claimReward(uint256 _lottoPlan) public {\r\n            (bool isWinner, uint256 reward, uint256 index) = checkWin(_lottoPlan, msg.sender);\r\n            if(isWinner) {\r\n                contractTx(true, reward, msg.sender);\r\n                delete winners[index];\r\n            }else revert();\r\n}\r\n\r\n\r\n\r\nfunction RunLottery() external onlyAdminstrator {\r\n         uint256 time1 = block.timestamp + 1 days;\r\n         timeId[1] = lottoTime(1,time1);\r\n}\r\n\r\n    \r\n    \r\nfunction pastWinnersLength() public view returns(uint256 length) {\r\n        return pastWinners.length;  \r\n}\r\n\r\n\r\n\r\nfunction TicketCounter(address ad) public view returns(uint256){\r\n    uint256 lHm=0;\r\n    uint arrayLength = players.length;\r\n    if(arrayLength!=0){\r\n        for (uint i=0; i<arrayLength; i++) {\r\n        // do something\r\n            if (players[i]==ad){\r\n                lHm++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return lHm;\r\n}\r\n\r\n\r\n\r\n\r\nfunction contractTx(bool credit, uint _amount, address _wallet) internal {\r\n       User storage user = users[_wallet];\r\n       if(credit) {\r\n           user.bonds = user.bonds.add(_amount);\r\n       }else {\r\n           require(_amount <= user.bonds);\r\n           user.bonds = user.bonds.sub(_amount);\r\n       }\r\n  }\r\n\r\n \r\n function getUserBonds(address _wallet) public view returns(uint256) {\r\n       User storage user = users[_wallet];\r\n       return user.bonds;\r\n  }\r\n\r\n\r\n\r\nfunction userStakesLength(address _wallet) public view returns(uint256) {\r\n     User storage user = users[_wallet];\t\r\n     return user.stakeList.length;\r\n}\r\n\r\n\r\nfunction userStakesList(address _wallet) public view returns(Stake[] memory) {\r\n   User storage user = users[_wallet];\t\r\n    return user.stakeList;\r\n}\r\n\r\n\r\nfunction changeOwner(address _account) external onlyAdminstrator {\r\n         administrator = _account;\r\n    }\r\n\r\nfunction changeDev(address _account) external onlyAdminstrator {\r\n         DEV = _account;\r\n}\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"NewWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTO_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RunLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"TicketCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"calcEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottoPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkWin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottoPlan\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lottoPlan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pastWinnersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner_lotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRefBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToExpire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"userStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"userStakesList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToExpire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct SwissBonds.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lottoPlan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRefBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwissBonds", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b9ece3ff4aa86883c4c10fd09221b8f2da5da070000000000000000000000000000000000000000000000000000000064e9e940", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3bd262d1c2a805290684402c4d3ec398a5a237db501e7eccc3c968719cafecb8"}