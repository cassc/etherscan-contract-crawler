{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable {\\n    enum Role {\\n        USER,\\n        SUPER_USER,\\n        DEV,\\n        ADMIN\\n    }\\n\\n    mapping(address => Role) public roles;\\n\\n    modifier isAuthorized(Role minimumRequiredRole) {\\n        require(roles[_msgSender()] >= minimumRequiredRole, \\\"AccessControl: NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    event RoleGranted(Role indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(Role indexed role, address indexed account, address indexed sender);\\n\\n    function __AccessControl_init(address _owner) internal onlyInitializing {\\n        __AccessControl_init_unchained(_owner);\\n    }\\n\\n    function __AccessControl_init_unchained(address _owner) internal onlyInitializing {\\n        _grantRole(Role.ADMIN, _owner);\\n    }\\n\\n    function grantRole(Role role, address account) external isAuthorized(Role.ADMIN) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(address account) external {\\n        _revokeRole(account);\\n    }\\n\\n    function renounceRole(address account) external {\\n        require(account == _msgSender(), \\\"AccessControl: NOT_ACCOUNT_OWNER\\\");\\n        _revokeRole(account);\\n    }\\n\\n    function _revokeRole(address account) internal {\\n        roles[account] = Role.USER;\\n    }\\n\\n    function _grantRole(Role role, address account) internal {\\n        require(roles[account] != role, \\\"AccessControl: ROLE_ALREADY_ASSIGNED\\\");\\n        roles[account] = role;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/alpha/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {AccessControlUpgradeable} from \\\"../access/AccessControl.sol\\\";\\n\\ncontract LSAN is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC20Upgradeable,\\n    AccessControlUpgradeable\\n{\\n    uint256 public weiPerByte; // In 18 decimal format -- ie. Wei\\n    uint256 public multiplier;\\n    uint256 public minimumDeposit;\\n    address payable public SAFE_ADDRESS;\\n    uint256 public DEPLOYED_TIME;\\n    mapping(address => bool) blacklist;\\n    mapping(address => mapping(address => bool)) whitelist;\\n\\n    modifier onlyPermitted(address _from, address _to) {\\n        require(isPermitted(_from, _to), \\\"LSAN: Transfer between addresses is not permitted\\\");\\n        _;\\n    }\\n\\n    /// @dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function initialize(\\n        address _safeAddress,\\n        uint256 _weiPerByte,\\n        address[] memory _blacklist,\\n        address[][] memory _whitelist\\n    ) public initializer {\\n        require(_blacklist.length == _whitelist.length, \\\"LSAN: Initial whitelist configuration invalid\\\");\\n\\n        __Ownable_init();\\n        __ERC20_init(\\\"Log Store Alpha Network Token\\\", \\\"LSAN\\\");\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init(msg.sender);\\n\\n        // initiate the blacklist/whitelist\\n        for (uint256 i = 0; i < _blacklist.length; i++) {\\n            addBlacklist(_blacklist[i]);\\n            for (uint256 j = 0; j < _whitelist[i].length; j++) {\\n                addWhitelist(_whitelist[i][j], _blacklist[i]);\\n            }\\n        }\\n\\n        SAFE_ADDRESS = payable(_safeAddress);\\n        DEPLOYED_TIME = block.timestamp;\\n        multiplier = 1;\\n        minimumDeposit = 0;\\n        weiPerByte = _weiPerByte;\\n    }\\n\\n    // ---------- Admin functions\\n    function mintTokens(address account, uint256 amount) public isAuthorized(Role.DEV) {\\n        _mint(account, amount);\\n    }\\n\\n    function mintManyTokens(address[] memory _addresses, uint256 amount) public isAuthorized(Role.DEV) {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            _mint(_addresses[i], amount);\\n        }\\n    }\\n\\n    function burn(address account, uint256 amount) public isAuthorized(Role.DEV) {\\n        _burn(account, amount);\\n    }\\n\\n    function addBlacklist(address _address) public isAuthorized(Role.DEV) {\\n        blacklist[_address] = true;\\n    }\\n\\n    function removeBlacklist(address _address) public isAuthorized(Role.DEV) {\\n        blacklist[_address] = false;\\n    }\\n\\n    function addWhitelist(address _from, address _to) public isAuthorized(Role.DEV) {\\n        whitelist[_from][_to] = true;\\n    }\\n\\n    function removeWhitelist(address _from, address _to) public isAuthorized(Role.DEV) {\\n        whitelist[_from][_to] = false;\\n    }\\n\\n    function massAddWhitelist(\\n        address[] memory _fromAddresses,\\n        address[] memory _toAddresses\\n    ) public isAuthorized(Role.DEV) {\\n        require(_fromAddresses.length == _toAddresses.length, \\\"LSAN: Invalid parameters for mass update\\\");\\n        for (uint256 i = 0; i < _fromAddresses.length; i++) {\\n            addWhitelist(_fromAddresses[i], _toAddresses[i]);\\n        }\\n    }\\n\\n    function massRemoveWhitelist(\\n        address[] memory _fromAddresses,\\n        address[] memory _toAddresses\\n    ) public isAuthorized(Role.DEV) {\\n        require(_fromAddresses.length == _toAddresses.length, \\\"LSAN: Invalid parameters for mass update\\\");\\n        for (uint256 i = 0; i < _fromAddresses.length; i++) {\\n            removeWhitelist(_fromAddresses[i], _toAddresses[i]);\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) public onlyOwner {\\n        require(address(this).balance >= amount, \\\"LSAN: Insufficient contract balance\\\");\\n        SAFE_ADDRESS.transfer(amount);\\n    }\\n\\n    function setWeiPerByte(uint256 _weiPerByte) public onlyOwner {\\n        weiPerByte = _weiPerByte;\\n    }\\n\\n    function setMultipler(uint256 _multiplier) public onlyOwner {\\n        multiplier = _multiplier;\\n    }\\n\\n    function setMinimumDeposit(uint _minimumDeposit) public onlyOwner {\\n        minimumDeposit = _minimumDeposit;\\n    }\\n\\n    // ---------- Public methods\\n    function price() public view returns (uint256) {\\n        return weiPerByte * multiplier;\\n    }\\n\\n    function mint() public payable nonReentrant {\\n        require(msg.value >= weiPerByte, \\\"LSAN: Amount less than a single byte\\\");\\n        require(msg.value >= minimumDeposit, \\\"LSAN: Amount less than minimum deposit amount\\\");\\n\\n        uint lsanPrice = price();\\n\\n        uint mintAmount = msg.value / lsanPrice;\\n\\n        _mint(_msgSender(), mintAmount);\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function isPermitted(address _from, address _to) public view returns (bool) {\\n        if (blacklist[_to]) {\\n            return whitelist[_from][_to];\\n        }\\n        return true;\\n    }\\n\\n    // ---------- Override methods\\n    function transfer(address _to, uint256 _amount) public override onlyPermitted(_msgSender(), _to) returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, _to, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 amount\\n    ) public override onlyPermitted(_from, _to) returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(_from, spender, amount);\\n        _transfer(_from, _to, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/StreamRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// import 'streamr-contracts/packages/network-contracts/contracts/StreamRegistry/StreamRegistryV4.sol';\\n// https://github.com/streamr-dev/network-contracts/blob/master/packages/network-contracts/contracts/StreamRegistry/StreamRegistryV4.sol\\n\\ninterface IStreamRegistry {\\n    enum PermissionType {\\n        Edit,\\n        Delete,\\n        Publish,\\n        Subscribe,\\n        Grant\\n    }\\n\\n    function createStream(string calldata streamIdPath, string calldata metadataJsonString) external;\\n\\n    function grantPublicPermission(string calldata streamId, PermissionType permissionType) external;\\n\\n    function grantPermission(string calldata streamId, address user, PermissionType permissionType) external;\\n\\n    function revokePermission(string calldata streamId, address user, PermissionType permissionType) external;\\n\\n    function exists(string calldata streamId) external view returns (bool);\\n\\n    function deleteStream(string calldata streamId) external;\\n}\\n\"\r\n    },\r\n    \"src/lib/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {SignedMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(int256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toHexString(SignedMathUpgradeable.abs(value))));\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/VerifySignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/* Signature Verification\\n\\nHow to Sign and Verify\\n# Signing\\n1. Create message to sign\\n2. Hash the message\\n3. Sign the hash (off chain, keep your private key secret)\\n\\n# Verify\\n1. Recreate hash from the original message\\n2. Recover signer from signature and hash\\n3. Compare recovered signer to claimed signer\\n*/\\n\\nlibrary VerifySignature {\\n    function verify(address signer, bytes32 message, bytes memory signature) public pure returns (bool) {\\n        if (signature.length != 65) {\\n            return false;\\n        }\\n\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(message);\\n\\n        address recovered = ecrecover(ethSignedMessageHash, v, r, s);\\n\\n        return signer == recovered;\\n    }\\n\\n    function splitSignature(bytes memory sig) public pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/NodeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// Open Zeppelin libraries for controlling upgradability and access.\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IStreamRegistry} from \\\"./interfaces/StreamRegistry.sol\\\";\\nimport {StringsUpgradeable} from \\\"./lib/StringsUpgradeable.sol\\\";\\nimport {LogStoreManager} from \\\"./StoreManager.sol\\\";\\nimport {LogStoreQueryManager} from \\\"./QueryManager.sol\\\";\\nimport {LogStoreReportManager} from \\\"./ReportManager.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"./access/AccessControl.sol\\\";\\n\\ncontract LogStoreNodeManager is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    event NodeUpdated(address indexed nodeAddress, string metadata, bool indexed isNew, uint lastSeen);\\n    event NodeRemoved(address indexed nodeAddress);\\n    event StakeDelegateUpdated(\\n        address indexed delegate,\\n        address indexed node,\\n        uint amount,\\n        uint totalStake,\\n        uint totalDelegated,\\n        bool delegated\\n    );\\n    event NodeWhitelistApproved(address indexed nodeAddress);\\n    event NodeWhitelistRejected(address indexed nodeAddress);\\n    event RequiresWhitelistChanged(bool indexed value);\\n    event ReportProcessed(string id);\\n    event StreamAdded(string key, string path, string permissions, string streamId);\\n    event StreamRemoved(string key, string path, string permissions, string streamId);\\n\\n    enum WhitelistState {\\n        None,\\n        Approved,\\n        Rejected\\n    }\\n\\n    struct Node {\\n        uint index; // index of node address\\n        string metadata; // Connection metadata, for example wss://node-domain-name:port\\n        uint lastSeen; // what's the best way to store timestamps in smart contracts?\\n        address next;\\n        address prev;\\n        uint256 stake;\\n    }\\n    struct Stream {\\n        string key;\\n        string path;\\n        string metadata;\\n        uint index;\\n    }\\n\\n    modifier onlyWhitelist() {\\n        require(!requiresWhitelist || whitelist[msg.sender] == WhitelistState.Approved, \\\"error_notApproved\\\");\\n        _;\\n    }\\n    modifier onlyStaked() {\\n        require(isStaked(msg.sender), \\\"error_stakeRequired\\\");\\n        _;\\n    }\\n\\n    IERC20Upgradeable internal stakeToken;\\n    LogStoreManager private _storeManager;\\n    LogStoreQueryManager private _queryManager;\\n    LogStoreReportManager private _reportManager;\\n    IStreamRegistry private streamrRegistry;\\n    mapping(address => Node) public nodes;\\n    mapping(address => WhitelistState) public whitelist;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public delegatesOf;\\n    mapping(string => Stream) public streamInformation;\\n    bool public requiresWhitelist;\\n    uint256 public totalSupply;\\n    uint256 public treasurySupply;\\n    uint256 public stakeRequiredAmount;\\n    address public stakeTokenAddress;\\n    uint256 public totalNodes;\\n    uint256 public startBlockNumber; // A block number for when the Log Store process starts\\n    address public headNode;\\n    address public tailNode;\\n    // ? Streams managed within the NodeManager.sol Contract are Systems Streams used to coordinate gossip over the Network\\n    string[] public streams;\\n\\n    function initialize(\\n        address owner_,\\n        bool requiresWhitelist_,\\n        address stakeTokenAddress_,\\n        uint256 stakeRequiredAmount_,\\n        address streamrRegistryAddress_,\\n        address[] memory initialNodes,\\n        string[] calldata initialMetadata,\\n        string[3][] calldata initialStreams\\n    ) public initializer {\\n        require(initialNodes.length == initialMetadata.length, \\\"error_badTrackerData\\\");\\n        require(stakeTokenAddress_ != address(0) && stakeRequiredAmount_ > 0, \\\"error_badTrackerData\\\");\\n\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init(owner_);\\n\\n        requiresWhitelist = requiresWhitelist_;\\n        stakeToken = IERC20Upgradeable(stakeTokenAddress_);\\n        stakeTokenAddress = stakeTokenAddress_;\\n        stakeRequiredAmount = stakeRequiredAmount_;\\n        streamrRegistry = IStreamRegistry(streamrRegistryAddress_);\\n\\n        // register all the streams provided\\n        uint numOfStreamsProvided = initialStreams.length;\\n        for (uint i = 0; i < numOfStreamsProvided; i++) {\\n            _registerStream(initialStreams[i][0], initialStreams[i][1], initialStreams[i][2]);\\n        }\\n\\n        for (uint i = 0; i < initialNodes.length; i++) {\\n            upsertNodeAdmin(initialNodes[i], initialMetadata[i]);\\n        }\\n        transferOwnership(owner_);\\n    }\\n\\n    function createStream(\\n        string memory key,\\n        string memory path,\\n        string memory permissions\\n    ) public isAuthorized(Role.DEV) {\\n        _registerStream(key, path, permissions);\\n\\n        // register all qualified nodes with permission to use this stream\\n        address[] memory registeredNodeAddresses = nodeAddresses();\\n        string memory streamId = _generateStreamId(path);\\n\\n        uint nodeLength = registeredNodeAddresses.length;\\n        for (uint i = 0; i < nodeLength; i++) {\\n            address node = registeredNodeAddresses[i];\\n            if (nodes[node].stake >= stakeRequiredAmount) {\\n                streamrRegistry.grantPermission(streamId, node, IStreamRegistry.PermissionType.Publish);\\n            }\\n        }\\n    }\\n\\n    function deleteStream(string memory key) public isAuthorized(Role.DEV) {\\n        // get the stream ans the stream id\\n        Stream storage streamDetail = streamInformation[key];\\n        require(bytes(streamDetail.key).length > 0, \\\"STREAM_NOT_REGISTERED\\\");\\n        string memory streamId = _generateStreamId(streamDetail.path);\\n        emit StreamRemoved(streamDetail.key, streamDetail.path, streamDetail.metadata, streamId);\\n\\n        // remove the stream from the array and mapping\\n        uint streamToDeleteIndex = streamDetail.index;\\n        string memory lastStream = streams[streams.length - 1];\\n\\n        streamInformation[lastStream].index = streamToDeleteIndex;\\n        streams[streamToDeleteIndex] = lastStream; //replace the stream to delete with the last stream\\n\\n        streams.pop(); //delete the last stream from the array\\n        delete streamInformation[key]; //delete the stream information of the key to be deleted\\n\\n        // delete the stream\\n        streamrRegistry.deleteStream(streamId);\\n    }\\n\\n    function registerStoreManager(address contractAddress) public onlyOwner {\\n        _storeManager = LogStoreManager(contractAddress);\\n    }\\n\\n    function registerQueryManager(address contractAddress) public onlyOwner {\\n        _queryManager = LogStoreQueryManager(contractAddress);\\n    }\\n\\n    function registerReportManager(address contractAddress) public onlyOwner {\\n        _reportManager = LogStoreReportManager(contractAddress);\\n    }\\n\\n    function upsertNodeAdmin(address node, string calldata metadata_) public isAuthorized(Role.DEV) {\\n        _upsertNode(node, metadata_);\\n    }\\n\\n    function removeNodeAdmin(address nodeAddress) public isAuthorized(Role.DEV) {\\n        _removeNode(nodeAddress);\\n    }\\n\\n    function treasuryWithdraw(uint256 amount) public onlyOwner {\\n        require(amount <= treasurySupply, \\\"error_notEnoughStake\\\");\\n\\n        totalSupply -= amount;\\n        treasurySupply -= amount;\\n\\n        bool success = stakeToken.transfer(msg.sender, amount);\\n        require(success == true, \\\"error_unsuccessfulWithdraw\\\");\\n    }\\n\\n    function whitelistApproveNode(address nodeAddress) public isAuthorized(Role.DEV) {\\n        whitelist[nodeAddress] = WhitelistState.Approved;\\n        emit NodeWhitelistApproved(nodeAddress);\\n    }\\n\\n    function whitelistRejectNode(address nodeAddress) public isAuthorized(Role.DEV) {\\n        whitelist[nodeAddress] = WhitelistState.Rejected;\\n        emit NodeWhitelistRejected(nodeAddress);\\n    }\\n\\n    function kickNode(address nodeAddress) public isAuthorized(Role.DEV) {\\n        whitelistRejectNode(nodeAddress);\\n        removeNodeAdmin(nodeAddress);\\n    }\\n\\n    function setRequiresWhitelist(bool value) public onlyOwner {\\n        requiresWhitelist = value;\\n        emit RequiresWhitelistChanged(value);\\n    }\\n\\n    // recieve report data broken up into a series of arrays\\n    function processReport(string calldata id) public onlyStaked {\\n        LogStoreReportManager.Report memory report = _reportManager.getReport(id);\\n\\n        require(report._processed == false, \\\"error_reportAlreadyProcessed\\\");\\n\\n        for (uint256 i = 0; i < report.streams.length; i++) {\\n            if (report.streams[i].writeBytes > 0) {\\n                _storeManager.capture(\\n                    report.streams[i].id,\\n                    report.streams[i].writeCapture,\\n                    report.streams[i].writeBytes\\n                );\\n                totalSupply += report.streams[i].writeCapture;\\n            }\\n        }\\n        for (uint256 i = 0; i < report.consumers.length; i++) {\\n            if (report.consumers[i].readBytes > 0) {\\n                _queryManager.capture(\\n                    report.consumers[i].id,\\n                    report.consumers[i].readCapture,\\n                    report.consumers[i].readBytes\\n                );\\n                totalSupply += report.consumers[i].readCapture;\\n            }\\n        }\\n        for (uint256 i = 0; i < report.nodes.length; i++) {\\n            address reportNodeAddress = report.nodes[i].id;\\n            int256 reportNodeAmountChange = report.nodes[i].amount;\\n            int256 newNodeAmount = int(nodes[reportNodeAddress].stake) + reportNodeAmountChange;\\n            if (newNodeAmount > 0) {\\n                nodes[reportNodeAddress].stake = uint(newNodeAmount);\\n            } else {\\n                nodes[reportNodeAddress].stake = 0;\\n            }\\n            _checkAndGrantAccess(reportNodeAddress);\\n        }\\n        for (uint256 i = 0; i < report.delegates.length; i++) {\\n            address reportDelegateAddress = report.delegates[i].id;\\n            for (uint256 j = 0; j < report.delegates[i].nodes.length; j++) {\\n                address delegateNodeAddress = report.delegates[i].nodes[j].id;\\n                int256 delegateNodeChange = report.delegates[i].nodes[j].amount;\\n\\n                int256 newDelegateAmount = int(delegatesOf[reportDelegateAddress][delegateNodeAddress]) +\\n                    delegateNodeChange;\\n                if (newDelegateAmount > 0) {\\n                    delegatesOf[reportDelegateAddress][delegateNodeAddress] = uint(newDelegateAmount);\\n                } else {\\n                    delegatesOf[reportDelegateAddress][delegateNodeAddress] = 0;\\n                }\\n            }\\n        }\\n        int256 newTreasurySupply = int(treasurySupply) + report.treasury;\\n        if (newTreasurySupply > 0) {\\n            treasurySupply = uint(newTreasurySupply);\\n        } else {\\n            treasurySupply = 0;\\n        }\\n\\n        _reportManager.processReport(id);\\n        emit ReportProcessed(id);\\n    }\\n\\n    // Nodes can join the network, but they will not earn rewards or participate unless they're staked.\\n    function upsertNode(string calldata metadata_) public onlyWhitelist {\\n        _upsertNode(msg.sender, metadata_);\\n    }\\n\\n    function removeNode() public {\\n        _removeNode(msg.sender);\\n    }\\n\\n    function join(uint amount, string calldata metadata_) public {\\n        upsertNode(metadata_);\\n        stake(amount);\\n        delegate(amount, msg.sender);\\n    }\\n\\n    function leave() public {\\n        undelegate(delegatesOf[msg.sender][msg.sender], msg.sender);\\n        withdraw(balanceOf[msg.sender]);\\n        removeNode();\\n    }\\n\\n    function stake(uint amount) public nonReentrant {\\n        require(amount > 0, \\\"error_insufficientStake\\\");\\n        require(stakeToken.balanceOf(msg.sender) >= amount, \\\"error_insufficientBalance\\\");\\n\\n        balanceOf[msg.sender] += amount;\\n        totalSupply += amount;\\n\\n        bool success = stakeToken.transferFrom(msg.sender, address(this), amount);\\n        require(success == true, \\\"error_unsuccessfulStake\\\");\\n    }\\n\\n    function delegate(uint amount, address node) public {\\n        require(amount > 0, \\\"error_insufficientDelegateAmount\\\");\\n        require(nodes[node].lastSeen > 0, \\\"error_invalidNode\\\");\\n\\n        balanceOf[msg.sender] -= amount;\\n        delegatesOf[msg.sender][node] += amount;\\n        nodes[node].stake += amount;\\n\\n        _checkAndGrantAccess(node);\\n\\n        emit StakeDelegateUpdated(msg.sender, node, amount, nodes[node].stake, delegatesOf[msg.sender][node], true);\\n    }\\n\\n    function undelegate(uint amount, address node) public {\\n        require(amount > 0, \\\"error_insufficientDelegateAmount\\\");\\n        require(nodes[node].lastSeen > 0, \\\"error_invalidNode\\\");\\n\\n        delegatesOf[msg.sender][node] -= amount;\\n        nodes[node].stake -= amount;\\n        balanceOf[msg.sender] += amount;\\n\\n        _checkAndGrantAccess(node);\\n\\n        emit StakeDelegateUpdated(msg.sender, node, amount, nodes[node].stake, delegatesOf[msg.sender][node], false);\\n    }\\n\\n    function stakeAndDelegate(uint amount, address node) public {\\n        stake(amount);\\n        delegate(amount, node);\\n    }\\n\\n    function withdraw(uint amount) public {\\n        require(amount <= balanceOf[msg.sender], \\\"error_notEnoughStake\\\");\\n\\n        balanceOf[msg.sender] -= amount;\\n        totalSupply -= amount;\\n\\n        bool success = stakeToken.transfer(msg.sender, amount);\\n        require(success == true, \\\"error_unsuccessfulWithdraw\\\");\\n    }\\n\\n    function undelegateWithdraw(uint amount, address node) public {\\n        undelegate(amount, node);\\n        withdraw(amount);\\n    }\\n\\n    function nodeAddresses() public view returns (address[] memory resultAddresses) {\\n        resultAddresses = new address[](totalNodes);\\n\\n        if (headNode == address(0)) {\\n            return resultAddresses;\\n        }\\n\\n        address tailAddress = headNode;\\n        uint256 index = 0;\\n        do {\\n            resultAddresses[index] = tailAddress;\\n\\n            tailAddress = nodes[tailAddress].next;\\n            index++;\\n        } while (tailAddress != address(0));\\n\\n        return resultAddresses;\\n    }\\n\\n    function nodeStake(address node) public view returns (uint256) {\\n        return nodes[node].stake;\\n    }\\n\\n    function isStaked(address node) public view returns (bool) {\\n        return stakeRequiredAmount > 0 && nodes[node].stake >= stakeRequiredAmount;\\n    }\\n\\n    function streamExists(string calldata streamId) public view returns (bool) {\\n        return streamrRegistry.exists(streamId);\\n    }\\n\\n    function getAllStreams() public view returns (string[] memory) {\\n        return streams;\\n    }\\n\\n    function _upsertNode(address nodeAddress, string calldata metadata_) internal {\\n        Node storage foundNode = nodes[nodeAddress];\\n        bool isNew = false;\\n\\n        if (foundNode.lastSeen == 0) {\\n            isNew = true;\\n            if (headNode == address(0)) {\\n                headNode = nodeAddress;\\n                startBlockNumber = block.number;\\n            } else {\\n                nodes[tailNode].next = nodeAddress;\\n                foundNode.prev = tailNode;\\n                foundNode.index = totalNodes;\\n            }\\n            tailNode = nodeAddress;\\n            totalNodes += 1;\\n        }\\n\\n        // update this fields for create or update operations\\n        foundNode.metadata = metadata_;\\n        foundNode.lastSeen = block.timestamp;\\n\\n        emit NodeUpdated(nodeAddress, foundNode.metadata, isNew, foundNode.lastSeen);\\n    }\\n\\n    function _removeNode(address nodeAddress) internal {\\n        Node storage removedNode = nodes[nodeAddress];\\n        require(removedNode.lastSeen != 0, \\\"error_notFound\\\");\\n\\n        if (removedNode.prev != address(0)) {\\n            nodes[removedNode.prev].next = removedNode.next;\\n        }\\n        if (removedNode.next != address(0)) {\\n            nodes[removedNode.next].prev = removedNode.prev;\\n        }\\n        if (headNode == nodeAddress) {\\n            headNode = removedNode.next;\\n        }\\n        if (tailNode == nodeAddress) {\\n            tailNode = removedNode.prev;\\n        }\\n\\n        // Delete before loop as to no conflict\\n        delete nodes[nodeAddress];\\n\\n        totalNodes -= 1;\\n\\n        // Go through all the nodes after the removed one\\n        // and reduce the index value to account for a deduction\\n        address nextNodeAddress = removedNode.next;\\n        while (nextNodeAddress != address(0)) {\\n            nodes[nextNodeAddress].index--;\\n            nextNodeAddress = nodes[nextNodeAddress].next;\\n        }\\n\\n        // Reset startBlockNumber if all nodes are removed.\\n        if (headNode == address(0)) {\\n            startBlockNumber = 0;\\n        }\\n\\n        emit NodeRemoved(nodeAddress);\\n    }\\n\\n    function _checkAndGrantAccess(address node) internal {\\n        uint streamNum = streams.length;\\n        for (uint i = 0; i < streamNum; i++) {\\n            string memory streamId = _generateStreamId(streamInformation[streams[i]].path);\\n            if (nodes[node].stake >= stakeRequiredAmount) {\\n                streamrRegistry.grantPermission(streamId, node, IStreamRegistry.PermissionType.Publish);\\n            } else {\\n                streamrRegistry.revokePermission(streamId, node, IStreamRegistry.PermissionType.Publish);\\n            }\\n        }\\n    }\\n\\n    function _registerStream(string memory key, string memory path, string memory permissions) internal {\\n        // get the stream ans the stream id\\n        Stream storage streamDetails = streamInformation[key];\\n        require(bytes(streamDetails.key).length == 0, \\\"STREAM_ALREADY_REGISTERED\\\");\\n\\n        // create the stream\\n        streamrRegistry.createStream(path, permissions);\\n        string memory streamId = _generateStreamId(path);\\n        streamrRegistry.grantPublicPermission(streamId, IStreamRegistry.PermissionType.Subscribe);\\n\\n        // register the stream into the smart contracts\\n        streams.push(key);\\n        streamInformation[key] = Stream({path: path, metadata: permissions, key: key, index: streams.length - 1});\\n        emit StreamAdded(key, path, permissions, streamId);\\n    }\\n\\n    function _generateStreamId(string memory streamPath) public view returns (string memory) {\\n        return string(abi.encodePacked(StringsUpgradeable.toHexString(address(this)), streamPath));\\n    }\\n\\n    /// @dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\"\r\n    },\r\n    \"src/QueryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// Open Zeppelin libraries for controlling upgradability and access.\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n// Owned by the NodeManager Contract\\ncontract LogStoreQueryManager is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    event DataQueried(address indexed consumer, uint256 fees, uint256 bytesProcessed);\\n    event Stake(address indexed consumer, uint amount);\\n    event CaptureOverflow(address consumer, uint stake, uint capture, uint overflow);\\n    event SupplyOverflow(uint supply, uint capture, uint overflow);\\n\\n    modifier onlyParent() {\\n        require(_msgSender() == parent, \\\"error_onlyParent\\\");\\n        _;\\n    }\\n\\n    uint256 public totalSupply;\\n    address public stakeTokenAddress;\\n    mapping(address => uint256) public balanceOf; // map of addresses and their total balanace\\n    IERC20Upgradeable internal stakeToken;\\n    address internal parent;\\n\\n    function initialize(address owner_, address parent_, address stakeTokenAddress_) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        require(stakeTokenAddress_ != address(0), \\\"error_badTrackerData\\\");\\n        stakeToken = IERC20Upgradeable(stakeTokenAddress_);\\n        stakeTokenAddress = stakeTokenAddress_;\\n        setParent(parent_);\\n        transferOwnership(owner_);\\n    }\\n\\n    /// @dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function setParent(address _parent) public onlyOwner {\\n        parent = _parent;\\n    }\\n\\n    /// Capture funds for a given query\\n    /// Only the LogStore Contract can call the capture method\\n    /// @param amount amount of tokens to capture\\n    /// @param consumer address of the data consumer\\n    /// @param bytesProcessed number of bytes in the response\\n    function capture(address consumer, uint256 amount, uint256 bytesProcessed) public nonReentrant onlyParent {\\n        require(balanceOf[consumer] > 0, \\\"error_invalidConsumerAddress\\\");\\n\\n        uint256 amountToTransfer = amount;\\n        if (balanceOf[consumer] < amount) {\\n            emit CaptureOverflow(consumer, balanceOf[consumer], amount, amount - balanceOf[consumer]);\\n            amountToTransfer = balanceOf[consumer];\\n            balanceOf[consumer] = 0;\\n        } else {\\n            balanceOf[consumer] -= amount;\\n        }\\n        if (totalSupply < amount) {\\n            emit SupplyOverflow(totalSupply, amount, amount - totalSupply);\\n            totalSupply = 0;\\n        } else {\\n            totalSupply -= amount;\\n        }\\n\\n        require(amountToTransfer <= stakeToken.balanceOf(address(this)), \\\"error_insufficientStake\\\");\\n\\n        bool success = stakeToken.transfer(msg.sender, amountToTransfer);\\n        require(success == true, \\\"error_unsuccessfulCapture\\\");\\n\\n        emit DataQueried(consumer, amount, bytesProcessed);\\n    }\\n\\n    function stake(uint amount) public nonReentrant {\\n        require(amount > 0, \\\"error_insufficientStake\\\");\\n\\n        balanceOf[msg.sender] += amount;\\n        totalSupply += amount;\\n\\n        bool success = stakeToken.transferFrom(msg.sender, address(this), amount);\\n        require(success == true, \\\"error_unsuccessfulStake\\\");\\n        emit Stake(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ReportManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// Open Zeppelin libraries for controlling upgradability and access.\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {LogStoreNodeManager} from \\\"./NodeManager.sol\\\";\\nimport {VerifySignature} from \\\"./lib/VerifySignature.sol\\\";\\nimport {StringsUpgradeable} from \\\"./lib/StringsUpgradeable.sol\\\";\\n\\ncontract LogStoreReportManager is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    uint256 public constant MATH_PRECISION = 10 ** 10;\\n\\n    event ReportAccepted(string id);\\n\\n    struct Consumer {\\n        address id;\\n        uint256 readCapture;\\n        uint256 readBytes;\\n    }\\n\\n    struct Stream {\\n        string id;\\n        uint256 writeCapture;\\n        uint256 writeBytes;\\n    }\\n\\n    struct Node {\\n        address id;\\n        int256 amount;\\n    }\\n\\n    struct Delegate {\\n        address id;\\n        Node[] nodes;\\n    }\\n\\n    struct Report {\\n        string id; // key inside of bundle\\n        uint256 height;\\n        int256 treasury;\\n        Stream[] streams;\\n        Node[] nodes;\\n        Delegate[] delegates;\\n        Consumer[] consumers;\\n        address _reporter;\\n        bool _processed;\\n    }\\n\\n    struct Proof {\\n        address signer;\\n        bytes signature;\\n        uint256 timestamp;\\n    }\\n\\n    modifier onlyStaked() {\\n        require(_nodeManager.isStaked(_msgSender()), \\\"error_stakeRequired\\\");\\n        _;\\n    }\\n\\n    modifier onlyParent() {\\n        require(_msgSender() == parent, \\\"error_onlyParent\\\");\\n        _;\\n    }\\n\\n    uint256 public reportTimeBuffer;\\n    mapping(address => uint256) public reputationOf;\\n    string internal lastReportId;\\n    mapping(string => Report) internal reports;\\n    mapping(string => Proof[]) internal reportProofs;\\n    LogStoreNodeManager private _nodeManager;\\n    address internal parent;\\n\\n    // used for unit testing time-dependent code\\n    // block.timestamp is a miner-dependent variable that progresses over time. accuracy of time isn't. simply it's guarantee of increment for each block.\\n    uint256 private _test_block_timestamp;\\n\\n    function initialize(\\n        address owner_,\\n        address parent_,\\n        uint256 reportTimeBuffer_,\\n        uint256 __test_block_timestamp\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        reportTimeBuffer = reportTimeBuffer_ * MATH_PRECISION;\\n        _test_block_timestamp = __test_block_timestamp * 1000 * MATH_PRECISION;\\n\\n        setParent(parent_);\\n        transferOwnership(owner_);\\n    }\\n\\n    /// @dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function setParent(address _parent) public onlyOwner {\\n        parent = _parent;\\n        _nodeManager = LogStoreNodeManager(_parent);\\n    }\\n\\n    function setReportTimeBuffer(uint256 _reportTimeBuffer) public onlyOwner {\\n        reportTimeBuffer = _reportTimeBuffer * MATH_PRECISION;\\n    }\\n\\n    function getReport(string calldata id) public view returns (Report memory) {\\n        return reports[id];\\n    }\\n\\n    function getLastReport() public view returns (Report memory) {\\n        return reports[lastReportId];\\n    }\\n\\n    function getProofOfReport(string calldata id) public view returns (Proof[] memory) {\\n        return reportProofs[id];\\n    }\\n\\n    /**\\n     * This method will return the same array every time unless reputations are changed after a successfully accepted report.\\n     * use bubble sort to sort the node addresses\\n     */\\n    function getReporters() public view returns (address[] memory reporters) {\\n        reporters = _nodeManager.nodeAddresses();\\n        uint256 reportersCount = reporters.length;\\n\\n        for (uint256 i = 0; i < reportersCount - 1; i++) {\\n            for (uint256 j = 0; j < reportersCount - i - 1; j++) {\\n                if (reputationOf[reporters[j + 1]] > reputationOf[reporters[j]]) {\\n                    (reporters[j], reporters[j + 1]) = (reporters[j + 1], reporters[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function processReport(string calldata id) public onlyParent {\\n        reports[id]._processed = true;\\n    }\\n\\n    // Verifies a report and adds it to its accepted reports mapping\\n    function report(\\n        string calldata id,\\n        uint256 blockHeight,\\n        string[] calldata streams,\\n        uint256[] calldata writeCaptureAmounts,\\n        uint256[] calldata writeBytes,\\n        address[] calldata readConsumerAddresses,\\n        uint256[] calldata readCaptureAmounts,\\n        uint256[] calldata readBytes,\\n        address[] calldata nodes,\\n        int256[] calldata nodeChanges,\\n        address[] calldata delegates,\\n        address[][] calldata delegateNodes,\\n        int256[][] calldata delegateNodeChanges,\\n        int256 treasurySupplyChange,\\n        // Arrays of addresses, proofTimestamps, and signatures for verification of reporter & report data\\n        address[] calldata addresses,\\n        uint256[] calldata proofTimestamps,\\n        bytes[] calldata signatures\\n    ) public onlyStaked {\\n        require(reports[id]._processed == false, \\\"error_reportAlreadyProcessed\\\");\\n        require(blockHeight <= block.number && blockHeight > reports[lastReportId].height, \\\"error_invalidReport\\\");\\n        require(\\n            addresses.length * 3 == addresses.length + proofTimestamps.length + signatures.length,\\n            \\\"error_invalidProofs\\\"\\n        );\\n\\n        address[] memory orderedReportersList = getReporters();\\n\\n        // validate that enough members are paritipating to proceed\\n        require(quorumIsMet(addresses, orderedReportersList), \\\"error_quorumNotMet\\\");\\n\\n        // validate that the current reporter can submit the report based on the current block.timestamp and quorum proofTimestamps\\n        require(_canReport(_msgSender(), orderedReportersList, proofTimestamps), \\\"error_invalidReporter\\\");\\n\\n        // produce the pack based on parameters to use in consensus\\n        bytes memory pack;\\n        Stream[] memory rStreams = new Stream[](streams.length);\\n        for (uint256 i = 0; i < streams.length; i++) {\\n            pack = abi.encodePacked(\\n                pack,\\n                streams[i],\\n                StringsUpgradeable.toHexString(writeCaptureAmounts[i]),\\n                writeBytes[i]\\n            );\\n            rStreams[i] = Stream({id: streams[i], writeCapture: writeCaptureAmounts[i], writeBytes: writeBytes[i]});\\n        }\\n\\n        Consumer[] memory rConsumers = new Consumer[](readConsumerAddresses.length);\\n        for (uint256 i = 0; i < readConsumerAddresses.length; i++) {\\n            pack = abi.encodePacked(\\n                pack,\\n                readConsumerAddresses[i],\\n                StringsUpgradeable.toHexString(readCaptureAmounts[i]),\\n                readBytes[i]\\n            );\\n            rConsumers[i] = Consumer({\\n                id: readConsumerAddresses[i],\\n                readCapture: readCaptureAmounts[i],\\n                readBytes: readBytes[i]\\n            });\\n        }\\n\\n        Node[] memory rNodes = new Node[](nodes.length);\\n        for (uint256 i = 0; i < nodes.length; i++) {\\n            pack = abi.encodePacked(pack, nodes[i], StringsUpgradeable.toHexString(nodeChanges[i]));\\n            rNodes[i] = Node({id: nodes[i], amount: nodeChanges[i]});\\n        }\\n\\n        Delegate[] memory rDelegates = new Delegate[](delegates.length);\\n        for (uint256 i = 0; i < delegates.length; i++) {\\n            bytes memory dPack;\\n\\n            Node[] memory rDelegateNodes = new Node[](delegateNodes[i].length);\\n            for (uint256 j = 0; j < delegateNodes[i].length; j++) {\\n                dPack = abi.encodePacked(\\n                    dPack,\\n                    delegateNodes[i][j],\\n                    StringsUpgradeable.toHexString(delegateNodeChanges[i][j])\\n                );\\n\\n                rDelegateNodes[j] = Node({id: delegateNodes[i][j], amount: delegateNodeChanges[i][j]});\\n            }\\n            pack = abi.encodePacked(pack, delegates[i], dPack);\\n\\n            rDelegates[i] = Delegate({id: delegates[i], nodes: rDelegateNodes});\\n        }\\n\\n        // Verify signatures, ordered by the reporter list and then adjust reputations\\n        // Start by ensuring all proofs provided belong to valid reporters.\\n        reportProofs[id] = new Proof[](0); // ordered by reporter list\\n        bool leadReporterReputationAdjusted = false;\\n        uint256 consensusCount;\\n        uint256 minConsensusCount = (orderedReportersList.length * MATH_PRECISION) / 2;\\n\\n        for (uint256 i = 0; i < orderedReportersList.length; i++) {\\n            Proof memory proof; // The proof of the reporter\\n            for (uint256 j = 0; j < addresses.length; j++) {\\n                // Validate that the proof provided belongs to an address that's actually inside of the reporter list\\n                if (orderedReportersList[i] == addresses[j]) {\\n                    proof.signer = addresses[j];\\n                    proof.signature = signatures[j];\\n                    proof.timestamp = proofTimestamps[j];\\n                }\\n            }\\n\\n            bytes32 timeBasedOneTimeHash = keccak256(\\n                abi.encodePacked(\\n                    id,\\n                    blockHeight,\\n                    pack,\\n                    StringsUpgradeable.toHexString(treasurySupplyChange),\\n                    proof.timestamp\\n                )\\n            );\\n            bool verified = VerifySignature.verify(proof.signer, timeBasedOneTimeHash, proof.signature);\\n            if (verified == true) {\\n                reportProofs[id].push(proof);\\n\\n                consensusCount += 1 * MATH_PRECISION;\\n\\n                // Increase rep of reporter if they're the sender\\n                // Otherwise, if this report was produced by a reporter that is NOT in the lead, decrease their reputation\\n                // Finally, if they're participating and NOT in the lead, minor increase rep of reporter\\n                if (_msgSender() == proof.signer) {\\n                    reputationOf[_msgSender()] += 10;\\n                    leadReporterReputationAdjusted = true;\\n                } else if (leadReporterReputationAdjusted == false) {\\n                    reputationOf[proof.signer] -= reputationOf[proof.signer] >= 5 ? 5 : reputationOf[proof.signer];\\n                } else {\\n                    reputationOf[proof.signer] += 1;\\n                }\\n            } else {\\n                // Bad proofs reset reputation to 0\\n                reputationOf[addresses[i]] = 0;\\n            }\\n        }\\n\\n        require(consensusCount >= minConsensusCount, \\\"error_consensusNotMet\\\");\\n\\n        // once consensus is reached among reporters, accept the report\\n        Report memory currentReport = Report({\\n            id: id,\\n            height: blockHeight,\\n            treasury: treasurySupplyChange,\\n            streams: rStreams,\\n            nodes: rNodes,\\n            delegates: rDelegates,\\n            consumers: rConsumers,\\n            _reporter: _msgSender(),\\n            _processed: false\\n        });\\n\\n        reports[currentReport.id] = currentReport;\\n        lastReportId = currentReport.id;\\n\\n        emit ReportAccepted(currentReport.id);\\n    }\\n\\n    /**\\n     * Check to ensure that the addresses signing off on the report are >= minimum required nodes - ie. >= 50% of nodes\\n     */\\n    function quorumIsMet(\\n        address[] memory participants,\\n        address[] memory totalMembers\\n    ) public pure returns (bool isMet) {\\n        uint256 count;\\n        uint256 minCount = (totalMembers.length * MATH_PRECISION) / 2;\\n\\n        for (uint256 i = 0; i < totalMembers.length; i++) {\\n            for (uint256 j = 0; j < participants.length; j++) {\\n                if (totalMembers[i] == participants[j]) {\\n                    count += 1 * MATH_PRECISION;\\n                    break;\\n                }\\n            }\\n            if (count >= minCount) {\\n                isMet = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function canReport(uint256[] memory timestamps) public view returns (bool) {\\n        address[] memory reporterList = getReporters();\\n        return _canReport(_msgSender(), reporterList, timestamps);\\n    }\\n\\n    /**\\n     * Accepts an array of timestamps and evaluates the mean timestamp with precision\\n     */\\n    function aggregateTimestamps(uint256[] memory timestamps) public pure returns (uint256) {\\n        uint256 sum;\\n        for (uint256 i = 0; i < timestamps.length; i++) {\\n            sum += timestamps[i] * MATH_PRECISION;\\n        }\\n        uint256 mean = sum / timestamps.length;\\n        return mean;\\n    }\\n\\n    function blockTimestamp() public view returns (uint256) {\\n        if (_test_block_timestamp > 0) {\\n            return _test_block_timestamp;\\n        }\\n        return block.timestamp * 1000 * MATH_PRECISION;\\n    }\\n\\n    function _canReport(\\n        address reporter,\\n        address[] memory reporterList,\\n        uint256[] memory timestamps\\n    ) internal view returns (bool validReporter) {\\n        // Use all timestamps - as the more consistent the mean is as an anchor, the better.\\n        // Validators will subscibe to ProofOfReports to slash brokers that are working against the interests of the network.\\n        uint256 meanProofTimestamp = aggregateTimestamps(timestamps);\\n        uint256 preciseBlockTs = blockTimestamp();\\n        uint256 cycleTime = reportTimeBuffer * reporterList.length;\\n        uint256 cycle = 0; // first cycle\\n        while (preciseBlockTs >= ((cycle + 1) * cycleTime) + meanProofTimestamp) {\\n            // Is the current blockTs greater then the time of a full?\\n            // Set the current cycle based on this condition\\n            cycle += 1;\\n        }\\n        uint256 fromTime = (cycle * cycleTime) + meanProofTimestamp;\\n\\n        for (uint256 i = 0; i < reporterList.length; i++) {\\n            if (reporterList[i] == reporter) {\\n                uint256 start = (i * reportTimeBuffer) + fromTime;\\n                uint256 end = ((i + 1) * reportTimeBuffer) + fromTime;\\n\\n                validReporter = preciseBlockTs >= start && preciseBlockTs < end;\\n                break;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/StoreManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// Open Zeppelin libraries for controlling upgradability and access.\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IStreamRegistry} from \\\"./interfaces/StreamRegistry.sol\\\";\\nimport {StringsUpgradeable} from \\\"./lib/StringsUpgradeable.sol\\\";\\n\\n// Owned by the NodeManager Contract\\ncontract LogStoreManager is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    event StoreUpdated(string store, bool isNew, uint256 amount);\\n    event DataStored(string store, uint256 fees, uint256 bytesStored);\\n    event CaptureOverflow(string store, uint stake, uint capture, uint overflow);\\n    event SupplyOverflow(uint supply, uint capture, uint overflow);\\n\\n    modifier onlyParent() {\\n        require(_msgSender() == parent, \\\"error_onlyParent\\\");\\n        _;\\n    }\\n\\n    uint256 public totalSupply;\\n    address public stakeTokenAddress;\\n    mapping(string => uint256) public stores; // map of stores and their total balance\\n    mapping(string => address[]) public storeStakeholders; // map of stores and their stakeholders.\\n    mapping(address => uint256) public balanceOf; // map of addresses and their total balanace\\n    mapping(address => mapping(string => uint256)) public storeBalanceOf; // map of addresses and the stores they're staked in\\n    IERC20Upgradeable internal stakeToken;\\n    IStreamRegistry internal streamrRegistry;\\n    address internal parent;\\n\\n    function initialize(\\n        address owner_,\\n        address parent_,\\n        address stakeTokenAddress_,\\n        address streamrRegistryAddress_\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        require(stakeTokenAddress_ != address(0), \\\"error_badTrackerData\\\");\\n        streamrRegistry = IStreamRegistry(streamrRegistryAddress_);\\n        stakeToken = IERC20Upgradeable(stakeTokenAddress_);\\n        stakeTokenAddress = stakeTokenAddress_;\\n\\n        setParent(parent_);\\n        transferOwnership(owner_);\\n    }\\n\\n    /// @dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function setParent(address _parent) public onlyOwner {\\n        parent = _parent;\\n    }\\n\\n    function exists(string calldata streamId) public view returns (bool) {\\n        return stores[streamId] > 0;\\n    }\\n\\n    // Only the LogStore Contract can call the capture method\\n    function capture(string memory streamId, uint256 amount, uint256 bytesStored) public nonReentrant onlyParent {\\n        require(stores[streamId] > 0, \\\"error_invalidStreamId\\\");\\n\\n        // Prevent overflow errors On-Chain\\n        // An overflow is where more data was processed than what has been staked for the relevant stream/store\\n        // Validators to index and manage any overflows.\\n        uint256 amountToTransfer = amount;\\n        if (stores[streamId] < amount) {\\n            emit CaptureOverflow(streamId, stores[streamId], amount, amount - stores[streamId]);\\n            amountToTransfer = stores[streamId];\\n\\n            // Reset all stakeholders balances relative to the stream to 0\\n            address[] memory stakeholders = storeStakeholders[streamId];\\n            for (uint256 i = 0; i < stakeholders.length; i++) {\\n                address stakeholder = stakeholders[i];\\n                // Remove stake is stream from stakeholder balance, otherwise reset to 0 if balances are off.\\n                if (balanceOf[stakeholder] < storeBalanceOf[stakeholder][streamId]) {\\n                    balanceOf[stakeholder] = 0;\\n                } else {\\n                    balanceOf[stakeholder] -= storeBalanceOf[stakeholder][streamId];\\n                }\\n                storeBalanceOf[stakeholder][streamId] = 0;\\n            }\\n            // Remove all stakeholders from the stream since it's stake has been set to 0\\n            storeStakeholders[streamId] = new address[](0);\\n\\n            // Set stake of stream to 0\\n            stores[streamId] = 0;\\n        } else {\\n            address[] memory stakeholders = storeStakeholders[streamId];\\n            // Determine the fee amounts proportional to each stakeholder stake amount\\n            for (uint256 i = 0; i < stakeholders.length; i++) {\\n                address stakeholder = stakeholders[i];\\n                uint256 stakeOwnership = storeBalanceOf[stakeholder][streamId] / stores[streamId];\\n                uint256 deduction = stakeOwnership * amount;\\n                if (balanceOf[stakeholder] < deduction) {\\n                    balanceOf[stakeholder] = 0;\\n                } else {\\n                    balanceOf[stakeholder] -= deduction;\\n                }\\n                if (storeBalanceOf[stakeholder][streamId] < deduction) {\\n                    storeBalanceOf[stakeholder][streamId] = 0;\\n                } else {\\n                    storeBalanceOf[stakeholder][streamId] -= deduction;\\n                }\\n                // if stake of a user is finished then remove from the list of delegates\\n                if (storeBalanceOf[stakeholder][streamId] == 0) {\\n                    storeStakeholders[streamId] = new address[](0);\\n                    for (uint256 j = 0; j < stakeholders.length; j++) {\\n                        if (stakeholders[j] != stakeholder) {\\n                            storeStakeholders[streamId].push(stakeholder);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            stores[streamId] -= amount;\\n        }\\n\\n        if (totalSupply < amount) {\\n            emit SupplyOverflow(totalSupply, amount, amount - totalSupply);\\n            totalSupply = 0;\\n        } else {\\n            totalSupply -= amount;\\n        }\\n\\n        require(amountToTransfer <= stakeToken.balanceOf(address(this)), \\\"error_insufficientStake\\\");\\n\\n        bool transferSuccess = stakeToken.transfer(msg.sender, amountToTransfer);\\n        require(transferSuccess == true, \\\"error_unsuccessfulCapture\\\");\\n\\n        emit DataStored(streamId, amount, bytesStored);\\n    }\\n\\n    function stake(string memory streamId, uint amount) public {\\n        // Validate stream is inside of StreamrRegiststry\\n        require(streamrRegistry.exists(streamId), \\\"error_invalidStream\\\");\\n        require(amount > 0, \\\"error_insufficientStake\\\");\\n\\n        bool success = stakeToken.transferFrom(msg.sender, address(this), amount);\\n        require(success == true, \\\"error_unsuccessfulStake\\\");\\n\\n        bool isNew = false;\\n        if (stores[streamId] == 0) {\\n            isNew = true;\\n        }\\n        stores[streamId] += amount;\\n        balanceOf[msg.sender] += amount;\\n        if (storeBalanceOf[msg.sender][streamId] == 0) {\\n            storeStakeholders[streamId].push(msg.sender);\\n        }\\n        storeBalanceOf[msg.sender][streamId] += amount;\\n        totalSupply += amount;\\n        emit StoreUpdated(streamId, isNew, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"src/lib/VerifySignature.sol\": {\r\n        \"VerifySignature\": \"0xbd770416a3345f91e4b34576cb804a576fa48eb1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MATH_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"name\":\"aggregateTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"name\":\"canReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReport\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"treasury\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"writeCapture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"writeBytes\",\"type\":\"uint256\"}],\"internalType\":\"struct LogStoreReportManager.Stream[]\",\"name\":\"streams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct LogStoreReportManager.Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct LogStoreReportManager.Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LogStoreReportManager.Delegate[]\",\"name\":\"delegates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"readCapture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"readBytes\",\"type\":\"uint256\"}],\"internalType\":\"struct LogStoreReportManager.Consumer[]\",\"name\":\"consumers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_processed\",\"type\":\"bool\"}],\"internalType\":\"struct LogStoreReportManager.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getProofOfReport\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LogStoreReportManager.Proof[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getReport\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"treasury\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"writeCapture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"writeBytes\",\"type\":\"uint256\"}],\"internalType\":\"struct LogStoreReportManager.Stream[]\",\"name\":\"streams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct LogStoreReportManager.Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct LogStoreReportManager.Node[]\",\"name\":\"nodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LogStoreReportManager.Delegate[]\",\"name\":\"delegates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"readCapture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"readBytes\",\"type\":\"uint256\"}],\"internalType\":\"struct LogStoreReportManager.Consumer[]\",\"name\":\"consumers\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_processed\",\"type\":\"bool\"}],\"internalType\":\"struct LogStoreReportManager.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReporters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"reporters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parent_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reportTimeBuffer_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__test_block_timestamp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"processReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"totalMembers\",\"type\":\"address[]\"}],\"name\":\"quorumIsMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMet\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"streams\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"writeCaptureAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"writeBytes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"readConsumerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"readCaptureAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"readBytes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"nodes\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"nodeChanges\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"delegates\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"delegateNodes\",\"type\":\"address[][]\"},{\"internalType\":\"int256[][]\",\"name\":\"delegateNodeChanges\",\"type\":\"int256[][]\"},{\"internalType\":\"int256\",\"name\":\"treasurySupplyChange\",\"type\":\"int256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proofTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportTimeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"setParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportTimeBuffer\",\"type\":\"uint256\"}],\"name\":\"setReportTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "LogStoreReportManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}