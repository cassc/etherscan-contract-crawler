{"SourceCode": "// Forge Rewards Contract\r\n// Recieves 25% or 10,500,000 Forge Tokens from the ForgeMining Contract over 100+ years.\r\n// Also recieve 33% of the 0xBitcoin Tokens from the ForgeMining Contract over forever.\r\n\r\n\r\n// What we are staking:  Forge/0xBitcoin Liquidity Pool Tokens\r\n//What is it?  It is the pool traders use to buy and sell the coin\r\n//The larger the pool, the larger the order the token can handle\r\n\r\n//\r\n//Rewards: Forge, 0xBitcoin, and Polygon currently.\r\n// Funds gathered will be dispered over 21 days. 7 Day reward period for 40%.\r\n//Room to Expand to three other cryptocurrencies(Only admin function in all three contracts is to add up to three more cryptocurrencies!)\r\n\r\npragma solidity ^0.8.11;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n \r\ncontract Ownable2 {\r\n    address public owner;\r\n    address [] public moderators;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    modifier OnlyModerators() {\r\n    bool isModerator = false;\r\n    for(uint x=0; x< moderators.length; x++){\r\n    \tif(moderators[x] == msg.sender){\r\n\t\tisModerator = true;\r\n\t\t}\r\n\t\t}\r\n        require(msg.sender == owner || isModerator, \"Ownable: caller is not the owner/mod\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n\r\n    function Z_addMod(address newModerator, uint spot) public onlyOwner {\r\n    if(spot >= moderators.length){\r\n    \tmoderators.push(newModerator);\r\n\t}else{\r\n\tmoderators[spot] = newModerator;\r\n\t}\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function Z_transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StakedTokenWrapper {\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    IERC20 public stakedToken;\r\n    \r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    string constant _transferErrorMessage = \"staked token transfer failed\";\r\n    \r\n    function stakeFor(address forWhom, uint256 amount) public payable virtual {\r\n        IERC20 st = stakedToken;\r\n        if(st == IERC20(address(0))) { //eth\r\n            unchecked {\r\n                totalSupply += msg.value;\r\n                _balances[forWhom] += msg.value;\r\n            }\r\n        }\r\n        else {\r\n            require(msg.value == 0, \"non-zero eth\");\r\n            require(amount > 0, \"Cannot stake 0\");\r\n            require(st.transferFrom(msg.sender, address(this), amount), _transferErrorMessage);\r\n            unchecked { \r\n                totalSupply += amount;\r\n                _balances[forWhom] += amount;\r\n            }\r\n        }\r\n        emit Staked(forWhom, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public virtual {\r\n        require(amount <= _balances[msg.sender], \"withdraw: balance is lower\");\r\n        unchecked {\r\n            _balances[msg.sender] -= amount;\r\n            totalSupply = totalSupply-amount;\r\n        }\r\n        IERC20 st = stakedToken;\r\n        if(st == IERC20(address(0))) { //eth\r\n            (bool success, ) = msg.sender.call{value: amount}(\"\");\r\n            require(success, \"eth transfer failure\");\r\n        }\r\n        else {\r\n            require(stakedToken.transfer(msg.sender, amount), _transferErrorMessage);\r\n        }\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract ForgeAuctionsCT{\r\n    uint256 public secondsPerDay;\r\n    uint256 public currentEra;\r\n    }\r\n\r\ncontract ForgeRewards is StakedTokenWrapper, Ownable2 {\r\n    bool activated6 = false;\r\n    bool activated5 = false;\r\n    bool activated4 = false;\r\n    bool activated7 = false;\r\n    bool activated8 = false;\r\n    uint256 public decimalsExtra=18;\r\n    uint256 public decimalsExtraExtra=18;\r\n    uint256 public decimalsExtraExtra2=18;\r\n    uint256 public decimalsExtraExtra3=18;\r\n    uint64 public poolLength = 24*60*60*7;\r\n    uint256 public totalRewarded;\r\n    uint256 public totalRewarded2;\r\n    uint256 public totalRewarded3;\r\n    uint256 public totalRewardedExtra;\r\n    uint256 public totalRewardedExtraExtra;\r\n    uint256 public totalRewardedExtraExtra2;\r\n    uint256 public totalRewardedExtraExtra3;\r\n    address[] public AddressesEntered;\r\n    IERC20 public rewardTokenExtraExtra3;\r\n    IERC20 public rewardTokenExtraExtra2;\r\n    IERC20 public rewardTokenExtraExtra;\r\n    IERC20 public rewardTokenExtra;\r\n    IERC20 public rewardToken2;\r\n    IERC20 public rewardToken;\r\n    uint256 public rewardRate;\r\n    uint256 public rewardRate2;\r\n    uint256 public rewardRate3;\r\n    uint256 public rewardRateExtra;\r\n    uint256 public rewardRateExtraExtra;\r\n    uint256 public rewardRateExtraExtra2;\r\n    uint256 public rewardRateExtraExtra3;\r\n    uint256 public periodFinish;\r\n    uint256 public periodFinish2;\r\n    uint256 public periodFinish3;\r\n    uint256 public periodFinishExtra;\r\n    uint256 public periodFinishExtraExtra;\r\n    uint256 public periodFinishExtraExtra2;\r\n    uint256 public periodFinishExtraExtra3;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public lastUpdateTime2;\r\n    uint256 public lastUpdateTime3;\r\n    uint256 public lastUpdateTimeExtra;\r\n    uint256 public lastUpdateTimeExtraExtra;\r\n    uint256 public lastUpdateTimeExtraExtra2;\r\n    uint256 public lastUpdateTimeExtraExtra3;\r\n\r\n    uint256 public rewardPerTokenStored;\r\n    uint256 public rewardPerTokenStored2;\r\n    uint256 public rewardPerTokenStored3;\r\n    uint256 public rewardPerTokenStoredExtra;\r\n    uint256 public rewardPerTokenStoredExtraExtra;\r\n    uint256 public rewardPerTokenStoredExtraExtra2;\r\n    uint256 public rewardPerTokenStoredExtraExtra3;\r\n\t\r\n\tForgeAuctionsCT public AuctionCT;\r\n    struct UserRewards {\r\n        uint256 userRewardPerTokenPaid;\r\n        uint256 rewards;\r\n    }\r\n\t\r\n    struct UserRewards2 {\r\n        uint256 userRewardPerTokenPaid2;\r\n        uint256 rewards2;\r\n    }\r\n\t\r\n    struct UserRewards3 {\r\n        uint256 userRewardPerTokenPaid3;\r\n        uint256 rewards3;\r\n    }\r\n\t\r\n    struct UserRewardsExtra {\r\n        uint256 userRewardPerTokenPaidExtra;\r\n        uint256 rewardsExtra;\r\n    }\r\n    \r\n    struct UserRewardsExtraExtra {\r\n        uint256 userRewardPerTokenPaidExtraExtra;\r\n        uint256 rewardsExtraExtra;\r\n    }\r\n\t\r\n    struct UserRewardsExtraExtra2 {\r\n        uint256 userRewardPerTokenPaidExtraExtra2;\r\n        uint256 rewardsExtraExtra2;\r\n    }\r\n\t\r\n    struct UserRewardsExtraExtra3 {\r\n        uint256 userRewardPerTokenPaidExtraExtra3;\r\n        uint256 rewardsExtraExtra3;\r\n    }\r\n\t\r\n    mapping(address => UserRewards) public userRewards;\r\n    mapping(address => UserRewards2) public userRewards2;\r\n    mapping(address => UserRewards3) public userRewards3;\r\n    mapping(address => UserRewardsExtra) public userRewardsExtra;\r\n    mapping(address => UserRewardsExtraExtra) public userRewardsExtraExtra;\r\n    mapping(address => UserRewardsExtraExtra2) public userRewardsExtraExtra2;\r\n    mapping(address => UserRewardsExtraExtra3) public userRewardsExtraExtra3;\r\n\r\n    event RewardPaid(address indexed user, uint256 reward, uint256 rewards2, uint256 rewards3, uint256 rewardsExtra, uint256 rewardsExtraExtra, uint256 rewardsExtraExtra2, uint256 rewardsExtraExtra3);\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event RewardAdded2(uint256 rewards2);\r\n    event RewardPaidBasic(address indexed user, uint256 reward1, uint256 rewards2);\r\n\r\n    event RewardAdded3(uint256 rewards3);\r\n    event RewardPaid3(address indexed user, uint256 rewards3);\r\n\r\n    \r\n    event RewardAdded4(uint256 rewards4);\r\n    event RewardPaidExtra(address indexed user, uint256 rewardsExtra);\r\n\r\n    event RewardAdded5(uint256 rewards5);\r\n    event RewardPaidExtraExtra(address indexed user, uint256 rewardsExtraExtra);\r\n\r\n    event RewardAdded6(uint256 rewards6);\r\n    event RewardPaidExtraExtra2(address indexed user, uint256 rewardsExtraExtra2);\r\n\r\n    event RewardAdded7(uint256 rewards7);\r\n    event RewardPaidExtraExtra3(address indexed user, uint256 rewardsExtraExtra3);\r\n\r\n    constructor(IERC20 _rewardForge, IERC20 _LP, IERC20 _reward0xBTC, ForgeAuctionsCT AuctionAddress) {\r\n        rewardToken = _rewardForge;\r\n        stakedToken = _LP;\r\n        rewardToken2 = _reward0xBTC;\r\n\tAuctionCT = AuctionAddress;\r\n    }\r\n\r\n\r\n    function NewRewardTime() public returns (bool success){\r\n\t    uint64 poolLength2 = uint64(AuctionCT.secondsPerDay());\r\n\t    uint _era = AuctionCT.currentEra();\r\n\t    if(_era<5){\r\n\t    \tpoolLength = poolLength2*3;\r\n\t    }else if(_era  < 10){\r\n\t    \tpoolLength = poolLength2*5;\r\n\t    }else if(poolLength < poolLength2){\r\n\t\tpoolLength = poolLength2;\r\n\t    }\r\n\t}\r\n\r\n\r\n    function Z_addNewToken(IERC20 tokenExtra, uint _decimalsExtra) external OnlyModerators returns (bool success){\r\n    \trequire(rewardTokenExtraExtra3 != tokenExtra && tokenExtra != rewardToken && tokenExtra != stakedToken && tokenExtra != rewardToken2 && tokenExtra != rewardTokenExtraExtra && tokenExtra != rewardTokenExtra && tokenExtra != rewardTokenExtraExtra2, \"no same token\");\r\n\trequire(!activated4, \"Only allowed to add one token\");\r\n        decimalsExtra = _decimalsExtra;\r\n        rewardRateExtra = 0;\r\n        rewardTokenExtra = tokenExtra;\r\n        activated4 = true;\r\n\r\n        return true;\r\n    }\r\n\t\r\n\r\n    function Z_addNewToken2(IERC20 tokenTWOExtra, uint _decimalsExtraExtra) external OnlyModerators returns (bool success){\r\n\trequire(rewardTokenExtraExtra3 != tokenTWOExtra &&  tokenTWOExtra != rewardToken && tokenTWOExtra != stakedToken && tokenTWOExtra != rewardToken2 && tokenTWOExtra != rewardTokenExtra && tokenTWOExtra != rewardTokenExtraExtra && tokenTWOExtra != rewardTokenExtraExtra2, \"no same token\");\r\n\trequire(!activated5, \"Only allowed to add one token\");\r\n        decimalsExtraExtra = _decimalsExtraExtra;\r\n        rewardRateExtraExtra = 0;\r\n        rewardTokenExtraExtra = tokenTWOExtra;\r\n        activated5 = true;\r\n\t\r\n        return true;\r\n    }\r\n        \r\n    function Z_addNewToken3(IERC20 tokenTWOExtra2, uint _decimalsExtraExtra2) external OnlyModerators returns (bool success){\r\n\trequire(rewardTokenExtraExtra3 != tokenTWOExtra2 && tokenTWOExtra2 != rewardToken && tokenTWOExtra2 != stakedToken && tokenTWOExtra2 != rewardToken2 && tokenTWOExtra2 != rewardTokenExtra && tokenTWOExtra2 != rewardTokenExtraExtra && tokenTWOExtra2 != rewardTokenExtraExtra2, \"no same token\");\r\n\trequire(!activated6, \"Only allowed to add one token\");\r\n        decimalsExtraExtra2 = _decimalsExtraExtra2;\r\n        rewardRateExtraExtra2 = 0;\r\n        rewardTokenExtraExtra2 = tokenTWOExtra2;\r\n        activated6 = true;\r\n\t\r\n        return true;\r\n    }\r\n        \r\n    function Z_addNewToken4(IERC20 tokenTWOExtra3, uint _decimalsExtraExtra3) external OnlyModerators returns (bool success){\r\n\trequire(rewardTokenExtraExtra2 != tokenTWOExtra3 && tokenTWOExtra3 != rewardToken && tokenTWOExtra3 != stakedToken && tokenTWOExtra3 != rewardToken2 && tokenTWOExtra3 != rewardTokenExtra && tokenTWOExtra3 != rewardTokenExtraExtra && tokenTWOExtra3 != rewardTokenExtraExtra2, \"no same token\");\r\n\trequire(!activated7, \"Only allowed to add one token\");\r\n        decimalsExtraExtra3 = _decimalsExtraExtra3;\r\n        rewardRateExtraExtra3 = 0;\r\n        rewardTokenExtraExtra3 = tokenTWOExtra3;\r\n        activated7 = true;\r\n\t\r\n        return true;\r\n    }\r\n        \r\n\r\n    modifier updateReward(address account) {\r\n        uint256 _rewardPerTokenStored = rewardPerToken();\r\n        uint256 _rewardPerTokenStored2 = rewardPerToken2(); \r\n        uint256 _rewardPerTokenStored3 = rewardPerToken3(); \r\n        uint256 _rewardPerTokenStoredExtra = rewardPerTokenExtra(); \r\n        uint256 _rewardPerTokenStoredExtraExtra = rewardPerTokenExtraExtra(); \r\n        uint256 _rewardPerTokenStoredExtraExtra2 = rewardPerTokenExtraExtra2(); \r\n        uint256 _rewardPerTokenStoredExtraExtra3 = rewardPerTokenExtraExtra3(); \r\n\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        lastUpdateTime2 = lastTimeRewardApplicable2();\r\n        lastUpdateTime3 = lastTimeRewardApplicable3();\r\n        lastUpdateTimeExtra = lastTimeRewardApplicableExtra();\r\n        lastUpdateTimeExtraExtra = lastTimeRewardApplicableExtraExtra();\r\n        lastUpdateTimeExtraExtra2 = lastTimeRewardApplicableExtraExtra2();\r\n        lastUpdateTimeExtraExtra3 = lastTimeRewardApplicableExtraExtra3();\r\n\t\r\n        rewardPerTokenStored = _rewardPerTokenStored;\r\n        rewardPerTokenStored2 = _rewardPerTokenStored2;\r\n        rewardPerTokenStored3 = _rewardPerTokenStored3;\r\n        rewardPerTokenStoredExtra = _rewardPerTokenStoredExtra;\r\n        rewardPerTokenStoredExtraExtra = _rewardPerTokenStoredExtraExtra;\r\n        rewardPerTokenStoredExtraExtra2 = _rewardPerTokenStoredExtraExtra2;\r\n        rewardPerTokenStoredExtraExtra3 = _rewardPerTokenStoredExtraExtra3;\r\n\t\r\n        userRewards[account].rewards = earned(account);\r\n        userRewards2[account].rewards2 = earned2(account);\r\n        userRewards3[account].rewards3 = earned3(account);\r\n        userRewardsExtra[account].rewardsExtra = earnedExtra(account);\r\n        userRewardsExtraExtra[account].rewardsExtraExtra = earnedExtraExtra(account);\r\n        userRewardsExtraExtra2[account].rewardsExtraExtra2 = earnedExtraExtra2(account);\r\n        userRewardsExtraExtra3[account].rewardsExtraExtra3 = earnedExtraExtra3(account);\r\n\t\r\n        userRewards[account].userRewardPerTokenPaid = _rewardPerTokenStored;\r\n        userRewards2[account].userRewardPerTokenPaid2 = _rewardPerTokenStored2;\r\n        userRewards3[account].userRewardPerTokenPaid3 = _rewardPerTokenStored3;\r\n        userRewardsExtra[account].userRewardPerTokenPaidExtra = _rewardPerTokenStoredExtra;\r\n        userRewardsExtraExtra[account].userRewardPerTokenPaidExtraExtra = _rewardPerTokenStoredExtraExtra;\r\n        userRewardsExtraExtra2[account].userRewardPerTokenPaidExtraExtra2 = _rewardPerTokenStoredExtraExtra2;\r\n        userRewardsExtraExtra3[account].userRewardPerTokenPaidExtraExtra3 = _rewardPerTokenStoredExtraExtra3;\r\n        _;\r\n    }\r\n\r\n\r\n\t//admin set up a new token\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinish ? blockTimestamp : periodFinish;\r\n    }\r\n\r\n\r\n    function lastTimeRewardApplicable2() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinish2 ? blockTimestamp : periodFinish2;\r\n    }\r\n\r\n\r\n    function lastTimeRewardApplicable3() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinish3 ? blockTimestamp : periodFinish3;\r\n    }\r\n\r\n\r\n    function lastTimeRewardApplicableExtra() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinishExtra ? blockTimestamp : periodFinishExtra;\r\n    }\r\n\r\n\r\n    function lastTimeRewardApplicableExtraExtra() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinishExtraExtra ? blockTimestamp : periodFinishExtraExtra;\r\n    }\r\n\t\r\n\r\n    function lastTimeRewardApplicableExtraExtra2() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinishExtraExtra2 ? blockTimestamp : periodFinishExtraExtra2;\r\n    }\r\n\t\r\n\t\r\n    function lastTimeRewardApplicableExtraExtra3() public view returns (uint256) {\r\n        uint256 blockTimestamp = uint256(block.timestamp);\r\n        return blockTimestamp < periodFinishExtraExtra3 ? blockTimestamp : periodFinishExtraExtra3;\r\n    }\r\n\t\r\n    function rewardPerToken() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDuration = lastTimeRewardApplicable()-lastUpdateTime;\r\n            return uint256(rewardPerTokenStored + rewardDuration*rewardRate*(1e36)/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n\r\n    function rewardPerToken2() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStored2;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDuration2 = lastTimeRewardApplicable2()-lastUpdateTime2;\r\n            return uint256(rewardPerTokenStored2 + rewardDuration2*rewardRate2*1e36/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n\r\n    function rewardPerToken3() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStored3;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDuration3 = lastTimeRewardApplicable3()-lastUpdateTime3;\r\n            return uint256(rewardPerTokenStored3 + rewardDuration3*rewardRate3*1e24/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n\r\n    function rewardPerTokenExtra() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStoredExtra;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDurationExtra = lastTimeRewardApplicableExtra()-lastUpdateTimeExtra;\r\n            return uint256(rewardPerTokenStoredExtra + rewardDurationExtra*rewardRateExtra*(10**uint(decimalsExtra*2))/totalStakedSupply);\r\n        }\r\n    }\r\n\t\r\n\t\r\n    function rewardPerTokenExtraExtra() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStoredExtraExtra;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDurationExtraExtra = lastTimeRewardApplicableExtraExtra()-lastUpdateTimeExtraExtra;\r\n            return uint256(rewardPerTokenStoredExtraExtra + rewardDurationExtraExtra*rewardRateExtraExtra*(10**uint(decimalsExtraExtra*2))/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n    function rewardPerTokenExtraExtra2() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStoredExtraExtra2;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDurationExtraExtra2 = lastTimeRewardApplicableExtraExtra2()-lastUpdateTimeExtraExtra2;\r\n            return uint256(rewardPerTokenStoredExtraExtra2 + rewardDurationExtraExtra2*rewardRateExtraExtra2*(10**uint(decimalsExtraExtra2*2))/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n    function rewardPerTokenExtraExtra3() public view returns (uint256) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStoredExtraExtra3;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDurationExtraExtra3 = lastTimeRewardApplicableExtraExtra3()-lastUpdateTimeExtraExtra3;\r\n            return uint256(rewardPerTokenStoredExtraExtra3 + rewardDurationExtraExtra3*rewardRateExtraExtra3*(10**uint(decimalsExtraExtra3*2))/totalStakedSupply);\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        unchecked { \r\n            if(rewardPerToken() < 1e52)\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerToken()-userRewards[account].userRewardPerTokenPaid)/1e52 + userRewards[account].rewards);\r\n            }else{\r\n\r\n                return uint256(balanceOf(account)*((rewardPerToken()-userRewards[account].userRewardPerTokenPaid)/1e52) + userRewards[account].rewards);\r\n                         \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function earned2(address account) public view returns (uint256) {\r\n        unchecked {             \r\n            \r\n            if(rewardPerToken2() < 1e52)\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerToken2()-userRewards2[account].userRewardPerTokenPaid2)/1e52 + userRewards2[account].rewards2);\r\n            }else{\r\n                 \r\n                return uint256(balanceOf(account)*((rewardPerToken2()-userRewards2[account].userRewardPerTokenPaid2)/1e52) + userRewards2[account].rewards2);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function earned3(address account) public view returns (uint256) {\r\n        unchecked {             \r\n            if(rewardPerToken3() < 1e40)\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerToken3()-userRewards3[account].userRewardPerTokenPaid3)/1e40 + userRewards3[account].rewards3);\r\n            }else{\r\n                return uint256(balanceOf(account)*((rewardPerToken3()-userRewards3[account].userRewardPerTokenPaid3)/1e40) + userRewards3[account].rewards3);\r\n            }\r\n        }\r\n    }\r\n\t\r\n\t\r\n    function earnedExtra(address account) public view returns (uint256) {\r\n        unchecked {            \r\n            if(rewardPerTokenExtra() < (10**(decimalsExtra * 2 + 16)))\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerTokenExtra()-userRewardsExtra[account].userRewardPerTokenPaidExtra)/(10 **(decimalsExtra * 2 + 16)) + userRewardsExtra[account].rewardsExtra);\r\n            }else{\r\n                return uint256(balanceOf(account)*((rewardPerTokenExtra()-userRewardsExtra[account].userRewardPerTokenPaidExtra)/(10 **(decimalsExtra * 2 + 16))) + userRewardsExtra[account].rewardsExtra);\r\n            }\r\n        }\r\n    }\r\n\t\r\n\t\r\n    function earnedExtraExtra(address account) public view returns (uint256) {\r\n        unchecked {             \r\n            if(rewardPerTokenExtraExtra() < (10 **(decimalsExtraExtra * 2 + 16)))\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerTokenExtraExtra()-userRewardsExtraExtra[account].userRewardPerTokenPaidExtraExtra)/(10 **(decimalsExtraExtra * 2 + 16)) + userRewardsExtraExtra[account].rewardsExtraExtra);\r\n            }else{\r\n                return uint256(balanceOf(account)*((rewardPerTokenExtraExtra()-userRewardsExtraExtra[account].userRewardPerTokenPaidExtraExtra)/(10 **(decimalsExtraExtra * 2 + 16))) + userRewardsExtraExtra[account].rewardsExtraExtra);\r\n            }\r\n        }\r\n    }\r\n\t\r\n\r\n    function earnedExtraExtra2(address account) public view returns (uint256) {\r\n        unchecked { \r\n            if(rewardPerTokenExtraExtra2() < (10 **(decimalsExtraExtra2 * 2 + 16)))\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerTokenExtraExtra2()-userRewardsExtraExtra2[account].userRewardPerTokenPaidExtraExtra2)/(10 **(decimalsExtraExtra2 * 2+ 16)) + userRewardsExtraExtra2[account].rewardsExtraExtra2);\r\n            }else{\r\n                return uint256(balanceOf(account)*((rewardPerTokenExtraExtra2()-userRewardsExtraExtra2[account].userRewardPerTokenPaidExtraExtra2)/(10 **(decimalsExtraExtra2 * 2+ 16))) + userRewardsExtraExtra2[account].rewardsExtraExtra2);\r\n            }\r\n        }\r\n    }\r\n\t\r\n\r\n    function earnedExtraExtra3(address account) public view returns (uint256) {\r\n        unchecked { \r\n            if(rewardPerTokenExtraExtra3() < (10 **(decimalsExtraExtra3 * 2 + 16)))\r\n            {\r\n                return uint256(balanceOf(account)*(rewardPerTokenExtraExtra3()-userRewardsExtraExtra3[account].userRewardPerTokenPaidExtraExtra3)/(10 **(decimalsExtraExtra3 * 2+ 16)) + userRewardsExtraExtra3[account].rewardsExtraExtra3);\r\n            }else{\r\n                return uint256(balanceOf(account)*((rewardPerTokenExtraExtra3()-userRewardsExtraExtra3[account].userRewardPerTokenPaidExtraExtra3)/(10 **(decimalsExtraExtra3 * 2+ 16))) + userRewardsExtraExtra3[account].rewardsExtraExtra3);\r\n            }\r\n        }\r\n    }\r\n\t\r\n\r\n    function stake(uint256 amount) external payable {\r\n        stakeFor(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function stakeFor(address forWhom, uint256 amount) public payable override updateReward(forWhom) {\r\n        super.stakeFor(forWhom, amount);\r\n    }\r\n\t\r\n\r\n    function withdraw(uint256 amount) public override updateReward(msg.sender) {\r\n        super.withdraw(amount);\r\n    }\r\n\t\r\n\r\n    function exit() external {\r\n        getReward();\r\n        withdraw(uint256(balanceOf(msg.sender)));\r\n\t\t\r\n    }\r\n\r\n\r\n\r\n//0 = Reward1 and Reward2, 1 = Reward1, 2 = Reward2, 3 = Reward3, 4 = RewardExtra, 5 = RewardExtraExtra\r\nfunction getRewardBasicBasic(uint choice) public updateReward(msg.sender) {\r\n        //Reward & Reward2 aka 1 and 2\r\n        if(choice == 0){\r\n\t    uint256 reward = earned(msg.sender);\r\n            uint256 reward2 = earned2(msg.sender);\r\n            if (reward > 0) {\r\n            \tuserRewards[msg.sender].rewards = 0;\r\n           \t require(rewardToken.transfer(msg.sender, reward), \"reward transfer failed\");\r\n            \ttotalRewarded = totalRewarded - reward;\r\n            }\r\n            if(reward2 > 0){\r\n                userRewards2[msg.sender].rewards2 = 0;\r\n                require(rewardToken2.transfer(msg.sender, reward2), \"reward token 2 transfer failed\");\r\n                totalRewarded2 = totalRewarded2 - reward2;\r\n            }\r\n           emit RewardPaidBasic(msg.sender, reward, reward2);\r\n\t\t   \r\n        }else if(choice == 2){\r\n            uint256 reward2 = earned2(msg.sender);\r\n            if(reward2 > 0){\r\n               userRewards2[msg.sender].rewards2 = 0;\r\n              require(rewardToken2.transfer(msg.sender, reward2), \"reward token 2 transfer failed\");\r\n               totalRewarded2 = totalRewarded2 - reward2;\r\n           }\r\n           emit RewardPaidBasic(msg.sender, 0, reward2);\r\n\t\t   \r\n        }else if(choice == 1){\r\n\t    uint256 reward = earned(msg.sender);\r\n            if (reward > 0){\r\n               userRewards[msg.sender].rewards = 0;\r\n               require(rewardToken.transfer(msg.sender, reward), \"reward transfer failed\");\r\n               totalRewarded = totalRewarded - reward;\r\n            }\r\n\t    emit RewardPaidBasic(msg.sender, reward, 0);\r\n\t\t\t\r\n        }else if(choice == 3){\r\n\t    uint256 reward3= earned3(msg.sender);\r\n\t    if(reward3 > 0){\r\n\t\tuserRewards3[msg.sender].rewards3 = 0;\r\n\t\taddress payable receiver = payable(msg.sender);\r\n\t\trequire(receiver.send(reward3), \"Eth transfer failed\");\r\n\t\ttotalRewarded3 = totalRewarded3 - reward3;\r\n\t    }\r\n\t    emit RewardPaid3(msg.sender, reward3);\r\n\r\n        }else if(choice == 4){\r\n            uint256 rewardExtra = earnedExtra(msg.sender);\r\n            if (rewardExtra > 0){\r\n                userRewardsExtra[msg.sender].rewardsExtra = 0;\r\n                require(rewardTokenExtra.transfer(msg.sender, rewardExtra), \"reward transfer failed\");\r\n               totalRewardedExtra = totalRewardedExtra - rewardExtra;\r\n       \t    }\r\n            emit RewardPaidExtra(msg.sender, rewardExtra);\r\n\t\t\t\r\n        }else if(choice == 5){\r\n            uint256 rewardExtraExtra = earnedExtraExtra(msg.sender);\r\n            if(rewardExtraExtra > 0)\r\n            {\r\n            \tuserRewardsExtraExtra[msg.sender].rewardsExtraExtra = 0;\r\n                require(rewardTokenExtraExtra.transfer(msg.sender, rewardExtraExtra), \"reward rewardExtraExtra transfer failed\");\r\n                totalRewardedExtraExtra = totalRewardedExtraExtra - rewardExtraExtra;\r\n            }\r\n            emit RewardPaidExtraExtra(msg.sender, rewardExtraExtra);\r\n\t    \r\n        }else if(choice == 6){\r\n            uint256 rewardExtraExtra2 = earnedExtraExtra2(msg.sender);\r\n            if(rewardExtraExtra2 > 0)\r\n            {\r\n            \tuserRewardsExtraExtra2[msg.sender].rewardsExtraExtra2 = 0;\r\n                require(rewardTokenExtraExtra2.transfer(msg.sender, rewardExtraExtra2), \"reward rewardExtraExtra2 transfer failed\");\r\n                totalRewardedExtraExtra2 = totalRewardedExtraExtra2 - rewardExtraExtra2;\r\n            }\r\n            emit RewardPaidExtraExtra2(msg.sender, rewardExtraExtra2);\r\n\t\t\t\r\n        }else if(choice == 7){\r\n            uint256 rewardExtraExtra3 = earnedExtraExtra3(msg.sender);\r\n            if(rewardExtraExtra3 > 0)\r\n            {\r\n            \tuserRewardsExtraExtra3[msg.sender].rewardsExtraExtra3 = 0;\r\n                require(rewardTokenExtraExtra3.transfer(msg.sender, rewardExtraExtra3), \"reward rewardExtraExtra3 transfer failed\");\r\n                totalRewardedExtraExtra3 = totalRewardedExtraExtra3 - rewardExtraExtra3;\r\n            }\r\n            emit RewardPaidExtraExtra3(msg.sender, rewardExtraExtra3);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n \r\n    function getReward() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        uint256 reward2 = earned2(msg.sender);\r\n        uint256 reward3= earned3(msg.sender);\r\n        if (reward > 0) {\r\n            userRewards[msg.sender].rewards = 0;\r\n            if(reward3 > 0){\r\n                userRewards3[msg.sender].rewards3 = 0;\r\n                address payable receiver = payable(msg.sender);\r\n\t            require(receiver.send(reward3), \"Eth transfer failed\");\r\n                totalRewarded3 = totalRewarded3 - reward3;\r\n            }\r\n            require(rewardToken.transfer(msg.sender, reward), \"reward transfer failed\");\r\n            totalRewarded = totalRewarded - reward;\r\n        }\r\n        if(reward2 > 0)\r\n        {\r\n            \r\n            userRewards2[msg.sender].rewards2 = 0;\r\n            require(rewardToken2.transfer(msg.sender, reward2), \"reward token 2 transfer failed\");\r\n            totalRewarded2 = totalRewarded2 - reward2;\r\n        }\r\n        uint256 rewardExtra = earnedExtra(msg.sender);\r\n        if (rewardExtra > 0) {\r\n            userRewardsExtra[msg.sender].rewardsExtra = 0;\r\n            require(rewardTokenExtra.transfer(msg.sender, rewardExtra), \"reward transfer failed\");\r\n            totalRewardedExtra = totalRewardedExtra - rewardExtra;\r\n\t    \r\n        }\r\n        uint256 rewardExtraExtra = earnedExtraExtra(msg.sender);\r\n        if(rewardExtraExtra > 0)\r\n        {\r\n            \r\n            userRewardsExtraExtra[msg.sender].rewardsExtraExtra = 0;\r\n            require(rewardTokenExtraExtra.transfer(msg.sender, rewardExtraExtra), \"reward token 2 transfer failed\");\r\n            totalRewardedExtraExtra = totalRewardedExtraExtra - rewardExtraExtra;\r\n        }\r\n\t\r\n        uint256 rewardExtraExtra2 = earnedExtraExtra2(msg.sender);\r\n        if(rewardExtraExtra2 > 0)\r\n        {\r\n            \r\n            userRewardsExtraExtra2[msg.sender].rewardsExtraExtra2 = 0;\r\n            require(rewardTokenExtraExtra2.transfer(msg.sender, rewardExtraExtra2), \"reward token 2 transfer failed\");\r\n            totalRewardedExtraExtra2 = totalRewardedExtraExtra2 - rewardExtraExtra2;\r\n        }\r\n       uint256 rewardExtraExtra3 = earnedExtraExtra3(msg.sender);\r\n        if(rewardExtraExtra3 > 0)\r\n        {\r\n            \r\n            userRewardsExtraExtra3[msg.sender].rewardsExtraExtra3 = 0;\r\n            require(rewardTokenExtraExtra3.transfer(msg.sender, rewardExtraExtra3), \"reward token 2 transfer failed\");\r\n            totalRewardedExtraExtra3 = totalRewardedExtraExtra3 - rewardExtraExtra3;\r\n        }\r\n        emit RewardPaid(msg.sender, reward, reward2, reward3, rewardExtra, rewardExtraExtra, rewardExtraExtra2, rewardExtraExtra3);\r\n\t\t\t\r\n    }\r\n \r\n \r\n    function Z_setRewardParamsExtraExtra2(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength;  \r\n            rewardPerTokenStoredExtraExtra2 = rewardPerTokenExtraExtra2();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinishExtraExtra2, \"MUST BE AFTER Previous Distribution \");\r\n\t    \r\n            uint256 maxRewardSupply = rewardTokenExtraExtra2.balanceOf(address(this)) - totalRewardedExtraExtra2;\r\n            \r\n            if(rewardTokenExtraExtra2 == stakedToken){\r\n                maxRewardSupply -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply > duration)\r\n            {\r\n                rewardRateExtraExtra2 = ((maxRewardSupply*4*10**16)/10)/duration;\r\n            }\r\n            else{\r\n                rewardRateExtraExtra2 = 0;\r\n            }\r\n            reward = (maxRewardSupply*4)/10;\r\n\r\n            lastUpdateTimeExtraExtra2 = blockTimestamp;\r\n            periodFinishExtraExtra2 = blockTimestamp+duration;\r\n            totalRewardedExtraExtra2 = reward + totalRewardedExtraExtra2;\r\n\t\t\t\r\n            emit RewardAdded6(reward);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n    function Z_setRewardParamsExtraExtra3(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength;  \r\n            rewardPerTokenStoredExtraExtra3 = rewardPerTokenExtraExtra3();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinishExtraExtra3, \"MUST BE AFTER Previous Distribution \");\r\n\t    \r\n            uint256 maxRewardSupply = rewardTokenExtraExtra3.balanceOf(address(this)) - totalRewardedExtraExtra3;\r\n            \r\n            if(rewardTokenExtraExtra3 == stakedToken){\r\n                maxRewardSupply -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply > duration)\r\n            {\r\n                rewardRateExtraExtra3 = ((maxRewardSupply*4*10**16)/10)/duration;\r\n            }\r\n            else{\r\n                rewardRateExtraExtra3 = 0;\r\n            }\r\n            reward = (maxRewardSupply*4)/10;\r\n\r\n            lastUpdateTimeExtraExtra3 = blockTimestamp;\r\n            periodFinishExtraExtra3 = blockTimestamp+duration;\r\n            totalRewardedExtraExtra3 = reward + totalRewardedExtraExtra3;\r\n\t\t\t\r\n            emit RewardAdded7(reward);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n \r\n    function Z_setRewardParamsExtraExtra(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength;  \r\n            rewardPerTokenStoredExtraExtra = rewardPerTokenExtraExtra();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinishExtraExtra, \"MUST BE AFTER Previous Distribution \");\r\n            uint256 maxRewardSupply = rewardTokenExtraExtra.balanceOf(address(this)) - totalRewardedExtraExtra;\r\n            \r\n            if(rewardTokenExtraExtra == stakedToken){\r\n                maxRewardSupply -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply > duration)\r\n            {\r\n                rewardRateExtraExtra = ((maxRewardSupply*4*10**16)/10)/duration;\r\n            }\r\n            else{\r\n                rewardRateExtraExtra = 0;\r\n            }\r\n            reward = (maxRewardSupply*4)/10;\r\n\r\n            lastUpdateTimeExtraExtra = blockTimestamp;\r\n            periodFinishExtraExtra = blockTimestamp+duration;\r\n            totalRewardedExtraExtra = reward + totalRewardedExtraExtra;\r\n\t\t\t\r\n            emit RewardAdded5(reward);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function Z_setRewardParamsExtra(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength; \r\n            rewardPerTokenStoredExtra = rewardPerTokenExtra();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinishExtra, \"MUST BE AFTER Previous Distribution \");\r\n            uint256 maxRewardSupply = rewardTokenExtra.balanceOf(address(this)) - totalRewardedExtra;\r\n            \r\n            if(rewardTokenExtra == stakedToken){\r\n                maxRewardSupply -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply > duration)\r\n            {\r\n                rewardRateExtra = (maxRewardSupply*4*10**16)/duration/10;\r\n            }\r\n            else{\r\n                rewardRateExtra = 0;\r\n            }\r\n            reward = (maxRewardSupply*4)/10;\r\n            lastUpdateTimeExtra = blockTimestamp;\r\n            periodFinishExtra = blockTimestamp+duration;\r\n            totalRewardedExtra = reward + totalRewardedExtra;\r\n\t\t\t\r\n            emit RewardAdded4(reward);\r\n\t\t\t\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function setRewardParamsALL(uint choice) external {\r\n        if(choice == 1)\r\n        {\r\n            this.Z_setRewardParamsExtra(3, 33);\r\n        }else if(choice == 2){\r\n            this.Z_setRewardParamsExtraExtra(3, 33);\r\n            this.Z_setRewardParamsExtra(3, 33);\r\n        }else if(choice == 3){\r\n            this.Z_setRewardParamsExtraExtra2(3, 33);\r\n            this.Z_setRewardParamsExtraExtra(3, 33);\r\n            this.Z_setRewardParamsExtra(3, 33);\r\n\t}else if(choice == 4){\r\n            this.Z_setRewardParamsExtraExtra3(3, 33);\r\n            this.Z_setRewardParamsExtraExtra2(3, 33);\r\n            this.Z_setRewardParamsExtraExtra(3, 33);\r\n            this.Z_setRewardParamsExtra(3, 33);\r\n        }else{\r\n            this.Z_setRewardParamsForge(2, 22);\r\n            this.Z_setRewardParams0xBTC(2, 22);\r\n            this.Z_setRewardParamsETH(2, 22);\r\n        }\r\n    }\r\n\r\n\r\n    function Z_setRewardParamsForge(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength; \r\n            rewardPerTokenStored = rewardPerToken();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinish, \"MUST BE AFTER Previous Distribution \");\r\n            uint256 maxRewardSupply = rewardToken.balanceOf(address(this)) - totalRewarded;\r\n            \r\n            if(rewardToken == stakedToken){\r\n                maxRewardSupply -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply > 3)\r\n            {\r\n                rewardRate = ((maxRewardSupply*4*10**16)/10)/duration ;\r\n            }\r\n            else{\r\n                rewardRate = 0;\r\n            }\r\n            \r\n            reward = (maxRewardSupply*4)/10;\r\n            lastUpdateTime = blockTimestamp;\r\n            periodFinish = blockTimestamp+duration;\r\n            totalRewarded = reward + totalRewarded;\r\n            emit RewardAdded(reward);\r\n        }\r\n    }\r\n\t\r\n\r\n    function Z_setRewardParams0xBTC(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength;  \r\n            rewardPerTokenStored2 = rewardPerToken2();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinish2, \"MUST BE AFTER Previous Rewards\");\r\n            \r\n            uint256 maxRewardSupply2 = rewardToken2.balanceOf(address(this)) - totalRewarded2;\r\n            if(rewardToken2 == stakedToken){\r\n                maxRewardSupply2 -= totalSupply;\r\n\t    }\r\n            if(maxRewardSupply2 > reward)\r\n            {\r\n                rewardRate2 = ((maxRewardSupply2*4*10**16)/10)/duration;\r\n            }\r\n            else{\r\n                rewardRate2 = 0;\r\n            }\r\n            reward = (maxRewardSupply2*4)/10;\r\n            lastUpdateTime2 = blockTimestamp;\r\n            periodFinish2 = blockTimestamp+duration;\r\n            totalRewarded2 = reward + totalRewarded2;\r\n            emit RewardAdded2(reward);\r\n        }\r\n    }\r\n\r\n\r\n    function Z_setRewardParamsETH(uint256 reward, uint64 duration) external {\r\n        unchecked {\r\n            require(reward > 0);\r\n            duration = poolLength;  \r\n            rewardPerTokenStored3 = rewardPerToken3();\r\n            uint256 blockTimestamp = uint256(block.timestamp);\r\n            require(blockTimestamp > periodFinish3, \"MUST BE AFTER Previous Rewards\");\r\n            uint256 maxRewardSupply3 = address(this).balance - totalRewarded3;\r\n\r\n            if(maxRewardSupply3 > duration)\r\n            {\r\n                rewardRate3 = ((maxRewardSupply3*4*10**16)/10)/duration;\r\n            }\r\n            else{\r\n                rewardRate3 = 0;\r\n            }            \r\n            reward = (maxRewardSupply3*4)/10;\r\n            lastUpdateTime3 = blockTimestamp;\r\n            periodFinish3 = blockTimestamp+duration;\r\n            totalRewarded3 = reward + totalRewarded3;\r\n            emit RewardAdded3(reward);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2022 Forge\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.   \r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n//Staking Rewards", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardForge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_LP\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward0xBTC\",\"type\":\"address\"},{\"internalType\":\"contract ForgeAuctionsCT\",\"name\":\"AuctionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards2\",\"type\":\"uint256\"}],\"name\":\"RewardAdded2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards3\",\"type\":\"uint256\"}],\"name\":\"RewardAdded3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards4\",\"type\":\"uint256\"}],\"name\":\"RewardAdded4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards5\",\"type\":\"uint256\"}],\"name\":\"RewardAdded5\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards6\",\"type\":\"uint256\"}],\"name\":\"RewardAdded6\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards7\",\"type\":\"uint256\"}],\"name\":\"RewardAdded7\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtra\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra3\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards3\",\"type\":\"uint256\"}],\"name\":\"RewardPaid3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards2\",\"type\":\"uint256\"}],\"name\":\"RewardPaidBasic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtra\",\"type\":\"uint256\"}],\"name\":\"RewardPaidExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra\",\"type\":\"uint256\"}],\"name\":\"RewardPaidExtraExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra2\",\"type\":\"uint256\"}],\"name\":\"RewardPaidExtraExtra2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra3\",\"type\":\"uint256\"}],\"name\":\"RewardPaidExtraExtra3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AddressesEntered\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AuctionCT\",\"outputs\":[{\"internalType\":\"contract ForgeAuctionsCT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NewRewardTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModerator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"Z_addMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenExtra\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimalsExtra\",\"type\":\"uint256\"}],\"name\":\"Z_addNewToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenTWOExtra\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimalsExtraExtra\",\"type\":\"uint256\"}],\"name\":\"Z_addNewToken2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenTWOExtra2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimalsExtraExtra2\",\"type\":\"uint256\"}],\"name\":\"Z_addNewToken3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenTWOExtra3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimalsExtraExtra3\",\"type\":\"uint256\"}],\"name\":\"Z_addNewToken4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParams0xBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsExtraExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsExtraExtra2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsExtraExtra3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"Z_setRewardParamsForge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Z_transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"getRewardBasicBasic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicableExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicableExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicableExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicableExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinishExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinishExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinishExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinishExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStoredExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStoredExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStoredExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStoredExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenExtra\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenExtraExtra\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenExtraExtra2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenExtraExtra3\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"setRewardParamsALL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forWhom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewarded2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewarded3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaid3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaidExtra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsExtra\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsExtraExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaidExtraExtra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsExtraExtra2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaidExtraExtra2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardsExtraExtra3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewardPerTokenPaidExtraExtra3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsExtraExtra3\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForgeRewards", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "000000000000000000000000f44fb43066f7ecc91058e3a614fb8a15a2735276000000000000000000000000562322f8e7131d0bb9f487ae566935d3be96406b00000000000000000000000071b821aa52a49f32eed535fca6eb5aa130085978000000000000000000000000bb1fa87a4738b22f7d2d5ec34ba349375b4d86f0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e986f17c9fce2e5936f7d9dfc152fd54bc49ef4d816fa92ae8d4428edd1adfe0"}