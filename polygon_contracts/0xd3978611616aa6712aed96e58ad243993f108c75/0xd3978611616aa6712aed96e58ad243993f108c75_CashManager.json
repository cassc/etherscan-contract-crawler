{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/cash/CashManager.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/cash/interfaces/ICashManager.sol\\\";\\nimport \\\"contracts/cash/interfaces/IMulticall.sol\\\";\\nimport \\\"contracts/cash/token/Cash.sol\\\";\\nimport \\\"contracts/cash/kyc/KYCRegistryClientConstructable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/token/SafeERC20.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CashManager is\\n  ICashManager,\\n  IMulticall,\\n  AccessControlEnumerable,\\n  KYCRegistryClientConstructable,\\n  Pausable,\\n  ReentrancyGuard\\n{\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Tokens\\n  // ERC20 token used to Mint CASH with\\n  IERC20 public immutable collateral;\\n\\n  // CASH contract\\n  Cash public immutable cash;\\n\\n  /// @dev Collateral Recipients\\n  // The address to which the `collateral` is sent\\n  address public constant assetRecipient =\\n    0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17;\\n\\n  // The address to which fees are sent\\n  address public feeRecipient;\\n\\n  // The address from which redemptions are processed\\n  address public assetSender;\\n\\n  /// @dev Mint/Redeem Parameters\\n  // Minimum amount that must be deposited to mint CASH\\n  // Denoted in decimals of `collateral`\\n  uint256 public minimumDepositAmount = 10_000;\\n\\n  // Maximum amount that an admin can manually mint\\n  // Denoted in decimals of `CASH`\\n  uint256 public maxAdminMintAmount = 10_000e18;\\n\\n  // Minimum amount that must be redeemed for a withdraw request\\n  uint256 public minimumRedeemAmount;\\n\\n  // Minting fee specified in basis points\\n  uint256 public mintFee = 0;\\n\\n  // Instant Minting fee specified in basis points\\n  uint256 public instantMintFee = 0;\\n\\n  // Limit for how far `exchangeRate` can stray from\\n  // `lastSetMintExchangeRate` within an epoch (in basis points)\\n  uint256 public exchangeRateDeltaLimit = 5000;\\n\\n  // Struct representing all redemption requests in an epoch\\n  struct RedemptionRequests {\\n    // Total CASH burned in the epoch\\n    uint256 totalBurned;\\n    // Mapping from address to amount of CASH address burned\\n    mapping(address => uint256) addressToBurnAmt;\\n  }\\n\\n  // Mapping from epoch to redemption info struct for that epoch\\n  mapping(uint256 => RedemptionRequests) public redemptionInfoPerEpoch;\\n\\n  // Mapping used for getting the exchange rate during a given epoch\\n  mapping(uint256 => uint256) public epochToExchangeRate;\\n\\n  // Nested mapping containing mint requests for an epoch\\n  // { <epoch> : {<user> : <collateralAmount> }\\n  mapping(uint256 => mapping(address => uint256)) public mintRequestsPerEpoch;\\n\\n  // Struct representing all redemption requests in an epoch\\n  struct InstantMintAmounts {\\n    // Collateral Deposited in an epoch\\n    uint256 collateralDeposited;\\n    // Amount of CASH instantly minted\\n    uint256 instantMintAmount;\\n  }\\n  // Mapping corresponding to a given users instantMint info per epoch\\n  mapping(uint256 => mapping(address => InstantMintAmounts))\\n    public instantMintAmtsPerEpoch;\\n\\n  // Helper constant that allows us to specify basis points in calculations\\n  uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n  // Decimal multiplier representing the difference between `CASH` decimals\\n  // In `collateral` token decimals\\n  uint256 public immutable decimalsMultiplier;\\n\\n  /// @dev Epoch Parameters\\n  // Epoch that contract is currently in\\n  uint256 public currentEpoch;\\n\\n  // Duration of an epoch in seconds\\n  uint256 public epochDuration;\\n\\n  // Timestamp of the start of `currentEpoch`\\n  uint256 public currentEpochStartTimestamp;\\n\\n  // Offset by which `currentEpochStartTimestamp` is shifted by in seconds\\n  uint256 public epochStartTimestampOffset;\\n\\n  // `exchangeRate` at start of `currentEpoch`\\n  uint256 public lastSetMintExchangeRate = 1e17;\\n\\n  /// @dev Mint/Redeem Limit Parameters\\n  // Maximum amount that can be minted during an epoch\\n  uint256 public mintLimit;\\n\\n  // Amount already minted during the `currentEpoch`\\n  uint256 public currentMintAmount;\\n\\n  // Maximum amount that can be redeemed during an epoch\\n  uint256 public redeemLimit;\\n\\n  // Amount already redeemed during the `currentEpoch`\\n  uint256 public currentRedeemAmount;\\n\\n  // Amount Credited to a user on Mint in BPS\\n  uint256 public instantMintBPS = 9_000;\\n\\n  // Feature Flag used to enable disable instant minting.\\n  bool public instantMintingEnabled;\\n\\n  /// @dev Role Based Access control members\\n  bytes32 public constant MANAGER_ADMIN = keccak256(\\\"MANAGER_ADMIN\\\");\\n  bytes32 public constant MINTER_ADMIN = keccak256(\\\"MINTER_ADMIN\\\");\\n  bytes32 public constant PAUSER_ADMIN = keccak256(\\\"PAUSER_ADMIN\\\");\\n  bytes32 public constant SETTER_ADMIN = keccak256(\\\"SETTER_ADMIN\\\");\\n\\n  /// @notice constructor\\n  constructor(\\n    address _collateral,\\n    address _cash,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _mintLimit,\\n    uint256 _redeemLimit,\\n    uint256 _epochDuration,\\n    address _kycRegistry,\\n    uint256 _kycRequirementGroup\\n  ) KYCRegistryClientConstructable(_kycRegistry, _kycRequirementGroup) {\\n    if (_collateral == address(0)) {\\n      revert CollateralZeroAddress();\\n    }\\n    if (_cash == address(0)) {\\n      revert CashZeroAddress();\\n    }\\n    if (_assetSender == address(0)) {\\n      revert AssetSenderZeroAddress();\\n    }\\n    if (_feeRecipient == address(0)) {\\n      revert FeeRecipientZeroAddress();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\\n    _grantRole(MANAGER_ADMIN, managerAdmin);\\n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\\n    _setRoleAdmin(SETTER_ADMIN, MANAGER_ADMIN);\\n    _grantRole(PAUSER_ADMIN, pauser);\\n\\n    collateral = IERC20(_collateral);\\n    cash = Cash(_cash);\\n    feeRecipient = _feeRecipient;\\n    assetSender = _assetSender;\\n\\n    mintLimit = _mintLimit;\\n    redeemLimit = _redeemLimit;\\n    epochDuration = _epochDuration;\\n\\n    currentEpochStartTimestamp =\\n      block.timestamp -\\n      (block.timestamp % epochDuration);\\n\\n    // Implicit constraint: cash decimals >= collateral decimals.\\n    decimalsMultiplier =\\n      10 **\\n        (IERC20Metadata(_cash).decimals() -\\n          IERC20Metadata(_collateral).decimals());\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Mint Logic\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function used to toggle instantMinting\\n   *\\n   * @param val Boolean representing if instantMinting is enabled\\n   */\\n  function setInstantMint(bool val) external onlyRole(MANAGER_ADMIN) {\\n    instantMintingEnabled = val;\\n    emit InstantMintingEnabled(instantMintingEnabled);\\n  }\\n\\n  /**\\n   * @notice Function modifier used to gate functions\\n   *         dependent on if instantMinting enabled\\n   */\\n  modifier instantMintingAllowed() {\\n    if (instantMintingEnabled == false) {\\n      revert FeatureNotEnabled();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Function used by users to submit a request to mint\\n   *\\n   * @param collateralAmountIn The amount of collateral one wishes to deposit\\n   *                           to mint CASH tokens\\n   */\\n  function requestMint(\\n    uint256 collateralAmountIn\\n  )\\n    external\\n    override\\n    updateEpoch\\n    nonReentrant\\n    whenNotPaused\\n    checkKYC(msg.sender)\\n  {\\n    if (collateralAmountIn < minimumDepositAmount) {\\n      revert MintRequestAmountTooSmall();\\n    }\\n\\n    uint256 feesInCollateral = _getMintFees(collateralAmountIn);\\n    uint256 depositValueAfterFees = collateralAmountIn - feesInCollateral;\\n\\n    _checkAndUpdateMintLimit(depositValueAfterFees);\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositValueAfterFees\\n    );\\n\\n    mintRequestsPerEpoch[currentEpoch][msg.sender] += depositValueAfterFees;\\n\\n    emit MintRequested(\\n      msg.sender,\\n      currentEpoch,\\n      collateralAmountIn,\\n      depositValueAfterFees,\\n      feesInCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by users to claim an airdrop for a given epoch\\n   *\\n   * @param user       The user who requested to mint\\n   * @param epochToClaim The epoch in which the mint was requested\\n   *\\n   * @dev We perform KYC check on the user destined to receive `cash`, not the\\n   *      msg.sender\\n   */\\n  function claimMint(\\n    address user,\\n    uint256 epochToClaim\\n  ) external override updateEpoch nonReentrant whenNotPaused checkKYC(user) {\\n    uint256 collateralDeposited = mintRequestsPerEpoch[epochToClaim][user];\\n    if (collateralDeposited == 0) {\\n      revert NoCashToClaim();\\n    }\\n    if (epochToExchangeRate[epochToClaim] == 0) {\\n      revert ExchangeRateNotSet();\\n    }\\n\\n    // Get the amount of CASH due at a given rate per epoch\\n    uint256 cashOwed = _getMintAmountForEpoch(\\n      collateralDeposited,\\n      epochToClaim\\n    );\\n\\n    mintRequestsPerEpoch[epochToClaim][user] = 0;\\n    cash.mint(user, cashOwed);\\n\\n    emit MintCompleted(\\n      user,\\n      cashOwed,\\n      collateralDeposited,\\n      epochToExchangeRate[epochToClaim],\\n      epochToClaim\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by user to subscribe to the fund and\\n   *         instantly mint a portion of the subscription amt\\n   *\\n   * @param collateralAmountIn The amount of collateral one wished to deposit\\n   *                           to mint CASH tokens\\n   */\\n  function instantMint(\\n    uint256 collateralAmountIn\\n  )\\n    external\\n    override\\n    updateEpoch\\n    nonReentrant\\n    whenNotPaused\\n    checkKYC(msg.sender)\\n    instantMintingAllowed\\n  {\\n    if (collateralAmountIn < minimumDepositAmount) {\\n      revert MintRequestAmountTooSmall();\\n    }\\n    uint256 feesInCollateral = _getInstantMintFees(collateralAmountIn);\\n    uint256 depositValueAfterFees = collateralAmountIn - feesInCollateral;\\n\\n    _checkAndUpdateMintLimit(depositValueAfterFees);\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositValueAfterFees\\n    );\\n\\n    uint256 instantCash = _getInstantMintAmount(depositValueAfterFees);\\n    cash.mint(msg.sender, instantCash);\\n\\n    instantMintAmtsPerEpoch[currentEpoch][msg.sender]\\n      .instantMintAmount += instantCash;\\n\\n    instantMintAmtsPerEpoch[currentEpoch][msg.sender]\\n      .collateralDeposited += depositValueAfterFees;\\n\\n    emit InstantMint(\\n      msg.sender,\\n      currentEpoch,\\n      collateralAmountIn,\\n      depositValueAfterFees,\\n      feesInCollateral,\\n      instantCash\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by admin to claim excess `CASH` on behalf of a user\\n   *\\n   * @param user         The address you would like to claim on behalf of\\n   * @param epochToClaim The epoch in which the user minted\\n   *\\n   * @dev We perform KYC check on the user destined to receive `CASH` not the\\n   *      msg.sender\\n   */\\n  function claimExcess(\\n    address user,\\n    uint256 epochToClaim\\n  )\\n    external\\n    override\\n    updateEpoch\\n    nonReentrant\\n    whenNotPaused\\n    checkKYC(user)\\n    instantMintingAllowed\\n  {\\n    if (msg.sender != user && !hasRole(MANAGER_ADMIN, msg.sender)) {\\n      revert CannotClaimExcess();\\n    }\\n    uint256 collateralDeposited = instantMintAmtsPerEpoch[epochToClaim][user]\\n      .collateralDeposited;\\n    uint256 cashGiven = instantMintAmtsPerEpoch[epochToClaim][user]\\n      .instantMintAmount;\\n    if (collateralDeposited == 0) {\\n      revert NoCashToClaim();\\n    }\\n    if (epochToExchangeRate[epochToClaim] == 0) {\\n      revert ExchangeRateNotSet();\\n    }\\n    // Get amount of CASH due at a given rate per epoch\\n    uint256 cashOwed = _getMintAmountForEpoch(\\n      collateralDeposited,\\n      epochToClaim\\n    );\\n    uint256 cashDue = cashOwed - cashGiven;\\n    instantMintAmtsPerEpoch[epochToClaim][user].collateralDeposited = 0;\\n    cash.mint(user, cashDue);\\n\\n    emit ExcessMintClaimed(\\n      user,\\n      cashOwed,\\n      cashDue,\\n      collateralDeposited,\\n      epochToExchangeRate[epochToClaim],\\n      epochToClaim\\n    );\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral` returns fees owed\\n   *\\n   * @param collateralAmount Amount `collateral` to exchange\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getInstantMintFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * instantMintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Sets instant mint fee\\n   *\\n   * @param _instantMintFee new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 BPS or 100%\\n   */\\n  function setInstantMintFee(\\n    uint256 _instantMintFee\\n  ) external override instantMintingAllowed onlyRole(MANAGER_ADMIN) {\\n    if (_instantMintFee > BPS_DENOMINATOR) {\\n      revert MintFeeTooLarge();\\n    }\\n    uint256 oldInstantMintFee = instantMintFee;\\n    instantMintFee = _instantMintFee;\\n    emit InstantMintFeeSet(oldInstantMintFee, instantMintFee);\\n  }\\n\\n  /**\\n   * @notice Sets the % (in bps) for instant minting based off the\\n   *         `lastSetMintExchangeRate`\\n   *\\n   * @param newInstantMintBPS The new percent for instant minting\\n   */\\n  function setInstantMintPercentBPS(\\n    uint256 newInstantMintBPS\\n  )\\n    external\\n    override\\n    updateEpoch\\n    instantMintingAllowed\\n    onlyRole(MANAGER_ADMIN)\\n  {\\n    if (newInstantMintBPS > BPS_DENOMINATOR) {\\n      revert InstantMintTooLarge();\\n    }\\n    uint256 oldInstantMintBPS = instantMintBPS;\\n    instantMintBPS = newInstantMintBPS;\\n    emit InstantMintPercentSet(oldInstantMintBPS, instantMintBPS);\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much CASH ought\\n   *         to be instantly minted, based off a percentage of the last\\n   *         set exchangeRate\\n   *\\n   * @param collateralAmountIn Amount of `collateral` given\\n   *\\n   * @return cashInstantMint Amount of CASH to instantly mint\\n   *\\n   * @dev If `lastSetMintExchangeRate` needs to be changed this can be done\\n   *      through a call to `overrideExchangeRate`\\n   */\\n  function _getInstantMintAmount(\\n    uint256 collateralAmountIn\\n  ) internal view returns (uint256 cashInstantMint) {\\n    uint256 amountE24 = _scaleUp(collateralAmountIn) * 1e18;\\n    uint256 cashOwedLastRate = amountE24 / lastSetMintExchangeRate;\\n    cashInstantMint = (cashOwedLastRate * instantMintBPS) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Sets mint exchange rate\\n   *\\n   * @param exchangeRate New mint exchange rate (in 18 decimals)\\n   * @param epochToSet   The epoch we want to set the exchange rate for\\n   *\\n   * @dev If the exchange rate differs more than `exchangeRateDeltaLimit`\\n   *      from the last exchange rate set, the entire contract will be paused.\\n   *      See `overrideExchangeRate` should this check need to be bypassed\\n   */\\n  function setMintExchangeRate(\\n    uint256 exchangeRate,\\n    uint256 epochToSet\\n  ) external override updateEpoch onlyRole(SETTER_ADMIN) {\\n    if (exchangeRate == 0) {\\n      revert ZeroExchangeRate();\\n    }\\n    if (epochToSet >= currentEpoch) {\\n      revert EpochNotElapsed();\\n    }\\n    if (epochToExchangeRate[epochToSet] != 0) {\\n      revert EpochExchangeRateAlreadySet();\\n    }\\n\\n    uint256 rateDifference;\\n    if (exchangeRate > lastSetMintExchangeRate) {\\n      rateDifference = exchangeRate - lastSetMintExchangeRate;\\n    } else if (exchangeRate < lastSetMintExchangeRate) {\\n      rateDifference = lastSetMintExchangeRate - exchangeRate;\\n    }\\n\\n    uint256 maxDifferenceThisEpoch = (lastSetMintExchangeRate *\\n      exchangeRateDeltaLimit) / BPS_DENOMINATOR;\\n\\n    if (rateDifference > maxDifferenceThisEpoch) {\\n      epochToExchangeRate[epochToSet] = exchangeRate;\\n      _pause();\\n      emit MintExchangeRateCheckFailed(\\n        epochToSet,\\n        lastSetMintExchangeRate,\\n        exchangeRate\\n      );\\n    } else {\\n      uint256 oldExchangeRate = lastSetMintExchangeRate;\\n      epochToExchangeRate[epochToSet] = exchangeRate;\\n      lastSetMintExchangeRate = exchangeRate;\\n      emit MintExchangeRateSet(epochToSet, oldExchangeRate, exchangeRate);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to manually mint CASH tokens to a user\\n   *\\n   * @param user   User to mint CASH tokens to\\n   * @param amount Quantity of CASH tokens to mint\\n   */\\n  function adminMintCash(\\n    address user,\\n    uint256 amount\\n  ) external onlyRole(MINTER_ADMIN) {\\n    if (amount > maxAdminMintAmount) {\\n      revert AdminMintAmountTooLarge();\\n    }\\n    if (user == address(0)) {\\n      revert ZeroAddressInput();\\n    }\\n    cash.mint(user, amount);\\n    emit AdminMintedCash(user, amount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the maximum amount of CASH tokens that can\\n   *         be minted via `adminMintCash`\\n   *\\n   * @param _maxAdminMintAmount The maximum amount of CASH tokens that can be minted\\n   */\\n  function setMaxAdminMintAmount(\\n    uint256 _maxAdminMintAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldMaxAdminMintAmount = maxAdminMintAmount;\\n    maxAdminMintAmount = _maxAdminMintAmount;\\n    emit MaxAdminMintAmountSet(oldMaxAdminMintAmount, _maxAdminMintAmount);\\n  }\\n\\n  /**\\n   * @notice Override admin function for changing the representation of the\\n   *         amount of collateral a user has deposited to kick off minting\\n   *         process\\n   *\\n   * @param user       The user whose balance is being set\\n   * @param epoch      The epoch in which to set user balance for\\n   * @param oldBalance The user's previous balance\\n   * @param newBalance The user's new balance to set\\n   *\\n   * @dev The total burned amount for the epoch must be set appropriately\\n   *      in order to correctly calculate redemptions.\\n   * @dev `oldBalance` is provided to prevent front running attacks where a\\n   *      user could attempt to claim before and after this is set.\\n   */\\n  function setPendingMintBalance(\\n    address user,\\n    uint256 epoch,\\n    uint256 oldBalance,\\n    uint256 newBalance\\n  ) external updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (oldBalance != mintRequestsPerEpoch[epoch][user]) {\\n      revert UnexpectedMintBalance();\\n    }\\n    if (epoch > currentEpoch) {\\n      revert CannotServiceFutureEpoch();\\n    }\\n    mintRequestsPerEpoch[epoch][user] = newBalance;\\n    emit PendingMintBalanceSet(user, epoch, oldBalance, newBalance);\\n  }\\n\\n  /**\\n   * @notice Override admin function for changing the representation of the\\n   *         amount of collateral a user has deposited for instant minting\\n   *\\n   * @param user       The user whose balance is being set\\n   * @param epoch      The epoch in which to set user balance for\\n   * @param oldBalance The user's previous balance\\n   * @param newBalance The user's new balance to set\\n   *\\n   * @dev The total burned amount for the epoch must be set appropriately\\n   *      in order to correctly calculate redemptions.\\n   * @dev `oldBalance` is provided to prevent front running attacks where a\\n   *      user could attempt to claim before and after this is set.\\n   */\\n  function setPendingInstantMintBalance(\\n    address user,\\n    uint256 epoch,\\n    uint256 oldBalance,\\n    uint256 newBalance\\n  ) external updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (\\n      oldBalance != instantMintAmtsPerEpoch[epoch][user].collateralDeposited\\n    ) {\\n      revert UnexpectedMintBalance();\\n    }\\n    if (epoch > currentEpoch) {\\n      revert CannotServiceFutureEpoch();\\n    }\\n    instantMintAmtsPerEpoch[epoch][user].collateralDeposited = newBalance;\\n    emit PendingInstantMintBalanceSet(user, epoch, oldBalance, newBalance);\\n  }\\n\\n  /**\\n   * @notice Allows for the `MANAGER_ADMIN` to arbitrarily set an exchange\\n   *         rate for a given epoch\\n   *\\n   * @param correctExchangeRate      The exchange rate we wish to update to\\n   * @param epochToSet               The epoch for which we want to set the rate\\n   * @param _lastSetMintExchangeRate Value to set `lastSetMintExchangeRate` to\\n   *                                 if not equal to 0\\n   *\\n   * @dev This function allows the caller to also update the\\n   *      `lastSetMintExchangeRate`, which is compared against\\n   *      when calling `setMintExchangeRate` to prevent large\\n   *      swings in prices.\\n   */\\n  function overrideExchangeRate(\\n    uint256 correctExchangeRate,\\n    uint256 epochToSet,\\n    uint256 _lastSetMintExchangeRate\\n  ) external override updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (epochToSet >= currentEpoch) {\\n      revert MustServicePastEpoch();\\n    }\\n    uint256 incorrectRate = epochToExchangeRate[epochToSet];\\n    epochToExchangeRate[epochToSet] = correctExchangeRate;\\n    if (_lastSetMintExchangeRate != 0) {\\n      lastSetMintExchangeRate = _lastSetMintExchangeRate;\\n    }\\n    emit MintExchangeRateOverridden(\\n      epochToSet,\\n      incorrectRate,\\n      correctExchangeRate,\\n      lastSetMintExchangeRate\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets mint exchange rate delta limit\\n   *\\n   * @param _exchangeRateDeltaLimit New mint exchange rate delta limit (in bps)\\n   */\\n  function setMintExchangeRateDeltaLimit(\\n    uint256 _exchangeRateDeltaLimit\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    uint256 oldExchangeRateDeltaLimit = exchangeRateDeltaLimit;\\n    exchangeRateDeltaLimit = _exchangeRateDeltaLimit;\\n    emit ExchangeRateDeltaLimitSet(\\n      oldExchangeRateDeltaLimit,\\n      _exchangeRateDeltaLimit\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets mint fee\\n   *\\n   * @param _mintFee new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setMintFee(\\n    uint256 _mintFee\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    if (_mintFee > BPS_DENOMINATOR) {\\n      revert MintFeeTooLarge();\\n    }\\n    uint256 oldMintFee = mintFee;\\n    mintFee = _mintFee;\\n    emit MintFeeSet(oldMintFee, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Sets minimum deposit amount\\n   *\\n   * @param _minimumDepositAmount New minimum deposit amount\\n   *                              (in decimals specified by `collateral`)\\n   *\\n   * @dev Must be larger than BPS_DENOMINATOR due to keep our `_getMintFees`\\n   *      calculation correct. For example, if a deposit amount is less than\\n   *      BPS_DENOMINAOR (say 9999) and `mintFee` = 1,\\n   *      (collateralAmount * mintFee) / BPS_DENOMINATOR will incorrectly\\n   *      return 0.\\n   */\\n  function setMinimumDepositAmount(\\n    uint256 _minimumDepositAmount\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    if (_minimumDepositAmount < BPS_DENOMINATOR) {\\n      revert MinimumDepositAmountTooSmall();\\n    }\\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\\n    minimumDepositAmount = _minimumDepositAmount;\\n    emit MinimumDepositAmountSet(\\n      oldMinimumDepositAmount,\\n      _minimumDepositAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets fee recipient\\n   *\\n   * @param _feeRecipient New fee recipient address\\n   */\\n  function setFeeRecipient(\\n    address _feeRecipient\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    address oldFeeRecipient = feeRecipient;\\n    feeRecipient = _feeRecipient;\\n    emit FeeRecipientSet(oldFeeRecipient, _feeRecipient);\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much CASH should be\\n   *         minted\\n   *\\n   * @param collateralAmountIn Amount of `collateral` to exchange\\n   *                           (in 18 decimals)\\n   * @param epoch              The epoch we want to set the rate\\n   *                           for\\n   *\\n   * @return cashAmountOut The amount of cash to be returned\\n   *\\n   * @dev Scales to 24 decimals to divide by exchange rate in 6 decimals,\\n   *      bringing us down to 18 decimals of precision\\n   */\\n  function _getMintAmountForEpoch(\\n    uint256 collateralAmountIn,\\n    uint256 epoch\\n  ) private view returns (uint256 cashAmountOut) {\\n    uint256 amountE36 = _scaleUp(collateralAmountIn) * 1e18;\\n    cashAmountOut = amountE36 / epochToExchangeRate[epoch];\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how\\n   *\\n   *\\n   * @param collateralAmount Amount `collateral` to exchange\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getMintFees(\\n    uint256 collateralAmount\\n  ) private view returns (uint256) {\\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Scale provided amount up by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting the collateral's decimals\\n   *      representation to the CASH amount decimals representation.\\n   */\\n  function _scaleUp(uint256 amount) private view returns (uint256) {\\n    return amount * decimalsMultiplier;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Pause Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Will pause minting functionality of this contract\\n   *\\n   */\\n  function pause() external onlyRole(PAUSER_ADMIN) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Will unpause minting functionality of this contract\\n   */\\n  function unpause() external onlyRole(MANAGER_ADMIN) {\\n    _unpause();\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                    Epoch and Rate Limiting Logic\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Update the duration of one epoch\\n   *\\n   * @param _epochDuration The epoch duration in seconds\\n   *\\n   * @dev The epoch duration must be smaller than `epochStartTimestampOffset`\\n   */\\n  function setEpochDuration(\\n    uint256 _epochDuration\\n  ) external updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (_epochDuration <= epochStartTimestampOffset) {\\n      revert EpochDurationTooSmall();\\n    }\\n    uint256 oldEpochDuration = epochDuration;\\n    epochDuration = _epochDuration;\\n    transitionEpoch();\\n    emit EpochDurationSet(oldEpochDuration, _epochDuration);\\n  }\\n\\n  /**\\n   * @notice Update the epoch start timestamp offset\\n   *\\n   * @param _epochStartTimestampOffset The epoch start timestamp offset in seconds\\n   */\\n  function setEpochTimestampOffset(\\n    uint256 _epochStartTimestampOffset\\n  ) external updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (_epochStartTimestampOffset >= epochDuration) {\\n      revert EpochStartTimestampOffsetTooLarge();\\n    }\\n\\n    // Cache epochStartTimestampOffset\\n    uint256 oldEpochStartTimestampOffset = epochStartTimestampOffset;\\n\\n    // Variable for holding difference in epoch offsets\\n    uint256 epochOffsetDiff;\\n\\n    // `currentEpochStartTimestamp` will be moved forward, making the current\\n    // epoch longer and positively translating the epoch\\n    if (_epochStartTimestampOffset > oldEpochStartTimestampOffset) {\\n      // Need to ensure that forwarding `currentEpochStartTimestamp` will not\\n      // cause an underflow in `transitionEpoch`\\n      epochOffsetDiff =\\n        _epochStartTimestampOffset -\\n        oldEpochStartTimestampOffset;\\n      if (block.timestamp < currentEpochStartTimestamp + epochOffsetDiff) {\\n        revert InvalidOffsetAtCurrentTime();\\n      }\\n      currentEpochStartTimestamp += epochOffsetDiff;\\n    }\\n    // `currentEpochStartTimestamp` will be moved backwards, making the current\\n    // epoch shorter and negatively translating the epoch\\n    else {\\n      // We are already at a timestamp that is > currentEpochStartTimestamp, so\\n      // there is no need to worry about potential underflow\\n      epochOffsetDiff =\\n        oldEpochStartTimestampOffset -\\n        _epochStartTimestampOffset;\\n      currentEpochStartTimestamp -= epochOffsetDiff;\\n    }\\n\\n    epochStartTimestampOffset = _epochStartTimestampOffset;\\n\\n    transitionEpoch();\\n\\n    emit EpochStartTimestampOffsetSet(\\n      oldEpochStartTimestampOffset,\\n      _epochStartTimestampOffset\\n    );\\n  }\\n\\n  /**\\n   * @notice Modifier to transition epoch\\n   */\\n  modifier updateEpoch() {\\n    transitionEpoch();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transition to another epoch\\n   *\\n   * @dev Should be called prior to `_checkAndUpdateRedeemLimit`\\n   *      and `_checkAndUpdateMintLimit`\\n   * @dev Epochs do not always have to be incremented by 1\\n   *\\n   * @notice If this function determines to transition the epoch\\n   *         1) The total supply at the end of the epoch is stored\\n   *         2) `currentRedeemAmount` & `currentMintAmount` are set to 0\\n   *         3) `currentEpoch` is incremented by number of epochs that\\n   *            have elapsed\\n   *         4) `currentEpochStartTimestamp` is set.\\n   */\\n  function transitionEpoch() public {\\n    uint256 epochDifference = (block.timestamp - currentEpochStartTimestamp) /\\n      epochDuration;\\n    if (epochDifference > 0) {\\n      currentRedeemAmount = 0;\\n      currentMintAmount = 0;\\n      currentEpoch += epochDifference;\\n      currentEpochStartTimestamp =\\n        block.timestamp -\\n        (block.timestamp % epochDuration) +\\n        epochStartTimestampOffset;\\n      if (currentEpochStartTimestamp > block.timestamp) {\\n        currentEpochStartTimestamp -= epochDuration;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Update the amount of token that can be minted during one epoch\\n   *\\n   * @param _mintLimit The token amount\\n   *\\n   * @dev If a limit is zero, the relevant check always fails.\\n   */\\n  function setMintLimit(uint256 _mintLimit) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldMintLimit = mintLimit;\\n    mintLimit = _mintLimit;\\n    emit MintLimitSet(oldMintLimit, _mintLimit);\\n  }\\n\\n  /**\\n   * @notice Update the amount of token that can be redeemed during one epoch\\n   *\\n   * @param _redeemLimit The token amount\\n   *\\n   * @dev If a limit is zero, the relevant check always fails.\\n   */\\n  function setRedeemLimit(\\n    uint256 _redeemLimit\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldRedeemLimit = redeemLimit;\\n    redeemLimit = _redeemLimit;\\n    emit RedeemLimitSet(oldRedeemLimit, _redeemLimit);\\n  }\\n\\n  /**\\n   * @notice Checks the requested mint amount against the rate limiter\\n   *\\n   * @param collateralAmountIn The requested mint amount\\n   *\\n   * @dev Reverts if the requested mint amount exceeds the current limit\\n   * @dev Should only be called w/n functions w/ `updateEpoch` modifier\\n   */\\n  function _checkAndUpdateMintLimit(uint256 collateralAmountIn) private {\\n    if (collateralAmountIn > mintLimit - currentMintAmount) {\\n      revert MintExceedsRateLimit();\\n    }\\n\\n    currentMintAmount += collateralAmountIn;\\n  }\\n\\n  /**\\n   * @notice Checks the requested redeem amount against the rate limiter\\n   *\\n   * @param amount The requested redeem amount\\n   *\\n   * @dev Reverts if the requested redeem amount exceeds the current limit\\n   * @dev Should only be called w/n function w/ `updateEpoch` modifier\\n   */\\n  function _checkAndUpdateRedeemLimit(uint256 amount) private {\\n    if (amount == 0) {\\n      revert RedeemAmountCannotBeZero();\\n    }\\n    if (amount > redeemLimit - currentRedeemAmount) {\\n      revert RedeemExceedsRateLimit();\\n    }\\n\\n    currentRedeemAmount += amount;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          Redeem Logic\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Adds a RedemptionRequests member to the current epoch array &\\n   *         burns tokens\\n   *\\n   * @param amountCashToRedeem The requested redeem amount\\n   */\\n  function requestRedemption(\\n    uint256 amountCashToRedeem\\n  )\\n    external\\n    override\\n    updateEpoch\\n    nonReentrant\\n    whenNotPaused\\n    checkKYC(msg.sender)\\n  {\\n    if (amountCashToRedeem < minimumRedeemAmount) {\\n      revert WithdrawRequestAmountTooSmall();\\n    }\\n\\n    _checkAndUpdateRedeemLimit(amountCashToRedeem);\\n\\n    redemptionInfoPerEpoch[currentEpoch].addressToBurnAmt[\\n        msg.sender\\n      ] += amountCashToRedeem;\\n    redemptionInfoPerEpoch[currentEpoch].totalBurned += amountCashToRedeem;\\n\\n    cash.burnFrom(msg.sender, amountCashToRedeem);\\n\\n    emit RedemptionRequested(msg.sender, amountCashToRedeem, currentEpoch);\\n  }\\n\\n  /**\\n   * @notice Allows for an admin account to distribute collateral to users\\n   *         based off of the total amount of cash tokens burned w/n a given\\n   *         epoch. This function also allows for an admin to refund redemption\\n   *         requests w/n an epoch provided that the redemption cannot be\\n   *         serviced\\n   *\\n   * @param redeemers              List of addresses to which we want to\\n   *                               issue redemptions to\\n   * @param refundees              List of addresses to which we want to issue\\n   *                               refunds to in the form of cash tokens\\n   * @param collateralAmountToDist The total amount to distribute for redemptions\\n   *                               including fees to accrue to Ondo\\n   *                               (In units of collateral)\\n   * @param epochToService         The epoch number we wish to issue redemptions/\\n   *                               refunds for\\n   * @param fees                   The amount of fees to send to Ondo\\n   *                               (In units of collateral)\\n   */\\n  function completeRedemptions(\\n    address[] calldata redeemers,\\n    address[] calldata refundees,\\n    uint256 collateralAmountToDist,\\n    uint256 epochToService,\\n    uint256 fees\\n  ) external override updateEpoch onlyRole(MANAGER_ADMIN) {\\n    _checkAddressesKYC(redeemers);\\n    _checkAddressesKYC(refundees);\\n    if (epochToService >= currentEpoch) {\\n      revert MustServicePastEpoch();\\n    }\\n    // Calculate the total quantity of shares tokens burned w/n an epoch\\n    uint256 refundedAmt = _processRefund(refundees, epochToService);\\n    uint256 totalBurnedAfterRefunds = redemptionInfoPerEpoch[epochToService]\\n      .totalBurned - refundedAmt;\\n    redemptionInfoPerEpoch[epochToService]\\n      .totalBurned = totalBurnedAfterRefunds;\\n    uint256 amountToDist = collateralAmountToDist - fees;\\n    _processRedemption(\\n      redeemers,\\n      amountToDist,\\n      totalBurnedAfterRefunds,\\n      epochToService\\n    );\\n    if (fees > 0) {\\n      collateral.safeTransferFrom(assetSender, feeRecipient, fees);\\n    }\\n    emit RedemptionFeesCollected(feeRecipient, fees, epochToService);\\n  }\\n\\n  /**\\n   * @notice Will iterate over the array of `addressToWithdraw` calculate\\n   *         the proportion of burned tokens w/n a given epoch and will\\n   *         then distribute collateral based off this % of burned tokens\\n   *\\n   * @param redeemers               List of addresses to issue redemptions too\\n   * @param amountToDist            The amount to distribute to clients minus\\n   *                                the fee amount taken by Ondo\\n   * @param totalBurnedAfterRefunds The total amount of tokens burned in an\\n   *                                epoch minus those burned by users who\\n   *                                are issued a refund\\n   * @param epochToService          The epoch we wish to service redemptions\\n   *                                and redemptions for\\n   */\\n  function _processRedemption(\\n    address[] calldata redeemers,\\n    uint256 amountToDist,\\n    uint256 totalBurnedAfterRefunds,\\n    uint256 epochToService\\n  ) private {\\n    uint256 size = redeemers.length;\\n    for (uint256 i = 0; i < size; ++i) {\\n      address redeemer = redeemers[i];\\n      uint256 cashAmountReturned = redemptionInfoPerEpoch[epochToService]\\n        .addressToBurnAmt[redeemer];\\n      redemptionInfoPerEpoch[epochToService].addressToBurnAmt[redeemer] = 0;\\n      uint256 collateralAmountDue = (amountToDist * cashAmountReturned) /\\n        totalBurnedAfterRefunds;\\n\\n      if (collateralAmountDue == 0) {\\n        revert CollateralRedemptionTooSmall();\\n      }\\n\\n      collateral.safeTransferFrom(assetSender, redeemer, collateralAmountDue);\\n      emit RedemptionCompleted(\\n        redeemer,\\n        cashAmountReturned,\\n        collateralAmountDue,\\n        epochToService\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Iterates over the array of `addressToRefund` and mint them\\n   *         back the same quantity of cash tokens burned.\\n   *\\n   * @param refundees      List of addresses we are issuing refunds for\\n   * @param epochToService The epoch we wish to service redemptions for\\n   *\\n   * @return totalCashAmountRefunded The total amount of cash refunded for `epochToService`.\\n   */\\n  function _processRefund(\\n    address[] calldata refundees,\\n    uint256 epochToService\\n  ) private returns (uint256 totalCashAmountRefunded) {\\n    uint256 size = refundees.length;\\n    for (uint256 i = 0; i < size; ++i) {\\n      address refundee = refundees[i];\\n      uint256 cashAmountBurned = redemptionInfoPerEpoch[epochToService]\\n        .addressToBurnAmt[refundee];\\n      redemptionInfoPerEpoch[epochToService].addressToBurnAmt[refundee] = 0;\\n      cash.mint(refundee, cashAmountBurned);\\n      totalCashAmountRefunded += cashAmountBurned;\\n      emit RefundIssued(refundee, cashAmountBurned, epochToService);\\n    }\\n    return totalCashAmountRefunded;\\n  }\\n\\n  /**\\n   * @notice will change the `assetSender` variable\\n   *\\n   * @param newAssetSender The address we wish to change `assetSender` too\\n   */\\n  function setAssetSender(\\n    address newAssetSender\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldAssetSender = assetSender;\\n    assetSender = newAssetSender;\\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\\n  }\\n\\n  /**\\n   * @notice Allows for `MANAGER_ADMIN` to set a new `minimumRedeemAmount`\\n   *\\n   * @param newRedeemMinimum The new minimum redemption amount\\n   *                         in units of 1e18\\n   */\\n  function setRedeemMinimum(\\n    uint256 newRedeemMinimum\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldRedeemMin = minimumRedeemAmount;\\n    minimumRedeemAmount = newRedeemMinimum;\\n    emit MinimumRedeemAmountSet(oldRedeemMin, minimumRedeemAmount);\\n  }\\n\\n  /**\\n   * @notice Custom view function to return the quantity burned by\\n   *         an address w/n a given epoch.\\n   *\\n   * @param epoch The epoch we want to query\\n   * @param user  The user we want to know the burned quantity\\n   *              of cash tokens for in a given epoch\\n   */\\n  function getBurnedQuantity(\\n    uint256 epoch,\\n    address user\\n  ) external view returns (uint256) {\\n    return redemptionInfoPerEpoch[epoch].addressToBurnAmt[user];\\n  }\\n\\n  /**\\n   * @notice Override admin function for changing the representation of the\\n   *         amount of CASH a user has burned to kick off redemption process\\n   *\\n   * @param user       The user whose balance is being set\\n   * @param epoch      The epoch in which to set user balance for\\n   * @param oldBalance The user's old redemption balance\\n   * @param balance    The user's new balance\\n   *\\n   * @dev The total burned amount for the epoch must be set appropriately\\n   *      in order to correctly calculate redemptions.\\n   */\\n  function setPendingRedemptionBalance(\\n    address user,\\n    uint256 epoch,\\n    uint256 oldBalance,\\n    uint256 balance\\n  ) external updateEpoch onlyRole(MANAGER_ADMIN) {\\n    if (epoch > currentEpoch) {\\n      revert CannotServiceFutureEpoch();\\n    }\\n    uint256 previousBalance = redemptionInfoPerEpoch[epoch].addressToBurnAmt[\\n      user\\n    ];\\n    if (oldBalance != previousBalance) {\\n      revert RedemptionBalanceMismatch();\\n    }\\n    // Increment or decrement total burned for the epoch based on whether we\\n    // are increasing or decreasing the balance.\\n    if (balance < previousBalance) {\\n      redemptionInfoPerEpoch[epoch].totalBurned -= previousBalance - balance;\\n    } else if (balance > previousBalance) {\\n      redemptionInfoPerEpoch[epoch].totalBurned += balance - previousBalance;\\n    }\\n    redemptionInfoPerEpoch[epoch].addressToBurnAmt[user] = balance;\\n    emit PendingRedemptionBalanceSet(\\n      user,\\n      epoch,\\n      balance,\\n      redemptionInfoPerEpoch[epoch].totalBurned\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           KYC FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check KYC status of an account\\n   */\\n  modifier checkKYC(address account) {\\n    _checkKYC(account);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Update KYC group of the contract for which\\n   *         accounts are checked against\\n   *\\n   * @param _kycRequirementGroup The new KYC requirement group\\n   */\\n  function setKYCRequirementGroup(\\n    uint256 _kycRequirementGroup\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    _setKYCRequirementGroup(_kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Update KYC registry address\\n   *\\n   * @param _kycRegistry The new KYC registry address\\n   */\\n  function setKYCRegistry(\\n    address _kycRegistry\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    _setKYCRegistry(_kycRegistry);\\n  }\\n\\n  /**\\n   * @notice Private function to check KYC status\\n   *         of an address\\n   *\\n   * @param account The account to check KYC status for\\n   */\\n  function _checkKYC(address account) private view {\\n    if (!_getKYCStatus(account)) {\\n      revert KYCCheckFailed();\\n    }\\n  }\\n\\n  /**\\n   * @notice Private function to check KYC status\\n   *         of an array of addresses\\n   *\\n   * @param accounts The accounts to check KYC status for\\n   */\\n  function _checkAddressesKYC(address[] calldata accounts) private view {\\n    uint256 size = accounts.length;\\n    for (uint256 i = 0; i < size; ++i) {\\n      _checkKYC(accounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows for arbitrary batched calls\\n   *\\n   * @dev All external calls made through this function will\\n   *      msg.sender == contract address\\n   *\\n   * @param exCallData Struct consisting of\\n   *       1) target - contract to call\\n   *       2) data - data to call target with\\n   *       3) value - eth value to call target with\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exCallData\\n  )\\n    external\\n    payable\\n    override\\n    nonReentrant\\n    onlyRole(MANAGER_ADMIN)\\n    whenPaused\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](exCallData.length);\\n    for (uint256 i = 0; i < exCallData.length; ++i) {\\n      (bool success, bytes memory ret) = address(exCallData[i].target).call{\\n        value: exCallData[i].value\\n      }(exCallData[i].data);\\n      require(success, \\\"Call Failed\\\");\\n      results[i] = ret;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is\\n  Initializable,\\n  IAccessControlEnumerableUpgradeable,\\n  AccessControlUpgradeable\\n{\\n  function __AccessControlEnumerable_init() internal onlyInitializing {}\\n\\n  function __AccessControlEnumerable_init_unchained()\\n    internal\\n    onlyInitializing\\n  {}\\n\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  IAccessControlUpgradeable,\\n  ERC165Upgradeable\\n{\\n  function __AccessControl_init() internal onlyInitializing {}\\n\\n  function __AccessControl_init_unchained() internal onlyInitializing {}\\n\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role);\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\n   *\\n   * Format of the revert message is described in {_checkRole}.\\n   *\\n   * _Available since v4.6._\\n   */\\n  function _checkRole(bytes32 role) internal view virtual {\\n    _checkRole(role, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            StringsUpgradeable.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            StringsUpgradeable.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * May emit a {RoleGranted} event.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) ||\\n        (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint8 version) {\\n    require(\\n      !_initializing && _initialized < version,\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized < type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  function __Pausable_init() internal onlyInitializing {\\n    __Pausable_init_unchained();\\n  }\\n\\n  function __Pausable_init_unchained() internal onlyInitializing {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    _requireNotPaused();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    _requirePaused();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Throws if the contract is paused.\\n   */\\n  function _requireNotPaused() internal view virtual {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n  }\\n\\n  /**\\n   * @dev Throws if the contract is not paused.\\n   */\\n  function _requirePaused() internal view virtual {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC20Upgradeable\\n{\\n  function __ERC20Burnable_init() internal onlyInitializing {}\\n\\n  function __ERC20Burnable_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev Destroys `amount` tokens from the caller.\\n   *\\n   * See {ERC20-_burn}.\\n   */\\n  function burn(uint256 amount) public virtual {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n   * allowance.\\n   *\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\n   * `amount`.\\n   */\\n  function burnFrom(address account, uint256 amount) public virtual {\\n    _spendAllowance(account, _msgSender(), amount);\\n    _burn(account, amount);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is\\n  Initializable,\\n  ERC20Upgradeable,\\n  PausableUpgradeable\\n{\\n  function __ERC20Pausable_init() internal onlyInitializing {\\n    __Pausable_init_unchained();\\n  }\\n\\n  function __ERC20Pausable_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - the contract must not be paused.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PresetMinterPauserUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauserUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  AccessControlEnumerableUpgradeable,\\n  ERC20BurnableUpgradeable,\\n  ERC20PausableUpgradeable\\n{\\n  function initialize(string memory name, string memory symbol)\\n    public\\n    virtual\\n    initializer\\n  {\\n    __ERC20PresetMinterPauser_init(name, symbol);\\n  }\\n\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  /**\\n   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n   * account that deploys the contract.\\n   *\\n   * See {ERC20-constructor}.\\n   */\\n  function __ERC20PresetMinterPauser_init(\\n    string memory name,\\n    string memory symbol\\n  ) internal onlyInitializing {\\n    __ERC20_init_unchained(name, symbol);\\n    __Pausable_init_unchained();\\n    __ERC20PresetMinterPauser_init_unchained(name, symbol);\\n  }\\n\\n  function __ERC20PresetMinterPauser_init_unchained(\\n    string memory,\\n    string memory\\n  ) internal onlyInitializing {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n    _setupRole(MINTER_ROLE, _msgSender());\\n    _setupRole(PAUSER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Creates `amount` new tokens for `to`.\\n   *\\n   * See {ERC20-_mint}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `MINTER_ROLE`.\\n   */\\n  function mint(address to, uint256 amount) public virtual {\\n    require(\\n      hasRole(MINTER_ROLE, _msgSender()),\\n      \\\"ERC20PresetMinterPauser: must have minter role to mint\\\"\\n    );\\n    _mint(to, amount);\\n  }\\n\\n  /**\\n   * @dev Pauses all token transfers.\\n   *\\n   * See {ERC20Pausable} and {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `PAUSER_ROLE`.\\n   */\\n  function pause() public virtual {\\n    require(\\n      hasRole(PAUSER_ROLE, _msgSender()),\\n      \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\"\\n    );\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses all token transfers.\\n   *\\n   * See {ERC20Pausable} and {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `PAUSER_ROLE`.\\n   */\\n  function unpause() public virtual {\\n    require(\\n      hasRole(PAUSER_ROLE, _msgSender()),\\n      \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\"\\n    );\\n    _unpause();\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  IERC20Upgradeable,\\n  IERC20MetadataUpgradeable\\n{\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  function __ERC20_init(string memory name_, string memory symbol_)\\n    internal\\n    onlyInitializing\\n  {\\n    __ERC20_init_unchained(name_, symbol_);\\n  }\\n\\n  function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n    internal\\n    onlyInitializing\\n  {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address to, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * NOTE: Does not update the allowance if the current allowance\\n   * is the maximum `uint256`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` and `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``from``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = allowance(owner, spender);\\n    require(\\n      currentAllowance >= subtractedValue,\\n      \\\"ERC20: decreased allowance below zero\\\"\\n    );\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, amount);\\n\\n    uint256 fromBalance = _balances[from];\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n      _balances[from] = fromBalance - amount;\\n    }\\n    _balances[to] += amount;\\n\\n    emit Transfer(from, to, amount);\\n\\n    _afterTokenTransfer(from, to, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n   *\\n   * Does not update the allowance amount in case of infinite allowance.\\n   * Revert if not enough allowance is available.\\n   *\\n   * Might emit an {Approval} event.\\n   */\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n  function __Context_init() internal onlyInitializing {}\\n\\n  function __Context_init_unchained() internal onlyInitializing {}\\n\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n  function __ERC165_init() internal onlyInitializing {}\\n\\n  function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165Upgradeable).interfaceId;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/token/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/external/openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/interfaces/ICashManager.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n */\\npragma solidity 0.8.16;\\n\\ninterface ICashManager {\\n  /// @notice Function called by user to request mint\\n  function requestMint(uint256 collateralIn) external;\\n\\n  /// @notice Function called by the user to instantly mint\\n  function instantMint(uint256 collateralIn) external;\\n\\n  /// @notice Function called by user when claiming minted CASH\\n  function claimMint(address user, uint256 epochToClaim) external;\\n\\n  /// @notice Sets the ExchangeRate independent of checks\\n  function overrideExchangeRate(\\n    uint256 correctExchangeRate,\\n    uint256 epochToSet,\\n    uint256 _lastSetMintExchangeRate\\n  ) external;\\n\\n  /// @notice Sets fee recipient\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  /// @notice Sets asset sender\\n  function setAssetSender(address newAssetSender) external;\\n\\n  /// @notice Sets minimum deposit amount\\n  function setMinimumDepositAmount(uint256 _minimumDepositAmount) external;\\n\\n  /// @notice Sets mint fee\\n  function setMintFee(uint256 _mintFee) external;\\n\\n  /// @notice Sets mint exchange rate\\n  function setMintExchangeRate(\\n    uint256 _mintExchangeRate,\\n    uint256 epochToSet\\n  ) external;\\n\\n  /// @notice Sets exchange rate delta limit\\n  function setMintExchangeRateDeltaLimit(\\n    uint256 _exchangeRateDeltaLimit\\n  ) external;\\n\\n  /// @notice User signals redemption request\\n  function requestRedemption(uint256 amountSharesTokenToRedeem) external;\\n\\n  /// @notice Asset senders fulfills redemption requests with `collateral` or\\n  ///         refund of CASH+\\n  function completeRedemptions(\\n    address[] calldata redeemers,\\n    address[] calldata refundees,\\n    uint256 collateralAmountToDist,\\n    uint256 epochToService,\\n    uint256 fees\\n  ) external;\\n\\n  /// @notice Admin function used to set the instant mint percent\\n  function setInstantMintPercentBPS(uint256 newInstantMintBPS) external;\\n\\n  /// @notice Admin function used to set the instant mint fee percent\\n  function setInstantMintFee(uint256 _instantMintFee) external;\\n\\n  /// @notice Adming function used to claim excess `CASH` on behalf of a user\\n  function claimExcess(address addressToClaim, uint256 epochToClaim) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when asset recipient is set\\n   *\\n   * @param oldAssetRecipient Old asset recipient\\n   * @param newAssetRecipient New asset recipient\\n   */\\n  event AssetRecipientSet(address oldAssetRecipient, address newAssetRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedeemMin The old redeem minimum value\\n   * @param newRedeemMin The new redeem minimum value\\n   */\\n  event MinimumRedeemAmountSet(uint256 oldRedeemMin, uint256 newRedeemMin);\\n\\n  /**\\n   * @notice Event emitted when mint fee\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when instant mint fee set\\n   *\\n   * @param oldFee The old instant minting fee\\n   * @param newFee The new instant minting fee\\n   */\\n  event InstantMintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when exchange rate is set for\\n   *         `collateral()`:`cash()`\\n   *\\n   * @param epoch   Epoch in which the mint exchange rate was set\\n   * @param oldRate Previous exchange rate\\n   * @param newRate New exchange rate\\n   *\\n   * @dev `rate` is represented in 6 decimals.\\n   */\\n  event MintExchangeRateSet(\\n    uint256 indexed epoch,\\n    uint256 oldRate,\\n    uint256 newRate\\n  );\\n\\n  /**\\n   * @notice Event emitted when exchange rate is overridden for a given epoch\\n   *         `collateral()`:`cash()`\\n   *\\n   * @param epoch                   Epoch in which the mint exchange rate was\\n   *                                set\\n   * @param oldRate                 Previous exchange rate\\n   * @param newRate                 New exchange rate\\n   * @param lastSetMintExchangeRate Value of lastSetMintExchangeRate\\n   *\\n   * @dev All rates are represented in 6 decimals.\\n   */\\n  event MintExchangeRateOverridden(\\n    uint256 indexed epoch,\\n    uint256 oldRate,\\n    uint256 newRate,\\n    uint256 lastSetMintExchangeRate\\n  );\\n\\n  /**\\n   * @notice Event emitted when exchange rate delta limit has been set\\n   *\\n   * @param oldLimit Previous limit\\n   * @param newLimit New limit\\n   */\\n  event ExchangeRateDeltaLimitSet(uint256 oldLimit, uint256 newLimit);\\n\\n  /**\\n   * @notice Event emitted when exchange rate has strayed too far from value\\n   *         at start of epoch\\n   *\\n   * @param lastEpochRate Previous exchange rate being compared against\\n   * @param newRate       New exchange rate\\n   *\\n   * @dev Both rates are represented in 6 decimals.\\n   */\\n  event MintExchangeRateCheckFailed(\\n    uint256 indexed epoch,\\n    uint256 lastEpochRate,\\n    uint256 newRate\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint limit is set\\n   *\\n   * @param oldLimit Old mint limit\\n   * @param newLimit New mint limit\\n   *\\n   * @dev See inheriting contract for representation\\n   */\\n  event MintLimitSet(uint256 oldLimit, uint256 newLimit);\\n\\n  /**\\n   * @notice Event emitted when redeem limit is set\\n   *\\n   * @param oldLimit Old mint limit\\n   * @param newLimit New mint limit\\n   *\\n   * @dev See inheriting contract for representation\\n   */\\n  event RedeemLimitSet(uint256 oldLimit, uint256 newLimit);\\n\\n  /**\\n   * @notice Event emitted when epochDurationSet\\n   *\\n   * @param oldDuration Old epoch duration\\n   * @param newDuration New epoch duration\\n   *\\n   * @dev See inheriting contract for representation\\n   */\\n  event EpochDurationSet(uint256 oldDuration, uint256 newDuration);\\n\\n  /**\\n   * @notice Event emitted when setEpochStartTimestampOffset\\n   *\\n   * @param oldOffset Old epoch start timestamp offset\\n   * @param newOffset New epoch start timestamp offset\\n   */\\n  event EpochStartTimestampOffsetSet(uint256 oldOffset, uint256 newOffset);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param cashAmountIn The amount of cash being burned\\n   * @param epoch        The epoch in which the redemption was submitted\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    uint256 cashAmountIn,\\n    uint256 indexed epoch\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    uint256 indexed epoch,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param cashAmountRequested      Amount of cash originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param epoch                    The epoch in which this redemption was\\n   *                                 requested\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    uint256 cashAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 indexed epoch\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param cashAmountOut             The amount of CASH token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param exchangeRate              The exchange rate set for the given epoch\\n   * @param epochClaimedFrom          The epoch in which the user requested\\n   *                                  to mint\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    uint256 cashAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 exchangeRate,\\n    uint256 indexed epochClaimedFrom\\n  );\\n\\n  /**\\n   * @notice Event emitted when an instant Mint occurs\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param epoch                     The total amount deposited\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken (unit collateral)\\n   * @param instantMintAmount         The amount of CASH tokens minted\\n   *\\n   */\\n  event InstantMint(\\n    address indexed user,\\n    uint256 indexed epoch,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 instantMintAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when excess CASH from a mint is claimed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param cashAmountOwed            The total amount of CASH owed to `user`\\n   * @param cashAmountGiven           The excess CASH amount claimed\\n   * @param collateralAmountDeposited The amount of collateral Deposited\\n   * @param exchangeRate              The exchange rate set for the given epoch\\n   * @param epochClaimedFrom          The epoch in which the user requested\\n   *                                  to mint\\n   */\\n  event ExcessMintClaimed(\\n    address indexed user,\\n    uint256 cashAmountOwed,\\n    uint256 cashAmountGiven,\\n    uint256 collateralAmountDeposited,\\n    uint256 exchangeRate,\\n    uint256 indexed epochClaimedFrom\\n  );\\n\\n  /**\\n   * @notice Event emitted when the redemption fees are collected\\n   *\\n   * @param beneficiary         The address of who is receiving the fees\\n   * @param collateralAmountOut The amount of collateral that the `beneficiary`\\n   *                            is receiving\\n   * @param epoch               The epoch in which this fee dispersal happened\\n   */\\n  event RedemptionFeesCollected(\\n    address indexed beneficiary,\\n    uint256 collateralAmountOut,\\n    uint256 indexed epoch\\n  );\\n\\n  /**\\n   * @notice Event emitted when a user is issued a redemption refund\\n   *\\n   * @param user          The address of the user being refunded\\n   * @param cashAmountOut The amount of cash being refunded to the user\\n   * @param epoch         The epoch in which this redemption was requested\\n   */\\n  event RefundIssued(\\n    address indexed user,\\n    uint256 cashAmountOut,\\n    uint256 indexed epoch\\n  );\\n\\n  /**\\n   * @notice Event emitted when a user mint balance is set manually\\n   *\\n   * @param user       The address of the user having their mint balance set\\n   * @param epoch      The epoch in which the balance was set\\n   * @param oldBalance The user's previous balance\\n   * @param newBalance The user's new mint balance\\n   */\\n  event PendingMintBalanceSet(\\n    address indexed user,\\n    uint256 indexed epoch,\\n    uint256 oldBalance,\\n    uint256 newBalance\\n  );\\n\\n  /**\\n   * @notice Event emitted when a user mint balance is set manually\\n   *\\n   * @param user       The address of the user having their mint balance set\\n   * @param epoch      The epoch in which the balance was set\\n   * @param oldBalance The user's previous balance\\n   * @param newBalance The user's new mint balance\\n   */\\n  event PendingInstantMintBalanceSet(\\n    address indexed user,\\n    uint256 indexed epoch,\\n    uint256 oldBalance,\\n    uint256 newBalance\\n  );\\n\\n  /**\\n   * @notice Event emitted when a user redemption balance is set manually\\n   *\\n   * @param user        The address of the user having their redemption balance\\n   *                    set\\n   * @param epoch       The epoch in which the balance was set\\n   * @param balance     The new redemption balance\\n   * @param totalBurned The total amount of cash burned in epoch\\n   */\\n  event PendingRedemptionBalanceSet(\\n    address indexed user,\\n    uint256 indexed epoch,\\n    uint256 balance,\\n    uint256 totalBurned\\n  );\\n\\n  /**\\n   * @notice Event emitted when instant mint percent is changed\\n   *\\n   * @param oldInstantMintBPS The old instant mint percent\\n   * @param newInstantMintBPS The new instant mint percent\\n   */\\n  event InstantMintPercentSet(\\n    uint256 oldInstantMintBPS,\\n    uint256 newInstantMintBPS\\n  );\\n\\n  /** @notice Event emitted when a user is manually minted `CASH`\\n   *\\n   * @param user   The address of the user being minted `CASH`\\n   * @param amount The amount of `CASH` being minted to the user\\n   */\\n  event AdminMintedCash(address indexed user, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when the max admin mint amount is set\\n   *\\n   * @param oldMaxAdminMintAmount The previous max admin mint amount\\n   * @param newMaxAdminMintAmount The new max admin mint amount\\n   */\\n  event MaxAdminMintAmountSet(\\n    uint256 oldMaxAdminMintAmount,\\n    uint256 newMaxAdminMintAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when the instant mint feature is\\n   *         toggled\\n   *\\n   * @param status true == enabled | false == disabled\\n   */\\n  event InstantMintingEnabled(bool status);\\n\\n  /// ERRORS ///\\n  error CollateralZeroAddress();\\n  error CashZeroAddress();\\n  error AssetRecipientZeroAddress();\\n  error AssetSenderZeroAddress();\\n  error FeeRecipientZeroAddress();\\n  error MinimumDepositAmountTooSmall();\\n  error ZeroExchangeRate();\\n\\n  error KYCCheckFailed();\\n  error MintRequestAmountTooSmall();\\n  error NoCashToClaim();\\n  error ExchangeRateNotSet();\\n\\n  error EpochNotElapsed();\\n  error EpochDurationTooSmall();\\n  error EpochExchangeRateAlreadySet();\\n  error InvalidOffsetAtCurrentTime();\\n  error EpochStartTimestampOffsetTooLarge();\\n  error UnexpectedMintBalance();\\n\\n  error MintFeeTooLarge();\\n  error MintExceedsRateLimit();\\n  error RedeemAmountCannotBeZero();\\n  error RedeemExceedsRateLimit();\\n  error WithdrawRequestAmountTooSmall();\\n  error CollateralRedemptionTooSmall();\\n  error MustServicePastEpoch();\\n  error CannotServiceFutureEpoch();\\n  error RedemptionBalanceMismatch();\\n\\n  error FeatureNotEnabled();\\n  error InstantMintTooLarge();\\n  error CannotClaimMint();\\n  error CannotClaimExcess();\\n  error AdminMintAmountTooLarge();\\n  error ZeroAddressInput();\\n}\\n\"\r\n    },\r\n    \"contracts/cash/interfaces/IKYCRegistry.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IKYCRegistry\\n * @author Ondo Finance\\n * @notice The interface for Ondo's KYC Registry contract\\n */\\ninterface IKYCRegistry {\\n  /**\\n   * @notice Retrieves KYC status of an account\\n   *\\n   * @param kycRequirementGroup The KYC group for which we wish to check\\n   * @param account             The account we wish to retrieve KYC status for\\n   *\\n   * @return bool Whether the `account` is KYC'd\\n   */\\n  function getKYCStatus(\\n    uint256 kycRequirementGroup,\\n    address account\\n  ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/interfaces/IKYCRegistryClient.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/cash/interfaces/IKYCRegistry.sol\\\";\\n\\n/**\\n * @title IKYCRegistryClient\\n * @author Ondo Finance\\n * @notice The client interface Ondo's KYC Registry contract.\\n */\\ninterface IKYCRegistryClient {\\n  /// @notice Returns what KYC group this client checks accounts for\\n  function kycRequirementGroup() external view returns (uint256);\\n\\n  /// @notice Returns reference to the KYC registry that this client queries\\n  function kycRegistry() external view returns (IKYCRegistry);\\n\\n  /// @notice Sets the KYC group\\n  function setKYCRequirementGroup(uint256 group) external;\\n\\n  /// @notice Sets the KYC registry reference\\n  function setKYCRegistry(address registry) external;\\n\\n  /// @notice Error for when caller attempts to set the KYC registry refernce\\n  ///         to the zero address.\\n  error RegistryZeroAddress();\\n\\n  /**\\n   * @dev Event for when the KYC registry reference is set\\n   *\\n   * @param oldRegistry The old registry\\n   * @param newRegistry The new registry\\n   */\\n  event KYCRegistrySet(address oldRegistry, address newRegistry);\\n\\n  /**\\n   * @dev Event for when the KYC group for this client is set\\n   *\\n   * @param oldRequirementGroup The old KYC group\\n   * @param newRequirementGroup The new KYC group\\n   */\\n  event KYCRequirementGroupSet(\\n    uint256 oldRequirementGroup,\\n    uint256 newRequirementGroup\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/cash/interfaces/IMulticall.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IMulticall\\n * @author Ondo Finance\\n * @notice This interface dictates the required external functions for Ondo's\\n *         multicall contract.\\n */\\ninterface IMulticall {\\n  /// @dev External call data structure\\n  struct ExCallData {\\n    // The contract we intend to call\\n    address target;\\n    // The encoded function data for the call\\n    bytes data;\\n    // The ether value to be sent in the call\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Batches multiple function calls to different target contracts\\n   *         and returns the resulting data provided all calls were successful\\n   *\\n   * @dev The `msg.sender` is always the contract from which this function\\n   *      is being called\\n   *\\n   * @param exdata The ExCallData struct array containing the information\\n   *               regarding which contract to call, what data to call with,\\n   *               and what ether value to send along with the call\\n   *\\n   * @return results The resulting data returned from each call made\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exdata\\n  ) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/cash/kyc/KYCRegistryClient.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/cash/interfaces/IKYCRegistry.sol\\\";\\nimport \\\"contracts/cash/interfaces/IKYCRegistryClient.sol\\\";\\n\\n/**\\n * @title KYCRegistryClientInitializable\\n * @author Ondo Finance\\n * @notice This abstract contract manages state required for clients\\n *         of the KYC registry.\\n */\\nabstract contract KYCRegistryClient is IKYCRegistryClient {\\n  // KYC Registry address\\n  IKYCRegistry public override kycRegistry;\\n  // KYC requirement group\\n  uint256 public override kycRequirementGroup;\\n\\n  /**\\n   * @notice Sets the KYC registry address for this client\\n   *\\n   * @param _kycRegistry The new KYC registry address\\n   */\\n  function _setKYCRegistry(address _kycRegistry) internal {\\n    if (_kycRegistry == address(0)) {\\n      revert RegistryZeroAddress();\\n    }\\n    address oldKYCRegistry = address(kycRegistry);\\n    kycRegistry = IKYCRegistry(_kycRegistry);\\n    emit KYCRegistrySet(oldKYCRegistry, _kycRegistry);\\n  }\\n\\n  /**\\n   * @notice Sets the KYC registry requirement group for this\\n   *         client to check kyc status for\\n   *\\n   * @param _kycRequirementGroup The new KYC group\\n   */\\n  function _setKYCRequirementGroup(uint256 _kycRequirementGroup) internal {\\n    uint256 oldKYCLevel = kycRequirementGroup;\\n    kycRequirementGroup = _kycRequirementGroup;\\n    emit KYCRequirementGroupSet(oldKYCLevel, _kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Checks whether an address has been KYC'd\\n   *\\n   * @param account The address to check\\n   */\\n  function _getKYCStatus(address account) internal view returns (bool) {\\n    return kycRegistry.getKYCStatus(kycRequirementGroup, account);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/kyc/KYCRegistryClientConstructable.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/cash/kyc/KYCRegistryClient.sol\\\";\\n\\n/**\\n * @title KYCRegistryClientConstructable\\n * @author Ondo Finance\\n * @notice This abstract contract allows inheritors to access the KYC list\\n *         maintained by the registry\\n */\\nabstract contract KYCRegistryClientConstructable is KYCRegistryClient {\\n  /**\\n   * @notice Constructor\\n   *\\n   * @param _kycRegistry         Address of the registry contract\\n   * @param _kycRequirementGroup KYCLevel of the contract.\\n   */\\n  constructor(address _kycRegistry, uint256 _kycRequirementGroup) {\\n    _setKYCRegistry(_kycRegistry);\\n    _setKYCRequirementGroup(_kycRequirementGroup);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/cash/token/Cash.sol\": {\r\n      \"content\": \"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n   \u2553\u2588\u2588\u2580\u2514 ,\u2553\u2584\u2584\u2584, '\u2580\u2588\u2588\u2584\\n  \u2588\u2588\u2580 \u2584\u2588\u2588\u2580\u2580\u2559\u2559\u2580\u2580\u2588\u2588\u2584 \u2514\u2588\u2588\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \u2588\u2588 ,\u2588\u2588\u00ac \u2584\u2588\u2588\u2588\u2588\u2584  \u2580\u2588\u2584 \u2559\u2588\u2584      \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2584   \u2588\u2588\u2588\u2584    \u2588\u2588  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2584    \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588,\\n\u2588\u2588  \u2588\u2588 \u2552\u2588\u2580'   \u2559\u2588\u258c \u2559\u2588\u258c \u2588\u2588     \u2590\u2588\u2588      \u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588,  \u2588\u2588  \u2588\u2588\u258c    \u2514\u2588\u2588\u258c  \u2588\u2588\u258c     \u2514\u2588\u2588\u258c\\n\u2588\u2588 \u2590\u2588\u258c \u2588\u2588      \u255f\u2588  \u2588\u258c \u255f\u2588     \u2588\u2588\u258c      \u2590\u2588\u2588  \u2588\u2588 \u2514\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u258c     \u255f\u2588\u2588 j\u2588\u2588       \u255f\u2588\u2588\\n\u255f\u2588  \u2588\u2588 \u2559\u2588\u2588    \u2584\u2588\u2580 \u2590\u2588\u258c \u2588\u2588     \u2559\u2588\u2588      \u2588\u2588\u258c  \u2588\u2588   \u2559\u2588\u2588\u2588\u2588  \u2588\u2588\u258c    \u2584\u2588\u2588\u2580  \u2588\u2588\u258c     ,\u2588\u2588\u2580\\n \u2588\u2588 \\\"\u2588\u2588, \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2310      \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2588\u2588     \u2559\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580     \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580`\\n  \u2588\u2588\u2584 \u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2584\u2584,,,                \u00ac\u2500                                    '\u2500\u00ac\\n   \u2559\u2580\u2588\u2588\u2584 '\u2559\u2559\u2559\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\\n      \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588R\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/cash/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PresetMinterPauserUpgradeable.sol\\\";\\n\\n/// @notice This CASH token has enabled transfers only for addresses with the TRANSFER_ROLE.\\ncontract Cash is ERC20PresetMinterPauserUpgradeable {\\n  bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    require(\\n      hasRole(TRANSFER_ROLE, _msgSender()),\\n      \\\"Cash: must have TRANSFER_ROLE to transfer\\\"\\n    );\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_kycRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kycRequirementGroup\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminMintAmountTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimExcess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotServiceFutureEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CashZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralRedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochDurationTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochExchangeRateAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochStartTimestampOffsetTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeRateNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeatureNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InstantMintTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffsetAtCurrentTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYCCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumDepositAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintExceedsRateLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintRequestAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustServicePastEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCashToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemAmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemExceedsRateLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionBalanceMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedMintBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawRequestAmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroExchangeRate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminMintedCash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetRecipient\",\"type\":\"address\"}],\"name\":\"AssetRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"EpochDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOffset\",\"type\":\"uint256\"}],\"name\":\"EpochStartTimestampOffsetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountOwed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountGiven\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochClaimedFrom\",\"type\":\"uint256\"}],\"name\":\"ExcessMintClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateDeltaLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantMintAmount\",\"type\":\"uint256\"}],\"name\":\"InstantMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"InstantMintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInstantMintBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInstantMintBPS\",\"type\":\"uint256\"}],\"name\":\"InstantMintPercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"InstantMintingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"KYCRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRequirementGroup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequirementGroup\",\"type\":\"uint256\"}],\"name\":\"KYCRequirementGroupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxAdminMintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAdminMintAmount\",\"type\":\"uint256\"}],\"name\":\"MaxAdminMintAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedeemMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedeemMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedeemAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochClaimedFrom\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastEpochRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"MintExchangeRateCheckFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastSetMintExchangeRate\",\"type\":\"uint256\"}],\"name\":\"MintExchangeRateOverridden\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"MintExchangeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"MintLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"PendingInstantMintBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"PendingMintBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"}],\"name\":\"PendingRedemptionBalanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"RedeemLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountIn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SETTER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminMintCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"contract Cash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochToClaim\",\"type\":\"uint256\"}],\"name\":\"claimExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochToClaim\",\"type\":\"uint256\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"redeemers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"refundees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToDist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochToService\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"completeRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTimestampOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochToExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateDeltaLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBurnedQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountIn\",\"type\":\"uint256\"}],\"name\":\"instantMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instantMintAmtsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instantMintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRegistry\",\"outputs\":[{\"internalType\":\"contract IKYCRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRequirementGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSetMintExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAdminMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintRequestsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IMulticall.ExCallData[]\",\"name\":\"exCallData\",\"type\":\"tuple[]\"}],\"name\":\"multiexcall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"correctExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochToSet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastSetMintExchangeRate\",\"type\":\"uint256\"}],\"name\":\"overrideExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redemptionInfoPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountIn\",\"type\":\"uint256\"}],\"name\":\"requestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCashToRedeem\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"setAssetSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"name\":\"setEpochDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochStartTimestampOffset\",\"type\":\"uint256\"}],\"name\":\"setEpochTimestampOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setInstantMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instantMintFee\",\"type\":\"uint256\"}],\"name\":\"setInstantMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInstantMintBPS\",\"type\":\"uint256\"}],\"name\":\"setInstantMintPercentBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycRegistry\",\"type\":\"address\"}],\"name\":\"setKYCRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kycRequirementGroup\",\"type\":\"uint256\"}],\"name\":\"setKYCRequirementGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAdminMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAdminMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochToSet\",\"type\":\"uint256\"}],\"name\":\"setMintExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRateDeltaLimit\",\"type\":\"uint256\"}],\"name\":\"setMintExchangeRateDeltaLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"setMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"setPendingInstantMintBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"setPendingMintBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setPendingRedemptionBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemLimit\",\"type\":\"uint256\"}],\"name\":\"setRedeemLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRedeemMinimum\",\"type\":\"uint256\"}],\"name\":\"setRedeemMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transitionEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CashManager", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000e25d3fd9dcd38450d8a155441801801046b662a10000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db170000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db170000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db170000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db1700000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000abfb6c4a338f3780b35fdeee11e6bb445f13bdc40000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}