{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lumiii.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n\\r\\nimport \\\"./LumiiiGovernance.sol\\\";\\r\\nimport \\\"./LumiiiReflections.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract LumiiiToken is Context, IERC20, LumiiiGovernance, LumiiiReflections {\\r\\n\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    constructor (address charityWallet, address opsWallet, address routerAddress) public {\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        \\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\\r\\n         // Create a uniswap pair for this new token \\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        // Set charity and ops wallets\\r\\n        _charityWallet = charityWallet;\\r\\n        _opsWallet = opsWallet;\\r\\n        \\r\\n        //exclude owner, contract, charity wallet, and ops wallet from fee\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        // Exclude charity and ops wallet from rewards\\r\\n        excludeFromReward(_charityWallet);\\r\\n        excludeFromReward(_opsWallet);\\r\\n        excludeFromReward(address(0));\\r\\n        \\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Returns name of token\\r\\n    */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Returns symbol of token\\r\\n    */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Returns symbol of token\\r\\n    */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Returns total supply of token\\r\\n    */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Returns token balance for an account\\r\\n        @param account The address to check balance of\\r\\n    */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        // If account is excluded from fees, return true amount owned\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        // Return reflected amount owned converted to true amount\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Transfers tokens from msg.sender to recipient\\r\\n        @param recipient address of transfer recipient\\r\\n        @param amount token amount to transfer\\r\\n    */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        _moveDelegates(_delegates[msg.sender], _delegates[recipient], amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Delegate votes from msg.sender to delegatee\\r\\n        @param delegatee The address to delegate votes to\\r\\n    */\\r\\n    function delegate(address delegatee) external {\\r\\n        uint256 delegatorBalance = balanceOf(msg.sender);\\r\\n\\r\\n        address currentDelegate = _delegates[msg.sender]; // Will be 0 address if msg.sender has no delegates\\r\\n        _delegates[msg.sender] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(msg.sender, currentDelegate, delegatee);\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Get allowance for a user\\r\\n        @param owner address giving allowance\\r\\n        @param spender address spending tokens from owner\\r\\n    */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Approve user to spend tokens from msg.sender\\r\\n        @param spender address of user spending tokens\\r\\n        @param amount token amount to approve\\r\\n    */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Transfers tokens from sender to recipient\\r\\n        @param sender Address to send tokens from\\r\\n        @param recipient Address receiving tokens\\r\\n        @param amount Amount to transfer\\r\\n    */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"amount exceeds allowance\\\"));\\r\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Increase allowance of a user\\r\\n        @param spender Address to increase allowance of\\r\\n        @param addedValue Amount to increase allowance by\\r\\n    */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Decrease allowance of a user\\r\\n        @param spender Address to decrease allowance of\\r\\n        @param subtractedValue Amount to decrease allowance by\\r\\n    */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Set a new charity walllet\\r\\n        @param newWallet Address of new charity wallet\\r\\n    */\\r\\n    function setCharityWallet(address newWallet) external onlyOwner() {\\r\\n        // Include old wallet\\r\\n        includeInReward(_charityWallet);\\r\\n\\r\\n        _charityWallet = newWallet;\\r\\n\\r\\n        //Exclude new wallet\\r\\n        excludeFromReward(_charityWallet);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Set new operations wallet\\r\\n        @param newWallet Address of new operations wallet\\r\\n    */\\r\\n    function setOpsWallet(address newWallet) external onlyOwner() {\\r\\n        // Include old wallet\\r\\n        includeInReward(_opsWallet);\\r\\n\\r\\n        _opsWallet = newWallet;\\r\\n\\r\\n        // Exclude new wallet\\r\\n        excludeFromReward(_opsWallet);\\r\\n    }\\r\\n    \\r\\n     //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    /** \\r\\n        @notice Helper function for approve\\r\\n    */\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"approve from zero address\\\");\\r\\n        require(spender != address(0), \\\"approve to zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Helper function for transfer. Checks if transfer is valid, fees are taken, and if liquidity swap\\r\\n        should occour\\r\\n    */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        // Check if transfer is valid\\r\\n        require(from != address(0), \\\"transfer from zero address\\\");\\r\\n        require(to != address(0), \\\"transfer to zero address\\\");\\r\\n        require(amount > 0, \\\"amount not greater than zero\\\");\\r\\n        if(from != owner() && to != owner())\\r\\n            require(amount <= _maxTxAmount, \\\"amount exceeds maxTxAmount\\\");\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        \\r\\n        if(contractTokenBalance >= _maxTxAmount)\\r\\n        {\\r\\n            contractTokenBalance = _maxTxAmount;\\r\\n        }\\r\\n        \\r\\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\\r\\n        // check balance and add liquidity if needed\\r\\n        if (\\r\\n            overMinTokenBalance &&\\r\\n            !inSwapAndLiquify &&\\r\\n            from != uniswapV2Pair &&\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            //add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n        \\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n        \\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\r\\n            takeFee = false;\\r\\n        }\\r\\n        \\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from,to,amount,takeFee);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Swap tokens of local liquidity pool and add to uniswap pool\\r\\n    */\\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half);\\r\\n\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n        \\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Swaps LUMIII token for ETH\\r\\n    */\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Add liquidity to uniswap pool\\r\\n    */\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // function deliver(uint256 tAmount) public {\\r\\n    //     address sender = _msgSender();\\r\\n    //     require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n    //     (uint256 rAmount,,) = _getValues(tAmount);\\r\\n    //     _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    //     _rTotal = _rTotal.sub(rAmount);\\r\\n    //     _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    // }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/LumiiiGovernance.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./LumiiiStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract LumiiiGovernance is LumiiiStorage, Ownable{\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    /** \\r\\n        @notice Gets prior number of votes for an account as of given blockNumber\\r\\n        @param account Address of account to check\\r\\n        @param blockNumber Block number to get votes at\\r\\n    */\\r\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\\r\\n        require(blockNumber < block.number, \\\"LIFE::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Check implicit zero balance -> returning here\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Binary search\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2;\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Gets current votes for an account\\r\\n        @param account Address to get votes of\\r\\n    */\\r\\n    function getCurrentVotes(address account) external view returns (uint256) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Get delegatee for an address delegating\\r\\n        @param delegator Address to get delegatee for\\r\\n    */\\r\\n    function delegates(address delegator) external view returns (address) {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Move delegates from srcRep address to dstRep. If ether are the address, delegates are\\r\\n        increased/decreased accordingly rather than moved.\\r\\n        @param srcRep Address to move delegates from \\r\\n        @param dstRep Address to move delegates to\\r\\n        @param amount Amount of delegates to mvoe\\r\\n    */\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld = srcRepNum > 0\\r\\n                ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep]; \\r\\n                uint256 dstRepOld = dstRepNum > 0\\r\\n                ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Writes new checkpoint for delegatee with new votes and block number\\r\\n        @param delegatee Address for new checkppint\\r\\n        @param nCheckpoints Number of checkpoints for delegatee\\r\\n        @param oldVotes Number of votes for delegatee at old checkpoint\\r\\n        @param newVotes Number of votes for delegatee at new checkpoint\\r\\n    */\\r\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\r\\n        require(block.number < 2**32, \\\"block number exceeds 32 bits\\\");\\r\\n        uint32 blockNumber = uint32(block.number);\\r\\n\\r\\n        if (\\r\\n        nCheckpoints > 0 &&\\r\\n        checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); // Checkpoint object\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/LumiiiReflections.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"./LumiiiStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract LumiiiReflections is LumiiiStorage, Ownable {\\r\\n    /// @notice event emitted when SwapAndLiquifyEnabled is updated\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n\\r\\n    /// @notice event emitted when tokens are swapped and liquified\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    /// @notice event emitted when transfer occours\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /// @notice modifier to show that contract is in swapAndLiquify\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Caclulate tax fees for transfer amount\\r\\n        @param _amount Amount to calculate tax on\\r\\n    */\\r\\n    function calculateFees(uint256 _amount) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        uint256 tax = _amount.mul(_taxFee).div(10**2);\\r\\n        uint256 liquidity= _amount.mul(_liquidityFee).div(10**2);\\r\\n        uint256 charity = _amount.mul(_charityFee).div(10**2);\\r\\n        uint256 ops = _amount.mul(_opsFee).div(10**2);\\r\\n\\r\\n        return (tax, liquidity, charity, ops);\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n        @notice Sets maxTxPercent\\r\\n    */\\r\\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\\r\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\\r\\n            10**2\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Sets new fees\\r\\n    */\\r\\n    function setFees(uint256 taxFee, uint256 liquidityFee, uint256 charityFee, uint256 opsFee) external onlyOwner() {\\r\\n        require(opsFee + taxFee + liquidityFee + charityFee <= 10);\\r\\n\\r\\n        _taxFee = taxFee;\\r\\n        _liquidityFee = liquidityFee;\\r\\n        _charityFee = charityFee;\\r\\n        _opsFee = opsFee;\\r\\n\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Enable/disable swapAndLiquify \\r\\n    */\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Get true and reflected values for a transfer amount\\r\\n        @param tAmount true amount being transfered\\r\\n    */\\r\\n    function _getValues(uint256 tAmount) internal view returns (uint256, valueStruct memory, valueStruct memory) {\\r\\n        // Get the true transfer, fee, and liquidity values\\r\\n        valueStruct memory tValues = _getTValues(tAmount);\\r\\n        // Get the reflected amount, trasfer amount, and reflected fee\\r\\n        (uint256 rAmount, valueStruct memory rValues) = _getRValues(tAmount, tValues.fee, tValues.liquidity, \\r\\n                                                         tValues.charity, tValues.ops,  _getRate());\\r\\n\\r\\n        return (rAmount, rValues, tValues);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Gets true values for transfer amount\\r\\n        @param tAmount true amount being transfered\\r\\n    */\\r\\n    function _getTValues(uint256 tAmount) internal view returns (valueStruct memory) {\\r\\n        // Get the tax fee for true amount\\r\\n        valueStruct memory tValues;\\r\\n        // Get tax amount\\r\\n        (tValues.fee, tValues.liquidity, tValues.charity, tValues.ops) = calculateFees(tAmount);\\r\\n        // Substract tax fee and liquidity fee from true amount, result is the true transfer amount\\r\\n        tValues.transferAmount = tAmount.sub(tValues.fee).sub(tValues.liquidity).sub(tValues.charity).sub(tValues.ops);\\r\\n        return tValues;\\r\\n    }\\r\\n\\r\\n     /** \\r\\n        @notice Gets reflected values for transfer amount\\r\\n        @param tAmount true amount being transfered\\r\\n        @param tFee true rewards tax amount\\r\\n        @param tLiquidity true liquidity tax amount\\r\\n        @param tCharity true charity tax amount\\r\\n        @param tOps true operations tax amount\\r\\n        @param currentRate current rate of conversion between true and reflected space\\r\\n    */\\r\\n    function _getRValues(uint256 tAmount, uint256 tFee, \\r\\n                         uint256 tLiquidity,  uint256 tCharity, \\r\\n                         uint256 tOps,  uint256 currentRate \\r\\n    ) internal pure returns (uint256, valueStruct memory) {\\r\\n        valueStruct memory rValues;\\r\\n        // Covert true amount to reflected amount using current conversion rate\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        rValues.fee = tFee.mul(currentRate);\\r\\n        // Calcualte reflected liquidity fee \\r\\n        rValues.liquidity = tLiquidity.mul(currentRate);\\r\\n        // Get reflected charity fee\\r\\n        rValues.charity = tCharity.mul(currentRate);\\r\\n        // Get reflected operations fee\\r\\n        rValues.ops = tOps.mul(currentRate);\\r\\n        // Subtract reflexed tax and liqudity fee from reflected amount, result is reflected transfer amouunts\\r\\n        rValues.transferAmount = rAmount.sub(rValues.fee).sub(rValues.liquidity).sub(rValues.charity).sub(rValues.ops);\\r\\n        return (rAmount, rValues);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Adds liquidty to local pool\\r\\n        @param tLiquidity Amount of liquidity to add\\r\\n    */\\r\\n    function _takeLiquidity(uint256 tLiquidity) internal {\\r\\n        // Get conversion rate\\r\\n        uint256 currentRate =  _getRate();\\r\\n        // Calculate reflected liquidty\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        // Add reflected liqduity to contract balance\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        // If contract is excluded from reflection fees, add true liqiduity\\r\\n        if(_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Adds charity to charity wallet\\r\\n        @param tCharity Amount of charity to add\\r\\n    */\\r\\n    function _takeCharity(uint256 tCharity) internal {\\r\\n         // Get conversion rate\\r\\n        uint256 currentRate =  _getRate();\\r\\n        // Calculate reflected charity\\r\\n        uint256 rCharity = tCharity.mul(currentRate);\\r\\n        // Add reflected charity to contract balance\\r\\n        _rOwned[_charityWallet] = _rOwned[_charityWallet].add(rCharity);\\r\\n        // If contract is excluded from reflection fees, add true charity\\r\\n        if(_isExcluded[_charityWallet])\\r\\n            _tOwned[_charityWallet] = _tOwned[_charityWallet].add(tCharity);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Adds operation fee to operation wallet\\r\\n        @param tOps Amount of operation fees to add\\r\\n    */\\r\\n    function _takeOps(uint256 tOps) internal {\\r\\n         // Get conversion rate\\r\\n        uint256 currentRate =  _getRate();\\r\\n        // Calculate reflected charity\\r\\n        uint256 rOps = tOps.mul(currentRate);\\r\\n        // Add reflected charity to contract balance\\r\\n        _rOwned[_opsWallet] = _rOwned[_opsWallet].add(rOps);\\r\\n        // If contract is excluded from reflection fees, add true charity\\r\\n        if(_isExcluded[_opsWallet])\\r\\n            _tOwned[_opsWallet] = _tOwned[_opsWallet].add(tOps);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the rate of conversion r-space and t-space\\r\\n    function _getRate() internal view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        // rSupply: unexcluded reflected total, tSupply: unexcluded true total\\r\\n        return rSupply.div(tSupply); // Percentage of reflections each non-exluded holder will receive\\r\\n    }\\r\\n\\r\\n    /// @notice gets true and reflected supply for unexcluded accounts\\r\\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        // Account for wallet addresses that are exluded from reward => Allows for higher refleciton percentage\\r\\n        // Subtract them from rSupply, tSupply\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Account for (rewards) fee in true and reflected spaces\\r\\n        @param rFee reflected fee amount\\r\\n        @param tFee true fee amount\\r\\n    */\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) internal {\\r\\n        // Caluclate new reflected total\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        // Add true fee to true fee total\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove all fees\\r\\n    function removeAllFee() internal {\\r\\n        if(_taxFee == 0 && _liquidityFee == 0 && _charityFee == 0 && _opsFee == 0) return;\\r\\n        \\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousCharityFee = _charityFee;\\r\\n        _previousOpsFee = _opsFee;\\r\\n        \\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _charityFee = 0;\\r\\n        _opsFee = 0;\\r\\n    }\\r\\n    \\r\\n    /// @notice Restore all fees to previous value\\r\\n    function restoreAllFee() internal {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _charityFee = _previousCharityFee;\\r\\n        _opsFee = _previousOpsFee;\\r\\n    }\\r\\n  \\r\\n\\r\\n    /** \\r\\n        @notice Converts reflected to true amount\\r\\n        @param rAmount Reflect token amount o convert\\r\\n    */\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        // Get the current reflection conversion rate\\r\\n        uint256 currentRate =  _getRate();\\r\\n        // Return reflected amount divided by current rate, equal to tAmount\\r\\n        // rAmount / (rSupply/tSupply) = rAmount * (tSupply/rSupply) = tAmount\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n \\r\\n    /** \\r\\n        @notice Converts true to reflected amount \\r\\n        @param tAmount True amount to convert\\r\\n        @param deductTransferFee Bool to check if fees should be deducted\\r\\n    */\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount,,) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (,valueStruct memory rValues,) = _getValues(tAmount);\\r\\n            return rValues.transferAmount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n        @notice Excludes a user from rewards\\r\\n        @param account Address to exclude\\r\\n    */\\r\\n    function excludeFromReward(address account) public onlyOwner() {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    @notice Excludes a user from fees\\r\\n    @param account Address to exclude\\r\\n    */\\r\\n    function excludeFromFee(address account) public onlyOwner() {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Include a user in rewards and fees\\r\\n        @param account Address to include\\r\\n    */\\r\\n    function includeInReward(address account) public onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        _isExcludedFromFee[account] = false;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if account is excluded\\r\\n    function isExcluded(address account) public view returns (bool) {\\r\\n      return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @notice Transfer helper to account for different transfer types\\r\\n        @param sender Transfer sender\\r\\n        @param recipient Transfer recipient\\r\\n        @param amount Transfer amount\\r\\n        @param takeFee Bool indicating if fees should be taken\\r\\n    */\\r\\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) internal {\\r\\n        if(!takeFee)\\r\\n            removeAllFee();\\r\\n        \\r\\n        // Check if sendeer/recipient are excluded, if so _transferFromExcluded, otherwise _transferStandard\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n        \\r\\n        if(!takeFee)\\r\\n            restoreAllFee();\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer helper for when both sender/recipient are included in rewards and fees\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) internal {\\r\\n        // Convert from true to reflected space\\r\\n        (uint256 rAmount, valueStruct memory rValues, valueStruct memory tValues) = _getValues(tAmount);\\r\\n\\r\\n        // Subtract reflected amount from sender\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        // Add reflected transfer amount to recipient (taxed are deduceted)\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rValues.transferAmount);\\r\\n        // Take liqduity from transfer\\r\\n        _takeLiquidity(tValues.liquidity);\\r\\n        // Take charity fee from transfer\\r\\n        _takeCharity(tValues.charity);\\r\\n        // Take operations fee from transfer\\r\\n        _takeOps(tValues.ops);\\r\\n        // Update reflected total and true fee total\\r\\n        _reflectFee(rValues.fee, tValues.fee);\\r\\n        emit Transfer(sender, recipient, tValues.transferAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer helper for when sender is included but recipient isnt\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) internal {\\r\\n        (uint256 rAmount, valueStruct memory rValues, valueStruct memory tValues) = _getValues(tAmount);\\r\\n        \\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tValues.transferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rValues.transferAmount);           \\r\\n        _takeLiquidity(tValues.liquidity);\\r\\n        // Take charity fee from transfer\\r\\n        _takeCharity(tValues.charity);\\r\\n        // Take operations fee from transfer\\r\\n        _takeOps(tValues.ops);\\r\\n        _reflectFee(rValues.liquidity, tValues.liquidity);\\r\\n        emit Transfer(sender, recipient, tValues.liquidity);\\r\\n    }\\r\\n    \\r\\n    /// @notice Transfer helper for when recipient is included but sender isnt\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) internal {\\r\\n        (uint256 rAmount, valueStruct memory rValues, valueStruct memory tValues) = _getValues(tAmount);\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rValues.transferAmount);   \\r\\n        _takeLiquidity(tValues.liquidity);\\r\\n        // Take charity fee from transfer\\r\\n        _takeCharity(tValues.charity);\\r\\n        // Take operations fee from transfer\\r\\n        _takeOps(tValues.ops);\\r\\n        _reflectFee(rValues.fee, tValues.fee);\\r\\n        emit Transfer(sender, recipient, tValues.transferAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer helper for when both sender/recipient are excluded from rewards and fees\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) internal {\\r\\n        (uint256 rAmount, valueStruct memory rValues, valueStruct memory tValues) = _getValues(tAmount);\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tValues.transferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rValues.transferAmount);        \\r\\n        _takeLiquidity(tValues.liquidity);\\r\\n        _reflectFee(rValues.liquidity, tValues.liquidity);\\r\\n        emit Transfer(sender, recipient, tValues.transferAmount);\\r\\n    }\\r\\n    \\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LumiiiStorage.sol\": {\r\n      \"content\": \"\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract LumiiiStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    /// @notice Reflected amount owned for each address\\r\\n    mapping(address => uint256) internal _rOwned;\\r\\n    /// @notice True amount owned for each address\\r\\n    mapping(address => uint256) internal _tOwned;\\r\\n    /// @notice Allowance for each address\\r\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\r\\n\\r\\n    /// @notice Fee exclusion for each address\\r\\n    mapping(address => bool) internal _isExcludedFromFee;\\r\\n\\r\\n    /// @notice Rewards exclusion for each address\\r\\n    mapping(address => bool) internal _isExcluded;\\r\\n\\r\\n    /// @notice Each accounts delegates\\r\\n    mapping(address => address) internal _delegates;\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice Excluded addressess\\r\\n    address[] internal _excluded;\\r\\n\\r\\n    address _charityWallet;\\r\\n    address _opsWallet;\\r\\n\\r\\n    /// @notice Max uint256 values\\r\\n    uint256 internal constant MAX = ~uint256(0);\\r\\n    /// @notice True total\\r\\n    uint256 internal _tTotal = 10000  * 10**6 * 10**18;\\r\\n    /// @notice Reflected total\\r\\n    uint256 internal _rTotal = (MAX - (MAX % _tTotal));\\r\\n    /// @notice True fee total\\r\\n    uint256 internal _tFeeTotal;\\r\\n\\r\\n    string internal _name = \\\"LumiiiToken\\\";\\r\\n    string internal _symbol = \\\"LUMIII\\\";\\r\\n    uint8 internal _decimals = 18;\\r\\n\\r\\n    /// @notice Reflection tax fee\\r\\n    uint256 public _taxFee = 3;\\r\\n    uint256 internal _previousTaxFee = _taxFee;\\r\\n\\r\\n    /// @notice Liquidity tax fee\\r\\n    uint256 public _liquidityFee = 3;\\r\\n    uint256 internal _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n    /// @notice Charity tax fee\\r\\n    uint256 public _charityFee = 1;\\r\\n    uint256 internal _previousCharityFee = _charityFee;\\r\\n\\r\\n    /// @notice operations fee\\r\\n    uint256 public _opsFee = 3;\\r\\n    uint256 internal _previousOpsFee = _opsFee;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n    /// @notice Max tax amount\\r\\n    uint256 public _maxTxAmount = 50 * 10**6 * 10**18;\\r\\n    /// @notice Token threshold for adding to uniswap liquidity pool\\r\\n    uint256 internal numTokensSellToAddToLiquidity = 5 * 10**6 * 10**18;\\r\\n\\r\\n    /// @notice Struct for getValues functions\\r\\n    struct valueStruct {\\r\\n        uint256 transferAmount;\\r\\n        uint256 fee;\\r\\n        uint256 liquidity;\\r\\n        uint256 charity;\\r\\n        uint256 ops;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct for checkpoints\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opsWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_opsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"opsFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setOpsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LumiiiToken", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b6ff9ddd2dad1033ee6f07639e151faf801e5e90000000000000000000000009528bd68b9aefc95ddaddeb492b17801a11d8364000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}