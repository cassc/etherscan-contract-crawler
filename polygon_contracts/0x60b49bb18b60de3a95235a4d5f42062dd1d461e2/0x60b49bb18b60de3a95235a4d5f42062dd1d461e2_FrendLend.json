{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BullaBanker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IBullaClaim.sol\\\";\\nimport \\\"./BullaClaimERC721.sol\\\";\\n\\ncontract BullaBanker {\\n    address public bullaClaimERC721;\\n\\n    event BullaTagUpdated(\\n        address indexed bullaManager,\\n        uint256 indexed tokenId,\\n        address indexed updatedBy,\\n        bytes32 tag,\\n        uint256 blocktime\\n    );\\n\\n    event BullaBankerCreated(\\n        address indexed bullaManager,\\n        address indexed bullaClaimERC721,\\n        address bullaBanker,\\n        uint256 blocktime\\n    );\\n    \\n    struct ClaimParams {\\n        uint256 claimAmount;\\n        address creditor;\\n        address debtor;\\n        string description;\\n        uint256 dueBy;\\n        address claimToken;\\n        Multihash attachment;\\n    }\\n\\n    constructor(address _bullaClaimERC721) {\\n        bullaClaimERC721 = _bullaClaimERC721;\\n        emit BullaBankerCreated(\\n            IBullaClaim(_bullaClaimERC721).bullaManager(),\\n            bullaClaimERC721,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function createBullaClaim(\\n        ClaimParams calldata claim,\\n        bytes32 bullaTag,\\n        string calldata _tokenUri\\n    ) public returns (uint256) {\\n        if (msg.sender != claim.creditor && msg.sender != claim.debtor)\\n            revert NotCreditorOrDebtor(msg.sender);\\n\\n        address _bullaClaimERC721Address = bullaClaimERC721;\\n        uint256 newTokenId = BullaClaimERC721(_bullaClaimERC721Address)\\n            .createClaimWithURI(\\n                claim.creditor,\\n                claim.debtor,\\n                claim.description,\\n                claim.claimAmount,\\n                claim.dueBy,\\n                claim.claimToken,\\n                claim.attachment,\\n                _tokenUri\\n            );\\n\\n        emit BullaTagUpdated(\\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\\n            newTokenId,\\n            msg.sender,\\n            bullaTag,\\n            block.timestamp\\n        );\\n        return newTokenId;\\n    }\\n\\n    function updateBullaTag(uint256 tokenId, bytes32 newTag) public {\\n        address _bullaClaimERC721Address = bullaClaimERC721;\\n        BullaClaimERC721 _bullaClaimERC721 = BullaClaimERC721(\\n            _bullaClaimERC721Address\\n        );\\n\\n        address claimOwner = _bullaClaimERC721.ownerOf(tokenId);\\n        Claim memory bullaClaim = _bullaClaimERC721.getClaim(tokenId);\\n        if (msg.sender != claimOwner && msg.sender != bullaClaim.debtor)\\n            revert NotCreditorOrDebtor(msg.sender);\\n\\n        emit BullaTagUpdated(\\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\\n            tokenId,\\n            msg.sender,\\n            newTag,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BullaClaimERC721.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IBullaManager.sol\\\";\\r\\nimport \\\"./interfaces/IBullaClaim.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror PastDueDate();\\r\\nerror TokenIdNoExist();\\r\\nerror ClaimTokenNotContract();\\r\\nerror NotCreditor(address sender);\\r\\nerror NotDebtor(address sender);\\r\\nerror NotTokenOwner(address sender);\\r\\nerror NotCreditorOrDebtor(address sender);\\r\\nerror OwnerNotCreditor(address sender);\\r\\nerror ClaimCompleted();\\r\\nerror ClaimNotPending();\\r\\nerror IncorrectValue(uint256 value, uint256 expectedValue);\\r\\nerror InsufficientBalance(uint256 senderBalance);\\r\\nerror InsufficientAllowance(uint256 senderAllowance);\\r\\nerror RepayingTooMuch(uint256 amount, uint256 expectedAmount);\\r\\nerror ValueMustBeGreaterThanZero();\\r\\n\\r\\nabstract contract BullaClaimERC721URI is Ownable, ERC721URIStorage {\\r\\n    string public baseURI;\\r\\n\\r\\n    function setBaseURI(string memory baseURI_) public onlyOwner {\\r\\n        baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BullaClaimERC721 is IBullaClaim, BullaClaimERC721URI {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n    using Address for address;\\r\\n\\r\\n    Counters.Counter private tokenIds;\\r\\n\\r\\n    address public override bullaManager;\\r\\n    mapping(uint256 => Claim) private claimTokens;\\r\\n\\r\\n    modifier onlyTokenOwner(uint256 tokenId) {\\r\\n        if (ownerOf(tokenId) != msg.sender) revert NotCreditor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyDebtor(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].debtor != msg.sender)\\r\\n            revert NotDebtor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIncompleteClaim(uint256 tokenId) {\\r\\n        if (\\r\\n            claimTokens[tokenId].status != Status.Pending &&\\r\\n            claimTokens[tokenId].status != Status.Repaying\\r\\n        ) revert ClaimCompleted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingClaim(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].status != Status.Pending)\\r\\n            revert ClaimNotPending();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address bullaManager_, string memory baseURI_)\\r\\n        ERC721(\\\"BullaClaim721\\\", \\\"CLAIM\\\")\\r\\n    {\\r\\n        setBullaManager(bullaManager_);\\r\\n        setBaseURI(baseURI_);\\r\\n    }\\r\\n\\r\\n    function setBullaManager(address _bullaManager) public onlyOwner {\\r\\n        address prevBullaManager = bullaManager;\\r\\n        bullaManager = _bullaManager;\\r\\n        emit BullaManagerSet(prevBullaManager, bullaManager, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) internal returns (uint256) {\\r\\n        if (creditor == address(0) || debtor == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (claimAmount == 0) {\\r\\n            revert ValueMustBeGreaterThanZero();\\r\\n        }\\r\\n        if (dueBy < block.timestamp) {\\r\\n            revert PastDueDate();\\r\\n        }\\r\\n        if (!claimToken.isContract()) {\\r\\n            revert ClaimTokenNotContract();\\r\\n        }\\r\\n\\r\\n        tokenIds.increment();\\r\\n        uint256 newTokenId = tokenIds.current();\\r\\n        _safeMint(creditor, newTokenId);\\r\\n\\r\\n        Claim memory newClaim;\\r\\n        newClaim.debtor = debtor;\\r\\n        newClaim.claimAmount = claimAmount;\\r\\n        newClaim.dueBy = dueBy;\\r\\n        newClaim.status = Status.Pending;\\r\\n        newClaim.claimToken = claimToken;\\r\\n        newClaim.attachment = attachment;\\r\\n        claimTokens[newTokenId] = newClaim;\\r\\n\\r\\n        emit ClaimCreated(\\r\\n            bullaManager,\\r\\n            newTokenId,\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            debtor,\\r\\n            tx.origin,\\r\\n            description,\\r\\n            newClaim,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return newTokenId;\\r\\n    }\\r\\n\\r\\n    function createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function createClaimWithURI(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment,\\r\\n        string calldata _tokenUri\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        _setTokenURI(_tokenId, _tokenUri);\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function payClaim(uint256 tokenId, uint256 paymentAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyIncompleteClaim(tokenId)\\r\\n    {\\r\\n        if (paymentAmount == 0) revert ValueMustBeGreaterThanZero();\\r\\n        if (!_exists(tokenId)) revert TokenIdNoExist();\\r\\n\\r\\n        Claim memory claim = getClaim(tokenId);\\r\\n        address creditor = ownerOf(tokenId);\\r\\n\\r\\n        uint256 amountToRepay = claim.claimAmount - claim.paidAmount;\\r\\n        uint256 totalPayment = paymentAmount >= amountToRepay\\r\\n            ? amountToRepay\\r\\n            : paymentAmount;\\r\\n        claim.paidAmount + totalPayment == claim.claimAmount\\r\\n            ? claim.status = Status.Paid\\r\\n            : claim.status = Status.Repaying;\\r\\n        claimTokens[tokenId].paidAmount += totalPayment;\\r\\n        claimTokens[tokenId].status = claim.status;\\r\\n\\r\\n        (address collectionAddress, uint256 transactionFee) = IBullaManager(\\r\\n            bullaManager\\r\\n        ).getTransactionFee(msg.sender, totalPayment);\\r\\n\\r\\n        IERC20(claim.claimToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            totalPayment - transactionFee\\r\\n        );\\r\\n\\r\\n        if (transactionFee > 0) {\\r\\n            IERC20(claim.claimToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                collectionAddress,\\r\\n                transactionFee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ClaimPayment(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            claim.debtor,\\r\\n            msg.sender,\\r\\n            tx.origin,\\r\\n            paymentAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit FeePaid(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            collectionAddress,\\r\\n            paymentAmount,\\r\\n            transactionFee,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rejectClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyDebtor(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rejected;\\r\\n        emit ClaimRejected(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function rescindClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyTokenOwner(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rescinded;\\r\\n        emit ClaimRescinded(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external onlyTokenOwner(tokenId) {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function nextClaimId() external view returns (uint256) {\\r\\n        return tokenIds.current() + 1;\\r\\n    }\\r\\n\\r\\n    function getClaim(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (Claim memory)\\r\\n    {\\r\\n        return claimTokens[tokenId];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/FrendLend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './interfaces/IBullaClaim.sol';\\nimport './BullaBanker.sol';\\n\\nuint256 constant MAX_BPS = 10_000;\\n\\n/// @title FrendLend POC\\n/// @author @colinnielsen\\n/// @notice An extension to BullaClaim V1 that allows a creditor to offer capital in exchange for a claim\\n/// @notice This is experimental software, use at your own risk\\ncontract FrendLend {\\n    using SafeERC20 for IERC20;\\n\\n    struct LoanOffer {\\n        uint24 interestBPS; // can be 0\\n        uint40 termLength; // cannot be 0\\n        uint128 loanAmount;\\n        address creditor;\\n        address debtor;\\n        string description;\\n        address claimToken;\\n        Multihash attachment;\\n    }\\n\\n    /// address of the Bulla Claim contract\\n    IBullaClaim public bullaClaim;\\n    /// the admin of the contract\\n    address public admin;\\n    /// the fee represented as the wei amount of the network's native token\\n    uint256 public fee;\\n    /// the number of loan offers\\n    uint256 public loanOfferCount;\\n    /// a mapping of id to the FinanceTerms offered by the creditor\\n    mapping(uint256 => LoanOffer) public loanOffers;\\n\\n    event LoanOffered(uint256 indexed loanId, address indexed offeredBy, LoanOffer loanOffer, uint256 blocktime);\\n    event LoanOfferAccepted(uint256 indexed loanId, uint256 indexed claimId, uint256 blocktime);\\n    event LoanOfferRejected(uint256 indexed loanId, address indexed rejectedBy, uint256 blocktime);\\n    event BullaTagUpdated(address indexed bullaManager, uint256 indexed tokenId, address indexed updatedBy, bytes32 tag, uint256 blocktime);\\n\\n    error INCORRECT_FEE();\\n    error NOT_CREDITOR();\\n    error NOT_DEBTOR();\\n    error NOT_CREDITOR_OR_DEBTOR();\\n    error NOT_ADMIN();\\n    error INVALID_TERM_LENGTH();\\n    error WITHDRAWAL_FAILED();\\n    error TRANSFER_FAILED();\\n\\n    constructor(\\n        IBullaClaim _bullaClaim,\\n        address _admin,\\n        uint256 _fee\\n    ) {\\n        bullaClaim = _bullaClaim;\\n        admin = _admin;\\n        fee = _fee;\\n    }\\n\\n    ////// ADMIN FUNCTIONS //////\\n\\n    /// @notice SPEC:\\n    ///     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance\\n    ///     Given the following: `msg.sender == admin`\\n    function withdrawFee(uint256 _amount) public {\\n        if (msg.sender != admin) revert NOT_ADMIN();\\n\\n        (bool success, ) = admin.call{ value: _amount }('');\\n        if (!success) revert WITHDRAWAL_FAILED();\\n    }\\n\\n    ////// USER FUNCTIONS //////\\n\\n    /// @param offer claim creation params and loan info\\n    /// @notice SPEC:\\n    ///     Allows a user to create offer a loan to a potential debtor\\n    ///     This function will:\\n    ///         RES1. Increment the loan offer count in storage\\n    ///         RES2. Store the offer parameters\\n    ///         RES3. Emit a LoanOffered event with the offer parameters, the offerId, the creator, and the current timestamp\\n    ///         RETURNS: the offerId\\n    ///     Given the following:\\n    ///         P1. `msg.value == fee`\\n    ///         P2. `msg.sender == offer.creditor`\\n    ///         P3. `terms.interestBPS < type(uint24).max`\\n    ///         P4. `terms.termLength < type(uint40).max`\\n    ///         P5. `terms.termLength > 0`\\n    function offerLoan(LoanOffer calldata offer) public payable returns (uint256) {\\n        if (msg.value != fee) revert INCORRECT_FEE();\\n        if (msg.sender != offer.creditor) revert NOT_CREDITOR();\\n        if (offer.termLength == 0) revert INVALID_TERM_LENGTH();\\n\\n        uint256 offerId = ++loanOfferCount;\\n        loanOffers[offerId] = offer;\\n\\n        emit LoanOffered(offerId, msg.sender, offer, block.timestamp);\\n\\n        return offerId;\\n    }\\n\\n    /// @param offerId the offerId to reject\\n    /// @notice SPEC:\\n    ///     Allows a debtor or a offerrer to reject (or rescind) a loan offer\\n    ///     This function will:\\n    ///         RES1. Delete the offer from storage\\n    ///         RES2. Emit a LoanOfferRejected event with the offerId, the msg.sender, and the current timestamp\\n    ///     Given the following:\\n    ///         P1. the current msg.sender is either the creditor or debtor (covers: offer exists)\\n    function rejectLoanOffer(uint256 offerId) public {\\n        LoanOffer memory offer = loanOffers[offerId];\\n        if (msg.sender != offer.creditor && msg.sender != offer.debtor) revert NOT_CREDITOR_OR_DEBTOR();\\n\\n        delete loanOffers[offerId];\\n\\n        emit LoanOfferRejected(offerId, msg.sender, block.timestamp);\\n    }\\n\\n    /// @param offerId the offerId to acceot\\n    /// @param tokenURI the tokenURI for the underlying claim\\n    /// @param tag a bytes32 tag for the frontend\\n    /// @notice WARNING: will not work with fee on transfer tokens\\n    /// @notice SPEC:\\n    ///     Allows a debtor to accept a loan offer, and receive payment\\n    ///     This function will:\\n    ///         RES1. Delete the offer from storage\\n    ///         RES2. Creates a new claim for the loan amount + interest\\n    ///         RES3. Transfers the offered loan amount from the creditor to the debtor\\n    ///         RES4. Puts the claim into a non-rejectable repaying state by paying 1 wei\\n    ///         RES5. Emits a BullaTagUpdated event with the claimId, the debtor address, a tag, and the current timestamp\\n    ///         RES6. Emits a LoanOfferAccepted event with the offerId, the accepted claimId, and the current timestamp\\n    ///     Given the following:\\n    ///         P1. the current msg.sender is the debtor listed on the offer (covers: offer exists)\\n    function acceptLoan(\\n        uint256 offerId,\\n        string calldata tokenURI,\\n        bytes32 tag\\n    ) public {\\n        LoanOffer memory offer = loanOffers[offerId];\\n        if (msg.sender != offer.debtor) revert NOT_DEBTOR();\\n\\n        delete loanOffers[offerId];\\n\\n        uint256 claimAmount = offer.loanAmount + (offer.loanAmount * offer.interestBPS) / MAX_BPS + 1;\\n        uint256 claimId = bullaClaim.createClaimWithURI(\\n            offer.creditor,\\n            offer.debtor,\\n            offer.description,\\n            claimAmount,\\n            block.timestamp + offer.termLength,\\n            offer.claimToken,\\n            offer.attachment,\\n            tokenURI\\n        );\\n\\n        // add 1 wei to force repaying status\\n        IERC20(offer.claimToken).safeTransferFrom(offer.creditor, address(this), offer.loanAmount + 1);\\n        IERC20(offer.claimToken).approve(address(bullaClaim), 1);\\n        bullaClaim.payClaim(claimId, 1);\\n\\n        IERC20(offer.claimToken).safeTransfer(offer.debtor, offer.loanAmount);\\n\\n        emit BullaTagUpdated(bullaClaim.bullaManager(), claimId, msg.sender, tag, block.timestamp);\\n        emit LoanOfferAccepted(offerId, claimId, block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBullaClaim.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IBullaManager.sol\\\";\\n\\nstruct Multihash {\\n    bytes32 hash;\\n    uint8 hashFunction;\\n    uint8 size;\\n}\\n\\nenum Status {\\n    Pending,\\n    Repaying,\\n    Paid,\\n    Rejected,\\n    Rescinded\\n}\\n\\nstruct Claim {\\n    uint256 claimAmount;\\n    uint256 paidAmount;\\n    Status status;\\n    uint256 dueBy;\\n    address debtor;\\n    address claimToken;\\n    Multihash attachment;\\n}\\n\\ninterface IBullaClaim {\\n    event ClaimCreated(\\n        address bullaManager,\\n        uint256 indexed tokenId,\\n        address parent,\\n        address indexed creditor,\\n        address indexed debtor,\\n        address origin,\\n        string description,\\n        Claim claim,\\n        uint256 blocktime\\n    );\\n\\n    event ClaimPayment(\\n        address indexed bullaManager,\\n        uint256 indexed tokenId,\\n        address indexed debtor,\\n        address paidBy,\\n        address paidByOrigin,\\n        uint256 paymentAmount,\\n        uint256 blocktime\\n    );\\n\\n    event ClaimRejected(\\n        address indexed bullaManager,\\n        uint256 indexed tokenId,\\n        uint256 blocktime\\n    );\\n\\n    event ClaimRescinded(\\n        address indexed bullaManager,\\n        uint256 indexed tokenId,\\n        uint256 blocktime\\n    );\\n\\n    event FeePaid(\\n        address indexed bullaManager,\\n        uint256 indexed tokenId,\\n        address indexed collectionAddress,\\n        uint256 paymentAmount,\\n        uint256 transactionFee,\\n        uint256 blocktime\\n    );\\n\\n    event BullaManagerSet(\\n        address indexed prevBullaManager,\\n        address indexed newBullaManager,\\n        uint256 blocktime\\n    );\\n\\n    function createClaim(\\n        address creditor,\\n        address debtor,\\n        string memory description,\\n        uint256 claimAmount,\\n        uint256 dueBy,\\n        address claimToken,\\n        Multihash calldata attachment\\n    ) external returns (uint256 newTokenId);\\n\\n    function createClaimWithURI(\\n        address creditor,\\n        address debtor,\\n        string memory description,\\n        uint256 claimAmount,\\n        uint256 dueBy,\\n        address claimToken,\\n        Multihash calldata attachment,\\n        string calldata _tokenUri\\n    ) external returns (uint256 newTokenId);\\n\\n    function payClaim(uint256 tokenId, uint256 paymentAmount) external;\\n\\n    function rejectClaim(uint256 tokenId) external;\\n\\n    function rescindClaim(uint256 tokenId) external;\\n\\n    function getClaim(uint256 tokenId) external view returns (Claim calldata);\\n\\n    function bullaManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBullaManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct FeeInfo {\\n    address collectionAddress;\\n    uint32 feeBasisPoints;\\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\\n}\\n\\ninterface IBullaManager {\\n    event FeeChanged(\\n        address indexed bullaManager,\\n        uint256 prevFee,\\n        uint256 newFee,\\n        uint256 blocktime\\n    );\\n    event CollectorChanged(\\n        address indexed bullaManager,\\n        address prevCollector,\\n        address newCollector,\\n        uint256 blocktime\\n    );\\n    event OwnerChanged(\\n        address indexed bullaManager,\\n        address prevOwner,\\n        address newOwner,\\n        uint256 blocktime\\n    );\\n    event BullaTokenChanged(\\n        address indexed bullaManager,\\n        address prevBullaToken,\\n        address newBullaToken,\\n        uint256 blocktime\\n    );\\n    event FeeThresholdChanged(\\n        address indexed bullaManager,\\n        uint256 prevFeeThreshold,\\n        uint256 newFeeThreshold,\\n        uint256 blocktime\\n    );\\n    event ReducedFeeChanged(\\n        address indexed bullaManager,\\n        uint256 prevFee,\\n        uint256 newFee,\\n        uint256 blocktime\\n    );\\n\\n    function setOwner(address _owner) external;\\n\\n    function setFee(uint32 _feeBasisPoints) external;\\n\\n    function setCollectionAddress(address _collectionAddress) external;\\n\\n    function setbullaThreshold(uint32 _threshold) external;\\n\\n    function setReducedFee(uint32 reducedFeeBasisPoints) external;\\n\\n    function setBullaTokenAddress(address _bullaTokenAddress) external;\\n\\n    function getBullaBalance(address _holder) external view returns (uint256);\\n\\n    function getFeeInfo(address _holder)\\n        external\\n        view\\n        returns (uint32, address);\\n    \\n    function getTransactionFee(address _holder, uint paymentAmount) external view returns(address sendFeesTo, uint transactionFee);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBullaClaim\",\"name\":\"_bullaClaim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INCORRECT_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_TERM_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CREDITOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CREDITOR_OR_DEBTOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_DEBTOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TRANSFER_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FAILED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"BullaTagUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejectedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeredBy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct FrendLend.LoanOffer\",\"name\":\"loanOffer\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOffered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"acceptLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaClaim\",\"outputs\":[{\"internalType\":\"contract IBullaClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanOffers\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"internalType\":\"struct FrendLend.LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"offerLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"rejectLoanOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FrendLend", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a809c17d33c92f9eff31e579e9dedf247e1ebe4000000000000000000000000e2b28b58cc5d34872794e861fd1ba1982122b9070000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}