{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/admin/AvoMultisigAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AvoMultisigAdminStructs {\\n    /// @notice Transaction represents a executeable transaction and it's multisig status\\n    struct Transaction {\\n        /// @notice The hash of the transaction, keccak(encodePacked(target, data)))\\n        bytes30 hash;\\n        /// @notice The number of confirmations for the transaction\\n        uint8 confirmation;\\n        /// @notice The number of revokes for the transaction\\n        uint8 revoke;\\n    }\\n}\\n\\ncontract AvoMultisigAdminErrors {\\n    /// @notice Error if input params are invalid\\n    error AvoMultisigAdmin__InvalidParams();\\n\\n    /// @notice Error if msg.sender is not authorized\\n    error AvoMultisigAdmin__Unauthorized();\\n\\n    /// @notice Error if signer is not a signer\\n    error AvoMultisigAdmin__InvalidSigner();\\n\\n    /// @notice Error if transaction is already created\\n    error AvoMultisigAdmin__TransactionAlreadyCreated();\\n\\n    /// @notice Error if transaction is already confirmed by the signer\\n    error AvoMultisigAdmin__TransactionAlreadyConfirmed();\\n\\n    /// @notice Error if transaction is already revoked by the signer\\n    error AvoMultisigAdmin__TransactionAlreadyRevoked();\\n\\n    /// @notice Error if transaction is already confirmed or revoked\\n    error AvoMultisigAdmin__TransactionError();\\n\\n    /// @notice Error if transaction is not found\\n    error AvoMultisigAdmin__TransactionNotFoundError();\\n}\\n\\nabstract contract AvoMultisigAdminConstants is AvoMultisigAdminErrors {\\n    /// @notice The number of signers required to confirm a transaction\\n    uint256 public immutable REQUIRED_CONFIRMATIONS;\\n\\n    /// @notice Addresses for the signers\\n    address public immutable SIGNER_1;\\n    address public immutable SIGNER_2;\\n    address public immutable SIGNER_3;\\n    address public immutable SIGNER_4;\\n    address public immutable SIGNER_5;\\n    address public immutable SIGNER_6;\\n\\n    /// @notice sets up the immutable vars: signers and required confirmations.\\n    constructor(\\n        address signer1_,\\n        address signer2_,\\n        address signer3_,\\n        address signer4_,\\n        address signer5_,\\n        address signer6_,\\n        uint256 requiredConfirmations_\\n    ) {\\n        if (\\n            signer1_ == address(0) ||\\n            signer2_ == address(0) ||\\n            signer3_ == address(0) ||\\n            signer4_ == address(0) ||\\n            signer5_ == address(0) ||\\n            signer6_ == address(0)\\n        ) {\\n            revert AvoMultisigAdmin__InvalidParams();\\n        }\\n\\n        if (requiredConfirmations_ == 0 || requiredConfirmations_ > 6) {\\n            revert AvoMultisigAdmin__InvalidParams();\\n        }\\n\\n        SIGNER_1 = signer1_;\\n        SIGNER_2 = signer2_;\\n        SIGNER_3 = signer3_;\\n        SIGNER_4 = signer4_;\\n        SIGNER_5 = signer5_;\\n        SIGNER_6 = signer6_;\\n\\n        REQUIRED_CONFIRMATIONS = requiredConfirmations_;\\n    }\\n}\\n\\ncontract AvoMultisigAdminVariables {\\n    /// @notice The mapping of the hash of (targetAddress, data, salt) to the transaction\\n    mapping(bytes30 => AvoMultisigAdminStructs.Transaction) public hashToTransaction;\\n\\n    /// @notice The mapping of signer to transaction hash to whether or not they've confirmed\\n    mapping(address => mapping(bytes30 => bool)) public signedTx;\\n\\n    /// @notice The mapping of signer to transaction hash to whether or not they've revoked\\n    mapping(address => mapping(bytes30 => bool)) public revokeTx;\\n}\\n\\ncontract AvoMultisigAdminEvents {\\n    /// @notice Emitted when a transaction is created\\n    event TransactionCreated(bytes30 indexed hash, address indexed creator, address target, bytes data, bytes32 salt);\\n\\n    /// @notice Emitted when a transaction is confirmed\\n    event TransactionConfirmed(bytes30 indexed hash, address indexed confirmator, uint8 newConfirmationCount);\\n\\n    /// @notice Emitted when a transaction is revoked\\n    event TransactionRevoked(bytes30 indexed hash, address indexed revoker, uint8 newConfirmationCount);\\n\\n    /// @notice Emitted when a transaction is executed\\n    event TransactionExecuted(bytes30 indexed hash, address indexed executor);\\n\\n    /// @notice Emitted when a transaction fails\\n    event TransactionFailed(bytes30 indexed hash, address indexed executor, bytes returnData);\\n}\\n\\n/// @title   Static Multisignature Wallet Contract\\n/// @notice  This contract represents a multisignature wallet with a static configuration of hardcoded addresses for confirmation.\\n///          Each address can confirm or revoke a transaction on-chain.\\ncontract AvoMultisigAdmin is\\n    AvoMultisigAdminStructs,\\n    AvoMultisigAdminErrors,\\n    AvoMultisigAdminConstants,\\n    AvoMultisigAdminVariables,\\n    AvoMultisigAdminEvents\\n{\\n    modifier onlySigner() {\\n        if (\\n            msg.sender != SIGNER_1 &&\\n            msg.sender != SIGNER_2 &&\\n            msg.sender != SIGNER_3 &&\\n            msg.sender != SIGNER_4 &&\\n            msg.sender != SIGNER_5 &&\\n            msg.sender != SIGNER_6\\n        ) revert AvoMultisigAdmin__InvalidSigner();\\n        _;\\n    }\\n\\n    /// @notice constructor sets up the immutable vars: signers and required confirmations.\\n    constructor(\\n        address signer1_,\\n        address signer2_,\\n        address signer3_,\\n        address signer4_,\\n        address signer5_,\\n        address signer6_,\\n        uint256 requiredConfirmations_\\n    ) AvoMultisigAdminConstants(signer1_, signer2_, signer3_, signer4_, signer5_, signer6_, requiredConfirmations_) {}\\n\\n    /// @notice          Create a new transaction\\n    /// @param target_   The address of the target contract or account for the transaction\\n    /// @param data_     The data payload of the transaction\\n    /// @param salt_     The salt used to make the transaction hash unique\\n    function create(address target_, bytes memory data_, bytes32 salt_) external onlySigner {\\n        bytes30 txHash_ = hashTransactionData(target_, data_, salt_);\\n\\n        if (hashToTransaction[txHash_].hash != bytes30(0)) revert AvoMultisigAdmin__TransactionAlreadyCreated();\\n\\n        hashToTransaction[txHash_] = Transaction(txHash_, 1, 0);\\n        signedTx[msg.sender][txHash_] = true;\\n\\n        emit TransactionCreated(txHash_, msg.sender, target_, data_, salt_);\\n    }\\n\\n    /// @notice          Confirm a transaction\\n    /// @dev             Confirming is not allowed if `confirmation` or `revoke` is already 3 (transaction executed or cancelled).\\n    /// @param target_   The address of the target contract or account for the transaction\\n    /// @param data_     The data payload of the transaction\\n    /// @param salt_     The salt used to make the transaction hash unique\\n    function confirm(address target_, bytes memory data_, bytes32 salt_) external onlySigner {\\n        bytes30 txHash_ = hashTransactionData(target_, data_, salt_);\\n\\n        if (hashToTransaction[txHash_].hash == bytes30(0)) revert AvoMultisigAdmin__TransactionNotFoundError();\\n\\n        if (signedTx[msg.sender][txHash_]) revert AvoMultisigAdmin__TransactionAlreadyConfirmed();\\n\\n        Transaction memory txInfo_ = hashToTransaction[txHash_];\\n\\n        if (txInfo_.confirmation == REQUIRED_CONFIRMATIONS || txInfo_.revoke == REQUIRED_CONFIRMATIONS)\\n            revert AvoMultisigAdmin__TransactionError();\\n\\n        signedTx[msg.sender][txHash_] = true;\\n        hashToTransaction[txHash_].confirmation = ++txInfo_.confirmation;\\n\\n        if (txInfo_.confirmation == REQUIRED_CONFIRMATIONS) {\\n            // Execute the transaction\\n            bool success_;\\n            bytes memory retData_;\\n            (success_, retData_) = target_.call(data_);\\n            if (success_) {\\n                emit TransactionExecuted(txHash_, msg.sender);\\n            } else {\\n                emit TransactionFailed(txHash_, msg.sender, retData_);\\n            }\\n        }\\n\\n        emit TransactionConfirmed(txHash_, msg.sender, txInfo_.confirmation);\\n    }\\n\\n    /// @notice          Revoke a transaction confirmation.\\n    /// @dev             Revoking is not allowed if `confirmation` or `revoke` is already 3 (transaction executed or cancelled).\\n    /// @param target_   The address of the target contract or account for the transaction\\n    /// @param data_     The data payload of the transaction\\n    /// @param salt_     The salt used to make the transaction hash unique\\n    function revoke(address target_, bytes memory data_, bytes32 salt_) external onlySigner {\\n        bytes30 txHash_ = hashTransactionData(target_, data_, salt_);\\n\\n        if (hashToTransaction[txHash_].hash == bytes30(0)) revert AvoMultisigAdmin__TransactionNotFoundError();\\n\\n        Transaction memory txInfo_ = hashToTransaction[txHash_];\\n\\n        if (txInfo_.confirmation == REQUIRED_CONFIRMATIONS || txInfo_.revoke == REQUIRED_CONFIRMATIONS)\\n            revert AvoMultisigAdmin__TransactionError();\\n\\n        hashToTransaction[txHash_].revoke = ++txInfo_.revoke;\\n\\n        if (revokeTx[msg.sender][txInfo_.hash] == false) {\\n            revokeTx[msg.sender][txInfo_.hash] = true;\\n        } else {\\n            revert AvoMultisigAdmin__TransactionAlreadyRevoked();\\n        }\\n\\n        emit TransactionRevoked(txHash_, msg.sender, txInfo_.revoke);\\n    }\\n\\n    /// @notice          Hashes the transaction data\\n    /// @param target_   The address of the target contract or account for the transaction\\n    /// @param data_     The data payload of the transaction\\n    /// @param salt_     The salt used to make the transaction hash unique\\n    /// @return hash_    The unique hash representing this transaction\\n    function hashTransactionData(\\n        address target_,\\n        bytes memory data_,\\n        bytes32 salt_\\n    ) public pure returns (bytes30 hash_) {\\n        hash_ = bytes30(keccak256(abi.encodePacked(target_, data_, salt_)));\\n    }\\n\\n    // Code for Multicall below directly taken from https://github.com/mds1/multicall/blob/main/src/Multicall3.sol#L98\\n    // Copyright (c) 2023 Matt Solomon\\n    struct Call3 {\\n        address target;\\n        bool allowFailure;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    /// @notice Aggregate calls, ensuring each returns success if required. Can only be called by self.\\n    /// @param calls An array of Call3 structs\\n    /// @return returnData An array of Result structs\\n    function aggregate3(Call3[] calldata calls) public returns (Result[] memory returnData) {\\n        // @dev check for only self is added to original code\\n        if (msg.sender != address(this)) {\\n            revert AvoMultisigAdmin__Unauthorized();\\n        }\\n\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        Call3 calldata calli;\\n        for (uint256 i = 0; i < length; ) {\\n            Result memory result = returnData[i];\\n            calli = calls[i];\\n            (result.success, result.returnData) = calli.target.call(calli.callData);\\n            assembly {\\n                // Revert if the call fails and failure is not allowed\\n                // `allowFailure := calldataload(add(calli, 0x20))` and `success := mload(result)`\\n                if iszero(or(calldataload(add(calli, 0x20)), mload(result))) {\\n                    // set \\\"Error(string)\\\" signature: bytes32(bytes4(keccak256(\\\"Error(string)\\\")))\\n                    mstore(0x00, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n                    // set data offset\\n                    mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n                    // set length of revert string\\n                    mstore(0x24, 0x0000000000000000000000000000000000000000000000000000000000000017)\\n                    // set revert string: bytes32(abi.encodePacked(\\\"Multicall3: call failed\\\"))\\n                    mstore(0x44, 0x4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000)\\n                    revert(0x00, 0x64)\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000000\r\n    },\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer3_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer4_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer5_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer6_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredConfirmations_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__TransactionAlreadyConfirmed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__TransactionAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__TransactionAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__TransactionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__TransactionNotFoundError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AvoMultisigAdmin__Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"confirmator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newConfirmationCount\",\"type\":\"uint8\"}],\"name\":\"TransactionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"TransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"TransactionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newConfirmationCount\",\"type\":\"uint8\"}],\"name\":\"TransactionRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUIRED_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNER_6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct AvoMultisigAdmin.Call3[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate3\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct AvoMultisigAdmin.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes30\",\"name\":\"\",\"type\":\"bytes30\"}],\"name\":\"hashToTransaction\",\"outputs\":[{\"internalType\":\"bytes30\",\"name\":\"hash\",\"type\":\"bytes30\"},{\"internalType\":\"uint8\",\"name\":\"confirmation\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"revoke\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"}],\"name\":\"hashTransactionData\",\"outputs\":[{\"internalType\":\"bytes30\",\"name\":\"hash_\",\"type\":\"bytes30\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes30\",\"name\":\"\",\"type\":\"bytes30\"}],\"name\":\"revokeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes30\",\"name\":\"\",\"type\":\"bytes30\"}],\"name\":\"signedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AvoMultisigAdmin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000000", "ConstructorArguments": "000000000000000000000000ca5872f6d6942320146f0c353857aa7952533e90000000000000000000000000910e413dbf3f6276fe8213ff656726bdc142e08e0000000000000000000000009800020b610194dba52cf606e8aa142f9f2561660000000000000000000000009f60699ce23f1ab86ec3e095b477ff79d4f409ad000000000000000000000000ca5872f6d6942320146f0c353857aa7952533e90000000000000000000000000910e413dbf3f6276fe8213ff656726bdc142e08e0000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}