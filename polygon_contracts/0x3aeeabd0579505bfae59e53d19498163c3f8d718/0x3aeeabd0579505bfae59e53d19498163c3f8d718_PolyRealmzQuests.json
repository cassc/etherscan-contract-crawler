{"SourceCode": "// File: @openzeppelin/contracts@4.9.2/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9.2/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```solidity\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```solidity\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\r\n * to enforce additional security measures for this role.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PolyRealmz/RealmzQuests.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IArtifacts {\r\n\tfunction mint(address account, uint256 id, uint256 amount) external;\r\n}\r\n\r\ninterface IPillarz  {\r\n\t//pillars contract has a function to look up rewards by address\r\n\tfunction checkOwnerRewards(address owner) external view returns (uint8 _rewardValue); \r\n}\r\n\r\ninterface IGodz {\r\n\tfunction walletOfOwner(address _owner) external  view returns (uint256[] memory);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\n\r\ncontract PolyRealmzQuests is Ownable, AccessControl, ReentrancyGuard {\r\n\r\n\tIArtifacts public rewards;  //reward coin\r\n\tIPillarz public pillarz;    //pillars collection grants extra bonus\r\n\tIGodz[] public tokenContracts; //can have multiple nft contracts to stake\r\n\r\n\tstruct tokenInfo {\r\n\t\tuint256 lastClaim;\r\n\t\tuint256 remainder;\r\n\t\tuint256 bandId;\r\n\t\tuint32 godzType;\r\n\t\tuint32 bonusRate;\r\n\t}\r\n\r\n\tstruct bandInfo {\r\n\t\tuint256 lastClaim;\r\n\t\tuint256 remainder;\r\n\t\taddress owner;\r\n\t\tstring name;\r\n\t\tuint32 bonusRate;\r\n\t\tuint256[] members;\t\r\n\t}\r\n\r\n\tmapping (uint256 => mapping(uint256 => tokenInfo)) private tokenInfos; //collectionId -> tokenId -> tokenInfo\r\n\tmapping (uint256 => mapping(uint256 => bandInfo)) private bandInfos;  //collectionId -> bandID -> bandInfo\r\n\r\n\tmapping(uint256 => mapping(uint32 => uint256)) private rewardTokenIds; //collectionId -> godzType -> tokenId -> the reward token id for this type\r\n\tmapping(uint256 => mapping(address => uint256[])) private ownerBands; //collectionId -> address -> [bandId]\t\r\n\tmapping(uint256 => mapping(address => mapping(uint256 => uint256))) private ownerBandIndex; //collectionId -> address -> bandId -> index\t\r\n\r\n    uint256 constant defaultEmissionRate = 10**18; // 1 per day with 18 decimals\r\n    uint256[] emissionRate; // can set different rate per nft contract\r\n\r\n\tmapping (uint256 => uint8) private seasonalBonus;  //collectionId -> bonus\r\n\r\n\tbytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\r\n\r\n\tconstructor() \r\n\t{\r\n\t\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\t\r\n\t\t_grantRole(MANAGER_ROLE, msg.sender);\t\r\n\t}\r\n\r\n\tfunction claimBatchTokens(uint32 collectionId, uint256[] calldata tokenIds) external nonReentrant\r\n\t{\r\n\t\tuint256 length = tokenIds.length;\r\n\r\n\t\t//read pillars contract and check for extra bonus\r\n\t\tuint8 pillarBonus = pillarz.checkOwnerRewards(msg.sender);\r\n\t\t\r\n\t\tfor (uint32 i; i < length; ) {\t\r\n\t\t\tif(!checkTokenOwner(collectionId, tokenIds[i])) continue;\r\n\t\t\tcheckAndClaim(collectionId, tokenIds[i], pillarBonus);\r\n\t\t\tunchecked {++i;}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction claimBatchBands(uint32 collectionId, uint256[] calldata bandIds) external nonReentrant\r\n\t{\r\n\t\tuint256 length = bandIds.length;\r\n\r\n\t\tfor (uint32 i; i < length; ) {\r\n\t\t\tif (!checkBandOwner(collectionId, bandIds[i])) continue;\r\n\t\t\tif (bandIds[i] > 0) claimBandInternal(collectionId, bandIds[i]);\r\n\t\t\tunchecked {++i;}\r\n\t\t}\r\n\t}\r\n\r\n    //claim rewards by token id and collectionId external\r\n\tfunction claimSingleToken(uint32 collectionId, uint256 _tokenId) external nonReentrant \r\n\t{\r\n        if(!checkTokenOwner(collectionId, _tokenId)) revert(\"NotOwned\");\r\n\t\t//read pillars contract and check for extra bonus\r\n\t\tuint8 pillarBonus = pillarz.checkOwnerRewards(msg.sender);\r\n\t\tcheckAndClaim(collectionId, _tokenId, pillarBonus);\r\n\t}\r\n\r\n\tfunction claimSingleBand(uint32 collectionId, uint256 bandId) external nonReentrant \r\n\t{\t\r\n\t\tif (bandId == 0) return;\r\n\t\tif (!checkBandOwner(collectionId, bandId)) revert (\"NotOwned\"); //must be the owner of the band\r\n\t\tclaimBandInternal(collectionId, bandId);\r\n\t}\r\n\r\n\t//create a band\r\n\tfunction createBand(uint32 collectionId, string calldata name, uint256[] calldata _tokenIds) external nonReentrant \r\n\t{\r\n\t\t//verify that each token is the expected god type for the band\r\n\t\t//these should be sent in order air - earth - electric - fire - magic - water\r\n\t\t//public godzType; //collectionId -> tokenId -> godzType\r\n\t\tif (_tokenIds.length != 6 ) revert (\"Need6\");\r\n\t\tfor (uint32 i; i < 6;) {\r\n\t\t\tif (tokenInfos[collectionId][_tokenIds[i]].godzType != i) revert (\"BadBand\");\r\n\t\t\tif (tokenInfos[collectionId][_tokenIds[i]].bandId > 0) revert (\"AlreadyBand\");\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\r\n\t\t//get a bandID by hashing the owner collection and token ids\r\n\t\tuint256 bandId = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, collectionId, _tokenIds[0], _tokenIds[1], _tokenIds[2], _tokenIds[3], _tokenIds[4], _tokenIds[5])));\r\n\t\tuint256 totalbonus = 1;\r\n\r\n\t\t//set the band id for each token and get the bonus rate\r\n\t\tfor (uint32 i; i < 6;) {\r\n\t\t\ttokenInfo storage info = tokenInfos[collectionId][_tokenIds[i]];\r\n\t\t\tinfo.bandId = bandId;\r\n\t\t\ttotalbonus = totalbonus * info.bonusRate;\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\t\tuint32 bonusRate = uint32(totalbonus / 10**10); //bonus is *100 (100 = 1.00x bonus rate) we did 100^6 \r\n\t\tbonusRate = bonusRate > 500 ? 500 : bonusRate;  //max bonus rate for bands is 500 = 5.00x\r\n\r\n\t\t//uint256 lastClaimTime, uint256 rewardRemainder, owner address, name , bonusrate, uint256[] members;\t\r\n\t\tbandInfos[collectionId][bandId] = bandInfo(block.timestamp, 0, msg.sender, name, bonusRate, _tokenIds);\r\n\r\n\t\t//how many bands are owned?\r\n\t\tuint256 ownedLength = ownerBands[collectionId][msg.sender].length;\r\n\r\n\t\tif (ownedLength > 0) //they own one or did, but it might be zero now\r\n\t\t{\r\n\t\t\tuint256 newIndex = ownedLength-1;\r\n\t\t\tif (ownerBands[collectionId][msg.sender][newIndex] == 0) //erased band\r\n\t\t\t{\r\n\t\t\t\townerBands[collectionId][msg.sender][newIndex] = bandId; //set this to the band id\r\n\t\t\t\townerBandIndex[collectionId][msg.sender][bandId] = newIndex; //set the index\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\townerBands[collectionId][msg.sender].push(bandId);  // add it \r\n\t\t\t\townerBandIndex[collectionId][msg.sender][bandId] = ownedLength; //set index\r\n\t\t\t}\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\townerBands[collectionId][msg.sender].push(bandId); // add it \r\n\t\t\townerBandIndex[collectionId][msg.sender][bandId] = 0;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t//---------------Internal functions\r\n\tfunction checkAndClaim(uint32 collectionId, uint256 _tokenId, uint8 pillarBonus) internal\r\n\t{\r\n\t\tuint256 thisBandId = tokenInfos[collectionId][_tokenId].bandId;\r\n\t\tif ( thisBandId == 0) claimInternal(collectionId, _tokenId, pillarBonus); //not in a band\r\n\t\telse { //in a band and caller owns the token, if caller doesnt own the band - disband it\r\n\t\t\tif (!checkBandOwner(collectionId, thisBandId)) disbandInternal(collectionId, thisBandId);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction checkBandOwner(uint32 collectionId, uint256 bandId) internal view returns (bool) {\r\n\t\treturn bandInfos[collectionId][bandId].owner == msg.sender;\r\n\t}\r\n\r\n\tfunction checkTokenOwner(uint32 collectionId, uint256 tokenId) internal view returns (bool) {\r\n\t\treturn tokenContracts[collectionId].ownerOf(tokenId) == msg.sender;\r\n\t}\r\n\r\n\tfunction getWholeAndRemainder(uint256 unclaimed) internal pure returns (uint256, uint256)\r\n\t{\r\n\t\tuint256 whole = unclaimed / 10 ** 18;\r\n\t\tuint256 remainder = unclaimed - (whole * 10 ** 18);\r\n\t\treturn (whole, remainder);\r\n\t}\r\n\r\n\t//internal function to claim rewards\r\n\tfunction claimInternal(uint32 collectionId, uint256 _tokenId, uint8 pillarBonus) internal \r\n\t{   \r\n\t\t//get the unclaimed accumulation\r\n\t\t(uint256 wholeTokens, uint256 remainder) = getWholeAndRemainder(unclaimedRewards(collectionId, _tokenId, pillarBonus));\r\n\r\n\t\ttokenInfo storage info = tokenInfos[collectionId][_tokenId];\r\n\t\tinfo.lastClaim = block.timestamp; //set the last claimed time\r\n\t\tinfo.remainder = remainder; //store the remainder\r\n\r\n\t\tif (wholeTokens > 0) \r\n\t\t{\r\n\t\t\t//read the reward tokenId for this gods type\r\n\t\t\tuint256 rewardToken = rewardTokenIds[collectionId][info.godzType];\r\n\t\t\t//mint any whole rewards\r\n\t\t \trewards.mint(msg.sender, rewardToken, wholeTokens);\r\n\t\t}\r\n\t}\r\n\r\n\t//internal function to claim band rewards\r\n\tfunction claimBandInternal(uint32 collectionId, uint256 bandId) internal \r\n\t{   \r\n\t\tif (bandId == 0) return; //shouldn't gete here with zero but just return\r\n\t\tbandInfo storage info = bandInfos[collectionId][bandId];\r\n\r\n\t\tuint256[] memory members = info.members;\r\n\t\tfor (uint32 i; i < 6; ) { //band is always 6 members\r\n\t\t\tif(!checkTokenOwner(collectionId, members[i])) { //msg.sender doesnt own a token in this band.\r\n\t\t\t\tdisbandInternal(collectionId, bandId);  //disband if any are no longer owned\r\n\t\t\t\treturn; //stop after first fail, no claim for this band, also no revert \r\n\t\t\t}\r\n\t\t\tunchecked {++i;}\r\n\t\t}\r\n\r\n\t\t//get the unclaimed accumulation\r\n\t\t(uint256 wholeTokens, uint256 remainder) = getWholeAndRemainder(unclaimedBand(collectionId, bandId));\r\n\r\n\t\tinfo.lastClaim = block.timestamp; //set the last claimed time\r\n\t\tinfo.remainder = remainder; //store the remainder\r\n\t\t\r\n\t\tif (wholeTokens > 0) \r\n\t\t{\r\n\t\t\tuint256 rewardToken = rewardTokenIds[collectionId][6]; //bands earn destiny/unique stone\r\n\t\t\trewards.mint(msg.sender, rewardToken, wholeTokens);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction disband(uint32 collectionId, uint256 bandId) external {\r\n\t\tif (bandId == 0) return; //band mapping could be zerod, shouldn't get here but just return\r\n\t\tif (!checkBandOwner(collectionId, bandId)) revert (\"NotOwner\");\r\n\t\tdisbandInternal(collectionId, bandId);\r\n\t}\r\n\r\n\t//need to make sure if a token is sold or transferred when still in a band the new owner\r\n\t//can move it back to normal claiming... \r\n\tfunction disbandInternal(uint256 collectionId, uint256 bandId) internal \r\n\t{\r\n\t\tif (bandId == 0) return; //band mapping could be zerod, shouldn't get here but just return\r\n\t\t//the band has tokens with a new owner -- disband\r\n\t\tbandInfo memory ib = bandInfos[collectionId][bandId];\r\n\t\t\t\t\r\n\t\tfor (uint32 i; i < 6; ) { //band is always 6 memebrs\r\n\t\t\ttokenInfos[collectionId][ib.members[i]].bandId = 0; //remove bandId from the token\r\n\t\t\ttokenInfos[collectionId][ib.members[i]].lastClaim = block.timestamp; //reset last claim time\r\n\t\t\tunchecked {++i;}\r\n\t\t}\r\n\t\tdelete bandInfos[collectionId][bandId]; //delete the band\r\n\t\t\r\n\t\t//remove this band from old owner bands \r\n\t\taddress oldOwner = ib.owner;\r\n\t\tuint256[] storage bands = ownerBands[collectionId][oldOwner];\r\n\t\tuint256 length = bands.length;\r\n\t\tuint256 index = ownerBandIndex[collectionId][oldOwner][bandId];\r\n\t\r\n\t\tif (length > 1 && index != length-1) {  //move the last element to the vacant spot unless were deleting the last\r\n\t\t\townerBandIndex[collectionId][oldOwner][bands[length-1]] = index; //set its new index\r\n\t\t\tbands[index] = bands[length-1]; //copy the last element to the index\r\n\t\t}\r\n\t\tdelete ownerBands[collectionId][oldOwner][length-1]; //delete the last element\r\n\t\tdelete ownerBandIndex[collectionId][oldOwner][bandId]; //delete the index\r\n\t}\r\n\t\t\r\n\t//calculate unclaimed rewards for a token\r\n\tfunction unclaimedRewards(uint32 collectionId, uint256 _tokenId, uint8 _pillarBonus) internal view returns (uint256) \r\n\t{\r\n\t\ttokenInfo memory info = tokenInfos[collectionId][_tokenId];\r\n\t\t//initial issuance\r\n\t\tif (info.lastClaim == 0) return emissionRate[collectionId]; // start with 1 days rewards at first claim\t\r\n\t\t//if the current block is not newer then last claim 0 rewards\r\n\t\tif (block.timestamp <= info.lastClaim) return 0;\r\n\t\t\r\n\t\t//accumulate reward fraction every second\r\n\t\tuint256 secondsElapsed = block.timestamp - info.lastClaim;\r\n\t\tuint256 totalbonus = info.bonusRate + _pillarBonus + seasonalBonus[collectionId]; //add the pillar bonus and seasonal bonus \r\n\r\n\t\tuint256 ratePerSecond = (emissionRate[collectionId] * totalbonus) / 86400; //86400 seconds per day \t\r\n\t\tuint256 accumulatedReward = (secondsElapsed * ratePerSecond) / 100; //bonus rate is * 100 ( 100 = 1, 105=1.05 )\r\n\t\tuint256 totalReward = accumulatedReward + info.remainder; //add any remainder from previous\r\n\r\n\t\treturn totalReward;\r\n\t}\r\n\r\n\t//unclaimed band rewards\r\n\tfunction unclaimedBand(uint32 collectionId, uint256 _bandId) internal view returns (uint256) \r\n\t{\r\n\t\tbandInfo memory bi = bandInfos[collectionId][_bandId];\r\n\t\t//initial issuance\r\n\t\tif (bi.lastClaim == 0) return emissionRate[collectionId]; // start with 1 days rewards at first claim\r\n\t\t//if the current block is not newer then last claim 0 rewards\r\n\t\tif (block.timestamp <= bi.lastClaim) return 0;\r\n\r\n\t\t//accumulate reward fraction every second\r\n\t\tuint256 secondsElapsed = block.timestamp - bi.lastClaim;\r\n\t\tuint256 ratePerSecond = (emissionRate[collectionId] * bi.bonusRate) / 86400; //86400 seconds per day \t\r\n\t\tuint256 accumulatedReward = (secondsElapsed * ratePerSecond) / 100; //bonus rate is * 100 ( 100 = 1, 105=1.05 )\r\n\r\n\t\treturn accumulatedReward + bi.remainder; //add any remainder from previous\r\n\t}\r\n\r\n\tfunction unclaimedTokenRewards(uint32 collectionId, address owner, uint256[] calldata tokenIds) public view \r\n\treturns (\r\n\t\tuint256[] memory _tokenIds, \r\n\t\tuint256[] memory _unclaimed, \r\n\t\tuint32[] memory _bonus, \r\n\t\tuint8 _pillarBonus)\r\n\t{\r\n\t\tuint256 length = tokenIds.length;\r\n\t\tuint256[] memory unclaimed = new uint256[](length);\r\n\t\tuint32[] memory bonusRate = new uint32[](length);\r\n\r\n\t\t//read pillars contract and check for extra bonus\r\n\t\tuint8 pillarBonus = pillarz.checkOwnerRewards(owner);\r\n\t\t\t\t\r\n\t\tfor (uint32 i = 0; i < length;) {\r\n\t\t\ttokenInfo memory info = tokenInfos[collectionId][tokenIds[i]];\r\n\t\t\tbonusRate[i] = info.bonusRate;\r\n\t\t\tif (info.bandId == 0) unclaimed[i] = unclaimedRewards(collectionId, tokenIds[i], pillarBonus);\r\n\t\t\t//else unclaimed[i] = 0;  //defaults to zero\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\t\t\r\n\t\treturn (tokenIds, unclaimed, bonusRate, pillarBonus); //include has pillar bonus\r\n\t}\r\n\r\n\t//unclaimedBandRewards - need to return band ids, unclaimed total band bonus\r\n\tfunction unclaimedBandRewards(uint32 collectionId, uint256[] calldata bands) public view \r\n\treturns (\r\n\t\tuint256[] memory _bandIds, \r\n\t\tuint256[] memory _unclaimed, \r\n\t\tuint32[] memory _bonus)\r\n\t{\r\n\t\tuint256 length = bands.length;\r\n\t\tuint256[] memory unclaimed = new uint256[](length);\r\n\t\tuint32[] memory bonusRate = new uint32[](length);\r\n\t\t\t\t\r\n\t\tfor (uint32 i = 0; i < length;) {\r\n\t\t\tif (bands[i] > 0) \r\n\t\t\t{\r\n\t\t\t\tunclaimed[i] = unclaimedBand(collectionId, bands[i]);\t\t\r\n\t\t\t\tbonusRate[i] = bandInfos[collectionId][bands[i]].bonusRate;\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\tunclaimed[i] = 0;\r\n\t\t\t\tbonusRate[i] = 0;\r\n\t\t\t}\r\n \t\t\tunchecked { ++i;}\r\n\t\t}\r\n\t\t\r\n\t\treturn (bands, unclaimed, bonusRate);\r\n\t}\r\n\r\n\tfunction getGodzInfo(uint32 collectionId, uint256 tokenId) public view returns (tokenInfo memory)\r\n\t{\r\n\t\treturn tokenInfos[collectionId][tokenId];\r\n\t}\r\n\r\n\tfunction getGodzInfos(uint32 collectionId, uint256[] memory tokenIds) public view returns (tokenInfo[] memory)\r\n\t{\r\n\t\ttokenInfo[] memory infos = new tokenInfo[] (tokenIds.length);\r\n\r\n\t\tuint256 length = tokenIds.length;\r\n\t\tfor (uint32 i; i < length; )\r\n\t\t{\r\n\t\t\tinfos[i] = tokenInfos[collectionId][tokenIds[i]];\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\r\n\t\treturn infos;\r\n\t}\r\n\r\n\tfunction getBandId(uint32 collectionId, uint256 tokenId) public view returns (uint256)\r\n\t{\r\n\t\treturn tokenInfos[collectionId][tokenId].bandId;\r\n\t}\r\n\r\n\tfunction getBandMembers(uint32 collectionId, uint256 bandId) public view returns (uint256[] memory)\r\n\t{\r\n\t\treturn bandInfos[collectionId][bandId].members;\r\n\t}\r\n\r\n\tfunction getBandsByOwner(address owner, uint32 collectionId) public view returns (uint256[] memory)\r\n\t{\r\n\t\tuint256[] memory bands = ownerBands[collectionId][owner];\r\n\t\treturn bands;\r\n\t}\r\n\r\n\tfunction getBandInfos(uint32 collectionId, uint256[] memory bandIds) public view returns (bandInfo[] memory)\r\n\t{\r\n\t\tuint256 length = bandIds.length;\r\n\t\tbandInfo[] memory infos = new bandInfo[] (length);\r\n\t\t\r\n\t\tfor (uint32 i; i < length; )\r\n\t\t{\r\n\t\t\tinfos[i] = bandInfos[collectionId][bandIds[i]];\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\r\n\t\treturn infos;\r\n\t}\r\n\r\n\t//set token ids for each rewardTokenIds collection-> godzType -> tokenId\r\n\tfunction setRewardTokenID(uint256 collectionId, uint8 _godzType, uint256 tokenId) external onlyRole(DEFAULT_ADMIN_ROLE)\r\n\t{\r\n\t\t//collectionId -> godzType -> tokenId ->\r\n\t\trewardTokenIds[collectionId][_godzType] = tokenId; \r\n\t}\r\n\r\n    //set the reward token contract\r\n\tfunction setArtifactsContract(IArtifacts _contract) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n\t\trewards = _contract;\r\n\t}\r\n\r\n    //set the pillars token contract\r\n\tfunction setPillarzContract(IPillarz _contract) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n\t\tpillarz = _contract;\r\n\t}\r\n\r\n    //add a new nft contract for staking using the default rate\r\n\tfunction setTokenContracts(IGodz _contract) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n\t\ttokenContracts.push(_contract);\r\n        emissionRate.push(defaultEmissionRate);\r\n\t}\r\n\r\n    //add a new nft contract for staking and set the reward rate\r\n    function setTokenContractAndRateGWEI(IGodz _contract, uint256 _rateGwei) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n\t\ttokenContracts.push(_contract);\r\n        emissionRate.push(_rateGwei);\r\n\t}\r\n\r\n\t//change one of the NFT token contract address\r\n\tfunction changeTokenContracts(uint32 collectionId, IGodz _contract) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n\t\tif (collectionId >= tokenContracts.length) revert (\"NotExist\"); //Error -> Index Out Of Range\r\n\t\ttokenContracts[collectionId] = _contract; \r\n\t}\r\n   \r\n    //set the rewards rate for each token type\r\n    function setEmissionRateGWEI(uint8 collectionId, uint256 _rateGwei) external onlyRole(DEFAULT_ADMIN_ROLE) \r\n\t{\r\n        emissionRate[collectionId] = _rateGwei;\r\n    }\r\n\r\n    function getEmissionRateGWEI(uint8 collectionId) public view returns(uint256) \r\n\t{\r\n        return emissionRate[collectionId];\r\n    }\r\n\r\n\t//bonus rate is * 100 ( 100 = 1, 105=1.05 )\r\n\tfunction setRewardBonus(uint32 collectionId, uint256[] calldata tokens, uint8 setBonus) external onlyRole(MANAGER_ROLE) \r\n\t{\r\n\t\tuint256 length = tokens.length;\r\n\t\tfor (uint32 i = 0; i < length;) {\r\n\t\t\ttokenInfos[collectionId][tokens[i]].bonusRate = setBonus;\r\n\t\t\tunchecked { ++i;}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setGodzType(uint32 collectionId, uint256[] calldata tokens, uint8 setType) external onlyRole(MANAGER_ROLE) \r\n\t{\r\n\t\tuint256 length = tokens.length;\r\n\t\tfor (uint32 i = 0; i < length;) {\r\n\t\t\ttokenInfos[collectionId][tokens[i]].godzType = setType;\r\n\t\t\tunchecked { ++i; }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getSeasonalBonus(uint8 collectionId) external view returns (uint32)\r\n\t{\r\n\t\treturn seasonalBonus[collectionId];\r\n\t}\r\n\r\n\t//seasonal bonus is added 5 = 5%, 25 = 25%\r\n\tfunction setSeasonalBonus(uint32 collectionId, uint8 _seasonalBonus) external onlyRole(MANAGER_ROLE) \r\n\t{\r\n\t\tseasonalBonus[collectionId] = _seasonalBonus;\r\n\t}\r\n\t\r\n\t//bonus rate is * 100 ( 100 = 1, 105=1.05 )\r\n\tfunction getRewardBonus(uint32 collectionId, uint256 tokenId) external view returns (uint32) {\r\n\t\treturn tokenInfos[collectionId][tokenId].bonusRate;\r\n\t}\r\n\r\n\t//owner can withdraw if matic sent to the contract - should never happen\r\n\tfunction withdraw() public payable onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t(bool os, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    \trequire(os);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"contract IGodz\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"changeTokenContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"bandIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBatchBands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBatchTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bandId\",\"type\":\"uint256\"}],\"name\":\"claimSingleBand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimSingleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"createBand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bandId\",\"type\":\"uint256\"}],\"name\":\"disband\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBandId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"bandIds\",\"type\":\"uint256[]\"}],\"name\":\"getBandInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"bonusRate\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"members\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PolyRealmzQuests.bandInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bandId\",\"type\":\"uint256\"}],\"name\":\"getBandMembers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"}],\"name\":\"getBandsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"}],\"name\":\"getEmissionRateGWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGodzInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bandId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"godzType\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bonusRate\",\"type\":\"uint32\"}],\"internalType\":\"struct PolyRealmzQuests.tokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getGodzInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bandId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"godzType\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bonusRate\",\"type\":\"uint32\"}],\"internalType\":\"struct PolyRealmzQuests.tokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardBonus\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"}],\"name\":\"getSeasonalBonus\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pillarz\",\"outputs\":[{\"internalType\":\"contract IPillarz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract IArtifacts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArtifacts\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setArtifactsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rateGwei\",\"type\":\"uint256\"}],\"name\":\"setEmissionRateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"setType\",\"type\":\"uint8\"}],\"name\":\"setGodzType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPillarz\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setPillarzContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"setBonus\",\"type\":\"uint8\"}],\"name\":\"setRewardBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_godzType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setRewardTokenID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_seasonalBonus\",\"type\":\"uint8\"}],\"name\":\"setSeasonalBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGodz\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rateGwei\",\"type\":\"uint256\"}],\"name\":\"setTokenContractAndRateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGodz\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTokenContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenContracts\",\"outputs\":[{\"internalType\":\"contract IGodz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"bands\",\"type\":\"uint256[]\"}],\"name\":\"unclaimedBandRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bandIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unclaimed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_bonus\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"collectionId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unclaimedTokenRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unclaimed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_bonus\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"_pillarBonus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "PolyRealmzQuests", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://993f1b2e65d02b8c613da75036f5a5aed569529a065198f629e7217a710525f0"}