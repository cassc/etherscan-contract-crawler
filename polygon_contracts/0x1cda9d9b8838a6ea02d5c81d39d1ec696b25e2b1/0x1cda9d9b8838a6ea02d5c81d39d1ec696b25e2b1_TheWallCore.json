{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"thewallcore.sol\":{\"content\":\"/*\\r\\nThis file is part of the TheWall project.\\r\\n\\r\\nThe TheWall Contract is free software: you can redistribute it and/or\\r\\nmodify it under the terms of the GNU lesser General Public License as published\\r\\nby the Free Software Foundation, either version 3 of the License, or\\r\\n(at your option) any later version.\\r\\n\\r\\nThe TheWall Contract is distributed in the hope that it will be useful,\\r\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\r\\nGNU lesser General Public License for more details.\\r\\n\\r\\nYou should have received a copy of the GNU lesser General Public License\\r\\nalong with the TheWall Contract. If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n@author Ilya Svirin \\u003cis.svirin@gmail.com\\u003e\\r\\n*/\\r\\n// SPDX-License-Identifier: GNU lesser General Public License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"SignedSafeMath.sol\\\";\\r\\nimport \\\"Address.sol\\\";\\r\\nimport \\\"Strings.sol\\\";\\r\\nimport \\\"thewallusers.sol\\\";\\r\\n\\r\\n\\r\\ncontract TheWallCore is TheWallUsers\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n    using Address for address;\\r\\n    using Address for address payable;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    event SizeChanged(int256 wallWidth, int256 wallHeight);\\r\\n    event AreaCostChanged(uint256 costWei);\\r\\n    event FeeChanged(uint256 feePercents);\\r\\n    event FundsReceiverChanged(address fundsReceiver);\\r\\n    event SecretCommited(uint256 secret, bytes32 hashOfSecret);\\r\\n    event SecretUpdated(bytes32 hashOfNewSecret);\\r\\n\\r\\n    enum Status\\r\\n    {\\r\\n        None,\\r\\n        ForSale,\\r\\n        ForRent,\\r\\n        Rented\\r\\n    }\\r\\n\\r\\n    enum TokenType\\r\\n    {\\r\\n        Unknown,\\r\\n        Area,\\r\\n        Cluster\\r\\n    }\\r\\n\\r\\n    struct Token\\r\\n    {\\r\\n        TokenType  tt;\\r\\n        Status     status;\\r\\n        string     link;\\r\\n        string     tags;\\r\\n        string     title;\\r\\n        uint256    cost;\\r\\n        uint256    rentDuration;\\r\\n        address    tenant;\\r\\n        bytes      content;\\r\\n    }\\r\\n    \\r\\n    struct Area\\r\\n    {\\r\\n        int256     x;\\r\\n        int256     y;\\r\\n        bool       premium;\\r\\n        uint256    cluster;\\r\\n        bytes      image;\\r\\n        bytes32    hashOfSecret;\\r\\n        uint256    nonce;\\r\\n    }\\r\\n\\r\\n    struct Cluster\\r\\n    {\\r\\n        uint256[]  areas;\\r\\n        mapping (uint256 =\\u003e uint256) areaToIndex;\\r\\n        uint256    revision;\\r\\n    }\\r\\n\\r\\n    // x =\\u003e y =\\u003e area erc-721\\r\\n    mapping (int256 =\\u003e mapping (int256 =\\u003e uint256)) private _areasOnTheWall;\\r\\n\\r\\n    // erc-721 =\\u003e Token, Area or Cluster\\r\\n    mapping (uint256 =\\u003e Token) private _tokens;\\r\\n    mapping (uint256 =\\u003e Area) private _areas;\\r\\n    mapping (uint256 =\\u003e Cluster) private _clusters;\\r\\n\\r\\n    mapping (bytes32 =\\u003e uint256) private _secrets;\\r\\n    bytes32 private _hashOfSecret;\\r\\n    bytes32 private _hashOfSecretToCommit;\\r\\n\\r\\n    int256  public  _wallWidth;\\r\\n    int256  public  _wallHeight;\\r\\n    uint256 public  _costWei;\\r\\n    uint256 public  _feePercents;\\r\\n    address payable private _fundsReceiver;\\r\\n    address private _thewall;\\r\\n\\r\\n    constructor (address coupons) TheWallUsers(coupons)\\r\\n    {\\r\\n        _wallWidth = 500;\\r\\n        _wallHeight = 500;\\r\\n        _costWei = 1 ether / 10;\\r\\n        _feePercents = 30;\\r\\n        _fundsReceiver = payable(_msgSender());\\r\\n        emit SizeChanged(_wallWidth, _wallHeight);\\r\\n        emit AreaCostChanged(_costWei);\\r\\n        emit FeeChanged(_feePercents);\\r\\n        emit FundsReceiverChanged(_fundsReceiver);\\r\\n    }\\r\\n\\r\\n    function setTheWall(address thewall) public\\r\\n    {\\r\\n        require(thewall != address(0) \\u0026\\u0026 _thewall == address(0));\\r\\n        _thewall = thewall;\\r\\n    }\\r\\n\\r\\n    modifier onlyTheWall()\\r\\n    {\\r\\n        require(_msgSender() == _thewall);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function setWallSize(int256 wallWidth, int256 wallHeight) public onlyOwner\\r\\n    {\\r\\n        require(_wallWidth \\u003c= wallWidth \\u0026\\u0026 _wallHeight \\u003c= wallHeight);\\r\\n        _wallWidth = wallWidth;\\r\\n        _wallHeight = wallHeight;\\r\\n        emit SizeChanged(wallWidth, wallHeight);\\r\\n    }\\r\\n\\r\\n    function setCostWei(uint256 costWei) public onlyOwner\\r\\n    {\\r\\n        _costWei = costWei;\\r\\n        emit AreaCostChanged(costWei);\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 feePercents) public onlyOwner\\r\\n    {\\r\\n        _feePercents = feePercents;\\r\\n        emit FeeChanged(feePercents);\\r\\n    }\\r\\n\\r\\n    function setFundsReceiver(address payable fundsReceiver) public onlyOwner\\r\\n    {\\r\\n        require(fundsReceiver != address(0));\\r\\n        _fundsReceiver = fundsReceiver;\\r\\n        emit FundsReceiverChanged(fundsReceiver);\\r\\n    }\\r\\n\\r\\n    function commitSecret(uint256 secret) public onlyOwner\\r\\n    {\\r\\n        require(_hashOfSecretToCommit == keccak256(abi.encodePacked(secret)));\\r\\n        _secrets[_hashOfSecretToCommit] = secret;\\r\\n        emit SecretCommited(secret, _hashOfSecretToCommit);\\r\\n        delete _hashOfSecretToCommit;\\r\\n    }\\r\\n\\r\\n    function updateSecret(bytes32 hashOfNewSecret) public onlyOwner\\r\\n    {\\r\\n        _hashOfSecretToCommit = _hashOfSecret;\\r\\n        _hashOfSecret = hashOfNewSecret;\\r\\n        emit SecretUpdated(hashOfNewSecret);\\r\\n    }\\r\\n\\r\\n    function _canBeTransferred(uint256 tokenId) public view returns(TokenType)\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt != TokenType.Unknown, \\\"TheWallCore: No such token found\\\");\\r\\n        require(token.status != Status.Rented || token.rentDuration \\u003c block.timestamp, \\\"TheWallCore: Can\\u0027t transfer rented item\\\");\\r\\n        if (token.tt == TokenType.Area)\\r\\n        {\\r\\n            Area memory area = _areas[tokenId];\\r\\n            require(area.cluster == uint256(0), \\\"TheWallCore: Can\\u0027t transfer area owned by cluster\\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            Cluster storage cluster = _clusters[tokenId];\\r\\n            require(cluster.areas.length \\u003e 0, \\\"TheWallCore: Can\\u0027t transfer empty cluster\\\");\\r\\n        }\\r\\n        return token.tt;\\r\\n    }\\r\\n\\r\\n    function _isOrdinaryArea(uint256 areaId) public view\\r\\n    {\\r\\n        Token storage token = _tokens[areaId];\\r\\n        require(token.tt == TokenType.Area, \\\"TheWallCore: Token is not area\\\");\\r\\n        require(token.status != Status.Rented || token.rentDuration \\u003c block.timestamp, \\\"TheWallCore: Unordinary status\\\");\\r\\n        Area memory area = _areas[areaId];\\r\\n        require(area.cluster == uint256(0), \\\"TheWallCore: Area is owned by cluster\\\");\\r\\n    }\\r\\n\\r\\n    function _areasInCluster(uint256 clusterId) public view returns(uint256[] memory)\\r\\n    {\\r\\n        return _clusters[clusterId].areas;\\r\\n    }\\r\\n\\r\\n    function _forSale(uint256 tokenId, uint256 priceWei) onlyTheWall public\\r\\n    {\\r\\n        _canBeTransferred(tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.cost = priceWei;\\r\\n        token.status = Status.ForSale;\\r\\n    }\\r\\n\\r\\n    function _forRent(uint256 tokenId, uint256 priceWei, uint256 durationSeconds) onlyTheWall public\\r\\n    {\\r\\n        _canBeTransferred(tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.cost = priceWei;\\r\\n        token.status = Status.ForRent;\\r\\n        token.rentDuration = durationSeconds;\\r\\n    }\\r\\n\\r\\n    function _createCluster(uint256 tokenId, bytes memory content) onlyTheWall public\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.tt = TokenType.Cluster;\\r\\n        token.status = Status.None;\\r\\n        token.content = content;\\r\\n\\r\\n        Cluster storage cluster = _clusters[tokenId];\\r\\n        cluster.revision = 1;\\r\\n    }\\r\\n\\r\\n    function _removeCluster(uint256 tokenId) onlyTheWall public\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt == TokenType.Cluster, \\\"TheWallCore: no cluster found for remove\\\");\\r\\n        require(token.status != Status.Rented || token.rentDuration \\u003c block.timestamp, \\\"TheWallCore: can\\u0027t remove rented cluster\\\");\\r\\n\\r\\n        Cluster storage cluster = _clusters[tokenId];\\r\\n        for(uint i=0; i\\u003ccluster.areas.length; ++i)\\r\\n        {\\r\\n            uint256 areaId = cluster.areas[i];\\r\\n            \\r\\n            Token storage areaToken = _tokens[areaId];\\r\\n            areaToken.status = token.status;\\r\\n            areaToken.link = token.link;\\r\\n            areaToken.tags = token.tags;\\r\\n            areaToken.title = token.title;\\r\\n\\r\\n            Area storage area = _areas[areaId];\\r\\n            area.cluster = 0;\\r\\n        }\\r\\n        delete _clusters[tokenId];\\r\\n        delete _tokens[tokenId];\\r\\n    }\\r\\n    \\r\\n    function _abs(int256 v) pure public returns (int256)\\r\\n    {\\r\\n        if (v \\u003c 0)\\r\\n        {\\r\\n            v = -v;\\r\\n        }\\r\\n        return v;\\r\\n    }\\r\\n\\r\\n    function _create(uint256 tokenId, int256 x, int256 y, uint256 clusterId, uint256 nonce, bytes memory content) onlyTheWall public returns (uint256 revision, bytes32 hashOfSecret)\\r\\n    {\\r\\n        _areasOnTheWall[x][y] = tokenId;\\r\\n\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.tt = TokenType.Area;\\r\\n        token.status = Status.None;\\r\\n        token.content = content;\\r\\n\\r\\n        Area storage area = _areas[tokenId];\\r\\n        area.x = x;\\r\\n        area.y = y;\\r\\n        if (_abs(x) \\u003c= 100 \\u0026\\u0026 _abs(y) \\u003c= 100)\\r\\n        {\\r\\n            area.premium = true;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            area.nonce = nonce;\\r\\n            area.hashOfSecret = _hashOfSecret;\\r\\n        }\\r\\n\\r\\n        revision = 0;\\r\\n        if (clusterId !=0)\\r\\n        {\\r\\n            area.cluster = clusterId;\\r\\n        \\r\\n            Cluster storage cluster = _clusters[clusterId];\\r\\n            cluster.revision += 1;\\r\\n            revision = cluster.revision;\\r\\n            cluster.areas.push(tokenId);\\r\\n            cluster.areaToIndex[tokenId] = cluster.areas.length - 1;\\r\\n        }\\r\\n        \\r\\n        return (revision, area.hashOfSecret);\\r\\n    }\\r\\n\\r\\n    function _areaOnTheWall(int256 x, int256 y) public view returns(uint256)\\r\\n    {\\r\\n        return _areasOnTheWall[x][y];\\r\\n    }\\r\\n\\r\\n    function _buy(address payable tokenOwner, uint256 tokenId, address me, uint256 weiAmount, uint256 revision, address payable referrerCandidate) payable onlyTheWall public\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt != TokenType.Unknown, \\\"TheWallCore: No token found\\\");\\r\\n        require(token.status == Status.ForSale, \\\"TheWallCore: Item is not for sale\\\");\\r\\n        require(weiAmount == token.cost, string(abi.encodePacked(\\\"TheWallCore: Invalid amount of wei \\\", weiAmount.toString(), \\\"/\\\", token.cost.toString())));\\r\\n\\r\\n        bool premium = false;\\r\\n        if (token.tt == TokenType.Area)\\r\\n        {\\r\\n            Area storage area = _areas[tokenId];\\r\\n            require(area.cluster == 0, \\\"TheWallCore: Owned by cluster area can\\u0027t be sold\\\");\\r\\n            premium = _isPremium(area, tokenId);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            require(_clusters[tokenId].revision == revision, \\\"TheWallCore: Incorrect cluster\\u0027s revision\\\");\\r\\n        }\\r\\n        \\r\\n        token.status = Status.None;\\r\\n\\r\\n        uint256 fee;\\r\\n        if (!premium)\\r\\n        {\\r\\n            fee = msg.value.mul(_feePercents).div(100);\\r\\n            uint256 alreadyPayed = _processRef(me, referrerCandidate, fee);\\r\\n            _fundsReceiver.sendValue(fee.sub(alreadyPayed));\\r\\n        }\\r\\n        tokenOwner.sendValue(msg.value.sub(fee));\\r\\n    }\\r\\n    \\r\\n    function _rent(address payable tokenOwner, uint256 tokenId, address me, uint256 weiAmount, uint256 revision, address payable referrerCandidate) payable onlyTheWall public returns(uint256 rentDuration)\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt != TokenType.Unknown, \\\"TheWallCore: No token found\\\");\\r\\n        require(token.status == Status.ForRent, \\\"TheWallCore: Item is not for rent\\\");\\r\\n        require(weiAmount == token.cost, string(abi.encodePacked(\\\"TheWallCore: Invalid amount of wei \\\", weiAmount.toString(), \\\"/\\\", token.cost.toString())));\\r\\n\\r\\n        bool premium = false;\\r\\n        if (token.tt == TokenType.Area)\\r\\n        {\\r\\n            Area storage area = _areas[tokenId];\\r\\n            require(area.cluster == 0, \\\"TheWallCore: Owned by cluster area can\\u0027t be rented\\\");\\r\\n            premium = _isPremium(area, tokenId);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            require(_clusters[tokenId].revision == revision, \\\"TheWall: Incorrect cluster\\u0027s revision\\\");\\r\\n        }\\r\\n\\r\\n        rentDuration = block.timestamp.add(token.rentDuration);\\r\\n        token.status = Status.Rented;\\r\\n        token.cost = 0;\\r\\n        token.rentDuration = rentDuration;\\r\\n        token.tenant = me;\\r\\n        \\r\\n        uint256 fee;\\r\\n        if (!premium)\\r\\n        {\\r\\n            fee = msg.value.mul(_feePercents).div(100);\\r\\n            uint256 alreadyPayed = _processRef(me, referrerCandidate, fee);\\r\\n            _fundsReceiver.sendValue(fee.sub(alreadyPayed));\\r\\n        }\\r\\n        tokenOwner.sendValue(msg.value.sub(fee));\\r\\n\\r\\n        return rentDuration;\\r\\n    }\\r\\n\\r\\n    function _isPremium(Area storage area, uint256 tokenId) internal returns(bool)\\r\\n    {\\r\\n        if (area.hashOfSecret != bytes32(0))\\r\\n        {\\r\\n            uint256 secret = _secrets[area.hashOfSecret];\\r\\n            if (secret != 0)\\r\\n            {\\r\\n                uint256 factor = uint256(keccak256(abi.encodePacked(secret, tokenId, area.nonce)));\\r\\n                area.premium = ((factor % 1000) == 1);\\r\\n                area.hashOfSecret = bytes32(0);\\r\\n            }\\r\\n        }\\r\\n        return area.premium;\\r\\n    }\\r\\n\\r\\n    function _rentTo(uint256 tokenId, address tenant, uint256 durationSeconds) onlyTheWall public returns(uint256 rentDuration)\\r\\n    {\\r\\n        _canBeTransferred(tokenId);\\r\\n        rentDuration = block.timestamp.add(durationSeconds);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.status = Status.Rented;\\r\\n        token.cost = 0;\\r\\n        token.rentDuration = rentDuration;\\r\\n        token.tenant = tenant;\\r\\n        return rentDuration;\\r\\n    }\\r\\n\\r\\n    function _cancel(uint256 tokenId) onlyTheWall public\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt != TokenType.Unknown, \\\"TheWallCore: No token found\\\");\\r\\n        require(token.status == Status.ForRent || token.status == Status.ForSale, \\\"TheWallCore: item is not for rent or for sale\\\");\\r\\n        token.cost = 0;\\r\\n        token.status = Status.None;\\r\\n        token.rentDuration = 0;\\r\\n    }\\r\\n    \\r\\n    function _finishRent(address who, uint256 tokenId) onlyTheWall public\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        require(token.tt != TokenType.Unknown, \\\"TheWallCore: No token found\\\");\\r\\n        require(token.tenant == who, \\\"TheWall: Only tenant can finish rent\\\");\\r\\n        require(token.status == Status.Rented \\u0026\\u0026 token.rentDuration \\u003e block.timestamp, \\\"TheWallCore: item is not rented\\\");\\r\\n        token.status = Status.None;\\r\\n        token.rentDuration = 0;\\r\\n        token.cost = 0;\\r\\n        token.tenant = address(0);\\r\\n    }\\r\\n    \\r\\n    function _addToCluster(address me, address areaOwner, address clusterOwner, uint256 areaId, uint256 clusterId) onlyTheWall public returns(uint256 revision)\\r\\n    {\\r\\n        require(areaOwner == clusterOwner, \\\"TheWallCore: Area and Cluster have different owners\\\");\\r\\n        require(areaOwner == me, \\\"TheWallCore: Can be called from owner only\\\");\\r\\n\\r\\n        Token storage areaToken = _tokens[areaId];\\r\\n        Token storage clusterToken = _tokens[clusterId];\\r\\n        require(areaToken.tt == TokenType.Area, \\\"TheWallCore: Area not found\\\");\\r\\n        require(clusterToken.tt == TokenType.Cluster, \\\"TheWallCore: Cluster not found\\\");\\r\\n        require(areaToken.status != Status.Rented || areaToken.rentDuration \\u003c block.timestamp, \\\"TheWallCore: Area is rented\\\");\\r\\n        require(clusterToken.status != Status.Rented || clusterToken.rentDuration \\u003c block.timestamp, \\\"TheWallCore: Cluster is rented\\\");\\r\\n\\r\\n        Area storage area = _areas[areaId];\\r\\n        require(area.cluster == 0, \\\"TheWallCore: Area already in cluster\\\");\\r\\n        area.cluster = clusterId;\\r\\n        \\r\\n        areaToken.status = Status.None;\\r\\n        areaToken.rentDuration = 0;\\r\\n        areaToken.cost = 0;\\r\\n        \\r\\n        Cluster storage cluster = _clusters[clusterId];\\r\\n        cluster.revision += 1;\\r\\n        cluster.areas.push(areaId);\\r\\n        cluster.areaToIndex[areaId] = cluster.areas.length - 1;\\r\\n        return cluster.revision;\\r\\n    }\\r\\n\\r\\n    function _removeFromCluster(address me, address areaOwner, address clusterOwner, uint256 areaId, uint256 clusterId) onlyTheWall public returns(uint256 revision)\\r\\n    {\\r\\n        require(areaOwner == clusterOwner, \\\"TheWallCore: Area and Cluster have different owners\\\");\\r\\n        require(areaOwner == me, \\\"TheWallCore: Can be called from owner only\\\");\\r\\n\\r\\n        Token storage areaToken = _tokens[areaId];\\r\\n        Token storage clusterToken = _tokens[clusterId];\\r\\n        require(areaToken.tt == TokenType.Area, \\\"TheWallCore: Area not found\\\");\\r\\n        require(clusterToken.tt == TokenType.Cluster, \\\"TheWallCore: Cluster not found\\\");\\r\\n        require(clusterToken.status != Status.Rented || clusterToken.rentDuration \\u003c block.timestamp, \\\"TheWallCore: Cluster is rented\\\");\\r\\n\\r\\n        Area storage area = _areas[areaId];\\r\\n        require(area.cluster == clusterId, \\\"TheWallCore: Area is not in cluster\\\");\\r\\n        area.cluster = 0;\\r\\n\\r\\n        Cluster storage cluster = _clusters[clusterId];\\r\\n        cluster.revision += 1;\\r\\n        uint index = cluster.areaToIndex[areaId];\\r\\n        if (index != cluster.areas.length - 1)\\r\\n        {\\r\\n            uint256 movedAreaId = cluster.areas[cluster.areas.length - 1];\\r\\n            cluster.areaToIndex[movedAreaId] = index;\\r\\n            cluster.areas[index] = movedAreaId;\\r\\n        }\\r\\n        delete cluster.areaToIndex[areaId];\\r\\n        cluster.areas.pop();\\r\\n        return cluster.revision;\\r\\n    }\\r\\n\\r\\n    function _canBeManaged(address who, address owner, uint256 tokenId) internal view returns (TokenType t)\\r\\n    {\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        t = token.tt;\\r\\n        require(t != TokenType.Unknown, \\\"TheWallCore: No token found\\\");\\r\\n        if (t == TokenType.Area)\\r\\n        {\\r\\n            Area storage area = _areas[tokenId];\\r\\n            if (area.cluster != uint256(0))\\r\\n            {\\r\\n                token = _tokens[area.cluster];\\r\\n                require(token.tt == TokenType.Cluster, \\\"TheWallCore: No cluster token found\\\");\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (token.status == Status.Rented \\u0026\\u0026 token.rentDuration \\u003e block.timestamp)\\r\\n        {\\r\\n            require(who == token.tenant, \\\"TheWallCore: Rented token can be managed by tenant only\\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            require(who == owner, \\\"TheWallCore: Only owner can manager token\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setContent(address who, address owner, uint256 tokenId, bytes memory content) onlyTheWall public\\r\\n    {\\r\\n        _canBeManaged(who, owner, tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.content = content;\\r\\n    }\\r\\n\\r\\n    function _setAttributesComplete(address who, address owner, uint256 tokenId, bytes memory image, string memory link, string memory tags, string memory title) onlyTheWall public\\r\\n    {\\r\\n        TokenType tt = _canBeManaged(who, owner, tokenId);\\r\\n        require(tt == TokenType.Area, \\\"TheWallCore: Image can be set to area only\\\");\\r\\n        Area storage area = _areas[tokenId];\\r\\n        area.image = image;\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.link = link;\\r\\n        token.tags = tags;\\r\\n        token.title = title;\\r\\n        delete token.content;\\r\\n    }\\r\\n\\r\\n    function _setAttributes(address who, address owner, uint256 tokenId, string memory link, string memory tags, string memory title) onlyTheWall public\\r\\n    {\\r\\n        _canBeManaged(who, owner, tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.link = link;\\r\\n        token.tags = tags;\\r\\n        token.title = title;\\r\\n        delete token.content;\\r\\n    }\\r\\n\\r\\n    function _setImage(address who, address owner, uint256 tokenId, bytes memory image) onlyTheWall public\\r\\n    {\\r\\n        TokenType tt = _canBeManaged(who, owner, tokenId);\\r\\n        require(tt == TokenType.Area, \\\"TheWallCore: Image can be set to area only\\\");\\r\\n        Area storage area = _areas[tokenId];\\r\\n        area.image = image;\\r\\n        delete _tokens[tokenId].content;\\r\\n    }\\r\\n\\r\\n    function _setLink(address who, address owner, uint256 tokenId, string memory link) onlyTheWall public\\r\\n    {\\r\\n        _canBeManaged(who, owner, tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.link = link;\\r\\n        delete token.content;\\r\\n    }\\r\\n\\r\\n    function _setTags(address who, address owner, uint256 tokenId, string memory tags) onlyTheWall public\\r\\n    {\\r\\n        _canBeManaged(who, owner, tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.tags = tags;\\r\\n        delete token.content;\\r\\n    }\\r\\n\\r\\n    function _setTitle(address who, address owner, uint256 tokenId, string memory title) onlyTheWall public\\r\\n    {\\r\\n        _canBeManaged(who, owner, tokenId);\\r\\n        Token storage token = _tokens[tokenId];\\r\\n        token.title = title;\\r\\n        delete token.content;\\r\\n    }\\r\\n\\r\\n    function tokenInfo(uint256 tokenId) public view returns(bytes memory, string memory, string memory, string memory, bytes memory)\\r\\n    {\\r\\n        Token memory token = _tokens[tokenId];\\r\\n        bytes memory image;\\r\\n        if (token.tt == TokenType.Area)\\r\\n        {\\r\\n            Area storage area = _areas[tokenId];\\r\\n            image = area.image;\\r\\n        }\\r\\n        return (image, token.link, token.tags, token.title, token.content);\\r\\n    }\\r\\n\\r\\n    function _canBeCreated(int256 x, int256 y) view public\\r\\n    {\\r\\n        require(_abs(x) \\u003c _wallWidth \\u0026\\u0026 _abs(y) \\u003c _wallHeight, \\\"TheWallCore: Out of wall\\\");\\r\\n        require(_areaOnTheWall(x, y) == uint256(0), \\\"TheWallCore: Area is busy\\\");\\r\\n    }\\r\\n\\r\\n    function _processPaymentCreate(address me, uint256 weiAmount, uint256 areasNum, address payable referrerCandidate) onlyTheWall public payable returns(uint256)\\r\\n    {\\r\\n        uint256 usedCoupons = _useCoupons(me, areasNum);\\r\\n        areasNum -= usedCoupons;\\r\\n        return _processPayment(me, weiAmount, areasNum, referrerCandidate);\\r\\n    }\\r\\n    \\r\\n    function _processPayment(address me, uint256 weiAmount, uint256 itemsAmount, address payable referrerCandidate) internal returns (uint256)\\r\\n    {\\r\\n        uint256 payValue = _costWei.mul(itemsAmount);\\r\\n        require(payValue \\u003c= weiAmount, string(abi.encodePacked(\\\"TheWallCore: Invalid amount of wei \\\", payValue.toString(), \\\"/\\\", weiAmount.toString())));\\r\\n        if (weiAmount \\u003e payValue)\\r\\n        {\\r\\n            payable(me).sendValue(weiAmount.sub(payValue));\\r\\n        }\\r\\n        if (payValue \\u003e 0)\\r\\n        {\\r\\n            uint256 alreadyPayed = _processRef(me, referrerCandidate, payValue);\\r\\n            _fundsReceiver.sendValue(payValue.sub(alreadyPayed));\\r\\n        }\\r\\n        return payValue;\\r\\n    }\\r\\n\\r\\n    function _canBeCreatedMulti(int256 x, int256 y, int256 width, int256 height) view public\\r\\n    {\\r\\n        require(_abs(x) \\u003c _wallWidth \\u0026\\u0026\\r\\n                _abs(y) \\u003c _wallHeight \\u0026\\u0026\\r\\n                _abs(x.add(width)) \\u003c _wallWidth \\u0026\\u0026\\r\\n                _abs(y.add(height)) \\u003c _wallHeight,                \\r\\n                \\\"TheWallCpre: Out of wall\\\");\\r\\n        require(width \\u003e 0 \\u0026\\u0026 height \\u003e 0, \\\"TheWallCore: dimensions must be greater than zero\\\");\\r\\n    }\\r\\n\\r\\n    function _buyCoupons(address me, uint256 weiAmount, address payable referrerCandidate) public payable onlyTheWall returns (uint256)\\r\\n    {\\r\\n        uint256 couponsAmount = weiAmount.div(_costWei);\\r\\n        uint payValue = _processPayment(me, weiAmount, couponsAmount, referrerCandidate);\\r\\n        if (payValue \\u003e 0)\\r\\n        {\\r\\n            _giveCoupons(me, couponsAmount);\\r\\n        }\\r\\n        return payValue;\\r\\n    }\\r\\n    \\r\\n    function _clusterOf(uint256 tokenId) view public returns (uint256)\\r\\n    {\\r\\n        return _areas[tokenId].cluster;\\r\\n    }\\r\\n}\\r\\n\"},\"thewallcoupons.sol\":{\"content\":\"/*\\r\\nThis file is part of the TheWall project.\\r\\n\\r\\nThe TheWall Contract is free software: you can redistribute it and/or\\r\\nmodify it under the terms of the GNU lesser General Public License as published\\r\\nby the Free Software Foundation, either version 3 of the License, or\\r\\n(at your option) any later version.\\r\\n\\r\\nThe TheWall Contract is distributed in the hope that it will be useful,\\r\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\r\\nGNU lesser General Public License for more details.\\r\\n\\r\\nYou should have received a copy of the GNU lesser General Public License\\r\\nalong with the TheWall Contract. If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n@author Ilya Svirin \\u003cis.svirin@gmail.com\\u003e\\r\\n*/\\r\\n// SPDX-License-Identifier: GNU lesser General Public License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Context.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"Address.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract ERC223ReceivingContract\\r\\n{\\r\\n    function tokenFallback(address sender, uint amount, bytes memory data) public virtual;\\r\\n}\\r\\n\\r\\n\\r\\ncontract TheWallCoupons is Context\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    string public standard=\\u0027Token 0.1\\u0027;\\r\\n    string public name=\\u0027TheWall\\u0027;\\r\\n    string public symbol=\\u0027TWC\\u0027;\\r\\n    uint8 public decimals=0;\\r\\n    \\r\\n    event Transfer(address indexed sender, address indexed receiver, uint256 amount, bytes data);\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balanceOf;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    address private _thewallusers;\\r\\n\\r\\n    function setTheWallUsers(address thewallusers) public\\r\\n    {\\r\\n        require(thewallusers != address(0), \\\"TheWallCoupons: non-zero address is required\\\");\\r\\n        require(_thewallusers == address(0), \\\"TheWallCoupons: _thewallusers can be initialized only once\\\");\\r\\n        _thewallusers = thewallusers;\\r\\n    }\\r\\n\\r\\n    modifier onlyTheWallUsers()\\r\\n    {\\r\\n        require(_msgSender() == _thewallusers, \\\"TheWallCoupons: can be called from _theWallusers only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transfer(address receiver, uint256 amount, bytes memory data) public returns(bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), receiver, amount, data);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transfer(address receiver, uint256 amount) public returns(bool)\\r\\n    {\\r\\n        bytes memory empty = hex\\\"00000000\\\";\\r\\n         _transfer(_msgSender(), receiver, amount, empty);\\r\\n         return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address receiver, uint amount, bytes memory data) internal\\r\\n    {\\r\\n        require(receiver != address(0), \\\"TheWallCoupons: Transfer to zero-address is forbidden\\\");\\r\\n\\r\\n        balanceOf[sender] = balanceOf[sender].sub(amount);\\r\\n        balanceOf[receiver] = balanceOf[receiver].add(amount);\\r\\n        \\r\\n        if (receiver.isContract())\\r\\n        {\\r\\n            ERC223ReceivingContract r = ERC223ReceivingContract(receiver);\\r\\n            r.tokenFallback(sender, amount, data);\\r\\n        }\\r\\n        emit Transfer(sender, receiver, amount, data);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) onlyTheWallUsers public\\r\\n    {\\r\\n        require(account != address(0), \\\"TheWallCoupons: mint to the zero address\\\");\\r\\n\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        balanceOf[account] = balanceOf[account].add(amount);\\r\\n        bytes memory empty = hex\\\"00000000\\\";\\r\\n        emit Transfer(address(0), account, amount, empty);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) onlyTheWallUsers public\\r\\n    {\\r\\n        require(account != address(0), \\\"TheWallCoupons: burn from the zero address\\\");\\r\\n\\r\\n        balanceOf[account] = balanceOf[account].sub(amount, \\\"TheWallCoupons: burn amount exceeds balance\\\");\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        bytes memory empty = hex\\\"00000000\\\";\\r\\n        emit Transfer(account, address(0), amount, empty);\\r\\n    }\\r\\n}\\r\\n\"},\"thewallusers.sol\":{\"content\":\"/*\\r\\nThis file is part of the TheWall project.\\r\\n\\r\\nThe TheWall Contract is free software: you can redistribute it and/or\\r\\nmodify it under the terms of the GNU lesser General Public License as published\\r\\nby the Free Software Foundation, either version 3 of the License, or\\r\\n(at your option) any later version.\\r\\n\\r\\nThe TheWall Contract is distributed in the hope that it will be useful,\\r\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\r\\nGNU lesser General Public License for more details.\\r\\n\\r\\nYou should have received a copy of the GNU lesser General Public License\\r\\nalong with the TheWall Contract. If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n@author Ilya Svirin \\u003cis.svirin@gmail.com\\u003e\\r\\n*/\\r\\n// SPDX-License-Identifier: GNU lesser General Public License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"SafeMath.sol\\\";\\r\\nimport \\\"Address.sol\\\";\\r\\nimport \\\"thewallcoupons.sol\\\";\\r\\n\\r\\n\\r\\ncontract TheWallUsers is Ownable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address payable;\\r\\n\\r\\n    struct User\\r\\n    {\\r\\n        string          nickname;\\r\\n        bytes           avatar;\\r\\n        address payable referrer;\\r\\n    }\\r\\n    \\r\\n    TheWallCoupons private _coupons;\\r\\n\\r\\n    mapping (address =\\u003e User) public _users;\\r\\n    \\r\\n    event NicknameChanged(address indexed user, string nickname);\\r\\n    event AvatarChanged(address indexed user, bytes avatar);\\r\\n\\r\\n    event CouponsCreated(address indexed owner, uint256 created);\\r\\n    event CouponsUsed(address indexed owner, uint256 used);\\r\\n\\r\\n    event ReferrerChanged(address indexed me, address indexed referrer);\\r\\n    event ReferralPayment(address indexed referrer, address indexed referral, uint256 amountWei);\\r\\n\\r\\n    constructor (address coupons)\\r\\n    {\\r\\n        _coupons = TheWallCoupons(coupons);\\r\\n        _coupons.setTheWallUsers(address(this));\\r\\n    }\\r\\n\\r\\n    function setNickname(string memory nickname) public\\r\\n    {\\r\\n        _users[_msgSender()].nickname = nickname;\\r\\n        emit NicknameChanged(_msgSender(), nickname);\\r\\n    }\\r\\n\\r\\n    function setAvatar(bytes memory avatar) public\\r\\n    {\\r\\n        _users[_msgSender()].avatar = avatar;\\r\\n        emit AvatarChanged(_msgSender(), avatar);\\r\\n    }\\r\\n    \\r\\n    function setNicknameAvatar(string memory nickname, bytes memory avatar) public\\r\\n    {\\r\\n        setNickname(nickname);\\r\\n        setAvatar(avatar);\\r\\n    }\\r\\n    \\r\\n    function _useCoupons(address owner, uint256 count) internal returns(uint256 used)\\r\\n    {\\r\\n        used = _coupons.balanceOf(owner);\\r\\n        if (count \\u003c used)\\r\\n        {\\r\\n            used = count;\\r\\n        }\\r\\n        if (used \\u003e 0)\\r\\n        {\\r\\n            _coupons._burn(owner, used);\\r\\n            emit CouponsUsed(owner, used);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function giveCoupons(address owner, uint256 count) public onlyOwner\\r\\n    {\\r\\n        _giveCoupons(owner, count);\\r\\n    }\\r\\n    \\r\\n    function giveCouponsMulti(address[] memory owners, uint256 count) public onlyOwner\\r\\n    {\\r\\n        for(uint i = 0; i \\u003c owners.length; ++i)\\r\\n        {\\r\\n            _giveCoupons(owners[i], count);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _giveCoupons(address owner, uint256 count) internal\\r\\n    {\\r\\n        require(owner != address(0));\\r\\n        _coupons._mint(owner, count);\\r\\n        emit CouponsCreated(owner, count);\\r\\n    }\\r\\n    \\r\\n    function _processRef(address me, address payable referrerCandidate, uint256 amountWei) internal returns(uint256)\\r\\n    {\\r\\n        User storage user = _users[me];\\r\\n        if (referrerCandidate != address(0) \\u0026\\u0026 !referrerCandidate.isContract() \\u0026\\u0026 user.referrer == address(0))\\r\\n        {\\r\\n            user.referrer = referrerCandidate;\\r\\n            emit ReferrerChanged(me, referrerCandidate);\\r\\n        }\\r\\n        \\r\\n        uint256 alreadyPayed = 0;\\r\\n        uint256 refPayment = amountWei.mul(6).div(100);\\r\\n\\r\\n        address payable ref = user.referrer;\\r\\n        if (ref != address(0))\\r\\n        {\\r\\n            ref.sendValue(refPayment);\\r\\n            alreadyPayed = refPayment;\\r\\n            emit ReferralPayment(ref, me, refPayment);\\r\\n            \\r\\n            ref = _users[ref].referrer;\\r\\n            if (ref != address(0))\\r\\n            {\\r\\n                ref.sendValue(refPayment);\\r\\n                alreadyPayed = refPayment.mul(2);\\r\\n                emit ReferralPayment(ref, me, refPayment);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return alreadyPayed;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coupons\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costWei\",\"type\":\"uint256\"}],\"name\":\"AreaCostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"avatar\",\"type\":\"bytes\"}],\"name\":\"AvatarChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"CouponsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"name\":\"CouponsUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercents\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsReceiver\",\"type\":\"address\"}],\"name\":\"FundsReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"NicknameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ReferralPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secret\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashOfSecret\",\"type\":\"bytes32\"}],\"name\":\"SecretCommited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashOfNewSecret\",\"type\":\"bytes32\"}],\"name\":\"SecretUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wallWidth\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wallHeight\",\"type\":\"int256\"}],\"name\":\"SizeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"}],\"name\":\"_abs\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"areaOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"areaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clusterId\",\"type\":\"uint256\"}],\"name\":\"_addToCluster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revision\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"_areaOnTheWall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clusterId\",\"type\":\"uint256\"}],\"name\":\"_areasInCluster\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revision\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrerCandidate\",\"type\":\"address\"}],\"name\":\"_buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrerCandidate\",\"type\":\"address\"}],\"name\":\"_buyCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"_canBeCreated\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"width\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"height\",\"type\":\"int256\"}],\"name\":\"_canBeCreatedMulti\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_canBeTransferred\",\"outputs\":[{\"internalType\":\"enum TheWallCore.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_clusterOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_costWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"clusterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"_create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revision\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashOfSecret\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"_createCluster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feePercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_finishRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSeconds\",\"type\":\"uint256\"}],\"name\":\"_forRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWei\",\"type\":\"uint256\"}],\"name\":\"_forSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"areaId\",\"type\":\"uint256\"}],\"name\":\"_isOrdinaryArea\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"areasNum\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrerCandidate\",\"type\":\"address\"}],\"name\":\"_processPaymentCreate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_removeCluster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"areaOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"areaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clusterId\",\"type\":\"uint256\"}],\"name\":\"_removeFromCluster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revision\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revision\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"referrerCandidate\",\"type\":\"address\"}],\"name\":\"_rent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tenant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationSeconds\",\"type\":\"uint256\"}],\"name\":\"_rentTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tags\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"_setAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"image\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tags\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"_setAttributesComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"_setContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"image\",\"type\":\"bytes\"}],\"name\":\"_setImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"}],\"name\":\"_setLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tags\",\"type\":\"string\"}],\"name\":\"_setTags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"_setTitle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"avatar\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallHeight\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wallWidth\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secret\",\"type\":\"uint256\"}],\"name\":\"commitSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"giveCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"giveCouponsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"avatar\",\"type\":\"bytes\"}],\"name\":\"setAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"costWei\",\"type\":\"uint256\"}],\"name\":\"setCostWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercents\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"fundsReceiver\",\"type\":\"address\"}],\"name\":\"setFundsReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"}],\"name\":\"setNickname\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nickname\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"avatar\",\"type\":\"bytes\"}],\"name\":\"setNicknameAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thewall\",\"type\":\"address\"}],\"name\":\"setTheWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"wallWidth\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"wallHeight\",\"type\":\"int256\"}],\"name\":\"setWallSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashOfNewSecret\",\"type\":\"bytes32\"}],\"name\":\"updateSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheWallCore", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b105935beb596fab2e00866509af1dc39147048", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://81df68ca0bf709a6b833d8dbbb8c7be4b1a4621377a1f1918ec671e086ff5a55"}