{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/GOBValidCurrencies/GOBValidCurrencies.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\r\\n//......###(#######(,,,,.##########....######(((((*.......\\r\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\r\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\r\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\r\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\r\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\r\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\r\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\r\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\r\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\r\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\r\\n//........................................................\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author  Alejandro Garrido - Guardians of the Ball.\\r\\n * @title   Guardians of the Ball - GOBValidCurrencies.\\r\\n * @dev     Helper to manage a list of accepted currencies in inherited contracts.\\r\\n * Child contracts can call _addCurrency(), _removeCurrency(), and use the modifier validCurrency().\\r\\n * They can also access the list in the internal AddressSet `_currencies`.\\r\\n */\\r\\n\\r\\nabstract contract GOBValidCurrencies {\\r\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when new valid currency is added.\\r\\n\\t */\\r\\n\\tevent CurrencyRemoved(address indexed newCurrency);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when a valid currency is removed.\\r\\n\\t */\\r\\n\\tevent CurrencyAdded(address indexed newCurrency);\\r\\n\\r\\n\\tmodifier validCurrency(address currency) {\\r\\n\\t\\trequire(_currencies.contains(currency), \\\"GOBValidCurrencies: Invalid currency\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t// Accepted currencies.\\r\\n\\tEnumerableSet.AddressSet internal _currencies;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Returns all ERC20 accepted as payment.\\r\\n\\t * @return Array with all ERC20 addresses.\\r\\n\\t */\\r\\n\\tfunction validCurrencies() external view returns (address[] memory) {\\r\\n\\t\\treturn _currencies.values();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Check if a currency is listed.\\r\\n\\t * @param currency The ERC20 address.\\r\\n\\t * @return Whether the ERC20 is listed or not.\\r\\n\\t */\\r\\n\\tfunction isValidCurrency(address currency) external view returns (bool) {\\r\\n\\t\\treturn _currencies.contains(currency);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Adds a new currency to the list of ERC20s accepted.\\r\\n\\t *\\r\\n\\t * Emits {CurrencyAdded}.\\r\\n\\t *\\r\\n\\t * @param newCurrency ERC20 address (ie: usdc).\\r\\n\\t */\\r\\n\\tfunction _addCurrency(address newCurrency) internal {\\r\\n\\t\\trequire(newCurrency != address(0), \\\"GOBValidCurrencies: Zero address\\\");\\r\\n\\t\\trequire(!_currencies.contains(newCurrency), \\\"GOBValidCurrencies: Currency already exists\\\");\\r\\n\\t\\t_currencies.add(newCurrency);\\r\\n\\t\\temit CurrencyAdded(newCurrency);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Removes an ERC20 from the accepted list of currencies.\\r\\n\\t *\\r\\n\\t * Emits {CurrencyRemoved}.\\r\\n\\t *\\r\\n\\t * @param currency ERC20 address.\\r\\n\\t */\\r\\n\\tfunction _removeCurrency(address currency) internal validCurrency(currency) {\\r\\n\\t\\trequire(_currencies.length() > 1, \\\"GOBValidCurrencies: Only one currency left\\\");\\r\\n\\t\\t_currencies.remove(currency);\\r\\n\\t\\temit CurrencyRemoved(currency);\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/GOBWithdraw/GOBWithdraw.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\n//......###(#######(,,,,.##########....######(((((*.......\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\n//........................................................\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @author  Matias Arazi - Guardians of the Ball.\\n * @title   Guardians of the Ball - GOBWithdraw.\\n * @dev     Helper to manage withdraw functions in inherited contracts.\\n * Child contracts can call _withdraw(), _withdrawSet().\\n */\\n\\nabstract contract GOBWithdraw is Context {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @dev Emitted when funds are withdrawn from the contract for a specific tokenAddress.\\n\\t * @param callerAddress The address of the caller who initiated the withdrawal.\\n\\t * @param tokenAddress The address of the tokenAddress from which funds are withdrawn.\\n\\t * @param amount The amount of tokenAddress withdrawn.\\n\\t */\\n\\tevent Withdrawn(address indexed callerAddress, address indexed tokenAddress, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Withdraw funds from the contract for a specific tokenAddress.\\n\\t * @param token The address of the tokenAddress to withdraw from.\\n\\t * @param amount The amount of tokenAddress withdrawn.\\n\\t *\\n\\t * Requirements:\\n\\t * - The token address must be a valid ERC20 token. (address must be an erc20)\\n\\t */\\n\\tfunction _withdraw(address token, uint256 amount) internal {\\n\\t\\tIERC20 currency = IERC20(token);\\n\\t\\tcurrency.safeTransfer(msg.sender, amount);\\n\\t\\temit Withdrawn(_msgSender(), token, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw funds from the contract for multiple token addresses.\\n\\t * @param tokenSet AddressSet of tokens in storage.\\n\\t * @return isWithdrawn Withdrawn at least one of the tokens in `tokenSet`\\n\\t */\\n\\tfunction _withdrawSet(\\n\\t\\tEnumerableSet.AddressSet storage tokenSet\\n\\t) internal returns (bool isWithdrawn) {\\n\\t\\tuint256 balance;\\n\\t\\tuint256 len = tokenSet.length();\\n\\t\\tIERC20 currency;\\n\\n\\t\\tfor (uint256 i = 0; i < len; ) {\\n\\t\\t\\tcurrency = IERC20(tokenSet.at(i));\\n\\t\\t\\tbalance = currency.balanceOf(address(this));\\n\\t\\t\\tif (balance > 0) {\\n\\t\\t\\t\\t_withdraw(address(currency), balance);\\n\\t\\t\\t\\tisWithdrawn = true;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/marketV0/GOBMarket.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\n//......###(#######(,,,,.##########....######(((((*.......\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\n//........................................................\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"../base/GOBValidCurrencies/GOBValidCurrencies.sol\\\";\\nimport \\\"../base/GOBWithdraw/GOBWithdraw.sol\\\";\\nimport \\\"../token/vesting/IVesting.sol\\\";\\nimport \\\"../token/base/ERC20/IERC20MetadataBurnable.sol\\\";\\nimport \\\"../token/base/ERC1155/IERC1155Mint.sol\\\";\\n\\n/**\\n * @author  Alejandro Garrido - Guardians of the Ball.\\n * @title   Guardians of the Ball - GOBMarket.\\n * @notice  GOBMarket sales ERC1155 tokens in exchange for approved ERC20 tokens.\\n * Tokens listed for sale can be viewed with `listedItems()` and `listedItem()`.\\n * Tokens are minted to the buyer when the purchase is completed.\\n * Tokens can be bought using one of three different payment methods:\\n *      - `buyItem()`: pay with ERC20 tokens listed in `validCurrencies()`.\\n *      - `buyItemWithVesting()`: pay with ERC20 tokens locked in `vesting`.\\n *      - `buyItemWithSeed()`: pay with ERC20 seed tokens used by `vesting`.\\n */\\ncontract GOBMarket is GOBValidCurrencies, GOBWithdraw, AccessControl {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IERC20Metadata;\\n\\n\\tbytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\tbytes32 public constant SELLER_ROLE = keccak256(\\\"SELLER_ROLE\\\");\\n\\tbytes32 public constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n\\n\\t/**\\n\\t * @dev Emitted when a token has been purchased.\\n\\t */\\n\\tevent TokenPurchased(\\n\\t\\taddress indexed erc1155,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 quantity,\\n\\t\\taddress currency,\\n\\t\\tuint256 totalAmount\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when MANAGER_ROLE adds a new valid erc1155.\\n\\t */\\n\\tevent ERC1155Added(address indexed erc1155);\\n\\n\\t/**\\n\\t * @dev Emitted when MANAGER_ROLE removes valid erc1155.\\n\\t */\\n\\tevent ERC1155Removed(address indexed erc1155);\\n\\n\\t/**\\n\\t * @dev Emitted when MANAGER_ROLE changed the vesting address.\\n\\t */\\n\\tevent VestingChanged(address indexed newVesting);\\n\\n\\t/**\\n\\t * @dev Emitted when MANAGER_ROLE changed `seedPrice`.\\n\\t */\\n\\tevent SeedPriceChanged(uint256 indexed newSeedPrice);\\n\\n\\t/**\\n\\t * @dev Emitted when SELLER_ROLE lists an item for sale.\\n\\t */\\n\\tevent TokenListed(\\n\\t\\taddress indexed erc1155,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 salesCap\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when SELLER_ROLE removes an item selling list.\\n\\t */\\n\\tevent TokenUnlisted(address indexed erc1155, uint256 indexed tokenId);\\n\\n\\t/**\\n\\t * @dev Emitted when SELLER_ROLE changes the price of a token.\\n\\t */\\n\\tevent PriceChanged(\\n\\t\\taddress indexed erc1155,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 oldPrice,\\n\\t\\tuint256 newPrice\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when SELLER_ROLE changes the sale cap of a token listed for sale.\\n\\t */\\n\\tevent CapChanged(\\n\\t\\taddress indexed erc1155,\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tuint256 oldCap,\\n\\t\\tuint256 newCap\\n\\t);\\n\\n\\tmodifier validERC1155(address erc1155) {\\n\\t\\trequire(_erc1155Set.contains(erc1155), \\\"GOBMarket: Erc1155 not found\\\");\\n\\t\\t_;\\n\\t}\\n\\tmodifier validTokenId(address erc1155, uint256 tokenId) {\\n\\t\\trequire(_tokenIdSet[erc1155].contains(tokenId), \\\"GOBMarket: TokenId not found\\\");\\n\\t\\t_;\\n\\t}\\n\\tmodifier isVestingSet() {\\n\\t\\trequire(address(vesting) != address(0), \\\"GOBMarket: Vesting not set\\\");\\n\\t\\trequire(seedPrice > 0, \\\"GOBMarket: Vesting price not set\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tstruct ItemInfo {\\n\\t\\tuint256 price;\\n\\t\\tuint256 salesCap;\\n\\t\\tuint256 sold;\\n\\t}\\n\\n\\tenum BuyWith {\\n\\t\\tValidCurrency,\\n\\t\\tSeedToken,\\n\\t\\tSeedTokenVested\\n\\t}\\n\\n\\t// Decimals use to set the price for `_currencies` and seedTokens in `vesting`\\n\\tuint8 public immutable priceDecimals;\\n\\n\\t// erc1155 => tokenId => SaleInfo. Items may or me not be for sale.\\n\\tmapping(address => mapping(uint256 => ItemInfo)) public items;\\n\\n\\t// Price of seedTokens with decimals `priceDecimals`\\n\\tuint256 public seedPrice;\\n\\n\\t// Vesting contract\\n\\tIVesting public vesting;\\n\\n\\t// Erc1155s listed as valid\\n\\tEnumerableSet.AddressSet private _erc1155Set;\\n\\n\\t// Tokens available for sale. Erc1155 => tokenId set.\\n\\tmapping(address => EnumerableSet.UintSet) private _tokenIdSet;\\n\\n\\t/**\\n\\t * @dev Sets the deployer with role DEFAULT_ADMIN_ROLE, set priceDecimals and currencies.\\n\\t *\\n\\t * Requirements:\\n\\t * - `currencies` cannot be empty.\\n\\t * - `priceDecimals_ must be >=2 and <=6.\\n\\t *\\n\\t * @param currencies ERC20 accepted as payment. Should be stablecoins pegged to the same asset.\\n\\t * @param priceDecimals_ Decimals used in `items.price` and `seedPrice`.\\n\\t */\\n\\tconstructor(address[] memory currencies, uint8 priceDecimals_) {\\n\\t\\tuint256 len = currencies.length;\\n\\t\\trequire(len > 0, \\\"Currencies cannot be empty\\\");\\n        \\n\\t\\t// Cannot be greater than 6 to be able to work with USDT and USDC\\n\\t\\trequire(priceDecimals_ <= 6, \\\"Price decimals must be <= 6\\\");\\n\\t\\trequire(priceDecimals_ >= 2, \\\"Price decimals must be >= 2\\\");\\n\\t\\tpriceDecimals = priceDecimals_;\\n\\n\\t\\tfor (uint256 i = 0; i < len; ) {\\n\\t\\t\\t_addCurrencyDec(currencies[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t}\\n\\n\\t// --- PUBLIC ---\\n\\n\\t/**\\n\\t * @notice Returns the selling info for a token in `erc1155`.\\n\\t * @param erc1155 ERC1155 addresss.\\n\\t * @param tokenId Token to query. Must be listed for sale. See `listedItems`.\\n\\t * @return item Struct of `ItemInfo` with the price, cap and sold data.\\n\\t */\\n\\tfunction listedItem(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId\\n\\t) external view validTokenId(erc1155, tokenId) returns (ItemInfo memory item) {\\n\\t\\treturn items[erc1155][tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the selling info for all tokens in `erc1155` available for sale.\\n\\t * @param erc1155 ERC1155 addresss.\\n\\t * @return tokenIds Array of all tokenIds.\\n\\t * @return listedItems_ Array of `ItemInfo`. Matched by index with `_tokenIds`.\\n\\t */\\n\\tfunction listedItems(\\n\\t\\taddress erc1155\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvalidERC1155(erc1155)\\n\\t\\treturns (uint256[] memory tokenIds, ItemInfo[] memory listedItems_)\\n\\t{\\n\\t\\tuint256 length = _tokenIdSet[erc1155].length();\\n\\t\\tlistedItems_ = new ItemInfo[](length);\\n\\t\\ttokenIds = new uint256[](length);\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tlistedItems_[i] = items[erc1155][_tokenIdSet[erc1155].at(i)];\\n\\t\\t\\ttokenIds[i] = _tokenIdSet[erc1155].at(i);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns all the available ERC1155.\\n\\t * @return Array with all ERC1155 addresses.\\n\\t */\\n\\tfunction erc1155List() external view returns (address[] memory) {\\n\\t\\treturn _erc1155Set.values();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the ERC1155 counter.\\n\\t * @return ERC1155 counter.\\n\\t */\\n\\tfunction erc1155Length() external view returns (uint256) {\\n\\t\\treturn _erc1155Set.length();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the ERC1155 address at a specific `index`.\\n\\t * @return ERC1155 address.\\n\\t */\\n\\tfunction erc1155At(uint256 index) external view returns (address) {\\n\\t\\treturn _erc1155Set.at(index);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Buy tokens of a listed ERC1155 using an approved ERC20 as payment.\\n\\t * The token's price is in `items` and it is expressed in `priceDecimals`\\n\\t * If the price of token id 1 is set at 300000 and priceDecimals is 4, the price in USDC is 30.00\\n\\t * if paying with USDC as currency.\\n\\t *\\n\\t * Emits {TokenPurchased}.\\n\\t *\\n\\t * Requirements:\\n\\t * - `currency` must exists in validCurrencies().\\n\\t * - `erc1155` and `tokenId` must be listed for sale. See `listedItems` and `listedItem`.\\n\\t * - Sender must have enough balance of selected `currency`.\\n\\t * - GOBMarket must have enough allowance of sender's selected `currency`.\\n\\t *\\n\\t * @param erc1155 ERC1155 addresss.\\n\\t * @param tokenId Token to purchase.\\n\\t * @param to Address to mint the `tokenId`.\\n\\t * @param quantity Amount of tokens to purchase. It cannot be zero.\\n\\t * @param currency ERC20 to be used as payment.\\n\\t */\\n\\tfunction buyItem(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\taddress currency\\n\\t) external validCurrency(currency) {\\n\\t\\t_buyItem(erc1155, tokenId, to, quantity, currency, BuyWith.ValidCurrency);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Buy tokens of a listed ERC1155 using ERC20 tokens locked in `vesting`.\\n\\t * The token's price is in `items` and it is expressed in `priceDecimals`.\\n\\t * The value of the locked tokens is set in `seedPrice` and is also using `priceDecimals`.\\n\\t * (See buyItem)\\n\\t *\\n\\t * If `seedPrice` is 10000 and `priceDecimals` is 4, the convertion rate between\\n\\t * any `validCurrencies()` and locked tokens is 1:1 (10000 / 10**4) (ie: 1 LockedToken = 1 USDC)\\n\\t * If `seedPrice` is 5000 the convertion rate is 1:2 (5000 / 10**4) (ie: 1 LockedToken = 2 USDC)\\n\\t *\\n\\t * Emits {TokenPurchased}.\\n\\t *\\n\\t * Requirements:\\n\\t * - `erc1155` and `tokenId` must be listed for sale. See `listedItems` and `listedItem`.\\n\\t * - `vesting` and `seedPrice` must be set.\\n\\t * - Sender must have enough balance of locked tokens in `vesting`.\\n\\t *\\n\\t * @param erc1155 ERC1155 addresss.\\n\\t * @param tokenId Token to purchase.\\n\\t * @param to Address to mint the `tokenId`.\\n\\t * @param quantity Amount of tokens to purchase. It cannot be zero.\\n\\t */\\n\\tfunction buyItemWithVesting(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress to,\\n\\t\\tuint256 quantity\\n\\t) external isVestingSet {\\n\\t\\t_buyItem(erc1155, tokenId, to, quantity, vesting.token(), BuyWith.SeedTokenVested);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Buy tokens of a listed ERC1155 using ERC20 seed tokens used by `vesting`.\\n\\t * All price calculations are the same as `buyItemWithVesting()`.\\n\\t *\\n\\t * Emits {TokenPurchased}.\\n\\t *\\n\\t * Requirements:\\n\\t * - `erc1155` and `tokenId` must be listed for sale. See `listedItems` and `listedItem`.\\n\\t * - Sender must have enough balance of seed token used by `vesting`.\\n\\t * - GOBMarket must have enough allowance of sender's seed token.\\n\\t * - `vesting` and `seedPrice` must be set.\\n\\t *\\n\\t * @param erc1155 ERC1155 addresss.\\n\\t * @param to Address to mint the `tokenId`.\\n\\t * @param tokenId Token to purchase.\\n\\t * @param quantity Amount of tokens to purchase. It cannot be zero.\\n\\t */\\n\\tfunction buyItemWithSeed(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress to,\\n\\t\\tuint256 quantity\\n\\t) external isVestingSet {\\n\\t\\t_buyItem(erc1155, tokenId, to, quantity, vesting.token(), BuyWith.SeedToken);\\n\\t}\\n\\n\\t// --- MANAGER ---\\n\\n\\t/**\\n\\t * @notice Adds a new currency to the list of ERC20s accepted as payments.\\n\\t *\\n\\t * IMPORTANT: All ERC20s are assumed to be of the same market value.\\n\\t * There is only one price per token id listed for sale, and that price applies\\n\\t * to all currencies.\\n\\t *\\n\\t * Emits {CurrencyAdded}.\\n\\t *\\n\\t * @param newCurrency ERC20 address (ie: usdc).\\n\\t */\\n\\tfunction addCurrency(address newCurrency) external onlyRole(MANAGER_ROLE) {\\n\\t\\t_addCurrencyDec(newCurrency);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes an ERC20 from the accepted list of currencies.\\n\\t *\\n\\t * Emits {CurrencyRemoved}.\\n\\t *\\n\\t * @param currency ERC20 address.\\n\\t */\\n\\tfunction removeCurrency(address currency) external onlyRole(MANAGER_ROLE) {\\n\\t\\t_removeCurrency(currency);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds an ERC1155 that will hold the tokens to be sold (minted).\\n\\t * GOBMarket must have minting access in `erc1155` at purchase time.\\n\\t *\\n\\t * Emits {ERC1155Added}.\\n\\t *\\n\\t * @param erc1155 ERC1155 address\\n\\t */\\n\\tfunction addERC1155(address erc1155) external onlyRole(MANAGER_ROLE) {\\n\\t\\trequire(erc1155 != address(0), \\\"GOBMarket: Invalid erc1155 address\\\");\\n\\t\\trequire(!_erc1155Set.contains(erc1155), \\\"GOBMarket: Erc1155 already exists\\\");\\n\\t\\t_erc1155Set.add(erc1155);\\n\\t\\temit ERC1155Added(erc1155);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes an ERC1155.\\n\\t *\\n\\t * Emits {ERC1155Removed}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `erc1155` must not have tokens listed for sale.\\n\\t *\\n\\t * @param erc1155 ERC1155 address\\n\\t */\\n\\tfunction removeERC1155(address erc1155) external onlyRole(MANAGER_ROLE) validERC1155(erc1155) {\\n\\t\\trequire(_tokenIdSet[erc1155].length() == 0, \\\"GOBMarket: Erc1155 has tokens listed\\\");\\n\\t\\t_erc1155Set.remove(erc1155);\\n\\t\\temit ERC1155Removed(erc1155);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the vesting contract that allows the purchase using vested tokens or seedTokens.\\n\\t * @param vesting_ Vesting address.\\n\\t *\\n\\t * Emits {VestingChanged}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `vesting_` must have vesting token set.\\n\\t *  - vested token decimals must be >= `priceDecimals`.\\n\\t */\\n\\tfunction setVesting(address vesting_) external onlyRole(MANAGER_ROLE) {\\n\\t\\trequire(vesting_ != address(0), \\\"GOBMarket: Zero address\\\");\\n\\t\\tIERC20Metadata seedToken = IERC20Metadata(IVesting(vesting_).token());\\n\\t\\trequire(\\n\\t\\t\\tseedToken.decimals() >= priceDecimals,\\n\\t\\t\\t\\\"GOBMarket: Vesting token's decimals too low\\\"\\n\\t\\t);\\n\\t\\tvesting = IVesting(vesting_);\\n\\t\\temit VestingChanged(vesting_);\\n\\t}\\n\\n\\t// --- SELLER ---\\n\\n\\t/**\\n\\t * @notice Lists one tokenId for sale. `erc1155` must exists.\\n\\t *\\n\\t * Emits {TokenListed}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `tokenId` Must no be listed.\\n\\t *\\n\\t * @param erc1155 ERC1155 address.\\n\\t * @param tokenId The token id to be minted in `erc1155`. .\\n\\t * @param price Token's price using validCurrencies() with priceDecimals.\\n\\t * @param salesCap Max amount of tokens that can be sold.\\n\\t */\\n\\tfunction listItem(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 price,\\n\\t\\tuint256 salesCap\\n\\t) external onlyRole(SELLER_ROLE) validERC1155(erc1155) {\\n\\t\\trequire(!_tokenIdSet[erc1155].contains(tokenId), \\\"GOBMarket: Token aleready listed\\\");\\n\\n\\t\\t// Add tokenId if not present\\n\\t\\t_tokenIdSet[erc1155].add(tokenId);\\n\\n\\t\\t// Set price (if different)\\n\\t\\t_setPrice(erc1155, tokenId, price);\\n\\n\\t\\t// Set cap (if diffeerent)\\n\\t\\t_setCap(erc1155, tokenId, salesCap);\\n\\n\\t\\temit TokenListed(erc1155, tokenId, price, salesCap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unlists tokens from the selling list.\\n\\t *\\n\\t * Emits {TokenUnlisted}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `tokenId` must be listed.\\n\\t *\\n\\t * @param erc1155 ERC1155 address.\\n\\t * @param tokenIds Array with the token ids to be removed.\\n\\t */\\n\\tfunction unlistItems(\\n\\t\\taddress erc1155,\\n\\t\\tuint256[] calldata tokenIds\\n\\t) external onlyRole(SELLER_ROLE) {\\n\\t\\trequire(tokenIds.length > 0, \\\"tokenIds cannot be empty\\\");\\n\\t\\tfor (uint256 i = 0; i < tokenIds.length; ) {\\n\\t\\t\\trequire(_tokenIdSet[erc1155].contains(tokenIds[i]), \\\"GOBMarket: TokenId not found\\\");\\n\\t\\t\\t_tokenIdSet[erc1155].remove(tokenIds[i]);\\n\\t\\t\\temit TokenUnlisted(erc1155, tokenIds[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Changes the priced of a token listed for sale.\\n\\t *\\n\\t * Emits {PriceChanged}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `tokenId` must be listed.\\n\\t *  - `newPrice` must be different than the previous price.\\n\\t *\\n\\t * @param erc1155 ERC1155 address.\\n\\t * @param tokenId The token id to be changed.\\n\\t * @param newPrice New price.\\n\\t */\\n\\tfunction changePrice(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 newPrice\\n\\t) external onlyRole(SELLER_ROLE) validTokenId(erc1155, tokenId) {\\n\\t\\tuint256 oldPrice = items[erc1155][tokenId].price;\\n\\t\\trequire(_setPrice(erc1155, tokenId, newPrice), \\\"GOBMarket: Same price\\\");\\n\\t\\temit PriceChanged(erc1155, tokenId, oldPrice, newPrice);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Change the sale cap of a token listed for sale.\\n\\t *\\n\\t * Emits {CapChanged}.\\n\\t *\\n\\t * Requirements:\\n\\t *  - `tokenId` must be listed.\\n\\t *  - `newCap`Must be different than previous cap and cannot be less than the amount sold so far.\\n\\t *\\n\\t * @param erc1155 ERC1155 address.\\n\\t * @param tokenId The token id to be changed.\\n\\t * @param newCap New cap.\\n\\t */\\n\\tfunction changeCap(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 newCap\\n\\t) external onlyRole(SELLER_ROLE) validTokenId(erc1155, tokenId) {\\n\\t\\tuint256 oldCap = items[erc1155][tokenId].salesCap;\\n\\t\\trequire(_setCap(erc1155, tokenId, newCap), \\\"GOBMarket: Same cap\\\");\\n\\t\\temit CapChanged(erc1155, tokenId, oldCap, newCap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the parity betwen the seed token in `vesting` and accepted currencies.\\n\\t * Calculations use `priceDecimals`. See `buyItemWithVesting()`.\\n\\t *\\n\\t * NOTE: If `seedPrice` is set to zero, buyItemWithVesting() and buyItemWithSeed()\\n\\t * will be disabled.\\n\\t *\\n\\t * Emits {SeedPriceChanged}.\\n\\t *\\n\\t * @param price New price.\\n\\t */\\n\\tfunction setSeedPrice(uint256 price) external onlyRole(SELLER_ROLE) {\\n\\t\\tseedPrice = price;\\n\\t\\temit SeedPriceChanged(price);\\n\\t}\\n\\n\\t// --- WITHDRAW ---\\n\\n\\t/**\\n\\t * @notice  See {GOBWithdraw-_withdrawSet}.\\n\\t */\\n\\tfunction withdrawCurrencies() external onlyRole(WITHDRAW_ROLE) {\\n\\t\\trequire(_withdrawSet(_currencies), \\\"GOBMarket: No balance available\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice  See {GOBWithdraw-_withdraw}.\\n\\t */\\n\\tfunction withdraw(address currency_, uint256 amount) external onlyRole(WITHDRAW_ROLE) {\\n\\t\\trequire(amount > 0, \\\"GOBMarket: Amount cannot be zero\\\");\\n\\t\\t_withdraw(currency_, amount);\\n\\t}\\n\\n\\t// --- PRIVATE ---\\n\\n\\t/**\\n\\t * @dev Called by buyItem(), buyItemWithVesting() and buyItemWithSeed().\\n\\t */\\n\\tfunction _buyItem(\\n\\t\\taddress erc1155,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\taddress currency,\\n\\t\\tBuyWith buywith\\n\\t) private validTokenId(erc1155, tokenId) {\\n\\t\\trequire(to != address(0), \\\"GOBMarket: Zero to address\\\");\\n\\t\\trequire(quantity > 0, \\\"GOBMarket: Quantity cannot be zero\\\");\\n\\t\\trequire(\\n\\t\\t\\titems[erc1155][tokenId].salesCap - items[erc1155][tokenId].sold >= quantity,\\n\\t\\t\\t\\\"GOBMarket: Not enough units available\\\"\\n\\t\\t);\\n\\n\\t\\titems[erc1155][tokenId].sold += quantity;\\n\\n\\t\\tuint256 totalAmout;\\n\\t\\taddress sender = _msgSender();\\n\\t\\tif (buywith == BuyWith.ValidCurrency) {\\n\\t\\t\\tIERC20Metadata _currency = IERC20Metadata(currency);\\n\\t\\t\\tuint256 price = items[erc1155][tokenId].price;\\n\\t\\t\\ttotalAmout = price * quantity * (10 ** (_currency.decimals() - priceDecimals));\\n\\t\\t\\t_currency.safeTransferFrom(sender, address(this), totalAmout);\\n\\t\\t} else {\\n\\t\\t\\tIERC20MetadataBurnable seedToken = IERC20MetadataBurnable(currency);\\n\\t\\t\\tuint256 factor = items[erc1155][tokenId].price * seedPrice;\\n\\t\\t\\tuint256 price = (factor * 10 ** (seedToken.decimals() - priceDecimals)) /\\n\\t\\t\\t\\t10 ** priceDecimals;\\n\\n\\t\\t\\ttotalAmout = price * quantity;\\n\\n\\t\\t\\tif (buywith == BuyWith.SeedToken) {\\n\\t\\t\\t\\tseedToken.burnFrom(sender, totalAmout);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// buywith == BuyWith.SeedTokenVested\\n\\t\\t\\t\\tIVesting(vesting).withdrawFrom(sender, totalAmout);\\n\\t\\t\\t\\tseedToken.burn(totalAmout);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tIERC1155Mint(erc1155).mint(to, tokenId, quantity, \\\"\\\");\\n\\t\\temit TokenPurchased(erc1155, tokenId, to, quantity, currency, totalAmout);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Changes the token's price only if `newPrice` is different than stored price.\\n\\t * @return bool Returns true if the stored price was changed and false otherwise.\\n\\t */\\n\\tfunction _setPrice(address erc1155, uint256 tokenId, uint256 newPrice) private returns (bool) {\\n\\t\\trequire(newPrice > 0, \\\"GOBMarket: Price cannot be zero\\\");\\n\\t\\tif (items[erc1155][tokenId].price == newPrice) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\titems[erc1155][tokenId].price = newPrice;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Changes the token's salesCap only if `newCap` is different than stored salesCap.\\n\\t * @return bool Returns true if the stored salesCap was changed and false otherwise.\\n\\t */\\n\\tfunction _setCap(address erc1155, uint256 tokenId, uint256 newCap) private returns (bool) {\\n\\t\\trequire(newCap > 0, \\\"GOBMarket: SalesCap cannot be zero\\\");\\n\\t\\tif (items[erc1155][tokenId].salesCap == newCap) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tnewCap >= items[erc1155][tokenId].sold,\\n\\t\\t\\t\\\"GOBMarket: SalesCap cannot be less than sold\\\"\\n\\t\\t);\\n\\t\\titems[erc1155][tokenId].salesCap = newCap;\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _addCurrencyDec(address newCurrency) private {\\n\\t\\trequire(\\n\\t\\t\\tIERC20Metadata(newCurrency).decimals() >= priceDecimals,\\n\\t\\t\\t\\\"GOBMarket: Currency decimals too low\\\"\\n\\t\\t);\\n\\t\\t_addCurrency(newCurrency);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/token/base/ERC1155/IERC1155Mint.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\r\\n//......###(#######(,,,,.##########....######(((((*.......\\r\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\r\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\r\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\r\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\r\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\r\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\r\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\r\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\r\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\r\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\r\\n//........................................................\\r\\n/// @title Guardians of the Ball - ERC1155CrossmintAdapter\\r\\n/// @author Guardians of the Ball\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IERC1155Mint {\\r\\n\\tfunction mint(address to, uint256 id, uint256 amount, bytes memory data) external;\\r\\n}\"\r\n    },\r\n    \"contracts/token/base/ERC20/IERC20MetadataBurnable.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\r\\n//......###(#######(,,,,.##########....######(((((*.......\\r\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\r\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\r\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\r\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\r\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\r\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\r\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\r\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\r\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\r\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\r\\n//........................................................\\r\\n/// @title Guardians of the Ball - IERC20MetadataBurnable\\r\\n/// @author Guardians of the Ball\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IERC20MetadataBurnable is IERC20Metadata {\\r\\n\\tfunction burn(uint256 amount) external;\\r\\n\\r\\n\\tfunction burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/vesting/IVesting.sol\": {\r\n      \"content\": \"//...........,,..,,,,,,,..................................\\n//......###(#######(,,,,.##########....######(((((*.......\\n//......%%%%%%%%%%%%%.,#%%%%%%%%%%%%%..%%%%%%%%%%%%%......\\n//......%%%%%...%%%&%,,%%&&&,,,,&&%%%..%%%%%...%%%%%......\\n//......&&&&&...&&.,,,,&&&&&,***&&&&&..&&&&&...&&&&&......\\n//......&&&&&.,,,,,,,,*&@@@@///*@@&@&,.&&&&&...&&&&&......\\n//.....*@@@@@.@@@@@@&**@@@@@%%#/@@@@,,&@@@@@@@@@@@@.......\\n//......@@@@@.@@@#@@@**&@@@@%&#(@@@@@,,@@@@@@@@@@@@@......\\n//......&&&&&...@@@@@,*&@@@@////@@@@@,,&&&&&...&&&&&......\\n//......&&&&&...&&&&&,,&&&&@***,&&&&&,.&&&&&...&&&&&......\\n//......%%%&&...&&&&&,,%&&&&,,,,&&&&&..&&&%%...&&&&&......\\n//......%%%%%%%%%%%%%..#%%%%%%%%%%%%#..%%%%%%%%%%%%%......\\n//........................................................\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Guardians of the Ball - IVesting\\n * @author Guardians of the Ball\\n * @notice Vesting contract Interface\\n */\\ninterface IVesting {\\n\\t/**\\n\\t * @dev Agenda struct.\\n\\t * @param account The address of the agenda owner.\\n\\t * @param amount The amount of tokens currently being locked, amount is substracted for each withdrawal/authorizedWithdrawal.\\n\\t * @param endTime The end time of the vesting in unix timestamp.\\n\\t */\\n\\tstruct Agenda {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 endTime;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Emitted when a new agenda is created by the `OTC_CONTROLLER_ROLE`.\\n\\t * @param account The address of the agenda owner.\\n\\t * @param amount The amount of tokens to be vested.\\n\\t * @param agendaId the hash identifier of the agenda\\n\\t * @param start The start time of the vesting in unix timestamp.\\n\\t * @param end The end time of the vesting in unix timestamp.\\n\\t */\\n\\tevent AgendaCreated(\\n\\t\\taddress indexed account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32 agendaId,\\n\\t\\tuint256 start,\\n\\t\\tuint256 end\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a withdrawal or authorized withdrawal is made.\\n\\t * @param account The address of the agenda owner.\\n\\t * @param operator The address of the caller, if `operator` == `account` then it is a withdrawal, else, an authorized withdrawal.\\n\\t * @param amount The amount of tokens withdrawn.\\n\\t */\\n\\tevent Withdrawn(address indexed account, address indexed operator, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Returns the address of the token being vested.\\n\\t */\\n\\tfunction token() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Returns available balance of `account`.\\n\\t * @param account The address to query.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns locked balance of `account`.\\n\\t * @param account The address to query.\\n\\t */\\n\\tfunction totalLocked(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns all vested balance of `account`.\\n\\t * @param account The address to query.\\n\\t */\\n\\tfunction totalVested(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev withdraws all available tokens for the sender.\\n\\t *\\n\\t * Emits a {Withdrawn} event.\\n\\t *\\n\\t * Requirements:\\n\\t * - the agenda must be unlocked.\\n\\t * - the sender must have a non-zero balance.\\n\\t */\\n\\tfunction withdraw() external;\\n\\n\\t/**\\n\\t * @dev withdraws `amount` tokens for `agendaOwner`.\\n\\t * @param agendaOwner address to spend `amount` tokens from\\n\\t * @param amount The amount of tokens to spend.\\n\\t *\\n\\t * Emits a {Withdrawn} event.\\n\\t *\\n\\t * Requirements:\\n\\t * - `agendaOwner` must have a non-zero balance.\\n\\t * - Must be called by `AUTHORIZED_SPENDER_ROLE`\\n\\t * - `agendaOwner` must have approved operator or caller to spend `amount` tokens\\n\\t */\\n\\tfunction withdrawFrom(address agendaOwner, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Creates a new agenda that locks `amount` tokens for `beneficiary` until `block.timestamp` + `durationPerAgenda`.\\n\\t * @param beneficiary The address of the agenda owner.\\n\\t * @param amount The amount of tokens to be vested.\\n\\t *\\n\\t * Emits a {AgendaCreated} event.\\n\\t *\\n\\t * Requirements:\\n\\t * - Must be called by `OTC_CONTROLLER_ROLE`\\n\\t * - `beneficiary` must not be the zero address.\\n\\t * - `amount` must be non-zero.\\n\\t * - `beneficiary` must have approved contract to spend `amount` tokens.\\n\\t */\\n\\tfunction createAgenda(address beneficiary, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currencies\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"priceDecimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"CurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"CurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"}],\"name\":\"ERC1155Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"}],\"name\":\"ERC1155Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSeedPrice\",\"type\":\"uint256\"}],\"name\":\"SeedPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salesCap\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVesting\",\"type\":\"address\"}],\"name\":\"VestingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"}],\"name\":\"addERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyItemWithSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyItemWithVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"changeCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"erc1155At\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155Length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155List\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"isValidCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesCap\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"listedItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"}],\"internalType\":\"struct GOBMarket.ItemInfo\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"}],\"name\":\"listedItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"}],\"internalType\":\"struct GOBMarket.ItemInfo[]\",\"name\":\"listedItems_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"}],\"name\":\"removeERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setSeedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vesting_\",\"type\":\"address\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlistItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validCurrencies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GOBMarket", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}