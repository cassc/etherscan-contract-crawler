{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AllianceStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./LibLazyStaking.sol\\\";\\nimport \\\"./Managable.sol\\\";\\nimport \\\"./IAllianceChecker.sol\\\";\\n\\ncontract AllianceStaking is Managable, Pausable {\\n    using ECDSA for bytes32;\\n\\n    struct Stake {\\n        uint256 allianceId;\\n        uint256 amount;\\n        address payer;\\n        address owner;\\n    }\\n\\n    // Options\\n    uint256 public pricePerSeat;\\n    uint256 public pricePerCreation;\\n    uint32 public allianceMaxSeats;\\n    bytes32 private domainSeparator;\\n    address public tokenAddress;\\n    address public allianceCheckerAddress;\\n    address public signerAddress;\\n\\n    // Storage - Stakes\\n    mapping(uint256 => address) public allianceOwners;\\n    mapping(uint256 => address[]) public allianceMembers;\\n    mapping(address => Stake) public addressStakings;\\n\\n    // Events\\n    event ChangedPricePerSeat(uint256 _price);\\n    event ChangedPricePerCreation(uint256 _price);\\n    event ChangedTokenAddress(address _token);\\n    event ChangedAllianceMaxSeats(uint32 _maxSeats);\\n    event ChangedAllianceCheckerAddress(address _allianceChecker);\\n    event ChangedSignerAddress(address _signer);\\n\\n    event CreatedAlliance(address indexed _owner, uint256 indexed _allianceId, uint256 indexed _serialId);\\n    event DestroyedAlliance(uint256 indexed _allianceId);\\n    event LeavedAlliance(uint256 indexed _allianceId, address indexed _addr);\\n    event JoinedAlliance(uint256 indexed _allianceId, address indexed _addr, address _staker);\\n\\n    event Transfer(uint256 indexed _allianceId, address indexed _from, address indexed _to);\\n\\n    constructor(\\n        uint256 _pricePerSeat,\\n        uint256 _pricePerCreation,\\n        address _token,\\n        uint32 _allianceMaxSeats,\\n        address _allianceChecker,\\n        address _signerAddress,\\n        string memory _appName,\\n        string memory _version           \\n    ) {        \\n        _setPricePerSeat(_pricePerSeat);\\n        _setPricePerCreation(_pricePerCreation);\\n        _setTokenAddress(_token);\\n        _setSignerAddress(_signerAddress);\\n        _setAllianceMaxSeats(_allianceMaxSeats);\\n        _setAllianceCheckerAddress(_allianceChecker);\\n\\n        _addManager(msg.sender);\\n\\n        domainSeparator = keccak256(abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(_appName)),\\n            keccak256(bytes(_version)),\\n            block.chainid,\\n            address(this)\\n        ));                \\n    }\\n\\n    function setPricePerSeat(uint256 _price) external onlyManager {\\n        _setPricePerSeat(_price);\\n    }\\n\\n    function setPricePerCreation(uint256 _price) external onlyManager {\\n        _setPricePerCreation(_price);\\n    }\\n\\n    function setTokenAddress(address _token) external onlyManager {\\n        _setTokenAddress(_token);\\n    }\\n\\n    function setAllianceMaxSeats(uint32 _maxSeats) external onlyManager {\\n        _setAllianceMaxSeats(_maxSeats);\\n    }\\n\\n    function setAllianceCheckerAddress(address _allianceChecker) external onlyManager {\\n        _setAllianceCheckerAddress(_allianceChecker);\\n    }\\n\\n    function setSignerAddress(address _signerAddress) external onlyManager {\\n        _setSignerAddress(_signerAddress);\\n    } \\n\\n    function togglePause() external onlyManager {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }   \\n\\n    //\\n    // Helpers functions\\n    // \\n    function getMembers(uint256 _allianceId) public view returns(address[] memory) {\\n        return allianceMembers[_allianceId];\\n    }\\n\\n    function ownerOf(uint256 _allianceId) public view returns(address) {\\n        return allianceOwners[_allianceId];\\n    }\\n\\n    function stakesByAlliance(uint256 _allianceId) public view returns(Stake[] memory) {\\n        uint256 _len = allianceMembers[_allianceId].length;\\n        Stake[] memory _stakes = new Stake[](_len);\\n        for(uint256 i = 0; i < _len; i++) {\\n            address _addr = allianceMembers[_allianceId][i];\\n            _stakes[i] = addressStakings[_addr];\\n        }\\n\\n        return _stakes;\\n    }\\n\\n    //\\n    // Working functions\\n    //\\n    function createAlliance(LibLazyStaking.Stake calldata _data, bytes calldata _signature) external whenNotPaused returns(uint256) {\\n        address _sender = msg.sender;\\n\\n        require(verifyTypedDataHash(domainSeparator, _data, _signature, signerAddress), \\\"bad sig\\\");\\n        require(allianceOwners[_data.id] == address(0), \\\"alliance exists\\\");\\n        require(_data.owner == _sender, \\\"address missmatch\\\");\\n        require(addressStakings[_sender].amount == 0, \\\"you have stake\\\");\\n\\n        uint256 _price = pricePerCreation;\\n        require(IERC20(tokenAddress).transferFrom(_sender, address(this), _price), \\\"can't transfer tokens\\\");\\n        \\n        Stake memory _stake = Stake({\\n            payer: _sender,\\n            owner: _sender,\\n            allianceId: _data.id,\\n            amount: _price\\n        });\\n\\n        addressStakings[_sender] = _stake;\\n        allianceMembers[_stake.allianceId].push(_sender);\\n        allianceOwners[_stake.allianceId] = _sender;\\n\\n        emit CreatedAlliance(_sender, _stake.allianceId, _stake.allianceId);\\n\\n        return _stake.allianceId;\\n    }\\n\\n    function removeMember(uint256 _allianceId, address _member) external whenNotPaused onlyAllianceOwner(_allianceId) {\\n        address _sender = msg.sender;\\n        require(_sender != _member, \\\"removing self\\\");\\n\\n        Stake memory _stake = addressStakings[_member];\\n        require(_stake.allianceId == _allianceId, \\\"not a member\\\");\\n        delete(addressStakings[_member]);\\n        removeAllianceMember(_allianceId, _member);\\n\\n        require(IERC20(tokenAddress).transfer(_stake.payer, _stake.amount), \\\"transfer failed\\\");\\n        emit LeavedAlliance(_allianceId, _member);\\n    }\\n\\n    function destroyAlliance(uint256 _allianceId) external whenNotPaused onlyAllianceOwner(_allianceId) {\\n        address _sender = msg.sender;\\n\\n        require(allianceMembers[_allianceId].length <= 1, \\\"alliance with members\\\");\\n        require(IAllianceChecker(allianceCheckerAddress).canDisband(_allianceId), \\\"alliance can't be destroyed\\\");\\n\\n        Stake memory _stake = addressStakings[_sender];\\n        delete(addressStakings[_sender]);\\n        delete(allianceMembers[_allianceId]);\\n        delete(allianceOwners[_allianceId]);\\n\\n        if (_stake.amount > 0) {\\n            require(IERC20(tokenAddress).transfer(_sender, _stake.amount), \\\"transfer failed\\\");\\n        }\\n\\n        emit DestroyedAlliance(_allianceId);\\n    }\\n\\n    function createStake(uint256 _allianceId, address _owner) external whenNotPaused {\\n        address _sender = msg.sender;\\n        Stake memory _stake = addressStakings[_owner];\\n        require(_stake.amount == 0, \\\"already staked\\\");\\n\\n        if (_owner != _sender) {\\n            require(allianceOwners[_allianceId] == _sender, \\\"not alliance owner\\\");\\n        }\\n\\n        require(allianceMembers[_allianceId].length < allianceMaxSeats, \\\"max capacity\\\");\\n\\n        Stake memory _newStake = Stake({\\n            payer: _sender,\\n            owner: _owner,\\n            allianceId: _allianceId,\\n            amount: pricePerSeat\\n        });\\n\\n        require(IERC20(tokenAddress).transferFrom(_sender, address(this), _newStake.amount), \\\"transfer failed\\\");\\n        addressStakings[_owner] = _newStake;\\n        allianceMembers[_allianceId].push(_owner);\\n\\n        emit JoinedAlliance(_allianceId, _owner, _sender);\\n    }\\n\\n    function removeStake() external whenNotPaused {\\n        address _sender = msg.sender;\\n        Stake memory _stake = addressStakings[_sender];\\n\\n        require(_stake.owner == _sender, \\\"not in alliance\\\");\\n        require(allianceOwners[_stake.allianceId] != _sender, \\\"called by owner\\\");\\n\\n        delete(addressStakings[_sender]);\\n        require(IERC20(tokenAddress).transfer(_stake.payer, _stake.amount), \\\"transfer failed\\\");\\n\\n        removeAllianceMember(_stake.allianceId, _sender);\\n        emit LeavedAlliance(_stake.allianceId, _sender);\\n    }\\n\\n    function transfer(uint256 _allianceId, address _to) external whenNotPaused onlyAllianceOwner(_allianceId) {\\n        address _sender = msg.sender;\\n\\n        require(addressStakings[_to].amount == 0, \\\"already have stake\\\");\\n\\n        Stake memory _stake = addressStakings[_sender];\\n        delete(addressStakings[_sender]);\\n\\n        _stake.owner = _to;\\n        _stake.payer = _to;\\n        addressStakings[_to] = _stake;\\n        allianceOwners[_allianceId] = _to;\\n\\n        emit Transfer(_allianceId, _sender, _to);\\n    }\\n\\n    //\\n    // Internal functions\\n    //\\n    function removeAllianceMember(uint256 _allianceId, address _addr) internal {\\n        uint256 _memberIdx = 0;\\n        for(uint256 i = 0; i < allianceMembers[_allianceId].length; i++) {\\n            if (allianceMembers[_allianceId][i] == _addr) {\\n                _memberIdx = i;\\n                break;\\n            }\\n        }                \\n\\n        if(_memberIdx != allianceMembers[_allianceId].length - 1) {\\n            allianceMembers[_allianceId][_memberIdx] = allianceMembers[_allianceId][allianceMembers[_allianceId].length - 1];\\n        }\\n        allianceMembers[_allianceId].pop();        \\n    }\\n\\n    function verifyTypedDataHash(bytes32 _domainSeparator, LibLazyStaking.Stake calldata _stake, bytes calldata _signature, address _owner) internal pure returns (bool) {\\n        bytes32 digest = ECDSA.toTypedDataHash(_domainSeparator, LibLazyStaking.hash(_stake));\\n        address signer = ECDSA.recover(digest, _signature);\\n\\n        return signer == _owner;\\n    }        \\n\\n    modifier onlyAllianceOwner(uint256 _allianceId) {\\n        require(msg.sender == allianceOwners[_allianceId], \\\"not owner\\\");\\n        _;\\n    }\\n\\n    function _setPricePerSeat(uint256 _price) internal {\\n        require(_price > 0, \\\"zero price\\\");\\n        pricePerSeat = _price;\\n        emit ChangedPricePerSeat(_price);\\n    }\\n\\n    function _setPricePerCreation(uint256 _price) internal {\\n        require(_price > 0, \\\"zero price\\\");\\n        pricePerCreation = _price;\\n        emit ChangedPricePerCreation(_price);\\n    }\\n\\n    function _setTokenAddress(address _addr) internal {\\n        require(_addr != address(0), \\\"zero address\\\");\\n        tokenAddress = _addr;\\n        emit ChangedTokenAddress(_addr);\\n    }\\n\\n    function _setAllianceMaxSeats(uint32 _maxSeats) internal {\\n        require(_maxSeats > 0, \\\"zero maxSeats\\\");\\n        allianceMaxSeats = _maxSeats;\\n        emit ChangedAllianceMaxSeats(_maxSeats);\\n    }\\n\\n    function _setAllianceCheckerAddress(address _addr) internal {\\n        require(_addr != address(0), \\\"zero address\\\");\\n        allianceCheckerAddress = _addr;\\n        emit ChangedAllianceCheckerAddress(_addr);\\n    }  \\n\\n    function _setSignerAddress(address _addr) internal {\\n        require(_addr != address(0), \\\"zero address\\\");\\n        signerAddress = _addr;\\n        emit ChangedSignerAddress(_addr);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LibLazyStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary LibLazyStaking {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Stake(uint256 id,address owner)\\\");\\n\\n    struct Stake {\\n        uint256 id;\\n        address owner;\\n    }\\n\\n    function hash(Stake memory _stake) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _stake.id, _stake.owner));\\n    }    \\n}\"\r\n    },\r\n    \"contracts/Managable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract Managable {\\n    mapping(address => bool) private managers;\\n    address[] private managersAddresses;\\n\\n    event AddedManager(address _address);\\n    event RemovedManager(address _address);\\n\\n    modifier onlyManager() {\\n        require(managers[msg.sender], \\\"caller is not manager\\\");\\n        _;\\n    }\\n\\n    function getManagers() public view returns (address[] memory) {\\n        return managersAddresses;\\n    }\\n\\n    function transferManager(address _manager) external onlyManager {\\n        _removeManager(msg.sender);\\n        _addManager(_manager);\\n    }\\n\\n    function addManager(address _manager) external onlyManager {\\n        _addManager(_manager);\\n    }\\n\\n    function removeManager(address _manager) external onlyManager {\\n        uint index;\\n        for(uint i = 0; i < managersAddresses.length; i++) {\\n            if(managersAddresses[i] == _manager) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        managersAddresses[index] = managersAddresses[managersAddresses.length - 1];\\n        managersAddresses.pop();\\n\\n        _removeManager(_manager);\\n    }\\n\\n    function _addManager(address _manager) internal {\\n        managers[_manager] = true;\\n        managersAddresses.push(_manager);\\n        emit AddedManager(_manager);\\n    }\\n\\n    function _removeManager(address _manager) internal {\\n        managers[_manager] = false;\\n        emit RemovedManager(_manager);\\n    }\\n}\"\r\n    },\r\n    \"contracts/IAllianceChecker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IAllianceChecker {\\n    function canDisband(uint256 _allianceId) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerSeat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerCreation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_allianceMaxSeats\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_allianceChecker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_allianceChecker\",\"type\":\"address\"}],\"name\":\"ChangedAllianceCheckerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_maxSeats\",\"type\":\"uint32\"}],\"name\":\"ChangedAllianceMaxSeats\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ChangedPricePerCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ChangedPricePerSeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"ChangedSignerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ChangedTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_serialId\",\"type\":\"uint256\"}],\"name\":\"CreatedAlliance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"}],\"name\":\"DestroyedAlliance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"JoinedAlliance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LeavedAlliance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressStakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allianceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allianceCheckerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allianceMaxSeats\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allianceMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allianceOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct LibLazyStaking.Stake\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createAlliance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"}],\"name\":\"destroyAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"}],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerCreation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerSeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allianceChecker\",\"type\":\"address\"}],\"name\":\"setAllianceCheckerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxSeats\",\"type\":\"uint32\"}],\"name\":\"setAllianceMaxSeats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPricePerCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPricePerSeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"}],\"name\":\"stakesByAlliance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allianceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct AllianceStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allianceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AllianceStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000001043561a8829300000000000000000000000000000000000000000000000000030ca024f987b90000000000000000000000000000010ef8736545726efdd086dde8311c4dddfbeb9f20000000000000000000000000000000000000000000000000000000000000064000000000000000000000000afd19ac103fe20076b9ffdde0fede766e0a28ce9000000000000000000000000c47c187e384991981e91703a2921e3844c2934fb00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001243727970746f626f7473416c6c69616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}