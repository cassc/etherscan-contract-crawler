{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2021-09-07\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-05-11\r\n*/\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n     function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n     \r\n     \r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n                                    \r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n                //GRAB = IERC721Receiver(to).onERC721Received.selector;\r\n                //return retval == retval;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721Enumerable.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\extensions\\ERC721URIStorage.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts\\ComicMinter.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface EngineEcosystemContract{\r\n    function isEngineContract( address _address ) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract MicroMachineManufacturingPlant is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable  {\r\n    uint256 private _tokenIds;\r\n    bool public futuresEnabled;\r\n\r\n    uint256 public warbotMintFee = 0;\r\n   \r\n    \r\n    event WarBotsManufactured(address to, uint256 quantity);\r\n    \r\n   \r\n    bytes4 ERC721_RECEIVED = 0x150b7a02;\r\n    \r\n    address public MicroMachineAddress;\r\n    address public EmergencyAddress;\r\n    address public EngineEcosystemContractAddress;\r\n    address public nanoReserve;\r\n    \r\n    uint256 public manufacturingPeriod;\r\n   \r\n    address public nanomachines;\r\n   \r\n    \r\n    mapping ( uint256 => ManufacturingPlant ) public ManufacturingPlants;\r\n    mapping ( address => uint256[] ) public userManufacturingPlants;\r\n    mapping ( address =>uint256 ) public  userManufacturingPlantCount;\r\n    uint256 public ManufacturingPlantCount=0;\r\n    \r\n    uint256 public globalwarbotproduction;\r\n    uint256 public globalwarbotmanufacturingplants;\r\n    \r\n   \r\n    \r\n    string public  contractURIstorefront = '{ \"name\": \"Micromachine Warbots\", \"description\": \"Rise of the Warbots is one of the greatest Play-to-Earn 3D NFT Augmented Reality (AR) PVP Blockchain gaming experiences where players unleash their customizable and upgradeable Warbots in the form of a tractor, walker or drone against one another pitting strategy and skill for great rewards! Every single item in the Warbot universe is also a collectible NFT.\", \"image\": \"https://riseofthewarbots.com\", \"external_link\": \"https://riseofthewarbots.com\", \"seller_fee_basis_points\": 300, \"fee_recipient\": \"0x42A1DE863683F3230568900bA23f86991D012f42\"}'; \r\n    \r\n    \r\n     string public _tokenURI = '{\"attributes\":[{\"trait_type\":\"type\",\"value\":\"Amorphous\"},{\"trait_type\":\"level\",\"value\":0},{\"trait_type\":\"Hitpoints\",\"value\":0},{\"trait_type\":\"Attack\",\"value\":0},{\"trait_type\":\"Defense\",\"value\":0},{\"trait_type\":\"Speed\",\"value\":0},{\"trait_type\":\"Movement\",\"value\":0},{\"display_type\":\"boost_number\",\"trait_type\":\"attack_bonus\",\"value\":0},{\"display_type\":\"boost_number\",\"trait_type\":\"Speed_Bonus\",\"value\":0},{\"display_type\":\"number\",\"trait_type\":\"generation\",\"value\":1}],\"description\":\"Amorphous. Origin: 0,0,0 \",\"external_url\":\"http://riseofthewarbots.com\",\"image\":\"https://gateway.pinata.cloud/ipfs/QmdCo4hCdDKcXWAtczVpVCheucjBZsiWEUdWpFBEJ9VKtP\",\"name\":\"Amorphous Warbot.\" ,\"seller_fee_basis_points\": 500, \"fee_recipient\": \"0x42A1DE863683F3230568900bA23f86991D012f42\" }';\r\n     \r\n    mapping ( address => uint256[] ) public usersWarbots;  \r\n  \r\n    mapping ( uint256 => uint256 ) public warbotArrayPosition;\r\n    mapping ( uint256 => uint256 ) public plantArrayPosition;\r\n    \r\n    \r\n    uint256 public deposits;\r\n    \r\n    bool public coolDownPeriod;\r\n    \r\n    uint256 public royaltyPerc;\r\n    mapping ( uint256 => address payable ) public royaltySplitContract;\r\n    \r\n    uint256 public upgradeCost= 1000 * 10 **18;\r\n    uint8 public plantMaxLevel = 1 ;\r\n     \r\n    bool public migrationActive;\r\n    \r\n    \r\n    \r\n    \r\n    address payable public royaltyContract;\r\n    \r\n    mapping ( uint256 => mapping ( uint256 => mapping ( uint256 => uint256) ) ) public futuresTokenId;\r\n    mapping ( uint256 => uint256 ) public plantProfile;\r\n    \r\n    bool public maxPeriodMinting = true;\r\n     \r\n    struct ManufacturingPlant {\r\n       address _owner;\r\n       string  _name;\r\n       Location  _location;\r\n       uint256 _level;\r\n       uint256 _micromachinesstaked;\r\n       uint256 _timeofexpiration;\r\n       uint256 _timeunitslocked;\r\n       uint256 _timeinitiated;\r\n       uint256 _lastmanufacture;\r\n       uint256 _warbotsmanufactured;\r\n       uint256 _periodproductionrate;\r\n       uint256 _periodsmanufactured;\r\n       bool    _status;\r\n    \r\n    } \r\n    \r\n    struct Location {\r\n        int256 x;\r\n        int256 y;\r\n        int256 z;\r\n    }\r\n    \r\n    mapping ( uint256 => WarbotCertificateOfManufacture ) public WarbotManufactureCertificates;\r\n    mapping ( uint256 => mapping ( uint256 => bool )) public futuresSetup;\r\n    \r\n    struct WarbotCertificateOfManufacture {\r\n        uint256 _plant;\r\n        uint256 _plantlevel;\r\n        uint256 _plantperiod;\r\n        Location _location;\r\n        uint256 _warbotposition;\r\n    }\r\n    \r\n    \r\n    constructor() ERC721(\"MicroMachineWarBots\", \"MMWarBot\") {\r\n        MicroMachineAddress = 0xB4C2E61Dbf9ad64bE35F2c665b7e22aCE9310A0A; // matic\r\n       \r\n        EmergencyAddress = msg.sender;\r\n        manufacturingPeriod = 90 days;\r\n       migrationActive = true;\r\n        plantMaxLevel = 1;\r\n        royaltyContract = payable(msg.sender);\r\n        EngineEcosystemContractAddress = 0xd210f14b48948ED989a095afEE4258c207840B41;\r\n        nanoReserve =  0xC07608073de878837Ed3eAC07337365771a9bc06;\r\n        nanomachines = 0xFEf93D5789FA34cC4c29Cc8Dd243eFE23A23e69D;\r\n    }\r\n    \r\n    function emergencyWithdraw() public OnlyEmergency {\r\n        ERC20 _token = ERC20(MicroMachineAddress);\r\n        _token.transfer( msg.sender, _token.balanceOf (address(this)) );\r\n    }\r\n    \r\n function emergencyWithdrawAnyToken( address _address) public OnlyEmergency {\r\n        ERC20 _token = ERC20(_address);\r\n        _token.transfer( msg.sender, _token.balanceOf (address(this)) );\r\n    }\r\n\r\n    function emergencyWithdrawBNB() public OnlyEmergency {\r\n       payable(msg.sender).transfer( address(this).balance );\r\n    }\r\n\r\n    function setDepositsAndTokenID ( uint256 _amount, uint _tokenId ) public OnlyEmergency {\r\n        deposits = _amount;\r\n        _tokenIds = _tokenId;\r\n    }\r\n    \r\n    function setLocation ( uint256 _plant , Location memory _location) public onlyEngine {\r\n        ManufacturingPlants[_plant]._location = _location;\r\n    }\r\n    \r\n    function setPlantProfile ( uint256  _plant , uint256 _profile ) public onlyEngine {\r\n        plantProfile[_plant] = _profile;\r\n    }\r\n    \r\n    function setName ( uint256 _plant , string memory _name) public onlyEngine {\r\n        ManufacturingPlants[_plant]._name = _name;\r\n    }\r\n    \r\n    function setFuturesOnPlant ( uint256 _plant, uint256 _period , bool _switch ) public onlyEngine {\r\n        futuresSetup[_plant][_period] = _switch;\r\n    }\r\n    \r\n    function getPlantFuturesInfo ( uint256 _plant, uint256 _period ) public view returns ( address, bool, uint256 ) {\r\n        address _owner = ManufacturingPlants[_plant]._owner;\r\n        bool _futuresactive = futuresSetup[_plant][_period];\r\n        uint256 _currentperiod = ManufacturingPlants[_plant]._periodsmanufactured + 1;\r\n        return ( _owner,_futuresactive, _currentperiod );\r\n    }\r\n    \r\n    function getManufacturerCertificate ( uint256 _tokenId ) public view returns ( uint256, uint256, uint256, Location memory, uint256 ){\r\n        return ( WarbotManufactureCertificates[_tokenId]._plant,WarbotManufactureCertificates[_tokenId]._plantlevel, WarbotManufactureCertificates[_tokenId]._plantperiod, WarbotManufactureCertificates[_tokenId]._location, WarbotManufactureCertificates[_tokenId]._warbotposition );\r\n    }\r\n    \r\n    function setManufacturingPeriod( uint256 _minutes ) public onlyEngine {\r\n        maxPeriodMinting = false;\r\n        manufacturingPeriod = _minutes * 1 minutes;  //43,200 = 30 days\r\n        \r\n    }\r\n    /*\r\n    function coolDownPeriodToggle() public OnlyEmergency {\r\n        coolDownPeriod = !coolDownPeriod;\r\n    }\r\n    */\r\n    function setWarbotMintFee( uint256 _mintfee ) public OnlyEmergency {\r\n        warbotMintFee = _mintfee;\r\n    }\r\n\r\n    function setEngineEcosystemContractAddress ( address _address ) public onlyOwner {\r\n        require ( _address != address(0) , \"No Zero Address\");\r\n        EngineEcosystemContractAddress = _address;\r\n    }\r\n    \r\n    function setNanoReserveAddress ( address _address ) public onlyOwner {\r\n        require ( _address != address(0) , \"No Zero Address\");\r\n        nanoReserve = _address;\r\n    }\r\n    \r\n    mapping  ( uint256 => bool ) public splitFactories;\r\n\r\n    function splitMyFactory( uint256 _plant ) public {\r\n       // require  (ManufacturingPlants[_plant]._owner == msg.sender ,\"Not the owner\" );\r\n        require  (splitFactories[_plant]  ,\"Not qualified\" );\r\n        require ( ManufacturingPlants[_plant]._status, \"Only active Factories can be split\");\r\n        splitFactories[_plant] = false;\r\n        ManufacturingPlantCount++;\r\n        migratePlant (  ManufacturingPlantCount, ManufacturingPlants[_plant]._owner ,  1000000000 , ManufacturingPlants[_plant]._timeofexpiration ,ManufacturingPlants[_plant]._timeunitslocked, ManufacturingPlants[_plant]._timeinitiated, ManufacturingPlants[_plant]._lastmanufacture, 0, 12, ManufacturingPlants[_plant]._periodsmanufactured, ManufacturingPlants[_plant]._status  ) ;\r\n    }\r\n    \r\n\r\n    function migratePlant ( uint256 _plant, address _owner,  uint256 _micromachinesstaked, uint256 _timeofexpiration, uint256 _timeunitslocked, uint256 _timeinitiated, uint256 _lastmanufacture, uint256 _warbotsmanufactured, uint256 _periodproductionrate, uint256 _periodsmanufactured, bool _status  ) public onlyEngine {\r\n          \r\n          if( migrationActive ) require (  ManufacturingPlants[_plant]._periodproductionrate == 0 , \"already recorded\" );\r\n          require (  _periodproductionrate > 0 , \"empty dataset\" );\r\n       \r\n          if ( _periodproductionrate == 24 ) {\r\n             \r\n              splitFactories [ _plant ] = true;\r\n              _micromachinesstaked = 1000000000;\r\n              _periodproductionrate = 12;\r\n          } \r\n           \r\n           ManufacturingPlants[_plant]._owner = _owner;\r\n           ManufacturingPlants[_plant]._micromachinesstaked = _micromachinesstaked;\r\n           ManufacturingPlants[_plant]._timeofexpiration = _timeofexpiration;\r\n           ManufacturingPlants[_plant]._timeunitslocked = _timeunitslocked;\r\n           ManufacturingPlants[_plant]._timeinitiated = _timeinitiated;\r\n           ManufacturingPlants[_plant]._lastmanufacture = _lastmanufacture;\r\n           ManufacturingPlants[_plant]._warbotsmanufactured = _warbotsmanufactured;\r\n           ManufacturingPlants[_plant]._periodproductionrate = _periodproductionrate;\r\n           ManufacturingPlants[_plant]._periodsmanufactured = _periodsmanufactured;\r\n           ManufacturingPlants[_plant]._status = _status;\r\n           \r\n       \r\n           globalwarbotproduction += _periodproductionrate;\r\n           globalwarbotmanufacturingplants++;\r\n           userManufacturingPlantCount[_owner]++;\r\n           userManufacturingPlants[_owner].push(_plant);\r\n           if( migrationActive)    ManufacturingPlantCount++;\r\n           \r\n         \r\n           plantArrayPosition[_plant] =  userManufacturingPlants[_owner].length - 1;\r\n        \r\n    }\r\n    \r\n    function toggleFutures() public onlyOwner {\r\n        futuresEnabled = !futuresEnabled;\r\n    }\r\n  \r\n    function setNanomachines( address _address ) public onlyEngine {\r\n        require ( _address != address(0) , \"No Zero Address\");\r\n        nanomachines = _address;\r\n    }\r\n    \r\n    function setRoyaltyContract( uint256 _tokenId, address payable _address ) public onlyEngine {\r\n        require ( _address != address(0) , \"No Zero Address\");\r\n        royaltySplitContract[_tokenId] = _address;\r\n    }\r\n    \r\n    function onERC721Received( address _operator, address _from, uint256 _tokenId, bytes memory _data) public view returns(bytes4){\r\n        _operator; _from; _tokenId; _data; \r\n        return ERC721_RECEIVED;\r\n    }\r\n    \r\n    function setTokenURI ( string memory _uri ) public onlyEngine {\r\n        _tokenURI = _uri;\r\n    }\r\n\r\n    \r\n    \r\n    function setStoreJSON ( string memory _uri ) public onlyEngine {\r\n        contractURIstorefront = _uri;\r\n    }\r\n    \r\n    function setTokenURIEngine ( uint256 tokenId, string memory __tokenURI) public onlyEngine {\r\n        _setTokenURI( tokenId, __tokenURI);\r\n    }\r\n    \r\n    function catchReflect() public onlyEngine {\r\n         ERC20 _token = ERC20(MicroMachineAddress);\r\n        _token.transfer( msg.sender, balanceOf(address(this)) - deposits  );\r\n    }\r\n    \r\n    function upgradePlant ( uint256 _plant ) public {\r\n        require ( ManufacturingPlants[ _plant]._owner == msg.sender );\r\n        require ( ManufacturingPlants[ _plant]._status == true );\r\n        require ( ManufacturingPlants[_plant]._level  < plantMaxLevel, \"already at max level\");\r\n        ManufacturingPlants[_plant]._level++;\r\n        \r\n        ERC20 _nano = ERC20(nanomachines);\r\n        _nano.transferFrom ( msg.sender , address(this), calculatePlantUpgradeCost( _plant, ManufacturingPlants[_plant]._level ));\r\n        _nano.transfer( nanoReserve, calculatePlantUpgradeCost( _plant, ManufacturingPlants[_plant]._level ));\r\n    }\r\n    \r\n    function calculatePlantUpgradeCost( uint256 _plant, uint256 _level ) public view returns ( uint256 ){\r\n        return ManufacturingPlants[ _plant ]._periodproductionrate * upgradeCost * ( _level * _level );\r\n    }\r\n    \r\n    function setPlantMaxLevel( uint8 _maxlevel ) public onlyEngine {\r\n        plantMaxLevel = _maxlevel;\r\n    }\r\n    \r\n    function setUpgradeCost( uint256 _cost ) public onlyEngine {\r\n        require ( _cost > 0 , \"cost bust be greater than zero\");\r\n        upgradeCost = _cost * 10 ** 18;\r\n    }\r\n    \r\n    function transferPlant ( address _owner , uint256 _plant, address _newowner ) public onlyEngine {\r\n        require ( ManufacturingPlants[_plant]._owner == _owner, \"Not rightful owner\" );\r\n        ManufacturingPlants[_plant]._owner = _newowner;\r\n        \r\n        userManufacturingPlantCount[_owner]--;\r\n        uint256 pos = plantArrayPosition[_plant];\r\n        \r\n        userManufacturingPlants[_owner][pos] = userManufacturingPlants[msg.sender][userManufacturingPlants[msg.sender].length-1];\r\n        plantArrayPosition[userManufacturingPlants[_owner].length-1] = pos;\r\n        userManufacturingPlants[_owner].pop();\r\n        \r\n        userManufacturingPlants[_newowner].push(_plant);\r\n        plantArrayPosition[_plant] =  userManufacturingPlants[_newowner].length - 1;\r\n        userManufacturingPlantCount[_newowner]++;\r\n    } \r\n    \r\n   \r\n    \r\n    function migrationToggle() public OnlyEmergency {\r\n        migrationActive = !migrationActive;\r\n        \r\n    }\r\n    \r\n     function maxPeriodMintingToggle() public OnlyEmergency {\r\n        maxPeriodMinting = !maxPeriodMinting;\r\n        \r\n    }\r\n    \r\n    function contractURI() public view returns (string memory) {\r\n        return contractURIstorefront;\r\n    } \r\n    \r\n    function isEngineContract( address _address ) public  returns ( bool) {\r\n        EngineEcosystemContract _engine = EngineEcosystemContract ( EngineEcosystemContractAddress );\r\n        return _engine.isEngineContract( _address );\r\n    }\r\n    \r\n    \r\n    function manufacture( uint256 _plant ) public payable {\r\n       \r\n        require ( !splitFactories[_plant], \"Need to split factory first\" );    \r\n        require ( ManufacturingPlants[ _plant]._owner == msg.sender || isEngineContract(msg.sender) );\r\n        require ( ManufacturingPlants[ _plant]._status == true );\r\n        require ( block.timestamp > ManufacturingPlants[ _plant]._lastmanufacture + manufacturingPeriod, \"manufacturing process not complete\" );\r\n        \r\n        if ( maxPeriodMinting )require ( ManufacturingPlants[ _plant]._periodsmanufactured < ManufacturingPlants[ _plant]._timeunitslocked );\r\n        ManufacturingPlants[_plant]._lastmanufacture = block.timestamp;\r\n        ManufacturingPlants[ _plant]._periodsmanufactured++;\r\n        if  ( futuresSetup[_plant][ManufacturingPlants[ _plant]._periodsmanufactured]) require (isEngineContract(msg.sender), \"Plant Period is under Futures Contract\" );\r\n        if  ( !futuresSetup[_plant][ManufacturingPlants[ _plant]._periodsmanufactured]) require (ManufacturingPlants[ _plant]._owner == msg.sender, \"Plant Period is not under Futures Contract\" );\r\n      \r\n        uint256 quantity = manufactureUnits ( ManufacturingPlants[_plant]._timeunitslocked, ManufacturingPlants[_plant]._micromachinesstaked );\r\n        require ( msg.value == quantity * warbotMintFee, \"Mint fee not met\" );\r\n        for ( uint i = 0; i < quantity; i++ ) {\r\n            _tokenIds++;\r\n            uint256 newTokenId = _tokenIds;\r\n            _safeMint( msg.sender , newTokenId);\r\n            _setTokenURI(newTokenId, _tokenURI);\r\n            usersWarbots[msg.sender].push(newTokenId);\r\n            warbotArrayPosition[newTokenId] = usersWarbots[msg.sender].length -1;\r\n            uint256 _warbotposition = i+1;\r\n            if ( isEngineContract(msg.sender) && msg.sender != EmergencyAddress ) futuresTokenId[_plant][ManufacturingPlants[ _plant]._periodsmanufactured][_warbotposition] = newTokenId;\r\n            \r\n            WarbotManufactureCertificates[newTokenId]._plant = _plant;\r\n            WarbotManufactureCertificates[newTokenId]._location = ManufacturingPlants[ _plant]._location;\r\n            WarbotManufactureCertificates[newTokenId]._plantperiod = ManufacturingPlants[ _plant]._periodsmanufactured;\r\n            WarbotManufactureCertificates[newTokenId]._plantlevel = ManufacturingPlants[_plant]._level;\r\n            WarbotManufactureCertificates[newTokenId]._warbotposition = _warbotposition;\r\n        }\r\n        ManufacturingPlants[_plant]._warbotsmanufactured += quantity;\r\n        emit WarBotsManufactured(msg.sender, quantity);\r\n    }\r\n    \r\n    function returnFuturesTokenID ( uint256 _plant, uint256 _period, uint256 _position ) public view returns (uint256){\r\n        \r\n        return futuresTokenId[_plant][_period][_position];\r\n            \r\n    }\r\n    \r\n    function assembleWarbot (uint256 _plant, address _target ,  Location  memory _location, string memory __tokenURI) public onlyEngine returns(uint256) {\r\n            _tokenIds++;\r\n            uint256 newTokenId = _tokenIds;\r\n            _safeMint( _target , newTokenId);\r\n            _setTokenURI(newTokenId, __tokenURI);\r\n            usersWarbots[_target].push(newTokenId);\r\n            warbotArrayPosition[newTokenId] = usersWarbots[msg.sender].length -1;\r\n           \r\n            WarbotManufactureCertificates[newTokenId]._plant = _plant;\r\n            WarbotManufactureCertificates[newTokenId]._location = _location;\r\n            WarbotManufactureCertificates[newTokenId]._plantlevel = ManufacturingPlants[_plant]._level;\r\n           \r\n            return newTokenId;\r\n    }\r\n    \r\n    function migrateWarbot (uint256 _warbotid, uint256 _plant, uint256 _period, uint256 _warbotposition, address _target ,  Location  memory _location, string memory __tokenURI) public onlyEngine returns(uint256) {\r\n            require (migrationActive);\r\n            \r\n            uint256 newTokenId = _warbotid;\r\n             \r\n            _safeMint( _target , newTokenId);\r\n            \r\n            _setTokenURI(newTokenId, __tokenURI);\r\n            \r\n            usersWarbots[_target].push(newTokenId);\r\n            warbotArrayPosition[newTokenId] = usersWarbots[_target].length -1;\r\n           \r\n            WarbotManufactureCertificates[newTokenId]._plant = _plant;\r\n            WarbotManufactureCertificates[newTokenId]._location = _location;\r\n            WarbotManufactureCertificates[newTokenId]._plantlevel = ManufacturingPlants[_plant]._level;\r\n            WarbotManufactureCertificates[newTokenId]._plantperiod = _period;\r\n            WarbotManufactureCertificates[newTokenId]._warbotposition = _warbotposition;\r\n            \r\n            return newTokenId;\r\n    }\r\n    \r\n    function getUsersWarbots ( address  _user ) public view returns(uint256[] memory){\r\n        return usersWarbots[_user];\r\n    }\r\n    \r\n    function manufactureUnits( uint256  _timeunitslocked, uint256 _micromachinesstaked ) public pure returns(uint256){\r\n        return _timeunitslocked * _micromachinesstaked/ 10**9;\r\n    }\r\n    \r\n    function getUserManufacturingPlants(address _user ) public view returns(uint256[] memory) {\r\n        return userManufacturingPlants[_user];\r\n    }\r\n    \r\n    \r\n    \r\n    function stakeMicroMachines( uint256 _units, uint256 _timeperiod , Location memory _location ) public {\r\n        require ( _units/10**9 > 0, \"At least one Micromachine needs to be staked\" );\r\n        require ( manufactureUnits( _timeperiod, _units ) <= 12, \"No more than 25 units of Manufacturing Capacity\" );\r\n        \r\n        require ( _timeperiod > 0 && _timeperiod <=12 , \"Between 1 and 12 periods only\");\r\n        \r\n        deposits += _units;\r\n        ERC20 _token = ERC20(MicroMachineAddress);\r\n        _token.transferFrom( msg.sender, address(this) , _units );\r\n        ManufacturingPlantCount++;\r\n        ManufacturingPlants[ManufacturingPlantCount]._owner = msg.sender;\r\n        ManufacturingPlants[ManufacturingPlantCount]._level = 1;\r\n        ManufacturingPlants[ManufacturingPlantCount]._timeofexpiration =  block.timestamp + ( manufacturingPeriod * _timeperiod);\r\n        ManufacturingPlants[ManufacturingPlantCount]._timeunitslocked =   _timeperiod;\r\n        ManufacturingPlants[ManufacturingPlantCount]._micromachinesstaked = _units;\r\n        ManufacturingPlants[ManufacturingPlantCount]._timeinitiated = block.timestamp;\r\n        ManufacturingPlants[ManufacturingPlantCount]._lastmanufacture = block.timestamp;\r\n        ManufacturingPlants[ManufacturingPlantCount]._warbotsmanufactured = 0;\r\n        ManufacturingPlants[ManufacturingPlantCount]._location = _location;\r\n        ManufacturingPlants[ManufacturingPlantCount]._periodproductionrate = manufactureUnits( _timeperiod, _units );\r\n        ManufacturingPlants[ManufacturingPlantCount]._status = true;\r\n       \r\n        userManufacturingPlants[msg.sender].push(ManufacturingPlantCount);\r\n        userManufacturingPlantCount[msg.sender]++;\r\n        plantArrayPosition[ManufacturingPlantCount] =  userManufacturingPlants[msg.sender].length - 1;\r\n        \r\n        \r\n        globalwarbotproduction += ManufacturingPlants[ManufacturingPlantCount]._periodproductionrate;\r\n        globalwarbotmanufacturingplants++;\r\n    }\r\n  \r\n    \r\n     function isApprovedForAll(\r\n        address _owner,\r\n        address _operator\r\n    ) public override view returns (bool isOperator) {\r\n      // if OpenSea's ERC721 Proxy Address is detected, auto-return true\r\n        if (_operator == address(0x58807baD0B376efc12F5AD86aAc70E78ed67deaE)) {\r\n            return true;\r\n        }\r\n        \r\n        // otherwise, use the default ERC721.isApprovedForAll()\r\n        return ERC721.isApprovedForAll(_owner, _operator);\r\n    }\r\n    \r\n    function royaltyInfo( uint256 _tokenId, uint256 _salePrice ) public  view returns ( address receiver, uint256 royaltyAmount ){\r\n        \r\n        receiver = royaltyContract;\r\n        if ( royaltySplitContract[_tokenId]  != address(0) ) receiver = royaltySplitContract[_tokenId];\r\n        royaltyAmount = _salePrice * royaltyPerc / 100;\r\n        \r\n    }\r\n    \r\n    function setRoyaltyPercent ( uint256 _perc ) public OnlyEmergency {\r\n        royaltyPerc = _perc;\r\n    }\r\n    \r\n    \r\n    function unstakeMicroMachines ( uint256 _plant ) public  {\r\n        \r\n        require ( ManufacturingPlants[ _plant]._owner == msg.sender );\r\n        require ( ManufacturingPlants[ _plant]._status == true );\r\n        \r\n        require ( block.timestamp > ManufacturingPlants[ _plant]._timeofexpiration  , \"time committed not yet fulfilled\" );\r\n        require ( ManufacturingPlants[ _plant]._periodsmanufactured >= ManufacturingPlants[ _plant]._timeunitslocked );\r\n       \r\n        ManufacturingPlants[_plant]._lastmanufacture = block.timestamp;\r\n        ManufacturingPlants[_plant]._status = false;\r\n        \r\n        globalwarbotproduction = globalwarbotproduction - ManufacturingPlants[_plant]._periodproductionrate;\r\n        globalwarbotmanufacturingplants--;\r\n         ERC20 _token = ERC20(MicroMachineAddress);\r\n        _token.transfer( msg.sender, ManufacturingPlants[_plant]._micromachinesstaked );\r\n        deposits -= ManufacturingPlants[_plant]._micromachinesstaked;\r\n    } \r\n    \r\n    function burn(uint256 tokenId) public onlyEngine {\r\n       \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"caller is not owner nor approved\");\r\n        uint256 pos = warbotArrayPosition[tokenId];\r\n       \r\n        usersWarbots[msg.sender][warbotArrayPosition[tokenId]] = usersWarbots[msg.sender][ usersWarbots[msg.sender].length -1 ]  ;\r\n        warbotArrayPosition[usersWarbots[msg.sender][ usersWarbots[msg.sender].length -1 ]] = pos;\r\n        usersWarbots[msg.sender].pop();\r\n        _burn(tokenId);\r\n    }\r\n    \r\n   \r\n    \r\n    function transfer(address from, address to, uint256 tokenId) public {\r\n       usersWarbots[to].push(tokenId);\r\n       \r\n        popWarbot ( from, to, tokenId );\r\n       _transfer(from, to, tokenId);\r\n    }   \r\n    \r\n    function transferFrom(address from, address to, uint256 tokenId) public  override {\r\n       \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        popWarbot ( from, to, tokenId );\r\n       _transfer(from, to, tokenId);\r\n    }\r\n    \r\n    function popWarbot (address from, address to, uint256 tokenId ) internal {\r\n         usersWarbots[to].push(tokenId);\r\n       //uint256 pos = usersWarbots[from][warbotArrayPosition[tokenId]];\r\n       uint256 pos = warbotArrayPosition[tokenId];\r\n       \r\n       usersWarbots[from][warbotArrayPosition[tokenId]] = usersWarbots[from][ usersWarbots[from].length -1 ]  ;\r\n       warbotArrayPosition[usersWarbots[from][ usersWarbots[from].length -1 ]] = pos;\r\n       usersWarbots[from].pop();\r\n       warbotArrayPosition[tokenId] = usersWarbots[to].length -1; \r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _baseURI() internal pure override returns (string memory) {\r\n        return \"\";\r\n    }\r\n    \r\n   \r\n    \r\n    modifier onlyEngine() {\r\n        EngineEcosystemContract _engine = EngineEcosystemContract ( EngineEcosystemContractAddress );\r\n        require ( _engine.isEngineContract(msg.sender), \"Not an Engine Contract\");\r\n         _;\r\n    }\r\n    \r\n    \r\n    modifier OnlyEmergency() {\r\n        require( msg.sender == EmergencyAddress, \" Emergency Only\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"WarBotsManufactured\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EmergencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EngineEcosystemContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ManufacturingPlantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ManufacturingPlants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_micromachinesstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeofexpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeunitslocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeinitiated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastmanufacture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_warbotsmanufactured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodproductionrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodsmanufactured\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MicroMachineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WarbotManufactureCertificates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plantlevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plantperiod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_warbotposition\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"__tokenURI\",\"type\":\"string\"}],\"name\":\"assembleWarbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"calculatePlantUpgradeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catchReflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURIstorefront\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futuresEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"futuresSetup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"futuresTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getManufacturerCertificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getPlantFuturesInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserManufacturingPlants\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsersWarbots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalwarbotmanufacturingplants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalwarbotproduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isEngineContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"}],\"name\":\"manufacture\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeunitslocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_micromachinesstaked\",\"type\":\"uint256\"}],\"name\":\"manufactureUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manufacturingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPeriodMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPeriodMintingToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_micromachinesstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeofexpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeunitslocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeinitiated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastmanufacture\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_warbotsmanufactured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodproductionrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodsmanufactured\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"migratePlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warbotid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_warbotposition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"__tokenURI\",\"type\":\"string\"}],\"name\":\"migrateWarbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nanoReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nanomachines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plantArrayPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantMaxLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plantProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"returnFuturesTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltySplitContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setDepositsAndTokenID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setEngineEcosystemContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_switch\",\"type\":\"bool\"}],\"name\":\"setFuturesOnPlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"}],\"name\":\"setLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minutes\",\"type\":\"uint256\"}],\"name\":\"setManufacturingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNanoReserveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNanomachines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxlevel\",\"type\":\"uint8\"}],\"name\":\"setPlantMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profile\",\"type\":\"uint256\"}],\"name\":\"setPlantProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRoyaltyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setStoreJSON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"__tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURIEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setUpgradeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintfee\",\"type\":\"uint256\"}],\"name\":\"setWarbotMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"splitFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"}],\"name\":\"splitMyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_units\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeperiod\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"}],\"internalType\":\"struct MicroMachineManufacturingPlant.Location\",\"name\":\"_location\",\"type\":\"tuple\"}],\"name\":\"stakeMicroMachines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleFutures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"transferPlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"}],\"name\":\"unstakeMicroMachines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plant\",\"type\":\"uint256\"}],\"name\":\"upgradePlant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userManufacturingPlantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userManufacturingPlants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersWarbots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"warbotArrayPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warbotMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MicroMachineManufacturingPlant", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "25", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e904f04c8c96727b2f564a51d738f5d9eee8013134a194bc107475b7ff0fc40"}