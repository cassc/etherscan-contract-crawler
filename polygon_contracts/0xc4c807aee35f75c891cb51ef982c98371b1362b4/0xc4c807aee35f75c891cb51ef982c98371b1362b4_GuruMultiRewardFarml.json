{"SourceCode": "/**\r\n *Submitted for verification at Arbiscan.io on 2023-03-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-01-19\r\n*/\r\n\r\n/*\r\n * Written by Sam, Guru Network.\r\n * (C) Sam, 543#3017\r\n * (C) FTM.Guru\r\n * (C) Guru Network\r\n * (C) Eliteness.Network\r\n * For help or queries, visit us on https://discord.gg/QpyfMarNrV.\r\n * Based on FTM.Guru/LF, Curve.fi, Synthetix.io, & Yearn.finance.\r\n *\r\n * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n * * * * * Guru Network: Multi-Reward Farmland * * * * *\r\n * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n *\r\n *\r\n *\r\n */\r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n//ftm.guru's Universal On-chain TVL Calculator\r\n//Source: https://ftm.guru/rawdata/tvl\r\ninterface ITVL {\r\n    //Using Version = v7\r\n    function p_lpt_coin_usd(address lp) external view returns(uint256);\r\n    function p_lpt_usd(address u,address lp) external view returns(uint256);\r\n    function p_t_coin_usd(address lp) external view returns(uint256);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    uint public lastPauseTime;\r\n    bool public paused;\r\n\r\n    constructor() internal {\r\n        // This contract is abstract, and thus cannot be instantiated directly\r\n        require(owner != address(0), \"Owner must be set\");\r\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\r\n    }\r\n\r\n    /**\r\n     * @notice Change the paused state of the contract\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        // Ensure we're actually changing the state before we do anything\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n\r\n        // Set our paused state.\r\n        paused = _paused;\r\n\r\n        // If applicable, set the last pause time.\r\n        if (paused) {\r\n            lastPauseTime = now;\r\n        }\r\n\r\n        // Let everyone know that our pause state has changed.\r\n        emit PauseChanged(paused);\r\n    }\r\n\r\n    event PauseChanged(bool isPaused);\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"This action cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract GuruMultiRewardFarmland is ReentrancyGuard, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    struct Reward {\r\n        address rewardsDistributor;\r\n        uint256 rewardsDuration;\r\n        uint256 periodFinish;\r\n        uint256 rewardRate;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n    }\r\n    IERC20 public stakingToken;\r\n    mapping(address => Reward) public rewardData;\r\n    address[] public rewardTokens;\r\n\r\n    // user -> reward token -> amount\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n\r\n    address public feeTaker;\r\n    uint256 public feePerMillion;\r\n\r\n    address public TvlGuru;\r\n    mapping(address => bytes) public TvlPriceFeed;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _earnings;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        address _tg,\r\n        bytes memory _tf\r\n    ) public Owned(msg.sender) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        TvlGuru = _tg;\r\n        TvlPriceFeed[_stakingToken] = _tf;\r\n    }\r\n\r\n    function addReward(\r\n        address _rewardsToken,\r\n        address _rewardsDistributor,\r\n        uint256 _rewardsDuration,\r\n        bytes memory _TvlPriceFeed\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(rewardData[_rewardsToken].rewardsDuration == 0);\r\n        rewardTokens.push(_rewardsToken);\r\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\r\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\r\n        TvlPriceFeed[_rewardsToken] = _TvlPriceFeed;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\r\n        return Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\r\n    }\r\n\r\n    function rewardPerToken(address _rewardsToken) public view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardData[_rewardsToken].rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardData[_rewardsToken].rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable(_rewardsToken).sub(rewardData[_rewardsToken].lastUpdateTime).mul(rewardData[_rewardsToken].rewardRate).mul(1e18).div(_totalSupply)\r\n            );\r\n    }\r\n\r\n    function earned(address account, address _rewardsToken) public view returns (uint256) {\r\n        return _balances[account].mul(rewardPerToken(_rewardsToken).sub(userRewardPerTokenPaid[account][_rewardsToken])).div(1e18).add(rewards[account][_rewardsToken]);\r\n    }\r\n\r\n    function earnings(address account, address _rewardsToken) public view returns (uint256) {\r\n    \treturn _earnings[account][_rewardsToken];\r\n    }\r\n\r\n    function earningsList(address _user, address[] memory _tokens) public view returns (uint[] memory) {\r\n    \tuint[] memory _e = new uint[](rewardTokens.length);\r\n    \tfor(uint i; i<_e.length; i++) {\r\n    \t\t_e[i] = _earnings[_user][rewardTokens[i]];\r\n    \t}\r\n    \treturn _e;\r\n    }\r\n\r\n    function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\r\n        return rewardData[_rewardsToken].rewardRate.mul(rewardData[_rewardsToken].rewardsDuration);\r\n    }\r\n\r\n    function rewardTokensLength() public view returns(uint) {\r\n    \treturn rewardTokens.length;\r\n    }\r\n\r\n    function rewardTokensList() public view returns(address[] memory) {\r\n    \treturn rewardTokens;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function setRewardsDistributor(address _rewardsToken, address _rewardsDistributor) external onlyOwner {\r\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\r\n    }\r\n\r\n    function _stake(uint256 samount, address _ben) internal {\r\n        require(samount > 0, \"Cannot stake 0\");\r\n        uint _fee = samount.mul(feePerMillion).div(1e6);\r\n        uint amount = samount.sub(_fee);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[_ben] = _balances[_ben].add(amount);\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        if(_fee > 0) {\r\n            stakingToken.safeTransferFrom(msg.sender, feeTaker, _fee);\r\n        }\r\n        emit Staked(_ben, amount);\r\n    }\r\n\r\n    // @notice Cannot deposit if paused\r\n    function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {\r\n        _stake(amount,msg.sender);\r\n    }\r\n\r\n    function stakeAll() external nonReentrant notPaused updateReward(msg.sender) {\r\n        _stake(stakingToken.balanceOf(msg.sender),msg.sender);\r\n    }\r\n\r\n    // @notice Can withhdraw funds even if paused\r\n    function _withdraw(uint256 amount) internal {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        require(_balances[msg.sender] >= amount, \"Overdrawing not allowed.\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public nonReentrant notPaused updateReward(msg.sender) {\r\n        _withdraw(amount);\r\n    }\r\n\r\n    function withdrawAll() external nonReentrant notPaused updateReward(msg.sender) {\r\n        _withdraw(_balances[msg.sender]);\r\n    }\r\n\r\n    // Claim all rewards in one go.\r\n    // @notice Can claim earnings even if paused\r\n    // @notice Claims would fail if rewards have been recovered by Owner\r\n    function getReward() public nonReentrant updateReward(msg.sender) {\r\n\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n            address _rewardsToken = rewardTokens[i];\r\n            uint256 _reward = rewards[msg.sender][_rewardsToken];\r\n            if (_reward > 0) {\r\n                rewards[msg.sender][_rewardsToken] = 0;\r\n                IERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n                emit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n                _earnings[msg.sender][_rewardsToken] += _reward;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Claim a specific set of rewards, in one go.\r\n    function getReward(address[] calldata _rewardsTokens) external nonReentrant updateReward(msg.sender) {\r\n\r\n        for (uint i; i < _rewardsTokens.length; i++) {\r\n            address _rewardsToken = _rewardsTokens[i];\r\n            uint256 _reward = rewards[msg.sender][_rewardsToken];\r\n            if (_reward > 0) {\r\n                rewards[msg.sender][_rewardsToken] = 0;\r\n                IERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n                emit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n                _earnings[msg.sender][_rewardsToken] += _reward;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Claim a specific Reward\r\n    function getReward(address _rewardsToken) external nonReentrant updateReward(msg.sender) {\r\n        uint256 _reward = rewards[msg.sender][_rewardsToken];\r\n        if (_reward > 0) {\r\n            rewards[msg.sender][_rewardsToken] = 0;\r\n            IERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n            emit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n            _earnings[msg.sender][_rewardsToken] += _reward;\r\n        }\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(_balances[msg.sender]);\r\n        getReward();\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\r\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\r\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the reward amount\r\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\r\n\r\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\r\n            rewardData[_rewardsToken].rewardRate = reward.div(rewardData[_rewardsToken].rewardsDuration);\r\n        } else {\r\n            uint256 remaining = rewardData[_rewardsToken].periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardData[_rewardsToken].rewardRate);\r\n            rewardData[_rewardsToken].rewardRate = reward.add(leftover).div(rewardData[_rewardsToken].rewardsDuration);\r\n        }\r\n\r\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\r\n        rewardData[_rewardsToken].periodFinish = block.timestamp.add(rewardData[_rewardsToken].rewardsDuration);\r\n        emit RewardAdded(_rewardsToken, reward);\r\n    }\r\n\r\n    // Recovering ERC20s\r\n    // @notice Can be used break a specific reward's program.\r\n    // @notice Depositors can still withdraw, but without any rewards.\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n        require(tokenAddress != address(stakingToken), \"Cannot touch user deposits\");\r\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\r\n        emit Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    function setRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) external {\r\n        require(\r\n            block.timestamp > rewardData[_rewardsToken].periodFinish,\r\n            \"Reward period still active\"\r\n        );\r\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender || msg.sender == owner);\r\n        require(_rewardsDuration > 0, \"Reward duration must be non-zero\");\r\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\r\n        emit RewardsDurationUpdated(_rewardsToken, rewardData[_rewardsToken].rewardsDuration);\r\n    }\r\n\r\n    function setFeeTaker(address _f) external onlyOwner {\r\n        require(_f != address(0) , \"Invalid Fee Taker!\");\r\n        feeTaker = _f;\r\n    }\r\n\r\n    function setFee(uint _f) external onlyOwner {\r\n        require(_f <= 1e5, \"Deposit fee is capped at 10%.\");\r\n        feePerMillion = _f;\r\n    }\r\n\r\n\r\n\r\n    /* ========== TVL GURU ========== */\r\n\r\n    // Getters\r\n\r\n    function tvl() public view returns (uint _tvl) {\r\n        ( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n        (uint _pt) = abi.decode(_tt, (uint));\r\n        _tvl = (_totalSupply * _pt) / 1e18;\r\n\r\n        for(uint i; i<rewardTokens.length; i++) {\r\n            ( , _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n            _pt = abi.decode(_tt, (uint));\r\n            _tvl += ( IERC20(rewardTokens[i]).balanceOf(address(this)) * _pt) / 1e18;\r\n        }\r\n    }\r\n\r\n    function apr() public view returns(uint _apr) {\r\n        ( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n        (uint _pt) = abi.decode(_tt, (uint));\r\n        uint _tvl = (_totalSupply * _pt) / 1e18;\r\n\r\n        uint _roi;\r\n\r\n        for(uint i; i<rewardTokens.length; i++) {\r\n            Reward memory _rdt = rewardData[ rewardTokens[i] ];\r\n            uint _pf = _rdt.periodFinish;\r\n            if(_pf > now) {\r\n                uint _rr = _rdt.rewardRate;\r\n                ( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n                uint _pt = abi.decode(_tt, (uint));\r\n                _roi += (_rr * _pt * 365 * 24 * 60 * 60) / 1e18;\r\n            }\r\n        }\r\n\r\n        _apr = (_roi * 1e18 * 100) / _tvl;\r\n    }\r\n\r\n    function apr(uint i) public view returns(uint _apr) {\r\n        ( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n        (uint _pt) = abi.decode(_tt, (uint));\r\n        uint _tvl = (_totalSupply * _pt) / 1e18;\r\n        Reward memory _rdt = rewardData[ rewardTokens[i] ];\r\n        uint _pf = _rdt.periodFinish;\r\n        uint _roi;\r\n        if(_pf > now) {\r\n            uint _rr = _rdt.rewardRate;\r\n            ( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n            uint _pt = abi.decode(_tt, (uint));\r\n            _roi = _rr * _pt * 365 * 86400 / 1e18;\r\n        }\r\n        _apr = (_roi * 1e18 * 100) / _tvl;\r\n    }\r\n\r\n    function aprs() public view returns(uint[] memory) {\r\n        ( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n        (uint _pt) = abi.decode(_tt, (uint));\r\n        uint _tvl = (_totalSupply * _pt) / 1e18;\r\n        uint[] memory _aprs = new uint[](rewardTokens.length);\r\n        for(uint i; i<rewardTokens.length; i++) {\r\n            Reward memory _rdt = rewardData[ rewardTokens[i] ];\r\n            uint _pf = _rdt.periodFinish;\r\n            uint _roi;\r\n            if(_pf > now) {\r\n                uint _rr = _rdt.rewardRate;\r\n                ( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n                uint _pt = abi.decode(_tt, (uint));\r\n                _roi = _rr * _pt * 365 * 86400 / 1e18;\r\n            }\r\n            _aprs[i] = (_roi * 1e18 * 100) / _tvl;\r\n        }\r\n        return _aprs;\r\n    }\r\n\r\n    // Setters\r\n\r\n    function setTvlGuru(address _tg) external onlyOwner {\r\n        TvlGuru = _tg;\r\n    }\r\n\r\n    function setTvlFeed(address _t, bytes calldata _d) external onlyOwner {\r\n        TvlPriceFeed[_t] = _d;\r\n    }\r\n\r\n    function setTvlFeed(address[] calldata _t, bytes[] calldata _d) external onlyOwner {\r\n        for(uint i; i<rewardTokens.length; i++) {\r\n            TvlPriceFeed[_t[i]] = _d[i];\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier updateReward(address account) {\r\n        for (uint i; i < rewardTokens.length; i++) {\r\n            address token = rewardTokens[i];\r\n            rewardData[token].rewardPerTokenStored = rewardPerToken(token);\r\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\r\n            if (account != address(0)) {\r\n                rewards[account][token] = earned(account, token);\r\n                userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(address indexed token, uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\r\n    event RewardsDurationUpdated(address indexed token, uint256 newDuration);\r\n    event Recovered(address indexed token, uint256 amount);\r\n}\r\n// Need help?\r\n// Join our Discord: https://discord.gg/QpyfMarNrV\r\n// Powered by Guru Network\r\n// (\ud83e\uddbe,\ud83d\ude80)", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tg\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_tf\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TvlGuru\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TvlPriceFeed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_TvlPriceFeed\",\"type\":\"bytes\"}],\"name\":\"addReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aprs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"earningsList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardsTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_t\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_d\",\"type\":\"bytes\"}],\"name\":\"setTvlFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_t\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_d\",\"type\":\"bytes[]\"}],\"name\":\"setTvlFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tg\",\"type\":\"address\"}],\"name\":\"setTvlGuru\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tvl\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GuruMultiRewardFarmland", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fab311fe3e3be4bb3fed77257ee294fb22fa888b00000000000000000000000018c7ad880a07d363f2d034a8523ae34b8068845a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024edb0f3b000000000000000000000000090a09fe272540ecd34661b91252f2ab4b7f7a4ce00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7175c7f7770c7c755368b5027061d16444f306d50378ce15bde23145a84c5f76"}