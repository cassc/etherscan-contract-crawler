{"SourceCode": "{\"AdminMultisigBase.sol\":{\"content\":\"// Dependency file: src/EternalStorage.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Root file: src/AdminMultisigBase.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AdminMultisigBase is EternalStorage {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256(\\u0027admin-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_ADMIN = keccak256(\\u0027admin\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256(\\u0027admin-count\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256(\\u0027admin-threshold\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256(\\u0027admin-vote-counts\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256(\\u0027admin-voted\\u0027);\\n    bytes32 internal constant PREFIX_IS_ADMIN = keccak256(\\u0027is-admin\\u0027);\\n\\n    modifier onlyAdmin() {\\n        uint256 adminEpoch = _adminEpoch();\\n\\n        require(_isAdmin(adminEpoch, msg.sender), \\u0027NOT_ADMIN\\u0027);\\n\\n        bytes32 topic = keccak256(msg.data);\\n\\n        // Check that admin has not voted, then record that they have voted.\\n        require(!_hasVoted(adminEpoch, topic, msg.sender), \\u0027VOTED\\u0027);\\n        _setHasVoted(adminEpoch, topic, msg.sender, true);\\n\\n        // Determine the new vote count and update it.\\n        uint256 adminVoteCount = _getVoteCount(adminEpoch, topic) + uint256(1);\\n        _setVoteCount(adminEpoch, topic, adminVoteCount);\\n\\n        // Do not proceed with operation execution if insufficient votes.\\n        if (adminVoteCount \\u003c _getAdminThreshold(adminEpoch)) return;\\n\\n        _;\\n\\n        // Clear vote count and voted booleans.\\n        _setVoteCount(adminEpoch, topic, uint256(0));\\n\\n        uint256 adminCount = _getAdminCount(adminEpoch);\\n\\n        for (uint256 i; i \\u003c adminCount; i++) {\\n            _setHasVoted(adminEpoch, topic, _getAdmin(adminEpoch, i), false);\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getAdminKey(uint256 adminEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN, adminEpoch, index));\\n    }\\n\\n    function _getAdminCountKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_COUNT, adminEpoch));\\n    }\\n\\n    function _getAdminThresholdKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_THRESHOLD, adminEpoch));\\n    }\\n\\n    function _getAdminVoteCountsKey(uint256 adminEpoch, bytes32 topic) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTE_COUNTS, adminEpoch, topic));\\n    }\\n\\n    function _getAdminVotedKey(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTED, adminEpoch, topic, account));\\n    }\\n\\n    function _getIsAdminKey(uint256 adminEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_ADMIN, adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _adminEpoch() internal view returns (uint256) {\\n        return getUint(KEY_ADMIN_EPOCH);\\n    }\\n\\n    function _getAdmin(uint256 adminEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getAdminKey(adminEpoch, index));\\n    }\\n\\n    function _getAdminCount(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminCountKey(adminEpoch));\\n    }\\n\\n    function _getAdminThreshold(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminThresholdKey(adminEpoch));\\n    }\\n\\n    function _getVoteCount(uint256 adminEpoch, bytes32 topic) internal view returns (uint256) {\\n        return getUint(_getAdminVoteCountsKey(adminEpoch, topic));\\n    }\\n\\n    function _hasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal view returns (bool) {\\n        return getBool(_getAdminVotedKey(adminEpoch, topic, account));\\n    }\\n\\n    function _isAdmin(uint256 adminEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsAdminKey(adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setAdminEpoch(uint256 adminEpoch) internal {\\n        _setUint(KEY_ADMIN_EPOCH, adminEpoch);\\n    }\\n\\n    function _setAdmin(\\n        uint256 adminEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        _setAddress(_getAdminKey(adminEpoch, index), account);\\n    }\\n\\n    function _setAdminCount(uint256 adminEpoch, uint256 adminCount) internal {\\n        _setUint(_getAdminCountKey(adminEpoch), adminCount);\\n    }\\n\\n    function _setAdmins(\\n        uint256 adminEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 adminLength = accounts.length;\\n\\n        require(adminLength \\u003e= threshold, \\u0027INV_ADMINS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_ADMIN_THLD\\u0027);\\n\\n        _setAdminThreshold(adminEpoch, threshold);\\n        _setAdminCount(adminEpoch, adminLength);\\n\\n        for (uint256 i; i \\u003c adminLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an admin for this epoch.\\n            require(!_isAdmin(adminEpoch, account), \\u0027DUP_ADMIN\\u0027);\\n\\n            // Set this account as the i-th admin in this epoch (needed to we can clear topic votes in `onlyAdmin`).\\n            _setAdmin(adminEpoch, i, account);\\n            _setIsAdmin(adminEpoch, account, true);\\n        }\\n    }\\n\\n    function _setAdminThreshold(uint256 adminEpoch, uint256 adminThreshold) internal {\\n        _setUint(_getAdminThresholdKey(adminEpoch), adminThreshold);\\n    }\\n\\n    function _setVoteCount(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        uint256 voteCount\\n    ) internal {\\n        _setUint(_getAdminVoteCountsKey(adminEpoch, topic), voteCount);\\n    }\\n\\n    function _setHasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account,\\n        bool voted\\n    ) internal {\\n        _setBool(_getAdminVotedKey(adminEpoch, topic, account), voted);\\n    }\\n\\n    function _setIsAdmin(\\n        uint256 adminEpoch,\\n        address account,\\n        bool isAdmin\\n    ) internal {\\n        _setBool(_getIsAdminKey(adminEpoch, account), isAdmin);\\n    }\\n}\\n\"},\"AxelarGateway.sol\":{\"content\":\"// Dependency file: src/interfaces/IAxelarGateway.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event TokenFrozen(string indexed symbol);\\n\\n    event TokenUnfrozen(string indexed symbol);\\n\\n    event AllTokensFrozen();\\n\\n    event AllTokensUnfrozen();\\n\\n    event AccountBlacklisted(address indexed account);\\n\\n    event AccountWhitelisted(address indexed account);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external;\\n\\n    function unfreezeToken(string memory symbol) external;\\n\\n    function freezeAllTokens() external;\\n\\n    function unfreezeAllTokens() external;\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\\n\\n// Dependency file: src/interfaces/IERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: src/ERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// Dependency file: src/Ownable.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n// Dependency file: src/Burner.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n\\ncontract Burner {\\n    constructor(address tokenAddress, bytes32 salt) {\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\\n\\n// Dependency file: src/EternalStorage.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Dependency file: src/BurnableMintableCappedERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { ERC20 } from \\u0027src/ERC20.sol\\u0027;\\n// import { Ownable } from \\u0027src/Ownable.sol\\u0027;\\n// import { Burner } from \\u0027src/Burner.sol\\u0027;\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract BurnableMintableCappedERC20 is ERC20, Ownable {\\n    uint256 public cap;\\n\\n    bytes32 private constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n    bytes32 private constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    event Frozen(address indexed owner);\\n    event Unfrozen(address indexed owner);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 capacity\\n    ) ERC20(name, symbol, decimals) Ownable() {\\n        cap = capacity;\\n    }\\n\\n    function depositAddress(bytes32 salt) public view returns (address) {\\n        // This would be easier, cheaper, simpler, and result in  globally consistent deposit addresses for any salt (all chains, all tokens).\\n        // return address(uint160(uint256(keccak256(abi.encodePacked(bytes32(0x000000000000000000000000000000000000000000000000000000000000dead), salt)))));\\n\\n        /* Convert a hash which is bytes32 to an address which is 20-byte long\\n        according to https://docs.soliditylang.org/en/v0.8.1/control-structures.html?highlight=create2#salted-contract-creations-create2 */\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                owner,\\n                                salt,\\n                                keccak256(abi.encodePacked(type(Burner).creationCode, abi.encode(address(this)), salt))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        uint256 capacity = cap;\\n        require(capacity == 0 || totalSupply + amount \\u003c= capacity, \\u0027CAP_EXCEEDED\\u0027);\\n\\n        _mint(account, amount);\\n    }\\n\\n    function burn(bytes32 salt) public onlyOwner {\\n        address account = depositAddress(salt);\\n        _burn(account, balanceOf[account]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), \\u0027IS_FROZEN\\u0027);\\n        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), \\u0027IS_FROZEN\\u0027);\\n    }\\n}\\n\\n\\n// Dependency file: src/AdminMultisigBase.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AdminMultisigBase is EternalStorage {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256(\\u0027admin-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_ADMIN = keccak256(\\u0027admin\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256(\\u0027admin-count\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256(\\u0027admin-threshold\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256(\\u0027admin-vote-counts\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256(\\u0027admin-voted\\u0027);\\n    bytes32 internal constant PREFIX_IS_ADMIN = keccak256(\\u0027is-admin\\u0027);\\n\\n    modifier onlyAdmin() {\\n        uint256 adminEpoch = _adminEpoch();\\n\\n        require(_isAdmin(adminEpoch, msg.sender), \\u0027NOT_ADMIN\\u0027);\\n\\n        bytes32 topic = keccak256(msg.data);\\n\\n        // Check that admin has not voted, then record that they have voted.\\n        require(!_hasVoted(adminEpoch, topic, msg.sender), \\u0027VOTED\\u0027);\\n        _setHasVoted(adminEpoch, topic, msg.sender, true);\\n\\n        // Determine the new vote count and update it.\\n        uint256 adminVoteCount = _getVoteCount(adminEpoch, topic) + uint256(1);\\n        _setVoteCount(adminEpoch, topic, adminVoteCount);\\n\\n        // Do not proceed with operation execution if insufficient votes.\\n        if (adminVoteCount \\u003c _getAdminThreshold(adminEpoch)) return;\\n\\n        _;\\n\\n        // Clear vote count and voted booleans.\\n        _setVoteCount(adminEpoch, topic, uint256(0));\\n\\n        uint256 adminCount = _getAdminCount(adminEpoch);\\n\\n        for (uint256 i; i \\u003c adminCount; i++) {\\n            _setHasVoted(adminEpoch, topic, _getAdmin(adminEpoch, i), false);\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getAdminKey(uint256 adminEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN, adminEpoch, index));\\n    }\\n\\n    function _getAdminCountKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_COUNT, adminEpoch));\\n    }\\n\\n    function _getAdminThresholdKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_THRESHOLD, adminEpoch));\\n    }\\n\\n    function _getAdminVoteCountsKey(uint256 adminEpoch, bytes32 topic) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTE_COUNTS, adminEpoch, topic));\\n    }\\n\\n    function _getAdminVotedKey(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTED, adminEpoch, topic, account));\\n    }\\n\\n    function _getIsAdminKey(uint256 adminEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_ADMIN, adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _adminEpoch() internal view returns (uint256) {\\n        return getUint(KEY_ADMIN_EPOCH);\\n    }\\n\\n    function _getAdmin(uint256 adminEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getAdminKey(adminEpoch, index));\\n    }\\n\\n    function _getAdminCount(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminCountKey(adminEpoch));\\n    }\\n\\n    function _getAdminThreshold(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminThresholdKey(adminEpoch));\\n    }\\n\\n    function _getVoteCount(uint256 adminEpoch, bytes32 topic) internal view returns (uint256) {\\n        return getUint(_getAdminVoteCountsKey(adminEpoch, topic));\\n    }\\n\\n    function _hasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal view returns (bool) {\\n        return getBool(_getAdminVotedKey(adminEpoch, topic, account));\\n    }\\n\\n    function _isAdmin(uint256 adminEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsAdminKey(adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setAdminEpoch(uint256 adminEpoch) internal {\\n        _setUint(KEY_ADMIN_EPOCH, adminEpoch);\\n    }\\n\\n    function _setAdmin(\\n        uint256 adminEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        _setAddress(_getAdminKey(adminEpoch, index), account);\\n    }\\n\\n    function _setAdminCount(uint256 adminEpoch, uint256 adminCount) internal {\\n        _setUint(_getAdminCountKey(adminEpoch), adminCount);\\n    }\\n\\n    function _setAdmins(\\n        uint256 adminEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 adminLength = accounts.length;\\n\\n        require(adminLength \\u003e= threshold, \\u0027INV_ADMINS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_ADMIN_THLD\\u0027);\\n\\n        _setAdminThreshold(adminEpoch, threshold);\\n        _setAdminCount(adminEpoch, adminLength);\\n\\n        for (uint256 i; i \\u003c adminLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an admin for this epoch.\\n            require(!_isAdmin(adminEpoch, account), \\u0027DUP_ADMIN\\u0027);\\n\\n            // Set this account as the i-th admin in this epoch (needed to we can clear topic votes in `onlyAdmin`).\\n            _setAdmin(adminEpoch, i, account);\\n            _setIsAdmin(adminEpoch, account, true);\\n        }\\n    }\\n\\n    function _setAdminThreshold(uint256 adminEpoch, uint256 adminThreshold) internal {\\n        _setUint(_getAdminThresholdKey(adminEpoch), adminThreshold);\\n    }\\n\\n    function _setVoteCount(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        uint256 voteCount\\n    ) internal {\\n        _setUint(_getAdminVoteCountsKey(adminEpoch, topic), voteCount);\\n    }\\n\\n    function _setHasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account,\\n        bool voted\\n    ) internal {\\n        _setBool(_getAdminVotedKey(adminEpoch, topic, account), voted);\\n    }\\n\\n    function _setIsAdmin(\\n        uint256 adminEpoch,\\n        address account,\\n        bool isAdmin\\n    ) internal {\\n        _setBool(_getIsAdminKey(adminEpoch, account), isAdmin);\\n    }\\n}\\n\\n\\n// Root file: src/AxelarGateway.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n// import { AdminMultisigBase } from \\u0027src/AdminMultisigBase.sol\\u0027;\\n\\nabstract contract AxelarGateway is IAxelarGateway, AdminMultisigBase {\\n    /// @dev Storage slot with the address of the current factory. `keccak256(\\u0027eip1967.proxy.implementation\\u0027) - 1`.\\n    bytes32 internal constant KEY_IMPLEMENTATION =\\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    bytes32 internal constant PREFIX_COMMAND_EXECUTED = keccak256(\\u0027command-executed\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_ADDRESS = keccak256(\\u0027token-address\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n\\n    bytes32 internal constant SELECTOR_BURN_TOKEN = keccak256(\\u0027burnToken\\u0027);\\n    bytes32 internal constant SELECTOR_DEPLOY_TOKEN = keccak256(\\u0027deployToken\\u0027);\\n    bytes32 internal constant SELECTOR_MINT_TOKEN = keccak256(\\u0027mintToken\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256(\\u0027transferOperatorship\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OWNERSHIP = keccak256(\\u0027transferOwnership\\u0027);\\n\\n    uint8 internal constant OLD_KEY_RETENTION = 16;\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\u0027NOT_SELF\\u0027);\\n\\n        _;\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() public view override returns (bool) {\\n        return getBool(KEY_ALL_TOKENS_FROZEN);\\n    }\\n\\n    function implementation() public view override returns (address) {\\n        return getAddress(KEY_IMPLEMENTATION);\\n    }\\n\\n    function tokenAddresses(string memory symbol) public view override returns (address) {\\n        return getAddress(_getTokenAddressKey(symbol));\\n    }\\n\\n    function tokenFrozen(string memory symbol) public view override returns (bool) {\\n        return getBool(_getFreezeTokenKey(symbol));\\n    }\\n\\n    function isCommandExecuted(bytes32 commandId) public view override returns (bool) {\\n        return getBool(_getIsCommandExecutedKey(commandId));\\n    }\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), true);\\n\\n        emit TokenFrozen(symbol);\\n    }\\n\\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), false);\\n\\n        emit TokenUnfrozen(symbol);\\n    }\\n\\n    function freezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, true);\\n\\n        emit AllTokensFrozen();\\n    }\\n\\n    function unfreezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, false);\\n\\n        emit AllTokensUnfrozen();\\n    }\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external override onlyAdmin {\\n        emit Upgraded(newImplementation);\\n\\n        // AUDIT: If `newImplementation.setup` performs `selfdestruct`, it will result in the loss of _this_ implementation (thereby losing the gateway)\\n        //        if `upgrade` is entered within the context of _this_ implementation itself.\\n        (bool success, ) = newImplementation.delegatecall(\\n            abi.encodeWithSelector(IAxelarGateway.setup.selector, setupParams)\\n        );\\n        require(success, \\u0027SETUP_FAILED\\u0027);\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**********************\\\\\\n    |* Internal Functions *|\\n    \\\\**********************/\\n\\n    function _deployToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 cap\\n    ) internal {\\n        require(tokenAddresses(symbol) == address(0), \\u0027TOKEN_EXIST\\u0027);\\n\\n        bytes32 salt = keccak256(abi.encodePacked(symbol));\\n        address token = address(new BurnableMintableCappedERC20{ salt: salt }(name, symbol, decimals, cap));\\n\\n        _setTokenAddress(symbol, token);\\n\\n        emit TokenDeployed(symbol, token);\\n    }\\n\\n    function _mintToken(\\n        string memory symbol,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).mint(account, amount);\\n    }\\n\\n    function _burnToken(string memory symbol, bytes32 salt) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getFreezeTokenKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol));\\n    }\\n\\n    function _getTokenAddressKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_ADDRESS, symbol));\\n    }\\n\\n    function _getIsCommandExecutedKey(bytes32 commandId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_COMMAND_EXECUTED, commandId));\\n    }\\n\\n    /********************\\\\\\n    |* Internal Getters *|\\n    \\\\********************/\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Internal Setters *|\\n    \\\\********************/\\n\\n    function _setTokenAddress(string memory symbol, address tokenAddr) internal {\\n        _setAddress(_getTokenAddressKey(symbol), tokenAddr);\\n    }\\n\\n    function _setCommandExecuted(bytes32 commandId, bool executed) internal {\\n        _setBool(_getIsCommandExecutedKey(commandId), executed);\\n    }\\n\\n    function _setImplementation(address newImplementation) internal {\\n        _setAddress(KEY_IMPLEMENTATION, newImplementation);\\n    }\\n}\\n\"},\"AxelarGatewayMultisig.sol\":{\"content\":\"// Dependency file: src/interfaces/IAxelarGateway.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event TokenFrozen(string indexed symbol);\\n\\n    event TokenUnfrozen(string indexed symbol);\\n\\n    event AllTokensFrozen();\\n\\n    event AllTokensUnfrozen();\\n\\n    event AccountBlacklisted(address indexed account);\\n\\n    event AccountWhitelisted(address indexed account);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external;\\n\\n    function unfreezeToken(string memory symbol) external;\\n\\n    function freezeAllTokens() external;\\n\\n    function unfreezeAllTokens() external;\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\\n\\n// Dependency file: src/interfaces/IAxelarGatewayMultisig.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\ninterface IAxelarGatewayMultisig is IAxelarGateway {\\n\\n    event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);\\n\\n    event OperatorshipTransferred(address[] preOperators, uint256 prevThreshold, address[] newOperators, uint256 newThreshold);\\n\\n    function owners() external view returns (address[] memory);\\n\\n    function operators() external view returns (address[] memory);\\n\\n}\\n\\n\\n// Dependency file: src/ECDSA.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address signer) {\\n        // Check the signature length\\n        require(signature.length == 65, \\u0027INV_LEN\\u0027);\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\u0027INV_S\\u0027);\\n\\n        require(v == 27 || v == 28, \\u0027INV_V\\u0027);\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        require((signer = ecrecover(hash, v, r, s)) != address(0), \\u0027INV_SIG\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\u0027\\\\x19Ethereum Signed Message:\\\\n32\\u0027, hash));\\n    }\\n}\\n\\n\\n// Dependency file: src/interfaces/IERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: src/ERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// Dependency file: src/Ownable.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n// Dependency file: src/Burner.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n\\ncontract Burner {\\n    constructor(address tokenAddress, bytes32 salt) {\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\\n\\n// Dependency file: src/EternalStorage.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Dependency file: src/BurnableMintableCappedERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { ERC20 } from \\u0027src/ERC20.sol\\u0027;\\n// import { Ownable } from \\u0027src/Ownable.sol\\u0027;\\n// import { Burner } from \\u0027src/Burner.sol\\u0027;\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract BurnableMintableCappedERC20 is ERC20, Ownable {\\n    uint256 public cap;\\n\\n    bytes32 private constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n    bytes32 private constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    event Frozen(address indexed owner);\\n    event Unfrozen(address indexed owner);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 capacity\\n    ) ERC20(name, symbol, decimals) Ownable() {\\n        cap = capacity;\\n    }\\n\\n    function depositAddress(bytes32 salt) public view returns (address) {\\n        // This would be easier, cheaper, simpler, and result in  globally consistent deposit addresses for any salt (all chains, all tokens).\\n        // return address(uint160(uint256(keccak256(abi.encodePacked(bytes32(0x000000000000000000000000000000000000000000000000000000000000dead), salt)))));\\n\\n        /* Convert a hash which is bytes32 to an address which is 20-byte long\\n        according to https://docs.soliditylang.org/en/v0.8.1/control-structures.html?highlight=create2#salted-contract-creations-create2 */\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                owner,\\n                                salt,\\n                                keccak256(abi.encodePacked(type(Burner).creationCode, abi.encode(address(this)), salt))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        uint256 capacity = cap;\\n        require(capacity == 0 || totalSupply + amount \\u003c= capacity, \\u0027CAP_EXCEEDED\\u0027);\\n\\n        _mint(account, amount);\\n    }\\n\\n    function burn(bytes32 salt) public onlyOwner {\\n        address account = depositAddress(salt);\\n        _burn(account, balanceOf[account]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), \\u0027IS_FROZEN\\u0027);\\n        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), \\u0027IS_FROZEN\\u0027);\\n    }\\n}\\n\\n\\n// Dependency file: src/AdminMultisigBase.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AdminMultisigBase is EternalStorage {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256(\\u0027admin-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_ADMIN = keccak256(\\u0027admin\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256(\\u0027admin-count\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256(\\u0027admin-threshold\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256(\\u0027admin-vote-counts\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256(\\u0027admin-voted\\u0027);\\n    bytes32 internal constant PREFIX_IS_ADMIN = keccak256(\\u0027is-admin\\u0027);\\n\\n    modifier onlyAdmin() {\\n        uint256 adminEpoch = _adminEpoch();\\n\\n        require(_isAdmin(adminEpoch, msg.sender), \\u0027NOT_ADMIN\\u0027);\\n\\n        bytes32 topic = keccak256(msg.data);\\n\\n        // Check that admin has not voted, then record that they have voted.\\n        require(!_hasVoted(adminEpoch, topic, msg.sender), \\u0027VOTED\\u0027);\\n        _setHasVoted(adminEpoch, topic, msg.sender, true);\\n\\n        // Determine the new vote count and update it.\\n        uint256 adminVoteCount = _getVoteCount(adminEpoch, topic) + uint256(1);\\n        _setVoteCount(adminEpoch, topic, adminVoteCount);\\n\\n        // Do not proceed with operation execution if insufficient votes.\\n        if (adminVoteCount \\u003c _getAdminThreshold(adminEpoch)) return;\\n\\n        _;\\n\\n        // Clear vote count and voted booleans.\\n        _setVoteCount(adminEpoch, topic, uint256(0));\\n\\n        uint256 adminCount = _getAdminCount(adminEpoch);\\n\\n        for (uint256 i; i \\u003c adminCount; i++) {\\n            _setHasVoted(adminEpoch, topic, _getAdmin(adminEpoch, i), false);\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getAdminKey(uint256 adminEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN, adminEpoch, index));\\n    }\\n\\n    function _getAdminCountKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_COUNT, adminEpoch));\\n    }\\n\\n    function _getAdminThresholdKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_THRESHOLD, adminEpoch));\\n    }\\n\\n    function _getAdminVoteCountsKey(uint256 adminEpoch, bytes32 topic) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTE_COUNTS, adminEpoch, topic));\\n    }\\n\\n    function _getAdminVotedKey(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTED, adminEpoch, topic, account));\\n    }\\n\\n    function _getIsAdminKey(uint256 adminEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_ADMIN, adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _adminEpoch() internal view returns (uint256) {\\n        return getUint(KEY_ADMIN_EPOCH);\\n    }\\n\\n    function _getAdmin(uint256 adminEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getAdminKey(adminEpoch, index));\\n    }\\n\\n    function _getAdminCount(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminCountKey(adminEpoch));\\n    }\\n\\n    function _getAdminThreshold(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminThresholdKey(adminEpoch));\\n    }\\n\\n    function _getVoteCount(uint256 adminEpoch, bytes32 topic) internal view returns (uint256) {\\n        return getUint(_getAdminVoteCountsKey(adminEpoch, topic));\\n    }\\n\\n    function _hasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal view returns (bool) {\\n        return getBool(_getAdminVotedKey(adminEpoch, topic, account));\\n    }\\n\\n    function _isAdmin(uint256 adminEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsAdminKey(adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setAdminEpoch(uint256 adminEpoch) internal {\\n        _setUint(KEY_ADMIN_EPOCH, adminEpoch);\\n    }\\n\\n    function _setAdmin(\\n        uint256 adminEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        _setAddress(_getAdminKey(adminEpoch, index), account);\\n    }\\n\\n    function _setAdminCount(uint256 adminEpoch, uint256 adminCount) internal {\\n        _setUint(_getAdminCountKey(adminEpoch), adminCount);\\n    }\\n\\n    function _setAdmins(\\n        uint256 adminEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 adminLength = accounts.length;\\n\\n        require(adminLength \\u003e= threshold, \\u0027INV_ADMINS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_ADMIN_THLD\\u0027);\\n\\n        _setAdminThreshold(adminEpoch, threshold);\\n        _setAdminCount(adminEpoch, adminLength);\\n\\n        for (uint256 i; i \\u003c adminLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an admin for this epoch.\\n            require(!_isAdmin(adminEpoch, account), \\u0027DUP_ADMIN\\u0027);\\n\\n            // Set this account as the i-th admin in this epoch (needed to we can clear topic votes in `onlyAdmin`).\\n            _setAdmin(adminEpoch, i, account);\\n            _setIsAdmin(adminEpoch, account, true);\\n        }\\n    }\\n\\n    function _setAdminThreshold(uint256 adminEpoch, uint256 adminThreshold) internal {\\n        _setUint(_getAdminThresholdKey(adminEpoch), adminThreshold);\\n    }\\n\\n    function _setVoteCount(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        uint256 voteCount\\n    ) internal {\\n        _setUint(_getAdminVoteCountsKey(adminEpoch, topic), voteCount);\\n    }\\n\\n    function _setHasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account,\\n        bool voted\\n    ) internal {\\n        _setBool(_getAdminVotedKey(adminEpoch, topic, account), voted);\\n    }\\n\\n    function _setIsAdmin(\\n        uint256 adminEpoch,\\n        address account,\\n        bool isAdmin\\n    ) internal {\\n        _setBool(_getIsAdminKey(adminEpoch, account), isAdmin);\\n    }\\n}\\n\\n\\n// Dependency file: src/AxelarGateway.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n// import { AdminMultisigBase } from \\u0027src/AdminMultisigBase.sol\\u0027;\\n\\nabstract contract AxelarGateway is IAxelarGateway, AdminMultisigBase {\\n    /// @dev Storage slot with the address of the current factory. `keccak256(\\u0027eip1967.proxy.implementation\\u0027) - 1`.\\n    bytes32 internal constant KEY_IMPLEMENTATION =\\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    bytes32 internal constant PREFIX_COMMAND_EXECUTED = keccak256(\\u0027command-executed\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_ADDRESS = keccak256(\\u0027token-address\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n\\n    bytes32 internal constant SELECTOR_BURN_TOKEN = keccak256(\\u0027burnToken\\u0027);\\n    bytes32 internal constant SELECTOR_DEPLOY_TOKEN = keccak256(\\u0027deployToken\\u0027);\\n    bytes32 internal constant SELECTOR_MINT_TOKEN = keccak256(\\u0027mintToken\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256(\\u0027transferOperatorship\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OWNERSHIP = keccak256(\\u0027transferOwnership\\u0027);\\n\\n    uint8 internal constant OLD_KEY_RETENTION = 16;\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\u0027NOT_SELF\\u0027);\\n\\n        _;\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() public view override returns (bool) {\\n        return getBool(KEY_ALL_TOKENS_FROZEN);\\n    }\\n\\n    function implementation() public view override returns (address) {\\n        return getAddress(KEY_IMPLEMENTATION);\\n    }\\n\\n    function tokenAddresses(string memory symbol) public view override returns (address) {\\n        return getAddress(_getTokenAddressKey(symbol));\\n    }\\n\\n    function tokenFrozen(string memory symbol) public view override returns (bool) {\\n        return getBool(_getFreezeTokenKey(symbol));\\n    }\\n\\n    function isCommandExecuted(bytes32 commandId) public view override returns (bool) {\\n        return getBool(_getIsCommandExecutedKey(commandId));\\n    }\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), true);\\n\\n        emit TokenFrozen(symbol);\\n    }\\n\\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), false);\\n\\n        emit TokenUnfrozen(symbol);\\n    }\\n\\n    function freezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, true);\\n\\n        emit AllTokensFrozen();\\n    }\\n\\n    function unfreezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, false);\\n\\n        emit AllTokensUnfrozen();\\n    }\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external override onlyAdmin {\\n        emit Upgraded(newImplementation);\\n\\n        // AUDIT: If `newImplementation.setup` performs `selfdestruct`, it will result in the loss of _this_ implementation (thereby losing the gateway)\\n        //        if `upgrade` is entered within the context of _this_ implementation itself.\\n        (bool success, ) = newImplementation.delegatecall(\\n            abi.encodeWithSelector(IAxelarGateway.setup.selector, setupParams)\\n        );\\n        require(success, \\u0027SETUP_FAILED\\u0027);\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**********************\\\\\\n    |* Internal Functions *|\\n    \\\\**********************/\\n\\n    function _deployToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 cap\\n    ) internal {\\n        require(tokenAddresses(symbol) == address(0), \\u0027TOKEN_EXIST\\u0027);\\n\\n        bytes32 salt = keccak256(abi.encodePacked(symbol));\\n        address token = address(new BurnableMintableCappedERC20{ salt: salt }(name, symbol, decimals, cap));\\n\\n        _setTokenAddress(symbol, token);\\n\\n        emit TokenDeployed(symbol, token);\\n    }\\n\\n    function _mintToken(\\n        string memory symbol,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).mint(account, amount);\\n    }\\n\\n    function _burnToken(string memory symbol, bytes32 salt) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getFreezeTokenKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol));\\n    }\\n\\n    function _getTokenAddressKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_ADDRESS, symbol));\\n    }\\n\\n    function _getIsCommandExecutedKey(bytes32 commandId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_COMMAND_EXECUTED, commandId));\\n    }\\n\\n    /********************\\\\\\n    |* Internal Getters *|\\n    \\\\********************/\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Internal Setters *|\\n    \\\\********************/\\n\\n    function _setTokenAddress(string memory symbol, address tokenAddr) internal {\\n        _setAddress(_getTokenAddressKey(symbol), tokenAddr);\\n    }\\n\\n    function _setCommandExecuted(bytes32 commandId, bool executed) internal {\\n        _setBool(_getIsCommandExecutedKey(commandId), executed);\\n    }\\n\\n    function _setImplementation(address newImplementation) internal {\\n        _setAddress(KEY_IMPLEMENTATION, newImplementation);\\n    }\\n}\\n\\n\\n// Root file: src/AxelarGatewayMultisig.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGatewayMultisig } from \\u0027src/interfaces/IAxelarGatewayMultisig.sol\\u0027;\\n\\n// import { ECDSA } from \\u0027src/ECDSA.sol\\u0027;\\n// import { AxelarGateway } from \\u0027src/AxelarGateway.sol\\u0027;\\n\\ncontract AxelarGatewayMultisig is IAxelarGatewayMultisig, AxelarGateway {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_OWNER_EPOCH = keccak256(\\u0027owner-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_OWNER = keccak256(\\u0027owner\\u0027);\\n    bytes32 internal constant PREFIX_OWNER_COUNT = keccak256(\\u0027owner-count\\u0027);\\n    bytes32 internal constant PREFIX_OWNER_THRESHOLD = keccak256(\\u0027owner-threshold\\u0027);\\n    bytes32 internal constant PREFIX_IS_OWNER = keccak256(\\u0027is-owner\\u0027);\\n\\n    bytes32 internal constant KEY_OPERATOR_EPOCH = keccak256(\\u0027operator-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_OPERATOR = keccak256(\\u0027operator\\u0027);\\n    bytes32 internal constant PREFIX_OPERATOR_COUNT = keccak256(\\u0027operator-count\\u0027);\\n    bytes32 internal constant PREFIX_OPERATOR_THRESHOLD = keccak256(\\u0027operator-threshold\\u0027);\\n    bytes32 internal constant PREFIX_IS_OPERATOR = keccak256(\\u0027is-operator\\u0027);\\n\\n    function _containsDuplicates(address[] memory accounts) internal pure returns (bool) {\\n        uint256 count = accounts.length;\\n\\n        for (uint256 i; i \\u003c count; ++i) {\\n            for (uint256 j = i + 1; j \\u003c count; ++j) {\\n                if (accounts[i] == accounts[j]) return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /************************\\\\\\n    |* Owners Functionality *|\\n    \\\\************************/\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getOwnerKey(uint256 ownerEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER, ownerEpoch, index));\\n    }\\n\\n    function _getOwnerCountKey(uint256 ownerEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER_COUNT, ownerEpoch));\\n    }\\n\\n    function _getOwnerThresholdKey(uint256 ownerEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER_THRESHOLD, ownerEpoch));\\n    }\\n\\n    function _getIsOwnerKey(uint256 ownerEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_OWNER, ownerEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _ownerEpoch() internal view returns (uint256) {\\n        return getUint(KEY_OWNER_EPOCH);\\n    }\\n\\n    function _getOwner(uint256 ownerEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getOwnerKey(ownerEpoch, index));\\n    }\\n\\n    function _getOwnerCount(uint256 ownerEpoch) internal view returns (uint256) {\\n        return getUint(_getOwnerCountKey(ownerEpoch));\\n    }\\n\\n    function _getOwnerThreshold(uint256 ownerEpoch) internal view returns (uint256) {\\n        return getUint(_getOwnerThresholdKey(ownerEpoch));\\n    }\\n\\n    function _isOwner(uint256 ownerEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsOwnerKey(ownerEpoch, account));\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are owners in the same `ownerEpoch`, within the last `OLD_KEY_RETENTION + 1` owner epochs.\\n    function _areValidRecentOwners(address[] memory accounts) internal view returns (bool) {\\n        uint256 ownerEpoch = _ownerEpoch();\\n        uint256 recentEpochs = OLD_KEY_RETENTION + uint256(1);\\n        uint256 lowerBoundOwnerEpoch = ownerEpoch \\u003e recentEpochs ? ownerEpoch - recentEpochs : uint256(0);\\n\\n        while (ownerEpoch \\u003e lowerBoundOwnerEpoch) {\\n            if (_areValidOwnersInEpoch(ownerEpoch--, accounts)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are owners in the `ownerEpoch`.\\n    function _areValidOwnersInEpoch(uint256 ownerEpoch, address[] memory accounts) internal view returns (bool) {\\n        if (_containsDuplicates(accounts)) return false;\\n\\n        uint256 threshold = _getOwnerThreshold(ownerEpoch);\\n        uint256 validSignerCount;\\n\\n        for (uint256 i; i \\u003c accounts.length; i++) {\\n            if (_isOwner(ownerEpoch, accounts[i]) \\u0026\\u0026 ++validSignerCount \\u003e= threshold) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns the array of owners within the current `ownerEpoch`.\\n    function owners() public view override returns (address[] memory results) {\\n        uint256 ownerEpoch = _ownerEpoch();\\n        uint256 ownerCount = _getOwnerCount(ownerEpoch);\\n        results = new address[](ownerCount);\\n\\n        for (uint256 i; i \\u003c ownerCount; i++) {\\n            results[i] = _getOwner(ownerEpoch, i);\\n        }\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setOwnerEpoch(uint256 ownerEpoch) internal {\\n        _setUint(KEY_OWNER_EPOCH, ownerEpoch);\\n    }\\n\\n    function _setOwner(\\n        uint256 ownerEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n        _setAddress(_getOwnerKey(ownerEpoch, index), account);\\n    }\\n\\n    function _setOwnerCount(uint256 ownerEpoch, uint256 ownerCount) internal {\\n        _setUint(_getOwnerCountKey(ownerEpoch), ownerCount);\\n    }\\n\\n    function _setOwners(\\n        uint256 ownerEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 accountLength = accounts.length;\\n\\n        require(accountLength \\u003e= threshold, \\u0027INV_OWNERS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_OWNER_THLD\\u0027);\\n\\n        _setOwnerThreshold(ownerEpoch, threshold);\\n        _setOwnerCount(ownerEpoch, accountLength);\\n\\n        for (uint256 i; i \\u003c accountLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an owner for this ownerEpoch.\\n            require(!_isOwner(ownerEpoch, account), \\u0027DUP_OWNER\\u0027);\\n\\n            // Set this account as the i-th owner in this ownerEpoch (needed to we can get all the owners for `owners`).\\n            _setOwner(ownerEpoch, i, account);\\n            _setIsOwner(ownerEpoch, account, true);\\n        }\\n    }\\n\\n    function _setOwnerThreshold(uint256 ownerEpoch, uint256 ownerThreshold) internal {\\n        _setUint(_getOwnerThresholdKey(ownerEpoch), ownerThreshold);\\n    }\\n\\n    function _setIsOwner(\\n        uint256 ownerEpoch,\\n        address account,\\n        bool isOwner\\n    ) internal {\\n        _setBool(_getIsOwnerKey(ownerEpoch, account), isOwner);\\n    }\\n\\n    /**************************\\\\\\n    |* Operator Functionality *|\\n    \\\\**************************/\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getOperatorKey(uint256 operatorEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR, operatorEpoch, index));\\n    }\\n\\n    function _getOperatorCountKey(uint256 operatorEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR_COUNT, operatorEpoch));\\n    }\\n\\n    function _getOperatorThresholdKey(uint256 operatorEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR_THRESHOLD, operatorEpoch));\\n    }\\n\\n    function _getIsOperatorKey(uint256 operatorEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_OPERATOR, operatorEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _operatorEpoch() internal view returns (uint256) {\\n        return getUint(KEY_OPERATOR_EPOCH);\\n    }\\n\\n    function _getOperator(uint256 operatorEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getOperatorKey(operatorEpoch, index));\\n    }\\n\\n    function _getOperatorCount(uint256 operatorEpoch) internal view returns (uint256) {\\n        return getUint(_getOperatorCountKey(operatorEpoch));\\n    }\\n\\n    function _getOperatorThreshold(uint256 operatorEpoch) internal view returns (uint256) {\\n        return getUint(_getOperatorThresholdKey(operatorEpoch));\\n    }\\n\\n    function _isOperator(uint256 operatorEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsOperatorKey(operatorEpoch, account));\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are operator in the same `operatorEpoch`, within the last `OLD_KEY_RETENTION + 1` operator epochs.\\n    function _areValidRecentOperators(address[] memory accounts) internal view returns (bool) {\\n        uint256 operatorEpoch = _operatorEpoch();\\n        uint256 recentEpochs = OLD_KEY_RETENTION + uint256(1);\\n        uint256 lowerBoundOperatorEpoch = operatorEpoch \\u003e recentEpochs ? operatorEpoch - recentEpochs : uint256(0);\\n\\n        while (operatorEpoch \\u003e lowerBoundOperatorEpoch) {\\n            if (_areValidOperatorsInEpoch(operatorEpoch--, accounts)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are operator in the `operatorEpoch`.\\n    function _areValidOperatorsInEpoch(uint256 operatorEpoch, address[] memory accounts) internal view returns (bool) {\\n        if (_containsDuplicates(accounts)) return false;\\n\\n        uint256 threshold = _getOperatorThreshold(operatorEpoch);\\n        uint256 validSignerCount;\\n\\n        for (uint256 i; i \\u003c accounts.length; i++) {\\n            if (_isOperator(operatorEpoch, accounts[i]) \\u0026\\u0026 ++validSignerCount \\u003e= threshold) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns the array of operators within the current `operatorEpoch`.\\n    function operators() public view override returns (address[] memory results) {\\n        uint256 operatorEpoch = _operatorEpoch();\\n        uint256 operatorCount = _getOperatorCount(operatorEpoch);\\n        results = new address[](operatorCount);\\n\\n        for (uint256 i; i \\u003c operatorCount; i++) {\\n            results[i] = _getOperator(operatorEpoch, i);\\n        }\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setOperatorEpoch(uint256 operatorEpoch) internal {\\n        _setUint(KEY_OPERATOR_EPOCH, operatorEpoch);\\n    }\\n\\n    function _setOperator(\\n        uint256 operatorEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        // AUDIT: Should have `require(account != address(0), \\u0027ZERO_ADDR\\u0027);` like Singlesig?\\n        _setAddress(_getOperatorKey(operatorEpoch, index), account);\\n    }\\n\\n    function _setOperatorCount(uint256 operatorEpoch, uint256 operatorCount) internal {\\n        _setUint(_getOperatorCountKey(operatorEpoch), operatorCount);\\n    }\\n\\n    function _setOperators(\\n        uint256 operatorEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 accountLength = accounts.length;\\n\\n        require(accountLength \\u003e= threshold, \\u0027INV_OPERATORS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_OPERATOR_THLD\\u0027);\\n\\n        _setOperatorThreshold(operatorEpoch, threshold);\\n        _setOperatorCount(operatorEpoch, accountLength);\\n\\n        for (uint256 i; i \\u003c accountLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an operator for this operatorEpoch.\\n            require(!_isOperator(operatorEpoch, account), \\u0027DUP_OPERATOR\\u0027);\\n\\n            // Set this account as the i-th operator in this operatorEpoch (needed to we can get all the operators for `operators`).\\n            _setOperator(operatorEpoch, i, account);\\n            _setIsOperator(operatorEpoch, account, true);\\n        }\\n    }\\n\\n    function _setOperatorThreshold(uint256 operatorEpoch, uint256 operatorThreshold) internal {\\n        _setUint(_getOperatorThresholdKey(operatorEpoch), operatorThreshold);\\n    }\\n\\n    function _setIsOperator(\\n        uint256 operatorEpoch,\\n        address account,\\n        bool isOperator\\n    ) internal {\\n        _setBool(_getIsOperatorKey(operatorEpoch, account), isOperator);\\n    }\\n\\n    /**********************\\\\\\n    |* Self Functionality *|\\n    \\\\**********************/\\n\\n    function deployToken(bytes calldata params) external onlySelf {\\n        (string memory name, string memory symbol, uint8 decimals, uint256 cap) = abi.decode(\\n            params,\\n            (string, string, uint8, uint256)\\n        );\\n\\n        _deployToken(name, symbol, decimals, cap);\\n    }\\n\\n    function mintToken(bytes calldata params) external onlySelf {\\n        (string memory symbol, address account, uint256 amount) = abi.decode(params, (string, address, uint256));\\n\\n        _mintToken(symbol, account, amount);\\n    }\\n\\n    function burnToken(bytes calldata params) external onlySelf {\\n        (string memory symbol, bytes32 salt) = abi.decode(params, (string, bytes32));\\n\\n        _burnToken(symbol, salt);\\n    }\\n\\n    function transferOwnership(bytes calldata params) external onlySelf {\\n        (address[] memory newOwners, uint256 newThreshold) = abi.decode(params, (address[], uint256));\\n\\n        uint256 ownerEpoch = _ownerEpoch();\\n\\n        emit OwnershipTransferred(owners(), _getOwnerThreshold(ownerEpoch), newOwners, newThreshold);\\n\\n        _setOwnerEpoch(++ownerEpoch);\\n        _setOwners(ownerEpoch, newOwners, newThreshold);\\n    }\\n\\n    function transferOperatorship(bytes calldata params) external onlySelf {\\n        (address[] memory newOperators, uint256 newThreshold) = abi.decode(params, (address[], uint256));\\n\\n        uint256 ownerEpoch = _ownerEpoch();\\n\\n        emit OperatorshipTransferred(operators(), _getOperatorThreshold(ownerEpoch), newOperators, newThreshold);\\n\\n        uint256 operatorEpoch = _operatorEpoch();\\n        _setOperatorEpoch(++operatorEpoch);\\n        _setOperators(operatorEpoch, newOperators, newThreshold);\\n    }\\n\\n    /**************************\\\\\\n    |* External Functionality *|\\n    \\\\**************************/\\n\\n    function setup(bytes calldata params) external override {\\n        // Prevent setup from being called on a non-proxy (the implementation).\\n        require(implementation() != address(0), \\u0027NOT_PROXY\\u0027);\\n\\n        (\\n            address[] memory adminAddresses,\\n            uint256 adminThreshold,\\n            address[] memory ownerAddresses,\\n            uint256 ownerThreshold,\\n            address[] memory operatorAddresses,\\n            uint256 operatorThreshold\\n        ) = abi.decode(params, (address[], uint256, address[], uint256, address[], uint256));\\n\\n        uint256 adminEpoch = _adminEpoch() + uint256(1);\\n        _setAdminEpoch(adminEpoch);\\n        _setAdmins(adminEpoch, adminAddresses, adminThreshold);\\n\\n        uint256 ownerEpoch = _ownerEpoch() + uint256(1);\\n        _setOwnerEpoch(ownerEpoch);\\n        _setOwners(ownerEpoch, ownerAddresses, ownerThreshold);\\n\\n        uint256 operatorEpoch = _operatorEpoch() + uint256(1);\\n        _setOperatorEpoch(operatorEpoch);\\n        _setOperators(operatorEpoch, operatorAddresses, operatorThreshold);\\n\\n        emit OwnershipTransferred(new address[](uint256(0)), uint256(0), ownerAddresses, ownerThreshold);\\n        emit OperatorshipTransferred(new address[](uint256(0)), uint256(0), operatorAddresses, operatorThreshold);\\n    }\\n\\n    function execute(bytes calldata input) external override {\\n        (bytes memory data, bytes[] memory signatures) = abi.decode(input, (bytes, bytes[]));\\n\\n        _execute(data, signatures);\\n    }\\n\\n    function _execute(bytes memory data, bytes[] memory signatures) internal {\\n        uint256 signatureCount = signatures.length;\\n\\n        address[] memory signers = new address[](signatureCount);\\n\\n        for (uint256 i; i \\u003c signatureCount; i++) {\\n            signers[i] = ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(data)), signatures[i]);\\n        }\\n\\n        (uint256 chainId, bytes32[] memory commandIds, string[] memory commands, bytes[] memory params) = abi.decode(\\n            data,\\n            (uint256, bytes32[], string[], bytes[])\\n        );\\n\\n        require(chainId == _getChainID(), \\u0027INV_CHAIN\\u0027);\\n\\n        uint256 commandsLength = commandIds.length;\\n\\n        require(commandsLength == commands.length \\u0026\\u0026 commandsLength == params.length, \\u0027INV_CMDS\\u0027);\\n\\n        bool areValidCurrentOwners = _areValidOwnersInEpoch(_ownerEpoch(), signers);\\n        bool areValidRecentOwners = areValidCurrentOwners || _areValidRecentOwners(signers);\\n        bool areValidRecentOperators = _areValidRecentOperators(signers);\\n\\n        for (uint256 i; i \\u003c commandsLength; i++) {\\n            bytes32 commandId = commandIds[i];\\n\\n            if (isCommandExecuted(commandId)) continue; /* Ignore if duplicate commandId received */\\n\\n            bytes4 commandSelector;\\n            bytes32 commandHash = keccak256(abi.encodePacked(commands[i]));\\n\\n            if (commandHash == SELECTOR_DEPLOY_TOKEN) {\\n                if (!areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.deployToken.selector;\\n            } else if (commandHash == SELECTOR_MINT_TOKEN) {\\n                if (!areValidRecentOperators \\u0026\\u0026 !areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.mintToken.selector;\\n            } else if (commandHash == SELECTOR_BURN_TOKEN) {\\n                if (!areValidRecentOperators \\u0026\\u0026 !areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.burnToken.selector;\\n            } else if (commandHash == SELECTOR_TRANSFER_OWNERSHIP) {\\n                if (!areValidCurrentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.transferOwnership.selector;\\n            } else if (commandHash == SELECTOR_TRANSFER_OPERATORSHIP) {\\n                if (!areValidCurrentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.transferOperatorship.selector;\\n            } else {\\n                continue; /* Ignore if unknown command received */\\n            }\\n\\n            // Prevent a re-entrancy from executing this command before it can be marked as successful.\\n            _setCommandExecuted(commandId, true);\\n            (bool success, ) = address(this).call(abi.encodeWithSelector(commandSelector, params[i]));\\n            _setCommandExecuted(commandId, success);\\n\\n            if (success) {\\n                emit Executed(commandId);\\n            }\\n        }\\n    }\\n}\\n\"},\"AxelarGatewayProxy.sol\":{\"content\":\"// Dependency file: src/EternalStorage.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Root file: src/AxelarGatewayProxy.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AxelarGatewayProxy is EternalStorage {\\n    /// @dev Storage slot with the address of the current factory. `keccak256(\\u0027eip1967.proxy.implementation\\u0027) - 1`.\\n    bytes32 internal constant KEY_IMPLEMENTATION =\\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    fallback() external payable {\\n        address implementation = getAddress(KEY_IMPLEMENTATION);\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {\\n        revert(\\u0027NO_ETHER\\u0027);\\n    }\\n}\\n\"},\"AxelarGatewayProxyMultisig.sol\":{\"content\":\"// Dependency file: src/interfaces/IAxelarGateway.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event TokenFrozen(string indexed symbol);\\n\\n    event TokenUnfrozen(string indexed symbol);\\n\\n    event AllTokensFrozen();\\n\\n    event AllTokensUnfrozen();\\n\\n    event AccountBlacklisted(address indexed account);\\n\\n    event AccountWhitelisted(address indexed account);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external;\\n\\n    function unfreezeToken(string memory symbol) external;\\n\\n    function freezeAllTokens() external;\\n\\n    function unfreezeAllTokens() external;\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\\n\\n// Dependency file: src/EternalStorage.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Dependency file: src/AxelarGatewayProxy.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AxelarGatewayProxy is EternalStorage {\\n    /// @dev Storage slot with the address of the current factory. `keccak256(\\u0027eip1967.proxy.implementation\\u0027) - 1`.\\n    bytes32 internal constant KEY_IMPLEMENTATION =\\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    fallback() external payable {\\n        address implementation = getAddress(KEY_IMPLEMENTATION);\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {\\n        revert(\\u0027NO_ETHER\\u0027);\\n    }\\n}\\n\\n\\n// Dependency file: src/interfaces/IAxelarGatewayMultisig.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\ninterface IAxelarGatewayMultisig is IAxelarGateway {\\n\\n    event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);\\n\\n    event OperatorshipTransferred(address[] preOperators, uint256 prevThreshold, address[] newOperators, uint256 newThreshold);\\n\\n    function owners() external view returns (address[] memory);\\n\\n    function operators() external view returns (address[] memory);\\n\\n}\\n\\n\\n// Dependency file: src/ECDSA.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address signer) {\\n        // Check the signature length\\n        require(signature.length == 65, \\u0027INV_LEN\\u0027);\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\u0027INV_S\\u0027);\\n\\n        require(v == 27 || v == 28, \\u0027INV_V\\u0027);\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        require((signer = ecrecover(hash, v, r, s)) != address(0), \\u0027INV_SIG\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\u0027\\\\x19Ethereum Signed Message:\\\\n32\\u0027, hash));\\n    }\\n}\\n\\n\\n// Dependency file: src/interfaces/IERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: src/ERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// Dependency file: src/Ownable.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n// Dependency file: src/Burner.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n\\ncontract Burner {\\n    constructor(address tokenAddress, bytes32 salt) {\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\\n\\n// Dependency file: src/BurnableMintableCappedERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { ERC20 } from \\u0027src/ERC20.sol\\u0027;\\n// import { Ownable } from \\u0027src/Ownable.sol\\u0027;\\n// import { Burner } from \\u0027src/Burner.sol\\u0027;\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract BurnableMintableCappedERC20 is ERC20, Ownable {\\n    uint256 public cap;\\n\\n    bytes32 private constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n    bytes32 private constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    event Frozen(address indexed owner);\\n    event Unfrozen(address indexed owner);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 capacity\\n    ) ERC20(name, symbol, decimals) Ownable() {\\n        cap = capacity;\\n    }\\n\\n    function depositAddress(bytes32 salt) public view returns (address) {\\n        // This would be easier, cheaper, simpler, and result in  globally consistent deposit addresses for any salt (all chains, all tokens).\\n        // return address(uint160(uint256(keccak256(abi.encodePacked(bytes32(0x000000000000000000000000000000000000000000000000000000000000dead), salt)))));\\n\\n        /* Convert a hash which is bytes32 to an address which is 20-byte long\\n        according to https://docs.soliditylang.org/en/v0.8.1/control-structures.html?highlight=create2#salted-contract-creations-create2 */\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                owner,\\n                                salt,\\n                                keccak256(abi.encodePacked(type(Burner).creationCode, abi.encode(address(this)), salt))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        uint256 capacity = cap;\\n        require(capacity == 0 || totalSupply + amount \\u003c= capacity, \\u0027CAP_EXCEEDED\\u0027);\\n\\n        _mint(account, amount);\\n    }\\n\\n    function burn(bytes32 salt) public onlyOwner {\\n        address account = depositAddress(salt);\\n        _burn(account, balanceOf[account]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), \\u0027IS_FROZEN\\u0027);\\n        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), \\u0027IS_FROZEN\\u0027);\\n    }\\n}\\n\\n\\n// Dependency file: src/AdminMultisigBase.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract AdminMultisigBase is EternalStorage {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ADMIN_EPOCH = keccak256(\\u0027admin-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_ADMIN = keccak256(\\u0027admin\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_COUNT = keccak256(\\u0027admin-count\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_THRESHOLD = keccak256(\\u0027admin-threshold\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTE_COUNTS = keccak256(\\u0027admin-vote-counts\\u0027);\\n    bytes32 internal constant PREFIX_ADMIN_VOTED = keccak256(\\u0027admin-voted\\u0027);\\n    bytes32 internal constant PREFIX_IS_ADMIN = keccak256(\\u0027is-admin\\u0027);\\n\\n    modifier onlyAdmin() {\\n        uint256 adminEpoch = _adminEpoch();\\n\\n        require(_isAdmin(adminEpoch, msg.sender), \\u0027NOT_ADMIN\\u0027);\\n\\n        bytes32 topic = keccak256(msg.data);\\n\\n        // Check that admin has not voted, then record that they have voted.\\n        require(!_hasVoted(adminEpoch, topic, msg.sender), \\u0027VOTED\\u0027);\\n        _setHasVoted(adminEpoch, topic, msg.sender, true);\\n\\n        // Determine the new vote count and update it.\\n        uint256 adminVoteCount = _getVoteCount(adminEpoch, topic) + uint256(1);\\n        _setVoteCount(adminEpoch, topic, adminVoteCount);\\n\\n        // Do not proceed with operation execution if insufficient votes.\\n        if (adminVoteCount \\u003c _getAdminThreshold(adminEpoch)) return;\\n\\n        _;\\n\\n        // Clear vote count and voted booleans.\\n        _setVoteCount(adminEpoch, topic, uint256(0));\\n\\n        uint256 adminCount = _getAdminCount(adminEpoch);\\n\\n        for (uint256 i; i \\u003c adminCount; i++) {\\n            _setHasVoted(adminEpoch, topic, _getAdmin(adminEpoch, i), false);\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getAdminKey(uint256 adminEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN, adminEpoch, index));\\n    }\\n\\n    function _getAdminCountKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_COUNT, adminEpoch));\\n    }\\n\\n    function _getAdminThresholdKey(uint256 adminEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_THRESHOLD, adminEpoch));\\n    }\\n\\n    function _getAdminVoteCountsKey(uint256 adminEpoch, bytes32 topic) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTE_COUNTS, adminEpoch, topic));\\n    }\\n\\n    function _getAdminVotedKey(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_ADMIN_VOTED, adminEpoch, topic, account));\\n    }\\n\\n    function _getIsAdminKey(uint256 adminEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_ADMIN, adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _adminEpoch() internal view returns (uint256) {\\n        return getUint(KEY_ADMIN_EPOCH);\\n    }\\n\\n    function _getAdmin(uint256 adminEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getAdminKey(adminEpoch, index));\\n    }\\n\\n    function _getAdminCount(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminCountKey(adminEpoch));\\n    }\\n\\n    function _getAdminThreshold(uint256 adminEpoch) internal view returns (uint256) {\\n        return getUint(_getAdminThresholdKey(adminEpoch));\\n    }\\n\\n    function _getVoteCount(uint256 adminEpoch, bytes32 topic) internal view returns (uint256) {\\n        return getUint(_getAdminVoteCountsKey(adminEpoch, topic));\\n    }\\n\\n    function _hasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account\\n    ) internal view returns (bool) {\\n        return getBool(_getAdminVotedKey(adminEpoch, topic, account));\\n    }\\n\\n    function _isAdmin(uint256 adminEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsAdminKey(adminEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setAdminEpoch(uint256 adminEpoch) internal {\\n        _setUint(KEY_ADMIN_EPOCH, adminEpoch);\\n    }\\n\\n    function _setAdmin(\\n        uint256 adminEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        _setAddress(_getAdminKey(adminEpoch, index), account);\\n    }\\n\\n    function _setAdminCount(uint256 adminEpoch, uint256 adminCount) internal {\\n        _setUint(_getAdminCountKey(adminEpoch), adminCount);\\n    }\\n\\n    function _setAdmins(\\n        uint256 adminEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 adminLength = accounts.length;\\n\\n        require(adminLength \\u003e= threshold, \\u0027INV_ADMINS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_ADMIN_THLD\\u0027);\\n\\n        _setAdminThreshold(adminEpoch, threshold);\\n        _setAdminCount(adminEpoch, adminLength);\\n\\n        for (uint256 i; i \\u003c adminLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an admin for this epoch.\\n            require(!_isAdmin(adminEpoch, account), \\u0027DUP_ADMIN\\u0027);\\n\\n            // Set this account as the i-th admin in this epoch (needed to we can clear topic votes in `onlyAdmin`).\\n            _setAdmin(adminEpoch, i, account);\\n            _setIsAdmin(adminEpoch, account, true);\\n        }\\n    }\\n\\n    function _setAdminThreshold(uint256 adminEpoch, uint256 adminThreshold) internal {\\n        _setUint(_getAdminThresholdKey(adminEpoch), adminThreshold);\\n    }\\n\\n    function _setVoteCount(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        uint256 voteCount\\n    ) internal {\\n        _setUint(_getAdminVoteCountsKey(adminEpoch, topic), voteCount);\\n    }\\n\\n    function _setHasVoted(\\n        uint256 adminEpoch,\\n        bytes32 topic,\\n        address account,\\n        bool voted\\n    ) internal {\\n        _setBool(_getAdminVotedKey(adminEpoch, topic, account), voted);\\n    }\\n\\n    function _setIsAdmin(\\n        uint256 adminEpoch,\\n        address account,\\n        bool isAdmin\\n    ) internal {\\n        _setBool(_getIsAdminKey(adminEpoch, account), isAdmin);\\n    }\\n}\\n\\n\\n// Dependency file: src/AxelarGateway.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n// import { AdminMultisigBase } from \\u0027src/AdminMultisigBase.sol\\u0027;\\n\\nabstract contract AxelarGateway is IAxelarGateway, AdminMultisigBase {\\n    /// @dev Storage slot with the address of the current factory. `keccak256(\\u0027eip1967.proxy.implementation\\u0027) - 1`.\\n    bytes32 internal constant KEY_IMPLEMENTATION =\\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\\n\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    bytes32 internal constant PREFIX_COMMAND_EXECUTED = keccak256(\\u0027command-executed\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_ADDRESS = keccak256(\\u0027token-address\\u0027);\\n    bytes32 internal constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n\\n    bytes32 internal constant SELECTOR_BURN_TOKEN = keccak256(\\u0027burnToken\\u0027);\\n    bytes32 internal constant SELECTOR_DEPLOY_TOKEN = keccak256(\\u0027deployToken\\u0027);\\n    bytes32 internal constant SELECTOR_MINT_TOKEN = keccak256(\\u0027mintToken\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OPERATORSHIP = keccak256(\\u0027transferOperatorship\\u0027);\\n    bytes32 internal constant SELECTOR_TRANSFER_OWNERSHIP = keccak256(\\u0027transferOwnership\\u0027);\\n\\n    uint8 internal constant OLD_KEY_RETENTION = 16;\\n\\n    modifier onlySelf() {\\n        require(msg.sender == address(this), \\u0027NOT_SELF\\u0027);\\n\\n        _;\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() public view override returns (bool) {\\n        return getBool(KEY_ALL_TOKENS_FROZEN);\\n    }\\n\\n    function implementation() public view override returns (address) {\\n        return getAddress(KEY_IMPLEMENTATION);\\n    }\\n\\n    function tokenAddresses(string memory symbol) public view override returns (address) {\\n        return getAddress(_getTokenAddressKey(symbol));\\n    }\\n\\n    function tokenFrozen(string memory symbol) public view override returns (bool) {\\n        return getBool(_getFreezeTokenKey(symbol));\\n    }\\n\\n    function isCommandExecuted(bytes32 commandId) public view override returns (bool) {\\n        return getBool(_getIsCommandExecutedKey(commandId));\\n    }\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), true);\\n\\n        emit TokenFrozen(symbol);\\n    }\\n\\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\\n        _setBool(_getFreezeTokenKey(symbol), false);\\n\\n        emit TokenUnfrozen(symbol);\\n    }\\n\\n    function freezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, true);\\n\\n        emit AllTokensFrozen();\\n    }\\n\\n    function unfreezeAllTokens() external override onlyAdmin {\\n        _setBool(KEY_ALL_TOKENS_FROZEN, false);\\n\\n        emit AllTokensUnfrozen();\\n    }\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external override onlyAdmin {\\n        emit Upgraded(newImplementation);\\n\\n        // AUDIT: If `newImplementation.setup` performs `selfdestruct`, it will result in the loss of _this_ implementation (thereby losing the gateway)\\n        //        if `upgrade` is entered within the context of _this_ implementation itself.\\n        (bool success, ) = newImplementation.delegatecall(\\n            abi.encodeWithSelector(IAxelarGateway.setup.selector, setupParams)\\n        );\\n        require(success, \\u0027SETUP_FAILED\\u0027);\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**********************\\\\\\n    |* Internal Functions *|\\n    \\\\**********************/\\n\\n    function _deployToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 cap\\n    ) internal {\\n        require(tokenAddresses(symbol) == address(0), \\u0027TOKEN_EXIST\\u0027);\\n\\n        bytes32 salt = keccak256(abi.encodePacked(symbol));\\n        address token = address(new BurnableMintableCappedERC20{ salt: salt }(name, symbol, decimals, cap));\\n\\n        _setTokenAddress(symbol, token);\\n\\n        emit TokenDeployed(symbol, token);\\n    }\\n\\n    function _mintToken(\\n        string memory symbol,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).mint(account, amount);\\n    }\\n\\n    function _burnToken(string memory symbol, bytes32 salt) internal {\\n        address tokenAddress = tokenAddresses(symbol);\\n        require(tokenAddress != address(0), \\u0027TOKEN_NOT_EXIST\\u0027);\\n\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n    }\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getFreezeTokenKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol));\\n    }\\n\\n    function _getTokenAddressKey(string memory symbol) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_TOKEN_ADDRESS, symbol));\\n    }\\n\\n    function _getIsCommandExecutedKey(bytes32 commandId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_COMMAND_EXECUTED, commandId));\\n    }\\n\\n    /********************\\\\\\n    |* Internal Getters *|\\n    \\\\********************/\\n\\n    function _getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /********************\\\\\\n    |* Internal Setters *|\\n    \\\\********************/\\n\\n    function _setTokenAddress(string memory symbol, address tokenAddr) internal {\\n        _setAddress(_getTokenAddressKey(symbol), tokenAddr);\\n    }\\n\\n    function _setCommandExecuted(bytes32 commandId, bool executed) internal {\\n        _setBool(_getIsCommandExecutedKey(commandId), executed);\\n    }\\n\\n    function _setImplementation(address newImplementation) internal {\\n        _setAddress(KEY_IMPLEMENTATION, newImplementation);\\n    }\\n}\\n\\n\\n// Dependency file: src/AxelarGatewayMultisig.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGatewayMultisig } from \\u0027src/interfaces/IAxelarGatewayMultisig.sol\\u0027;\\n\\n// import { ECDSA } from \\u0027src/ECDSA.sol\\u0027;\\n// import { AxelarGateway } from \\u0027src/AxelarGateway.sol\\u0027;\\n\\ncontract AxelarGatewayMultisig is IAxelarGatewayMultisig, AxelarGateway {\\n    // AUDIT: slot names should be prefixed with some standard string\\n    // AUDIT: constants should be literal and their derivation should be in comments\\n    bytes32 internal constant KEY_OWNER_EPOCH = keccak256(\\u0027owner-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_OWNER = keccak256(\\u0027owner\\u0027);\\n    bytes32 internal constant PREFIX_OWNER_COUNT = keccak256(\\u0027owner-count\\u0027);\\n    bytes32 internal constant PREFIX_OWNER_THRESHOLD = keccak256(\\u0027owner-threshold\\u0027);\\n    bytes32 internal constant PREFIX_IS_OWNER = keccak256(\\u0027is-owner\\u0027);\\n\\n    bytes32 internal constant KEY_OPERATOR_EPOCH = keccak256(\\u0027operator-epoch\\u0027);\\n\\n    bytes32 internal constant PREFIX_OPERATOR = keccak256(\\u0027operator\\u0027);\\n    bytes32 internal constant PREFIX_OPERATOR_COUNT = keccak256(\\u0027operator-count\\u0027);\\n    bytes32 internal constant PREFIX_OPERATOR_THRESHOLD = keccak256(\\u0027operator-threshold\\u0027);\\n    bytes32 internal constant PREFIX_IS_OPERATOR = keccak256(\\u0027is-operator\\u0027);\\n\\n    function _containsDuplicates(address[] memory accounts) internal pure returns (bool) {\\n        uint256 count = accounts.length;\\n\\n        for (uint256 i; i \\u003c count; ++i) {\\n            for (uint256 j = i + 1; j \\u003c count; ++j) {\\n                if (accounts[i] == accounts[j]) return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /************************\\\\\\n    |* Owners Functionality *|\\n    \\\\************************/\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getOwnerKey(uint256 ownerEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER, ownerEpoch, index));\\n    }\\n\\n    function _getOwnerCountKey(uint256 ownerEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER_COUNT, ownerEpoch));\\n    }\\n\\n    function _getOwnerThresholdKey(uint256 ownerEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OWNER_THRESHOLD, ownerEpoch));\\n    }\\n\\n    function _getIsOwnerKey(uint256 ownerEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_OWNER, ownerEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _ownerEpoch() internal view returns (uint256) {\\n        return getUint(KEY_OWNER_EPOCH);\\n    }\\n\\n    function _getOwner(uint256 ownerEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getOwnerKey(ownerEpoch, index));\\n    }\\n\\n    function _getOwnerCount(uint256 ownerEpoch) internal view returns (uint256) {\\n        return getUint(_getOwnerCountKey(ownerEpoch));\\n    }\\n\\n    function _getOwnerThreshold(uint256 ownerEpoch) internal view returns (uint256) {\\n        return getUint(_getOwnerThresholdKey(ownerEpoch));\\n    }\\n\\n    function _isOwner(uint256 ownerEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsOwnerKey(ownerEpoch, account));\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are owners in the same `ownerEpoch`, within the last `OLD_KEY_RETENTION + 1` owner epochs.\\n    function _areValidRecentOwners(address[] memory accounts) internal view returns (bool) {\\n        uint256 ownerEpoch = _ownerEpoch();\\n        uint256 recentEpochs = OLD_KEY_RETENTION + uint256(1);\\n        uint256 lowerBoundOwnerEpoch = ownerEpoch \\u003e recentEpochs ? ownerEpoch - recentEpochs : uint256(0);\\n\\n        while (ownerEpoch \\u003e lowerBoundOwnerEpoch) {\\n            if (_areValidOwnersInEpoch(ownerEpoch--, accounts)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are owners in the `ownerEpoch`.\\n    function _areValidOwnersInEpoch(uint256 ownerEpoch, address[] memory accounts) internal view returns (bool) {\\n        if (_containsDuplicates(accounts)) return false;\\n\\n        uint256 threshold = _getOwnerThreshold(ownerEpoch);\\n        uint256 validSignerCount;\\n\\n        for (uint256 i; i \\u003c accounts.length; i++) {\\n            if (_isOwner(ownerEpoch, accounts[i]) \\u0026\\u0026 ++validSignerCount \\u003e= threshold) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns the array of owners within the current `ownerEpoch`.\\n    function owners() public view override returns (address[] memory results) {\\n        uint256 ownerEpoch = _ownerEpoch();\\n        uint256 ownerCount = _getOwnerCount(ownerEpoch);\\n        results = new address[](ownerCount);\\n\\n        for (uint256 i; i \\u003c ownerCount; i++) {\\n            results[i] = _getOwner(ownerEpoch, i);\\n        }\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setOwnerEpoch(uint256 ownerEpoch) internal {\\n        _setUint(KEY_OWNER_EPOCH, ownerEpoch);\\n    }\\n\\n    function _setOwner(\\n        uint256 ownerEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n        _setAddress(_getOwnerKey(ownerEpoch, index), account);\\n    }\\n\\n    function _setOwnerCount(uint256 ownerEpoch, uint256 ownerCount) internal {\\n        _setUint(_getOwnerCountKey(ownerEpoch), ownerCount);\\n    }\\n\\n    function _setOwners(\\n        uint256 ownerEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 accountLength = accounts.length;\\n\\n        require(accountLength \\u003e= threshold, \\u0027INV_OWNERS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_OWNER_THLD\\u0027);\\n\\n        _setOwnerThreshold(ownerEpoch, threshold);\\n        _setOwnerCount(ownerEpoch, accountLength);\\n\\n        for (uint256 i; i \\u003c accountLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an owner for this ownerEpoch.\\n            require(!_isOwner(ownerEpoch, account), \\u0027DUP_OWNER\\u0027);\\n\\n            // Set this account as the i-th owner in this ownerEpoch (needed to we can get all the owners for `owners`).\\n            _setOwner(ownerEpoch, i, account);\\n            _setIsOwner(ownerEpoch, account, true);\\n        }\\n    }\\n\\n    function _setOwnerThreshold(uint256 ownerEpoch, uint256 ownerThreshold) internal {\\n        _setUint(_getOwnerThresholdKey(ownerEpoch), ownerThreshold);\\n    }\\n\\n    function _setIsOwner(\\n        uint256 ownerEpoch,\\n        address account,\\n        bool isOwner\\n    ) internal {\\n        _setBool(_getIsOwnerKey(ownerEpoch, account), isOwner);\\n    }\\n\\n    /**************************\\\\\\n    |* Operator Functionality *|\\n    \\\\**************************/\\n\\n    /********************\\\\\\n    |* Pure Key Getters *|\\n    \\\\********************/\\n\\n    function _getOperatorKey(uint256 operatorEpoch, uint256 index) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR, operatorEpoch, index));\\n    }\\n\\n    function _getOperatorCountKey(uint256 operatorEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR_COUNT, operatorEpoch));\\n    }\\n\\n    function _getOperatorThresholdKey(uint256 operatorEpoch) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_OPERATOR_THRESHOLD, operatorEpoch));\\n    }\\n\\n    function _getIsOperatorKey(uint256 operatorEpoch, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(PREFIX_IS_OPERATOR, operatorEpoch, account));\\n    }\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function _operatorEpoch() internal view returns (uint256) {\\n        return getUint(KEY_OPERATOR_EPOCH);\\n    }\\n\\n    function _getOperator(uint256 operatorEpoch, uint256 index) internal view returns (address) {\\n        return getAddress(_getOperatorKey(operatorEpoch, index));\\n    }\\n\\n    function _getOperatorCount(uint256 operatorEpoch) internal view returns (uint256) {\\n        return getUint(_getOperatorCountKey(operatorEpoch));\\n    }\\n\\n    function _getOperatorThreshold(uint256 operatorEpoch) internal view returns (uint256) {\\n        return getUint(_getOperatorThresholdKey(operatorEpoch));\\n    }\\n\\n    function _isOperator(uint256 operatorEpoch, address account) internal view returns (bool) {\\n        return getBool(_getIsOperatorKey(operatorEpoch, account));\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are operator in the same `operatorEpoch`, within the last `OLD_KEY_RETENTION + 1` operator epochs.\\n    function _areValidRecentOperators(address[] memory accounts) internal view returns (bool) {\\n        uint256 operatorEpoch = _operatorEpoch();\\n        uint256 recentEpochs = OLD_KEY_RETENTION + uint256(1);\\n        uint256 lowerBoundOperatorEpoch = operatorEpoch \\u003e recentEpochs ? operatorEpoch - recentEpochs : uint256(0);\\n\\n        while (operatorEpoch \\u003e lowerBoundOperatorEpoch) {\\n            if (_areValidOperatorsInEpoch(operatorEpoch--, accounts)) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns true if a sufficient quantity of `accounts` are operator in the `operatorEpoch`.\\n    function _areValidOperatorsInEpoch(uint256 operatorEpoch, address[] memory accounts) internal view returns (bool) {\\n        if (_containsDuplicates(accounts)) return false;\\n\\n        uint256 threshold = _getOperatorThreshold(operatorEpoch);\\n        uint256 validSignerCount;\\n\\n        for (uint256 i; i \\u003c accounts.length; i++) {\\n            if (_isOperator(operatorEpoch, accounts[i]) \\u0026\\u0026 ++validSignerCount \\u003e= threshold) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @dev Returns the array of operators within the current `operatorEpoch`.\\n    function operators() public view override returns (address[] memory results) {\\n        uint256 operatorEpoch = _operatorEpoch();\\n        uint256 operatorCount = _getOperatorCount(operatorEpoch);\\n        results = new address[](operatorCount);\\n\\n        for (uint256 i; i \\u003c operatorCount; i++) {\\n            results[i] = _getOperator(operatorEpoch, i);\\n        }\\n    }\\n\\n    /***********\\\\\\n    |* Setters *|\\n    \\\\***********/\\n\\n    function _setOperatorEpoch(uint256 operatorEpoch) internal {\\n        _setUint(KEY_OPERATOR_EPOCH, operatorEpoch);\\n    }\\n\\n    function _setOperator(\\n        uint256 operatorEpoch,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        // AUDIT: Should have `require(account != address(0), \\u0027ZERO_ADDR\\u0027);` like Singlesig?\\n        _setAddress(_getOperatorKey(operatorEpoch, index), account);\\n    }\\n\\n    function _setOperatorCount(uint256 operatorEpoch, uint256 operatorCount) internal {\\n        _setUint(_getOperatorCountKey(operatorEpoch), operatorCount);\\n    }\\n\\n    function _setOperators(\\n        uint256 operatorEpoch,\\n        address[] memory accounts,\\n        uint256 threshold\\n    ) internal {\\n        uint256 accountLength = accounts.length;\\n\\n        require(accountLength \\u003e= threshold, \\u0027INV_OPERATORS\\u0027);\\n        require(threshold \\u003e uint256(0), \\u0027INV_OPERATOR_THLD\\u0027);\\n\\n        _setOperatorThreshold(operatorEpoch, threshold);\\n        _setOperatorCount(operatorEpoch, accountLength);\\n\\n        for (uint256 i; i \\u003c accountLength; i++) {\\n            address account = accounts[i];\\n\\n            // Check that the account wasn\\u0027t already set as an operator for this operatorEpoch.\\n            require(!_isOperator(operatorEpoch, account), \\u0027DUP_OPERATOR\\u0027);\\n\\n            // Set this account as the i-th operator in this operatorEpoch (needed to we can get all the operators for `operators`).\\n            _setOperator(operatorEpoch, i, account);\\n            _setIsOperator(operatorEpoch, account, true);\\n        }\\n    }\\n\\n    function _setOperatorThreshold(uint256 operatorEpoch, uint256 operatorThreshold) internal {\\n        _setUint(_getOperatorThresholdKey(operatorEpoch), operatorThreshold);\\n    }\\n\\n    function _setIsOperator(\\n        uint256 operatorEpoch,\\n        address account,\\n        bool isOperator\\n    ) internal {\\n        _setBool(_getIsOperatorKey(operatorEpoch, account), isOperator);\\n    }\\n\\n    /**********************\\\\\\n    |* Self Functionality *|\\n    \\\\**********************/\\n\\n    function deployToken(bytes calldata params) external onlySelf {\\n        (string memory name, string memory symbol, uint8 decimals, uint256 cap) = abi.decode(\\n            params,\\n            (string, string, uint8, uint256)\\n        );\\n\\n        _deployToken(name, symbol, decimals, cap);\\n    }\\n\\n    function mintToken(bytes calldata params) external onlySelf {\\n        (string memory symbol, address account, uint256 amount) = abi.decode(params, (string, address, uint256));\\n\\n        _mintToken(symbol, account, amount);\\n    }\\n\\n    function burnToken(bytes calldata params) external onlySelf {\\n        (string memory symbol, bytes32 salt) = abi.decode(params, (string, bytes32));\\n\\n        _burnToken(symbol, salt);\\n    }\\n\\n    function transferOwnership(bytes calldata params) external onlySelf {\\n        (address[] memory newOwners, uint256 newThreshold) = abi.decode(params, (address[], uint256));\\n\\n        uint256 ownerEpoch = _ownerEpoch();\\n\\n        emit OwnershipTransferred(owners(), _getOwnerThreshold(ownerEpoch), newOwners, newThreshold);\\n\\n        _setOwnerEpoch(++ownerEpoch);\\n        _setOwners(ownerEpoch, newOwners, newThreshold);\\n    }\\n\\n    function transferOperatorship(bytes calldata params) external onlySelf {\\n        (address[] memory newOperators, uint256 newThreshold) = abi.decode(params, (address[], uint256));\\n\\n        uint256 ownerEpoch = _ownerEpoch();\\n\\n        emit OperatorshipTransferred(operators(), _getOperatorThreshold(ownerEpoch), newOperators, newThreshold);\\n\\n        uint256 operatorEpoch = _operatorEpoch();\\n        _setOperatorEpoch(++operatorEpoch);\\n        _setOperators(operatorEpoch, newOperators, newThreshold);\\n    }\\n\\n    /**************************\\\\\\n    |* External Functionality *|\\n    \\\\**************************/\\n\\n    function setup(bytes calldata params) external override {\\n        // Prevent setup from being called on a non-proxy (the implementation).\\n        require(implementation() != address(0), \\u0027NOT_PROXY\\u0027);\\n\\n        (\\n            address[] memory adminAddresses,\\n            uint256 adminThreshold,\\n            address[] memory ownerAddresses,\\n            uint256 ownerThreshold,\\n            address[] memory operatorAddresses,\\n            uint256 operatorThreshold\\n        ) = abi.decode(params, (address[], uint256, address[], uint256, address[], uint256));\\n\\n        uint256 adminEpoch = _adminEpoch() + uint256(1);\\n        _setAdminEpoch(adminEpoch);\\n        _setAdmins(adminEpoch, adminAddresses, adminThreshold);\\n\\n        uint256 ownerEpoch = _ownerEpoch() + uint256(1);\\n        _setOwnerEpoch(ownerEpoch);\\n        _setOwners(ownerEpoch, ownerAddresses, ownerThreshold);\\n\\n        uint256 operatorEpoch = _operatorEpoch() + uint256(1);\\n        _setOperatorEpoch(operatorEpoch);\\n        _setOperators(operatorEpoch, operatorAddresses, operatorThreshold);\\n\\n        emit OwnershipTransferred(new address[](uint256(0)), uint256(0), ownerAddresses, ownerThreshold);\\n        emit OperatorshipTransferred(new address[](uint256(0)), uint256(0), operatorAddresses, operatorThreshold);\\n    }\\n\\n    function execute(bytes calldata input) external override {\\n        (bytes memory data, bytes[] memory signatures) = abi.decode(input, (bytes, bytes[]));\\n\\n        _execute(data, signatures);\\n    }\\n\\n    function _execute(bytes memory data, bytes[] memory signatures) internal {\\n        uint256 signatureCount = signatures.length;\\n\\n        address[] memory signers = new address[](signatureCount);\\n\\n        for (uint256 i; i \\u003c signatureCount; i++) {\\n            signers[i] = ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(data)), signatures[i]);\\n        }\\n\\n        (uint256 chainId, bytes32[] memory commandIds, string[] memory commands, bytes[] memory params) = abi.decode(\\n            data,\\n            (uint256, bytes32[], string[], bytes[])\\n        );\\n\\n        require(chainId == _getChainID(), \\u0027INV_CHAIN\\u0027);\\n\\n        uint256 commandsLength = commandIds.length;\\n\\n        require(commandsLength == commands.length \\u0026\\u0026 commandsLength == params.length, \\u0027INV_CMDS\\u0027);\\n\\n        bool areValidCurrentOwners = _areValidOwnersInEpoch(_ownerEpoch(), signers);\\n        bool areValidRecentOwners = areValidCurrentOwners || _areValidRecentOwners(signers);\\n        bool areValidRecentOperators = _areValidRecentOperators(signers);\\n\\n        for (uint256 i; i \\u003c commandsLength; i++) {\\n            bytes32 commandId = commandIds[i];\\n\\n            if (isCommandExecuted(commandId)) continue; /* Ignore if duplicate commandId received */\\n\\n            bytes4 commandSelector;\\n            bytes32 commandHash = keccak256(abi.encodePacked(commands[i]));\\n\\n            if (commandHash == SELECTOR_DEPLOY_TOKEN) {\\n                if (!areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.deployToken.selector;\\n            } else if (commandHash == SELECTOR_MINT_TOKEN) {\\n                if (!areValidRecentOperators \\u0026\\u0026 !areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.mintToken.selector;\\n            } else if (commandHash == SELECTOR_BURN_TOKEN) {\\n                if (!areValidRecentOperators \\u0026\\u0026 !areValidRecentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.burnToken.selector;\\n            } else if (commandHash == SELECTOR_TRANSFER_OWNERSHIP) {\\n                if (!areValidCurrentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.transferOwnership.selector;\\n            } else if (commandHash == SELECTOR_TRANSFER_OPERATORSHIP) {\\n                if (!areValidCurrentOwners) continue;\\n\\n                commandSelector = AxelarGatewayMultisig.transferOperatorship.selector;\\n            } else {\\n                continue; /* Ignore if unknown command received */\\n            }\\n\\n            // Prevent a re-entrancy from executing this command before it can be marked as successful.\\n            _setCommandExecuted(commandId, true);\\n            (bool success, ) = address(this).call(abi.encodeWithSelector(commandSelector, params[i]));\\n            _setCommandExecuted(commandId, success);\\n\\n            if (success) {\\n                emit Executed(commandId);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// Root file: src/AxelarGatewayProxyMultisig.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\n// import { AxelarGatewayProxy } from \\u0027src/AxelarGatewayProxy.sol\\u0027;\\n// import { AxelarGatewayMultisig } from \\u0027src/AxelarGatewayMultisig.sol\\u0027;\\n\\ncontract AxelarGatewayProxyMultisig is AxelarGatewayProxy {\\n    constructor(bytes memory params) {\\n        // AUDIT: constructor contains entire AxelarGatewayMultisig bytecode. Consider passing in an AxelarGatewayMultisig address.\\n        address gateway = address(new AxelarGatewayMultisig());\\n\\n        _setAddress(KEY_IMPLEMENTATION, gateway);\\n\\n        (bool success, ) = gateway.delegatecall(abi.encodeWithSelector(IAxelarGateway.setup.selector, params));\\n        require(success, \\u0027SETUP_FAILED\\u0027);\\n    }\\n\\n    function setup(bytes calldata params) external {}\\n}\\n\"},\"BurnableMintableCappedERC20.sol\":{\"content\":\"// Dependency file: src/interfaces/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: src/ERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// Dependency file: src/Ownable.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n// Dependency file: src/Burner.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n\\ncontract Burner {\\n    constructor(address tokenAddress, bytes32 salt) {\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\\n\\n// Dependency file: src/EternalStorage.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Root file: src/BurnableMintableCappedERC20.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { ERC20 } from \\u0027src/ERC20.sol\\u0027;\\n// import { Ownable } from \\u0027src/Ownable.sol\\u0027;\\n// import { Burner } from \\u0027src/Burner.sol\\u0027;\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract BurnableMintableCappedERC20 is ERC20, Ownable {\\n    uint256 public cap;\\n\\n    bytes32 private constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n    bytes32 private constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    event Frozen(address indexed owner);\\n    event Unfrozen(address indexed owner);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 capacity\\n    ) ERC20(name, symbol, decimals) Ownable() {\\n        cap = capacity;\\n    }\\n\\n    function depositAddress(bytes32 salt) public view returns (address) {\\n        // This would be easier, cheaper, simpler, and result in  globally consistent deposit addresses for any salt (all chains, all tokens).\\n        // return address(uint160(uint256(keccak256(abi.encodePacked(bytes32(0x000000000000000000000000000000000000000000000000000000000000dead), salt)))));\\n\\n        /* Convert a hash which is bytes32 to an address which is 20-byte long\\n        according to https://docs.soliditylang.org/en/v0.8.1/control-structures.html?highlight=create2#salted-contract-creations-create2 */\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                owner,\\n                                salt,\\n                                keccak256(abi.encodePacked(type(Burner).creationCode, abi.encode(address(this)), salt))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        uint256 capacity = cap;\\n        require(capacity == 0 || totalSupply + amount \\u003c= capacity, \\u0027CAP_EXCEEDED\\u0027);\\n\\n        _mint(account, amount);\\n    }\\n\\n    function burn(bytes32 salt) public onlyOwner {\\n        address account = depositAddress(salt);\\n        _burn(account, balanceOf[account]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), \\u0027IS_FROZEN\\u0027);\\n        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), \\u0027IS_FROZEN\\u0027);\\n    }\\n}\\n\"},\"Burner.sol\":{\"content\":\"// Dependency file: src/interfaces/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: src/ERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// Dependency file: src/Ownable.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\n// Dependency file: src/EternalStorage.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\\n\\n// Dependency file: src/BurnableMintableCappedERC20.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { ERC20 } from \\u0027src/ERC20.sol\\u0027;\\n// import { Ownable } from \\u0027src/Ownable.sol\\u0027;\\n// import { Burner } from \\u0027src/Burner.sol\\u0027;\\n// import { EternalStorage } from \\u0027src/EternalStorage.sol\\u0027;\\n\\ncontract BurnableMintableCappedERC20 is ERC20, Ownable {\\n    uint256 public cap;\\n\\n    bytes32 private constant PREFIX_TOKEN_FROZEN = keccak256(\\u0027token-frozen\\u0027);\\n    bytes32 private constant KEY_ALL_TOKENS_FROZEN = keccak256(\\u0027all-tokens-frozen\\u0027);\\n\\n    event Frozen(address indexed owner);\\n    event Unfrozen(address indexed owner);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        uint256 capacity\\n    ) ERC20(name, symbol, decimals) Ownable() {\\n        cap = capacity;\\n    }\\n\\n    function depositAddress(bytes32 salt) public view returns (address) {\\n        // This would be easier, cheaper, simpler, and result in  globally consistent deposit addresses for any salt (all chains, all tokens).\\n        // return address(uint160(uint256(keccak256(abi.encodePacked(bytes32(0x000000000000000000000000000000000000000000000000000000000000dead), salt)))));\\n\\n        /* Convert a hash which is bytes32 to an address which is 20-byte long\\n        according to https://docs.soliditylang.org/en/v0.8.1/control-structures.html?highlight=create2#salted-contract-creations-create2 */\\n        return\\n            address(\\n                uint160(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                owner,\\n                                salt,\\n                                keccak256(abi.encodePacked(type(Burner).creationCode, abi.encode(address(this)), salt))\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        uint256 capacity = cap;\\n        require(capacity == 0 || totalSupply + amount \\u003c= capacity, \\u0027CAP_EXCEEDED\\u0027);\\n\\n        _mint(account, amount);\\n    }\\n\\n    function burn(bytes32 salt) public onlyOwner {\\n        address account = depositAddress(salt);\\n        _burn(account, balanceOf[account]);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal view override {\\n        require(!EternalStorage(owner).getBool(KEY_ALL_TOKENS_FROZEN), \\u0027IS_FROZEN\\u0027);\\n        require(!EternalStorage(owner).getBool(keccak256(abi.encodePacked(PREFIX_TOKEN_FROZEN, symbol))), \\u0027IS_FROZEN\\u0027);\\n    }\\n}\\n\\n\\n// Root file: src/Burner.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { BurnableMintableCappedERC20 } from \\u0027src/BurnableMintableCappedERC20.sol\\u0027;\\n\\ncontract Burner {\\n    constructor(address tokenAddress, bytes32 salt) {\\n        BurnableMintableCappedERC20(tokenAddress).burn(salt);\\n\\n        selfdestruct(payable(address(0)));\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// Root file: src/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// Root file: src/ECDSA.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address signer) {\\n        // Check the signature length\\n        require(signature.length == 65, \\u0027INV_LEN\\u0027);\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\u0027INV_S\\u0027);\\n\\n        require(v == 27 || v == 28, \\u0027INV_V\\u0027);\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        require((signer = ecrecover(hash, v, r, s)) != address(0), \\u0027INV_SIG\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\u0027\\\\x19Ethereum Signed Message:\\\\n32\\u0027, hash));\\n    }\\n}\\n\"},\"ERC20.sol\":{\"content\":\"// Dependency file: src/interfaces/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// Dependency file: src/Context.sol\\n\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Root file: src/ERC20.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IERC20 } from \\u0027src/interfaces/IERC20.sol\\u0027;\\n\\n// import { Context } from \\u0027src/Context.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) public override balanceOf;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public override allowance;\\n\\n    uint256 public override totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol}, and {decimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(recipient != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        balanceOf[sender] -= amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] -= amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\u0027ZERO_ADDR\\u0027);\\n        require(spender != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"},\"EternalStorage.sol\":{\"content\":\"// Root file: src/EternalStorage.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @title EternalStorage\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\n */\\ncontract EternalStorage {\\n    mapping(bytes32 =\\u003e uint256) private _uintStorage;\\n    mapping(bytes32 =\\u003e string) private _stringStorage;\\n    mapping(bytes32 =\\u003e address) private _addressStorage;\\n    mapping(bytes32 =\\u003e bytes) private _bytesStorage;\\n    mapping(bytes32 =\\u003e bool) private _boolStorage;\\n    mapping(bytes32 =\\u003e int256) private _intStorage;\\n\\n    // *** Getter Methods ***\\n    function getUint(bytes32 key) public view returns (uint256) {\\n        return _uintStorage[key];\\n    }\\n\\n    function getString(bytes32 key) public view returns (string memory) {\\n        return _stringStorage[key];\\n    }\\n\\n    function getAddress(bytes32 key) public view returns (address) {\\n        return _addressStorage[key];\\n    }\\n\\n    function getBytes(bytes32 key) public view returns (bytes memory) {\\n        return _bytesStorage[key];\\n    }\\n\\n    function getBool(bytes32 key) public view returns (bool) {\\n        return _boolStorage[key];\\n    }\\n\\n    function getInt(bytes32 key) public view returns (int256) {\\n        return _intStorage[key];\\n    }\\n\\n    // *** Setter Methods ***\\n    function _setUint(bytes32 key, uint256 value) internal {\\n        _uintStorage[key] = value;\\n    }\\n\\n    function _setString(bytes32 key, string memory value) internal {\\n        _stringStorage[key] = value;\\n    }\\n\\n    function _setAddress(bytes32 key, address value) internal {\\n        _addressStorage[key] = value;\\n    }\\n\\n    function _setBytes(bytes32 key, bytes memory value) internal {\\n        _bytesStorage[key] = value;\\n    }\\n\\n    function _setBool(bytes32 key, bool value) internal {\\n        _boolStorage[key] = value;\\n    }\\n\\n    function _setInt(bytes32 key, int256 value) internal {\\n        _intStorage[key] = value;\\n    }\\n\\n    // *** Delete Methods ***\\n    function _deleteUint(bytes32 key) internal {\\n        delete _uintStorage[key];\\n    }\\n\\n    function _deleteString(bytes32 key) internal {\\n        delete _stringStorage[key];\\n    }\\n\\n    function _deleteAddress(bytes32 key) internal {\\n        delete _addressStorage[key];\\n    }\\n\\n    function _deleteBytes(bytes32 key) internal {\\n        delete _bytesStorage[key];\\n    }\\n\\n    function _deleteBool(bytes32 key) internal {\\n        delete _boolStorage[key];\\n    }\\n\\n    function _deleteInt(bytes32 key) internal {\\n        delete _intStorage[key];\\n    }\\n}\\n\"},\"IAxelarGateway.sol\":{\"content\":\"// Root file: src/interfaces/IAxelarGateway.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event TokenFrozen(string indexed symbol);\\n\\n    event TokenUnfrozen(string indexed symbol);\\n\\n    event AllTokensFrozen();\\n\\n    event AllTokensUnfrozen();\\n\\n    event AccountBlacklisted(address indexed account);\\n\\n    event AccountWhitelisted(address indexed account);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external;\\n\\n    function unfreezeToken(string memory symbol) external;\\n\\n    function freezeAllTokens() external;\\n\\n    function unfreezeAllTokens() external;\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\"},\"IAxelarGatewayMultisig.sol\":{\"content\":\"// Dependency file: src/interfaces/IAxelarGateway.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event TokenFrozen(string indexed symbol);\\n\\n    event TokenUnfrozen(string indexed symbol);\\n\\n    event AllTokensFrozen();\\n\\n    event AllTokensUnfrozen();\\n\\n    event AccountBlacklisted(address indexed account);\\n\\n    event AccountWhitelisted(address indexed account);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function freezeToken(string memory symbol) external;\\n\\n    function unfreezeToken(string memory symbol) external;\\n\\n    function freezeAllTokens() external;\\n\\n    function unfreezeAllTokens() external;\\n\\n    function upgrade(address newImplementation, bytes calldata setupParams) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\\n\\n// Root file: src/interfaces/IAxelarGatewayMultisig.sol\\n\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n// import { IAxelarGateway } from \\u0027src/interfaces/IAxelarGateway.sol\\u0027;\\n\\ninterface IAxelarGatewayMultisig is IAxelarGateway {\\n\\n    event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);\\n\\n    event OperatorshipTransferred(address[] preOperators, uint256 prevThreshold, address[] newOperators, uint256 newThreshold);\\n\\n    function owners() external view returns (address[] memory);\\n\\n    function operators() external view returns (address[] memory);\\n\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// Root file: src/interfaces/IERC20.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// Root file: src/Ownable.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\u0027NOT_OWNER\\u0027);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\u0027ZERO_ADDR\\u0027);\\n\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AxelarGatewayProxyMultisig", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000080000000000000000000000003f5876a2b06e54949ab106651ab6694d0289b2b40000000000000000000000009256fd872118ed3a97754b0fb42c15015d17e0cc0000000000000000000000005c8ef9ca7b43c93ac4a146bef77fafbc7d3e69b70000000000000000000000001486157d505c7f7e546ad00e3e2eee25bf665c9b0000000000000000000000002ec991b5c0b742abd9d2ea31fe6c14a85e91c821000000000000000000000000f505462a29e36e26f25ef0175ca1ecba09cc118f000000000000000000000000027c1882b975e2cd771ae068b0389fa38b9dda7300000000000000000000000030932ac1f0477fbd63e4c5be1928f367a58a45a100000000000000000000000000000000000000000000000000000000000000050000000000000000000000004e6d1f2af1061c64c436ef66c6739858ce3ea7f10000000000000000000000007108f5ea564b753fc4ad4264122074fdce02e9c60000000000000000000000001f4c59ff5e07fc61d6f174825a1f6d268457c5ca0000000000000000000000004348e31b87e9060735db50a915524c18f85b99280000000000000000000000002c72e12746f40a92f6ffe6ac8c5f7021db310cf00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000cc1c64638b433a782cf1d13f5d728e68118441f100000000000000000000000018942917a942c5ed4ee9104d2eeaba78705a94fe000000000000000000000000d6e82fdb8a9d7b6fcb1573bcb9d51d9e14b573ff000000000000000000000000503541872e348b279ac54baa73f10e8c1fe4b4e1000000000000000000000000a24563df1210396d218899fd91303e004f5002d3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x99b5fa03a5ea4315725c43346e55a6a6fbd94098", "SwarmSource": "ipfs://650a3d16decebe4547c4596d6c58eb39fc086a5e2785d73373e140c33d3203ab"}