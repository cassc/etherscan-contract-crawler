{"SourceCode": "// File: contracts\\interfaces\\TokenInterfaceV5.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface TokenInterfaceV5{\r\n    function burn(address, uint256) external;\r\n    function mint(address, uint256) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function hasRole(bytes32, address) external view returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\NftInterfaceV5.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface NftInterfaceV5{\r\n    function balanceOf(address) external view returns (uint);\r\n    function ownerOf(uint) external view returns (address);\r\n    function transferFrom(address, address, uint) external;\r\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\GNSStakingV6_2.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ncontract GNSStakingV6_2 {\r\n\r\n    // Contracts & Addresses\r\n    address public govFund;\r\n\r\n    TokenInterfaceV5 public immutable token; // GNS\r\n    TokenInterfaceV5 public immutable dai;\r\n\r\n    NftInterfaceV5[5] public nfts;\r\n\r\n    // Pool state\r\n    uint public accDaiPerToken;\r\n    uint public tokenBalance;\r\n\r\n    // Pool parameters\r\n    uint[5] public boostsP;\r\n    uint public maxNftsStaked;\r\n\r\n    // Pool stats\r\n    uint public totalRewardsDistributedDai; // 1e18\r\n\r\n    // Mappings\r\n    mapping(address => User) public users;\r\n    mapping(address => mapping(uint => StakedNft)) public userNfts;\r\n\r\n    // Structs\r\n    struct StakedNft{\r\n        uint nftId;\r\n        uint nftType;\r\n    }\r\n    struct User{\r\n        uint stakedTokens;        // 1e18\r\n        uint debtDai;             // 1e18\r\n        uint stakedNftsCount;\r\n        uint totalBoostTokens;    // 1e18\r\n        uint harvestedRewardsDai; // 1e18\r\n    }\r\n\r\n    // Events\r\n    event GovFundUpdated(address value);\r\n    event BoostsUpdated(uint[5] boosts);\r\n    event MaxNftsStakedUpdated(uint value);\r\n\r\n    event DaiDistributed(uint amount);\r\n\r\n    event DaiHarvested(\r\n        address indexed user,\r\n        uint amount\r\n    );\r\n\r\n    event TokensStaked(\r\n        address indexed user,\r\n        uint amount\r\n    );\r\n    event TokensUnstaked(\r\n        address indexed user,\r\n        uint amount\r\n    );\r\n\r\n    event NftStaked(\r\n        address indexed user,\r\n        uint indexed nftType,\r\n        uint nftId\r\n    );\r\n    event NftUnstaked(\r\n        address indexed user,\r\n        uint indexed nftType,\r\n        uint nftId\r\n    );\r\n\r\n    constructor(\r\n        address _govFund, \r\n        TokenInterfaceV5 _token,\r\n        TokenInterfaceV5 _dai,\r\n        NftInterfaceV5[5] memory _nfts,\r\n        uint[5] memory _boostsP,\r\n        uint _maxNftsStaked\r\n    ){\r\n        require(_govFund != address(0)\r\n            && address(_token) != address(0)\r\n            && address(_dai) != address(0)\r\n            && address(_nfts[4]) != address(0), \"WRONG_PARAMS\");\r\n\r\n        checkBoostsP(_boostsP);\r\n\r\n        govFund = _govFund;\r\n        token = _token;\r\n        dai = _dai;\r\n        nfts = _nfts;\r\n\r\n        boostsP = _boostsP;\r\n        maxNftsStaked = _maxNftsStaked;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier onlyGov(){\r\n        require(msg.sender == govFund, \"GOV_ONLY\");\r\n        _;\r\n    }\r\n    modifier notContract(){\r\n        require(tx.origin == msg.sender, \"CONTRACT\");\r\n        _;\r\n    }\r\n\r\n    // Manage addresses\r\n    function setGovFund(address value) external onlyGov{\r\n        require(value != address(0), \"ADDRESS_0\");\r\n\r\n        govFund = value;\r\n\r\n        emit GovFundUpdated(value);\r\n    }\r\n\r\n    // Manage parameters\r\n    function checkBoostsP(uint[5] memory value) public pure{\r\n        require(value[0] < value[1] && value[1] < value[2]\r\n            && value[2] < value[3] && value[3] < value[4],\r\n            \"WRONG_VALUES\");\r\n    }\r\n    function setBoostsP(uint[5] memory value) external onlyGov{\r\n        checkBoostsP(value);\r\n        \r\n        boostsP = value;\r\n\r\n        emit BoostsUpdated(value);\r\n    }\r\n    function setMaxNftsStaked(uint value) external onlyGov{\r\n        maxNftsStaked = value;\r\n\r\n        emit MaxNftsStakedUpdated(value);\r\n    }\r\n\r\n    // Distribute rewards\r\n    function distributeRewardDai(uint amount) external{\r\n        dai.transferFrom(msg.sender, address(this), amount);\r\n\r\n        if(tokenBalance > 0){\r\n            accDaiPerToken += amount * 1e18 / tokenBalance;\r\n            totalRewardsDistributedDai += amount;\r\n        }\r\n\r\n        emit DaiDistributed(amount);\r\n    }\r\n\r\n    // Compute user boosts\r\n    function setBoosts() private{\r\n        User storage u = users[msg.sender];\r\n\r\n        u.totalBoostTokens = 0;\r\n\r\n        for(uint i = 0; i < u.stakedNftsCount; i++){\r\n            u.totalBoostTokens += u.stakedTokens \r\n                * boostsP[userNfts[msg.sender][i].nftType - 1] / 100;\r\n        }\r\n\r\n        u.debtDai = (u.stakedTokens + u.totalBoostTokens) * accDaiPerToken / 1e18;\r\n    }\r\n\r\n    // Rewards to be harvested\r\n    function pendingRewardDai() view public returns(uint){\r\n        User storage u = users[msg.sender];\r\n\r\n        return (u.stakedTokens + u.totalBoostTokens)\r\n            * accDaiPerToken / 1e18 - u.debtDai;\r\n    }\r\n\r\n    // Harvest rewards\r\n    function harvest() public{\r\n        uint pendingDai = pendingRewardDai();\r\n\r\n        User storage u = users[msg.sender];\r\n        u.debtDai = (u.stakedTokens + u.totalBoostTokens) * accDaiPerToken / 1e18;\r\n        u.harvestedRewardsDai += pendingDai;\r\n\r\n        dai.transfer(msg.sender, pendingDai);\r\n\r\n        emit DaiHarvested(msg.sender, pendingDai);\r\n    }\r\n\r\n    // Stake tokens\r\n    function stakeTokens(uint amount) external{\r\n        User storage u = users[msg.sender];\r\n        \r\n        token.transferFrom(msg.sender, address(this), amount);\r\n\r\n        harvest();\r\n\r\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        u.stakedTokens += amount;\r\n        setBoosts();\r\n\r\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        emit TokensStaked(msg.sender, amount);\r\n    }\r\n\r\n    // Unstake tokens\r\n    function unstakeTokens(uint amount) external{\r\n        User storage u = users[msg.sender];\r\n\r\n        harvest();\r\n\r\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        u.stakedTokens -= amount;\r\n        setBoosts();\r\n\r\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        token.transfer(msg.sender, amount);\r\n\r\n        emit TokensUnstaked(msg.sender, amount);\r\n    }\r\n\r\n    // Stake NFT\r\n    // NFT types: 1, 2, 3, 4, 5\r\n    function stakeNft(uint nftType, uint nftId) external notContract{\r\n        User storage u = users[msg.sender];\r\n\r\n        require(u.stakedNftsCount < maxNftsStaked, \"MAX_NFTS_ALREADY_STAKED\");\r\n\r\n        nfts[nftType - 1].transferFrom(msg.sender, address(this), nftId);\r\n\r\n        harvest();\r\n\r\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        StakedNft storage stakedNft = userNfts[msg.sender][u.stakedNftsCount++];\r\n        stakedNft.nftType = nftType;\r\n        stakedNft.nftId = nftId;\r\n\r\n        setBoosts();\r\n\r\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        emit NftStaked(msg.sender, nftType, nftId);\r\n    }\r\n\r\n    // Unstake NFT\r\n    function unstakeNft(uint nftIndex) external{\r\n        User storage u = users[msg.sender];\r\n        StakedNft memory stakedNft = userNfts[msg.sender][nftIndex];\r\n\r\n        harvest();\r\n\r\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        userNfts[msg.sender][nftIndex] = userNfts[msg.sender][u.stakedNftsCount - 1];\r\n        delete userNfts[msg.sender][(u.stakedNftsCount--) - 1];\r\n\r\n        setBoosts();\r\n\r\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\r\n\r\n        nfts[stakedNft.nftType - 1].transferFrom(address(this), msg.sender, stakedNft.nftId);\r\n\r\n        emit NftUnstaked(msg.sender, stakedNft.nftType, stakedNft.nftId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govFund\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"contract NftInterfaceV5[5]\",\"name\":\"_nfts\",\"type\":\"address[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_boostsP\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_maxNftsStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"boosts\",\"type\":\"uint256[5]\"}],\"name\":\"BoostsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DaiDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DaiHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"GovFundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxNftsStakedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NftUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accDaiPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boostsP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"value\",\"type\":\"uint256[5]\"}],\"name\":\"checkBoostsP\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewardDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNftsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"contract NftInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"value\",\"type\":\"uint256[5]\"}],\"name\":\"setBoostsP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setGovFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNftsStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistributedDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"}],\"name\":\"unstakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedNftsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestedRewardsDai\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNSStakingV6_2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "125", "ConstructorArguments": "00000000000000000000000080fd0accc8da81b0852d2dca17b5ddab68f22253000000000000000000000000e5417af564e4bfda1c483642db720078713978960000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000f9a4c522e327935bd1f5a338c121e14e4cc1f89800000000000000000000000077cd42b925e1a82f41d852d6be727cfc88fddbbc0000000000000000000000003378ad81d09de23725ee9b9270635c97ed60192100000000000000000000000002e2c5825c1a3b69c0417706dbe1327c2af3e6c20000000000000000000000002d266a94469d05c9e06d52a4d0d9c23b157767c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a441be662a51d86c8096accb72a5d4722cc533eaca7bf4ae1c7110220f49bfb3"}