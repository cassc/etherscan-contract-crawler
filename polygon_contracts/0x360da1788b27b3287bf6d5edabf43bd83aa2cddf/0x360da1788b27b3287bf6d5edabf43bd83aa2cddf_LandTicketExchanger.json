{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.18 <0.9.0;\r\n\r\n\r\n//import \"../utils/Context.sol\";\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n//import \"../../utils/introspection/IERC165.sol\";\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n//import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n//import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n//import \"./Common/IMintable.sol\";\r\n//--------------------------------------------\r\n// Mintable interface\r\n//--------------------------------------------\r\ninterface IMintable {\r\n    //----------------\r\n    // write\r\n    //----------------\r\n    function mintByMinter( uint256 mintBlockId, address to, uint256 mintIdFrom, uint256 mintIdTo ) external;\r\n}\r\n\r\n\r\n//import \"./Common/IT2WebERC721.sol\";\r\ninterface IT2WebERC721 {\r\n  function setBaseURI(string memory baseTokenURI) external;\r\n\r\n  function mint(address to) external returns (uint256);\r\n\r\n  function burn(uint256 tokenId) external;\r\n\r\n  function maxSupply() external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n//------------------------------------------------------------\r\n// LandTicketExchanger\r\n//------------------------------------------------------------\r\ncontract LandTicketExchanger is Ownable, ReentrancyGuard {\r\n    //-------------------\r\n    // constant\r\n    //-------------------\r\n    address constant public LAND_ADDRESS = 0x3196EC0a2434bb8c5F84b44f7c0EeAEe0F9A99b4;\r\n    address constant public TICKET_ADDRESS_1 = 0x6D273702659bA1b520aAE8397FB1442388BBEdF6;\r\n    address constant public TICKET_ADDRESS_2 = 0x184dabdB583Fcf3Dec0ec6805B415067E94d1F27;\r\n\r\n    //-------------------\r\n    // constant\r\n    //-------------------\r\n    uint256 constant private LAND_TYPE_MAX = 10;\r\n    uint256 constant private TICKET_PER_LAND_TYPE = 2;\r\n    uint256 constant private TICKET_ID_FROM = 1;\r\n\r\n    uint256[LAND_TYPE_MAX] private ARR_BLOCK_ID = [110,111,112,113,114,115,116,117,118,119];\r\n    uint256 constant private LAND_ID_OFS = 1;\r\n    uint256 constant private LAND_ID_STEP = 100;\r\n\r\n    uint256 constant private INFO_SUSPENDED = 0;\r\n    uint256 constant private INFO_EXCHANGABLE_1 = 1;\r\n    uint256 constant private INFO_EXCHANGABLE_2 = 2;\r\n    uint256 constant private INFO_APPROVED_1 = 3;\r\n    uint256 constant private INFO_APPROVED_2 = 4;\r\n    uint256 constant private INFO_EXCHANGED = 5;\r\n    uint256 constant private INFO_MAX = 6;\r\n\r\n    //--------------------------------------------------------\r\n    // storage\r\n    //--------------------------------------------------------\r\n    bool private _is_suspended;\r\n    uint256[LAND_TYPE_MAX] private _arr_exchanged_of_type;\r\n    mapping( address => uint256 ) private _map_exchanged_of_user;\r\n\r\n    //--------------------------------------------------------\r\n    // constructor\r\n    //--------------------------------------------------------\r\n    constructor() Ownable() {\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // [external] isSuspended\r\n    //--------------------------------------------------------\r\n    function isSuspended() external view returns (bool){\r\n        return( _is_suspended );\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // [external/onlyOwner] setSuspended\r\n    //--------------------------------------------------------\r\n    function setSuspended( bool flag ) external onlyOwner {\r\n        _is_suspended = flag;\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // [external] get\r\n    //--------------------------------------------------------\r\n    function getExchangedOfType( uint256 landType ) external view returns (uint256) { return( _arr_exchanged_of_type[landType] ); }\r\n    function getExchangedOfUser( address target ) external view returns (uint256) { return( _map_exchanged_of_user[target] ); }\r\n\r\n    //--------------------------------------------------------\r\n    // [external] getUserInfo\r\n    //--------------------------------------------------------\r\n    function getUserInfo( address target ) external view returns (uint256[INFO_MAX] memory) {\r\n        uint256[INFO_MAX] memory arrRet;\r\n        IERC721 ierc721;\r\n\r\n        if( _is_suspended ){ arrRet[INFO_SUSPENDED] = 1; }\r\n\r\n        // ticket1\r\n        ierc721 = IERC721(TICKET_ADDRESS_1);\r\n        arrRet[INFO_EXCHANGABLE_1] = ierc721.balanceOf( target );\r\n        if( ierc721.isApprovedForAll( target, address(this) ) ){ arrRet[INFO_APPROVED_1] = 1; }\r\n\r\n        // ticket2\r\n        ierc721 = IERC721(TICKET_ADDRESS_2);\r\n        arrRet[INFO_EXCHANGABLE_2] = ierc721.balanceOf( target );\r\n        if( ierc721.isApprovedForAll( target, address(this) ) ){ arrRet[INFO_APPROVED_2] = 1; }\r\n\r\n        arrRet[INFO_EXCHANGED] = _map_exchanged_of_user[target];\r\n\r\n        return( arrRet );\r\n    }\r\n\r\n    //-----------------------------------------------------------\r\n    // [external/nonReentrant] exchange\r\n    //-----------------------------------------------------------\r\n    function exchange() external nonReentrant {\r\n        require( !_is_suspended, \"exchange: suspended\" );\r\n\r\n        _map_exchanged_of_user[msg.sender] += _exchange( TICKET_ADDRESS_1, msg.sender );\r\n        _map_exchanged_of_user[msg.sender] += _exchange( TICKET_ADDRESS_2, msg.sender );\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // [internal] _exchange\r\n    //--------------------------------------------------------\r\n    function _exchange( address smacon, address target ) internal returns (uint256) {\r\n        IERC721 ierc721 = IERC721( smacon );\r\n        if( ierc721.balanceOf( target ) <= 0 ){\r\n            return( 0 );\r\n        }\r\n\r\n        IT2WebERC721 ticket = IT2WebERC721( smacon );\r\n        IMintable land = IMintable( LAND_ADDRESS );\r\n        uint256 num = TICKET_PER_LAND_TYPE * LAND_TYPE_MAX;\r\n        uint256 exchanged;\r\n        uint256 landType;\r\n        uint256 tokenId;\r\n        uint256 mintId;\r\n        for( uint256 i=0; i<num; i++ ){\r\n            tokenId = TICKET_ID_FROM + i;\r\n            try ierc721.ownerOf( tokenId ) returns (address owner) {\r\n                if( owner == target ){\r\n                    // burn TICKET\r\n                    ticket.burn( tokenId );\r\n\r\n                    // mint LAND\r\n                    landType = i/TICKET_PER_LAND_TYPE;\r\n                    mintId = LAND_ID_OFS + LAND_ID_STEP*landType + _arr_exchanged_of_type[landType];\r\n                    land.mintByMinter( ARR_BLOCK_ID[landType], target, mintId, mintId );\r\n\r\n                    _arr_exchanged_of_type[landType]++;\r\n                    exchanged++;\r\n                }\r\n            } catch {\r\n            }\r\n        }\r\n\r\n        return( exchanged );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAND_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_ADDRESS_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_ADDRESS_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"landType\",\"type\":\"uint256\"}],\"name\":\"getExchangedOfType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getExchangedOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSuspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setSuspended\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LandTicketExchanger", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9042b3e965b92a153f0bf5fc40daa98a7f449f5848baebbb7b699d81e148f901"}