{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.1'\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/MyToken1.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\ncontract ReEntrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract Nodewaves is ERC20, ERC20Burnable, Ownable, ReEntrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    struct Nodes {\r\n        uint256 amount;\r\n        uint256 lastWithdraw;\r\n        address[] affiliate;\r\n    }\r\n\r\n    address[] public nodeArr;\r\n\r\n    mapping(address => Nodes) public nodes;\r\n    uint256 public numberOfNodes;\r\n\r\n    mapping(address => uint256) public nodeAffiliateRewards;\r\n\r\n    uint256 public maxSupply = 10e9 * 10**decimals();\r\n\r\n    uint256 decimal = 2;\r\n\r\n    uint256 public payoutTime = 1 days;\r\n\r\n    uint256 tokenForDistribuition;\r\n    uint256 tokenForSP;\r\n    uint256 tokenForNode;\r\n    uint256 tokenForPoB;\r\n    uint256 tokenForPoS;\r\n    uint256 tokenForTeam;\r\n    uint256 tokenForAdvisors;\r\n    uint256 tokenForTreasure;\r\n    uint256 tokenForP2E;\r\n    uint256 tokenForM2E;\r\n    uint256 tokenForLiquidity;\r\n    uint256 tokenForDevAndEco;\r\n\r\n    address[10] public payoutAddresses;\r\n\r\n    uint nodeTokenWithdrawed = 0; \r\n\r\n    uint256[] public percentages = [3, 25, 25, 5, 2, 3, 25, 5, 5, 15, 15];\r\n\r\n    uint256 public distributedateSP;\r\n    uint256 public distributedateNode;\r\n    uint256 public distributedatePoB;\r\n    uint256 public distributedatePoS;\r\n    uint256 public distributedateTeam;\r\n    uint256 public distributedateAdvisors;\r\n    uint256 public distributedateTreasure;\r\n    uint256 public distributedateP2E;\r\n    uint256 public distributedateM2E;\r\n    uint256 public distributedateLiquidity;\r\n    uint256 public distributedateDevAndEco;\r\n\r\n    uint256 public distributePercentage = 10;\r\n    uint256 public distributionTime = 365;\r\n\r\n    ERC20 public token;\r\n\r\n    uint256[5] public burnPakages = [1000, 2000, 3000, 4000, 5000];\r\n    uint256[5] public burnRewards = [2000, 4000, 6000, 8000, 10000];\r\n\r\n    mapping(address => uint256) public previousToken;\r\n\r\n    uint256 public daysPassed;\r\n\r\n    // Previous contract info.\r\n    mapping(address => uint256) public referral_balances;\r\n    mapping (address=>uint) public referral_balancesUSDT;\r\n    mapping(address => uint256) public token_rewards;\r\n    mapping(address => bool) public isUser;\r\n    mapping(address => uint256) public timestamp;\r\n    uint256 public buyNodePercentage = 10;\r\n    uint256[10] public f_percentages = [10, 5, 3, 2, 1, 1, 1, 1, 1, 1];\r\n    uint256 public totalUser;\r\n    uint256 public dailyReward;\r\n\r\n    address payable company;\r\n    uint256 public nodePrice= 1000*10**18;\r\n    uint256 public membershipPrice;\r\n\r\n    uint256 public nodePriceWithNws;\r\n    uint256 public membershipPriceWithNws;\r\n\r\n    ERC20 public usdt;\r\n    ERC20 public nws;\r\n\r\n    uint256 public paymentSplit = 5000;\r\n\r\n    // now using 2 decimals\r\n    uint256 public APY = 40000;\r\n    uint256 public burnAmount = 1000;\r\n    uint256 public burnAffiliatePercentage = 2500;\r\n\r\n    uint256 public poolReward = 0;\r\n    address public poolAddress;\r\n    uint256 public polRewardPercentage = 1000 ;\r\n    uint256 public development = 0;\r\n    address public developmentAddress;\r\n    uint256 public developmentPercentage = 300;\r\n    uint256 public systemOperation = 0;\r\n    address public systemOperationAddress;\r\n    uint256 public systemOperationPercentage = 200;\r\n\r\n    constructor(address _usdt) ERC20(\"Nodewaves\", \"NWS\") {\r\n        _mint(address(this), maxSupply);\r\n        company = payable(msg.sender);\r\n        token = ERC20(address(this));\r\n        usdt = ERC20(_usdt);\r\n        nws = ERC20(address(this));\r\n    }\r\n\r\n    function setNodePrice(uint256 _price) public onlyOwner{\r\n        require(msg.sender == company, \"You are not othorised\"); // set in wei\r\n        nodePrice = _price;\r\n    }\r\n\r\n    function setMembershipPrice(uint256 _price) public onlyOwner{\r\n        require(msg.sender == company, \"You are not othorised\"); // set in wei\r\n        membershipPrice = _price;\r\n    }\r\n\r\n    function setNodePriceWithNws(uint256 _price) public onlyOwner{\r\n        require(msg.sender == company, \"You are not othorised\"); // set in wei\r\n        nodePriceWithNws = _price;\r\n    }\r\n\r\n    function setMembershipPriceWithNws(uint256 _price) public onlyOwner{\r\n        require(msg.sender == company, \"You are not othorised\"); // set in wei\r\n        membershipPriceWithNws = _price;\r\n    }\r\n\r\n    function setPaymentSplit(uint _percentage) public onlyOwner{\r\n        paymentSplit = _percentage;\r\n    }\r\n\r\n    function distribute() public onlyOwner {\r\n        _distribute();\r\n    }\r\n\r\n    \r\n\r\n    function buyNode(address[10] memory _friend, uint256 _paymentType, uint _amount)\r\n        public\r\n        \r\n    {\r\n        require(_paymentType == 1 || _paymentType == 2, \"Invalid payment type\");\r\n        uint _price = _amount;\r\n        if (_paymentType == 1) {\r\n            require(_amount == nodePrice, \"Not a valid price\");\r\n            usdt.transferFrom(msg.sender, address(this), _amount);\r\n            usdt.transfer(company, (_amount * paymentSplit) / 10000);\r\n            for (uint256 i = 0; i < 10; i++) {\r\n            if (_friend[i] != address(0)) {\r\n                referral_balancesUSDT[_friend[i]] +=\r\n                    (_price * f_percentages[i]) /\r\n                    100;\r\n            }\r\n        }\r\n            \r\n        } else {\r\n            require(_amount >= nodePriceWithNws, \"Not a valid price\");\r\n\r\n            nws.transferFrom(msg.sender, address(this), _amount);\r\n            nws.transfer(company, (_amount * paymentSplit) / 10000);\r\n            for (uint256 i = 0; i < 10; i++) {\r\n            if (_friend[i] != address(0)) {\r\n                referral_balances[_friend[i]] +=\r\n                    (_price * f_percentages[i]) /\r\n                    100;\r\n            }\r\n        }\r\n        }\r\n        \r\n        isUser[msg.sender] = true;\r\n        timestamp[msg.sender] = block.timestamp;\r\n        totalUser += 1;\r\n        nodeArr.push(msg.sender);\r\n        \r\n\r\n        Nodes storage node = nodes[msg.sender];\r\n        node.affiliate = _friend;\r\n        node.lastWithdraw = block.timestamp;\r\n        node.amount = node.amount.add(1);\r\n        numberOfNodes += 1;\r\n    }\r\n\r\n    function buyMembership(address[10] memory _friends, uint256 _paymentType, uint _amount)\r\n        public\r\n        \r\n    {\r\n        require(_paymentType == 1 || _paymentType == 2, \"Invalid payment type\");\r\n        uint _price;\r\n\r\n        if (_paymentType == 1) {\r\n            require(_amount == membershipPrice, \"Not valid amount\");\r\n            usdt.transferFrom(msg.sender, address(this), membershipPrice);\r\n            usdt.transfer(company, (membershipPrice * paymentSplit) / 10000);\r\n            _price = membershipPrice;\r\n\r\n            referral_balancesUSDT[_friends[0]] += (_price * f_percentages[0]) / 100;\r\n            referral_balancesUSDT[_friends[1]] += (_price * f_percentages[1]) / 100;\r\n            referral_balancesUSDT[_friends[2]] += (_price * f_percentages[2]) / 100;\r\n            referral_balancesUSDT[_friends[3]] += (_price * f_percentages[3]) / 100;\r\n            referral_balancesUSDT[_friends[4]] += (_price * f_percentages[4]) / 100;\r\n            referral_balancesUSDT[_friends[5]] += (_price * f_percentages[5]) / 100;\r\n            referral_balancesUSDT[_friends[6]] += (_price * f_percentages[6]) / 100;\r\n            referral_balancesUSDT[_friends[7]] += (_price * f_percentages[7]) / 100;\r\n            referral_balancesUSDT[_friends[8]] += (_price * f_percentages[8]) / 100;\r\n            referral_balancesUSDT[_friends[9]] += (_price * f_percentages[9]) / 100;\r\n        } else {\r\n            require(_amount >= membershipPriceWithNws, \"Not valid amount\");\r\n\r\n            nws.transferFrom(msg.sender, address(this), _amount);\r\n            nws.transfer(\r\n                company,\r\n                (_amount * paymentSplit) / 10000\r\n            );\r\n            _price = _amount;\r\n\r\n            referral_balances[_friends[0]] += (_price * f_percentages[0]) / 100;\r\n            referral_balances[_friends[1]] += (_price * f_percentages[1]) / 100;\r\n            referral_balances[_friends[2]] += (_price * f_percentages[2]) / 100;\r\n            referral_balances[_friends[3]] += (_price * f_percentages[3]) / 100;\r\n            referral_balances[_friends[4]] += (_price * f_percentages[4]) / 100;\r\n            referral_balances[_friends[5]] += (_price * f_percentages[5]) / 100;\r\n            referral_balances[_friends[6]] += (_price * f_percentages[6]) / 100;\r\n            referral_balances[_friends[7]] += (_price * f_percentages[7]) / 100;\r\n            referral_balances[_friends[8]] += (_price * f_percentages[8]) / 100;\r\n            referral_balances[_friends[9]] += (_price * f_percentages[9]) / 100;\r\n        }\r\n\r\n        \r\n\r\n        isUser[msg.sender] = true;\r\n        timestamp[msg.sender] = block.timestamp;\r\n        totalUser += 1;\r\n        \r\n    }\r\n\r\n    function tokenTransfer(address _to) public noReentrant {\r\n        require(isUser[msg.sender] == true, \"Not a user\");\r\n\r\n        uint256 day = (dailyReward *\r\n            ((block.timestamp - timestamp[msg.sender]) / 1 days)) / totalUser;\r\n\r\n        token.transfer(_to, day * 10**token.decimals());\r\n\r\n        timestamp[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function claimWithdraw(uint _amount, uint _paymentType) public noReentrant {\r\n        require(_paymentType == 1 || _paymentType == 2, \"Invalid payment type\");\r\n        if(_paymentType == 1){\r\n            require(_amount<=referral_balancesUSDT[msg.sender], \"Not enough balance\");\r\n            referral_balancesUSDT[msg.sender]-=_amount;\r\n            \r\n            usdt.transfer(msg.sender, _amount);\r\n        }else{\r\n            require(_amount<=referral_balances[msg.sender], \"Not enough balance\");\r\n            referral_balances[msg.sender]-=_amount;\r\n            \r\n            token.transfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function setToken(address _add) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        token = ERC20(_add);\r\n        nws = ERC20(_add);\r\n\r\n    }\r\n\r\n    function setUSDT(address _usdt) public {\r\n        usdt = ERC20(_usdt);\r\n    }\r\n\r\n    function setDailyReward(uint256 _reward) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        dailyReward = _reward;\r\n    }\r\n\r\n    function setComapny(address payable _address) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        company = _address;\r\n    }\r\n\r\n    function companyWithdraw(uint256 _amount) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n\r\n        company.transfer(_amount);\r\n    }\r\n\r\n    function companyWithdrawToken(uint256 _amount) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n\r\n        token.transfer(company, _amount);\r\n    }\r\n    function companyWithdrawTokenUSDT(uint256 _amount) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n\r\n        usdt.transfer(company, _amount);\r\n    }\r\n\r\n    function addClaimReward(address _address, uint256 _amount, uint _paymentType) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        require(_paymentType == 1 || _paymentType == 2, \"Invalid payment type\");\r\n        if(_paymentType == 1){\r\n            referral_balancesUSDT[_address] = _amount;\r\n        }else{\r\n            referral_balances[_address] = _amount;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function setBuyNodePercentage(uint256 _percentage) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        buyNodePercentage = _percentage;\r\n    }\r\n\r\n    function setF_percentages(uint256 _index, uint256 _percentage) public {\r\n        require(msg.sender == company, \"You are not othorised\");\r\n        require(_index < 10, \"invalid index\");\r\n        f_percentages[_index] = _percentage;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setPoolDevAndSysAddress(\r\n        address _poolAddress,\r\n        address _developmentAddress,\r\n        address _systemOperationAddress\r\n    ) public onlyOwner {\r\n        poolAddress = _poolAddress;\r\n        developmentAddress = _developmentAddress;\r\n        systemOperationAddress = _systemOperationAddress;\r\n    }\r\n\r\n    function PoolDevAndSysWithdraw(uint256 _index) public {\r\n        if (_index == 0) {\r\n            require(poolAddress == msg.sender, \"not authorized\");\r\n            uint256 _amount = poolReward;\r\n            poolReward = 0;\r\n            tokenForPoB = tokenForPoB.sub(_amount);\r\n            token.transfer(poolAddress, _amount);\r\n        }\r\n        if (_index == 1) {\r\n            require(developmentAddress == msg.sender, \"not authorized\");\r\n            uint256 _amount = development;\r\n            development = 0;\r\n            tokenForPoB = tokenForPoB.sub(_amount);\r\n            token.transfer(developmentAddress, _amount);\r\n        }\r\n        if (_index == 2) {\r\n            require(systemOperationAddress == msg.sender, \"not authorized\");\r\n            uint256 _amount = systemOperation;\r\n            systemOperation = 0;\r\n            tokenForPoB = tokenForPoB.sub(_amount);\r\n            token.transfer(systemOperationAddress, _amount);\r\n        }\r\n    }\r\n\r\n    function setPoolRewardPercentage(uint256 _percentage) public onlyOwner {\r\n        polRewardPercentage = _percentage;\r\n    }\r\n\r\n    function setDevelopmentPercentage(uint256 _percentage) public onlyOwner {\r\n        developmentPercentage = _percentage;\r\n    }\r\n\r\n    function setSystemOperationPercentage(uint256 _percentage)\r\n        public\r\n        onlyOwner\r\n    {\r\n        systemOperationPercentage = _percentage;\r\n    }\r\n\r\n    uint256[10] public burnAfflilatePercentages = [\r\n        1000,\r\n        500,\r\n        300,\r\n        200,\r\n        100,\r\n        100,\r\n        100,\r\n        100,\r\n        100,\r\n        100\r\n    ];\r\n    struct Burn {\r\n        // burning amount\r\n        uint256 amount;\r\n        uint256 lastwithdraw;\r\n        address[10] affiliates;\r\n    }\r\n    mapping(address => Burn) public burning;\r\n    mapping(address => uint256) public burnAffiliateRewards;\r\n\r\n    function setAPY(uint256 _APY) public onlyOwner {\r\n        // 40000 = 400%\r\n        APY = _APY;\r\n    }\r\n\r\n    function setBurnAffililiatePercentage(uint256[10] memory _percentages)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i; i < 10; i++) {\r\n            burnAfflilatePercentages[i] = _percentages[i];\r\n        }\r\n    }\r\n\r\n    function setBurnAffiliateRewards(\r\n        address[] memory _affiliate,\r\n        uint256[] memory _amount\r\n    ) public onlyOwner {\r\n        for (uint256 i; i < _affiliate.length; i++) {\r\n            burnAffiliateRewards[_affiliate[i]] = _amount[i];\r\n        }\r\n    }\r\n\r\n    function burnAffiliateRwardWithdraw() public {\r\n        uint256 _amount = burnAffiliateRewards[msg.sender];\r\n        burnAffiliateRewards[msg.sender] = 0;\r\n        tokenForPoB = tokenForPoB.sub(_amount);\r\n        token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function burnWithdraw() public {\r\n        Burn storage _burning = burning[msg.sender];\r\n        uint256 _amount = _burning.amount;\r\n\r\n        require(_amount > 0, \"You don't have any burning amount\");\r\n\r\n        uint256 _totalRewards = _amount.mul(APY).div(10000);\r\n\r\n        uint256 _rewardPerdays = _totalRewards.div(distributionTime);\r\n\r\n        uint256 _days = (block.timestamp.sub(_burning.lastwithdraw)).div(\r\n            payoutTime\r\n        );\r\n\r\n        _burning.lastwithdraw = block.timestamp;\r\n\r\n        uint256 _reward = _days.mul(_rewardPerdays);\r\n\r\n        require(_reward <= tokenForPoB, \"Not enough rewards in the PoB\");\r\n\r\n        tokenForPoB = tokenForPoB.sub(_reward);\r\n\r\n        uint256 _affiliateReward = _reward.mul(burnAffiliatePercentage).div(\r\n            10_000\r\n        );\r\n\r\n        poolReward = poolReward.add(\r\n            _reward.mul(polRewardPercentage).div(10_000)\r\n        );\r\n\r\n        development = development.add(\r\n            _reward.mul(developmentPercentage).div(10_000)\r\n        );\r\n\r\n        systemOperation = systemOperation.add(\r\n            _reward.mul(systemOperationPercentage).div(10_000)\r\n        );\r\n\r\n        uint256 _burnReward = _reward.sub(_affiliateReward);\r\n\r\n        _burnReward -= _reward.mul(polRewardPercentage).div(10000);\r\n        _burnReward -= _reward.mul(developmentPercentage).div(10000);\r\n        _burnReward -= _reward.mul(systemOperationPercentage).div(10000);\r\n\r\n        token.transfer(msg.sender, _burnReward);\r\n\r\n        for (uint256 i; i < 10; i++) {\r\n            address _affiliate = _burning.affiliates[i];\r\n            if (_affiliate == address(0)) {\r\n                _affiliate = owner();\r\n            }\r\n            uint256 _affiliateAmount = _affiliateReward\r\n                .mul(burnAfflilatePercentages[i])\r\n                .div(10000);\r\n            burnAffiliateRewards[_affiliate] = burnAffiliateRewards[_affiliate]\r\n                .add(_affiliateAmount);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function burn(uint256 amount, address[10] memory _affliliates) public {\r\n        require(\r\n            amount * 10**18 == burnAmount * 10**18,\r\n            \"You need to send 1000 NWS\"\r\n        );\r\n        _burn(msg.sender, amount * 10**18); // Burning the amount of tokens.\r\n        burning[msg.sender].amount = burning[msg.sender].amount.add(\r\n            amount * 10**18\r\n        );\r\n        burning[msg.sender].lastwithdraw = block.timestamp;\r\n        burning[msg.sender].affiliates = _affliliates;\r\n    }\r\n\r\n    function _distribute() private {\r\n        daysPassed = block.timestamp;\r\n        nodeTokenWithdrawed = 0;\r\n        // setting distribution times.\r\n        distributedateSP = block.timestamp;\r\n        distributedateNode = block.timestamp;\r\n        distributedatePoB = block.timestamp;\r\n        distributedatePoS = block.timestamp;\r\n        distributedateTeam = block.timestamp;\r\n        distributedateAdvisors = block.timestamp;\r\n        distributedateTreasure = block.timestamp;\r\n        distributedateP2E = block.timestamp;\r\n        distributedateM2E = block.timestamp;\r\n        distributedateLiquidity = block.timestamp;\r\n        distributedateDevAndEco = block.timestamp;\r\n\r\n        tokenForDistribuition = (maxSupply.mul(distributePercentage)).div(100);\r\n\r\n        tokenForSP =\r\n            tokenForSP +\r\n            tokenForSP.add(\r\n                (tokenForDistribuition.mul(percentages[0])).div(10**decimal)\r\n            );\r\n        tokenForNode =\r\n            tokenForNode +\r\n            tokenForNode.add(\r\n                (tokenForDistribuition.mul(percentages[1])).div(10**decimal)\r\n            );\r\n        tokenForPoB =\r\n            tokenForPoB +\r\n            tokenForPoB.add(\r\n                (tokenForDistribuition.mul(percentages[2])).div(10**decimal)\r\n            );\r\n        tokenForPoS =\r\n            tokenForPoS +\r\n            tokenForPoS.add(\r\n                (tokenForDistribuition.mul(percentages[3])).div(10**decimal)\r\n            );\r\n        tokenForTeam =\r\n            tokenForTeam +\r\n            tokenForTeam.add(\r\n                (tokenForDistribuition.mul(percentages[4])).div(10**decimal)\r\n            );\r\n        tokenForAdvisors =\r\n            tokenForAdvisors +\r\n            tokenForAdvisors.add(\r\n                (tokenForDistribuition.mul(percentages[5])).div(10**decimal)\r\n            );\r\n        tokenForTreasure =\r\n            tokenForTreasure +\r\n            tokenForTreasure.add(\r\n                (tokenForDistribuition.mul(percentages[6])).div(10**decimal)\r\n            );\r\n        tokenForP2E =\r\n            tokenForP2E +\r\n            tokenForP2E.add(\r\n                (tokenForDistribuition.mul(percentages[7])).div(10**decimal)\r\n            );\r\n        tokenForM2E =\r\n            tokenForM2E +\r\n            tokenForM2E.add(\r\n                (tokenForDistribuition.mul(percentages[8])).div(10**decimal)\r\n            );\r\n        tokenForLiquidity =\r\n            tokenForLiquidity +\r\n            tokenForLiquidity.add(\r\n                (tokenForDistribuition.mul(percentages[9])).div(10**decimal)\r\n            );\r\n        tokenForDevAndEco =\r\n            tokenForDevAndEco +\r\n            tokenForDevAndEco.add(\r\n                (tokenForDistribuition.mul(percentages[10])).div(10**decimal)\r\n            );\r\n    }\r\n\r\n    function addNodeReward (\r\n        address[] memory _nodes,\r\n        address[][] memory _affiliate,\r\n        uint256[] memory _values,\r\n        uint256[]  memory _numberOfNodesPerPerson\r\n    ) public onlyOwner {\r\n        for (uint256 i; i < _nodes.length; i++) {\r\n                Nodes storage node = nodes[_nodes[i]];\r\n            \r\n                node.affiliate = _affiliate[i];\r\n                node.lastWithdraw = block.timestamp;\r\n                node.amount = node.amount.add(_numberOfNodesPerPerson[i]);\r\n                numberOfNodes += _numberOfNodesPerPerson[i];\r\n                previousToken[_nodes[i]] =previousToken[_nodes[i]]+ _values[i];\r\n             \r\n        }\r\n    }\r\n\r\n    function nodeReward() public view returns(uint){\r\n\r\n        uint256 _previous = previousToken[msg.sender];\r\n        return _previous;\r\n\r\n    }\r\n    \r\n    \r\n    function nodeWithdraw() public {\r\n\r\n        Nodes storage node = nodes[msg.sender];\r\n        uint256 _amount = previousToken[msg.sender];\r\n        previousToken[msg.sender] = 0;\r\n        tokenForNode -=_amount;\r\n        for (uint256 i = 0; i < node.affiliate.length; i++) {\r\n            if (node.affiliate[i] != address(0)) {\r\n                uint256 _affiliateAmount = _amount.mul(10).div(10**decimal);\r\n                nodeAffiliateRewards[node.affiliate[i]] =\r\n                    nodeAffiliateRewards[node.affiliate[i]] +\r\n                    _affiliateAmount;\r\n            }\r\n        }\r\n\r\n        token.transfer(msg.sender, _amount);\r\n\r\n        node.lastWithdraw = block.timestamp;\r\n    }\r\n\r\n    function pob() public view returns (uint256) {\r\n        return tokenForPoB;\r\n    }\r\n\r\n    function pos() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedatePoS)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForPoS.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function team() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateTeam)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForTeam.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function advisors() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateAdvisors)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForAdvisors.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function treasure() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateTreasure)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForTreasure.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function P2E() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateP2E)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForP2E.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function M2E() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateM2E)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForM2E.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function liquidity() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateLiquidity)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForLiquidity.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function devAndEco() public view returns (uint256) {\r\n        uint256 _days = (block.timestamp.sub(distributedateDevAndEco)).div(\r\n            payoutTime\r\n        );\r\n        uint256 _dayilyAmount = tokenForDevAndEco.div(distributionTime);\r\n        return _days * _dayilyAmount;\r\n    }\r\n\r\n    function sp() public view returns (uint256) {\r\n        return tokenForSP;\r\n    }\r\n\r\n    function Node() public view returns(uint256){\r\n        return tokenForNode;\r\n    }\r\n\r\n    function withdrawToken(uint256 _index) public {\r\n        if (_index == 0) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, pos());\r\n            distributedatePoS = block.timestamp;\r\n        }\r\n        if (_index == 1) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, team());\r\n            distributedateTeam = block.timestamp;\r\n        }\r\n        if (_index == 2) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, advisors());\r\n            distributedateAdvisors = block.timestamp;\r\n        }\r\n        if (_index == 3) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, treasure());\r\n            distributedateTreasure = block.timestamp;\r\n        }\r\n        if (_index == 4) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, P2E());\r\n            distributedateP2E = block.timestamp;\r\n        }\r\n        if (_index == 5) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, M2E());\r\n            distributedateM2E = block.timestamp;\r\n        }\r\n        if (_index == 6) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, liquidity());\r\n            distributedateLiquidity = block.timestamp;\r\n        }\r\n        if (_index == 7) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, devAndEco());\r\n            distributedateDevAndEco = block.timestamp;\r\n        }\r\n        if (_index == 8) {\r\n            require(\r\n                msg.sender == payoutAddresses[_index],\r\n                \"You are not allowed to withdraw\"\r\n            );\r\n\r\n            token.transfer(msg.sender, sp());\r\n            distributedateSP = block.timestamp;\r\n        }\r\n\r\n        if(_index == 9){\r\n            require(msg.sender == payoutAddresses[_index],\"You are not allowed to withdraw\");\r\n            token.transfer(msg.sender, Node());\r\n        }\r\n    }\r\n\r\n    function affiliateWithdraw() public {\r\n        uint256 _affiliateAmount = nodeAffiliateRewards[msg.sender];\r\n        require(_affiliateAmount > 0, \"You don't have any affiliate rewards\");\r\n        require(\r\n            tokenForDevAndEco >= _affiliateAmount,\r\n            \"Not enough tokens for affiliate rewards\"\r\n        );\r\n        tokenForDevAndEco = tokenForDevAndEco - _affiliateAmount;\r\n        nodeAffiliateRewards[msg.sender] = 0;\r\n        token.transfer(msg.sender, _affiliateAmount);\r\n    }\r\n\r\n    function setNodeAffiliateRewards(\r\n        address[] memory _nodeAffiliates,\r\n        uint256[] memory _nodeAffiliateRewards\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < _nodeAffiliates.length; i++) {\r\n            nodeAffiliateRewards[_nodeAffiliates[i]] =\r\n                nodeAffiliateRewards[_nodeAffiliates[i]] +\r\n                _nodeAffiliateRewards[i];\r\n        }\r\n    }\r\n\r\n    function setDistributePercentage(uint256 _value) public onlyOwner {\r\n        distributePercentage = _value;\r\n    }\r\n\r\n    function setBurnPakages(uint256 _index, uint256 _value) public onlyOwner {\r\n        burnPakages[_index] = _value;\r\n    }\r\n\r\n    function setBurnRewards(uint256 _index, uint256 _value) public onlyOwner {\r\n        burnRewards[_index] = _value;\r\n    }\r\n\r\n    function setPayoutaddress(address[10] memory _addresses) public onlyOwner {\r\n        for (uint256 i; i < _addresses.length; i++) {\r\n            payoutAddresses[i] = _addresses[i];\r\n        }\r\n    }\r\n\r\n    function setPayoutTime(uint256 _time) public onlyOwner {\r\n        payoutTime = _time;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"M2E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Node\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"P2E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"PoolDevAndSysWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"}],\"name\":\"addClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nodes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_affiliate\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_numberOfNodesPerPerson\",\"type\":\"uint256[]\"}],\"name\":\"addNodeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[10]\",\"name\":\"_affliliates\",\"type\":\"address[10]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAffiliatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnAffiliateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAffiliateRwardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnAfflilatePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnPakages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"_friends\",\"type\":\"address[10]\"},{\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"_friend\",\"type\":\"address[10]\"},{\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyNodePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"}],\"name\":\"claimWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"companyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"companyWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"companyWithdrawTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAndEco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"development\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateAdvisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateDevAndEco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateM2E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateP2E\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedatePoB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedatePoS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateSP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedateTreasure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"f_percentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipPriceWithNws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeAffiliateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodePriceWithNws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nws\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral_balancesUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_affiliate\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"setBurnAffiliateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_percentages\",\"type\":\"uint256[10]\"}],\"name\":\"setBurnAffililiatePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBurnPakages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBurnRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBuyNodePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setComapny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setDailyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setDevelopmentPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDistributePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setF_percentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMembershipPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMembershipPriceWithNws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nodeAffiliates\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nodeAffiliateRewards\",\"type\":\"uint256[]\"}],\"name\":\"setNodeAffiliateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setNodePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setNodePriceWithNws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setPaymentSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPayoutTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"_addresses\",\"type\":\"address[10]\"}],\"name\":\"setPayoutaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemOperationAddress\",\"type\":\"address\"}],\"name\":\"setPoolDevAndSysAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setPoolRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setSystemOperationPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemOperationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemOperationPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"tokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Nodewaves", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ffb3d637014488b63fb9858e279385685afc1e2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6503b97b686c77c22710e7376c55326517ab3d8e5c8bfb5a6e0c609fb0cf719c"}