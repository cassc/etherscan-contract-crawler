{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/ISmardexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.17;\\n\\ninterface ISmardexFactory {\\n    /**\\n     * @notice emitted at each SmardexPair created\\n     * @param token0 address of the token0\\n     * @param token1 address of the token1\\n     * @param pair address of the SmardexPair created\\n     * @param totalPair number of SmardexPair created so far\\n     */\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 totalPair);\\n\\n    /**\\n     * @notice emitted each time feesLP and feesPool are changed\\n     * @param feesLP new feesLP\\n     * @param feesPool new feesPool\\n     */\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\n\\n    /**\\n     * @notice emitted when the feeTo is updated\\n     * @param previousFeeTo the previous feeTo address\\n     * @param newFeeTo the new feeTo address\\n     */\\n    event FeeToUpdated(address indexed previousFeeTo, address indexed newFeeTo);\\n\\n    /**\\n     * @notice return which address fees will be transferred\\n     */\\n    function feeTo() external view returns (address);\\n\\n    /**\\n     * @notice return the address of the pair of 2 tokens\\n     */\\n    function getPair(address _tokenA, address _tokenB) external view returns (address pair_);\\n\\n    /**\\n     * @notice return the address of the pair at index\\n     * @param _index index of the pair\\n     * @return pair_ address of the pair\\n     */\\n    function allPairs(uint256 _index) external view returns (address pair_);\\n\\n    /**\\n     * @notice return the quantity of pairs\\n     * @return quantity in uint256\\n     */\\n    function allPairsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\n     * @return feesLP_ numerator of fees sent to LP at pair creation\\n     * @return feesPool_ numerator of fees sent to Pool at pair creation\\n     */\\n    function getDefaultFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\n\\n    /**\\n     * @notice create pair with 2 address\\n     * @param _tokenA address of tokenA\\n     * @param _tokenB address of tokenB\\n     * @return pair_ address of the pair created\\n     */\\n    function createPair(address _tokenA, address _tokenB) external returns (address pair_);\\n\\n    /**\\n     * @notice set the address who will receive fees, can only be call by the owner\\n     * @param _feeTo address to replace\\n     */\\n    function setFeeTo(address _feeTo) external;\\n\\n    /**\\n     * @notice set feesLP and feesPool for each new pair (onlyOwner)\\n     * @notice sum of new feesLp and feesPool must be <= FEES_MAX = 10% FEES_BASE\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\n     */\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/ISmardexMintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.17;\\n\\ninterface ISmardexMintCallback {\\n    /**\\n     * @notice callback data for mint\\n     * @param token0 address of the first token of the pair\\n     * @param token1 address of the second token of the pair\\n     * @param amount0 amount of token0 to provide\\n     * @param amount1 amount of token1 to provide\\n     * @param payer address of the payer to provide token for the mint\\n     */\\n    struct MintCallbackData {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        address payer;\\n    }\\n\\n    /**\\n     * @notice callback to implement when calling SmardexPair.mint\\n     * @param _data callback data for mint\\n     */\\n    function smardexMintCallback(MintCallbackData calldata _data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/ISmardexPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.17;\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ninterface ISmardexPair is IERC20, IERC20Permit {\\n    /**\\n     * @notice swap parameters used by function swap\\n     * @param amountCalculated return amount from getAmountIn/Out is always positive but to avoid too much cast, is int\\n     * @param fictiveReserveIn fictive reserve of the in-token of the pair\\n     * @param fictiveReserveOut fictive reserve of the out-token of the pair\\n     * @param priceAverageIn in-token ratio component of the price average\\n     * @param priceAverageOut out-token ratio component of the price average\\n     * @param token0 address of the token0\\n     * @param token1 address of the token1\\n     * @param balanceIn contract balance of the in-token\\n     * @param balanceOut contract balance of the out-token\\n     */\\n    struct SwapParams {\\n        int256 amountCalculated;\\n        uint256 fictiveReserveIn;\\n        uint256 fictiveReserveOut;\\n        uint256 priceAverageIn;\\n        uint256 priceAverageOut;\\n        address token0;\\n        address token1;\\n        uint256 balanceIn;\\n        uint256 balanceOut;\\n    }\\n\\n    /**\\n     * @notice emitted at each mint\\n     * @param sender address calling the mint function (usually the Router contract)\\n     * @param to address that receives the LP-tokens\\n     * @param amount0 amount of token0 to be added in liquidity\\n     * @param amount1 amount of token1 to be added in liquidity\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\n     */\\n    event Mint(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\n\\n    /**\\n     * @notice emitted at each burn\\n     * @param sender address calling the burn function (usually the Router contract)\\n     * @param to address that receives the tokens\\n     * @param amount0 amount of token0 to be withdrawn\\n     * @param amount1 amount of token1 to be withdrawn\\n     * @dev the amount of LP-token sent can be caught using the transfer event of the pair\\n     */\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\n\\n    /**\\n     * @notice emitted at each swap\\n     * @param sender address calling the swap function (usually the Router contract)\\n     * @param to address that receives the out-tokens\\n     * @param amount0 amount of token0 to be swapped\\n     * @param amount1 amount of token1 to be swapped\\n     * @dev one of the 2 amount is always negative, the other one is always positive. The positive one is the one that\\n     * the user send to the contract, the negative one is the one that the contract send to the user.\\n     */\\n    event Swap(address indexed sender, address indexed to, int256 amount0, int256 amount1);\\n\\n    /**\\n     * @notice emitted each time the fictive reserves are changed (mint, burn, swap)\\n     * @param reserve0 the new reserve of token0\\n     * @param reserve1 the new reserve of token1\\n     * @param fictiveReserve0 the new fictive reserve of token0\\n     * @param fictiveReserve1 the new fictive reserve of token1\\n     * @param priceAverage0 the new priceAverage of token0\\n     * @param priceAverage1 the new priceAverage of token1\\n     */\\n    event Sync(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 fictiveReserve0,\\n        uint256 fictiveReserve1,\\n        uint256 priceAverage0,\\n        uint256 priceAverage1\\n    );\\n\\n    /**\\n     * @notice emitted each time feesLP and feesPool are changed\\n     * @param feesLP new feesLP\\n     * @param feesPool new feesPool\\n     */\\n    event FeesChanged(uint256 indexed feesLP, uint256 indexed feesPool);\\n\\n    /**\\n     * @notice get the factory address\\n     * @return address of the factory\\n     */\\n    function factory() external view returns (address);\\n\\n    /**\\n     * @notice get the token0 address\\n     * @return address of the token0\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @notice get the token1 address\\n     * @return address of the token1\\n     */\\n    function token1() external view returns (address);\\n\\n    /**\\n     * @notice called once by the factory at time of deployment\\n     * @param _token0 address of token0\\n     * @param _token1 address of token1\\n     * @param _feesLP uint128 feesLP numerator\\n     * @param _feesPool uint128 feesPool numerator\\n     */\\n    function initialize(address _token0, address _token1, uint128 _feesLP, uint128 _feesPool) external;\\n\\n    /**\\n     * @notice return current Reserves of both token in the pair,\\n     *  corresponding to token balance - pending fees\\n     * @return reserve0_ current reserve of token0 - pending fee0\\n     * @return reserve1_ current reserve of token1 - pending fee1\\n     */\\n    function getReserves() external view returns (uint256 reserve0_, uint256 reserve1_);\\n\\n    /**\\n     * @notice return current fictive reserves of both token in the pair\\n     * @return fictiveReserve0_ current fictive reserve of token0\\n     * @return fictiveReserve1_ current fictive reserve of token1\\n     */\\n    function getFictiveReserves() external view returns (uint256 fictiveReserve0_, uint256 fictiveReserve1_);\\n\\n    /**\\n     * @notice return current pending fees of both token in the pair\\n     * @return fees0_ current pending fees of token0\\n     * @return fees1_ current pending fees of token1\\n     */\\n    function getFeeToAmounts() external view returns (uint256 fees0_, uint256 fees1_);\\n\\n    /**\\n     * @notice return numerators of pair fees, denominator is 1_000_000\\n     * @return feesLP_ numerator of fees sent to LP\\n     * @return feesPool_ numerator of fees sent to Pool\\n     */\\n    function getPairFees() external view returns (uint128 feesLP_, uint128 feesPool_);\\n\\n    /**\\n     * @notice return last updated price average at timestamp of both token in the pair,\\n     *  read price0Average/price1Average for current price of token0/token1\\n     * @return priceAverage0_ current price for token0\\n     * @return priceAverage1_ current price for token1\\n     * @return blockTimestampLast_ last block timestamp when price was updated\\n     */\\n    function getPriceAverage()\\n        external\\n        view\\n        returns (uint256 priceAverage0_, uint256 priceAverage1_, uint256 blockTimestampLast_);\\n\\n    /**\\n     * @notice return current price average of both token in the pair for provided currentTimeStamp\\n     *  read price0Average/price1Average for current price of token0/token1\\n     * @param _fictiveReserveIn,\\n     * @param _fictiveReserveOut,\\n     * @param _priceAverageLastTimestamp,\\n     * @param _priceAverageIn current price for token0\\n     * @param _priceAverageOut current price for token1\\n     * @param _currentTimestamp block timestamp to get price\\n     * @return priceAverageIn_ current price for token0\\n     * @return priceAverageOut_ current price for token1\\n     */\\n    function getUpdatedPriceAverage(\\n        uint256 _fictiveReserveIn,\\n        uint256 _fictiveReserveOut,\\n        uint256 _priceAverageLastTimestamp,\\n        uint256 _priceAverageIn,\\n        uint256 _priceAverageOut,\\n        uint256 _currentTimestamp\\n    ) external pure returns (uint256 priceAverageIn_, uint256 priceAverageOut_);\\n\\n    /**\\n     * @notice Mint lp tokens proportionally of added tokens in balance. Should be called from a contract\\n     * that makes safety checks like the SmardexRouter\\n     * @param _to address who will receive minted tokens\\n     * @param _amount0 amount of token0 to provide\\n     * @param _amount1 amount of token1 to provide\\n     * @return liquidity_ amount of lp tokens minted and sent to the address defined in parameter\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        address _payer\\n    ) external returns (uint256 liquidity_);\\n\\n    /**\\n     * @notice Burn lp tokens in the balance of the contract. Sends to the defined address the amount of token0 and\\n     * token1 proportionally of the amount burned. Should be called from a contract that makes safety checks like the\\n     * SmardexRouter\\n     * @param _to address who will receive tokens\\n     * @return amount0_ amount of token0 sent to the address defined in parameter\\n     * @return amount1_ amount of token0 sent to the address defined in parameter\\n     */\\n    function burn(address _to) external returns (uint256 amount0_, uint256 amount1_);\\n\\n    /**\\n     * @notice Swaps tokens. Sends to the defined address the amount of token0 and token1 defined in parameters.\\n     * Tokens to trade should be already sent in the contract.\\n     * Swap function will check if the resulted balance is correct with current reserves and reserves fictive.\\n     * Should be called from a contract that makes safety checks like the SmardexRouter\\n     * @param _to address who will receive tokens\\n     * @param _zeroForOne token0 to token1\\n     * @param _amountSpecified amount of token wanted\\n     * @param _data used for flash swap, data.length must be 0 for regular swap\\n     */\\n    function swap(\\n        address _to,\\n        bool _zeroForOne,\\n        int256 _amountSpecified,\\n        bytes calldata _data\\n    ) external returns (int256 amount0_, int256 amount1_);\\n\\n    /**\\n     * @notice set feesLP and feesPool of the pair\\n     * @notice sum of new feesLp and feesPool must be <= 100_000\\n     * @param _feesLP new numerator of fees sent to LP, must be >= 1\\n     * @param _feesPool new numerator of fees sent to Pool, could be = 0\\n     */\\n    function setFees(uint128 _feesLP, uint128 _feesPool) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/ISmardexSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.17;\\n\\ninterface ISmardexSwapCallback {\\n    /**\\n     * @notice callback data for swap from SmardexRouter\\n     * @param path path of the swap, array of token addresses tightly packed\\n     * @param payer address of the payer for the swap\\n     */\\n    struct SwapCallbackData {\\n        bytes path;\\n        address payer;\\n    }\\n\\n    /**\\n     * @notice callback data for swap\\n     * @param _amount0Delta amount of token0 for the swap (negative is incoming, positive is required to pay to pair)\\n     * @param _amount1Delta amount of token1 for the swap (negative is incoming, positive is required to pay to pair)\\n     * @param _data for Router path and payer for the swap (see router for details)\\n     */\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/SmardexLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.17;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n// interfaces\\nimport \\\"../interfaces/ISmardexPair.sol\\\";\\n\\nlibrary SmardexLibrary {\\n    /// @notice base of the FEES\\n    uint256 public constant FEES_BASE = 1_000_000;\\n\\n    /// @notice max fees of feesLP and feesPool sum, 10% FEES_BASE\\n    uint256 public constant FEES_MAX = FEES_BASE / 10;\\n\\n    /// @notice precision for approxEq, not in percent but in APPROX_PRECISION_BASE\\n    uint256 public constant APPROX_PRECISION = 1;\\n\\n    /// @notice base of the APPROX_PRECISION\\n    uint256 public constant APPROX_PRECISION_BASE = 1_000_000;\\n\\n    /// @notice number of seconds to reset priceAverage\\n    uint256 private constant MAX_BLOCK_DIFF_SECONDS = 300;\\n\\n    /// @notice parameters of getAmountIn and getAmountOut\\n    struct GetAmountParameters {\\n        uint256 amount;\\n        uint256 reserveIn;\\n        uint256 reserveOut;\\n        uint256 fictiveReserveIn;\\n        uint256 fictiveReserveOut;\\n        uint256 priceAverageIn;\\n        uint256 priceAverageOut;\\n        uint128 feesLP;\\n        uint128 feesPool;\\n    }\\n\\n    /**\\n     * @notice check if 2 numbers are approximately equal, using APPROX_PRECISION\\n     * @param _x number to compare\\n     * @param _y number to compare\\n     * @return true if numbers are approximately equal, false otherwise\\n     */\\n    function approxEq(uint256 _x, uint256 _y) internal pure returns (bool) {\\n        if (_x > _y) {\\n            return _x < (_y + (_y * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\n        } else {\\n            return _y < (_x + (_x * APPROX_PRECISION) / APPROX_PRECISION_BASE);\\n        }\\n    }\\n\\n    /**\\n     * @notice check if 2 ratio are approximately equal: _xNum _/ xDen ~= _yNum / _yDen\\n     * @param _xNum numerator of the first ratio to compare\\n     * @param _xDen denominator of the first ratio to compare\\n     * @param _yNum numerator of the second ratio to compare\\n     * @param _yDen denominator of the second ratio to compare\\n     * @return true if ratio are approximately equal, false otherwise\\n     */\\n    function ratioApproxEq(uint256 _xNum, uint256 _xDen, uint256 _yNum, uint256 _yDen) internal pure returns (bool) {\\n        return approxEq(_xNum * _yDen, _xDen * _yNum);\\n    }\\n\\n    /**\\n     * @notice update priceAverage given old timestamp, new timestamp and prices\\n     * @param _fictiveReserveIn ratio component of the new price of the in-token\\n     * @param _fictiveReserveOut ratio component of the new price of the out-token\\n     * @param _priceAverageLastTimestamp timestamp of the last priceAverage update (0, if never updated)\\n     * @param _priceAverageIn ratio component of the last priceAverage of the in-token\\n     * @param _priceAverageOut ratio component of the last priceAverage of the out-token\\n     * @param _currentTimestamp timestamp of the priceAverage to update\\n     * @return newPriceAverageIn_ ratio component of the updated priceAverage of the in-token\\n     * @return newPriceAverageOut_ ratio component of the updated priceAverage of the out-token\\n     */\\n    function getUpdatedPriceAverage(\\n        uint256 _fictiveReserveIn,\\n        uint256 _fictiveReserveOut,\\n        uint256 _priceAverageLastTimestamp,\\n        uint256 _priceAverageIn,\\n        uint256 _priceAverageOut,\\n        uint256 _currentTimestamp\\n    ) internal pure returns (uint256 newPriceAverageIn_, uint256 newPriceAverageOut_) {\\n        require(_currentTimestamp >= _priceAverageLastTimestamp, \\\"SmardexPair: INVALID_TIMESTAMP\\\");\\n\\n        // very first time\\n        if (_priceAverageLastTimestamp == 0) {\\n            newPriceAverageIn_ = _fictiveReserveIn;\\n            newPriceAverageOut_ = _fictiveReserveOut;\\n        }\\n        // another tx has been done in the same timestamp\\n        else if (_priceAverageLastTimestamp == _currentTimestamp) {\\n            newPriceAverageIn_ = _priceAverageIn;\\n            newPriceAverageOut_ = _priceAverageOut;\\n        }\\n        // need to compute new linear-average price\\n        else {\\n            // compute new price:\\n            uint256 _timeDiff = Math.min(_currentTimestamp - _priceAverageLastTimestamp, MAX_BLOCK_DIFF_SECONDS);\\n\\n            newPriceAverageIn_ = _fictiveReserveIn;\\n            newPriceAverageOut_ =\\n                (((MAX_BLOCK_DIFF_SECONDS - _timeDiff) * _priceAverageOut * newPriceAverageIn_) /\\n                    _priceAverageIn +\\n                    _timeDiff *\\n                    _fictiveReserveOut) /\\n                MAX_BLOCK_DIFF_SECONDS;\\n        }\\n    }\\n\\n    /**\\n     * @notice compute the firstTradeAmountIn so that the price reach the price Average\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return firstAmountIn_ the first amount of in-token\\n     *\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountIn\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\n     * firstAmountIn_ will be set to _amountIn\\n     */\\n    function computeFirstTradeQtyIn(GetAmountParameters memory _param) internal pure returns (uint256 firstAmountIn_) {\\n        // default value\\n        firstAmountIn_ = _param.amount;\\n\\n        // if trade is in the good direction\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\n            // pre-compute all operands\\n            uint256 _toSub = _param.fictiveReserveIn * ((FEES_BASE * 2) - (_param.feesPool * 2) - _param.feesLP);\\n            uint256 _toDiv = (FEES_BASE - _param.feesPool) * 2;\\n            uint256 _inSqrt = (((_param.fictiveReserveIn * _param.fictiveReserveOut) * 4) / _param.priceAverageOut) *\\n                _param.priceAverageIn *\\n                ((FEES_BASE - _param.feesPool - _param.feesLP) * (FEES_BASE - _param.feesPool)) +\\n                ((_param.fictiveReserveIn * _param.fictiveReserveIn) * (_param.feesLP * _param.feesLP));\\n\\n            // reverse sqrt check to only compute sqrt if really needed\\n            uint256 _inSqrtCompare = _toSub + _param.amount * _toDiv;\\n            if (_inSqrt < _inSqrtCompare * _inSqrtCompare) {\\n                firstAmountIn_ = (Math.sqrt(_inSqrt) - _toSub) / _toDiv;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice compute the firstTradeAmountOut so that the price reach the price Average\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return firstAmountOut_ the first amount of out-token\\n     *\\n     * @dev if the trade is going in the direction that the price will never reach the priceAverage, or if _amountOut\\n     * is not big enough to reach the priceAverage or if the price is already equal to the priceAverage, then\\n     * firstAmountOut_ will be set to _amountOut\\n     */\\n    function computeFirstTradeQtyOut(\\n        GetAmountParameters memory _param\\n    ) internal pure returns (uint256 firstAmountOut_) {\\n        // default value\\n        firstAmountOut_ = _param.amount;\\n        uint256 _reverseFeesTotal = FEES_BASE - _param.feesPool - _param.feesLP;\\n        // if trade is in the good direction\\n        if (_param.fictiveReserveOut * _param.priceAverageIn > _param.fictiveReserveIn * _param.priceAverageOut) {\\n            // pre-compute all operands\\n            uint256 _fictiveReserveOutPredFees = (_param.fictiveReserveIn * _param.feesLP * _param.priceAverageOut) /\\n                _param.priceAverageIn;\\n            uint256 _toAdd = ((_param.fictiveReserveOut * _reverseFeesTotal) * 2) + _fictiveReserveOutPredFees;\\n            uint256 _toDiv = _reverseFeesTotal * 2;\\n\\n            uint256 _inSqrt = (((_param.fictiveReserveOut * _fictiveReserveOutPredFees) * 4) *\\n                (_reverseFeesTotal * (FEES_BASE - _param.feesPool))) /\\n                _param.feesLP +\\n                (_fictiveReserveOutPredFees * _fictiveReserveOutPredFees);\\n\\n            // reverse sqrt check to only compute sqrt if really needed\\n            uint256 _inSqrtCompare = _toAdd - _param.amount * _toDiv;\\n            if (_inSqrt > _inSqrtCompare * _inSqrtCompare) {\\n                firstAmountOut_ = (_toAdd - Math.sqrt(_inSqrt)) / _toDiv;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice compute fictive reserves\\n     * @param _reserveIn reserve of the in-token\\n     * @param _reserveOut reserve of the out-token\\n     * @param _fictiveReserveIn fictive reserve of the in-token\\n     * @param _fictiveReserveOut fictive reserve of the out-token\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token\\n     */\\n    function computeFictiveReserves(\\n        uint256 _reserveIn,\\n        uint256 _reserveOut,\\n        uint256 _fictiveReserveIn,\\n        uint256 _fictiveReserveOut\\n    ) internal pure returns (uint256 newFictiveReserveIn_, uint256 newFictiveReserveOut_) {\\n        if (_reserveOut * _fictiveReserveIn < _reserveIn * _fictiveReserveOut) {\\n            uint256 _temp = (((_reserveOut * _reserveOut) / _fictiveReserveOut) * _fictiveReserveIn) / _reserveIn;\\n            newFictiveReserveIn_ =\\n                (_temp * _fictiveReserveIn) /\\n                _fictiveReserveOut +\\n                (_reserveOut * _fictiveReserveIn) /\\n                _fictiveReserveOut;\\n            newFictiveReserveOut_ = _reserveOut + _temp;\\n        } else {\\n            newFictiveReserveIn_ = (_fictiveReserveIn * _reserveOut) / _fictiveReserveOut + _reserveIn;\\n            newFictiveReserveOut_ = (_reserveIn * _fictiveReserveOut) / _fictiveReserveIn + _reserveOut;\\n        }\\n\\n        // div all values by 4\\n        newFictiveReserveIn_ /= 4;\\n        newFictiveReserveOut_ /= 4;\\n    }\\n\\n    /**\\n     * @notice apply k const rule using fictive reserve, when the amountIn is specified\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return amountOut_ qty of token that leaves in the contract\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\n     */\\n    function applyKConstRuleOut(\\n        GetAmountParameters memory _param\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        // k const rule\\n        uint256 _amountInWithFee = _param.amount * (FEES_BASE - _param.feesLP - _param.feesPool);\\n        uint256 _numerator = _amountInWithFee * _param.fictiveReserveOut;\\n        uint256 _denominator = _param.fictiveReserveIn * FEES_BASE + _amountInWithFee;\\n        amountOut_ = _numerator / _denominator;\\n\\n        // update new reserves and add lp-fees to pools\\n        uint256 _amountInWithFeeLp = (_amountInWithFee + (_param.amount * _param.feesLP)) / FEES_BASE;\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\n        newReserveOut_ = _param.reserveOut - amountOut_;\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - amountOut_;\\n    }\\n\\n    /**\\n     * @notice apply k const rule using fictive reserve, when the amountOut is specified\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return amountIn_ qty of token that arrives in the contract\\n     * @return newReserveIn_ new reserve of the in-token after the transaction\\n     * @return newReserveOut_ new reserve of the out-token after the transaction\\n     * @return newFictiveReserveIn_ new fictive reserve of the in-token after the transaction\\n     * @return newFictiveReserveOut_ new fictive reserve of the out-token after the transaction\\n     */\\n    function applyKConstRuleIn(\\n        GetAmountParameters memory _param\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        // k const rule\\n        uint256 _numerator = _param.fictiveReserveIn * _param.amount * FEES_BASE;\\n        uint256 _denominator = (_param.fictiveReserveOut - _param.amount) *\\n            (FEES_BASE - _param.feesPool - _param.feesLP);\\n        amountIn_ = _numerator / _denominator + 1;\\n\\n        // update new reserves\\n        uint256 _amountInWithFeeLp = (amountIn_ * (FEES_BASE - _param.feesPool)) / FEES_BASE;\\n        newReserveIn_ = _param.reserveIn + _amountInWithFeeLp;\\n        newFictiveReserveIn_ = _param.fictiveReserveIn + _amountInWithFeeLp;\\n        newReserveOut_ = _param.reserveOut - _param.amount;\\n        newFictiveReserveOut_ = _param.fictiveReserveOut - _param.amount;\\n    }\\n\\n    /**\\n     * @notice return the amount of tokens the user would get by doing a swap\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return amountOut_ The amount of token the user would receive\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountOut(\\n        GetAmountParameters memory _param\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            _param.reserveIn != 0 &&\\n                _param.reserveOut != 0 &&\\n                _param.fictiveReserveIn != 0 &&\\n                _param.fictiveReserveOut != 0,\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 _amountInWithFees = (_param.amount * (FEES_BASE - _param.feesPool - _param.feesLP)) / FEES_BASE;\\n        uint256 _firstAmountIn = computeFirstTradeQtyIn(\\n            SmardexLibrary.GetAmountParameters({\\n                amount: _amountInWithFees,\\n                reserveIn: _param.reserveIn,\\n                reserveOut: _param.reserveOut,\\n                fictiveReserveIn: _param.fictiveReserveIn,\\n                fictiveReserveOut: _param.fictiveReserveOut,\\n                priceAverageIn: _param.priceAverageIn,\\n                priceAverageOut: _param.priceAverageOut,\\n                feesLP: _param.feesLP,\\n                feesPool: _param.feesPool\\n            })\\n        );\\n\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\n        if (\\n            _firstAmountIn == _amountInWithFees &&\\n            ratioApproxEq(\\n                _param.fictiveReserveIn,\\n                _param.fictiveReserveOut,\\n                _param.priceAverageIn,\\n                _param.priceAverageOut\\n            )\\n        ) {\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\n                _param.reserveIn,\\n                _param.reserveOut,\\n                _param.fictiveReserveIn,\\n                _param.fictiveReserveOut\\n            );\\n        }\\n\\n        // avoid stack too deep\\n        {\\n            uint256 _firstAmountInNoFees = (_firstAmountIn * FEES_BASE) / (FEES_BASE - _param.feesPool - _param.feesLP);\\n            (\\n                amountOut_,\\n                newReserveIn_,\\n                newReserveOut_,\\n                newFictiveReserveIn_,\\n                newFictiveReserveOut_\\n            ) = applyKConstRuleOut(\\n                SmardexLibrary.GetAmountParameters({\\n                    amount: _firstAmountInNoFees,\\n                    reserveIn: _param.reserveIn,\\n                    reserveOut: _param.reserveOut,\\n                    fictiveReserveIn: _param.fictiveReserveIn,\\n                    fictiveReserveOut: _param.fictiveReserveOut,\\n                    priceAverageIn: _param.priceAverageIn,\\n                    priceAverageOut: _param.priceAverageOut,\\n                    feesLP: _param.feesLP,\\n                    feesPool: _param.feesPool\\n                })\\n            );\\n\\n            // update amountIn in case there is a second trade\\n            _param.amount -= _firstAmountInNoFees;\\n        }\\n\\n        // if we need a second trade\\n        if (_firstAmountIn < _amountInWithFees) {\\n            // in the second trade ALWAYS recompute fictive reserves\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\n                newReserveIn_,\\n                newReserveOut_,\\n                newFictiveReserveIn_,\\n                newFictiveReserveOut_\\n            );\\n\\n            uint256 _secondAmountOutNoFees;\\n            (\\n                _secondAmountOutNoFees,\\n                newReserveIn_,\\n                newReserveOut_,\\n                newFictiveReserveIn_,\\n                newFictiveReserveOut_\\n            ) = applyKConstRuleOut(\\n                SmardexLibrary.GetAmountParameters({\\n                    amount: _param.amount,\\n                    reserveIn: newReserveIn_,\\n                    reserveOut: newReserveOut_,\\n                    fictiveReserveIn: newFictiveReserveIn_,\\n                    fictiveReserveOut: newFictiveReserveOut_,\\n                    priceAverageIn: _param.priceAverageIn,\\n                    priceAverageOut: _param.priceAverageOut,\\n                    feesLP: _param.feesLP,\\n                    feesPool: _param.feesPool\\n                })\\n            );\\n            amountOut_ += _secondAmountOutNoFees;\\n        }\\n    }\\n\\n    /**\\n     * @notice return the amount of tokens the user should spend by doing a swap\\n     * @param _param contain all params required from struct GetAmountParameters\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountIn(\\n        GetAmountParameters memory _param\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        require(_param.amount != 0, \\\"SmarDexLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            _param.amount < _param.fictiveReserveOut &&\\n                _param.reserveIn != 0 &&\\n                _param.reserveOut != 0 &&\\n                _param.fictiveReserveIn != 0 &&\\n                _param.fictiveReserveOut != 0,\\n            \\\"SmarDexLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 _firstAmountOut = computeFirstTradeQtyOut(_param);\\n\\n        // if there is 2 trade: 1st trade mustn't re-compute fictive reserves, 2nd should\\n        if (\\n            _firstAmountOut == _param.amount &&\\n            ratioApproxEq(\\n                _param.fictiveReserveIn,\\n                _param.fictiveReserveOut,\\n                _param.priceAverageIn,\\n                _param.priceAverageOut\\n            )\\n        ) {\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = computeFictiveReserves(\\n                _param.reserveIn,\\n                _param.reserveOut,\\n                _param.fictiveReserveIn,\\n                _param.fictiveReserveOut\\n            );\\n        }\\n\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = applyKConstRuleIn(\\n            SmardexLibrary.GetAmountParameters({\\n                amount: _firstAmountOut,\\n                reserveIn: _param.reserveIn,\\n                reserveOut: _param.reserveOut,\\n                fictiveReserveIn: _param.fictiveReserveIn,\\n                fictiveReserveOut: _param.fictiveReserveOut,\\n                priceAverageIn: _param.priceAverageIn,\\n                priceAverageOut: _param.priceAverageOut,\\n                feesLP: _param.feesLP,\\n                feesPool: _param.feesPool\\n            })\\n        );\\n\\n        // if we need a second trade\\n        if (_firstAmountOut < _param.amount) {\\n            // in the second trade ALWAYS recompute fictive reserves\\n            (newFictiveReserveIn_, newFictiveReserveOut_) = computeFictiveReserves(\\n                newReserveIn_,\\n                newReserveOut_,\\n                newFictiveReserveIn_,\\n                newFictiveReserveOut_\\n            );\\n\\n            uint256 _secondAmountIn;\\n            (\\n                _secondAmountIn,\\n                newReserveIn_,\\n                newReserveOut_,\\n                newFictiveReserveIn_,\\n                newFictiveReserveOut_\\n            ) = applyKConstRuleIn(\\n                SmardexLibrary.GetAmountParameters({\\n                    amount: _param.amount - _firstAmountOut,\\n                    reserveIn: newReserveIn_,\\n                    reserveOut: newReserveOut_,\\n                    fictiveReserveIn: newFictiveReserveIn_,\\n                    fictiveReserveOut: newFictiveReserveOut_,\\n                    priceAverageIn: _param.priceAverageIn,\\n                    priceAverageOut: _param.priceAverageOut,\\n                    feesLP: _param.feesLP,\\n                    feesPool: _param.feesPool\\n                })\\n            );\\n            amountIn_ += _secondAmountIn;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.17;\\n\\n/**\\n * @title TransferHelper\\n * @notice helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\n * @custom:from Uniswap lib, adapted to version 0.8.17\\n * @custom:url https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\n */\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/interfaces/ISmardexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.17;\\n\\n// interfaces\\nimport \\\"../../core/interfaces/ISmardexSwapCallback.sol\\\";\\nimport \\\"../../core/interfaces/ISmardexMintCallback.sol\\\";\\nimport \\\"../../core/libraries/SmardexLibrary.sol\\\";\\n\\ninterface ISmardexRouter is ISmardexSwapCallback, ISmardexMintCallback {\\n    /**\\n     * @notice get the factory address\\n     * @return address of the factory\\n     */\\n    function factory() external view returns (address);\\n\\n    /**\\n     * @notice get WETH address\\n     * @return address of the WETH token (Wrapped Ether)\\n     */\\n    function WETH() external view returns (address);\\n\\n    /**\\n     * @notice Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\\n     * @param _tokenA address of the first token in the pair\\n     * @param _tokenB address of the second token in the pair\\n     * @param _amountADesired The amount of tokenA to add as liquidity\\n     * if the B/A price is <= amountBDesired/amountADesired\\n     * @param _amountBDesired The amount of tokenB to add as liquidity\\n     * if the A/B price is <= amountADesired/amountBDesired\\n     * @param _amountAMin Bounds the extent to which the B/A price can go up before the transaction reverts.\\n     * Must be <= amountADesired.\\n     * @param _amountBMin Bounds the extent to which the A/B price can go up before the transaction reverts.\\n     * Must be <= amountBDesired.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountA_ The amount of tokenA sent to the pool.\\n     * @return amountB_ The amount of tokenB sent to the pool.\\n     * @return liquidity_ The amount of liquidity tokens minted.\\n     */\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountA_, uint256 amountB_, uint256 liquidity_);\\n\\n    /**\\n     * @notice Adds liquidity to an ERC-20=WETH pool with ETH. msg.value is the amount of ETH to add as liquidity.\\n     * if the token/WETH price is <= amountTokenDesired/msg.value (WETH depreciates).\\n     * @param _token A pool token.\\n     * @param _amountTokenDesired The amount of token to add as liquidity if the WETH/token price\\n     * is <= msg.value/amountTokenDesired (token depreciates).\\n     * @param _amountTokenMin Bounds the extent to which the WETH/token price can go up before the transaction reverts.\\n     * Must be <= amountTokenDesired.\\n     * @param _amountETHMin Bounds the extent to which the token/WETH price can go up before the transaction reverts.\\n     * Must be <= msg.value.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountToken_ The amount of token sent to the pool.\\n     * @return amountETH_ The amount of ETH converted to WETH and sent to the pool.\\n     * @return liquidity_ The amount of liquidity tokens minted.\\n     */\\n    function addLiquidityETH(\\n        address _token,\\n        uint256 _amountTokenDesired,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 amountToken_, uint256 amountETH_, uint256 liquidity_);\\n\\n    /**\\n     * @notice Removes liquidity from an ERC-20=ERC-20 pool.\\n     * @param _tokenA A pool token.\\n     * @param _tokenB A pool token.\\n     * @param _liquidity The amount of liquidity tokens to remove.\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountA_ The amount of tokenA received.\\n     * @return amountB_ The amount of tokenB received.\\n     */\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\n\\n    /**\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\n     * @param _token A pool token.\\n     * @param _liquidity The amount of liquidity tokens to remove.\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountToken_ The amount of token received.\\n     * @return amountETH_ The amount of ETH received.\\n     */\\n    function removeLiquidityETH(\\n        address _token,\\n        uint256 _liquidity,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\n\\n    /**\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH.\\n     * @param _tokenA A pool token.\\n     * @param _tokenB A pool token.\\n     * @param _liquidity The amount of liquidity tokens to remove.\\n     * @param _amountAMin The minimum amount of tokenA that must be received for the transaction not to revert.\\n     * @param _amountBMin The minimum amount of tokenB that must be received for the transaction not to revert.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\n     * @param _v The v component of the permit signature.\\n     * @param _r The r component of the permit signature.\\n     * @param _s The s component of the permit signature.\\n     * @return amountA_ The amount of tokenA received.\\n     * @return amountB_ The amount of tokenB received.\\n     */\\n    function removeLiquidityWithPermit(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 amountA_, uint256 amountB_);\\n\\n    /**\\n     * @notice Removes liquidity from an ERC-20=WETH pool and receive ETH without pre-approval\\n     * @param _token A pool token.\\n     * @param _liquidity The amount of liquidity tokens to remove.\\n     * @param _amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\n     * @param _amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\n     * @param _to Recipient of the liquidity tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\n     * @param _v The v component of the permit signature.\\n     * @param _r The r component of the permit signature.\\n     * @param _s The s component of the permit signature.\\n     * @return amountToken_ The amount of token received.\\n     * @return amountETH_ The amount of ETH received.\\n     */\\n    function removeLiquidityETHWithPermit(\\n        address _token,\\n        uint256 _liquidity,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external returns (uint256 amountToken_, uint256 amountETH_);\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\n     * elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @param _amountIn The amount of input tokens to send.\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of the output tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountOut_ The output token amount.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible, along the route determined\\n     * by the path. The first element of path is the input token, the last is the output token, and any intermediate\\n     * elements represent intermediate tokens to trade through (if, for example, a direct pair does not exist).\\n     * @param _amountOut The amount of output tokens to receive.\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of the output tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountIn_ The input token amount.\\n     */\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountIn_);\\n\\n    /**\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the\\n     * path. The first element of path must be WETH, the last is the output token, and any intermediate elements\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of the output tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountOut_ The input token amount.\\n     */\\n    function swapExactETHForTokens(\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Receive an exact amount of ETH for as few input tokens as possible, along the route determined by the\\n     * path. The first element of path is the input token, the last must be WETH, and any intermediate elements\\n     * represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @param _amountOut The amount of ETH to receive.\\n     * @param _amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of ETH.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountIn_ The input token amount.\\n     */\\n    function swapTokensForExactETH(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountIn_);\\n\\n    /**\\n     * @notice Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path.\\n     * The first element of path is the input token, the last must be WETH, and any intermediate elements represent\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @param _amountIn The amount of input tokens to send.\\n     * @param _amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of ETH.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountOut_ The input token amount.\\n     */\\n    function swapExactTokensForETH(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut_);\\n\\n    /**\\n     * @notice Receive an exact amount of tokens for as little ETH as possible, along the route determined by the path.\\n     * The first element of path must be WETH, the last is the output token and any intermediate elements represent\\n     * intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * msg.value The maximum amount of ETH that can be required before the transaction reverts.\\n     * @param _amountOut The amount of tokens to receive.\\n     * @param _path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses\\n     * must exist and have liquidity.\\n     * @param _to Recipient of output tokens.\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\n     * @return amountIn_ The input token amount.\\n     */\\n    function swapETHForExactTokens(\\n        uint256 _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 amountIn_);\\n\\n    /**\\n     * @notice Given some asset amount and reserves, returns an amount of the other asset representing equivalent value.\\n     */\\n    function quote(\\n        uint256 _amountA,\\n        uint256 _fictiveReserveA,\\n        uint256 _fictiveReserveB\\n    ) external pure returns (uint256 amountB_);\\n\\n    /**\\n     * @notice return the amount of tokens the user would get by doing a swap\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\n     * @return amountOut_ The amount of token the user would receive\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountOut(\\n        SmardexLibrary.GetAmountParameters memory _param\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        );\\n\\n    /**\\n     * @notice return the amount of tokens the user should spend by doing a swap\\n     * @param _param all the parameters required to get amount from struct GetAmountParameters\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountIn(\\n        SmardexLibrary.GetAmountParameters memory _param\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        );\\n\\n    /**\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\n     *              fetching data from the pair tokenIn/tokenOut\\n     * @param _amountIn quantity of token the user want to swap (to buy)\\n     * @param _tokenIn address of the token the user want to sell\\n     * @param _tokenOut address of the token the user want to buy\\n     * @return amountOut_ The amount of token the user would receive\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountOutFromPair(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        );\\n\\n    /**\\n     * @notice return the amount of tokens the user should spend by doing a swap by directly\\n     *              fetching data from the pair tokenIn/tokenOut\\n     * @param _amountOut quantity of token the user want to swap (to sell)\\n     * @param _tokenIn address of the token the user want to sell\\n     * @param _tokenOut address of the token the user want to buy\\n     * @return amountIn_ The amount of token the user would spend to receive _amountOut\\n     * @return newReserveIn_ reserves of the selling token after the swap\\n     * @return newReserveOut_ reserves of the buying token after the swap\\n     * @return newFictiveReserveIn_ fictive reserve of the selling token after the swap\\n     * @return newFictiveReserveOut_ fictive reserve of the buying token after the swap\\n     */\\n    function getAmountInFromPair(\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.17;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n * @custom:url https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\nlibrary BytesLib {\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/Path.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\n\\n// libraries\\nimport \\\"./BytesLib.sol\\\";\\n\\n/**\\n * @title Functions for manipulating path data for multihop swaps\\n * @custom:from UniswapV3\\n * @custom:url https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\n * @custom:editor SmarDex team\\n */\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n\\n    /// @dev The offset of a single token address\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true if the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param _path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory _path) internal pure returns (uint256) {\\n        return ((_path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param _path The bytes encoded swap path\\n    /// @return tokenA_ The first token of the given pool\\n    /// @return tokenB_ The second token of the given pool\\n    function decodeFirstPool(bytes memory _path) internal pure returns (address tokenA_, address tokenB_) {\\n        tokenA_ = _path.toAddress(0);\\n        tokenB_ = _path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param _path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory _path) internal pure returns (bytes memory) {\\n        return _path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token from the buffer and returns the remainder\\n    /// @param _path The swap path\\n    /// @return The remaining token elements in the path\\n    function skipToken(bytes memory _path) internal pure returns (bytes memory) {\\n        return _path.slice(NEXT_OFFSET, _path.length - NEXT_OFFSET);\\n    }\\n\\n    /// @notice Returns the _path addresses concatenated as a packed bytes array\\n    /// @param _path The swap path\\n    /// @return encoded_ The bytes array containing the packed addresses\\n    function encodeTightlyPacked(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\n        uint256 len = _path.length;\\n        for (uint256 i; i != len; ) {\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i]));\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the _path addresses concatenated in a reversed order as a packed bytes array\\n    /// @param _path The swap path\\n    /// @return encoded_ The bytes array containing the packed addresses\\n    function encodeTightlyPackedReversed(address[] calldata _path) internal pure returns (bytes memory encoded_) {\\n        uint256 len = _path.length;\\n        for (uint256 i = len; i != 0; ) {\\n            encoded_ = bytes.concat(encoded_, abi.encodePacked(_path[i - 1]));\\n            unchecked {\\n                --i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.17;\\n\\n// libraries\\nimport \\\"./PoolHelpers.sol\\\";\\n\\n// interfaces\\nimport \\\"../../core/interfaces/ISmardexFactory.sol\\\";\\n\\nlibrary PoolAddress {\\n    /**\\n     * @notice Deterministically computes the pool address given the factory and PoolKey\\n     * @param _factory The SmarDex factory contract address\\n     * @param _tokenA The first token of the pool\\n     * @param _tokenB The second token of the pool\\n     * @return pair_ The contract address of the SmardexPair\\n     */\\n    function pairFor(address _factory, address _tokenA, address _tokenB) internal pure returns (address pair_) {\\n        (address _token0, address _token1) = PoolHelpers.sortTokens(_tokenA, _tokenB);\\n        pair_ = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            _factory,\\n                            keccak256(abi.encodePacked(_token0, _token1)),\\n                            hex\\\"33bee911475f015247aeb1eebe149d1c6d2669be54126c29d85df6b0abb4c4e9\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice make a call to the factory to determine the pair address. useful for coverage test\\n     * @param _factory The SmarDex factory contract address\\n     * @param _tokenA The first token of the pool\\n     * @param _tokenB The second token of the pool\\n     * @return pair_ The contract address of the SmardexPair\\n     */\\n    function pairForByStorage(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (address pair_) {\\n        return ISmardexFactory(_factory).getPair(_tokenA, _tokenB);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/PoolHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.8.17;\\n\\n// libraries\\nimport \\\"./PoolAddress.sol\\\";\\nimport \\\"../../core/libraries/SmardexLibrary.sol\\\";\\n\\n// interfaces\\nimport \\\"../../core/interfaces/ISmardexPair.sol\\\";\\n\\nlibrary PoolHelpers {\\n    /**\\n     * @notice sort token addresses, used to handle return values from pairs sorted in this order\\n     * @param _tokenA token to sort\\n     * @param _tokenB token to sort\\n     * @return token0_ token0 sorted\\n     * @return token1_ token1 sorted\\n     */\\n    function sortTokens(address _tokenA, address _tokenB) internal pure returns (address token0_, address token1_) {\\n        require(_tokenA != _tokenB, \\\"SmardexHelper: IDENTICAL_ADDRESSES\\\");\\n        (token0_, token1_) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n        require(token0_ != address(0), \\\"SmardexHelper: ZERO_ADDRESS\\\");\\n    }\\n\\n    /**\\n     * @notice fetches the reserves for a pair\\n     * @param _factory the factory address\\n     * @param _tokenA token to fetch reserves\\n     * @param _tokenB token to fetch reserves\\n     * @return reserveA_ reserves of tokenA in the pair tokenA/TokenB\\n     * @return reserveB_ reserves of tokenB in the pair tokenA/TokenB\\n     */\\n    function getReserves(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (uint256 reserveA_, uint256 reserveB_) {\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\n        (uint256 _reserve0, uint256 _reserve1) = ISmardexPair(PoolAddress.pairFor(_factory, _tokenA, _tokenB))\\n            .getReserves();\\n        (reserveA_, reserveB_) = _tokenA == _token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n    }\\n\\n    /**\\n     * @notice fetches the fictive reserves for a pair\\n     * @param _factory the factory address\\n     * @param _tokenA token to fetch fictive reserves\\n     * @param _tokenB token to fetch fictive reserves\\n     * @return fictiveReserveA_ fictive reserves of tokenA in the pair tokenA/TokenB\\n     * @return fictiveReserveB_ fictive reserves of tokenB in the pair tokenA/TokenB\\n     */\\n    function getFictiveReserves(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (uint256 fictiveReserveA_, uint256 fictiveReserveB_) {\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\n        (uint256 _fictiveReserve0, uint256 _fictiveReserve1) = ISmardexPair(\\n            PoolAddress.pairFor(_factory, _tokenA, _tokenB)\\n        ).getFictiveReserves();\\n        (fictiveReserveA_, fictiveReserveB_) = _tokenA == _token0\\n            ? (_fictiveReserve0, _fictiveReserve1)\\n            : (_fictiveReserve1, _fictiveReserve0);\\n    }\\n\\n    /**\\n     * @notice fetches the priceAverage for a pair\\n     * @param _factory the factory address\\n     * @param _tokenA token to fetch priceAverage\\n     * @param _tokenB token to fetch priceAverage\\n     * @return priceAverageA_ priceAverage of tokenA in the pair tokenA/TokenB\\n     * @return priceAverageB_ priceAverage of tokenB in the pair tokenA/TokenB\\n     */\\n    function getPriceAverage(\\n        address _factory,\\n        address _tokenA,\\n        address _tokenB\\n    ) internal view returns (uint256 priceAverageA_, uint256 priceAverageB_) {\\n        (address _token0, ) = sortTokens(_tokenA, _tokenB);\\n        (uint256 _priceAverage0, uint256 _priceAverage1, ) = ISmardexPair(\\n            PoolAddress.pairFor(_factory, _tokenA, _tokenB)\\n        ).getPriceAverage();\\n        (priceAverageA_, priceAverageB_) = _tokenA == _token0\\n            ? (_priceAverage0, _priceAverage1)\\n            : (_priceAverage1, _priceAverage0);\\n    }\\n\\n    /**\\n     * @notice given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     * @param _amountA amount of asset A\\n     * @param _reserveA reserve of asset A\\n     * @param _reserveB reserve of asset B\\n     * @return amountB_ equivalent amount of asset B\\n     */\\n    function quote(uint256 _amountA, uint256 _reserveA, uint256 _reserveB) internal pure returns (uint256 amountB_) {\\n        require(_amountA != 0, \\\"SmardexHelper: INSUFFICIENT_AMOUNT\\\");\\n        require(_reserveA != 0 && _reserveB != 0, \\\"SmardexHelper: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB_ = (_amountA * _reserveB) / _reserveA;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/SmardexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.17;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../core/libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/PoolAddress.sol\\\";\\nimport \\\"./libraries/Path.sol\\\";\\n\\n// interfaces\\nimport \\\"../core/interfaces/ISmardexFactory.sol\\\";\\nimport \\\"../core/interfaces/ISmardexPair.sol\\\";\\nimport \\\"./interfaces/ISmardexRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title SmardexRouter\\n * @notice Router for execution of swaps and liquidity management on SmardexPair\\n */\\ncontract SmardexRouter is ISmardexRouter {\\n    using Path for bytes;\\n    using Path for address[];\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    address public immutable factory;\\n    address public immutable WETH;\\n\\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\\n    /// can never actually be this value\\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\\n\\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"SmarDexRouter: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    /// @inheritdoc ISmardexSwapCallback\\n    function smardexSwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external override {\\n        require(_amount0Delta > 0 || _amount1Delta > 0, \\\"SmardexRouter: Callback Invalid amount\\\");\\n\\n        SwapCallbackData memory _decodedData = abi.decode(_data, (SwapCallbackData));\\n        (address _tokenIn, address _tokenOut) = _decodedData.path.decodeFirstPool();\\n\\n        // ensure that msg.sender is a pair\\n        require(msg.sender == PoolAddress.pairFor(factory, _tokenIn, _tokenOut), \\\"SmarDexRouter: INVALID_PAIR\\\");\\n\\n        (bool _isExactInput, uint256 _amountToPay) = _amount0Delta > 0\\n            ? (_tokenIn < _tokenOut, uint256(_amount0Delta))\\n            : (_tokenOut < _tokenIn, uint256(_amount1Delta));\\n\\n        if (_isExactInput) {\\n            pay(_tokenIn, _decodedData.payer, msg.sender, _amountToPay);\\n        } else if (_decodedData.path.hasMultiplePools()) {\\n            _decodedData.path = _decodedData.path.skipToken();\\n            _swapExactOut(_amountToPay, msg.sender, _decodedData);\\n        } else {\\n            amountInCached = _amountToPay;\\n            _tokenIn = _tokenOut; // swap in/out because exact output swaps are reversed\\n            pay(_tokenIn, _decodedData.payer, msg.sender, _amountToPay);\\n        }\\n    }\\n\\n    /**\\n     * @notice send tokens to a user. Handle transfer/transferFrom and WETH / ETH or any ERC20 token\\n     * @param _token The token to pay\\n     * @param _payer The entity that must pay\\n     * @param _to The entity that will receive payment\\n     * @param _value The amount to pay\\n     *\\n     * @custom:from UniV3 PeripheryPayments.sol\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\n     */\\n    function pay(address _token, address _payer, address _to, uint256 _value) internal {\\n        if (_token == WETH && address(this).balance >= _value) {\\n            // pay with WETH\\n            IWETH(WETH).deposit{ value: _value }(); // wrap only what is needed to pay\\n            IWETH(WETH).transfer(_to, _value);\\n            //refund dust eth, if any ?\\n        } else if (_payer == address(this)) {\\n            // pay with tokens already in the contract (for the exact input multihop case)\\n            TransferHelper.safeTransfer(_token, _to, _value);\\n        } else {\\n            // pull payment\\n            TransferHelper.safeTransferFrom(_token, _payer, _to, _value);\\n        }\\n    }\\n\\n    ///@inheritdoc ISmardexMintCallback\\n    function smardexMintCallback(MintCallbackData calldata _data) external override {\\n        // ensure that msg.sender is a pair\\n        require(msg.sender == PoolAddress.pairFor(factory, _data.token0, _data.token1), \\\"SmarDexRouter: INVALID_PAIR\\\");\\n        require(_data.amount0 != 0 || _data.amount1 != 0, \\\"SmardexRouter: Callback Invalid amount\\\");\\n\\n        pay(_data.token0, _data.payer, msg.sender, _data.amount0);\\n        pay(_data.token1, _data.payer, msg.sender, _data.amount1);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual override ensure(_deadline) returns (uint256 amountA_, uint256 amountB_, uint256 liquidity_) {\\n        (amountA_, amountB_) = _addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin\\n        );\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\n        bool _orderedPair = _tokenA < _tokenB;\\n        liquidity_ = ISmardexPair(_pair).mint(\\n            _to,\\n            _orderedPair ? amountA_ : amountB_,\\n            _orderedPair ? amountB_ : amountA_,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function addLiquidityETH(\\n        address _token,\\n        uint256 _amountTokenDesired,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        ensure(_deadline)\\n        returns (uint256 amountToken_, uint256 amountETH_, uint256 liquidity_)\\n    {\\n        (amountToken_, amountETH_) = _addLiquidity(\\n            _token,\\n            WETH,\\n            _amountTokenDesired,\\n            msg.value,\\n            _amountTokenMin,\\n            _amountETHMin\\n        );\\n\\n        address _pair = PoolAddress.pairFor(factory, _token, WETH);\\n        bool _orderedPair = _token < WETH;\\n\\n        liquidity_ = ISmardexPair(_pair).mint(\\n            _to,\\n            _orderedPair ? amountToken_ : amountETH_,\\n            _orderedPair ? amountETH_ : amountToken_,\\n            msg.sender\\n        );\\n\\n        // refund dust eth, if any\\n        if (msg.value > amountETH_) {\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH_);\\n        }\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public virtual override ensure(_deadline) returns (uint256 amountA_, uint256 amountB_) {\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\n        ISmardexPair(_pair).transferFrom(msg.sender, _pair, _liquidity); // send liquidity to pair\\n\\n        (uint256 _amount0, uint256 _amount1) = ISmardexPair(_pair).burn(_to);\\n        (address _token0, ) = PoolHelpers.sortTokens(_tokenA, _tokenB);\\n        (amountA_, amountB_) = _tokenA == _token0 ? (_amount0, _amount1) : (_amount1, _amount0);\\n\\n        require(amountA_ >= _amountAMin, \\\"SmarDexRouter: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB_ >= _amountBMin, \\\"SmarDexRouter: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function removeLiquidityETH(\\n        address _token,\\n        uint256 _liquidity,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline\\n    ) public virtual override ensure(_deadline) returns (uint256 amountToken_, uint256 amountETH_) {\\n        (amountToken_, amountETH_) = removeLiquidity(\\n            _token,\\n            WETH,\\n            _liquidity,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            address(this),\\n            _deadline\\n        );\\n        TransferHelper.safeTransfer(_token, _to, amountToken_);\\n        IWETH(WETH).withdraw(amountETH_);\\n        TransferHelper.safeTransferETH(_to, amountETH_);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function removeLiquidityWithPermit(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _liquidity,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external virtual override returns (uint256 amountA_, uint256 amountB_) {\\n        address _pair = PoolAddress.pairFor(factory, _tokenA, _tokenB);\\n        uint256 _value = _approveMax ? type(uint256).max : _liquidity;\\n        ISmardexPair(_pair).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\n        (amountA_, amountB_) = removeLiquidity(_tokenA, _tokenB, _liquidity, _amountAMin, _amountBMin, _to, _deadline);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function removeLiquidityETHWithPermit(\\n        address _token,\\n        uint256 _liquidity,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        address _to,\\n        uint256 _deadline,\\n        bool _approveMax,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external virtual override returns (uint256 amountToken_, uint256 amountETH_) {\\n        address _pair = PoolAddress.pairFor(factory, _token, WETH);\\n        uint256 _value = _approveMax ? type(uint256).max : _liquidity;\\n        ISmardexPair(_pair).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\n        (amountToken_, amountETH_) = removeLiquidityETH(\\n            _token,\\n            _liquidity,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) public virtual override ensure(_deadline) returns (uint256 amountOut_) {\\n        address _payer = msg.sender; // msg.sender pays for the first hop\\n\\n        bytes memory _bytesPath = _path.encodeTightlyPacked(); //could be done in the caller function\\n        while (true) {\\n            bool _hasMultiplePools = _bytesPath.hasMultiplePools();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            _amountIn = _swapExactIn(\\n                _amountIn,\\n                // for intermediate swaps, this contract custodies\\n                _hasMultiplePools ? address(this) : _to,\\n                // only the first pool in the path is necessary\\n                SwapCallbackData({ path: _bytesPath.getFirstPool(), payer: _payer })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (_hasMultiplePools) {\\n                _payer = address(this); // at this point, the caller has paid\\n                _bytesPath = _bytesPath.skipToken();\\n            } else {\\n                // amountOut of the final swap is the last amountIn captured in the loop\\n                amountOut_ = _amountIn;\\n                break;\\n            }\\n        }\\n        require(amountOut_ >= _amountOutMin, \\\"SmarDexRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) public virtual override ensure(_deadline) returns (uint256 amountIn_) {\\n        // Path needs to be reversed as to get the amountIn that we will ask from next pair hop\\n        bytes memory _reversedPath = _path.encodeTightlyPackedReversed();\\n        amountIn_ = _swapExactOut(_amountOut, _to, SwapCallbackData({ path: _reversedPath, payer: msg.sender }));\\n        // amount In is only the right one for one Hop, otherwise we need cached amountIn from callback\\n        if (_path.length > 2) amountIn_ = amountInCached;\\n        require(amountIn_ <= _amountInMax, \\\"SmarDexRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapTokensForExactETH(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual override ensure(_deadline) returns (uint256 amountIn_) {\\n        require(_path[_path.length - 1] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\n        amountIn_ = swapTokensForExactTokens(_amountOut, _amountInMax, _path, address(this), _deadline);\\n        _unwrapWETH(_amountOut, _to);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapETHForExactTokens(\\n        uint256 _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable virtual override ensure(_deadline) returns (uint256 amountIn_) {\\n        require(_path[0] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\n        amountIn_ = swapTokensForExactTokens(_amountOut, msg.value, _path, _to, _deadline);\\n\\n        // Refund unused ETH\\n        _refundETH(msg.sender);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapExactETHForTokens(\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable virtual override ensure(_deadline) returns (uint256 amountOut_) {\\n        require(_path[0] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\n        amountOut_ = swapExactTokensForTokens(msg.value, _amountOutMin, _path, _to, _deadline);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function swapExactTokensForETH(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external virtual override ensure(_deadline) returns (uint256 amountOut_) {\\n        require(_path[_path.length - 1] == WETH, \\\"SmarDexRouter: INVALID_PATH\\\");\\n        amountOut_ = swapExactTokensForTokens(_amountIn, _amountOutMin, _path, address(this), _deadline);\\n        _unwrapWETH(amountOut_, _to);\\n    }\\n\\n    /**\\n     * @notice internal function to unwrap WETH to ETH after swap\\n     * @param _amountMinimum minimum amount of WETH that the contract should have\\n     * @param _to address that will receive the ETH unwrapped\\n     *\\n     * @custom:from UniV3 PeripheryPayments.sol\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\n     */\\n    function _unwrapWETH(uint256 _amountMinimum, address _to) internal {\\n        uint256 _balanceWETH = IERC20(WETH).balanceOf(address(this));\\n        require(_balanceWETH >= _amountMinimum, \\\"Insufficient WETH\\\");\\n\\n        if (_balanceWETH != 0) {\\n            IWETH(WETH).withdraw(_balanceWETH);\\n            TransferHelper.safeTransferETH(_to, _balanceWETH);\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function to send all ETH of the contract. Do not fail if the contract does not have any ETH\\n     * @param _to address that will receive the ETH\\n     *\\n     * @custom:from UniV3 PeripheryPayments.sol\\n     * @custom:url https://github.com/Uniswap/v3-periphery/blob/v1.3.0/contracts/base/PeripheryPayments.sol\\n     */\\n    function _refundETH(address _to) private {\\n        if (address(this).balance != 0) {\\n            TransferHelper.safeTransferETH(_to, address(this).balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function to swap quantity of token to receive a determined quantity\\n     * @param _amountOut quantity to receive\\n     * @param _to address that will receive the token\\n     * @param _data SwapCallbackData data of the swap to transmit\\n     * @return amountIn_ amount of token to pay\\n     */\\n    function _swapExactOut(\\n        uint256 _amountOut,\\n        address _to,\\n        SwapCallbackData memory _data\\n    ) private returns (uint256 amountIn_) {\\n        require(_to != address(0), \\\"SmarDexRouter: INVALID_RECIPIENT\\\");\\n\\n        (address _tokenOut, address _tokenIn) = _data.path.decodeFirstPool();\\n        bool _zeroForOne = _tokenIn < _tokenOut;\\n\\n        // do the swap\\n        (int256 _amount0, int256 _amount1) = ISmardexPair(PoolAddress.pairFor(factory, _tokenIn, _tokenOut)).swap(\\n            _to,\\n            _zeroForOne,\\n            -_amountOut.toInt256(),\\n            abi.encode(_data)\\n        );\\n\\n        amountIn_ = _zeroForOne ? uint256(_amount0) : uint256(_amount1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to an ERC-20=ERC-20 pool. Receive liquidity token to materialize shares in the pool\\n     * @param _tokenA address of the first token in the pair\\n     * @param _tokenB address of the second token in the pair\\n     * @param _amountADesired The amount of tokenA to add as liquidity\\n     * if the B/A price is <= amountBDesired/amountADesired\\n     * @param _amountBDesired The amount of tokenB to add as liquidity\\n     * if the A/B price is <= amountADesired/amountBDesired\\n     * @param _amountAMin Bounds the extent to which the B/A price can go up before the transaction reverts.\\n     * Must be <= amountADesired.\\n     * @param _amountBMin Bounds the extent to which the A/B price can go up before the transaction reverts.\\n     * Must be <= amountBDesired.\\n     * @return amountA_ The amount of tokenA sent to the pool.\\n     * @return amountB_ The amount of tokenB sent to the pool.\\n     */\\n    function _addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal virtual returns (uint256 amountA_, uint256 amountB_) {\\n        // create the pair if it doesn't exist yet\\n        if (ISmardexFactory(factory).getPair(_tokenA, _tokenB) == address(0)) {\\n            ISmardexFactory(factory).createPair(_tokenA, _tokenB);\\n        }\\n        (uint256 _reserveA, uint256 _reserveB) = PoolHelpers.getReserves(factory, _tokenA, _tokenB);\\n        if (_reserveA == 0 && _reserveB == 0) {\\n            (amountA_, amountB_) = (_amountADesired, _amountBDesired);\\n        } else {\\n            uint256 _amountBOptimal = PoolHelpers.quote(_amountADesired, _reserveA, _reserveB);\\n            if (_amountBOptimal <= _amountBDesired) {\\n                require(_amountBOptimal >= _amountBMin, \\\"SmarDexRouter: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA_, amountB_) = (_amountADesired, _amountBOptimal);\\n            } else {\\n                uint256 _amountAOptimal = PoolHelpers.quote(_amountBDesired, _reserveB, _reserveA);\\n                assert(_amountAOptimal <= _amountADesired);\\n                require(_amountAOptimal >= _amountAMin, \\\"SmarDexRouter: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA_, amountB_) = (_amountAOptimal, _amountBDesired);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function to swap a determined quantity of token\\n     * @param _amountIn quantity to swap\\n     * @param _to address that will receive the token\\n     * @param _data SwapCallbackData data of the swap to transmit\\n     * @return amountOut_ amount of token that _to will receive\\n     */\\n    function _swapExactIn(\\n        uint256 _amountIn,\\n        address _to,\\n        SwapCallbackData memory _data\\n    ) internal returns (uint256 amountOut_) {\\n        // allow swapping to the router address with address 0\\n        if (_to == address(0)) {\\n            _to = address(this);\\n        }\\n\\n        (address _tokenIn, address _tokenOut) = _data.path.decodeFirstPool();\\n        bool _zeroForOne = _tokenIn < _tokenOut;\\n        (int256 _amount0, int256 _amount1) = ISmardexPair(PoolAddress.pairFor(factory, _tokenIn, _tokenOut)).swap(\\n            _to,\\n            _zeroForOne,\\n            _amountIn.toInt256(),\\n            abi.encode(_data)\\n        );\\n\\n        amountOut_ = (_zeroForOne ? -_amount1 : -_amount0).toUint256();\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function quote(\\n        uint256 _amountA,\\n        uint256 _reserveA,\\n        uint256 _reserveB\\n    ) public pure virtual override returns (uint256 amountB_) {\\n        return PoolHelpers.quote(_amountA, _reserveA, _reserveB);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function getAmountOut(\\n        SmardexLibrary.GetAmountParameters memory _param\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        /// @dev The values _priceAverageIn and _priceAverageOut are not directly fetched from the pair,\\n        ///      and therefore, they may not necessarily be up to date with the most recent data. In\\n        ///      order to yield a _amountOut that represents the most current value, it is crucial that\\n        ///      the args _priceAverageIn and _priceAverageOut reflects the latest, updated data.\\n        (amountOut_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\n            .getAmountOut(_param);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function getAmountIn(\\n        SmardexLibrary.GetAmountParameters memory _param\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\n            .getAmountIn(_param);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function getAmountOutFromPair(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountOut_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        SmardexLibrary.GetAmountParameters memory _param;\\n        _param.amount = _amountIn;\\n\\n        ISmardexPair _pair = ISmardexPair(ISmardexFactory(factory).getPair(_tokenIn, _tokenOut));\\n        require(address(_pair) != address(0), \\\"SmarDexRouter: INVALID_TOKENS\\\");\\n        uint256 _priceAverageLastTimestamp;\\n\\n        // fetch data\\n        if (_tokenIn == _pair.token0()) {\\n            (_param.reserveIn, _param.reserveOut) = _pair.getReserves();\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = _pair.getFictiveReserves();\\n            (_param.priceAverageIn, _param.priceAverageOut, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\n        } else {\\n            (_param.reserveOut, _param.reserveIn) = _pair.getReserves();\\n            (_param.fictiveReserveOut, _param.fictiveReserveIn) = _pair.getFictiveReserves();\\n            (_param.priceAverageOut, _param.priceAverageIn, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\n        }\\n\\n        // update price average\\n        (_param.priceAverageIn, _param.priceAverageOut) = _pair.getUpdatedPriceAverage(\\n            _param.fictiveReserveIn,\\n            _param.fictiveReserveOut,\\n            _priceAverageLastTimestamp,\\n            _param.priceAverageIn,\\n            _param.priceAverageOut,\\n            block.timestamp\\n        );\\n\\n        // get pair fees\\n        (_param.feesLP, _param.feesPool) = _pair.getPairFees();\\n\\n        (amountOut_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\n            .getAmountOut(_param);\\n    }\\n\\n    /// @inheritdoc ISmardexRouter\\n    function getAmountInFromPair(\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amountIn_,\\n            uint256 newReserveIn_,\\n            uint256 newReserveOut_,\\n            uint256 newFictiveReserveIn_,\\n            uint256 newFictiveReserveOut_\\n        )\\n    {\\n        SmardexLibrary.GetAmountParameters memory _param;\\n        _param.amount = _amountOut;\\n\\n        ISmardexPair _pair = ISmardexPair(ISmardexFactory(factory).getPair(_tokenIn, _tokenOut));\\n        require(address(_pair) != address(0), \\\"SmarDexRouter: INVALID_TOKENS\\\");\\n        uint256 _priceAverageLastTimestamp;\\n\\n        // fetch data\\n        if (_tokenIn == _pair.token0()) {\\n            (_param.reserveIn, _param.reserveOut) = _pair.getReserves();\\n            (_param.fictiveReserveIn, _param.fictiveReserveOut) = _pair.getFictiveReserves();\\n            (_param.priceAverageIn, _param.priceAverageOut, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\n        } else {\\n            (_param.reserveOut, _param.reserveIn) = _pair.getReserves();\\n            (_param.fictiveReserveOut, _param.fictiveReserveIn) = _pair.getFictiveReserves();\\n            (_param.priceAverageOut, _param.priceAverageIn, _priceAverageLastTimestamp) = _pair.getPriceAverage();\\n        }\\n\\n        // update price average\\n        (_param.priceAverageIn, _param.priceAverageOut) = _pair.getUpdatedPriceAverage(\\n            _param.fictiveReserveIn,\\n            _param.fictiveReserveOut,\\n            _priceAverageLastTimestamp,\\n            _param.priceAverageIn,\\n            _param.priceAverageOut,\\n            block.timestamp\\n        );\\n\\n        // get pair fees\\n        (_param.feesLP, _param.feesPool) = _pair.getPairFees();\\n\\n        (amountIn_, newReserveIn_, newReserveOut_, newFictiveReserveIn_, newFictiveReserveOut_) = SmardexLibrary\\n            .getAmountIn(_param);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"feesLP\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feesPool\",\"type\":\"uint128\"}],\"internalType\":\"struct SmardexLibrary.GetAmountParameters\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountInFromPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fictiveReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAverageOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"feesLP\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"feesPool\",\"type\":\"uint128\"}],\"internalType\":\"struct SmardexLibrary.GetAmountParameters\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOutFromPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserveOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFictiveReserveOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"internalType\":\"struct ISmardexMintCallback.MintCallbackData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"smardexMintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"smardexSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SmardexRouter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009a1e1681f6d59ca051776410465afada6384398f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}