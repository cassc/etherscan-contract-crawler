{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function mint(address _to, uint256 _value) external returns (bool);\r\n    function previousTokenContract() external view returns (address);\r\n}\r\n\r\ncontract ET20231105 {\r\n\r\n  string public name = \"Emeth Innovation\";\r\n  string public symbol = \"EMETH\";\r\n  uint256 public decimals = 18;\r\n  uint256 public totalSupply = 0;\r\n  address public previousTokenContract;\r\n  bool public paused = false;\r\n  bool public isFinal = false;\r\n  \r\n  mapping(address => bool) public owners;\r\n  mapping(address => bool) public minters;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  modifier onlyOwner() {\r\n    require(owners[msg.sender], \"EmethToken: no owner role\");\r\n    _;\r\n  }\r\n  modifier onlyMinter() {\r\n    require(minters[msg.sender] || msg.sender == previousTokenContract, \"EmethToken: no minter role\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _previousTokenContract) {\r\n    balances[msg.sender] = totalSupply;\r\n    owners[msg.sender] = true;\r\n    minters[msg.sender] = true;\r\n    previousTokenContract = _previousTokenContract;\r\n  }\r\n  \r\n  function setMinter(address _minter) external onlyMinter returns (bool) {\r\n    minters[_minter] = true;\r\n    return true;\r\n  }\r\n\r\n  function removeMinter(address _minter) external onlyMinter returns (bool) {\r\n    require(_minter != msg.sender, \"EmethToken: cannot remove yourself\");\r\n    minters[_minter] = false;\r\n    return true;\r\n  }\r\n\r\n  function pause() external onlyOwner returns (bool) {\r\n    paused = true;\r\n    return true;\r\n  }\r\n\r\n  function unpause() external onlyOwner returns (bool) {\r\n    paused = false;\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(!paused, \"EmethToken: the contract is paused\");\r\n    require(_to != address(0), \"EmethToken: cannot transfer to zero address\");\r\n    require(_value <= balances[msg.sender], \"EmethToken: insufficient balance\");\r\n\r\n    balances[msg.sender] = balances[msg.sender] - _value;\r\n    balances[_to] = balances[_to] + _value;\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(!paused, \"EmethToken: the contract is paused\");\r\n    require(_to != address(0), \"EmethToken: cannot transfer to zero address\");\r\n    require(_value <= balances[_from], \"EmethToken: insufficient balance\");\r\n    require(_value <= allowed[_from][msg.sender], \"EmethToken: insufficient allowance\");\r\n\r\n    balances[_from] = balances[_from] - _value;\r\n    balances[_to] = balances[_to] + _value;\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(!paused, \"EmethToken: the contract is paused\");\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  function mint(address _to, uint256 _amount) external onlyMinter returns (bool) {\r\n    require(!paused, \"EmethToken: the contract is paused\");\r\n    balances[_to] = balances[_to] + _amount;\r\n    totalSupply = totalSupply + _amount;\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n  \r\n  function burn(uint256 _amount) external returns (bool) {\r\n    require(!paused, \"EmethToken: the contract is paused\");\r\n    _burn(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function _burn(address _from, uint256 _amount) internal returns (bool) {\r\n    balances[_from] = balances[_from] - _amount;\r\n    totalSupply = totalSupply - _amount;\r\n    emit Transfer(_from, address(0), _amount);\r\n    return true;\r\n  }\r\n\r\n  function migrate(address _nextEmethToken, address _to) external onlyOwner returns (bool) {\r\n    require(!isFinal, \"EmethToken: this token is final version\");\r\n    require(paused, \"EmethToken: can migrate only when the contract is paused\");\r\n\r\n    IERC20 nextEmethToken = IERC20(_nextEmethToken);\r\n\r\n    require(nextEmethToken.previousTokenContract() == address(this), \"EmethToken: invalid next token\");\r\n\r\n    nextEmethToken.mint(_to, balances[_to]);\r\n    _burn(_to, balanceOf(_to));\r\n\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextEmethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ET20231105", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8cfc0b550fba1c8e5345ad8c1505e1fa61f2f5c011f89c39783894b829c544a"}