{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@mimic-fi/v2-bridge-connector/contracts/IBridgeConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v2-registry/contracts/implementations/IImplementation.sol';\\n\\n/**\\n * @title IBridgeConnector\\n * @dev Bridge Connector interface to bridge tokens between different chains. It must follow IImplementation interface.\\n */\\ninterface IBridgeConnector is IImplementation {\\n    /**\\n     * @dev Enum identifying the sources proposed: Hop only for now.\\n     */\\n    enum Source {\\n        Hop\\n    }\\n\\n    /**\\n     * @dev Bridge assets to a different chain\\n     * @param source Source to execute the requested bridge op\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amountIn Amount of tokens to be bridged\\n     * @param minAmountOut Minimum amount of tokens willing to receive on the destination chain\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     * @param data ABI encoded data that will depend on the requested source\\n     */\\n    function bridge(\\n        uint8 source,\\n        uint256 chainId,\\n        address token,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-bridge-connector/contracts/interfaces/IHopL2AMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\ninterface IHopL2AMM {\\n    function hToken() external view returns (address);\\n\\n    function exchangeAddress() external view returns (address);\\n\\n    /**\\n     * @notice To send funds L2->L1 or L2->L2, call the swapAndSend method on the L2 AMM Wrapper contract\\n     * @dev Do not set destinationAmountOutMin and destinationDeadline when sending to L1 because there is no AMM on L1,\\n     * otherwise the calculated transferId will be invalid and the transfer will be unbondable. These parameters should\\n     * be set to 0 when sending to L1.\\n     * @param amount is the amount the user wants to send plus the Bonder fee\\n     */\\n    function swapAndSend(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        uint256 destinationAmountOutMin,\\n        uint256 destinationDeadline\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/auth/Authorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './IAuthorizer.sol';\\n\\n/**\\n * @title Authorizer\\n * @dev Authorization module to be used by contracts that need to implement permissions for their methods.\\n * It provides a permissions model to list who is allowed to call what function in a contract. And only accounts\\n * authorized to manage those permissions are the ones that are allowed to authorize or unauthorize accounts.\\n */\\ncontract Authorizer is IAuthorizer {\\n    // Constant used to denote that a permission is open to anyone\\n    address public constant ANY_ADDRESS = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    // Internal mapping to tell who is allowed to do what indexed by (account, function selector)\\n    mapping (address => mapping (bytes4 => bool)) private authorized;\\n\\n    /**\\n     * @dev Modifier that should be used to tag protected functions\\n     */\\n    modifier auth() {\\n        _authenticate(msg.sender, msg.sig);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Tells whether someone is allowed to call a function or not. It returns true if it's allowed to anyone.\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     */\\n    function isAuthorized(address who, bytes4 what) public view override returns (bool) {\\n        return authorized[ANY_ADDRESS][what] || authorized[who][what];\\n    }\\n\\n    /**\\n     * @dev Authorizes someone to call a function. Sender must be authorize to do so.\\n     * @param who Address to be authorized\\n     * @param what Function selector to be granted\\n     */\\n    function authorize(address who, bytes4 what) external override auth {\\n        _authorize(who, what);\\n    }\\n\\n    /**\\n     * @dev Unauthorizes someone to call a function. Sender must be authorize to do so.\\n     * @param who Address to be unauthorized\\n     * @param what Function selector to be revoked\\n     */\\n    function unauthorize(address who, bytes4 what) external override auth {\\n        _unauthorize(who, what);\\n    }\\n\\n    /**\\n     * @dev Internal function to authenticate someone over a function.\\n     * It reverts if the given account is not authorized to call the requested function.\\n     * @param who Address to be authenticated\\n     * @param what Function selector to be authenticated\\n     */\\n    function _authenticate(address who, bytes4 what) internal view {\\n        require(isAuthorized(who, what), 'AUTH_SENDER_NOT_ALLOWED');\\n    }\\n\\n    /**\\n     * @dev Internal function to authorize someone to call a function\\n     * @param who Address to be authorized\\n     * @param what Function selector to be granted\\n     */\\n    function _authorize(address who, bytes4 what) internal {\\n        authorized[who][what] = true;\\n        emit Authorized(who, what);\\n    }\\n\\n    /**\\n     * @dev Internal function to unauthorize someone to call a function\\n     * @param who Address to be unauthorized\\n     * @param what Function selector to be revoked\\n     */\\n    function _unauthorize(address who, bytes4 what) internal {\\n        authorized[who][what] = false;\\n        emit Unauthorized(who, what);\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/auth/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IAuthorizer\\n */\\ninterface IAuthorizer {\\n    /**\\n     * @dev Emitted when an account is authorized to call a function\\n     */\\n    event Authorized(address indexed who, bytes4 what);\\n\\n    /**\\n     * @dev Emitted when an account is unauthorized to call a function\\n     */\\n    event Unauthorized(address indexed who, bytes4 what);\\n\\n    /**\\n     * @dev Authorizes someone to call a function. Sender must be authorize to do so.\\n     * @param who Address to be authorized\\n     * @param what Function selector to be granted\\n     */\\n    function authorize(address who, bytes4 what) external;\\n\\n    /**\\n     * @dev Unauthorizes someone to call a function. Sender must be authorize to do so.\\n     * @param who Address to be unauthorized\\n     * @param what Function selector to be revoked\\n     */\\n    function unauthorize(address who, bytes4 what) external;\\n\\n    /**\\n     * @dev Tells whether someone is allowed to call a function or not. It returns true if it's allowed to anyone.\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     */\\n    function isAuthorized(address who, bytes4 what) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title FixedPoint\\n * @dev Math library to operate with fixed point values with 18 decimals\\n */\\nlibrary FixedPoint {\\n    // 1 in fixed point value: 18 decimal places\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding down\\n     */\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            require(a == 0 || product / a == b, 'MUL_OVERFLOW');\\n            return product / ONE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding up\\n     */\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            require(a == 0 || product / a == b, 'MUL_OVERFLOW');\\n            return product == 0 ? 0 : (((product - 1) / ONE) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding down\\n     */\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            require(b != 0, 'ZERO_DIVISION');\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, 'DIV_INTERNAL');\\n            return aInflated / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding up\\n     */\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            require(b != 0, 'ZERO_DIVISION');\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, 'DIV_INTERNAL');\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/utils/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Denominations\\n * @dev Provides a list of ground denominations for those tokens that cannot be represented by an ERC20.\\n * For now, the only needed is the native token that could be ETH, MATIC, or other depending on the layer being operated.\\n */\\nlibrary Denominations {\\n    address internal constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n    address internal constant USD = address(840);\\n\\n    function isNativeToken(address token) internal pure returns (bool) {\\n        return token == NATIVE_TOKEN;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/utils/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the EnumerableMap library from OpenZeppelin Contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.AddressToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.AddressToAddressMap private myMap;\\n * }\\n * ```\\n */\\n\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        EnumerableSet.AddressSet _keys;\\n        mapping (address => uint256) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Return the entire set of keys\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    /**\\n     * @dev Return the entire set of values\\n     */\\n    function values(AddressToUintMap storage map) internal view returns (uint256[] memory items) {\\n        items = new uint256[](length(map));\\n        for (uint256 i = 0; i < items.length; i++) {\\n            address key = map._keys.at(i);\\n            items[i] = map._values[key];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        address key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        uint256 value = map._values[key];\\n        require(value != 0 || contains(map, key), 'EnumerableMap: nonexistent key');\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        uint256 value = map._values[key];\\n        if (value == 0) {\\n            return (contains(map, key), 0);\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    // AddressToAddressMap\\n\\n    struct AddressToAddressMap {\\n        EnumerableSet.AddressSet _keys;\\n        mapping (address => address) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToAddressMap storage map, address key, address value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Return the entire set of keys\\n     */\\n    function keys(AddressToAddressMap storage map) internal view returns (address[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    /**\\n     * @dev Return the entire set of values\\n     */\\n    function values(AddressToAddressMap storage map) internal view returns (address[] memory items) {\\n        items = new address[](length(map));\\n        for (uint256 i = 0; i < items.length; i++) {\\n            address key = map._keys.at(i);\\n            items[i] = map._values[key];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToAddressMap storage map, uint256 index) internal view returns (address, address) {\\n        address key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\\n        address value = map._values[key];\\n        require(value != address(0) || contains(map, key), 'EnumerableMap: nonexistent key');\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToAddressMap storage map, address key) internal view returns (bool, address) {\\n        address value = map._values[key];\\n        if (value == address(0)) {\\n            return (contains(map, key), address(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/utils/ERC20Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './Denominations.sol';\\n\\n/**\\n * @title ERC20Helpers\\n * @dev Provides a list of ERC20 helper methods\\n */\\nlibrary ERC20Helpers {\\n    function approve(address token, address to, uint256 amount) internal {\\n        SafeERC20.safeApprove(IERC20(token), to, 0);\\n        SafeERC20.safeApprove(IERC20(token), to, amount);\\n    }\\n\\n    function transfer(address token, address to, uint256 amount) internal {\\n        if (Denominations.isNativeToken(token)) Address.sendValue(payable(to), amount);\\n        else SafeERC20.safeTransfer(IERC20(token), to, amount);\\n    }\\n\\n    function balanceOf(address token, address account) internal view returns (uint256) {\\n        if (Denominations.isNativeToken(token)) return address(account).balance;\\n        else return IERC20(token).balanceOf(address(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-helpers/contracts/utils/IWrappedNativeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title IWrappedNativeToken\\n */\\ninterface IWrappedNativeToken is IERC20 {\\n    /**\\n     * @dev Wraps msg.value into the wrapped-native token\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Unwraps requested amount to the native token\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-price-oracle/contracts/feeds/IPriceFeedProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IPriceFeedProvider\\n * @dev Contract providing price feed references for (base, quote) token pairs\\n */\\ninterface IPriceFeedProvider {\\n    /**\\n     * @dev Emitted every time a price feed is set for (base, quote) pair\\n     */\\n    event PriceFeedSet(address indexed base, address indexed quote, address feed);\\n\\n    /**\\n     * @dev Tells the price feed address for (base, quote) pair. It returns the zero address if there is no one set.\\n     * @param base Token to be rated\\n     * @param quote Token used for the price rate\\n     */\\n    function getPriceFeed(address base, address quote) external view returns (address);\\n\\n    /**\\n     * @dev Sets a of price feed\\n     * @param base Token base to be set\\n     * @param quote Token quote to be set\\n     * @param feed Price feed to be set\\n     */\\n    function setPriceFeed(address base, address quote, address feed) external;\\n\\n    /**\\n     * @dev Sets a list of price feeds\\n     * @param bases List of token bases to be set\\n     * @param quotes List of token quotes to be set\\n     * @param feeds List of price feeds to be set\\n     */\\n    function setPriceFeeds(address[] memory bases, address[] memory quotes, address[] memory feeds) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-registry/contracts/implementations/BaseImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\n\\nimport './IImplementation.sol';\\nimport '../registry/IRegistry.sol';\\n\\n/**\\n * @title BaseImplementation\\n * @dev This implementation contract comes with an immutable reference to an implementations registry where it should\\n * be registered as well (checked during initialization). It allows requesting new instances of other registered\\n * implementations to as another safety check to make sure valid instances are referenced in case it's needed.\\n */\\nabstract contract BaseImplementation is IImplementation {\\n    // Immutable implementations registry reference\\n    address public immutable override registry;\\n\\n    /**\\n     * @dev Creates a new BaseImplementation\\n     * @param _registry Address of the Mimic Registry where dependencies will be validated against\\n     */\\n    constructor(address _registry) {\\n        registry = _registry;\\n    }\\n\\n    /**\\n     * @dev Internal function to validate a new dependency that must be registered as stateless.\\n     * It checks the new dependency is registered, not deprecated, and stateless.\\n     * @param dependency New stateless dependency to be set\\n     */\\n    function _validateStatelessDependency(address dependency) internal view {\\n        require(_validateDependency(dependency), 'DEPENDENCY_NOT_STATELESS');\\n    }\\n\\n    /**\\n     * @dev Internal function to validate a new dependency that cannot be registered as stateless.\\n     * It checks the new dependency is registered, not deprecated, and not stateful.\\n     * @param dependency New stateful dependency to be set\\n     */\\n    function _validateStatefulDependency(address dependency) internal view {\\n        require(!_validateDependency(dependency), 'DEPENDENCY_NOT_STATEFUL');\\n    }\\n\\n    /**\\n     * @dev Internal function to validate a new dependency. It checks the dependency is registered and not deprecated.\\n     * @param dependency New dependency to be set\\n     * @return Whether the dependency is stateless or not\\n     */\\n    function _validateDependency(address dependency) private view returns (bool) {\\n        (bool stateless, bool deprecated, bytes32 namespace) = IRegistry(registry).implementationData(dependency);\\n        require(namespace != bytes32(0), 'DEPENDENCY_NOT_REGISTERED');\\n        require(!deprecated, 'DEPENDENCY_DEPRECATED');\\n        return stateless;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-registry/contracts/implementations/IImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title IImplementation\\n * @dev Implementation interface that must be followed for implementations to be registered in the Mimic Registry\\n */\\ninterface IImplementation {\\n    /**\\n     * @dev Tells the namespace under which the implementation is registered in the Mimic Registry\\n     */\\n    function NAMESPACE() external view returns (bytes32);\\n\\n    /**\\n     * @dev Tells the address of the Mimic Registry\\n     */\\n    function registry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-registry/contracts/registry/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/auth/IAuthorizer.sol';\\n\\n/**\\n * @title IRegistry\\n * @dev Registry interface, it must follow the IAuthorizer interface.\\n */\\ninterface IRegistry is IAuthorizer {\\n    /**\\n     * @dev Emitted every time a new implementation is registered\\n     */\\n    event Registered(bytes32 indexed namespace, address indexed implementation, bool stateless);\\n\\n    /**\\n     * @dev Emitted every time an implementation is deprecated\\n     */\\n    event Deprecated(bytes32 indexed namespace, address indexed implementation);\\n\\n    /**\\n     * @dev Tells the data of an implementation:\\n     * @param implementation Address of the implementation to request it's data\\n     */\\n    function implementationData(address implementation)\\n        external\\n        view\\n        returns (bool stateless, bool deprecated, bytes32 namespace);\\n\\n    /**\\n     * @dev Tells if a specific implementation is registered under a certain namespace and it's not deprecated\\n     * @param namespace Namespace asking for\\n     * @param implementation Address of the implementation to be checked\\n     */\\n    function isActive(bytes32 namespace, address implementation) external view returns (bool);\\n\\n    /**\\n     * @dev Registers a new implementation for a given namespace\\n     * @param namespace Namespace to be used for the implementation\\n     * @param implementation Address of the implementation to be registered\\n     * @param stateless Whether the implementation is stateless or not\\n     */\\n    function register(bytes32 namespace, address implementation, bool stateless) external;\\n\\n    /**\\n     * @dev Deprecates a registered implementation\\n     * @param implementation Address of the implementation to be deprecated\\n     */\\n    function deprecate(address implementation) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-smart-vault/contracts/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/auth/IAuthorizer.sol';\\nimport '@mimic-fi/v2-price-oracle/contracts/feeds/IPriceFeedProvider.sol';\\nimport '@mimic-fi/v2-registry/contracts/implementations/IImplementation.sol';\\n\\n/**\\n * @title ISmartVault\\n * @dev Mimic Smart Vault interface to manage assets. It must support also `IImplementation` and `IAuthorizer`\\n */\\ninterface ISmartVault is IPriceFeedProvider, IImplementation, IAuthorizer {\\n    enum SwapLimit {\\n        Slippage,\\n        MinAmountOut\\n    }\\n\\n    enum BridgeLimit {\\n        Slippage,\\n        MinAmountOut\\n    }\\n\\n    /**\\n     * @dev Emitted every time a new strategy is set for the Smart Vault\\n     */\\n    event StrategySet(address indexed strategy, bool allowed);\\n\\n    /**\\n     * @dev Emitted every time a new price oracle is set for the Smart Vault\\n     */\\n    event PriceOracleSet(address indexed priceOracle);\\n\\n    /**\\n     * @dev Emitted every time a new swap connector is set for the Smart Vault\\n     */\\n    event SwapConnectorSet(address indexed swapConnector);\\n\\n    /**\\n     * @dev Emitted every time a new bridge connector is set for the Smart Vault\\n     */\\n    event BridgeConnectorSet(address indexed bridgeConnector);\\n\\n    /**\\n     * @dev Emitted every time a new fee collector is set\\n     */\\n    event FeeCollectorSet(address indexed feeCollector);\\n\\n    /**\\n     * @dev Emitted every time the withdraw fee percentage is set\\n     */\\n    event WithdrawFeeSet(uint256 pct, uint256 cap, address token, uint256 period);\\n\\n    /**\\n     * @dev Emitted every time the performance fee percentage is set\\n     */\\n    event PerformanceFeeSet(uint256 pct, uint256 cap, address token, uint256 period);\\n\\n    /**\\n     * @dev Emitted every time the swap fee percentage is set\\n     */\\n    event SwapFeeSet(uint256 pct, uint256 cap, address token, uint256 period);\\n\\n    /**\\n     * @dev Emitted every time the bridge fee percentage is set\\n     */\\n    event BridgeFeeSet(uint256 pct, uint256 cap, address token, uint256 period);\\n\\n    /**\\n     * @dev Emitted every time `call` is called\\n     */\\n    event Call(address indexed target, bytes callData, uint256 value, bytes result, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `collect` is called\\n     */\\n    event Collect(address indexed token, address indexed from, uint256 collected, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `withdraw` is called\\n     */\\n    event Withdraw(address indexed token, address indexed recipient, uint256 withdrawn, uint256 fee, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `wrap` is called\\n     */\\n    event Wrap(uint256 amount, uint256 wrapped, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `unwrap` is called\\n     */\\n    event Unwrap(uint256 amount, uint256 unwrapped, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `claim` is called\\n     */\\n    event Claim(address indexed strategy, address[] tokens, uint256[] amounts, bytes data);\\n\\n    /**\\n     * @dev Emitted every time `join` is called\\n     */\\n    event Join(\\n        address indexed strategy,\\n        address[] tokensIn,\\n        uint256[] amountsIn,\\n        address[] tokensOut,\\n        uint256[] amountsOut,\\n        uint256 value,\\n        uint256 slippage,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted every time `exit` is called\\n     */\\n    event Exit(\\n        address indexed strategy,\\n        address[] tokensIn,\\n        uint256[] amountsIn,\\n        address[] tokensOut,\\n        uint256[] amountsOut,\\n        uint256 value,\\n        uint256[] fees,\\n        uint256 slippage,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted every time `swap` is called\\n     */\\n    event Swap(\\n        uint8 indexed source,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 minAmountOut,\\n        uint256 fee,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted every time `bridge` is called\\n     */\\n    event Bridge(\\n        uint8 indexed source,\\n        uint256 indexed chainId,\\n        address indexed token,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 fee,\\n        address recipient,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Tells a strategy is allowed or not\\n     * @param strategy Address of the strategy being queried\\n     */\\n    function isStrategyAllowed(address strategy) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the invested value for a strategy\\n     * @param strategy Address of the strategy querying the invested value of\\n     */\\n    function investedValue(address strategy) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the last value accrued for a strategy. Note this value can be outdated.\\n     * @param strategy Address of the strategy querying the last value of\\n     */\\n    function lastValue(address strategy) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the price oracle associated to a Smart Vault\\n     */\\n    function priceOracle() external view returns (address);\\n\\n    /**\\n     * @dev Tells the swap connector associated to a Smart Vault\\n     */\\n    function swapConnector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the bridge connector associated to a Smart Vault\\n     */\\n    function bridgeConnector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address where fees will be deposited\\n     */\\n    function feeCollector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the withdraw fee configuration\\n     */\\n    function withdrawFee()\\n        external\\n        view\\n        returns (uint256 pct, uint256 cap, address token, uint256 period, uint256 totalCharged, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the performance fee configuration\\n     */\\n    function performanceFee()\\n        external\\n        view\\n        returns (uint256 pct, uint256 cap, address token, uint256 period, uint256 totalCharged, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the swap fee configuration\\n     */\\n    function swapFee()\\n        external\\n        view\\n        returns (uint256 pct, uint256 cap, address token, uint256 period, uint256 totalCharged, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the bridge fee configuration\\n     */\\n    function bridgeFee()\\n        external\\n        view\\n        returns (uint256 pct, uint256 cap, address token, uint256 period, uint256 totalCharged, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the address of the wrapped native token\\n     */\\n    function wrappedNativeToken() external view returns (address);\\n\\n    /**\\n     * @dev Sets a new strategy as allowed or not for a Smart Vault\\n     * @param strategy Address of the strategy to be set\\n     * @param allowed Whether the strategy is allowed or not\\n     */\\n    function setStrategy(address strategy, bool allowed) external;\\n\\n    /**\\n     * @dev Sets a new price oracle to a Smart Vault\\n     * @param newPriceOracle Address of the new price oracle to be set\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @dev Sets a new swap connector to a Smart Vault\\n     * @param newSwapConnector Address of the new swap connector to be set\\n     */\\n    function setSwapConnector(address newSwapConnector) external;\\n\\n    /**\\n     * @dev Sets a new bridge connector to a Smart Vault\\n     * @param newBridgeConnector Address of the new bridge connector to be set\\n     */\\n    function setBridgeConnector(address newBridgeConnector) external;\\n\\n    /**\\n     * @dev Sets a new fee collector\\n     * @param newFeeCollector Address of the new fee collector to be set\\n     */\\n    function setFeeCollector(address newFeeCollector) external;\\n\\n    /**\\n     * @dev Sets a new withdraw fee configuration\\n     * @param pct Withdraw fee percentage to be set\\n     * @param cap New maximum amount of withdraw fees to be charged per period\\n     * @param token Address of the token cap to be set\\n     * @param period New cap period length in seconds for the withdraw fee\\n     */\\n    function setWithdrawFee(uint256 pct, uint256 cap, address token, uint256 period) external;\\n\\n    /**\\n     * @dev Sets a new performance fee configuration\\n     * @param pct Performance fee percentage to be set\\n     * @param cap New maximum amount of performance fees to be charged per period\\n     * @param token Address of the token cap to be set\\n     * @param period New cap period length in seconds for the performance fee\\n     */\\n    function setPerformanceFee(uint256 pct, uint256 cap, address token, uint256 period) external;\\n\\n    /**\\n     * @dev Sets a new swap fee configuration\\n     * @param pct Swap fee percentage to be set\\n     * @param cap New maximum amount of swap fees to be charged per period\\n     * @param token Address of the token cap to be set\\n     * @param period New cap period length in seconds for the swap fee\\n     */\\n    function setSwapFee(uint256 pct, uint256 cap, address token, uint256 period) external;\\n\\n    /**\\n     * @dev Sets a new bridge fee configuration\\n     * @param pct Bridge fee percentage to be set\\n     * @param cap New maximum amount of bridge fees to be charged per period\\n     * @param token Address of the token cap to be set\\n     * @param period New cap period length in seconds for the bridge fee\\n     */\\n    function setBridgeFee(uint256 pct, uint256 cap, address token, uint256 period) external;\\n\\n    /**\\n     * @dev Tells the price of a token (base) in a given quote\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function getPrice(address base, address quote) external view returns (uint256);\\n\\n    /**\\n     * @dev Execute an arbitrary call from a Smart Vault\\n     * @param target Address where the call will be sent\\n     * @param callData Calldata to be used for the call\\n     * @param value Value in wei that will be attached to the call\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function call(address target, bytes memory callData, uint256 value, bytes memory data)\\n        external\\n        returns (bytes memory result);\\n\\n    /**\\n     * @dev Collect tokens from a sender to a Smart Vault\\n     * @param token Address of the token to be collected\\n     * @param from Address where the tokens will be transfer from\\n     * @param amount Amount of tokens to be transferred\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return collected Amount of tokens assigned to the Smart Vault\\n     */\\n    function collect(address token, address from, uint256 amount, bytes memory data)\\n        external\\n        returns (uint256 collected);\\n\\n    /**\\n     * @dev Withdraw tokens to an external account\\n     * @param token Address of the token to be withdrawn\\n     * @param amount Amount of tokens to withdraw\\n     * @param recipient Address where the tokens will be transferred to\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return withdrawn Amount of tokens transferred to the recipient address\\n     */\\n    function withdraw(address token, uint256 amount, address recipient, bytes memory data)\\n        external\\n        returns (uint256 withdrawn);\\n\\n    /**\\n     * @dev Wrap an amount of native tokens to the wrapped ERC20 version of it\\n     * @param amount Amount of native tokens to be wrapped\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return wrapped Amount of tokens wrapped\\n     */\\n    function wrap(uint256 amount, bytes memory data) external returns (uint256 wrapped);\\n\\n    /**\\n     * @dev Unwrap an amount of wrapped native tokens\\n     * @param amount Amount of wrapped native tokens to unwrapped\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return unwrapped Amount of tokens unwrapped\\n     */\\n    function unwrap(uint256 amount, bytes memory data) external returns (uint256 unwrapped);\\n\\n    /**\\n     * @dev Claim strategy rewards\\n     * @param strategy Address of the strategy to claim rewards\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return tokens Addresses of the tokens received as rewards\\n     * @return amounts Amounts of the tokens received as rewards\\n     */\\n    function claim(address strategy, bytes memory data)\\n        external\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /**\\n     * @dev Join a strategy with an amount of tokens\\n     * @param strategy Address of the strategy to join\\n     * @param tokensIn List of token addresses to join with\\n     * @param amountsIn List of token amounts to join with\\n     * @param slippage Slippage that will be used to compute the join\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return tokensOut List of token addresses received after the join\\n     * @return amountsOut List of token amounts received after the join\\n     */\\n    function join(\\n        address strategy,\\n        address[] memory tokensIn,\\n        uint256[] memory amountsIn,\\n        uint256 slippage,\\n        bytes memory data\\n    ) external returns (address[] memory tokensOut, uint256[] memory amountsOut);\\n\\n    /**\\n     * @dev Exit a strategy\\n     * @param strategy Address of the strategy to exit\\n     * @param tokensIn List of token addresses to exit with\\n     * @param amountsIn List of token amounts to exit with\\n     * @param slippage Slippage that will be used to compute the exit\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return tokensOut List of token addresses received after the exit\\n     * @return amountsOut List of token amounts received after the exit\\n     */\\n    function exit(\\n        address strategy,\\n        address[] memory tokensIn,\\n        uint256[] memory amountsIn,\\n        uint256 slippage,\\n        bytes memory data\\n    ) external returns (address[] memory tokensOut, uint256[] memory amountsOut);\\n\\n    /**\\n     * @dev Swaps two tokens\\n     * @param source Source to request the swap. It depends on the Swap Connector attached to a Smart Vault.\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param limitType Swap limit to be applied: slippage or min amount out\\n     * @param limitAmount Amount of the swap limit to be applied depending on limitType\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return amountOut Received amount of tokens out\\n     */\\n    function swap(\\n        uint8 source,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        SwapLimit limitType,\\n        uint256 limitAmount,\\n        bytes memory data\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @dev Bridge assets to another chain\\n     * @param source Source to request the bridge. It depends on the Bridge Connector attached to a Smart Vault.\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amount Amount of tokens to be bridged\\n     * @param limitType Swap limit to be applied: slippage or min amount out\\n     * @param limitAmount Amount of the swap limit to be applied depending on limitType\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     * @param data Extra data that may enable or not different behaviors depending on the implementation\\n     * @return bridged Amount requested to be bridged after fees\\n     */\\n    function bridge(\\n        uint8 source,\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        BridgeLimit limitType,\\n        uint256 limitAmount,\\n        address recipient,\\n        bytes memory data\\n    ) external returns (uint256 bridged);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v2-swap-connector/contracts/ISwapConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v2-registry/contracts/implementations/IImplementation.sol';\\n\\n/**\\n * @title ISwapConnector\\n * @dev Swap Connector interface to perform token swaps. It must follow the IImplementation interface.\\n */\\ninterface ISwapConnector is IImplementation {\\n    /**\\n     * @dev Enum identifying the sources proposed: Uniswap V2, Uniswap V3, Balancer V2, Paraswap V5, 1inch V5, and Hop.\\n     */\\n    enum Source {\\n        UniswapV2,\\n        UniswapV3,\\n        BalancerV2,\\n        ParaswapV5,\\n        OneInchV5,\\n        Hop\\n    }\\n\\n    /**\\n     * @dev Swaps two tokens\\n     * @param source Source to execute the requested swap\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param minAmountOut Minimum amount of tokenOut willing to receive\\n     * @param data Encoded data to specify different swap parameters depending on the source picked\\n     */\\n    function swap(\\n        uint8 source,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        bytes memory data\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/Action.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './IAction.sol';\\nimport './base/BaseAction.sol';\\nimport './base/RelayedAction.sol';\\nimport './base/OracledAction.sol';\\nimport './base/TimeLockedAction.sol';\\nimport './base/TokenIndexedAction.sol';\\nimport './base/TokenThresholdAction.sol';\\n\\n/**\\n * @title Action\\n * @dev Shared components across all actions\\n */\\nabstract contract Action is\\n    IAction,\\n    BaseAction,\\n    RelayedAction,\\n    OracledAction,\\n    TimeLockedAction,\\n    TokenIndexedAction,\\n    TokenThresholdAction\\n{\\n    /**\\n     * @dev Action config params. Only used in the constructor.\\n     */\\n    struct ActionConfig {\\n        BaseConfig baseConfig;\\n        RelayConfig relayConfig;\\n        OracleConfig oracleConfig;\\n        TimeLockConfig timeLockConfig;\\n        TokenIndexConfig tokenIndexConfig;\\n        TokenThresholdConfig tokenThresholdConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a new action\\n     */\\n    constructor(ActionConfig memory config)\\n        BaseAction(config.baseConfig)\\n        RelayedAction(config.relayConfig)\\n        OracledAction(config.oracleConfig)\\n        TimeLockedAction(config.timeLockConfig)\\n        TokenIndexedAction(config.tokenIndexConfig)\\n        TokenThresholdAction(config.tokenThresholdConfig)\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Fetches a price for base/quote pair. It prioritizes on-chain oracle data.\\n     */\\n    function _getPrice(address base, address quote)\\n        internal\\n        view\\n        virtual\\n        override(BaseAction, OracledAction)\\n        returns (uint256)\\n    {\\n        return base == quote ? FixedPoint.ONE : OracledAction._getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Hook to be called before the action call starts.\\n     */\\n    function _beforeAction(address token, uint256 amount)\\n        internal\\n        virtual\\n        override(BaseAction, RelayedAction, TimeLockedAction, TokenIndexedAction, TokenThresholdAction)\\n    {\\n        BaseAction._beforeAction(token, amount);\\n        RelayedAction._beforeAction(token, amount);\\n        TimeLockedAction._beforeAction(token, amount);\\n        TokenIndexedAction._beforeAction(token, amount);\\n        TokenThresholdAction._beforeAction(token, amount);\\n    }\\n\\n    /**\\n     * @dev Hook to be called after the action call has finished.\\n     */\\n    function _afterAction(address token, uint256 amount)\\n        internal\\n        virtual\\n        override(BaseAction, RelayedAction, TimeLockedAction)\\n    {\\n        TimeLockedAction._afterAction(token, amount);\\n        BaseAction._afterAction(token, amount);\\n        RelayedAction._afterAction(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/BaseAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '@mimic-fi/v2-smart-vault/contracts/ISmartVault.sol';\\nimport '@mimic-fi/v2-helpers/contracts/auth/Authorizer.sol';\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/Denominations.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/ERC20Helpers.sol';\\n\\nimport './interfaces/IBaseAction.sol';\\n\\n/**\\n * @title BaseAction\\n * @dev Simple action implementation with a Smart Vault reference and using the Authorizer mixin\\n */\\ncontract BaseAction is IBaseAction, Authorizer, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Whether the action is paused or not\\n    bool private _paused;\\n\\n    // Group ID of the action\\n    uint8 private _groupId;\\n\\n    // Smart Vault reference\\n    ISmartVault public immutable override smartVault;\\n\\n    /**\\n     * @dev Modifier to tag the execution function of an action to trigger before and after hooks automatically\\n     */\\n    modifier actionCall(address token, uint256 amount) {\\n        _beforeAction(token, amount);\\n        _;\\n        _afterAction(token, amount);\\n    }\\n\\n    /**\\n     * @dev Base action config. Only used in the constructor.\\n     * @param owner Address that will be granted with permissions to authorize and authorize\\n     * @param smartVault Address of the smart vault this action will reference, it cannot be changed once set\\n     * @param groupId Id of the group to which this action must refer to, use zero to avoid grouping\\n     */\\n    struct BaseConfig {\\n        address owner;\\n        address smartVault;\\n        uint8 groupId;\\n    }\\n\\n    /**\\n     * @dev Creates a new base action\\n     */\\n    constructor(BaseConfig memory config) {\\n        smartVault = ISmartVault(config.smartVault);\\n        _authorize(config.owner, Authorizer.authorize.selector);\\n        _authorize(config.owner, Authorizer.unauthorize.selector);\\n        _setGroupId(config.groupId);\\n    }\\n\\n    /**\\n     * @dev It allows receiving native token transfers\\n     */\\n    receive() external payable {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells the action is paused or not\\n     */\\n    function isPaused() public view override returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Tells the group ID of the action\\n     */\\n    function getGroupId() public view override returns (uint8) {\\n        return _groupId;\\n    }\\n\\n    /**\\n     * @dev Tells the balance of the action for a given token\\n     * @param token Address of the token querying the balance of\\n     * @notice Denominations.NATIVE_TOKEN_ADDRESS can be used to query the native token balance\\n     */\\n    function getActionBalance(address token) public view override returns (uint256) {\\n        return ERC20Helpers.balanceOf(token, address(this));\\n    }\\n\\n    /**\\n     * @dev Tells the balance of the Smart Vault for a given token\\n     * @param token Address of the token querying the balance of\\n     * @notice Denominations.NATIVE_TOKEN_ADDRESS can be used to query the native token balance\\n     */\\n    function getSmartVaultBalance(address token) public view override returns (uint256) {\\n        return ERC20Helpers.balanceOf(token, address(smartVault));\\n    }\\n\\n    /**\\n     * @dev Tells the total balance for a given token\\n     * @param token Address of the token querying the balance of\\n     * @notice Denominations.NATIVE_TOKEN_ADDRESS can be used to query the native token balance\\n     */\\n    function getTotalBalance(address token) public view override returns (uint256) {\\n        return getActionBalance(token) + getSmartVaultBalance(token);\\n    }\\n\\n    /**\\n     * @dev Pauses an action\\n     */\\n    function pause() external override auth {\\n        require(!_paused, 'ACTION_ALREADY_PAUSED');\\n        _paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Unpauses an action\\n     */\\n    function unpause() external override auth {\\n        require(_paused, 'ACTION_ALREADY_UNPAUSED');\\n        _paused = false;\\n        emit Unpaused();\\n    }\\n\\n    /**\\n     * @dev Sets a group ID for the action. Sender must be authorized\\n     * @param groupId ID of the group to be set for the action\\n     */\\n    function setGroupId(uint8 groupId) external override auth {\\n        _setGroupId(groupId);\\n    }\\n\\n    /**\\n     * @dev Transfers action's assets to the Smart Vault\\n     * @param token Address of the token to be transferred\\n     * @param amount Amount of tokens to be transferred\\n     * @notice Denominations.NATIVE_TOKEN_ADDRESS can be used to transfer the native token balance\\n     */\\n    function transferToSmartVault(address token, uint256 amount) external override auth {\\n        _transferToSmartVault(token, amount);\\n    }\\n\\n    /**\\n     * @dev Hook to be called before the action call starts. This implementation only adds a non-reentrant, auth, and\\n     * not-paused guard. It should be overwritten to add any extra logic that must run before the action is executed.\\n     */\\n    function _beforeAction(address, uint256) internal virtual nonReentrant auth {\\n        require(!_paused, 'ACTION_PAUSED');\\n    }\\n\\n    /**\\n     * @dev Hook to be called after the action call has finished. This implementation only emits the Executed event.\\n     * It should be overwritten to add any extra logic that must run after the action has been executed.\\n     */\\n    function _afterAction(address, uint256) internal virtual {\\n        emit Executed();\\n    }\\n\\n    /**\\n     * @dev Sets a group ID for the action\\n     * @param groupId ID of the group to be set for the action\\n     */\\n    function _setGroupId(uint8 groupId) internal {\\n        _groupId = groupId;\\n        emit GroupIdSet(groupId);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer action's assets to the Smart Vault\\n     * @param token Address of the token to be transferred\\n     * @param amount Amount of tokens to be transferred\\n     * @notice Denominations.NATIVE_TOKEN_ADDRESS can be used to transfer the native token balance\\n     */\\n    function _transferToSmartVault(address token, uint256 amount) internal {\\n        ERC20Helpers.transfer(token, address(smartVault), amount);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price from the smart vault's oracle. This function can be overwritten to implement\\n     * a secondary way of fetching oracle prices.\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256) {\\n        return base == quote ? FixedPoint.ONE : smartVault.getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Tells whether a token is the native or the wrapped native token\\n     */\\n    function _isWrappedOrNative(address token) internal view returns (bool) {\\n        return Denominations.isNativeToken(token) || token == _wrappedNativeToken();\\n    }\\n\\n    /**\\n     * @dev Tells the wrapped native token address\\n     */\\n    function _wrappedNativeToken() internal view returns (address) {\\n        return smartVault.wrappedNativeToken();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/IBaseAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v2-smart-vault/contracts/ISmartVault.sol';\\nimport '@mimic-fi/v2-helpers/contracts/auth/IAuthorizer.sol';\\n\\n/**\\n * @dev Base action interface\\n */\\ninterface IBaseAction is IAuthorizer {\\n    enum ActionGroup {\\n        Swap,\\n        Bridge\\n    }\\n\\n    /**\\n     * @dev Emitted every time an action is executed\\n     */\\n    event Executed();\\n\\n    /**\\n     * @dev Emitted every time an action is paused\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted every time an action is unpaused\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted every time the group ID is set\\n     */\\n    event GroupIdSet(uint8 indexed groupId);\\n\\n    /**\\n     * @dev Tells the address of the Smart Vault tied to it, it cannot be changed\\n     */\\n    function smartVault() external view returns (ISmartVault);\\n\\n    /**\\n     * @dev Tells the action is paused or not\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n     * @dev Tells the group ID of the action\\n     */\\n    function getGroupId() external view returns (uint8);\\n\\n    /**\\n     * @dev Tells the balance of the action for a given token\\n     * @param token Address of the token querying the balance of\\n     */\\n    function getActionBalance(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the balance of the Smart Vault for a given token\\n     * @param token Address of the token querying the balance of\\n     */\\n    function getSmartVaultBalance(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the total balance for a given token\\n     * @param token Address of the token querying the balance of\\n     */\\n    function getTotalBalance(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Pauses an action\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses an action\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Sets a group ID for the action. Sender must be authorized\\n     * @param groupId ID of the group to be set for the action\\n     */\\n    function setGroupId(uint8 groupId) external;\\n\\n    /**\\n     * @dev Transfers action's assets to the Smart Vault\\n     * @param token Address of the token to be transferred\\n     * @param amount Amount of tokens to be transferred\\n     */\\n    function transferToSmartVault(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/IOracledAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseAction.sol';\\n\\n/**\\n * @dev Oracled action interface\\n */\\ninterface IOracledAction is IBaseAction {\\n    /**\\n     * @dev Feed data\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param rate Price of a token (base) expressed in `quote`. It must use the corresponding number of decimals so\\n     *             that when performing a fixed point product of it by a `base` amount, the result is expressed in\\n     *             `quote` decimals. For example, if `base` is ETH and `quote` is USDC, the number of decimals of `rate`\\n     *             must be 6: FixedPoint.mul(X[ETH], rate[USDC/ETH]) = FixedPoint.mul(X[18], price[6]) = X * price [6].\\n     * @param deadline Expiration timestamp until when the given quote is considered valid\\n     */\\n    struct FeedData {\\n        address base;\\n        address quote;\\n        uint256 rate;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev Emitted every time an oracle signer is allowed\\n     */\\n    event OracleSignerAllowed(address indexed signer);\\n\\n    /**\\n     * @dev Emitted every time an oracle signer is disallowed\\n     */\\n    event OracleSignerDisallowed(address indexed signer);\\n\\n    /**\\n     * @dev Tells the list of oracle signers\\n     */\\n    function getOracleSigners() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Tells whether an address is as an oracle signer or not\\n     * @param signer Address of the signer being queried\\n     */\\n    function isOracleSigner(address signer) external view returns (bool);\\n\\n    /**\\n     * @dev Hashes the list of feeds\\n     * @param feeds List of feeds to be hashed\\n     */\\n    function getFeedsDigest(FeedData[] memory feeds) external pure returns (bytes32);\\n\\n    /**\\n     * @dev Updates the list of allowed oracle signers\\n     * @param toAdd List of signers to be added to the oracle signers list\\n     * @param toRemove List of signers to be removed from the oracle signers list\\n     */\\n    function setOracleSigners(address[] memory toAdd, address[] memory toRemove) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/IRelayedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseAction.sol';\\n\\n/**\\n * @dev Relayed action interface\\n */\\ninterface IRelayedAction is IBaseAction {\\n    /**\\n     * @dev Emitted every time the relay gas limits are set\\n     */\\n    event RelayGasLimitsSet(uint256 gasPriceLimit, uint256 priorityFeeLimit);\\n\\n    /**\\n     * @dev Emitted every time the relay tx cost limit is set\\n     */\\n    event RelayTxCostLimitSet(uint256 txCostLimit);\\n\\n    /**\\n     * @dev Emitted every time the relay gas token is set\\n     */\\n    event RelayGasTokenSet(address indexed token);\\n\\n    /**\\n     * @dev Emitted every time the relay permissive mode is set\\n     */\\n    event RelayPermissiveModeSet(bool active);\\n\\n    /**\\n     * @dev Emitted every time a relayer is added to the allow-list\\n     */\\n    event RelayerAllowed(address indexed relayer);\\n\\n    /**\\n     * @dev Emitted every time a relayer is removed from the allow-list\\n     */\\n    event RelayerDisallowed(address indexed relayer);\\n\\n    /**\\n     * @dev Tells the relay gas limits\\n     */\\n    function getRelayGasLimits() external view returns (uint256 gasPriceLimit, uint256 priorityFeeLimit);\\n\\n    /**\\n     * @dev Tells the relay transaction cost limit\\n     */\\n    function getRelayTxCostLimit() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the relay gas token\\n     */\\n    function getRelayGasToken() external view returns (address);\\n\\n    /**\\n     * @dev Tells whether the relay permissive mode is active\\n     */\\n    function isRelayPermissiveModeActive() external view returns (bool);\\n\\n    /**\\n     * @dev Tells if a relayer is allowed or not\\n     * @param relayer Address of the relayer to be checked\\n     */\\n    function isRelayer(address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the list of allowed relayers\\n     */\\n    function getRelayers() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Sets the relay gas limits\\n     * @param gasPriceLimit New gas price limit to be set\\n     * @param priorityFeeLimit New priority fee limit to be set\\n     */\\n    function setRelayGasLimits(uint256 gasPriceLimit, uint256 priorityFeeLimit) external;\\n\\n    /**\\n     * @dev Sets the relay transaction cost limit\\n     * @param txCostLimit New transaction cost limit to be set\\n     */\\n    function setRelayTxCostLimit(uint256 txCostLimit) external;\\n\\n    /**\\n     * @dev Sets the relay gas token\\n     * @param token Address of the token to be set as the relaying gas token\\n     */\\n    function setRelayGasToken(address token) external;\\n\\n    /**\\n     * @dev Sets the relay permissive mode\\n     * @param active Whether the relay permissive mode should be active or not\\n     */\\n    function setRelayPermissiveMode(bool active) external;\\n\\n    /**\\n     * @dev Updates the list of allowed relayers\\n     * @param relayersToAdd List of relayers to be added to the allow-list\\n     * @param relayersToRemove List of relayers to be removed from the allow-list\\n     */\\n    function setRelayers(address[] memory relayersToAdd, address[] memory relayersToRemove) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/ITimeLockedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseAction.sol';\\n\\n/**\\n * @dev Time-locked action interface\\n */\\ninterface ITimeLockedAction is IBaseAction {\\n    /**\\n     * @dev Emitted every time a new time-lock delay is set\\n     */\\n    event TimeLockDelaySet(uint256 delay);\\n\\n    /**\\n     * @dev Emitted every time a new expiration timestamp is set\\n     */\\n    event TimeLockExpirationSet(uint256 expiration);\\n\\n    /**\\n     * @dev Tells if a time-locked action has expired\\n     */\\n    function isTimeLockExpired() external view returns (bool);\\n\\n    /**\\n     * @dev Tells the time-lock information\\n     */\\n    function getTimeLock() external view returns (uint256 delay, uint256 expiresAt);\\n\\n    /**\\n     * @dev Sets the time-lock delay\\n     * @param delay New delay to be set\\n     */\\n    function setTimeLockDelay(uint256 delay) external;\\n\\n    /**\\n     * @dev Sets the time-lock expiration timestamp\\n     * @param timestamp New expiration timestamp to be set\\n     */\\n    function setTimeLockExpiration(uint256 timestamp) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/ITokenIndexedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseAction.sol';\\n\\n/**\\n * @dev Token indexed action interface\\n */\\ninterface ITokenIndexedAction is IBaseAction {\\n    /**\\n     * @dev Acceptance list types: either deny-list to express \\\"all except\\\" or allow-list to express \\\"only\\\"\\n     */\\n    enum TokensAcceptanceType {\\n        DenyList,\\n        AllowList\\n    }\\n\\n    /**\\n     * @dev Emitted every time a tokens acceptance type is set\\n     */\\n    event TokensAcceptanceTypeSet(TokensAcceptanceType acceptanceType);\\n\\n    /**\\n     * @dev Emitted every time a token is added to the acceptance list\\n     */\\n    event TokensAcceptanceAdded(address indexed token);\\n\\n    /**\\n     * @dev Emitted every time a token is removed from the acceptance list\\n     */\\n    event TokensAcceptanceRemoved(address indexed token);\\n\\n    /**\\n     * @dev Emitted every time a source is added to the list\\n     */\\n    event TokenIndexSourceAdded(address indexed source);\\n\\n    /**\\n     * @dev Emitted every time a source is removed from the list\\n     */\\n    event TokenIndexSourceRemoved(address indexed source);\\n\\n    /**\\n     * @dev Tells the acceptance type of the config\\n     */\\n    function getTokensAcceptanceType() external view returns (TokensAcceptanceType);\\n\\n    /**\\n     * @dev Tells if a token is included in the acceptance config\\n     */\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the list of tokens included in the acceptance config\\n     */\\n    function getTokensAcceptanceList() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Tells the list of tokens sources accepted by the config\\n     */\\n    function getTokensIndexSources() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the action\\n     * @param acceptanceType New token acceptance type to be set\\n     */\\n    function setTokensAcceptanceType(TokensAcceptanceType acceptanceType) external;\\n\\n    /**\\n     * @dev Updates the list of tokens of the tokens acceptance list\\n     * @param tokensToAdd List of tokens to be added to the acceptance list\\n     * @param tokensToRemove List of tokens to be removed from the acceptance list\\n     */\\n    function setTokensAcceptanceList(address[] memory tokensToAdd, address[] memory tokensToRemove) external;\\n\\n    /**\\n     * @dev Updates the list of sources of the tokens index config\\n     * @param toAdd List of sources to be added to the acceptance list\\n     * @param toRemove List of sources to be removed from the acceptance list\\n     */\\n    function setTokensIndexSources(address[] memory toAdd, address[] memory toRemove) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/interfaces/ITokenThresholdAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General External License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General External License for more details.\\n\\n// You should have received a copy of the GNU General External License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseAction.sol';\\n\\n/**\\n * @dev Token threshold action interface\\n */\\ninterface ITokenThresholdAction is IBaseAction {\\n    /**\\n     * @dev Threshold defined by a token address and min/max values\\n     */\\n    struct Threshold {\\n        address token;\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    /**\\n     * @dev Emitted every time a default threshold is set\\n     */\\n    event DefaultTokenThresholdSet(Threshold threshold);\\n\\n    /**\\n     * @dev Emitted every time the default threshold is unset\\n     */\\n    event DefaultTokenThresholdUnset();\\n\\n    /**\\n     * @dev Emitted every time a token threshold is set\\n     */\\n    event CustomTokenThresholdSet(address indexed token, Threshold threshold);\\n\\n    /**\\n     * @dev Emitted every time a token threshold is unset\\n     */\\n    event CustomTokenThresholdUnset(address indexed token);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultTokenThreshold() external view returns (Threshold memory);\\n\\n    /**\\n     * @dev Tells the token threshold defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function getCustomTokenThreshold(address token) external view returns (bool exists, Threshold memory threshold);\\n\\n    /**\\n     * @dev Tells the list of custom token thresholds set\\n     */\\n    function getCustomTokenThresholds() external view returns (address[] memory tokens, Threshold[] memory thresholds);\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param threshold Threshold config to be set as the default one\\n     */\\n    function setDefaultTokenThreshold(Threshold memory threshold) external;\\n\\n    /**\\n     * @dev Unsets the default threshold, it ignores the request if it was not set\\n     */\\n    function unsetDefaultTokenThreshold() external;\\n\\n    /**\\n     * @dev Sets a list of tokens thresholds\\n     * @param tokens List of token addresses to set its custom thresholds\\n     * @param thresholds Lists of thresholds be set for each token\\n     */\\n    function setCustomTokenThresholds(address[] memory tokens, Threshold[] memory thresholds) external;\\n\\n    /**\\n     * @dev Unsets a list of custom threshold tokens, it ignores nonexistent custom thresholds\\n     * @param tokens List of token addresses to unset its custom thresholds\\n     */\\n    function unsetCustomTokenThresholds(address[] memory tokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/OracledAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport 'hardhat/console.sol';\\nimport './BaseAction.sol';\\nimport './interfaces/IOracledAction.sol';\\n\\n/**\\n * @dev Action that can work with off-chain passed feed data from trusted oracles.\\n * It relies on a specific \\\"extra-calldata\\\" layout as follows:\\n *\\n * [ feed 1 | feed 2 | ... | feed n | n | v | r | s ]\\n *\\n * For simplicity, we use full 256 bit slots for 'n', 'v', 'r', and 's' values.\\n * Note that 'n' denotes the number of encoded feeds, while [v,r,s] denote the corresponding oracle signature.\\n * Each feed has the following 4-words layout:\\n *\\n * [ base | quote | rate | deadline ]\\n */\\nabstract contract OracledAction is IOracledAction, BaseAction {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Each feed has 4 words length\\n    uint256 private constant EXPECTED_FEED_DATA_LENGTH = 32 * 4;\\n\\n    // Enumerable set of trusted signers\\n    EnumerableSet.AddressSet private _signers;\\n\\n    /**\\n     * @dev Oracled action config. Only used in the constructor.\\n     * @param signers List of oracle signers to be allowed\\n     */\\n    struct OracleConfig {\\n        address[] signers;\\n    }\\n\\n    /**\\n     * @dev Creates a new oracled action\\n     */\\n    constructor(OracleConfig memory config) {\\n        _addOracleSigners(config.signers);\\n    }\\n\\n    /**\\n     * @dev Tells the list of oracle signers\\n     */\\n    function getOracleSigners() external view override returns (address[] memory) {\\n        return _signers.values();\\n    }\\n\\n    /**\\n     * @dev Tells whether an address is as an oracle signer or not\\n     * @param signer Address of the signer being queried\\n     */\\n    function isOracleSigner(address signer) public view override returns (bool) {\\n        return _signers.contains(signer);\\n    }\\n\\n    /**\\n     * @dev Hashes the list of feeds\\n     * @param feeds List of feeds to be hashed\\n     */\\n    function getFeedsDigest(FeedData[] memory feeds) public pure override returns (bytes32) {\\n        return keccak256(abi.encode(feeds));\\n    }\\n\\n    /**\\n     * @dev Updates the list of allowed oracle signers\\n     * @param toAdd List of signers to be added to the oracle signers list\\n     * @param toRemove List of signers to be removed from the oracle signers list\\n     * @notice The list of signers to be added will be processed first to make sure no undesired signers are allowed\\n     */\\n    function setOracleSigners(address[] memory toAdd, address[] memory toRemove) external override auth {\\n        _addOracleSigners(toAdd);\\n        _removeOracleSigners(toRemove);\\n    }\\n\\n    /**\\n     * @dev Adds a list of addresses to the signers allow-list\\n     * @param signers List of addresses to be added to the signers allow-list\\n     */\\n    function _addOracleSigners(address[] memory signers) internal {\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            address signer = signers[i];\\n            require(signer != address(0), 'SIGNER_ADDRESS_ZERO');\\n            if (_signers.add(signer)) emit OracleSignerAllowed(signer);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a list of addresses from the signers allow-list\\n     * @param signers List of addresses to be removed from the signers allow-list\\n     */\\n    function _removeOracleSigners(address[] memory signers) internal {\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            address signer = signers[i];\\n            if (_signers.remove(signer)) emit OracleSignerDisallowed(signer);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tries fetching a price for base/quote pair from any potential encoded off-chain oracle data. Otherwise\\n     * it fallbacks to the smart vault's price oracle. Off-chain oracle data is only used when it can be trusted, this\\n     * is: well-formed, signed by an allowed oracle, and up-to-date.\\n     */\\n    function _getPrice(address base, address quote) internal view virtual override returns (uint256) {\\n        (FeedData[] memory feeds, address signer) = _getEncodedOracleData();\\n\\n        if (signer != address(0) && isOracleSigner(signer)) {\\n            for (uint256 i = 0; i < feeds.length; i++) {\\n                FeedData memory feed = feeds[i];\\n                if (feed.base == base && feed.quote == quote) {\\n                    require(feed.deadline >= block.timestamp, 'ORACLE_FEED_OUTDATED');\\n                    return feed.rate;\\n                }\\n            }\\n        }\\n\\n        return smartVault.getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Decodes any potential encoded off-chain oracle data.\\n     * @return feeds List of feeds encoded in the extra calldata.\\n     * @return signer Address recovered from the encoded signature in the extra calldata. A zeroed address is invalid.\\n     */\\n    function _getEncodedOracleData() private pure returns (FeedData[] memory feeds, address signer) {\\n        feeds = _getOracleFeeds();\\n        if (feeds.length == 0) return (feeds, address(0));\\n\\n        bytes32 message = ECDSA.toEthSignedMessageHash(getFeedsDigest(feeds));\\n        uint8 v = _getOracleSignatureV();\\n        bytes32 r = _getOracleSignatureR();\\n        bytes32 s = _getOracleSignatureS();\\n        signer = ecrecover(message, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Extracts the list of feeds encoded in the extra calldata. This function returns bogus data if there is no\\n     * extra calldata in place. The last feed is stored using the first four words right before the feeds length.\\n     */\\n    function _getOracleFeeds() private pure returns (FeedData[] memory feeds) {\\n        // Since the decoding functions could return garbage, if the calldata length is smaller than the potential\\n        // decoded feeds length, we can assume it's garbage and that there is no encoded feeds actually\\n        uint256 length = _getFeedsLength();\\n        if (msg.data.length < length) return new FeedData[](0);\\n\\n        feeds = new FeedData[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 pos = 4 * (length - i);\\n            FeedData memory feed = feeds[i];\\n            feed.base = address(uint160(uint256(_decodeCalldataWord(pos + 3))));\\n            feed.quote = address(uint160(uint256(_decodeCalldataWord(pos + 2))));\\n            feed.rate = uint256(_decodeCalldataWord(pos + 1));\\n            feed.deadline = uint256(_decodeCalldataWord(pos));\\n        }\\n    }\\n\\n    /**\\n     * @dev Extracts the number of feeds encoded in the extra calldata. This function returns bogus data if there is no\\n     * extra calldata in place. The number of encoded feeds is encoded in the 4th word from the calldata end.\\n     */\\n    function _getFeedsLength() private pure returns (uint256) {\\n        return uint256(_decodeCalldataWord(3));\\n    }\\n\\n    /**\\n     * @dev Extracts the component V of the oracle signature parameter from extra calldata. This function returns bogus\\n     * data if no signature is included. This is not a security risk, as that data would not be considered a valid\\n     * signature in the first place. The component V is encoded in the 3rd word from the calldata end.\\n     */\\n    function _getOracleSignatureV() private pure returns (uint8) {\\n        return uint8(uint256(_decodeCalldataWord(2)));\\n    }\\n\\n    /**\\n     * @dev Extracts the component R of the oracle signature parameter from extra calldata. This function returns bogus\\n     * data if no signature is included. This is not a security risk, as that data would not be considered a valid\\n     * signature in the first place. The component R is encoded in the 2nd word from the calldata end.\\n     */\\n    function _getOracleSignatureR() private pure returns (bytes32) {\\n        return _decodeCalldataWord(1);\\n    }\\n\\n    /**\\n     * @dev Extracts the component S of the oracle signature parameter from extra calldata. This function returns bogus\\n     * data if no signature is included. This is not a security risk, as that data would not be considered a valid\\n     * signature in the first place. The component S is encoded in the last word from the calldata end.\\n     */\\n    function _getOracleSignatureS() private pure returns (bytes32) {\\n        return _decodeCalldataWord(0);\\n    }\\n\\n    /**\\n     * @dev Returns the nth 256 bit word starting from the calldata end (0 means the last calldata word).\\n     * This function returns bogus data if no signature is included.\\n     */\\n    function _decodeCalldataWord(uint256 n) private pure returns (bytes32 result) {\\n        assembly {\\n            result := calldataload(sub(calldatasize(), mul(0x20, add(n, 1))))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/RelayedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\n\\nimport './BaseAction.sol';\\nimport './interfaces/IRelayedAction.sol';\\n\\n/**\\n * @dev Relayers config for actions. It allows redeeming consumed gas based on an allow-list of relayers and cost limit.\\n */\\nabstract contract RelayedAction is IRelayedAction, BaseAction {\\n    using FixedPoint for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Base gas amount charged to cover default amounts\\n    // solhint-disable-next-line func-name-mixedcase\\n    function BASE_GAS() external view virtual returns (uint256);\\n\\n    // Note to be used to mark tx cost payments\\n    bytes private constant REDEEM_GAS_NOTE = bytes('RELAYER');\\n\\n    // Variable used to allow a better developer experience to reimburse tx gas cost\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private __initialGas__;\\n\\n    // Gas price limit expressed in the native token\\n    uint256 private _gasPriceLimit;\\n\\n    // Priority fee limit expressed in the native token\\n    uint256 private _priorityFeeLimit;\\n\\n    // Total transaction cost limit expressed in the native token\\n    uint256 private _txCostLimit;\\n\\n    // Token that will be used to redeem gas costs\\n    address private _gasToken;\\n\\n    // Allows relaying transactions even if there is not enough balance in the Smart Vault to pay for the tx gas cost\\n    bool private _permissiveMode;\\n\\n    // List of allowed relayers\\n    EnumerableSet.AddressSet private _relayers;\\n\\n    /**\\n     * @dev Relayed action config. Only used in the constructor.\\n     * @param gasPriceLimit Gas price limit expressed in the native token\\n     * @param priorityFeeLimit Priority fee limit expressed in the native token\\n     * @param txCostLimit Transaction cost limit to be set\\n     * @param gasToken Token that will be used to redeem gas costs\\n     * @param permissiveMode Whether the permissive mode is active\\n     * @param relayers List of relayers to be added to the allow-list\\n     */\\n    struct RelayConfig {\\n        uint256 gasPriceLimit;\\n        uint256 priorityFeeLimit;\\n        uint256 txCostLimit;\\n        address gasToken;\\n        bool permissiveMode;\\n        address[] relayers;\\n    }\\n\\n    /**\\n     * @dev Creates a new relayers config\\n     */\\n    constructor(RelayConfig memory config) {\\n        _setRelayGasLimit(config.gasPriceLimit, config.priorityFeeLimit);\\n        _setRelayTxCostLimit(config.txCostLimit);\\n        _setRelayGasToken(config.gasToken);\\n        _setRelayPermissiveMode(config.permissiveMode);\\n        _addRelayers(config.relayers);\\n    }\\n\\n    /**\\n     * @dev Tells the action gas limits\\n     */\\n    function getRelayGasLimits() public view override returns (uint256 gasPriceLimit, uint256 priorityFeeLimit) {\\n        return (_gasPriceLimit, _priorityFeeLimit);\\n    }\\n\\n    /**\\n     * @dev Tells the transaction cost limit\\n     */\\n    function getRelayTxCostLimit() public view override returns (uint256) {\\n        return _txCostLimit;\\n    }\\n\\n    /**\\n     * @dev Tells the relayed paying gas token\\n     */\\n    function getRelayGasToken() public view override returns (address) {\\n        return _gasToken;\\n    }\\n\\n    /**\\n     * @dev Tells whether the permissive relayed mode is active\\n     */\\n    function isRelayPermissiveModeActive() public view override returns (bool) {\\n        return _permissiveMode;\\n    }\\n\\n    /**\\n     * @dev Tells if a relayer is allowed or not\\n     * @param relayer Address of the relayer to be checked\\n     */\\n    function isRelayer(address relayer) public view override returns (bool) {\\n        return _relayers.contains(relayer);\\n    }\\n\\n    /**\\n     * @dev Tells the list of allowed relayers\\n     */\\n    function getRelayers() public view override returns (address[] memory) {\\n        return _relayers.values();\\n    }\\n\\n    /**\\n     * @dev Sets the relay gas limits\\n     * @param gasPriceLimit New relay gas price limit to be set\\n     * @param priorityFeeLimit New relay priority fee limit to be set\\n     */\\n    function setRelayGasLimits(uint256 gasPriceLimit, uint256 priorityFeeLimit) external override auth {\\n        _setRelayGasLimit(gasPriceLimit, priorityFeeLimit);\\n    }\\n\\n    /**\\n     * @dev Sets the relay transaction cost limit\\n     * @param txCostLimit New relay transaction cost limit to be set\\n     */\\n    function setRelayTxCostLimit(uint256 txCostLimit) external override auth {\\n        _setRelayTxCostLimit(txCostLimit);\\n    }\\n\\n    /**\\n     * @dev Sets the relay gas token\\n     * @param token Address of the token to be set as the relay gas token\\n     */\\n    function setRelayGasToken(address token) external override auth {\\n        _setRelayGasToken(token);\\n    }\\n\\n    /**\\n     * @dev Sets the relay permissive mode\\n     * @param active Whether the relay permissive mode should be active or not\\n     */\\n    function setRelayPermissiveMode(bool active) external override auth {\\n        _setRelayPermissiveMode(active);\\n    }\\n\\n    /**\\n     * @dev Updates the list of allowed relayers\\n     * @param relayersToAdd List of relayers to be added to the allow-list\\n     * @param relayersToRemove List of relayers to be removed from the allow-list\\n     * @notice The list of relayers to be added will be processed first to make sure no undesired relayers are allowed\\n     */\\n    function setRelayers(address[] memory relayersToAdd, address[] memory relayersToRemove) external override auth {\\n        _addRelayers(relayersToAdd);\\n        _removeRelayers(relayersToRemove);\\n    }\\n\\n    /**\\n     * @dev Reverts if the tx fee does not comply with the configured gas limits\\n     */\\n    function _validateGasLimit() internal view {\\n        require(_areGasLimitsValid(), 'ACTION_GAS_LIMITS_EXCEEDED');\\n    }\\n\\n    /**\\n     * @dev Tells if the tx fee data is compliant with the configured gas limits\\n     */\\n    function _areGasLimitsValid() internal view returns (bool) {\\n        return _isGasPriceValid() && _isPriorityFeeValid();\\n    }\\n\\n    /**\\n     * @dev Tells if the tx gas price is compliant with the configured gas price limit\\n     */\\n    function _isGasPriceValid() internal view returns (bool) {\\n        if (_gasPriceLimit == 0) return true;\\n        return tx.gasprice <= _gasPriceLimit;\\n    }\\n\\n    /**\\n     * @dev Tells if the tx priority fee is compliant with the configured priority fee limit\\n     */\\n    function _isPriorityFeeValid() internal view returns (bool) {\\n        if (_priorityFeeLimit == 0) return true;\\n        return tx.gasprice - block.basefee <= _priorityFeeLimit;\\n    }\\n\\n    /**\\n     * @dev Reverts if the tx cost does not comply with the configured limit\\n     */\\n    function _validateTxCostLimit(uint256 totalCost) internal view {\\n        require(_isTxCostValid(totalCost), 'ACTION_TX_COST_LIMIT_EXCEEDED');\\n    }\\n\\n    /**\\n     * @dev Tells if a given transaction cost is compliant with the configured transaction cost limit\\n     * @param totalCost Transaction cost in native token to be checked\\n     */\\n    function _isTxCostValid(uint256 totalCost) internal view returns (bool) {\\n        return _txCostLimit == 0 || totalCost <= _txCostLimit;\\n    }\\n\\n    /**\\n     * @dev Initializes relayed txs, only when the sender is marked as a relayer\\n     */\\n    function _beforeAction(address, uint256) internal virtual override {\\n        if (!isRelayer(msg.sender)) return;\\n        __initialGas__ = gasleft();\\n        _validateGasLimit();\\n    }\\n\\n    /**\\n     * @dev Reimburses the tx cost, only when the sender is marked as a relayer\\n     */\\n    function _afterAction(address, uint256) internal virtual override {\\n        if (!isRelayer(msg.sender)) return;\\n        require(__initialGas__ > 0, 'ACTION_RELAY_NOT_INITIALIZED');\\n\\n        uint256 totalGas = RelayedAction(this).BASE_GAS() + __initialGas__ - gasleft();\\n        uint256 totalCostNative = totalGas * tx.gasprice;\\n        _validateTxCostLimit(totalCostNative);\\n\\n        uint256 price = _isWrappedOrNative(_gasToken) ? FixedPoint.ONE : _getPrice(_wrappedNativeToken(), _gasToken);\\n        uint256 totalCostGasToken = totalCostNative.mulDown(price);\\n        if (getSmartVaultBalance(_gasToken) >= totalCostGasToken || !_permissiveMode) {\\n            smartVault.withdraw(_gasToken, totalCostGasToken, smartVault.feeCollector(), REDEEM_GAS_NOTE);\\n        }\\n\\n        delete __initialGas__;\\n    }\\n\\n    /**\\n     * @dev Sets the relay gas limits\\n     * @param gasPriceLimit New relay gas price limit to be set\\n     * @param priorityFeeLimit New relay priority fee limit to be set\\n     */\\n    function _setRelayGasLimit(uint256 gasPriceLimit, uint256 priorityFeeLimit) internal {\\n        _gasPriceLimit = gasPriceLimit;\\n        _priorityFeeLimit = priorityFeeLimit;\\n        emit RelayGasLimitsSet(gasPriceLimit, priorityFeeLimit);\\n    }\\n\\n    /**\\n     * @dev Sets the relay transaction cost limit\\n     * @param txCostLimit New relay transaction cost limit to be set\\n     */\\n    function _setRelayTxCostLimit(uint256 txCostLimit) internal {\\n        _txCostLimit = txCostLimit;\\n        emit RelayTxCostLimitSet(txCostLimit);\\n    }\\n\\n    /**\\n     * @dev Sets the relay gas token\\n     * @param token Address of the token to be set as the relay gas token\\n     */\\n    function _setRelayGasToken(address token) internal {\\n        _gasToken = token;\\n        emit RelayGasTokenSet(token);\\n    }\\n\\n    /**\\n     * @dev Sets the relay permissive mode\\n     * @param active Whether the relay permissive mode should be active or not\\n     */\\n    function _setRelayPermissiveMode(bool active) internal {\\n        _permissiveMode = active;\\n        emit RelayPermissiveModeSet(active);\\n    }\\n\\n    /**\\n     * @dev Adds a list of addresses to the relayers allow-list\\n     * @param relayers List of addresses to be added to the allow-list\\n     */\\n    function _addRelayers(address[] memory relayers) internal {\\n        for (uint256 i = 0; i < relayers.length; i++) {\\n            address relayer = relayers[i];\\n            require(relayer != address(0), 'RELAYER_ADDRESS_ZERO');\\n            if (_relayers.add(relayer)) emit RelayerAllowed(relayer);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a list of addresses from the relayers allow-list\\n     * @param relayers List of addresses to be removed from the allow-list\\n     */\\n    function _removeRelayers(address[] memory relayers) internal {\\n        for (uint256 i = 0; i < relayers.length; i++) {\\n            address relayer = relayers[i];\\n            if (_relayers.remove(relayer)) emit RelayerDisallowed(relayer);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/TimeLockedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport './BaseAction.sol';\\nimport './interfaces/ITimeLockedAction.sol';\\n\\n/**\\n * @dev Time lock config for actions. It allows limiting the frequency of an action.\\n */\\nabstract contract TimeLockedAction is ITimeLockedAction, BaseAction {\\n    // Period in seconds that must pass after an action has been executed\\n    uint256 private _delay;\\n\\n    // Future timestamp in which the action can be executed\\n    uint256 private _expiresAt;\\n\\n    /**\\n     * @dev Time lock config params. Only used in the constructor.\\n     * @param delay Period in seconds that must pass after an action has been executed\\n     * @param nextExecutionTimestamp Next time when the action can be executed\\n     */\\n    struct TimeLockConfig {\\n        uint256 delay;\\n        uint256 nextExecutionTimestamp;\\n    }\\n\\n    /**\\n     * @dev Creates a new time locked action\\n     */\\n    constructor(TimeLockConfig memory config) {\\n        _setTimeLockDelay(config.delay);\\n        _setTimeLockExpiration(config.nextExecutionTimestamp);\\n    }\\n\\n    /**\\n     * @dev Tells if a time-lock is expired or not\\n     */\\n    function isTimeLockExpired() public view override returns (bool) {\\n        return block.timestamp >= _expiresAt;\\n    }\\n\\n    /**\\n     * @dev Tells the time-lock information\\n     */\\n    function getTimeLock() public view override returns (uint256 delay, uint256 expiresAt) {\\n        return (_delay, _expiresAt);\\n    }\\n\\n    /**\\n     * @dev Sets the time-lock delay\\n     * @param delay New delay to be set\\n     */\\n    function setTimeLockDelay(uint256 delay) external override auth {\\n        _setTimeLockDelay(delay);\\n    }\\n\\n    /**\\n     * @dev Sets the time-lock expiration timestamp\\n     * @param timestamp New expiration timestamp to be set\\n     */\\n    function setTimeLockExpiration(uint256 timestamp) external override auth {\\n        _setTimeLockExpiration(timestamp);\\n    }\\n\\n    /**\\n     * @dev Reverts if the given time-lock is not expired\\n     */\\n    function _beforeAction(address, uint256) internal virtual override {\\n        require(isTimeLockExpired(), 'ACTION_TIME_LOCK_NOT_EXPIRED');\\n    }\\n\\n    /**\\n     * @dev Bumps the time-lock expire date\\n     */\\n    function _afterAction(address, uint256) internal virtual override {\\n        if (_delay > 0) {\\n            uint256 expiration = (_expiresAt > 0 ? _expiresAt : block.timestamp) + _delay;\\n            _setTimeLockExpiration(expiration);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the time-lock delay\\n     * @param delay New delay to be set\\n     */\\n    function _setTimeLockDelay(uint256 delay) internal {\\n        _delay = delay;\\n        emit TimeLockDelaySet(delay);\\n    }\\n\\n    /**\\n     * @dev Sets the time-lock expiration timestamp\\n     * @param timestamp New expiration timestamp to be set\\n     */\\n    function _setTimeLockExpiration(uint256 timestamp) internal {\\n        _expiresAt = timestamp;\\n        emit TimeLockExpirationSet(timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/TokenIndexedAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@mimic-fi/v2-helpers/contracts/auth/Authorizer.sol';\\n\\nimport './BaseAction.sol';\\nimport './interfaces/ITokenIndexedAction.sol';\\n\\n/**\\n * @dev Token indexed actions. It defines a token acceptance list to tell which are the tokens supported by the\\n * action. Tokens acceptance can be configured either as an allow list or as a deny list.\\n */\\nabstract contract TokenIndexedAction is ITokenIndexedAction, BaseAction {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Acceptance list type\\n    TokensAcceptanceType private _acceptanceType;\\n\\n    // Enumerable set of tokens included in the acceptance list\\n    EnumerableSet.AddressSet private _tokens;\\n\\n    // Enumerable set of sources where tokens balances should be checked. Only used for deny lists.\\n    EnumerableSet.AddressSet private _sources;\\n\\n    /**\\n     * @dev Token index config. Only used in the constructor.\\n     * @param tokens List of token addresses to be set for the acceptance list\\n     * @param sources List of sources where tokens balances should be checked. Only used for deny lists.\\n     * @param acceptanceType Token acceptance type to be set\\n     */\\n    struct TokenIndexConfig {\\n        address[] tokens;\\n        address[] sources;\\n        TokensAcceptanceType acceptanceType;\\n    }\\n\\n    /**\\n     * @dev Creates a new token indexed action\\n     */\\n    constructor(TokenIndexConfig memory config) {\\n        _addTokens(config.tokens);\\n        _addSources(config.sources);\\n        _setTokensAcceptanceType(config.acceptanceType);\\n    }\\n\\n    /**\\n     * @dev Tells the list of tokens included in an acceptance config\\n     */\\n    function getTokensAcceptanceType() public view override returns (TokensAcceptanceType) {\\n        return _acceptanceType;\\n    }\\n\\n    /**\\n     * @dev Tells if the requested token is compliant with the tokens acceptance list\\n     * @param token Address of the token to be checked\\n     */\\n    function isTokenAllowed(address token) public view override returns (bool) {\\n        return _acceptanceType == TokensAcceptanceType.AllowList ? _tokens.contains(token) : !_tokens.contains(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of tokens included in an acceptance config\\n     */\\n    function getTokensAcceptanceList() public view override returns (address[] memory) {\\n        return _tokens.values();\\n    }\\n\\n    /**\\n     * @dev Tells the list of sources included in an acceptance config\\n     */\\n    function getTokensIndexSources() public view override returns (address[] memory) {\\n        return _sources.values();\\n    }\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the action\\n     * @param acceptanceType New token acceptance type to be set\\n     */\\n    function setTokensAcceptanceType(TokensAcceptanceType acceptanceType) external override auth {\\n        _setTokensAcceptanceType(acceptanceType);\\n    }\\n\\n    /**\\n     * @dev Updates the list of tokens of the tokens acceptance list\\n     * @param toAdd List of tokens to be added to the acceptance list\\n     * @param toRemove List of tokens to be removed from the acceptance list\\n     * @notice The list of tokens to be added will be processed first\\n     */\\n    function setTokensAcceptanceList(address[] memory toAdd, address[] memory toRemove) external override auth {\\n        _addTokens(toAdd);\\n        _removeTokens(toRemove);\\n    }\\n\\n    /**\\n     * @dev Updates the list of sources of the tokens index config\\n     * @param toAdd List of sources to be added to the acceptance list\\n     * @param toRemove List of sources to be removed from the acceptance list\\n     * @notice The list of sources to be added will be processed first\\n     */\\n    function setTokensIndexSources(address[] memory toAdd, address[] memory toRemove) external override auth {\\n        _addSources(toAdd);\\n        _removeSources(toRemove);\\n    }\\n\\n    /**\\n     * @dev Reverts if the requested token does not comply with the tokens acceptance list\\n     */\\n    function _beforeAction(address token, uint256) internal virtual override {\\n        require(isTokenAllowed(token), 'ACTION_TOKEN_NOT_ALLOWED');\\n    }\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the action\\n     * @param acceptanceType New token acceptance type to be set\\n     */\\n    function _setTokensAcceptanceType(TokensAcceptanceType acceptanceType) private {\\n        _acceptanceType = acceptanceType;\\n        emit TokensAcceptanceTypeSet(acceptanceType);\\n    }\\n\\n    /**\\n     * @dev Adds a list of addresses to the tokens acceptance list\\n     * @param tokens List of addresses to be added to the acceptance list\\n     */\\n    function _addTokens(address[] memory tokens) private {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            require(token != address(0), 'TOKEN_ADDRESS_ZERO');\\n            if (_tokens.add(token)) emit TokensAcceptanceAdded(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a list of addresses from the tokens acceptance list\\n     * @param tokens List of addresses to be removed from the acceptance list\\n     */\\n    function _removeTokens(address[] memory tokens) private {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            if (_tokens.remove(token)) emit TokensAcceptanceRemoved(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds a list of addresses to the sources list\\n     * @param sources List of addresses to be added to the source list\\n     */\\n    function _addSources(address[] memory sources) private {\\n        for (uint256 i = 0; i < sources.length; i++) {\\n            address source = sources[i];\\n            require(source != address(0), 'SOURCE_ADDRESS_ZERO');\\n            if (_sources.add(source)) emit TokenIndexSourceAdded(source);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a list of addresses from the sources allow-list\\n     * @param sources List of addresses to be removed from the allow-list\\n     */\\n    function _removeSources(address[] memory sources) private {\\n        for (uint256 i = 0; i < sources.length; i++) {\\n            address source = sources[i];\\n            if (_sources.remove(source)) emit TokenIndexSourceRemoved(source);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/base/TokenThresholdAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\n\\nimport './BaseAction.sol';\\nimport './interfaces/ITokenThresholdAction.sol';\\n\\n/**\\n * @dev Token threshold action. It mainly works with token threshold configs that can be used to tell if\\n * a specific token amount is compliant with certain minimum or maximum values. Token threshold actions\\n * make use of a default threshold config as a fallback in case there is no custom threshold defined for the token\\n * being evaluated.\\n */\\nabstract contract TokenThresholdAction is ITokenThresholdAction, BaseAction {\\n    using FixedPoint for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Default threshold\\n    Threshold private _defaultThreshold;\\n\\n    // Custom thresholds per token\\n    TokenToThresholdMap private _customThresholds;\\n\\n    /**\\n     * @dev Enumerable map of tokens to threshold configs\\n     */\\n    struct TokenToThresholdMap {\\n        EnumerableSet.AddressSet tokens;\\n        mapping (address => Threshold) thresholds;\\n    }\\n\\n    /**\\n     * @dev Custom token threshold config\\n     */\\n    struct CustomThreshold {\\n        address token;\\n        Threshold threshold;\\n    }\\n\\n    /**\\n     * @dev Token threshold config. Only used in the constructor.\\n     * @param defaultThreshold Default threshold to be set\\n     * @param tokens List of tokens to define a custom threshold for\\n     * @param thresholds List of custom thresholds to define for each token\\n     */\\n    struct TokenThresholdConfig {\\n        Threshold defaultThreshold;\\n        CustomThreshold[] customThresholds;\\n    }\\n\\n    /**\\n     * @dev Creates a new token threshold action\\n     */\\n    constructor(TokenThresholdConfig memory config) {\\n        if (config.defaultThreshold.token != address(0)) {\\n            _setDefaultTokenThreshold(config.defaultThreshold);\\n        }\\n\\n        for (uint256 i = 0; i < config.customThresholds.length; i++) {\\n            _setCustomTokenThreshold(config.customThresholds[i].token, config.customThresholds[i].threshold);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultTokenThreshold() public view override returns (Threshold memory) {\\n        return _defaultThreshold;\\n    }\\n\\n    /**\\n     * @dev Tells the token threshold defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function getCustomTokenThreshold(address token)\\n        public\\n        view\\n        override\\n        returns (bool exists, Threshold memory threshold)\\n    {\\n        threshold = _customThresholds.thresholds[token];\\n        return (_customThresholds.tokens.contains(token), threshold);\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom token thresholds set\\n     */\\n    function getCustomTokenThresholds()\\n        public\\n        view\\n        override\\n        returns (address[] memory tokens, Threshold[] memory thresholds)\\n    {\\n        tokens = new address[](_customThresholds.tokens.length());\\n        thresholds = new Threshold[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            (address token, Threshold memory threshold) = _getTokenThresholdAt(i);\\n            tokens[i] = token;\\n            thresholds[i] = threshold;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param threshold Threshold config to be set as the default one. Threshold token cannot be zero and max amount\\n     * must be greater than or equal to the min amount, with the exception of max being set to zero in which case it\\n     * will be ignored.\\n     */\\n    function setDefaultTokenThreshold(Threshold memory threshold) external override auth {\\n        _setDefaultTokenThreshold(threshold);\\n    }\\n\\n    /**\\n     * @dev Unsets the default threshold, it ignores the request if it was not set\\n     */\\n    function unsetDefaultTokenThreshold() external override auth {\\n        _unsetDefaultTokenThreshold();\\n    }\\n\\n    /**\\n     * @dev Sets a list of tokens thresholds\\n     * @param tokens List of token addresses to set its custom thresholds\\n     * @param thresholds Lists of thresholds be set for each token. Threshold token cannot be zero and max amount\\n     * must be greater than or equal to the min amount, with the exception of max being set to zero in which case it\\n     * will be ignored.\\n     */\\n    function setCustomTokenThresholds(address[] memory tokens, Threshold[] memory thresholds) external override auth {\\n        _setCustomTokenThresholds(tokens, thresholds);\\n    }\\n\\n    /**\\n     * @dev Unsets a list of custom threshold tokens, it ignores nonexistent custom thresholds\\n     * @param tokens List of token addresses to unset its custom thresholds\\n     */\\n    function unsetCustomTokenThresholds(address[] memory tokens) external override auth {\\n        _unsetCustomTokenThresholds(tokens);\\n    }\\n\\n    /**\\n     * @dev Returns the token-threshold that should be applied for a token. If there is a custom threshold set it will\\n     * prioritized over the default threshold. If non of them are defined a null threshold is returned.\\n     * @param token Address of the token querying the threshold of\\n     */\\n    function _getApplicableTokenThreshold(address token) internal view returns (Threshold memory) {\\n        (bool exists, Threshold memory threshold) = getCustomTokenThreshold(token);\\n        return exists ? threshold : getDefaultTokenThreshold();\\n    }\\n\\n    /**\\n     * @dev Tells if a token and amount are compliant with a threshold, returns true if the threshold is not set\\n     * @param threshold Threshold to be evaluated\\n     * @param token Address of the token to be validated\\n     * @param amount Token amount to be validated\\n     */\\n    function _isTokenThresholdValid(Threshold memory threshold, address token, uint256 amount)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (threshold.token == address(0)) return true;\\n        uint256 price = _getPrice(token, threshold.token);\\n        uint256 convertedAmount = amount.mulDown(price);\\n        return convertedAmount >= threshold.min && (threshold.max == 0 || convertedAmount <= threshold.max);\\n    }\\n\\n    /**\\n     * @dev Reverts if the requested token and amount does not comply with the given threshold config\\n     */\\n    function _beforeAction(address token, uint256 amount) internal virtual override {\\n        Threshold memory threshold = _getApplicableTokenThreshold(token);\\n        require(_isTokenThresholdValid(threshold, token, amount), 'ACTION_TOKEN_THRESHOLD_NOT_MET');\\n    }\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param threshold Threshold config to be set as the default one. Threshold token cannot be zero and max amount\\n     * must be greater than or equal to the min amount, with the exception of max being set to zero in which case it\\n     * will be ignored.\\n     */\\n    function _setDefaultTokenThreshold(Threshold memory threshold) internal {\\n        _validateThreshold(threshold);\\n        _defaultThreshold = threshold;\\n        emit DefaultTokenThresholdSet(threshold);\\n    }\\n\\n    /**\\n     * @dev Unsets a the default threshold config\\n     */\\n    function _unsetDefaultTokenThreshold() internal {\\n        delete _defaultThreshold;\\n        emit DefaultTokenThresholdUnset();\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom tokens thresholds\\n     * @param tokens List of token addresses to set its custom thresholds\\n     * @param thresholds Lists of thresholds be set for each token\\n     */\\n    function _setCustomTokenThresholds(address[] memory tokens, Threshold[] memory thresholds) internal {\\n        require(tokens.length == thresholds.length, 'TOKEN_THRESHOLDS_INPUT_INV_LEN');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomTokenThreshold(tokens[i], thresholds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom of tokens thresholds\\n     * @param token Address of the token to set a custom threshold for\\n     * @param threshold Thresholds be set. Threshold token cannot be zero and max amount must be greater than or\\n     * equal to the min amount, with the exception of max being set to zero in which case it will be ignored.\\n     */\\n    function _setCustomTokenThreshold(address token, Threshold memory threshold) internal {\\n        require(token != address(0), 'THRESHOLD_TOKEN_ADDRESS_ZERO');\\n        _validateThreshold(threshold);\\n\\n        _customThresholds.thresholds[token] = threshold;\\n        _customThresholds.tokens.add(token);\\n        emit CustomTokenThresholdSet(token, threshold);\\n    }\\n\\n    /**\\n     * @dev Unsets a list of custom threshold tokens, it ignores nonexistent custom thresholds\\n     * @param tokens List of token addresses to unset its custom thresholds\\n     */\\n    function _unsetCustomTokenThresholds(address[] memory tokens) internal {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            delete _customThresholds.thresholds[token];\\n            if (_customThresholds.tokens.remove(token)) emit CustomTokenThresholdUnset(token);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the token-threshold pair stored at position `i` in the map. Note that there are no guarantees on\\n     * the ordering of entries inside the array, and it may change when more entries are added or removed. O(1).\\n     * @param i Index to be accessed in the enumerable map, must be strictly less than its length\\n     */\\n    function _getTokenThresholdAt(uint256 i) private view returns (address, Threshold memory) {\\n        address token = _customThresholds.tokens.at(i);\\n        return (token, _customThresholds.thresholds[token]);\\n    }\\n\\n    /**\\n     * @dev Reverts if a threshold is not considered valid, that is if the token is zero or if the max amount is greater\\n     * than zero but lower than the min amount.\\n     */\\n    function _validateThreshold(Threshold memory threshold) private pure {\\n        require(threshold.token != address(0), 'INVALID_THRESHOLD_TOKEN_ZERO');\\n        require(threshold.max == 0 || threshold.max >= threshold.min, 'INVALID_THRESHOLD_MAX_LT_MIN');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/bridge/BaseBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/Denominations.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/EnumerableMap.sol';\\n\\nimport './interfaces/IBaseBridger.sol';\\nimport '../Action.sol';\\n\\n/**\\n * @title Bridger action\\n * @dev Action that offers the basic components for more detailed bridge actions.\\n */\\nabstract contract BaseBridger is IBaseBridger, Action {\\n    using FixedPoint for uint256;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using EnumerableMap for EnumerableMap.AddressToAddressMap;\\n\\n    // Ethereum mainnet chain ID\\n    uint256 internal constant MAINNET_CHAIN_ID = 1;\\n\\n    // Default destination chain\\n    uint256 private _defaultDestinationChain;\\n\\n    // Destination chain per token address\\n    EnumerableMap.AddressToUintMap private _customDestinationChains;\\n\\n    /**\\n     * @dev Custom destination chain config\\n     */\\n    struct CustomDestinationChain {\\n        address token;\\n        uint256 destinationChain;\\n    }\\n\\n    /**\\n     * @dev Bridger action config\\n     */\\n    struct BridgerConfig {\\n        uint256 destinationChain;\\n        CustomDestinationChain[] customDestinationChains;\\n        ActionConfig actionConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a swapper action\\n     */\\n    constructor(BridgerConfig memory config) Action(config.actionConfig) {\\n        _setDefaultDestinationChain(config.destinationChain);\\n\\n        for (uint256 i = 0; i < config.customDestinationChains.length; i++) {\\n            CustomDestinationChain memory customConfig = config.customDestinationChains[i];\\n            _setCustomDestinationChain(customConfig.token, customConfig.destinationChain);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultDestinationChain() public view override returns (uint256) {\\n        return _defaultDestinationChain;\\n    }\\n\\n    /**\\n     * @dev Tells the destination chain defined for a specific token\\n     */\\n    function getCustomDestinationChain(address token) public view override returns (bool, uint256) {\\n        return _customDestinationChains.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom destination chains set\\n     */\\n    function getCustomDestinationChains()\\n        public\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory destinationChains)\\n    {\\n        tokens = _customDestinationChains.keys();\\n        destinationChains = _customDestinationChains.values();\\n    }\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     */\\n    function setDefaultDestinationChain(uint256 destinationChain) external override auth {\\n        _setDefaultDestinationChain(destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomDestinationChains(address[] memory tokens, uint256[] memory destinationChains)\\n        external\\n        override\\n        auth\\n    {\\n        _setCustomDestinationChains(tokens, destinationChains);\\n    }\\n\\n    /**\\n     * @dev Tells the destination chain that should be used for a token\\n     */\\n    function _getApplicableDestinationChain(address token) internal view returns (uint256) {\\n        (bool exists, uint256 destinationChain) = getCustomDestinationChain(token);\\n        return exists ? destinationChain : getDefaultDestinationChain();\\n    }\\n\\n    /**\\n     * @dev Reverts if the token or the amount are zero\\n     */\\n    function _beforeAction(address token, uint256 amount) internal virtual override {\\n        super._beforeAction(token, amount);\\n        require(token != address(0), 'ACTION_TOKEN_ZERO');\\n        require(amount > 0, 'ACTION_AMOUNT_ZERO');\\n        require(_getApplicableDestinationChain(token) != 0, 'ACTION_DESTINATION_CHAIN_NOT_SET');\\n    }\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     * @param destinationChain Default destination chain to be set\\n     */\\n    function _setDefaultDestinationChain(uint256 destinationChain) internal {\\n        require(destinationChain != block.chainid, 'ACTION_BRIDGE_CURRENT_CHAIN_ID');\\n        _defaultDestinationChain = destinationChain;\\n        emit DefaultDestinationChainSet(destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom destination chains for a set of tokens\\n     * @param tokens List of addresses of the tokens to set the custom destination chain for\\n     * @param destinationChains List of destination chains to be set\\n     */\\n    function _setCustomDestinationChains(address[] memory tokens, uint256[] memory destinationChains) internal {\\n        require(tokens.length == destinationChains.length, 'ACTION_CHAIN_IDS_BAD_INPUT_LEN');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomDestinationChain(tokens[i], destinationChains[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom destination chain for a token\\n     * @param token Address of the token to set the custom destination chain for\\n     * @param destinationChain Destination chain to be set\\n     */\\n    function _setCustomDestinationChain(address token, uint256 destinationChain) internal {\\n        require(destinationChain != block.chainid, 'ACTION_BRIDGE_CURRENT_CHAIN_ID');\\n\\n        destinationChain == 0\\n            ? _customDestinationChains.remove(token)\\n            : _customDestinationChains.set(token, destinationChain);\\n\\n        emit CustomDestinationChainSet(token, destinationChain);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/bridge/HopBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-bridge-connector/contracts/IBridgeConnector.sol';\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/EnumerableMap.sol';\\n\\nimport './BaseBridger.sol';\\nimport './interfaces/IHopBridger.sol';\\n\\ncontract HopBridger is IHopBridger, BaseBridger {\\n    using FixedPoint for uint256;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using EnumerableMap for EnumerableMap.AddressToAddressMap;\\n\\n    // Base gas amount charged to cover gas payment\\n    uint256 public constant override BASE_GAS = 32e3;\\n\\n    // Relayer address\\n    address private _relayer;\\n\\n    // Maximum deadline in seconds\\n    uint256 private _maxDeadline;\\n\\n    // Default max fee pct\\n    uint256 private _defaultMaxFeePct;\\n\\n    // Default maximum slippage in fixed point\\n    uint256 private _defaultMaxSlippage;\\n\\n    // Maximum slippage per token address\\n    EnumerableMap.AddressToUintMap private _customMaxSlippages;\\n\\n    // Max fee percentage per token\\n    EnumerableMap.AddressToUintMap private _customMaxFeePcts;\\n\\n    // List of Hop entrypoints per token\\n    EnumerableMap.AddressToAddressMap private _tokenHopEntrypoints;\\n\\n    /**\\n     * @dev Custom max fee percentage config\\n     */\\n    struct CustomMaxFeePct {\\n        address token;\\n        uint256 maxFeePct;\\n    }\\n\\n    /**\\n     * @dev Custom max slippage config\\n     */\\n    struct CustomMaxSlippage {\\n        address token;\\n        uint256 maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Token Hop entrypoint config\\n     */\\n    struct TokenHopEntrypoint {\\n        address token;\\n        address entrypoint;\\n    }\\n\\n    /**\\n     * @dev Swapper action config\\n     */\\n    struct HopBridgerConfig {\\n        address relayer;\\n        uint256 maxFeePct;\\n        uint256 maxSlippage;\\n        uint256 maxDeadline;\\n        CustomMaxFeePct[] customMaxFeePcts;\\n        CustomMaxSlippage[] customMaxSlippages;\\n        TokenHopEntrypoint[] tokenHopEntrypoints;\\n        BridgerConfig bridgerConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a Hop bridger action\\n     */\\n    constructor(HopBridgerConfig memory config) BaseBridger(config.bridgerConfig) {\\n        _setRelayer(config.relayer);\\n        _setMaxDeadline(config.maxDeadline);\\n        _setDefaultMaxFeePct(config.maxFeePct);\\n        _setDefaultMaxSlippage(config.maxSlippage);\\n\\n        for (uint256 i = 0; i < config.customMaxSlippages.length; i++) {\\n            _setCustomMaxSlippage(config.customMaxSlippages[i].token, config.customMaxSlippages[i].maxSlippage);\\n        }\\n\\n        for (uint256 i = 0; i < config.customMaxFeePcts.length; i++) {\\n            CustomMaxFeePct memory customMaxFeePct = config.customMaxFeePcts[i];\\n            _setCustomMaxFeePct(customMaxFeePct.token, customMaxFeePct.maxFeePct);\\n        }\\n\\n        for (uint256 i = 0; i < config.tokenHopEntrypoints.length; i++) {\\n            TokenHopEntrypoint memory tokenHopEntrypoint = config.tokenHopEntrypoints[i];\\n            _setTokenHopEntrypoint(tokenHopEntrypoint.token, tokenHopEntrypoint.entrypoint);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the relayer address, only used when bridging from L1 to L2\\n     */\\n    function getRelayer() public view override returns (address) {\\n        return _relayer;\\n    }\\n\\n    /**\\n     * @dev Tells the max deadline\\n     */\\n    function getMaxDeadline() public view override returns (uint256) {\\n        return _maxDeadline;\\n    }\\n\\n    /**\\n     * @dev Tells the default max fee pct\\n     */\\n    function getDefaultMaxFeePct() public view override returns (uint256) {\\n        return _defaultMaxFeePct;\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultMaxSlippage() public view override returns (uint256) {\\n        return _defaultMaxSlippage;\\n    }\\n\\n    /**\\n     * @dev Tells the max fee percentage defined for a specific token\\n     */\\n    function getCustomMaxFeePct(address token) public view override returns (bool, uint256) {\\n        return _customMaxFeePcts.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom max fee percentages set\\n     */\\n    function getCustomMaxFeePcts()\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory maxFeePcts)\\n    {\\n        tokens = _customMaxFeePcts.keys();\\n        maxFeePcts = _customMaxFeePcts.values();\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     */\\n    function getCustomMaxSlippage(address token) public view override returns (bool, uint256) {\\n        return _customMaxSlippages.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom max slippages set\\n     */\\n    function getCustomMaxSlippages()\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory maxSlippages)\\n    {\\n        tokens = _customMaxSlippages.keys();\\n        maxSlippages = _customMaxSlippages.values();\\n    }\\n\\n    /**\\n     * @dev Tells Hop entrypoint set for a token\\n     */\\n    function getTokenHopEntrypoint(address token) public view override returns (bool exists, address entrypoint) {\\n        return _tokenHopEntrypoints.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of Hop entrypoints set for each token\\n     */\\n    function getTokenHopEntrypoints()\\n        external\\n        view\\n        override\\n        returns (address[] memory tokens, address[] memory entrypoints)\\n    {\\n        tokens = _tokenHopEntrypoints.keys();\\n        entrypoints = _tokenHopEntrypoints.values();\\n    }\\n\\n    /**\\n     * @dev Sets the relayer, only used when bridging from L1 to L2\\n     * @param relayer New relayer address to be set\\n     */\\n    function setRelayer(address relayer) external override auth {\\n        _setRelayer(relayer);\\n    }\\n\\n    /**\\n     * @dev Sets the max deadline\\n     * @param maxDeadline New max deadline to be set\\n     */\\n    function setMaxDeadline(uint256 maxDeadline) external override auth {\\n        _setMaxDeadline(maxDeadline);\\n    }\\n\\n    /**\\n     * @dev Sets the default max fee percentage\\n     * @param maxFeePct New default max fee percentage to be set\\n     */\\n    function setDefaultMaxFeePct(uint256 maxFeePct) external override auth {\\n        _setDefaultMaxFeePct(maxFeePct);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage New default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external override auth {\\n        _setDefaultMaxSlippage(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom max fee percentages\\n     * @param tokens List of token addresses to set a max fee percentage for\\n     * @param maxFeePcts List of max fee percentages to be set for each token\\n     */\\n    function setCustomMaxFeePcts(address[] memory tokens, uint256[] memory maxFeePcts) external override auth {\\n        _setCustomMaxFeePcts(tokens, maxFeePcts);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom max slippages\\n     * @param tokens List of token addresses to set a max slippage for\\n     * @param maxSlippages List of max slippages to be set for each token\\n     */\\n    function setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) external override auth {\\n        _setCustomMaxSlippages(tokens, maxSlippages);\\n    }\\n\\n    /**\\n     * @dev Sets a list of entrypoints for a list of tokens\\n     * @param tokens List of token addresses to set a Hop entrypoint for\\n     * @param entrypoints List of Hop entrypoint addresses to be set for each token\\n     */\\n    function setTokenHopEntrypoints(address[] memory tokens, address[] memory entrypoints) external override auth {\\n        _setTokenHopEntrypoints(tokens, entrypoints);\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address token, uint256 amount, uint256 slippage, uint256 fee)\\n        external\\n        override\\n        actionCall(token, amount)\\n    {\\n        _validateHopEntrypoint(token);\\n        _validateSlippage(token, slippage);\\n        _validateFee(token, amount, fee);\\n\\n        address entrypoint = _tokenHopEntrypoints.get(token);\\n        uint256 destinationChainId = _getApplicableDestinationChain(token);\\n\\n        bytes memory data;\\n        if (block.chainid == MAINNET_CHAIN_ID) {\\n            data = abi.encode(entrypoint, block.timestamp + getMaxDeadline(), getRelayer(), fee);\\n        } else {\\n            data = (destinationChainId == MAINNET_CHAIN_ID)\\n                ? abi.encode(entrypoint, fee)\\n                : abi.encode(entrypoint, fee, block.timestamp + getMaxDeadline());\\n        }\\n\\n        smartVault.bridge(\\n            uint8(IBridgeConnector.Source.Hop),\\n            destinationChainId,\\n            token,\\n            amount,\\n            ISmartVault.BridgeLimit.Slippage,\\n            slippage,\\n            address(smartVault),\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function _getApplicableMaxSlippage(address token) internal view returns (uint256) {\\n        (bool exists, uint256 maxSlippage) = getCustomMaxSlippage(token);\\n        return exists ? maxSlippage : getDefaultMaxSlippage();\\n    }\\n\\n    /**\\n     * @dev Tells the max fee percentage that should be used for a token\\n     */\\n    function _getApplicableMaxFeePct(address token) internal view returns (uint256) {\\n        (bool exists, uint256 maxFeePct) = getCustomMaxFeePct(token);\\n        return exists ? maxFeePct : getDefaultMaxFeePct();\\n    }\\n\\n    /**\\n     * @dev Tells if a token has a Hop entrypoint set\\n     */\\n    function _isHopEntrypointValid(address token) internal view returns (bool) {\\n        return _tokenHopEntrypoints.contains(token);\\n    }\\n\\n    /**\\n     * @dev Reverts if there is no Hop entrypoint set for a given token\\n     */\\n    function _validateHopEntrypoint(address token) internal view {\\n        require(_isHopEntrypointValid(token), 'ACTION_MISSING_HOP_ENTRYPOINT');\\n    }\\n\\n    /**\\n     * @dev Tells if a slippage is valid based on the max slippage configured for a token\\n     */\\n    function _isSlippageValid(address token, uint256 slippage) internal view returns (bool) {\\n        return slippage <= _getApplicableMaxSlippage(token);\\n    }\\n\\n    /**\\n     * @dev Reverts if the requested slippage is above the max slippage configured for a token\\n     */\\n    function _validateSlippage(address token, uint256 slippage) internal view {\\n        require(_isSlippageValid(token, slippage), 'ACTION_SLIPPAGE_TOO_HIGH');\\n    }\\n\\n    /**\\n     * @dev Tells if the requested fee is valid based on the max fee percentage configured for a token\\n     */\\n    function _isFeeValid(address token, uint256 amount, uint256 fee) internal view returns (bool) {\\n        return fee.divUp(amount) <= _getApplicableMaxFeePct(token);\\n    }\\n\\n    /**\\n     * @dev Reverts if the requested fee is above the max fee percentage configured for a token\\n     */\\n    function _validateFee(address token, uint256 amount, uint256 fee) internal view {\\n        require(_isFeeValid(token, amount, fee), 'ACTION_FEE_TOO_HIGH');\\n    }\\n\\n    /**\\n     * @dev Sets the relayer address, only used when bridging from L1 to L2\\n     */\\n    function _setRelayer(address relayer) internal {\\n        _relayer = relayer;\\n        emit RelayerSet(relayer);\\n    }\\n\\n    /**\\n     * @dev Sets the max deadline\\n     */\\n    function _setMaxDeadline(uint256 maxDeadline) internal {\\n        require(maxDeadline > 0, 'ACTION_MAX_DEADLINE_ZERO');\\n        _maxDeadline = maxDeadline;\\n        emit MaxDeadlineSet(maxDeadline);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function _setDefaultMaxSlippage(uint256 maxSlippage) internal {\\n        require(maxSlippage <= FixedPoint.ONE, 'ACTION_SLIPPAGE_ABOVE_ONE');\\n        _defaultMaxSlippage = maxSlippage;\\n        emit DefaultMaxSlippageSet(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets the default max fee percentage\\n     * @param maxFeePct Default max fee percentage to be set\\n     */\\n    function _setDefaultMaxFeePct(uint256 maxFeePct) internal {\\n        _defaultMaxFeePct = maxFeePct;\\n        emit DefaultMaxFeePctSet(maxFeePct);\\n    }\\n\\n    /**\\n     * @dev Sets a list of Hop entrypoints for a list of tokens\\n     * @param tokens List of token addresses to be set\\n     * @param entrypoints List of Hop entrypoint addresses to be set for each token\\n     */\\n    function _setTokenHopEntrypoints(address[] memory tokens, address[] memory entrypoints) internal {\\n        require(tokens.length == entrypoints.length, 'ACTION_HOP_ENTRYPOINTS_BAD_INPUT');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setTokenHopEntrypoint(tokens[i], entrypoints[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set a Hop entrypoint for a token\\n     * @param token Address of the token to set a Hop entrypoint for\\n     * @param entrypoint Hop entrypoint to be set\\n     */\\n    function _setTokenHopEntrypoint(address token, address entrypoint) internal {\\n        require(token != address(0), 'ACTION_HOP_TOKEN_ZERO');\\n        bool isZero = entrypoint == address(0);\\n        isZero ? _tokenHopEntrypoints.remove(token) : _tokenHopEntrypoints.set(token, entrypoint);\\n        emit TokenHopEntrypointSet(token, entrypoint);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom max slippages for a list of tokens\\n     * @param tokens List of addresses of the tokens to set a custom max slippage for\\n     * @param maxSlippages List of max slippages to be set for each token\\n     */\\n    function _setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) internal {\\n        require(tokens.length == maxSlippages.length, 'ACTION_SLIPPAGES_BAD_INPUT_LEN');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomMaxSlippage(tokens[i], maxSlippages[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage for a token\\n     * @param token Address of the token to set the custom max slippage for\\n     * @param maxSlippage Max slippage to be set for the given token\\n     */\\n    function _setCustomMaxSlippage(address token, uint256 maxSlippage) internal {\\n        require(maxSlippage <= FixedPoint.ONE, 'ACTION_SLIPPAGE_ABOVE_ONE');\\n        maxSlippage == 0 ? _customMaxSlippages.remove(token) : _customMaxSlippages.set(token, maxSlippage);\\n        emit CustomMaxSlippageSet(token, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom max fee percentages for a list of tokens\\n     * @param tokens List of addresses of the tokens to set a max fee percentage for\\n     * @param maxFeePcts List of max fee percentages to be set per token\\n     */\\n    function _setCustomMaxFeePcts(address[] memory tokens, uint256[] memory maxFeePcts) internal {\\n        require(tokens.length == maxFeePcts.length, 'ACTION_MAX_FEE_PCTS_BAD_INPUT');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomMaxFeePct(tokens[i], maxFeePcts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom max fee percentage for a token\\n     * @param token Address of the token to set a custom max fee percentage for\\n     * @param maxFeePct Max fee percentage to be set for the given token\\n     */\\n    function _setCustomMaxFeePct(address token, uint256 maxFeePct) internal {\\n        maxFeePct == 0 ? _customMaxFeePcts.remove(token) : _customMaxFeePcts.set(token, maxFeePct);\\n        emit CustomMaxFeePctSet(token, maxFeePct);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/bridge/interfaces/IBaseBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../IAction.sol';\\n\\n/**\\n * @dev Base bridger action interface\\n */\\ninterface IBaseBridger is IAction {\\n    /**\\n     * @dev Emitted every time the default destination chain is set\\n     */\\n    event DefaultDestinationChainSet(uint256 indexed defaultDestinationChain);\\n\\n    /**\\n     * @dev Emitted every time a custom destination chain is set for a token\\n     */\\n    event CustomDestinationChainSet(address indexed token, uint256 indexed defaultDestinationChain);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultDestinationChain() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the destination chain defined for a specific token\\n     */\\n    function getCustomDestinationChain(address token) external view returns (bool exists, uint256 chainId);\\n\\n    /**\\n     * @dev Tells the list of custom destination chains set\\n     */\\n    function getCustomDestinationChains() external view returns (address[] memory tokens, uint256[] memory chainId);\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     */\\n    function setDefaultDestinationChain(uint256 destinationChain) external;\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomDestinationChains(address[] memory tokens, uint256[] memory destinationChains) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/bridge/interfaces/IHopBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseBridger.sol';\\n\\n/**\\n * @dev Hop bridger action interface\\n */\\ninterface IHopBridger is IBaseBridger {\\n    /**\\n     * @dev Emitted every time the relayer is set\\n     */\\n    event RelayerSet(address indexed relayer);\\n\\n    /**\\n     * @dev Emitted every time the max deadline is set\\n     */\\n    event MaxDeadlineSet(uint256 maxDeadline);\\n\\n    /**\\n     * @dev Emitted every time the default max fee percentage is set\\n     */\\n    event DefaultMaxFeePctSet(uint256 maxFeePct);\\n\\n    /**\\n     * @dev Emitted every time the default max slippage is set\\n     */\\n    event DefaultMaxSlippageSet(uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a custom max fee percentage is set\\n     */\\n    event CustomMaxFeePctSet(address indexed token, uint256 maxFeePct);\\n\\n    /**\\n     * @dev Emitted every time a custom max slippage is set\\n     */\\n    event CustomMaxSlippageSet(address indexed token, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a Hop entrypoint is set for a token\\n     */\\n    event TokenHopEntrypointSet(address indexed token, address indexed entrypoint);\\n\\n    /**\\n     * @dev Tells the relayer address, only used when bridging from L1 to L2\\n     */\\n    function getRelayer() external view returns (address);\\n\\n    /**\\n     * @dev Tells the max deadline\\n     */\\n    function getMaxDeadline() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the default max fee pct\\n     */\\n    function getDefaultMaxFeePct() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the max fee percentage defined for a specific token\\n     */\\n    function getCustomMaxFeePct(address token) external view returns (bool exists, uint256 maxFeePct);\\n\\n    /**\\n     * @dev Tells the list of custom max fee percentages set\\n     */\\n    function getCustomMaxFeePcts() external view returns (address[] memory tokens, uint256[] memory maxFeePcts);\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     */\\n    function getCustomMaxSlippage(address token) external view returns (bool exists, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Tells the list of custom max slippages set\\n     */\\n    function getCustomMaxSlippages() external view returns (address[] memory tokens, uint256[] memory maxSlippages);\\n\\n    /**\\n     * @dev Tells Hop entrypoint set for a token\\n     */\\n    function getTokenHopEntrypoint(address token) external view returns (bool exists, address entrypoint);\\n\\n    /**\\n     * @dev Tells the list of Hop entrypoints set for each token\\n     */\\n    function getTokenHopEntrypoints() external view returns (address[] memory tokens, address[] memory entrypoints);\\n\\n    /**\\n     * @dev Sets the relayer, only used when bridging from L1 to L2\\n     * @param relayer New relayer address to be set\\n     */\\n    function setRelayer(address relayer) external;\\n\\n    /**\\n     * @dev Sets the max deadline\\n     * @param maxDeadline New max deadline to be set\\n     */\\n    function setMaxDeadline(uint256 maxDeadline) external;\\n\\n    /**\\n     * @dev Sets the default max fee percentage\\n     * @param maxFeePct New default max fee percentage to be set\\n     */\\n    function setDefaultMaxFeePct(uint256 maxFeePct) external;\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage New default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets a list of custom max fee percentages\\n     * @param tokens List of token addresses to set a max fee percentage for\\n     * @param maxFeePcts List of max fee percentages to be set for each token\\n     */\\n    function setCustomMaxFeePcts(address[] memory tokens, uint256[] memory maxFeePcts) external;\\n\\n    /**\\n     * @dev Sets a list of custom max slippages\\n     * @param tokens List of token addresses to set a max slippage for\\n     * @param maxSlippages List of max slippages to be set for each token\\n     */\\n    function setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) external;\\n\\n    /**\\n     * @dev Sets a list of entrypoints for a list of tokens\\n     * @param tokens List of token addresses to set a Hop entrypoint for\\n     * @param entrypoints List of Hop entrypoint addresses to be set for each token\\n     */\\n    function setTokenHopEntrypoints(address[] memory tokens, address[] memory entrypoints) external;\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address token, uint256 amount, uint256 slippage, uint256 fee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/IAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './base/interfaces/IBaseAction.sol';\\nimport './base/interfaces/IOracledAction.sol';\\nimport './base/interfaces/IRelayedAction.sol';\\nimport './base/interfaces/ITimeLockedAction.sol';\\nimport './base/interfaces/ITokenIndexedAction.sol';\\nimport './base/interfaces/ITokenThresholdAction.sol';\\n\\n// solhint-disable no-empty-blocks\\n\\n/**\\n * @dev Action interface\\n */\\ninterface IAction is\\n    IBaseAction,\\n    IOracledAction,\\n    IRelayedAction,\\n    ITimeLockedAction,\\n    ITokenIndexedAction,\\n    ITokenThresholdAction\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/actions/primitives/interfaces/IWithdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../IAction.sol';\\n\\n/**\\n * @dev Withdrawer action interface\\n */\\ninterface IWithdrawer is IAction {\\n    /**\\n     * @dev Emitted every time the recipient is set\\n     */\\n    event RecipientSet(address indexed recipient);\\n\\n    /**\\n     * @dev Tells the address of the allowed recipient\\n     */\\n    function getRecipient() external view returns (address);\\n\\n    /**\\n     * @dev Sets the recipient address\\n     * @param recipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address recipient) external;\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/primitives/Withdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../Action.sol';\\nimport './interfaces/IWithdrawer.sol';\\n\\n/**\\n * @title Withdrawer action\\n * @dev Action that offers a recipient address where funds can be withdrawn. This type of action at least require\\n * having withdraw permissions from the Smart Vault tied to it.\\n */\\ncontract Withdrawer is IWithdrawer, Action {\\n    // Base gas amount charged to cover gas payment\\n    uint256 public constant override BASE_GAS = 45e3;\\n\\n    // Address where tokens will be transferred to\\n    address private _recipient;\\n\\n    /**\\n     * @dev Withdrawer action config\\n     * @param recipient Address of the allowed recipient\\n     * @param actionConfig Action config params\\n     */\\n    struct WithdrawerConfig {\\n        address recipient;\\n        ActionConfig actionConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a withdrawer action\\n     */\\n    constructor(WithdrawerConfig memory config) Action(config.actionConfig) {\\n        _setRecipient(config.recipient);\\n    }\\n\\n    /**\\n     * @dev Tells the address of the allowed recipient\\n     */\\n    function getRecipient() external view override returns (address) {\\n        return _recipient;\\n    }\\n\\n    /**\\n     * @dev Sets the recipient address. Sender must be authorized.\\n     * @param recipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address recipient) external override auth {\\n        _setRecipient(recipient);\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address token, uint256 amount) external override actionCall(token, amount) {\\n        smartVault.withdraw(token, amount, _recipient, new bytes(0));\\n    }\\n\\n    /**\\n     * @dev Reverts if the token or the amount are zero\\n     */\\n    function _beforeAction(address token, uint256 amount) internal virtual override {\\n        super._beforeAction(token, amount);\\n        require(token != address(0), 'ACTION_TOKEN_ZERO');\\n        require(amount > 0, 'ACTION_AMOUNT_ZERO');\\n    }\\n\\n    /**\\n     * @dev Internal function to sets the recipient address\\n     * @param recipient Address of the new recipient to be set\\n     */\\n    function _setRecipient(address recipient) internal {\\n        require(recipient != address(0), 'ACTION_RECIPIENT_ZERO');\\n        _recipient = recipient;\\n        emit RecipientSet(recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/BaseSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/Denominations.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/EnumerableMap.sol';\\n\\nimport './interfaces/IBaseSwapper.sol';\\nimport '../Action.sol';\\n\\n/**\\n * @title Base swapper action\\n * @dev Action that offers the basic components for more detailed swap actions.\\n */\\nabstract contract BaseSwapper is IBaseSwapper, Action {\\n    using FixedPoint for uint256;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using EnumerableMap for EnumerableMap.AddressToAddressMap;\\n\\n    // Default token out\\n    address private _defaultTokenOut;\\n\\n    // Default maximum slippage in fixed point\\n    uint256 private _defaultMaxSlippage;\\n\\n    // Token out per token\\n    EnumerableMap.AddressToAddressMap private _customTokensOut;\\n\\n    // Maximum slippage per token address\\n    EnumerableMap.AddressToUintMap private _customMaxSlippages;\\n\\n    /**\\n     * @dev Custom token out config\\n     */\\n    struct CustomTokenOut {\\n        address token;\\n        address tokenOut;\\n    }\\n\\n    /**\\n     * @dev Custom max slippage config\\n     */\\n    struct CustomMaxSlippage {\\n        address token;\\n        uint256 maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Swapper action config\\n     */\\n    struct SwapperConfig {\\n        address tokenOut;\\n        uint256 maxSlippage;\\n        CustomTokenOut[] customTokensOut;\\n        CustomMaxSlippage[] customMaxSlippages;\\n        ActionConfig actionConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a swapper action\\n     */\\n    constructor(SwapperConfig memory config) Action(config.actionConfig) {\\n        _setDefaultTokenOut(config.tokenOut);\\n        _setDefaultMaxSlippage(config.maxSlippage);\\n\\n        for (uint256 i = 0; i < config.customTokensOut.length; i++) {\\n            _setCustomTokenOut(config.customTokensOut[i].token, config.customTokensOut[i].tokenOut);\\n        }\\n\\n        for (uint256 i = 0; i < config.customMaxSlippages.length; i++) {\\n            _setCustomMaxSlippage(config.customMaxSlippages[i].token, config.customMaxSlippages[i].maxSlippage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultTokenOut() public view override returns (address) {\\n        return _defaultTokenOut;\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultMaxSlippage() public view override returns (uint256) {\\n        return _defaultMaxSlippage;\\n    }\\n\\n    /**\\n     * @dev Tells the token out defined for a specific token\\n     */\\n    function getCustomTokenOut(address token) public view override returns (bool, address) {\\n        return _customTokensOut.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     */\\n    function getCustomMaxSlippage(address token) public view override returns (bool, uint256) {\\n        return _customMaxSlippages.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom token outs set\\n     */\\n    function getCustomTokensOut() public view override returns (address[] memory tokens, address[] memory tokensOut) {\\n        tokens = _customTokensOut.keys();\\n        tokensOut = _customTokensOut.values();\\n    }\\n\\n    /**\\n     * @dev Tells the list of custom max slippages set\\n     */\\n    function getCustomMaxSlippages()\\n        public\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory maxSlippages)\\n    {\\n        tokens = _customMaxSlippages.keys();\\n        maxSlippages = _customMaxSlippages.values();\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     */\\n    function setDefaultTokenOut(address tokenOut) external override auth {\\n        _setDefaultTokenOut(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external override auth {\\n        _setDefaultMaxSlippage(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomTokensOut(address[] memory tokens, address[] memory tokensOut) external override auth {\\n        _setCustomTokensOut(tokens, tokensOut);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) external override auth {\\n        _setCustomMaxSlippages(tokens, maxSlippages);\\n    }\\n\\n    /**\\n     * @dev Tells the token out that should be used for a token\\n     */\\n    function _getApplicableTokenOut(address token) internal view returns (address) {\\n        (bool exists, address tokenOut) = getCustomTokenOut(token);\\n        return exists ? tokenOut : getDefaultTokenOut();\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function _getApplicableMaxSlippage(address token) internal view returns (uint256) {\\n        (bool exists, uint256 maxSlippage) = getCustomMaxSlippage(token);\\n        return exists ? maxSlippage : getDefaultMaxSlippage();\\n    }\\n\\n    /**\\n     * @dev Tells if a slippage is valid based on the max slippage configured for a token\\n     */\\n    function _isSlippageValid(address token, uint256 slippage) internal view returns (bool) {\\n        return slippage <= _getApplicableMaxSlippage(token);\\n    }\\n\\n    /**\\n     * @dev Reverts if the requested slippage is above the max slippage configured for a token\\n     */\\n    function _validateSlippage(address token, uint256 slippage) internal view {\\n        require(_isSlippageValid(token, slippage), 'ACTION_SLIPPAGE_TOO_HIGH');\\n    }\\n\\n    /**\\n     * @dev Reverts if the token or the amount are zero\\n     */\\n    function _beforeAction(address token, uint256 amount) internal virtual override {\\n        super._beforeAction(token, amount);\\n        require(token != address(0), 'ACTION_TOKEN_ZERO');\\n        require(amount > 0, 'ACTION_AMOUNT_ZERO');\\n        require(_getApplicableTokenOut(token) != address(0), 'ACTION_TOKEN_OUT_NOT_SET');\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Default token out to be set\\n     */\\n    function _setDefaultTokenOut(address tokenOut) internal {\\n        _defaultTokenOut = tokenOut;\\n        emit DefaultTokenOutSet(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function _setDefaultMaxSlippage(uint256 maxSlippage) internal {\\n        require(maxSlippage <= FixedPoint.ONE, 'ACTION_SLIPPAGE_ABOVE_ONE');\\n        _defaultMaxSlippage = maxSlippage;\\n        emit DefaultMaxSlippageSet(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom tokens out for a set of tokens\\n     * @param tokens List of addresses of the tokens to set the custom token out for\\n     * @param tokensOut List of addresses of the tokens out to be set\\n     */\\n    function _setCustomTokensOut(address[] memory tokens, address[] memory tokensOut) internal {\\n        require(tokens.length == tokensOut.length, 'ACTION_TOKENS_OUT_BAD_INPUT_LEN');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomTokenOut(tokens[i], tokensOut[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom token out for a token\\n     * @param token Address of the token to set the custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function _setCustomTokenOut(address token, address tokenOut) internal {\\n        tokenOut == address(0) ? _customTokensOut.remove(token) : _customTokensOut.set(token, tokenOut);\\n        emit CustomTokenOutSet(token, tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets a list of custom max slippages for a set of tokens\\n     * @param tokens List of addresses of the tokens to set the custom max slippage for\\n     * @param maxSlippages List of max slippages to be set\\n     */\\n    function _setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) internal {\\n        require(tokens.length == maxSlippages.length, 'ACTION_SLIPPAGES_BAD_INPUT_LEN');\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setCustomMaxSlippage(tokens[i], maxSlippages[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage for a token\\n     * @param token Address of the token to set the custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function _setCustomMaxSlippage(address token, uint256 maxSlippage) internal {\\n        require(maxSlippage <= FixedPoint.ONE, 'ACTION_SLIPPAGE_ABOVE_ONE');\\n        maxSlippage == 0 ? _customMaxSlippages.remove(token) : _customMaxSlippages.set(token, maxSlippage);\\n        emit CustomMaxSlippageSet(token, maxSlippage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/interfaces/IBaseSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../IAction.sol';\\n\\n/**\\n * @dev Base swapper action interface\\n */\\ninterface IBaseSwapper is IAction {\\n    /**\\n     * @dev Emitted every time the default token out is set\\n     */\\n    event DefaultTokenOutSet(address indexed tokenOut);\\n\\n    /**\\n     * @dev Emitted every time a custom token out is set\\n     */\\n    event CustomTokenOutSet(address indexed token, address tokenOut);\\n\\n    /**\\n     * @dev Emitted every time the default max slippage is set\\n     */\\n    event DefaultMaxSlippageSet(uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a custom max slippage is set\\n     */\\n    event CustomMaxSlippageSet(address indexed token, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultTokenOut() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function getDefaultMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the token out defined for a specific token\\n     * @param exists Whether a token out for that token was set\\n     * @param tokenOut Token out defined for the queried token\\n     */\\n    function getCustomTokenOut(address token) external view returns (bool exists, address tokenOut);\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     * @param exists Whether a max slippage for that token was set\\n     * @param maxSlippage Max slippage defined for the queried token\\n     */\\n    function getCustomMaxSlippage(address token) external view returns (bool exists, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Tells the list of custom token outs set\\n     */\\n    function getCustomTokensOut() external view returns (address[] memory tokens, address[] memory tokensOut);\\n\\n    /**\\n     * @dev Tells the list of custom max slippages set\\n     */\\n    function getCustomMaxSlippages() external view returns (address[] memory tokens, uint256[] memory maxSlippages);\\n\\n    /**\\n     * @dev Sets the default token out\\n     */\\n    function setDefaultTokenOut(address tokenOut) external;\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomTokensOut(address[] memory tokens, address[] memory tokensOut) external;\\n\\n    /**\\n     * @dev Sets a list of custom token outs\\n     */\\n    function setCustomMaxSlippages(address[] memory tokens, uint256[] memory maxSlippages) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/interfaces/IL2HopSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapper.sol';\\n\\n/**\\n * @dev L2 Hop swapper action interface\\n */\\ninterface IL2HopSwapper is IBaseSwapper {\\n    /**\\n     * @dev Emitted every time an AMM is set for a token\\n     */\\n    event TokenAmmSet(address indexed token, address amm);\\n\\n    /**\\n     * @dev Tells AMM set for a token\\n     */\\n    function getTokenAmm(address token) external view returns (address amm);\\n\\n    /**\\n     * @dev Tells the list of AMMs set for each token\\n     */\\n    function getTokenAmms() external view returns (address[] memory tokens, address[] memory amms);\\n\\n    /**\\n     * @dev Sets a list of amms for a list of hTokens\\n     * @param hTokens List of hToken addresses to be set\\n     * @param amms List of AMM addresses to be set for each hToken\\n     */\\n    function setTokenAmms(address[] memory hTokens, address[] memory amms) external;\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/interfaces/IOneInchV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapper.sol';\\n\\n/**\\n * @dev 1inch v5 swapper action interface\\n */\\ninterface IOnceInchV5Swapper is IBaseSwapper {\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 minAmountOut, bytes memory data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/interfaces/IParaswapV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapper.sol';\\n\\n/**\\n * @dev Paraswap v5 swapper action interface\\n */\\ninterface IParaswapV5Swapper is IBaseSwapper {\\n    /**\\n     * @dev Emitted every time a quote signer is set\\n     */\\n    event QuoteSignerSet(address indexed quoteSigner);\\n\\n    /**\\n     * @dev Tells the address of the allowed quote signer\\n     */\\n    function getQuoteSigner() external view returns (address);\\n\\n    /**\\n     * @dev Sets the quote signer address. Sender must be authorized.\\n     * @param quoteSigner Address of the new quote signer to be set\\n     */\\n    function setQuoteSigner(address quoteSigner) external;\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/L2HopSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-bridge-connector/contracts/interfaces/IHopL2AMM.sol';\\nimport '@mimic-fi/v2-helpers/contracts/utils/EnumerableMap.sol';\\nimport '@mimic-fi/v2-swap-connector/contracts/ISwapConnector.sol';\\n\\nimport './BaseSwapper.sol';\\nimport './interfaces/IL2HopSwapper.sol';\\n\\ncontract L2HopSwapper is IL2HopSwapper, BaseSwapper {\\n    using FixedPoint for uint256;\\n    using EnumerableMap for EnumerableMap.AddressToAddressMap;\\n\\n    // Base gas amount charged to cover gas payment\\n    uint256 public constant override BASE_GAS = 30e3;\\n\\n    // List of AMMs per token\\n    EnumerableMap.AddressToAddressMap private _tokenAmms;\\n\\n    struct TokenAmm {\\n        address token;\\n        address amm;\\n    }\\n\\n    /**\\n     * @dev L2 Hop swapper action config\\n     */\\n    struct L2HopSwapperConfig {\\n        TokenAmm[] tokenAmms;\\n        SwapperConfig swapperConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a L2 Hop swapper action\\n     */\\n    constructor(L2HopSwapperConfig memory config) BaseSwapper(config.swapperConfig) {\\n        for (uint256 i = 0; i < config.tokenAmms.length; i++) {\\n            _setTokenAmm(config.tokenAmms[i].token, config.tokenAmms[i].amm);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells AMM set for a token\\n     */\\n    function getTokenAmm(address token) public view override returns (address amm) {\\n        (, amm) = _tokenAmms.tryGet(token);\\n    }\\n\\n    /**\\n     * @dev Tells the list of AMMs set for each token\\n     */\\n    function getTokenAmms() external view override returns (address[] memory tokens, address[] memory amms) {\\n        tokens = _tokenAmms.keys();\\n        amms = _tokenAmms.values();\\n    }\\n\\n    /**\\n     * @dev Sets a list of amms for a list of hTokens\\n     * @param hTokens List of hToken addresses to be set\\n     * @param amms List of AMM addresses to be set for each hToken\\n     */\\n    function setTokenAmms(address[] memory hTokens, address[] memory amms) external override auth {\\n        _setTokenAmms(hTokens, amms);\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address hToken, uint256 amount, uint256 slippage) external override actionCall(hToken, amount) {\\n        _validateAmm(hToken);\\n        _validateSlippage(hToken, slippage);\\n\\n        address tokenOut = _getApplicableTokenOut(hToken);\\n        bytes memory data = abi.encode(IHopL2AMM(getTokenAmm(hToken)).exchangeAddress());\\n        uint256 minAmountOut = amount.mulUp(FixedPoint.ONE - slippage);\\n\\n        smartVault.swap(\\n            uint8(ISwapConnector.Source.Hop),\\n            hToken,\\n            tokenOut,\\n            amount,\\n            ISmartVault.SwapLimit.MinAmountOut,\\n            minAmountOut,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Tells if a token has an AMM set\\n     */\\n    function _isAmmValid(address token) internal view returns (bool) {\\n        return _tokenAmms.contains(token);\\n    }\\n\\n    /**\\n     * @dev Reverts if there is no Hop AMM set for a given hToken\\n     */\\n    function _validateAmm(address hToken) internal view {\\n        require(_isAmmValid(hToken), 'ACTION_MISSING_HOP_TOKEN_AMM');\\n    }\\n\\n    /**\\n     * @dev Sets a list of AMMs for a list of hTokens\\n     * @param hTokens List of hToken addresses to be set\\n     * @param amms List of AMM addresses to be set for each hToken\\n     */\\n    function _setTokenAmms(address[] memory hTokens, address[] memory amms) internal {\\n        require(hTokens.length == amms.length, 'ACTION_TOKENS_AMMS_BAD_INPUT_LEN');\\n        for (uint256 i = 0; i < hTokens.length; i++) {\\n            _setTokenAmm(hTokens[i], amms[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set an AMM for a Hop token\\n     * @param hToken Address of the hToken to set an AMM for\\n     * @param amm AMM to be set\\n     */\\n    function _setTokenAmm(address hToken, address amm) internal {\\n        require(hToken != address(0), 'ACTION_HOP_TOKEN_ZERO');\\n        require(amm == address(0) || hToken == IHopL2AMM(amm).hToken(), 'ACTION_HOP_TOKEN_AMM_MISMATCH');\\n\\n        amm == address(0) ? _tokenAmms.remove(hToken) : _tokenAmms.set(hToken, amm);\\n        emit TokenAmmSet(hToken, amm);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/OneInchV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-swap-connector/contracts/ISwapConnector.sol';\\n\\nimport './BaseSwapper.sol';\\nimport './interfaces/IOneInchV5Swapper.sol';\\n\\ncontract OneInchV5Swapper is IOnceInchV5Swapper, BaseSwapper {\\n    using FixedPoint for uint256;\\n\\n    // Base gas amount charged to cover gas payment\\n    uint256 public constant override BASE_GAS = 30e3;\\n\\n    /**\\n     * @dev Creates a 1inch v5 swapper action\\n     */\\n    constructor(SwapperConfig memory swapperConfig) BaseSwapper(swapperConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage, bytes memory data)\\n        external\\n        actionCall(tokenIn, amountIn)\\n    {\\n        _validateSlippage(tokenIn, slippage);\\n\\n        address tokenOut = _getApplicableTokenOut(tokenIn);\\n        uint256 price = _getPrice(tokenIn, tokenOut);\\n        uint256 minAmountOut = amountIn.mulUp(price).mulUp(FixedPoint.ONE - slippage);\\n\\n        smartVault.swap(\\n            uint8(ISwapConnector.Source.OneInchV5),\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            ISmartVault.SwapLimit.MinAmountOut,\\n            minAmountOut,\\n            data\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/actions/swap/ParaswapV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v2-swap-connector/contracts/ISwapConnector.sol';\\n\\nimport './BaseSwapper.sol';\\nimport './interfaces/IParaswapV5Swapper.sol';\\n\\n/**\\n * @title Paraswap V5 swapper action\\n * @dev Action that extends the swapper action to use Paraswap v5\\n */\\ncontract ParaswapV5Swapper is IParaswapV5Swapper, BaseSwapper {\\n    using FixedPoint for uint256;\\n\\n    // Base gas amount charged to cover gas payment\\n    uint256 public constant override BASE_GAS = 55e3;\\n\\n    // Address of the Paraswap quote signer\\n    address private _quoteSigner;\\n\\n    /**\\n     * @dev Paraswap v5 swapper action config\\n     */\\n    struct Paraswap5SwapperConfig {\\n        address quoteSigner;\\n        SwapperConfig swapperConfig;\\n    }\\n\\n    /**\\n     * @dev Creates a paraswap v5 swapper action\\n     */\\n    constructor(Paraswap5SwapperConfig memory config) BaseSwapper(config.swapperConfig) {\\n        _setQuoteSigner(config.quoteSigner);\\n    }\\n\\n    /**\\n     * @dev Tells the address of the allowed quote signer\\n     */\\n    function getQuoteSigner() external view override returns (address) {\\n        return _quoteSigner;\\n    }\\n\\n    /**\\n     * @dev Sets the quote signer address. Sender must be authorized.\\n     * @param quoteSigner Address of the new quote signer to be set\\n     */\\n    function setQuoteSigner(address quoteSigner) external override auth {\\n        _setQuoteSigner(quoteSigner);\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) external override actionCall(tokenIn, amountIn) {\\n        uint256 slippage = FixedPoint.ONE - minAmountOut.divUp(expectedAmountOut);\\n        _validateSlippage(tokenIn, slippage);\\n\\n        address tokenOut = _getApplicableTokenOut(tokenIn);\\n        _validateQuoteSigner(tokenIn, tokenOut, amountIn, minAmountOut, expectedAmountOut, deadline, data, sig);\\n\\n        smartVault.swap(\\n            uint8(ISwapConnector.Source.ParaswapV5),\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            ISmartVault.SwapLimit.MinAmountOut,\\n            minAmountOut,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Tells if a quote signer is valid\\n     */\\n    function _isValidQuoteSigner(address quoteSigner) internal view returns (bool) {\\n        return quoteSigner == _quoteSigner;\\n    }\\n\\n    /**\\n     * @dev Reverts if the quote was signed by someone else than the quote signer or if its expired\\n     */\\n    function _validateQuoteSigner(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) internal view {\\n        bytes32 message = _hash(tokenIn, tokenOut, amountIn, minAmountOut, expectedAmountOut, deadline, data);\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(message), sig);\\n        require(_isValidQuoteSigner(signer), 'ACTION_INVALID_QUOTE_SIGNER');\\n        require(block.timestamp <= deadline, 'ACTION_QUOTE_SIGNER_DEADLINE');\\n    }\\n\\n    /**\\n     * @dev Sets the quote signer address\\n     * @param quoteSigner Address of the new quote signer to be set\\n     */\\n    function _setQuoteSigner(address quoteSigner) internal {\\n        require(quoteSigner != address(0), 'ACTION_QUOTE_SIGNER_ZERO');\\n        _quoteSigner = quoteSigner;\\n        emit QuoteSignerSet(quoteSigner);\\n    }\\n\\n    /**\\n     * @dev Builds the quote message to check the signature of the quote signer\\n     */\\n    function _hash(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data\\n    ) private pure returns (bytes32) {\\n        bool isBuy = false;\\n        return\\n            keccak256(\\n                abi.encodePacked(tokenIn, tokenOut, isBuy, amountIn, minAmountOut, expectedAmountOut, deadline, data)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/actions/OracledActionMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../actions/base/OracledAction.sol';\\n\\ncontract OracledActionMock is OracledAction {\\n    event LogPrice(uint256 price);\\n\\n    struct Config {\\n        BaseConfig baseConfig;\\n        OracleConfig oracleConfig;\\n    }\\n\\n    constructor(Config memory config) BaseAction(config.baseConfig) OracledAction(config.oracleConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function getPrice(address base, address quote) external {\\n        emit LogPrice(_getPrice(base, quote));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/actions/RelayedActionMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../actions/base/RelayedAction.sol';\\n\\ncontract RelayedActionMock is RelayedAction {\\n    // Cost in gas of a call op + gas cost computation + withdraw form SV\\n    uint256 public constant override BASE_GAS = 21e3 + 20e3;\\n\\n    struct Config {\\n        BaseConfig baseConfig;\\n        RelayConfig relayConfig;\\n    }\\n\\n    constructor(Config memory config) BaseAction(config.baseConfig) RelayedAction(config.relayConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function call() external actionCall(address(0), 0) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/actions/TimeLockedActionMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../actions/base/TimeLockedAction.sol';\\n\\ncontract TimeLockedActionMock is TimeLockedAction {\\n    struct Config {\\n        BaseConfig baseConfig;\\n        TimeLockConfig timeLockConfig;\\n    }\\n\\n    constructor(Config memory config) BaseAction(config.baseConfig) TimeLockedAction(config.timeLockConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function call() external actionCall(address(0), 0) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/actions/TokenIndexedActionMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../actions/base/TokenIndexedAction.sol';\\n\\ncontract TokenIndexedActionMock is TokenIndexedAction {\\n    struct Config {\\n        BaseConfig baseConfig;\\n        TokenIndexConfig tokenIndexConfig;\\n    }\\n\\n    constructor(Config memory config) BaseAction(config.baseConfig) TokenIndexedAction(config.tokenIndexConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function call(address token) external actionCall(token, 0) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/actions/TokenThresholdActionMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../actions/base/TokenThresholdAction.sol';\\n\\ncontract TokenThresholdActionMock is TokenThresholdAction {\\n    struct Config {\\n        BaseConfig baseConfig;\\n        TokenThresholdConfig tokenThresholdConfig;\\n    }\\n\\n    constructor(Config memory config) BaseAction(config.baseConfig) TokenThresholdAction(config.tokenThresholdConfig) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function call(address token, uint256 amount) external actionCall(token, amount) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/core/BridgeConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@mimic-fi/v2-bridge-connector/contracts/IBridgeConnector.sol';\\nimport '@mimic-fi/v2-registry/contracts/implementations/BaseImplementation.sol';\\n\\nimport '../samples/BridgeMock.sol';\\n\\ncontract BridgeConnectorMock is IBridgeConnector, BaseImplementation {\\n    bytes32 public constant override NAMESPACE = keccak256('BRIDGE_CONNECTOR');\\n\\n    BridgeMock public immutable bridgeMock;\\n\\n    constructor(address registry) BaseImplementation(registry) {\\n        bridgeMock = new BridgeMock();\\n    }\\n\\n    function bridge(\\n        uint8, /* source */\\n        uint256, /* chainId */\\n        address token,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        bytes memory data\\n    ) external override {\\n        IERC20(token).approve(address(bridgeMock), amountIn);\\n        return bridgeMock.bridge(token, amountIn, minAmountOut, recipient, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/core/SwapConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@mimic-fi/v2-swap-connector/contracts/ISwapConnector.sol';\\nimport '@mimic-fi/v2-registry/contracts/implementations/BaseImplementation.sol';\\n\\nimport '../samples/DexMock.sol';\\n\\ncontract SwapConnectorMock is ISwapConnector, BaseImplementation {\\n    bytes32 public constant override NAMESPACE = keccak256('SWAP_CONNECTOR');\\n\\n    DexMock public immutable dex;\\n\\n    constructor(address registry) BaseImplementation(registry) {\\n        dex = new DexMock();\\n    }\\n\\n    function mockRate(uint256 newRate) external {\\n        dex.mockRate(newRate);\\n    }\\n\\n    function swap(\\n        uint8, /* source */\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        bytes memory data\\n    ) external override returns (uint256 amountOut) {\\n        IERC20(tokenIn).approve(address(dex), amountIn);\\n        return dex.swap(tokenIn, tokenOut, amountIn, minAmountOut, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/BridgeMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract BridgeMock {\\n    function bridge(address token, uint256 amount, uint256, address, bytes memory) external {\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/DexMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '@mimic-fi/v2-helpers/contracts/math/FixedPoint.sol';\\n\\ncontract DexMock {\\n    using FixedPoint for uint256;\\n\\n    uint256 public mockedRate;\\n\\n    constructor() {\\n        mockedRate = FixedPoint.ONE;\\n    }\\n\\n    function mockRate(uint256 newRate) external {\\n        mockedRate = newRate;\\n    }\\n\\n    function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256, bytes memory)\\n        external\\n        returns (uint256 amountOut)\\n    {\\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\\n        amountOut = amountIn.mulDown(mockedRate);\\n        IERC20(tokenOut).transfer(msg.sender, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/HopL1BridgeMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract HopL1BridgeMock {\\n    address public immutable l1CanonicalToken;\\n\\n    constructor(address token) {\\n        l1CanonicalToken = token;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/HopL2AmmMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract HopL2AmmMock {\\n    address public immutable hToken;\\n    address public immutable l2CanonicalToken;\\n\\n    constructor(address _token, address _hToken) {\\n        l2CanonicalToken = _token;\\n        hToken = _hToken;\\n    }\\n\\n    function exchangeAddress() external view returns (address) {\\n        return address(this);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/PriceFeedMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract PriceFeedMock {\\n    uint256 public mockedPrice;\\n\\n    constructor(uint256 _mockedPrice) {\\n        mockedPrice = _mockedPrice;\\n    }\\n\\n    function mockPrice(uint256 _mockedPrice) external {\\n        mockedPrice = _mockedPrice;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80) {\\n        return (0, int256(mockedPrice), 0, 0, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/TokenMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\ncontract TokenMock is ERC20 {\\n    constructor(string memory symbol) ERC20(symbol, symbol) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/samples/WrappedNativeTokenMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v2-helpers/contracts/utils/IWrappedNativeToken.sol';\\n\\ncontract WrappedNativeTokenMock is IWrappedNativeToken {\\n    uint8 public decimals = 18;\\n    string public name = 'Wrapped Native Token';\\n    string public symbol = 'WNT';\\n\\n    event Deposit(address indexed to, uint256 amount);\\n    event Withdrawal(address indexed from, uint256 amount);\\n\\n    mapping (address => uint256) public override balanceOf;\\n    mapping (address => mapping (address => uint256)) public override allowance;\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    function deposit() public payable override {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) public override {\\n        require(balanceOf[msg.sender] >= amount, 'WNT_NOT_ENOUGH_BALANCE');\\n        balanceOf[msg.sender] -= amount;\\n        payable(msg.sender).transfer(amount);\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        return transferFrom(msg.sender, to, amount);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        require(balanceOf[from] >= amount, 'NOT_ENOUGH_BALANCE');\\n\\n        if (from != msg.sender && allowance[from][msg.sender] != type(uint256).max) {\\n            require(allowance[from][msg.sender] >= amount, 'NOT_ENOUGH_ALLOWANCE');\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n        balanceOf[to] += amount;\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePct\",\"type\":\"uint256\"}],\"internalType\":\"struct HopBridger.CustomMaxFeePct[]\",\"name\":\"customMaxFeePcts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct HopBridger.CustomMaxSlippage[]\",\"name\":\"customMaxSlippages\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"entrypoint\",\"type\":\"address\"}],\"internalType\":\"struct HopBridger.TokenHopEntrypoint[]\",\"name\":\"tokenHopEntrypoints\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"destinationChain\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChain\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseBridger.CustomDestinationChain[]\",\"name\":\"customDestinationChains\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartVault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"}],\"internalType\":\"struct BaseAction.BaseConfig\",\"name\":\"baseConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permissiveMode\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"relayers\",\"type\":\"address[]\"}],\"internalType\":\"struct RelayedAction.RelayConfig\",\"name\":\"relayConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"internalType\":\"struct OracledAction.OracleConfig\",\"name\":\"oracleConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextExecutionTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TimeLockedAction.TimeLockConfig\",\"name\":\"timeLockConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"enum ITokenIndexedAction.TokensAcceptanceType\",\"name\":\"acceptanceType\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenIndexedAction.TokenIndexConfig\",\"name\":\"tokenIndexConfig\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"defaultThreshold\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenThresholdAction.CustomThreshold[]\",\"name\":\"customThresholds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenThresholdAction.TokenThresholdConfig\",\"name\":\"tokenThresholdConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct Action.ActionConfig\",\"name\":\"actionConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct BaseBridger.BridgerConfig\",\"name\":\"bridgerConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct HopBridger.HopBridgerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defaultDestinationChain\",\"type\":\"uint256\"}],\"name\":\"CustomDestinationChainSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFeePct\",\"type\":\"uint256\"}],\"name\":\"CustomMaxFeePctSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"CustomMaxSlippageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"name\":\"CustomTokenThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomTokenThresholdUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defaultDestinationChain\",\"type\":\"uint256\"}],\"name\":\"DefaultDestinationChainSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFeePct\",\"type\":\"uint256\"}],\"name\":\"DefaultMaxFeePctSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"DefaultMaxSlippageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"name\":\"DefaultTokenThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultTokenThresholdUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"}],\"name\":\"GroupIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeadline\",\"type\":\"uint256\"}],\"name\":\"MaxDeadlineSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"OracleSignerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"OracleSignerDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"}],\"name\":\"RelayGasLimitsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RelayGasTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"RelayPermissiveModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"}],\"name\":\"RelayTxCostLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"TimeLockDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"TimeLockExpirationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entrypoint\",\"type\":\"address\"}],\"name\":\"TokenHopEntrypointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"TokenIndexSourceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"TokenIndexSourceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokensAcceptanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokensAcceptanceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ITokenIndexedAction.TokensAcceptanceType\",\"name\":\"acceptanceType\",\"type\":\"uint8\"}],\"name\":\"TokensAcceptanceTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"}],\"name\":\"Unauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getActionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCustomDestinationChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomDestinationChains\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destinationChains\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCustomMaxFeePct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomMaxFeePcts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxFeePcts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCustomMaxSlippage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomMaxSlippages\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxSlippages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCustomTokenThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomTokenThresholds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold[]\",\"name\":\"thresholds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultDestinationChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultMaxFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultMaxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultTokenThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IOracledAction.FeedData[]\",\"name\":\"feeds\",\"type\":\"tuple[]\"}],\"name\":\"getFeedsDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGroupId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayGasLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayGasToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayTxCostLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSmartVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenHopEntrypoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"entrypoint\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenHopEntrypoints\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"entrypoints\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensAcceptanceList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensAcceptanceType\",\"outputs\":[{\"internalType\":\"enum ITokenIndexedAction.TokensAcceptanceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensIndexSources\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isOracleSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRelayPermissiveModeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeLockExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destinationChains\",\"type\":\"uint256[]\"}],\"name\":\"setCustomDestinationChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxFeePcts\",\"type\":\"uint256[]\"}],\"name\":\"setCustomMaxFeePcts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxSlippages\",\"type\":\"uint256[]\"}],\"name\":\"setCustomMaxSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold[]\",\"name\":\"thresholds\",\"type\":\"tuple[]\"}],\"name\":\"setCustomTokenThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChain\",\"type\":\"uint256\"}],\"name\":\"setDefaultDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePct\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenThresholdAction.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"name\":\"setDefaultTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"}],\"name\":\"setGroupId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeadline\",\"type\":\"uint256\"}],\"name\":\"setMaxDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"setOracleSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"}],\"name\":\"setRelayGasLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setRelayGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setRelayPermissiveMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"}],\"name\":\"setRelayTxCostLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"relayersToAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"relayersToRemove\",\"type\":\"address[]\"}],\"name\":\"setRelayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setTimeLockDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setTimeLockExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"entrypoints\",\"type\":\"address[]\"}],\"name\":\"setTokenHopEntrypoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"setTokensAcceptanceList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ITokenIndexedAction.TokensAcceptanceType\",\"name\":\"acceptanceType\",\"type\":\"uint8\"}],\"name\":\"setTokensAcceptanceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"setTokensIndexSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartVault\",\"outputs\":[{\"internalType\":\"contract ISmartVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToSmartVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"unsetCustomTokenThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsetDefaultTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HopBridger", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000076b22b8c1079a44f1211d867d68b1eda76a635a7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017b198f1ba26daa9d1fba35a51b807e091769af900000000000000000000000094dd9c6152a2a0bbcb52d3297b723a6f01d5f9f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000012750000000000000000000000000000000000000000000000000000000000648287a0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3afb6db38a8e72905165c1fbb96772e6356079000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b3afb6db38a8e72905165c1fbb96772e63560790000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}