{"SourceCode": "// Sources flattened with hardhat v2.12.6 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.8.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\nstruct Slots {\r\n    address receiver;\r\n    uint amount;\r\n    uint commission;\r\n    bool isTransfer;\r\n    bool exist;\r\n}\r\n\r\ncontract Safe_Yeloo {\r\n\r\n    mapping (address => mapping (uint => Slots)) public safes;\r\n\r\n    address public admin;\r\n    address public receiverComission;\r\n    address public controller_oracle;\r\n\r\n    uint public decimalsComission;\r\n\r\n    IERC20 public ERC20;\r\n\r\n    using SafeMath for uint;\r\n\r\n    modifier onlyAdmin {\r\n        require(admin == msg.sender, \"Error: Access allow only for owner!\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOracle {\r\n        require(controller_oracle == msg.sender, \"Error: Access allow only for oracle!\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor (address ERC20_ADDRESS) {\r\n        admin = msg.sender;\r\n\r\n        ERC20 = IERC20(ERC20_ADDRESS);\r\n\r\n        decimalsComission = 1000;\r\n    }\r\n\r\n    // USER FUNCTIONS\r\n    \r\n    function safe(uint256 id, uint256 amount, uint256 commission, address receiver, bool isTransfer) external payable {\r\n\r\n        require(ERC20.transferFrom(msg.sender, address(this), amount), \"Error: Transfer not successfully!\");\r\n        require(amount > 0, \"Error: Amount must be greater than zero!\");\r\n\r\n        require(id != 0, \"Error: ID must be greater than zero!\");\r\n\r\n        require(!safes[msg.sender][id].exist, \"Error: You cannot re-deposit!\");\r\n\r\n        if (isTransfer){\r\n            require(receiver != address(0), \"Error: receiver cannot be empty!\");\r\n            require(receiver != msg.sender, \"Error: You cannot send funds to yourself\");\r\n        }else if (!isTransfer){\r\n            receiver = msg.sender;\r\n        }\r\n\r\n        safes[msg.sender][id].receiver = receiver;\r\n        safes[msg.sender][id].isTransfer = isTransfer;\r\n        safes[msg.sender][id].amount = amount;\r\n        safes[msg.sender][id].commission = commission;\r\n        safes[msg.sender][id].exist = true;\r\n\r\n        emit Safe(address(ERC20), receiver, msg.sender, id, amount, isTransfer, commission);\r\n    }\r\n\r\n    function approve(uint id) external {\r\n        require(msg.sender != address(0), \"Error: creator cannot be empty!\");\r\n        require(id != 0, \"Error: id cannot be empty!\");\r\n\r\n        Slots memory insideSlot = safes[msg.sender][id];\r\n\r\n        require(insideSlot.exist, \"Error: This slot does not exist!\");\r\n\r\n        require(insideSlot.isTransfer, \"Error: This method is only available for actions with (isTransfer = true)\");\r\n\r\n        uint amount = insideSlot.amount;\r\n\r\n        uint comissionAmount = ((insideSlot.commission * insideSlot.amount) / decimalsComission );\r\n\r\n        uint amountWithCommission = amount - comissionAmount;\r\n        \r\n        ERC20.transfer(receiverComission, comissionAmount);\r\n        \r\n        require(ERC20.balanceOf(address(this)) >= amountWithCommission, \"Error: You cannot withdraw all tokens!\");\r\n\r\n        ERC20.transfer(insideSlot.receiver, amountWithCommission);\r\n        \r\n        delete safes[msg.sender][id];\r\n\r\n        emit Approve(address(ERC20), insideSlot.receiver, msg.sender, id, insideSlot.amount, insideSlot.isTransfer, insideSlot.commission);\r\n    }\r\n\r\n    // ADMIN FUNCTIONS\r\n    function setReceiverComission(address receiver) external onlyAdmin {\r\n        require(receiver != address(0), \"Error: receiver cannot be empty!\");\r\n\r\n        receiverComission = receiver;\r\n    }\r\n\r\n    function setOracle(address new_oracle) external onlyAdmin {\r\n        require(new_oracle != address(0), \"Error: new_oracle cannot be empty!\");\r\n        controller_oracle = new_oracle;\r\n    }\r\n\r\n    function setTokenContract(address new_contract) external onlyAdmin {\r\n        require(new_contract != address(0), \"Error: new_oracle cannot be empty!\");\r\n        ERC20 = IERC20(new_contract);\r\n    }\r\n\r\n    function setDecimalsComission(uint new_decimals) external onlyAdmin {\r\n        require(new_decimals > 0, \"Error: input number must be greater than 0\");\r\n        decimalsComission = new_decimals;\r\n    }\r\n\r\n    // \u0424\u0423\u041d\u041a\u0426\u0418\u042f CORRECT - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u043e\u0440\u043e\u043d \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a\r\n    function correct(address creator, uint id, address receiver, bool withComission) external onlyAdmin {\r\n        require(receiver != address(0), \"Error: receiver cannot be empty!\");\r\n        require(creator != address(0), \"Error: creator cannot be empty!\");\r\n        require(id != 0, \"Error: id cannot be empty!\");\r\n\r\n        Slots memory insideSlot = safes[creator][id];\r\n\r\n        require(receiver == creator || receiver == insideSlot.receiver, \"Error: Only authorized user can receive funds\");\r\n        require(insideSlot.exist, \"Error: This slot does not exist!\");\r\n\r\n        uint amount = insideSlot.amount;\r\n        uint comissionAmount = 0;\r\n\r\n        if (withComission){\r\n            comissionAmount = ((insideSlot.commission * insideSlot.amount) / decimalsComission );\r\n            amount = amount - comissionAmount;\r\n            ERC20.transfer(receiverComission, comissionAmount);\r\n        }\r\n        \r\n        require(ERC20.balanceOf(address(this)) >= amount, \"Error: You cannot withdraw all tokens!\");\r\n\r\n        ERC20.transfer(receiver, amount);\r\n        \r\n        delete safes[creator][id];\r\n\r\n        emit Correct(address(ERC20), receiver, creator, id, insideSlot.amount, insideSlot.isTransfer, insideSlot.commission);\r\n    }\r\n\r\n    // \u0424\u0423\u041d\u041a\u0426\u0418\u042f BACK - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0438\u0437 \u0421\u0415\u0419\u0424\u0410 (\u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 isTransfer = false)\r\n    function back(address creator, uint id, bool withComission) external onlyOracle {\r\n        require(creator != address(0), \"Error: creator cannot be empty!\");\r\n        require(id != 0, \"Error: id cannot be empty!\");\r\n\r\n        Slots memory insideSlot = safes[creator][id];\r\n\r\n        require(insideSlot.exist, \"Error: This slot does not exist!\");\r\n\r\n        require(!insideSlot.isTransfer, \"Error: This method is only available for actions with (isTransfer = false)\");\r\n\r\n        uint amount = insideSlot.amount;\r\n        uint comissionAmount = 0;\r\n\r\n        if (withComission){\r\n            comissionAmount = ((insideSlot.commission * insideSlot.amount) / decimalsComission );\r\n            amount = amount - comissionAmount;\r\n            ERC20.transfer(receiverComission, comissionAmount);\r\n        }\r\n        \r\n        require(ERC20.balanceOf(address(this)) >= amount, \"Error: You cannot withdraw all tokens!\");\r\n\r\n        ERC20.transfer(insideSlot.receiver, amount);\r\n\r\n        delete safes[creator][id];\r\n        \r\n        emit Back(address(ERC20), insideSlot.receiver, creator, id, insideSlot.amount, insideSlot.isTransfer, insideSlot.commission);\r\n    }\r\n\r\n    event Correct(\r\n        address ERC20_ADDRESS,\r\n        address indexed receiver,\r\n        address indexed creator,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        bool isTransfer,\r\n        uint256 commission\r\n    );\r\n\r\n    event Back(\r\n        address ERC20_ADDRESS,\r\n        address indexed receiver,\r\n        address indexed creator,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        bool isTransfer,\r\n        uint256 commission\r\n    );\r\n\r\n    event Approve(\r\n        address ERC20_ADDRESS,\r\n        address indexed receiver,\r\n        address indexed creator,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        bool isTransfer,\r\n        uint256 commission\r\n    );\r\n\r\n    event Safe(\r\n        address ERC20_ADDRESS,\r\n        address indexed receiver,\r\n        address indexed creator,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        bool isTransfer,\r\n        uint256 commission\r\n    );\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_ADDRESS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_ADDRESS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Back\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_ADDRESS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Correct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_ADDRESS\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"Safe\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withComission\",\"type\":\"bool\"}],\"name\":\"back\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller_oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withComission\",\"type\":\"bool\"}],\"name\":\"correct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverComission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"}],\"name\":\"safe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_decimals\",\"type\":\"uint256\"}],\"name\":\"setDecimalsComission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setReceiverComission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_contract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Safe_Yeloo", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d49e30bd9729ba2dc4705ffed45f3df7a9c838a2bd7176c6d10d47a441c929e"}