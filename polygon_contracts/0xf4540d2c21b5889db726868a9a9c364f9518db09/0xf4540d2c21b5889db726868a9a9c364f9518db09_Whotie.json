{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Whotie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ncontract Whotie {\\n    struct Game {\\n        address player1;\\n        address player2;\\n        uint256 stake;\\n        address winner;\\n        bool finished;\\n    }\\n\\n    mapping(string => Game) public games;\\n\\n    address public owner;\\n\\n    bool private locked;\\n\\n    address public communityWallet;\\n    address public premiumHoldersContract;\\n    address public proHoldersContract;\\n    address public basicHoldersContract;\\n\\n    uint256 public COMMUNITY_FEE = 4;\\n    uint256 public PREMIUM_HOLDER_REWARD = 50;\\n    uint256 public PRO_HOLDER_REWARD = 35;\\n    uint256 public BASIC_HOLDER_REWARD = 15;\\n\\n    event GameCreated(\\n        string indexed gameId,\\n        address indexed player1,\\n        uint256 stake\\n    );\\n\\n    event GameJoined(string indexed gameId, address indexed player2);\\n\\n    event GameFinished(\\n        string indexed gameId,\\n        address indexed winner,\\n        uint256 amountWon\\n    );\\n\\n    constructor(\\n        address _communityWallet,\\n        address _premiumHoldersContract,\\n        address _proHoldersContract,\\n        address _basicHoldersContract\\n    ) {\\n        owner = msg.sender;\\n        communityWallet = _communityWallet;\\n        premiumHoldersContract = _premiumHoldersContract;\\n        proHoldersContract = _proHoldersContract;\\n        basicHoldersContract = _basicHoldersContract;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only contract owner can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier noReentrant() {\\n        require(!locked, \\\"Reentrant call.\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    function setCommunityFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= 20, \\\"Community fee cannot exceed 20%.\\\");\\n        COMMUNITY_FEE = newFee;\\n    }\\n\\n    function setCommunityWallet(address newWallet) external onlyOwner {\\n        require(\\n            newWallet != communityWallet,\\n            \\\"This is the assigned Community Wallet Address\\\"\\n        );\\n        communityWallet = newWallet;\\n    }\\n\\n    function setPremiumHolders(address newWallet) external onlyOwner {\\n        require(\\n            newWallet != premiumHoldersContract,\\n            \\\"This is the assigned Premium Holder Address\\\"\\n        );\\n        premiumHoldersContract = newWallet;\\n    }\\n\\n    function setProHolders(address newWallet) external onlyOwner {\\n        require(\\n            newWallet != proHoldersContract,\\n            \\\"This is the assigned Pro Holder Address\\\"\\n        );\\n        proHoldersContract = newWallet;\\n    }\\n\\n    function setBasicHolders(address newWallet) external onlyOwner {\\n        require(\\n            newWallet != basicHoldersContract,\\n            \\\"This is the assigned Basic Holder Address\\\"\\n        );\\n        basicHoldersContract = newWallet;\\n    }\\n\\n    function setPremiumHolderReward(uint256 newReward) external onlyOwner {\\n        PREMIUM_HOLDER_REWARD = newReward;\\n    }\\n\\n    function setProHolderReward(uint256 newReward) external onlyOwner {\\n        PRO_HOLDER_REWARD = newReward;\\n    }\\n\\n    function setBasicHolderReward(uint256 newReward) external onlyOwner {\\n        BASIC_HOLDER_REWARD = newReward;\\n    }\\n\\n    function createGame(string memory gameId) external payable {\\n        require(games[gameId].player1 == address(0), \\\"Game ID already exists\\\");\\n\\n        games[gameId] = Game(\\n            payable(msg.sender),\\n            address(0),\\n            msg.value,\\n            address(0),\\n            false\\n        );\\n\\n        emit GameCreated(gameId, msg.sender, msg.value);\\n    }\\n\\n    function joinGame(string memory gameId) external payable {\\n        require(\\n            games[gameId].player1 != msg.sender,\\n            \\\"You are the game creator!\\\"\\n        );\\n        require(games[gameId].player1 != address(0), \\\"Game does not exist\\\");\\n        require(games[gameId].player2 == address(0), \\\"Game is already full\\\");\\n        require(msg.value == games[gameId].stake, \\\"Invalid stake amount\\\");\\n\\n        games[gameId].player2 = msg.sender;\\n\\n        emit GameJoined(gameId, msg.sender);\\n    }\\n\\n    function collectReward(\\n        string memory gameId,\\n        address payable winner\\n    ) external payable noReentrant {\\n        require(games[gameId].player1 != address(0), \\\"Game ID does not exist\\\");\\n        require(games[gameId].finished == false, \\\"Game has already finished\\\");\\n        require(\\n            msg.sender == games[gameId].player1 ||\\n                msg.sender == games[gameId].player2,\\n            \\\"Only players can finish the game\\\"\\n        );\\n        require(msg.sender == winner, \\\"Invalid winner address\\\");\\n\\n        uint256 totalStake = games[gameId].stake * 2;\\n        uint256 communityFee = (totalStake * COMMUNITY_FEE) / 100;\\n        uint256 amountWon = (totalStake * 95) / 100;\\n        uint256 holderReward = (totalStake * 1) / 100;\\n\\n        require(\\n            address(this).balance >= totalStake,\\n            \\\"Insufficient contract balance\\\"\\n        );\\n\\n        payable(communityWallet).transfer(communityFee);\\n        payable(premiumHoldersContract).transfer(\\n            (holderReward * PREMIUM_HOLDER_REWARD) / 100\\n        );\\n        payable(proHoldersContract).transfer(\\n            (holderReward * PRO_HOLDER_REWARD) / 100\\n        );\\n        payable(basicHoldersContract).transfer(\\n            (holderReward * BASIC_HOLDER_REWARD) / 100\\n        );\\n\\n        winner.transfer(amountWon);\\n\\n        games[gameId].winner = winner;\\n        games[gameId].finished = true;\\n\\n        emit GameFinished(gameId, winner, amountWon);\\n    }\\n\\n    function getGameDetails(\\n        string memory gameId\\n    )\\n        external\\n        view\\n        returns (\\n            address player1,\\n            address player2,\\n            uint256 stake,\\n            address winner,\\n            bool finished\\n        )\\n    {\\n        require(games[gameId].player1 != address(0), \\\"Game ID does not exist\\\");\\n        return (\\n            games[gameId].player1,\\n            games[gameId].player2,\\n            games[gameId].stake,\\n            games[gameId].winner,\\n            games[gameId].finished\\n        );\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumHoldersContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proHoldersContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basicHoldersContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC_HOLDER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREMIUM_HOLDER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRO_HOLDER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicHoldersContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"}],\"name\":\"getGameDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumHoldersContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proHoldersContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setBasicHolderReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setBasicHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setCommunityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setPremiumHolderReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setPremiumHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setProHolderReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setProHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Whotie", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000236bfa8c28ed21ee55dbbdaa3d4a5477c337a3520000000000000000000000005e7934d0a80d512d87fd87c87373764c793d3c490000000000000000000000005e7934d0a80d512d87fd87c87373764c793d3c490000000000000000000000005e7934d0a80d512d87fd87c87373764c793d3c49", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}