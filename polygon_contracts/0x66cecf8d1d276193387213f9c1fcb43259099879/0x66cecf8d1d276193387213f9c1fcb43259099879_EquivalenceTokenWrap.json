{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    }\r\ninterface EquivalenceProtocol {\r\n    function externalMint(address _addr, uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n//********************************************************************************************\r\n//***********************      HERE STARTS THE CODE OF CONTRACT     **************************\r\n//********************************************************************************************\r\n\r\ncontract EquivalenceTokenWrapper {\r\n\r\n// simplified version of ownable (to save gas)\r\n    address private _owner;\r\n    constructor() {_owner = msg.sender;}\r\n    modifier onlyOwner() {require(_owner == msg.sender, \"Ownable: caller is not the owner\"); _;}\r\n\r\n// variables\r\n    EquivalenceProtocol public EQT;\r\n    IERC20 public WEQT;\r\n    bool public EQTaddressLocked = false;\r\n    bool public WEQTaddressLocked = false;\r\n    uint256 public RequiredUnlockTime = 7776000; // 90 days\r\n    uint256 internal timestamp = 0;\r\n    error Locked();\r\n    error Amount_Too_High();\r\n\r\n// onlyOwner functions\r\n    function setEQT(EquivalenceProtocol _addr) external onlyOwner {if (EQTaddressLocked) {revert Locked();} else {EQT = _addr;}}\r\n    function lockEQTaddress(bool confirm) external onlyOwner {if (confirm) {EQTaddressLocked = true;}}\r\n    function setWEQT(IERC20 _addr) external onlyOwner {if (WEQTaddressLocked) {revert Locked();} else {WEQT = _addr;}}\r\n    function lockWEQTaddress(bool confirm) external onlyOwner {if (confirm) {WEQTaddressLocked = true;}}\r\n    function lock() external onlyOwner {timestamp = 0;}\r\n    function unlock() external onlyOwner {timestamp = block.timestamp;}\r\n    function Withdraw_WEQT(uint256 amount) external onlyOwner {\r\n        if ((timestamp == 0) || (timestamp + RequiredUnlockTime >= block.timestamp)) {revert Locked();}\r\n        WEQT.transfer(_owner, amount);\r\n    }\r\n\r\n// view functions\r\n    function checkRemainingLockTime() external view returns (string memory status, uint256 time) {\r\n        if (timestamp == 0) {return (\"locked\", 99999999999);}\r\n        else if ((block.timestamp - timestamp) >= RequiredUnlockTime) {return (\"unlocked\", 0);}\r\n        else {return (\"unlocking\", (RequiredUnlockTime - (block.timestamp - timestamp)));}\r\n    }\r\n\r\n// wrapping + unwrapping\r\n    function wrapEQT(uint256 amount) external {\r\n        if (amount > WEQT.balanceOf(address(this))) {revert Amount_Too_High();}\r\n        unchecked {\r\n        if (WEQT.balanceOf(address(this)) >= 10**27) {              // 10**27 = 1 billion EQT\r\n            EQT.burnFrom(msg.sender, amount);\r\n            WEQT.transfer(msg.sender, amount);\r\n        } else {\r\n            EQT.burnFrom(msg.sender, amount);\r\n            amount = amount - ((amount * (10**27 - WEQT.balanceOf(address(this)))) / (10**27 + (100 * WEQT.balanceOf(address(this)))));   // fee deduced from the amount when there is \"low\" supply of WEQT\r\n            WEQT.transfer(msg.sender, amount);\r\n        }}\r\n    }\r\n    function unwrapWEQT(uint256 amount) external { unchecked {\r\n        if (WEQT.balanceOf(address(this)) >= 9*10**26) {            // 9*10**26 = 900 million EQT\r\n            WEQT.transferFrom(msg.sender, address(this), amount);\r\n            EQT.externalMint(msg.sender, amount);\r\n        } else {\r\n            WEQT.transferFrom(msg.sender, address(this), amount);\r\n            amount = amount*1001/1000;                              // gives 0.1% bonus EQT when there is \"low\" supply of WEQT to incentivize users to bring in more WEQT\r\n            EQT.externalMint(msg.sender, amount);\r\n        }}\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Amount_Too_High\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EQT\",\"outputs\":[{\"internalType\":\"contract EquivalenceProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTaddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RequiredUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEQT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEQTaddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw_WEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRemainingLockTime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"confirm\",\"type\":\"bool\"}],\"name\":\"lockEQTaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"confirm\",\"type\":\"bool\"}],\"name\":\"lockWEQTaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract EquivalenceProtocol\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapWEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EquivalenceTokenWrapper", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eac1c11357e7cbc1bce5d5cb8f4314829686c6c01c44690241c4020c58c1c728"}