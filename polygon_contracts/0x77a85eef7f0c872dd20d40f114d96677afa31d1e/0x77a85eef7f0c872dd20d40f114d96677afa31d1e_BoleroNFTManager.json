{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BoleroNFTManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588          \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588        \u2584\u2588\u2588\u2588\u2584\u2584\u2584      \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580     \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580   \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \\n                        \u2580                        \u2588\u2588\u2588    \u2588\u2588\u2588   \\n*/\\n\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./LockRegistry.sol\\\";\\n\\ninterface IBoleroNFTDeployer {\\n    function rewards() external view returns (address);\\n\\n    function setRewards(address _rewards) external;\\n\\n    function management() external view returns (address);\\n\\n    function setManagement(address _management) external;\\n\\n    function acceptManagement() external;\\n}\\n\\ninterface IBoleroNFT {\\n    struct Royalties {\\n        uint256 boleroFeesPrimary;\\n        uint256 boleroFeesSecondary;\\n        uint256 artistRoyalties;\\n    }\\n\\n    struct MintData {\\n        address _to;\\n        string _tokenURI;\\n        uint256 _collectionId;\\n    }\\n\\n    struct MintAndSellData {\\n        address _to;\\n        address _wantToken;\\n        string _tokenURI;\\n        uint256 _wantAmount;\\n        uint256 _collectionId;\\n    }\\n\\n    struct MintAndBidData {\\n        address _to;\\n        address _wantToken;\\n        string _tokenURI;\\n        uint256 _startOffer;\\n        uint256 _collectionId;\\n        uint256[2] _startEndTime;\\n    }\\n\\n    function newCollection(\\n        address artistAddress,\\n        address collectionPaymentAddress,\\n        address privateSaleToken,\\n        string memory collectionName,\\n        Royalties memory _royalties,\\n        uint256 cap,\\n        uint256 privateSaleThreshold\\n    ) external;\\n\\n    function newCollectionWithPaymentSplitter(\\n        address artistAddress,\\n        address privateSaleToken,\\n        string memory collectionName,\\n        address[] memory _payees,\\n        string[] memory _roles,\\n        uint256[] memory _shares,\\n        Royalties memory _royalties,\\n        uint256 cap,\\n        uint256 privateSaleThreshold\\n    ) external;\\n\\n    function newPaymentSplitter(\\n        address[] memory _payees,\\n        string[] memory _roles,\\n        uint256[] memory _shares,\\n        uint256 _collectionId\\n    ) external returns (address);\\n\\n    function mintNFTAndOpenSellOffer(\\n        MintData memory _mintData,\\n        address _wantToken,\\n        uint256 _wantAmount\\n    ) external returns (uint256);\\n\\n    function mintNFTAndOpenBidOffer(\\n        MintData memory _mintData,\\n        address _wantToken,\\n        uint256 _startOffer,\\n        uint256[2] memory _startEndTime\\n    ) external returns (uint256);\\n\\n    function mintBatchNFT(MintData[] memory _mintData) external;\\n\\n    function mintBatchNFTAndOpenSellOffer(MintAndSellData[] memory _mintData)\\n        external;\\n\\n    function mintBatchNFTAndOpenBidOffer(MintAndBidData[] memory _mintData)\\n        external;\\n\\n    function changeTokenURI(uint256 _tokenId, string memory _tokenURI) external;\\n\\n    function setBoleroSwap(address _boleroSwap) external;\\n\\n    function setCollectionPaymentAddress(\\n        address _payment,\\n        uint256 _collectionId\\n    ) external;\\n\\n    function mintNFT(\\n        address _to,\\n        string memory _tokenURI,\\n        uint256 _collectionId\\n    ) external returns (uint256);\\n\\n    function setBoleroPaymentSplitterImplementation(address _implementation)\\n        external;\\n\\n    function setBoleroMultisigImplementation(address _implementation) external;\\n\\n    function setRewards(address _rewards) external;\\n\\n    function collectionPayment(uint256 _collectionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function collectionMultisig(uint256 _collectionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function isWithPaymentSplitter(uint256 _collectionId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setThresholdPrivate(uint256 _collectionId, uint256 cap)\\n        external;\\n\\n    function artistPayment(uint256 _tokenID) external view returns (bool);\\n\\n    function getRoyalties(uint256 _tokenID) external view returns (uint256);\\n\\n    function getCollectionIDForToken(uint256 _tokenID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function listTokensForCollection(uint256 _collectionID)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function listTokensForArtist(address _artist)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function listCollectionsForArtist(address _artist)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function rewards2981() external view returns (address);\\n\\n    function lockId(uint256 _id) external;\\n\\n\\t  function unlockId(uint256 _id) external;\\n}\\n\\ninterface IBoleroNFTSwap {\\n    function rewards() external view returns (address);\\n\\n    function grantTokens(address[] memory recipients, address nftAddress, uint256[] memory tokenIds) external;\\n\\n    function setRewards(address _rewards) external;\\n\\n    function getRewards() external view returns (address);\\n}\\n\\ninterface IPaymentSplitter {\\n    function migratePayee(\\n        address oldPayee,\\n        address newPayee,\\n        string memory role\\n    ) external;\\n\\n    function addPayee(\\n        address account,\\n        uint256 shares,\\n        string memory role\\n    ) external;\\n\\n    function updatePayeeShares(address account, uint256 newShares) external;\\n\\n    function releaseToken(address _want) external;\\n}\\n\\ncontract BoleroNFTManager is AccessControl, LockRegistry {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant GRANTER_ROLE = keccak256(\\\"GRANTER_ROLE\\\");\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    IBoleroNFTDeployer public BoleroNFTDeployer;\\n    IBoleroNFT public BoleroNFT;\\n    IBoleroNFTSwap public BoleroNFTSwap;\\n    IPaymentSplitter public boleroPaymentSplitter;\\n\\n    address public rewards = address(0);\\n    address public rewards2981 = address(0);\\n    address public management = address(0);\\n\\n    /*******************************************************************************\\n     *  @notice Initialize the new contract.\\n     *  @param _admin The admin of BoleroManager\\n     *******************************************************************************/\\n    constructor(address _admin, address _granter, address _keeper) {\\n        _setupRole(ADMIN_ROLE, _admin);\\n        _setupRole(GRANTER_ROLE, _granter);\\n        _setupRole(KEEPER_ROLE, _keeper);\\n        _setRoleAdmin(OPERATOR_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(GRANTER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(KEEPER_ROLE, ADMIN_ROLE);\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice Initialize the new contract with all contract's addresses.\\n     *          It also initialize the management.\\n     *  @param _boleroDeployer address of the boleroDeployer contract needed for management rights\\n     *  @param _boleroNFT address of the BoleroNFT contract.\\n     *  @param _boleroSwap address of the BoleroSwap.\\n     *******************************************************************************/\\n    function initializeManager(\\n        address _boleroDeployer,\\n        address _boleroNFT,\\n        address _boleroSwap\\n    ) public onlyRole(ADMIN_ROLE) {\\n        BoleroNFTDeployer = IBoleroNFTDeployer(_boleroDeployer);\\n        BoleroNFT = IBoleroNFT(_boleroNFT);\\n        BoleroNFTSwap = IBoleroNFTSwap(_boleroSwap);\\n        rewards = BoleroNFTDeployer.rewards();\\n        management = BoleroNFTDeployer.management();\\n        // set implementations here\\n        // Emit event when initialization.\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Initialize the management address\\n     *  @param _management address of the management.\\n     *******************************************************************************/\\n    function setManagement(address _management) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFTDeployer.setManagement(_management);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Aceept the new management.\\n     *******************************************************************************/\\n    function acceptManagement() public {\\n        BoleroNFTDeployer.acceptManagement();\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice BoleroNFT functions\\n     *******************************************************************************/\\n\\n    /*******************************************************************************\\n     *  @dev Setting the address of the BoleroNFTSwap contract\\n     *  @param _boleroSwap the address of the new BoleroNFTSwap contract.\\n     *******************************************************************************/\\n    function setBoleroSwap(address _boleroSwap) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.setBoleroSwap(_boleroSwap);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Setting the address of the BoleroNFTSwap contract\\n     *  @param _boleroSwap the address of the new BoleroNFTSwap contract.\\n     *******************************************************************************/\\n    function setPrivateThreshold(uint256 _collectionId, uint256 _threshold) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.setThresholdPrivate(_collectionId, _threshold);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Set the implementation of the paymentSplitter to be cloned.\\n     *  @param implementation Address of the contract to be cloned.\\n     *******************************************************************************/\\n    function setBoleroPaymentSplitterImplementation(address _implementation)\\n        public\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        BoleroNFT.setBoleroPaymentSplitterImplementation(_implementation);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Set the implementation of the boleroMultisig to be cloned.\\n     *  @param implementation Address of the contract to be cloned.\\n     *******************************************************************************/\\n    function setBoleroMultisigImplementation(address _implementation)\\n        public\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        BoleroNFT.setBoleroMultisigImplementation(_implementation);\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice Initialize the new contract.\\n     *  @param artistAddress The address of the artist\\n     *  @param collectionPaymentAddress payment address for this artist\\n     *  @param collectionName Name of the collection\\n     *  @param artistRoyalty amount of royalties in % for this artist\\n     *  @param cap the maximum amount of tokens in the collection\\n     *  @param privateSaleThreshold the amount of tokens needed to be able to buy\\n     *                             a token from this collection on the swap.\\n     *******************************************************************************/\\n    function newCollection(\\n        address artistAddress,\\n        address collectionPaymentAddress,\\n        address privateSaleToken,\\n        string memory collectionName,\\n        IBoleroNFT.Royalties memory _royalties,\\n        uint256 cap,\\n        uint256 privateSaleThreshold\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.newCollection(\\n            artistAddress,\\n            collectionPaymentAddress,\\n            privateSaleToken,\\n            collectionName,\\n            _royalties,\\n            cap,\\n            privateSaleThreshold\\n        );\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice Initialize a collection with paymentSplitter and a Multisig with it.\\n     *  @param artistAddress The address of the artist\\n     *  @param collectionPaymentAddress payment address for this artist\\n     *  @param collectionName Name of the collection\\n     *  @param _payees Array of addresses of the different beneficiaries.\\n     *  @param _roles The roles of each beneficiaries/payees per index.\\n     *  @param _shares The ammount of shares each payees will get, index per index.\\n     *  @param artistRoyalty amount of royalties in % for this artist\\n     *\\t@param cap the maximum amount of tokens in the collection\\n     *\\t@param privateSaleThreshold the amount of tokens needed to be able to buy\\n     *                              a token from this collection on the swap.\\n     *******************************************************************************/\\n    function newCollectionWithPaymentSplitter(\\n        address artistAddress,\\n        address privateSaleToken,\\n        string memory collectionName,\\n        address[] memory _payees,\\n        string[] memory _roles,\\n        uint256[] memory _shares,\\n        IBoleroNFT.Royalties memory _royalties,\\n        uint256 cap,\\n        uint256 privateSaleThreshold\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.newCollectionWithPaymentSplitter(\\n            artistAddress,\\n            privateSaleToken,\\n            collectionName,\\n            _payees,\\n            _roles,\\n            _shares,\\n            _royalties,\\n            cap,\\n            privateSaleThreshold\\n        );\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Admins can mintNFT on behalf of any artists if they want it too\\n     *       this is purely because some of our clients wants us to take care of that part for them.\\n     *  @param _to: Address of the address receiving the new token\\n     *  @param _tokenURI: Data to attach to this token\\n     *  @param _collectionId: the collection in wich we should put this token\\n     *******************************************************************************/\\n    function mintNFT(\\n        address _to,\\n        string memory _tokenURI,\\n        uint256 _collectionId\\n    ) public onlyRole(OPERATOR_ROLE) returns (uint256) {\\n        return BoleroNFT.mintNFT(_to, _tokenURI, _collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Mint a new NFT for a specific address and put a sell offer on the\\n     *          swap contract\\n     *\\t@param _to: Address of the address receiving the new token\\n     *\\t@param _tokenURI: Data to attach to this token\\n     *\\t@param _collectionId: the collection in wich we should put this token\\n     *\\t@param _wantToken: token expected as countervalue\\n     *\\t@param _wantAmount: amount expected as countervalue\\n     *******************************************************************************/\\n    function mintNFTAndOpenSellOffer(\\n        IBoleroNFT.MintData memory _mintData,\\n        address _wantToken,\\n        uint256 _wantAmount\\n    ) public onlyRole(OPERATOR_ROLE) returns (uint256) {\\n        return\\n            BoleroNFT.mintNFTAndOpenSellOffer(\\n                _mintData,\\n                _wantToken,\\n                _wantAmount\\n            );\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Mint a new NFT for a specific address and put a bid offer on the\\n     *          swap contract\\n     *\\t@param _to: Address of the address receiving the new token\\n     *\\t@param _tokenURI: Data to attach to this token\\n     *\\t@param _collectionId: the collection in wich we should put this token\\n     *\\t@param _wantToken: token expected as countervalue\\n     *\\t@param _startOffer start price for this bid\\n     *\\t@param _startTime: start time for this auction\\n     *\\t@param _endTime: end time for this auction\\n     *******************************************************************************/\\n    function mintNFTAndOpenBidOffer(\\n        IBoleroNFT.MintData memory _mintData,\\n        address _wantToken,\\n        uint256 _startOffer,\\n        uint256[2] memory _startEndTime\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.mintNFTAndOpenBidOffer(\\n            _mintData,\\n            _wantToken,\\n            _startOffer,\\n            _startEndTime\\n        );\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Mint a batch of new NFT. Only the Bolero Management or the artist\\n     *          can mint.\\n     *\\t@param _mintData: Array of MintData to mint the NFT\\n     *******************************************************************************/\\n    function mintBatchNFT(IBoleroNFT.MintData[] memory _mintData)\\n        public\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        BoleroNFT.mintBatchNFT(_mintData);\\n    }\\n\\n    /*******************************************************************************\\n     * @notice Mint a batch of new NFT for a specific address and put a sell offer\\n     *         on the swap contract\\n     *\\t@param _mintData: Array of MintAndSellData to mint the NFT\\n     *******************************************************************************/\\n    function mintBatchNFTAndOpenSellOffer(\\n        IBoleroNFT.MintAndSellData[] memory _mintData\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.mintBatchNFTAndOpenSellOffer(_mintData);\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Mint a batch of new NFT for a specific address and put a bid offer\\n     *          on the swap contract\\n     *\\t@param _mintData: Array of MintAndBidData to mint the NFT\\n     *******************************************************************************/\\n    function mintBatchNFTAndOpenBidOffer(\\n        IBoleroNFT.MintAndBidData[] memory _mintData\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.mintBatchNFTAndOpenBidOffer(_mintData);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *  `tokenId` must exist.\\n     *******************************************************************************/\\n    function changeTokenURI(uint256 _tokenId, string memory _tokenURI)\\n        public\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        BoleroNFT.changeTokenURI(_tokenId, _tokenURI);\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Create a new paymentSplitter for an existing collection w/ a multisig.\\n     *  @param _payees Array of addresses of the different beneficiaries.\\n     *  @param _roles The roles of each beneficiaries/payees per index.\\n     *  @param _shares The ammount of shares each payees will get, index per index.\\n     *\\t@param collectionId The id of the collection.\\n     *******************************************************************************/\\n    function newPaymentSplitter(\\n        address[] memory _payees,\\n        string[] memory _roles,\\n        uint256[] memory _shares,\\n        uint256 _collectionId\\n    ) public onlyRole(OPERATOR_ROLE) returns (address) {\\n        return\\n            BoleroNFT.newPaymentSplitter(\\n                _payees,\\n                _roles,\\n                _shares,\\n                _collectionId\\n            );\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@notice Replace the payment address of a collection. Can only be called by\\n     *\\t        the artist or Bolero.\\n     *\\t@param _payment new address to use as payment address\\n     *\\t@param _collectionId id of the collection to update\\n     *******************************************************************************/\\n    function setCollectionPaymentAddress(\\n        address _payment,\\n        uint256 _collectionId\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.setCollectionPaymentAddress(_payment, _collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return the payment address for a specific collection id\\n     *******************************************************************************/\\n    function collectionPayment(uint256 _collectionId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return BoleroNFT.collectionPayment(_collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return the multisig address for a specific collection id\\n     *******************************************************************************/\\n    function collectionMultisig(uint256 _collectionId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return BoleroNFT.collectionMultisig(_collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return a boolean to know if a specific collection id comes w/ a paymentSplitter\\n     *******************************************************************************/\\n    function isWithPaymentSplitter(uint256 _collectionId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return BoleroNFT.isWithPaymentSplitter(_collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return the payment address for a specific token id\\n     *******************************************************************************/\\n    function artistPayment(uint256 _tokenID) public view returns (bool) {\\n        return BoleroNFT.artistPayment(_tokenID);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return the royalties for a specific token id\\n     *******************************************************************************/\\n    function getRoyalties(uint256 _tokenID) public view returns (uint256) {\\n        return BoleroNFT.getRoyalties(_tokenID);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Return the collection id for a specific token id\\n     *******************************************************************************/\\n    function getCollectionIDForToken(uint256 _tokenID)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return BoleroNFT.getCollectionIDForToken(_tokenID);\\n    }\\n\\n    function listTokensForCollection(uint256 _collectionID)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return BoleroNFT.listTokensForCollection(_collectionID);\\n    }\\n\\n    function listTokensForArtist(address _artist)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return BoleroNFT.listTokensForArtist(_artist);\\n    }\\n\\n    function listCollectionsForArtist(address _artist)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return BoleroNFT.listCollectionsForArtist(_artist);\\n    }\\n\\n    function setRewards2981(address _rewards) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFT.setRewards(_rewards);\\n        rewards2981 = BoleroNFT.rewards2981();\\n    }\\n\\n    /*******************************************************************************\\n     *  @notice getters to get the paymentSplitters addresses\\n     *******************************************************************************/\\n    function getCollectionPaymentAddress(uint256 _collectionId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return BoleroNFT.collectionPayment(_collectionId);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Update the adresse of a specific payee\\n     *        This function is not cheap as it need to reorganize the table and swap\\n     *        all the addresses to ensure the correct price.\\n     *        If the address is already in the payees, it's shares will be replaced.\\n     *  @param contractAddress the address of the paymentSplitter of the collection.\\n     *  @param oldPayee the address of the older payee\\n     *  @param newPayee the address of the new payee\\n     *  @param role the role of the new payee\\n     *******************************************************************************/\\n    function migratePayee(\\n        address contractAddress,\\n        address oldPayee,\\n        address newPayee,\\n        string memory role\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        boleroPaymentSplitter = IPaymentSplitter(contractAddress);\\n        boleroPaymentSplitter.migratePayee(oldPayee, newPayee, role);\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Add a new payee to the contract.\\n     *  @param contractAddress the address of the paymentSplitter of the collection.\\n     *\\t@param account The address of the payee to add.\\n     *\\t@param shares_ The number of shares owned by the payee.\\n     *******************************************************************************/\\n    function addPayee(\\n        address contractAddress,\\n        address account,\\n        uint256 shares,\\n        string memory role\\n    ) public onlyRole(OPERATOR_ROLE) {\\n        boleroPaymentSplitter = IPaymentSplitter(contractAddress);\\n        boleroPaymentSplitter.addPayee(account, shares, role);\\n    }\\n\\n    /*******************************************************************************\\n     *\\t@dev Update the shares for a payee\\n     *  @param contractAddress the address of the paymentSplitter of the collection.\\n     *\\t@param account The address of the payee to add.\\n     *\\t@param newShares The number of shares to set for the account\\n     *******************************************************************************/\\n    function updatePayeeShares(\\n        address contractAddress,\\n        address account,\\n        uint256 newShares\\n    ) public onlyRole(OPERATOR_ROLE) returns (bool success) {\\n        boleroPaymentSplitter = IPaymentSplitter(contractAddress);\\n        boleroPaymentSplitter.updatePayeeShares(account, newShares);\\n        return true;\\n    }\\n\\n    /*******************************************************************************\\n     *  @dev Triggers a transfer to `account` of the amount of `want` they\\n     *       are owed, according to their percentage of the total shares and their\\n     *\\t\\t   previous withdrawals.\\n     *       note: Anyone can trigger this release\\n     * @param contractAddress the address of the paymentSplitter of the collection.\\n     *******************************************************************************/\\n    function releaseToken(address contractAddress, address _want)\\n        public\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        boleroPaymentSplitter = IPaymentSplitter(contractAddress);\\n        boleroPaymentSplitter.releaseToken(_want);\\n    }\\n\\n    /***************************************************\\n     *  @notice\\n     *\\t@dev Setting the reward address for the boleroSwap\\n     *  @param _rewards address of the rewards\\n     ***************************************************/\\n    function grantTokens(address[] memory recipients, address nftAddress, uint256[] memory tokenIds) public onlyRole(GRANTER_ROLE) {\\n        BoleroNFTSwap.grantTokens(recipients, nftAddress, tokenIds);\\n    }\\n\\n    /***************************************************\\n     *  @notice\\n     *  @dev Setting the reward address for the boleroSwap\\n     *  @param _rewards address of the rewards\\n     ***************************************************/\\n    function lockId(uint256 tokenId) public onlyRole(KEEPER_ROLE) {\\n        BoleroNFT.lockId(tokenId);\\n    }\\n\\n    /***************************************************\\n     *  @notice\\n     *\\t@dev Setting the reward address for the boleroSwap\\n     *  @param _rewards address of the rewards\\n     ***************************************************/\\n    function unlockId(uint256 tokenId) public onlyRole(KEEPER_ROLE) {\\n        BoleroNFT.unlockId(tokenId);\\n    }\\n\\n    /***************************************************\\n     *  @notice\\n     *\\t@dev Setting the reward address for the boleroSwap\\n     *  @param _rewards address of the rewards\\n    ***************************************************/\\n    function setRewards(address _rewards) public onlyRole(OPERATOR_ROLE) {\\n        BoleroNFTSwap.setRewards(_rewards);\\n        rewards = BoleroNFTSwap.rewards();\\n    }\\n\\n    /***************************************************\\n     *\\t@dev Getting the reward address for the boleroSwap\\n     ***************************************************/\\n    function getRewards() public view returns (address) {\\n        return BoleroNFTSwap.rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LockRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588          \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2580    \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588        \u2584\u2588\u2588\u2588\u2584\u2584\u2584      \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580     \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580   \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588         \u2588\u2588\u2588    \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u258c    \u2584   \u2588\u2588\u2588    \u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \\n\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588    \u2588\u2588\u2588  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \\n                        \u2580                        \u2588\u2588\u2588    \u2588\u2588\u2588   \\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IBoleroERC721.sol\\\";\\n\\ncontract LockRegistry is Ownable {\\n    mapping(address => bool) public approvedContract;\\n    mapping(uint256 => bool) public lockMap;\\n    address[] public keys;\\n\\n    event TokenLocked(\\n        uint256 indexed tokenId,\\n        address indexed approvedContract\\n    );\\n    event TokenUnlocked(\\n        uint256 indexed tokenId,\\n        address indexed approvedContract\\n    );\\n\\n    function isLocked(uint256 _id) external view returns (bool) {\\n        return lockMap[_id];\\n    }\\n\\n    function updateApprovedContracts(\\n        address[] calldata _contracts,\\n        bool[] calldata _values\\n    ) external onlyOwner {\\n          require(_contracts.length == _values.length, \\\"!length\\\");\\n          for(uint256 i = 0; i < _contracts.length; i++){\\n            keys.push(_contracts[i]);\\n            approvedContract[_contracts[i]] = _values[i];\\n          }\\n    }\\n\\n    function initApprovedContracts( address[] memory _contracts ) internal  {\\n        for(uint256 i = 0; i < _contracts.length; i++){\\n          keys.push(_contracts[i]);\\n          approvedContract[_contracts[i]] = true;\\n        }\\n    }\\n\\n    function getApprovedContracts() external view returns ( address[] memory ){\\n        return keys;\\n    } \\n\\n    function _lockId(uint256 _id) internal {\\n        require(!lockMap[_id], \\\"ID already locked by caller\\\");\\n        lockMap[_id] = true;\\n        emit TokenLocked(_id, msg.sender);\\n    }\\n\\n    function _unlockId(uint256 _id) internal {\\n        require(lockMap[_id], \\\"ID already unlocked\\\");\\n\\n        lockMap[_id] = false;\\n        emit TokenUnlocked(_id, msg.sender);\\n    }\\n\\n}\"\r\n    },\r\n    \"interfaces/IBoleroERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IBoleroERC721 {\\n\\n\\t/**\\n\\t * @dev Returns if the token is locked (non-transferrable) or not.\\n\\t */\\n\\tfunction isLocked(uint256 _id) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Locks a token, preventing it from being transferrable\\n\\t */\\n\\tfunction lockId(uint256 _id) external;\\n\\n\\t/**\\n\\t * @dev Unlocks a token.\\n\\t */\\n\\tfunction unlockId(uint256 _id) external;\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedContract\",\"type\":\"address\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedContract\",\"type\":\"address\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoleroNFT\",\"outputs\":[{\"internalType\":\"contract IBoleroNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoleroNFTDeployer\",\"outputs\":[{\"internalType\":\"contract IBoleroNFTDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoleroNFTSwap\",\"outputs\":[{\"internalType\":\"contract IBoleroNFTSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRANTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"artistPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boleroPaymentSplitter\",\"outputs\":[{\"internalType\":\"contract IPaymentSplitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"collectionMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"collectionPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getCollectionIDForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"getCollectionPaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"grantTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boleroDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boleroNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boleroSwap\",\"type\":\"address\"}],\"name\":\"initializeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"isWithPaymentSplitter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"}],\"name\":\"listCollectionsForArtist\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"}],\"name\":\"listTokensForArtist\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionID\",\"type\":\"uint256\"}],\"name\":\"listTokensForCollection\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldPayee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPayee\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"migratePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.MintData[]\",\"name\":\"_mintData\",\"type\":\"tuple[]\"}],\"name\":\"mintBatchNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_startEndTime\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IBoleroNFT.MintAndBidData[]\",\"name\":\"_mintData\",\"type\":\"tuple[]\"}],\"name\":\"mintBatchNFTAndOpenBidOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.MintAndSellData[]\",\"name\":\"_mintData\",\"type\":\"tuple[]\"}],\"name\":\"mintBatchNFTAndOpenSellOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.MintData\",\"name\":\"_mintData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_startEndTime\",\"type\":\"uint256[2]\"}],\"name\":\"mintNFTAndOpenBidOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.MintData\",\"name\":\"_mintData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmount\",\"type\":\"uint256\"}],\"name\":\"mintNFTAndOpenSellOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"privateSaleToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"boleroFeesPrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boleroFeesSecondary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artistRoyalties\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.Royalties\",\"name\":\"_royalties\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateSaleThreshold\",\"type\":\"uint256\"}],\"name\":\"newCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"privateSaleToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_roles\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"boleroFeesPrimary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boleroFeesSecondary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artistRoyalties\",\"type\":\"uint256\"}],\"internalType\":\"struct IBoleroNFT.Royalties\",\"name\":\"_royalties\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"privateSaleThreshold\",\"type\":\"uint256\"}],\"name\":\"newCollectionWithPaymentSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_roles\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"newPaymentSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards2981\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setBoleroMultisigImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setBoleroPaymentSplitterImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boleroSwap\",\"type\":\"address\"}],\"name\":\"setBoleroSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"setCollectionPaymentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setPrivateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards2981\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateApprovedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"updatePayeeShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoleroNFTManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000002609b6acff673e51f2d2506f1c74bc604911f8310000000000000000000000005df88ce613c4e72f2bc428b021c8d9dff0eedbfc000000000000000000000000847186780f66db84099f6963f7da57eef7e3b5f7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}