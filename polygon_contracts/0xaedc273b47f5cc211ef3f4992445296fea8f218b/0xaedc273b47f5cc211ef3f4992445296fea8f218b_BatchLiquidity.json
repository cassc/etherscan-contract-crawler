{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/markets/BatchLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IMarketMakerV1, MarketErrors } from \\\"./IMarketMaker.sol\\\";\\nimport { ArrayMath } from \\\"../Math.sol\\\";\\n\\ncontract BatchLiquidity is MarketErrors {\\n    using ArrayMath for uint256[];\\n\\n    /// @notice Removes the collateral liquidity of the transaction sender from\\n    /// the specified resolved markets. The transaction reverts if any of these\\n    /// market was not resolved.\\n    /// @param markets Array of markets to remove the liquidity from.\\n    function batchRemoveLiquidity(IMarketMakerV1[] calldata markets, address[] calldata funders)\\n        public\\n        returns (uint256 collateralRefunded)\\n    {\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            IMarketMakerV1 market = markets[i];\\n\\n            // burns the LP tokens (shares) up to `limitOfFunders` funders\\n            // corresponding collateral liquidity to him.\\n            (, uint256 collateralRefunded_) = market.removeAllCollateralFunding(funders);\\n            collateralRefunded += collateralRefunded_;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/IMarketMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { MarketErrors } from \\\"./MarketErrors.sol\\\";\\nimport { IFundingPoolV1 } from \\\"../funding/IFundingPoolV1.sol\\\";\\nimport { IUpdateFairPrices } from \\\"./IUpdateFairPrices.sol\\\";\\n\\n/// @dev Interface evolution is done by creating new versions of the interfaces\\n/// and making sure that the derived MarketMaker supports all of them.\\n/// Alternatively we could have gone with breaking the interface down into each\\n/// function one by one and checking each function selector. This would\\n/// introduce a lot more code in `supportsInterface` which is called often, so\\n/// it's easier to keep track of incremental evolution than all the constituent\\n/// pieces\\ninterface IMarketMakerV1 is IFundingPoolV1, IUpdateFairPrices, MarketErrors {\\n    event MarketBuy(\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 feeAmount,\\n        uint256 indexed outcomeIndex,\\n        uint256 outcomeTokensBought\\n    );\\n    event MarketSell(\\n        address indexed seller,\\n        uint256 returnAmount,\\n        uint256 feeAmount,\\n        uint256 indexed outcomeIndex,\\n        uint256 outcomeTokensSold\\n    );\\n\\n    event MarketSpontaneousPrices(uint256[] spontaneousPrices);\\n\\n    function removeFunding(uint256 sharesToBurn) external returns (uint256 collateral, uint256[] memory sendAmounts);\\n\\n    function buyFor(address receiver, uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        external\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function buy(uint256 investmentAmount, uint256 outcomeIndex, uint256 minOutcomeTokensToBuy)\\n        external\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function sell(uint256 returnAmount, uint256 outcomeIndex, uint256 maxOutcomeTokensToSell)\\n        external\\n        returns (uint256 outcomeTokensSold);\\n\\n    function removeCollateralFundingOf(address ownerAndReceiver, uint256 sharesToBurn)\\n        external\\n        returns (uint256[] memory sendAmounts, uint256 collateral);\\n\\n    function removeAllCollateralFunding(address[] calldata funders)\\n        external\\n        returns (uint256 totalSharesBurnt, uint256 totalCollateralRemoved);\\n\\n    function isHalted() external view returns (bool);\\n\\n    function calcBuyAmount(uint256 investmentAmount, uint256 outcomeIndex)\\n        external\\n        view\\n        returns (uint256 outcomeTokensBought, uint256 feeAmount, uint256[] memory spontaneousPrices);\\n\\n    function calcSellAmount(uint256 returnAmount, uint256 outcomeIndex) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Note on libraries. If any functions are not `internal`, then contracts that\\n// use the libraries, must be linked.\\n\\nlibrary ArrayMath {\\n    function sum(uint256[] memory values) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < values.length; i++) {\\n            result += values[i];\\n        }\\n        return result;\\n    }\\n\\n    function hasNonzeroEntries(uint256[] memory values) internal pure returns (bool) {\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (values[i] > 0) return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/// @dev Math with saturation/clamping for overflow/underflow handling\\nlibrary ClampedMath {\\n    /// @dev max(0, a - b)\\n    function subClamp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a > b ? a - b : 0;\\n        }\\n    }\\n\\n    /// @dev min(type(uint256).max, max(0, a + b))\\n    function addClamp(uint256 a, int256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b < 0) {\\n                // The absolute value of type(int256).min is not representable\\n                // in int256, so have to dance about with the + 1\\n                uint256 positiveB = uint256(-(b + 1)) + 1;\\n                return (a > positiveB) ? (a - positiveB) : 0;\\n            } else {\\n                return type(uint256).max - a > uint256(b) ? a + uint256(b) : type(uint256).max;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/markets/MarketErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { AmmErrors } from \\\"./AmmErrors.sol\\\";\\nimport { FundingErrors } from \\\"../funding/FundingErrors.sol\\\";\\n\\ninterface MarketErrors is AmmErrors, FundingErrors {\\n    error MarketHalted();\\n    error MarketUndecided();\\n    error MustBeCalledByOracle();\\n\\n    // Buy\\n    error InvalidInvestmentAmount();\\n    error MinimumBuyAmountNotReached();\\n\\n    // Sell\\n    error InvalidReturnAmount();\\n    error MaximumSellAmountExceeded();\\n\\n    error InvestmentDrainsPool();\\n    error OperationNotSupported();\\n}\\n\"\r\n    },\r\n    \"contracts/funding/IFundingPoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { FundingErrors } from \\\"./FundingErrors.sol\\\";\\n\\ninterface FundingPoolEvents {\\n    /// @notice Collateral is added to the liquidity pool\\n    /// @param sender the account that initiated and supplied the collateral for the funding\\n    /// @param funder the account that receives the liquidity pool shares\\n    /// @param collateralAdded the quantity of collateral supplied to the pool\\n    /// @param sharesMinted the quantity of liquidity pool shares created as sa result of the funding\\n    event FundingAdded(address indexed sender, address indexed funder, uint256 collateralAdded, uint256 sharesMinted);\\n\\n    /// @notice Funding is removed as a mix of tokens and collateral\\n    /// @param funder the owner of liquidity pool shares\\n    /// @param collateralRemoved the quantity of collateral removed from the pool proportional to funder's shares\\n    /// @param tokensRemoved the quantity of tokens removed from the pool proportional to funder's shares. Can be empty\\n    /// @param sharesBurnt the quantity of liquidity pool shares burnt\\n    event FundingRemoved(\\n        address indexed funder, uint256 collateralRemoved, uint256[] tokensRemoved, uint256 sharesBurnt\\n    );\\n\\n    /// @notice Funding is removed as a specific token, referred to by an id\\n    /// @param funder the owner of liquidity pool shares\\n    /// @param tokenId an id that identifies a single asset token in the pool. Up to the pool to decide the meaning of the id\\n    /// @param tokensRemoved the quantity of a token removed from the pool\\n    /// @param sharesBurnt the quantity of liquidity pool shares burnt\\n    event FundingRemovedAsToken(\\n        address indexed funder, uint256 indexed tokenId, uint256 tokensRemoved, uint256 sharesBurnt\\n    );\\n\\n    /// @notice Some portion of collateral was withdrawn for fee purposes\\n    event FeesWithdrawn(address indexed funder, uint256 collateralRemovedFromFees);\\n\\n    /// @notice Some portion of collateral was retained for fee purposes\\n    event FeesRetained(uint256 collateralAddedToFees);\\n}\\n\\n/// @dev A funding pool deals with 3 different assets:\\n/// - collateral with which to make investments (ERC20 tokens of general usage, e.g. USDT, USDC, DAI, etc.)\\n/// - shares which represent the stake in the fund (ERC20 tokens minted and burned by the funding pool)\\n/// - tokens that are the actual investments (e.g. ERC1155 conditional tokens)\\ninterface IFundingPoolV1 is IERC20Upgradeable, FundingErrors, FundingPoolEvents {\\n    /// @notice Funds the market with collateral from the sender\\n    /// @param collateralAdded Amount of funds from the sender to transfer to the market\\n    function addFunding(uint256 collateralAdded) external returns (uint256 sharesMinted);\\n\\n    /// @notice Funds the market on behalf of receiver.\\n    /// @param receiver Account that receives LP tokens.\\n    /// @param collateralAdded Amount of funds from the sender to transfer to the market\\n    function addFundingFor(address receiver, uint256 collateralAdded) external returns (uint256 sharesMinted);\\n\\n    /// @notice Withdraws the fees from a particular liquidity provider.\\n    /// @param funder Account address to withdraw its available fees.\\n    function withdrawFees(address funder) external returns (uint256 collateralRemovedFromFees);\\n\\n    /// @notice Returns the amount of fee in collateral to be withdrawn by the liquidity providers.\\n    /// @param account Account address to check for fees available.\\n    function feesWithdrawableBy(address account) external view returns (uint256 collateralFees);\\n\\n    /// @notice How much collateral is available that is not set aside for fees\\n    function reserves() external view returns (uint256 collateral);\\n\\n    /// @notice Returns the current collected fees on this market.\\n    function collectedFees() external view returns (uint256 collateralFees);\\n}\\n\"\r\n    },\r\n    \"contracts/markets/IUpdateFairPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UpdateFairPricesEvents {\\n    event MarketPricesUpdated(uint256[] fairPriceDecimals);\\n    event MarketMinPriceUpdated(uint128 minPriceDecimal);\\n}\\n\\ninterface IUpdateFairPrices is UpdateFairPricesEvents {\\n    function updateFairPrices(uint256[] calldata fairPriceDecimals) external;\\n    function updateMinPrice(uint128 minPriceDecimal) external;\\n}\\n\"\r\n    },\r\n    \"contracts/markets/AmmErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface AmmErrors {\\n    error InvalidOutcomeIndex();\\n    error InvalidPrices();\\n    error NoLiquidityAvailable();\\n}\\n\"\r\n    },\r\n    \"contracts/funding/FundingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface FundingErrors {\\n    error InvalidFundingAmount();\\n    error InvalidBurnAmount();\\n    error InvalidReceiverAddress();\\n    error PoolValueZero();\\n\\n    /// @dev Fee is is or exceeds 100%\\n    error InvalidFee();\\n\\n    /// @dev Trying to retain fees that exceed the current reserves\\n    error FeesExceedReserves();\\n\\n    /// @dev Funding is so large, that it may lead to overflow errors in future\\n    /// actions\\n    error ExcessiveFunding();\\n\\n    /// @dev Collateral ERC20 decimals exceed 18, leading to potential overflows\\n    error ExcessiveCollateralDecimals();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"UDS/=lib/upgrade-scripts/lib/UDS/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"futils/=lib/upgrade-scripts/lib/UDS/lib/futils/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"upgrade-scripts/=lib/upgrade-scripts/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ExcessiveCollateralDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveFunding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeesExceedReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFundingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInvestmentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutcomeIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrices\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReturnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvestmentDrainsPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketHalted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketUndecided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumSellAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumBuyAmountNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeCalledByOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLiquidityAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolValueZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IMarketMakerV1[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"funders\",\"type\":\"address[]\"}],\"name\":\"batchRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRefunded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchLiquidity", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}