{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/hounds/Index.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport './params/Index.sol';\\n\\n\\ncontract Hounds is Params {\\n\\n    constructor(Constructor.Struct memory input) Params(input) {}\\n\\n    function initializeHound(\\n        uint256 onId, \\n        address owner, \\n        Hound.Struct memory createdHound\\n    ) external {\\n        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function breedHounds(\\n        uint256 hound1, \\n        uint256 hound2\\n    ) external payable {\\n        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function updateHoundStamina(\\n        uint256 houndId, \\n        uint32 amount\\n    ) external {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function boostHoundStamina(\\n        uint256 houndId, \\n        address user, \\n        uint256 payed\\n    ) external payable {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function boostHoundBreeding(uint256 houndId, address user, uint256 payed) external payable {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function putHoundForBreed(uint256 houndId, uint256 fee, bool status) external {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function updateHoundRunning(\\n        uint256 houndId, \\n        uint256 runningOn\\n    ) \\n        external \\n        returns(\\n            uint256 ranOn\\n        ) \\n    {\\n        (bool success, bytes memory output) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n        ranOn = abi.decode(output,(uint256)); \\n    }\\n\\n    function getBreedCosts(\\n        uint256 hound\\n    ) \\n        public \\n        view \\n        returns(\\n            MicroPayment.Struct memory, \\n            MicroPayment.Struct memory, \\n            MicroPayment.Struct memory\\n        ) \\n    {\\n        return IGetBreedCosts(control.boilerplate.zerocost).getBreedCosts(hound);\\n    }\\n\\n    function refreshStamina(\\n        uint256 houndId\\n    ) external {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function requestHoundRename(\\n        uint256 houndId,\\n        string memory nameProposal\\n    ) \\n        external \\n        payable \\n    {\\n        (bool success, ) = control.boilerplate.houndsModifier.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n    function handleHoundRename(\\n        uint256 houndId,\\n        string memory newTokenURI, \\n        bool validation\\n    ) external payable {\\n        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\\n        require(success);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/hounds/params/Index.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '../../genetics/interfaces/IMixGenes.sol';\\nimport '../../payments/interfaces/IPay.sol';\\nimport '../../shop/interfaces/ICalculateDiscount.sol';\\nimport '../../payments/params/MicroPayment.sol';\\nimport './RenamingProposal.sol';\\nimport '../../whitelist/Index.sol';\\nimport '../interfaces/IGetBreedCosts.sol';\\nimport './Constructor.sol';\\nimport './Hound.sol';\\n\\n\\ncontract Params is ERC721, ERC721Holder, ReentrancyGuard, Whitelist {\\n    uint256 public id = 1;\\n    mapping(uint256 => Hound.Struct) public hounds;\\n    mapping(uint256 => RenamingProposal.Struct) public renamingProposals;\\n\\n    event NewHound(\\n        uint256 indexed id, \\n        address indexed owner, \\n        Hound.Struct hound\\n    );\\n\\n    event BreedHound(\\n        uint256 parent1, \\n        uint256 parent2, \\n        uint256 indexed id, \\n        Hound.Struct offspring,\\n        address indexed owner\\n    );\\n\\n    event HoundBreedable(\\n        uint256 indexed id, \\n        uint256 price, \\n        bool status\\n    );\\n\\n    event HoundStaminaUpdate(\\n        uint256 indexed id, \\n        uint32 stamina\\n    );\\n\\n    event HoundBreedingStatusUpdate(\\n        uint256 indexed id, \\n        bool status\\n    );\\n\\n    event HoundQueueStatusUpdate(\\n        uint256 indexed id, \\n        uint256 indexed queueId\\n    );\\n\\n    event RenameProposal(\\n        uint256 indexed id,\\n        RenamingProposal.Struct renameProposal\\n    );\\n\\n    Constructor.Struct public control;\\n    bool public matingSeason = true;\\n\\n    constructor(\\n        Constructor.Struct memory input\\n    ) \\n        ERC721(input.name,input.symbol) \\n        Whitelist(input.operators, input.targets) \\n    {\\n        control = input;\\n    }\\n\\n    function setGlobalParameters(Constructor.Struct memory globalParameters) external onlyOwner {\\n        control = globalParameters;\\n        updateWhitelist(globalParameters.operators, globalParameters.targets);\\n    }\\n\\n    function setMatingSeason(bool _matingSeason) external whitelisted {\\n        matingSeason = _matingSeason;\\n    }\\n\\n    function houndOwner(uint256 tokenId) external view returns(address) {\\n        return ownerOf(tokenId);\\n    }\\n\\n    function hound(uint256 houndId) external view returns(Hound.Struct memory) {\\n        return hounds[houndId];\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        return hounds[_tokenId].profile.token_uri;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/genetics/interfaces/IMixGenes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\ninterface IMixGenes {\\n\\n    function mixGenes(uint32[72] calldata geneticSequence1, uint32[72] calldata geneticSequence2, uint256 randomness) external view returns(uint32[72] memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/payments/interfaces/IPay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport '../params/Payment.sol';\\n\\ninterface IPay {\\n\\n\\tfunction pay(\\n\\t\\taddress from,\\n        address to,\\n        address currency,\\n        uint256[] memory ids, // for batch transfers\\n        uint256[] memory amounts, // for batch transfers\\n        Payment.PaymentTypes paymentType\\n\\t) external payable;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/shop/interfaces/ICalculateDiscount.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\ninterface ICalculateDiscount {\\n\\n    function calculateDiscount(address requester) external returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/payments/params/MicroPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\nlibrary MicroPayment {\\n    \\n    struct Struct {\\n        address currency;\\n        uint256 amount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/hounds/params/RenamingProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary RenamingProposal {\\n    struct Struct {\\n        string proposal;\\n        bool accepted;\\n        bool sessionActive;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/whitelist/Index.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n\\ncontract Whitelist is Ownable {\\n\\n    mapping(address => bytes4[]) public whitelists;\\n\\n    constructor(address[] memory operators, bytes4[][] memory targets) {\\n        require(operators.length == targets.length);\\n        for (uint256 i = 0; i < operators.length ; ++i ) {\\n            for (uint256 j = 0; j < targets[i].length; ++j) {\\n                whitelists[operators[i]].push(targets[i][j]);\\n            }\\n        }\\n    }\\n\\n    function updateWhitelist(address[] memory operators, bytes4[][] memory targets) internal {\\n        require(operators.length == targets.length);\\n        for (uint256 i = 0; i < operators.length ; ++i ) {\\n            for (uint256 j = 0; j < targets[i].length; ++j) {\\n                if ( j >= whitelists[operators[i]].length ) {\\n                    whitelists[operators[i]].push(targets[i][j]);\\n                } else {\\n                    whitelists[operators[i]][j] = targets[i][j];\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier whitelisted() {\\n        bool found = false;\\n        for (uint256 i = 0; i < whitelists[msg.sender].length; ++i) {\\n            if ( whitelists[msg.sender][i] == msg.sig ) {\\n                found = true;\\n            }\\n        }\\n        require(found);\\n        _;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/hounds/interfaces/IGetBreedCosts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport '../../payments/params/MicroPayment.sol';\\n\\ninterface IGetBreedCosts {\\n\\n    function getBreedCosts(uint256 hound) external view returns(\\n        MicroPayment.Struct memory, \\n        MicroPayment.Struct memory, \\n        MicroPayment.Struct memory\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/hounds/params/Constructor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport './Boilerplate.sol';\\nimport './Fees.sol';\\nimport './Hound.sol';\\n\\nlibrary Constructor {\\n    struct Struct {\\n        string name;\\n        string symbol;\\n        Hound.Struct defaultHound;\\n        Hound.ConstructorBreeding breeding;\\n        Hound.ConstructorStamina stamina; \\n        address[] operators;\\n        bytes4[][] targets;\\n        ConstructorBoilerplate.Struct boilerplate;\\n        ConstructorFees.Struct fees;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hounds/params/Hound.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\nlibrary Hound {\\n\\n    struct ConstructorBreeding {\\n        address externalBreedingFeeCurrency;\\n        address breedingCooldownCurrency;\\n        uint256 breedingCooldown;\\n        uint256 breedingCooldownTimeUnit;\\n        uint256 refillBreedingCooldownCost;\\n    }\\n\\n    struct ConstructorStamina {\\n        address staminaRefillCurrency;\\n        uint256 staminaRefill1x;\\n        uint32 staminaPerTimeUnit;\\n        uint32 staminaCap;\\n    }\\n\\n    struct Profile {\\n        string name;\\n        string token_uri;\\n        uint256 runningOn;\\n        bool custom;\\n    }\\n\\n    struct Breeding {\\n        uint256 lastBreed;\\n        uint256 externalBreedingFee;\\n        bool availableToBreed;\\n    }\\n\\n    struct Stamina {\\n        uint256 staminaLastUpdate;\\n        uint32 staminaValue;\\n    }\\n\\n    struct Identity {\\n        uint256 maleParent;\\n        uint256 femaleParent;\\n        uint256 generation;\\n        uint256 birthDate;\\n        uint256 specie;\\n        uint32[72] geneticSequence;\\n        string extensionTraits;\\n    }\\n\\n    struct Struct {\\n        Stamina stamina;\\n        Breeding breeding;\\n        Identity identity;\\n        Profile profile;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/payments/params/Payment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n\\nlibrary Payment {\\n\\n    enum PaymentTypes {\\n        ERC721,\\n        ERC1155,\\n        ERC20,\\n        DEFAULT\\n    }\\n    \\n    struct Struct {\\n        address[] from;\\n        address[] to;\\n        address[] currency;\\n        uint256[][] ids;\\n        uint256[][] amounts;\\n        PaymentTypes[] paymentType;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hounds/params/Boilerplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ConstructorBoilerplate {\\n    struct Struct {\\n\\n        // Contract modules \\n        address restricted;\\n        address minter;\\n        address houndsModifier;\\n        address zerocost;\\n        address hounds;\\n\\n        // External dependencies\\n        address payments;\\n        address shop;\\n        address races;\\n        address genetics;\\n\\n        // Payout checkpoint\\n        address houndsInitializer;\\n        address houndsRenameHandler;\\n        \\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hounds/params/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ConstructorFees {\\n    struct Struct {\\n        address renameFeeCurrency;\\n        address platformBreedFeeCurrency;\\n        address breedTransactionFeeCurrency;\\n        uint256 platformBreedFee;\\n        uint256 breedTransactionFee;\\n        uint256 renameFee;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"internalType\":\"struct Hound.Struct\",\"name\":\"defaultHound\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"externalBreedingFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedingCooldownCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldownTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refillBreedingCooldownCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Hound.ConstructorBreeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staminaRefillCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staminaRefill1x\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaPerTimeUnit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staminaCap\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.ConstructorStamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[][]\",\"name\":\"targets\",\"type\":\"bytes4[][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"restricted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsModifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zerocost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hounds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payments\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"races\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genetics\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsInitializer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsRenameHandler\",\"type\":\"address\"}],\"internalType\":\"struct ConstructorBoilerplate.Struct\",\"name\":\"boilerplate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renameFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformBreedFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedTransactionFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformBreedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedTransactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renameFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConstructorFees.Struct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct Constructor.Struct\",\"name\":\"input\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parent1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parent2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Hound.Struct\",\"name\":\"offspring\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BreedHound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"HoundBreedable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"HoundBreedingStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"queueId\",\"type\":\"uint256\"}],\"name\":\"HoundQueueStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stamina\",\"type\":\"uint32\"}],\"name\":\"HoundStaminaUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Hound.Struct\",\"name\":\"hound\",\"type\":\"tuple\"}],\"name\":\"NewHound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sessionActive\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct RenamingProposal.Struct\",\"name\":\"renameProposal\",\"type\":\"tuple\"}],\"name\":\"RenameProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"}],\"name\":\"boostHoundBreeding\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"}],\"name\":\"boostHoundStamina\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hound1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hound2\",\"type\":\"uint256\"}],\"name\":\"breedHounds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"internalType\":\"struct Hound.Struct\",\"name\":\"defaultHound\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"externalBreedingFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedingCooldownCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldownTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refillBreedingCooldownCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Hound.ConstructorBreeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staminaRefillCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staminaRefill1x\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaPerTimeUnit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staminaCap\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.ConstructorStamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"restricted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsModifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zerocost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hounds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payments\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"races\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genetics\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsInitializer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsRenameHandler\",\"type\":\"address\"}],\"internalType\":\"struct ConstructorBoilerplate.Struct\",\"name\":\"boilerplate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renameFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformBreedFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedTransactionFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformBreedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedTransactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renameFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConstructorFees.Struct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hound\",\"type\":\"uint256\"}],\"name\":\"getBreedCosts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MicroPayment.Struct\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MicroPayment.Struct\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MicroPayment.Struct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"validation\",\"type\":\"bool\"}],\"name\":\"handleHoundRename\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"}],\"name\":\"hound\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"internalType\":\"struct Hound.Struct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"houndOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"onId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"internalType\":\"struct Hound.Struct\",\"name\":\"createdHound\",\"type\":\"tuple\"}],\"name\":\"initializeHound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matingSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"putHoundForBreed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"}],\"name\":\"refreshStamina\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"renamingProposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sessionActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nameProposal\",\"type\":\"string\"}],\"name\":\"requestHoundRename\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"staminaLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaValue\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.Stamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBreedingFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"availableToBreed\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Breeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"femaleParent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specie\",\"type\":\"uint256\"},{\"internalType\":\"uint32[72]\",\"name\":\"geneticSequence\",\"type\":\"uint32[72]\"},{\"internalType\":\"string\",\"name\":\"extensionTraits\",\"type\":\"string\"}],\"internalType\":\"struct Hound.Identity\",\"name\":\"identity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"}],\"internalType\":\"struct Hound.Profile\",\"name\":\"profile\",\"type\":\"tuple\"}],\"internalType\":\"struct Hound.Struct\",\"name\":\"defaultHound\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"externalBreedingFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedingCooldownCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedingCooldownTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refillBreedingCooldownCost\",\"type\":\"uint256\"}],\"internalType\":\"struct Hound.ConstructorBreeding\",\"name\":\"breeding\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staminaRefillCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staminaRefill1x\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"staminaPerTimeUnit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staminaCap\",\"type\":\"uint32\"}],\"internalType\":\"struct Hound.ConstructorStamina\",\"name\":\"stamina\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[][]\",\"name\":\"targets\",\"type\":\"bytes4[][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"restricted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsModifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zerocost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hounds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payments\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"races\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genetics\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsInitializer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"houndsRenameHandler\",\"type\":\"address\"}],\"internalType\":\"struct ConstructorBoilerplate.Struct\",\"name\":\"boilerplate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"renameFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformBreedFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedTransactionFeeCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformBreedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"breedTransactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renameFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConstructorFees.Struct\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct Constructor.Struct\",\"name\":\"globalParameters\",\"type\":\"tuple\"}],\"name\":\"setGlobalParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_matingSeason\",\"type\":\"bool\"}],\"name\":\"setMatingSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runningOn\",\"type\":\"uint256\"}],\"name\":\"updateHoundRunning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ranOn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houndId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"updateHoundStamina\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Hounds", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}