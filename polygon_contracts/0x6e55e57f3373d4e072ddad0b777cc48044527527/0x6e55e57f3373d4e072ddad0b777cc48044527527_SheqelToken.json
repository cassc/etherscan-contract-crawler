{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SheqelToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n// Sheqel token version 0.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"DistributorV2.sol\\\";\\nimport \\\"Reserve.sol\\\";\\nimport \\\"LiquidityManager.sol\\\";\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n\\n// Sheqel Token Contract0\\ncontract SheqelToken is Context, IERC20, IERC20Metadata {\\n    address public admin;\\n    bool isFirstLiquidityProviding = true;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    uint256 public _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n    Distributor public distributor;\\n    IUniswapV2Pair public uniswapV2PairContract;\\n\\n    address public reserveAddress;\\n    Reserve public reserveContract;\\n    LiquidityManager liquidityManager;\\n    address public liquidityManagerAddress;\\n    address public spookySwapAddress; //0xF491e7B69E4244ad4002BC14e878a34207E38c29; FTM\\n    address public MDOAddress;\\n    address public teamAddress;\\n\\n    address public WFTM = 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83;// 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83; FTM\\n    IERC20 public USDC;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(address _reserveAddress, address _MDOAddress, uint256 _tSupply, address _spookyswapAddress, address _USDCAddress) {\\n        // Setting up the variables\\n        _name = \\\"Sheqel\\\";\\n        _symbol = \\\"SHQ\\\";\\n        _totalSupply = _tSupply;\\n        _balances[_reserveAddress]= _totalSupply;\\n\\n        reserveAddress = _reserveAddress;\\n        reserveContract = Reserve(reserveAddress);\\n        spookySwapAddress = _spookyswapAddress;\\n        MDOAddress = _MDOAddress;\\n        teamAddress = msg.sender;\\n\\n        USDC = IERC20(_USDCAddress); //IERC20(0x04068DA6C83AFCFA0e13ba15A6696662335D5B75); FTM\\n\\n\\n        liquidityManager = new LiquidityManager(_USDCAddress, _spookyswapAddress, _reserveAddress);\\n        liquidityManagerAddress = address(liquidityManager);\\n\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            spookySwapAddress\\n        );\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), address(USDC));\\n            \\n\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        uniswapV2PairContract = IUniswapV2Pair(uniswapV2Pair);\\n\\n        //distributor = new HolderRewarderDistributor(spookySwapAddress, _reserveAddress);\\n\\n        _isExcludedFromFee[address(this)] = true;\\n\\n\\n    }\\n\\n    function setDistributor(address _addr) external {\\n        require(msg.sender == teamAddress, \\\"Must be team address\\\");\\n        distributor = Distributor(_addr);\\n        // Setup initial mint\\n        //distributor.transferShare(_deployer, _amount);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        //require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        unchecked {\\n                _balances[sender] = senderBalance - amount;\\n        }\\n\\n        if(recipient != reserveAddress && sender != reserveAddress && !isFirstLiquidityProviding/*&& recipient != uniswapV2Pair && recipient != address(uniswapV2Router)*/){\\n\\n            // Taking the tax and returning the amount left\\n            \\n            uint256 amountRecieved = _takeTax(amount);\\n\\n            _balances[recipient] += amountRecieved;\\n            emit Transfer(sender, recipient, amountRecieved);\\n\\n\\n        }\\n        else {\\n            if (isFirstLiquidityProviding == true) {\\n                isFirstLiquidityProviding = false;\\n            }\\n            // Not taxing the transaction\\n            _balances[recipient] += amount;\\n\\n            emit Transfer(sender, recipient, amount);\\n\\n        }\\n\\n\\n        //_afterTokenTransfer(sender, recipient, amountRecieved);\\n    }\\n\\n    /** @dev Creates `amount` tokens and takes all the necessary taxes for the account.\\n     */\\n    function _takeTax(uint256 amount)\\n        internal\\n        returns (uint256 amountRecieved)\\n    {\\n        // Calculating the tax\\n        uint256 reserve = (amount * 88797) / 10000000;\\n        uint256 rewards = (amount * 255547) / 10000000;\\n        uint256 MDO = (amount * 44373) / 10000000;\\n        uint256 UBR = (amount * 88797) / 10000000;\\n        uint256 liquidity = (amount * 22187) / 10000000;\\n\\n        // Adding the liquidity to the contract\\n        _addToLiquidity(liquidity); \\n\\n        // Sending the tokens to the reserve\\n        _sendToReserve(reserve);\\n\\n        // Sending the MDO wallet\\n        _sendToMDO(MDO);\\n\\n        // Adding to the Universal Basic Reward pool\\n        _addToUBR(UBR);\\n\\n        // Adding to the rewards pool\\n        _addToRewards(rewards);\\n\\n        return (amount - (reserve + rewards + MDO + UBR + liquidity));\\n    }\\n\\n    function _addToRewards(uint256 amount) private {\\n        _balances[address(distributor)] = _balances[address(distributor)] + (amount);\\n        //swapTokenToUSDC(address(distributor), amount);\\n\\n        distributor.addToCurrentShqToRewards(amount);\\n    }\\n\\n    function _addToUBR(uint256 amount) private {\\n        _balances[address(distributor)] = _balances[address(distributor)] + (amount);\\n        //swapTokenToUSDC(address(distributor), amount);\\n\\n        distributor.addToCurrentShqToUBR(amount);\\n    }\\n\\n    function _addToLiquidity(uint256 amount) private {\\n        _balances[address(liquidityManager)] = _balances[address(liquidityManager)] + (amount);\\n        //liquidityManager.addToCurrentShqToLiquidity(amount);\\n    }\\n\\n    function _sendToReserve(uint256 amount) private {\\n        _balances[address(this)] = _balances[address(this)] + (amount);\\n        swapTokenToUSDC(address(reserveAddress), amount);\\n\\n        //swapTokenToUSDC(reserveAddress, amount); // Sending the USDC to the reserve\\n    }\\n\\n    function _sendToMDO(uint256 amount) private {\\n        _balances[MDOAddress] = _balances[MDOAddress] + (amount);\\n    }\\n\\n\\n    function swapTokenToUSDC(address recipient, uint256 amount) internal {\\n        _approve(address(this), address(reserveContract), amount);\\n        reserveContract.sellShq(recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function initiateLiquidityProviding() public {\\n        liquidityManager.swapAndLiquify();\\n    }\\n\\n\\n    function getDistributor() public view returns(address){\\n        return address(distributor);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    \\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Uniswap V2 router\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"DistributorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Rewards Distributor\\npragma solidity ^0.8.0;\\n\\nimport \\\"ISheqelToken.sol\\\"; \\nimport \\\"IERC20.sol\\\";\\nimport \\\"IReserve.sol\\\";\\n\\ncontract Distributor {\\n    event Log(string message, uint data);\\n\\n    uint256 public lastDistribution;\\n    uint256 public currentShqToUBR;\\n    uint256 public currentShqToRewards;\\n    uint256 public currentUSDCToUBR;\\n    uint256 public currentUSDCToRewards;\\n    bool public shqSet = false;\\n    ISheqelToken public sheqelToken;\\n    IERC20 public USDC;\\n    address public teamAddress;\\n    IReserve public reserveContract;\\n\\n    constructor(address _usdcAddress, address _reserveAddress) {\\n        teamAddress = msg.sender;\\n        USDC = IERC20(_usdcAddress);\\n        reserveContract = IReserve(_reserveAddress);\\n    }\\n\\n    modifier onlyTeam() {\\n        require(msg.sender == teamAddress, \\\"Caller must be team address\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(sheqelToken), \\\"Caller must be Sheqel Token\\\");\\n        _;\\n    }\\n\\n    modifier onlyReserve() {\\n        require(msg.sender == address(reserveContract), \\\"Caller must be Reserve\\\");\\n        _;\\n    }\\n\\n    function setShq(address _addr) external onlyTeam() {\\n        require(shqSet == false, \\\"SHQ Already set\\\");\\n        sheqelToken = ISheqelToken(_addr);\\n        shqSet = true;\\n    }\\n\\n    function addToCurrentShqToUBR(uint256 _amount) external onlyToken() {\\n        currentShqToUBR += _amount;\\n    }\\n\\n    function addToCurrentShqToRewards(uint256 _amount) external onlyToken() {\\n        currentShqToRewards += _amount;\\n    }\\n\\n    function addToCurrentUsdcToRewards(uint256 _amount) external onlyReserve() {\\n        currentUSDCToRewards += _amount;\\n    }\\n\\n    function addToCurrentUsdcToUBR(uint256 _amount) external onlyReserve() {\\n        currentUSDCToUBR += _amount;\\n    }\\n\\n\\n\\n    function processAllRewards(address[] calldata _addresses , uint256[] calldata _balances, address[] calldata _ubrAddresses, uint256 _totalBalance) onlyTeam() external{\\n        require(block.timestamp >= lastDistribution + 1 days, \\\"Cannot distribute two times in a day\\\");\\n        require(_addresses.length == _balances.length, \\\"Addresses and balances must be the same length\\\");\\n\\n        // Convert all SHQ to USDC\\n        if(currentShqToRewards > 0){\\n            currentUSDCToRewards += swapSHQToUSDC(currentShqToRewards);\\n            currentShqToRewards = 0;\\n        }\\n        if(currentShqToUBR > 0){\\n            currentUSDCToUBR += swapSHQToUSDC(currentShqToUBR);\\n            currentShqToUBR = 0;\\n        }   \\n\\n        require(currentUSDCToRewards > 0, \\\"No USDC to distribute prec\\\");\\n        require(currentUSDCToUBR > 0, \\\"No USDC to distribute UBR\\\");\\n\\n        // Iterate through all balances and add it to checkTotalBalance\\n        uint256 checkTotalBalance = 0;\\n        for (uint256 i = 0; i < _balances.length; i++) {\\n            checkTotalBalance += _balances[i];\\n        }\\n\\n        // Check if the total balance is the same as the total balance !\\n        require(checkTotalBalance == _totalBalance, \\\"Total balance does not match\\\");\\n\\n        // Iterate through all addresses\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            // Get the address\\n            address holder = _addresses[i];\\n            // Get the balance\\n            uint256 balance = _balances[i];\\n\\n            // Calculate the rewards\\n            uint256 percentageReward = (balance * (currentUSDCToRewards-100)) / _totalBalance;\\n            // Send the rewards\\n            USDC.transfer(holder, percentageReward);\\n        }\\n        currentUSDCToRewards = 0;\\n\\n        currentUSDCToUBR = USDC.balanceOf(address(this));\\n\\n        // Compute the UBR\\n        uint256 ubrReward = (currentUSDCToUBR / _ubrAddresses.length) - 100;\\n        // Iterate through all UBR addresses\\n        for (uint256 i = 0; i < _ubrAddresses.length; i++) {\\n            // Get the address\\n            address holder = _ubrAddresses[i];\\n\\n            // Send the UBR\\n            USDC.transfer(holder, ubrReward);\\n        }\\n        currentUSDCToUBR = 0;\\n\\n        // Update last distribution\\n        lastDistribution = block.timestamp;\\n\\n        // Send rest to the reserve \\n        USDC.transfer(address(reserveContract), USDC.balanceOf(address(this)));\\n        sheqelToken.transfer(address(reserveContract), sheqelToken.balanceOf(address(this)));\\n    }\\n\\n    function swapSHQToUSDC(uint256 amount) internal returns(uint256){\\n        uint256 balancePreswapUSDC = USDC.balanceOf(address(this));\\n        sheqelToken.approve(address(reserveContract), amount);\\n        reserveContract.sellShq(address(this), amount);\\n\\n        return USDC.balanceOf(address(this)) - balancePreswapUSDC;\\n    }\\n}\"\r\n    },\r\n    \"ISheqelToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ISheqelToken {\\n    function getDistributor() external returns (address);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function MDOAddress() external returns (address);\\n    function liquidityManagerAddress() external returns (address);\\n    function reserveAddress() external view returns (address);\\n\\n\\n\\n}\"\r\n    },\r\n    \"IReserve.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n    function sellShq(address _beneficiary, uint256 _shqAmount) external;\\n    function buyShq(address _beneficiary, uint256 _shqAmount) external;\\n    function buyShqWithUsdc(address _beneficiary, uint256 _usdcAmount) external;\\n}\"\r\n    },\r\n    \"Reserve.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"ISheqelToken.sol\\\";\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"DistributorV2.sol\\\";\\n\\ncontract Reserve {\\n    ISheqelToken private sheqelToken;\\n    IERC20 private USDC;\\n    uint256 private shqToConvert;\\n    uint256 taxRate = 5;\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private WFTM = 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83;\\n    address private teamAddress;\\n    bool shqAddressSet=false;\\n\\n\\n    Distributor public distributor;\\n\\n    event ShqBought(uint256 amountSHQ, uint256 amountUSDC);\\n    event ShqSold(uint256 amountSHQ, uint256 amountUSDC);\\n\\n\\n\\n    constructor(address _spookyswapRouter, address _usdcAddress) {\\n        // Contract constructed by the Sheqel token\\n        USDC = IERC20(_usdcAddress);\\n        uniswapV2Router = IUniswapV2Router02(_spookyswapRouter);\\n        teamAddress = msg.sender;\\n        shqToConvert = 0;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(sheqelToken), \\\"Must be Sheqel Token\\\");\\n        _;\\n    }\\n\\n    modifier onlyTeam() {\\n        require(msg.sender == address(teamAddress), \\\"Must be Sheqel Team\\\");\\n        _;\\n    }\\n\\n    function setTaxRate(uint256 _taxRate) external onlyTeam() {\\n        taxRate = _taxRate;\\n    }\\n    function setSheqelTokenAddress(address _addr) public onlyTeam() {\\n        require(shqAddressSet == false, \\\"Can only change the address once\\\");\\n        sheqelToken = ISheqelToken(_addr);\\n        address distributorAddress = sheqelToken.getDistributor();\\n        distributor = Distributor(distributorAddress);\\n        shqAddressSet=true;\\n\\n        // Initial buying in of 999USDC\\n\\n\\n        // Burning\\n        sheqelToken.transfer(0x1234567890123456789012345678901234567890, 2*10**18);\\n\\n        // Adding liquidity\\n        sheqelToken.transfer(teamAddress, 2000 * 10 ** 18);\\n\\n        // Initial tokens\\n        sheqelToken.transfer(teamAddress, 197998 * 10 ** 18);\\n        \\n    }\\n\\n    function addToShqToConvert(uint256 amount) public onlyToken() {\\n        shqToConvert += amount;\\n    }\\n\\n    function buyPrice() public view returns (uint256) {\\n        uint256 usdcInReserve = USDC.balanceOf(address(this)) * (10 ** 6);\\n        uint256 shqOutsideReserve = (sheqelToken.totalSupply() - sheqelToken.balanceOf(address(this))) / (10 ** 12);\\n\\n        return (usdcInReserve / shqOutsideReserve); // Price in USDC (6 decimals)\\n    }\\n\\n    function buyPriceWithTax() public view returns (uint256) {\\n        uint256 usdcInReserve = USDC.balanceOf(address(this)) * (10 ** 6);\\n        uint256 shqOutsideReserve = (sheqelToken.totalSupply() - sheqelToken.balanceOf(address(this))) / (10 ** 12);\\n\\n        return (usdcInReserve / shqOutsideReserve) + ((usdcInReserve / shqOutsideReserve) * taxRate) / 100; // Price in USDC (6 decimals)\\n    }\\n\\n    function sellPrice() public view returns (uint256) {\\n        uint256 totalShq = sheqelToken.totalSupply();\\n        uint256 shqInReserve = sheqelToken.balanceOf(address(this));\\n        uint256 usdcInReserve = USDC.balanceOf(address(this));\\n        uint256 shqDecimals = 10**18;\\n        uint256 coefficient = 97;\\n\\n        return ((totalShq * buyPriceWithTax()) - (usdcInReserve*shqDecimals*coefficient)/100) / (shqInReserve - 1); // Price in USDC (6 decimals)\\n    }\\n\\n\\n    function buyShq(address _beneficiary, uint256 _shqAmount) external {\\n        require(_shqAmount > 0, \\\"Amount of tokens purchased must be positive\\\");\\n        _processPurchase(_beneficiary, _shqAmount);\\n    }\\n\\n    function buyShqWithUsdc(address _beneficiary, uint256 _usdcAmount) public {\\n        require(_usdcAmount > 0, \\\"Amount of tokens purchased must be positive\\\");\\n        uint256 shqAmount = (_usdcAmount * (10 ** 18)) / sellPrice();\\n        _processPurchase(_beneficiary, shqAmount);\\n    }\\n\\n    function sellShq(address _beneficiary, uint256 _shqAmount) external {\\n        require(_shqAmount > 0, \\\"Amount of tokens sold must be positive\\\");\\n        _processSell(_beneficiary, _shqAmount);\\n    }\\n\\n    function _processSell(address _beneficiary, uint256 _shqAmount) internal {\\n        // Converting shq to usdc\\n        uint256 usdcAmount = (_shqAmount * buyPrice()) / (10 ** 18);\\n    \\n        // Making the user pay\\n        require(sheqelToken.transferFrom(msg.sender, address(this), _shqAmount), \\\"Deposit failed\\\");\\n\\n        // Delivering the tokens\\n        uint256 usdcAmountTaxed = _takeTax(usdcAmount);\\n        _deliverUsdc(_beneficiary, usdcAmountTaxed);\\n\\n        emit ShqSold(usdcAmount, _shqAmount);\\n\\n  }\\n\\n    function _processPurchase(address _beneficiary, uint256 _shqAmount) internal {\\n        require(sheqelToken.balanceOf(address(this)) - _shqAmount >= 2 * 10**18, \\\"Cannot buy remaining SHQ\\\");\\n        // Converting shq to usdc\\n        uint256 usdcAmount = (_shqAmount * sellPrice()) / (10 ** 18);\\n    \\n        // Making the user pay\\n        require(USDC.transferFrom(msg.sender, address(this), usdcAmount), \\\"Deposit failed\\\");\\n\\n        // Paying the tax\\n        _takeTax(usdcAmount);\\n\\n        // Delivering the tokens\\n        _deliverShq(_beneficiary, _shqAmount);\\n\\n\\n        emit ShqBought(_shqAmount, usdcAmount);\\n    }\\n\\n    function _deliverShq(address _beneficiary, uint256 _shqAmount) internal {\\n        sheqelToken.transfer(_beneficiary, _shqAmount);\\n    }\\n\\n    function _deliverUsdc(address _beneficiary, uint256 _usdcAmount) internal {\\n        USDC.transfer(_beneficiary, _usdcAmount);\\n    }\\n\\n  /** @dev Creates `amount` tokens and takes all the necessary taxes for the account.*/\\n     \\n    function _takeTax(uint256 amount)\\n        internal\\n        returns (uint256 amountRecieved)\\n    {\\n        // Calculating the tax\\n        uint256 reserve = (amount * 88797) / 10000000;\\n        uint256 rewards = (amount * 255547) / 10000000;\\n        uint256 MDO = (amount * 44373) / 10000000;\\n        uint256 UBR = (amount * 88797) / 10000000;\\n        uint256 liquidity = (amount * 22187) / 10000000;\\n\\n\\n        // Adding the liquidity to the contract\\n        _addToLiquidity(liquidity); \\n\\n        // Sending the tokens to the reserve\\n        _sendToReserve(reserve);\\n\\n        // Sending the MDO wallet\\n        _sendToMDO(MDO);\\n\\n        // Adding to the Universal Basic Reward pool\\n        _addToUBR(UBR);\\n\\n        // Adding to the rewards pool\\n        _addToRewards(rewards);\\n\\n        return (amount - (reserve + rewards + MDO + UBR + liquidity));\\n    }\\n\\n    function _addToLiquidity(uint256 _amount) private {\\n        USDC.transfer(sheqelToken.liquidityManagerAddress(), _amount);\\n    }\\n\\n    function _sendToReserve(uint256 amount) private {\\n        USDC.transfer(address(this), amount);\\n    }\\n\\n    function _addToRewards(uint256 amount) private {\\n        USDC.transfer(address(distributor), amount);\\n\\n        distributor.addToCurrentUsdcToRewards(amount);\\n    }\\n\\n    function _addToUBR(uint256 amount) private {\\n        USDC.transfer(address(distributor), amount);\\n\\n        distributor.addToCurrentUsdcToUBR(amount);\\n    }\\n\\n    function _sendToMDO(uint256 amount) private {\\n        address MDOAddress = sheqelToken.MDOAddress();\\n        USDC.transfer(MDOAddress, amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"LiquidityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Liquidity Manager\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Uniswap.sol\\\";\\nimport \\\"IReserve.sol\\\";\\n\\ncontract LiquidityManager {\\n    IERC20 public sheqelToken;\\n    IERC20 public USDC;\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IReserve public reserve;\\n\\n    constructor(address _usdcAddress, address _spookySwapAddress, address _reserveAddress) {\\n        sheqelToken = IERC20(msg.sender);\\n        USDC = IERC20(_usdcAddress);\\n        uniswapV2Router = IUniswapV2Router02(_spookySwapAddress);\\n        reserve = IReserve(_reserveAddress);\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(sheqelToken), \\\"Must be Sheqel Token\\\");\\n        _;\\n    }\\n\\n    /*function addToCurrentShqToLiquidity(uint256 _amount) onlyToken() public {\\n        currentShqToLiquidity += _amount;\\n    }*/\\n\\n    function swapAndLiquify() onlyToken() public {\\n        // Converting all USDC to SHQ\\n        uint256 currentUSDCBalance = USDC.balanceOf(address(this));\\n        if(currentUSDCBalance > 0) {\\n            USDC.approve(address(reserve), currentUSDCBalance);\\n            reserve.buyShqWithUsdc(address(this), currentUSDCBalance);\\n        }\\n        uint256 currentShqToLiquidity = sheqelToken.balanceOf(address(this));\\n        require(currentShqToLiquidity > 0, \\\"No SHQ to sell\\\");\\n        // split the contract balance into halves\\n        uint256 half = currentShqToLiquidity / 2;\\n        uint256 otherHalf = currentShqToLiquidity - half;\\n\\n        uint256 initialUSDCBalance = USDC.balanceOf(address(this));\\n\\n        // swap tokens for USDC\\n        sheqelToken.approve(address(reserve), otherHalf);\\n        reserve.sellShq(address(this), otherHalf); \\n\\n\\n        uint256 newBalance = USDC.balanceOf(address(this)) - (initialUSDCBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(half, newBalance);\\n    }\\n\\n    function addLiquidity(uint256 _shqAmount, uint256 _usdcAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        USDC.approve(address(uniswapV2Router), _usdcAmount);\\n        sheqelToken.approve(address(uniswapV2Router), _shqAmount);\\n        // add the liquidity\\n        uniswapV2Router.addLiquidity(\\n            address(sheqelToken),\\n            address(USDC),\\n            _shqAmount,\\n            _usdcAmount,\\n            0, \\n            0, \\n            address(this),\\n            block.timestamp + 15\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"SheqelToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MDOAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spookyswapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDCAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MDOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WFTM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateLiquidityProviding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveContract\",\"outputs\":[{\"internalType\":\"contract Reserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spookySwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SheqelToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c44b03488eb7c713c9692ec7653569e58004ac270000000000000000000000009fea2e7f60b21ec4b5ed571fbcec27fa620fd48d00000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}