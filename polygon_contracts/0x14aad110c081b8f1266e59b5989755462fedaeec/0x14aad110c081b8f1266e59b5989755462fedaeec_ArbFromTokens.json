{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ArbFromTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\r\\n\\r\\nimport './strategies/ArbStrategy.sol';\\r\\n\\r\\ncontract ArbFromTokens is ArbStrategy {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using AddressUpgradeable for address payable;\\r\\n\\r\\n    // state variables\\r\\n    mapping(address => mapping(address => uint)) public userInfo;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit native token\\r\\n     */\\r\\n    function deposit() external payable nonReentrant {\\r\\n        _require(msg.value > 0, Errors.NO_AMOUNT);\\r\\n        userInfo[address(0)][_msgSender()] += msg.value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit erc20 token\\r\\n     * @param token Token address to deposit\\r\\n     * @param amount Token amount to deposit\\r\\n     */\\r\\n    function depositToken(address token, uint amount) external nonReentrant {\\r\\n        _require(amount > 0, Errors.NO_AMOUNT);\\r\\n        userInfo[token][_msgSender()] += amount;\\r\\n        IERC20Upgradeable(token).safeTransferFrom(_msgSender(), address(this), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap with Vault\\r\\n     * @param vault Address of vault to swap tokens from ETH\\r\\n     * @param swaps Batch swap step struct in vault to swap tokens from ETH\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     */\\r\\n    function arbFromTokensWithVault(\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) external payable nonReentrant whenNotPaused onlyWhitelist {\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assets[swaps[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swaps[0].amount);\\r\\n        IVault.FundManagement memory funds = IVault.FundManagement({\\r\\n            sender: address(this),\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(getVaultStrategy(vault)).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            funds,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with 1inch and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with 1inch.\\r\\n     * Otherwise, buy tokens with 1inch and sell tokens with vault.\\r\\n     * @param oneInch Address of 1inch router\\r\\n     * @param executor Aggregation executor that executes calls described in data\\r\\n     * @param desc Swap description in 1inch\\r\\n     * @param data Encoded calls that caller should execute in between of swaps\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWith1InchAndVault(\\r\\n        address oneInch,\\r\\n        IAggregationExecutor executor,\\r\\n        I1InchRouter.SwapDescription memory desc,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline,\\r\\n        uint256 selector\\r\\n    ) external nonReentrant whenNotPaused onlyWhitelist {\\r\\n        if (selector == 0) swapTokensVaultAnd1Inch(oneInch, executor, desc, data, vault, swaps, assets, deadline);\\r\\n        else swapTokens1InchAndVault(oneInch, executor, desc, data, vault, swaps, assets, deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with univ3swap of 1inch and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with univ3swap of 1inch.\\r\\n     * If selector is 1, buy tokens with univ3swap of 1inch and sell tokens with vault.\\r\\n     * If selector is 2, buy tokens with vault and sell tokens with univ2swap of 1inch.\\r\\n     * Otherwise, buy tokens with univ2swap of 1inch and sell tokens with vault.\\r\\n     * @param oneInch Address of 1inch router\\r\\n     * @param srcToken Address of source token for 1inch router\\r\\n     * @param amount Amount of source tokens to swap\\r\\n     * @param pools Pools chain used for swaps. Pools src and dst tokens should match to make swap happen\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWith1InchUniAndVault(\\r\\n        address oneInch,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256[] memory pools,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline,\\r\\n        uint256 selector\\r\\n    ) external nonReentrant whenNotPaused onlyWhitelist {\\r\\n        if (selector == 0)\\r\\n            swapTokensVaultAnd1InchUniV3(oneInch, srcToken, amount, pools, vault, swaps, assets, deadline);\\r\\n        else if (selector == 1)\\r\\n            swapTokens1InchUniV3AndVault(oneInch, srcToken, amount, pools, vault, swaps, assets, deadline);\\r\\n        else if (selector == 2)\\r\\n            swapTokensVaultAnd1InchUno(oneInch, srcToken, amount, pools, vault, swaps, assets, deadline);\\r\\n        else swapTokens1InchUnoAndVault(oneInch, srcToken, amount, pools, vault, swaps, assets, deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with firebird and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with firebird.\\r\\n     * Otherwise, buy tokens with firebird and sell tokens with vault.\\r\\n     * @param fireBird Address of firebird router\\r\\n     * @param caller Aggregation caller that executes calls described in data for firebird\\r\\n     * @param desc Swap descrption in firebird\\r\\n     * @param data Encoded calls that caller should execute in between of swaps for firebird\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWithFireBirdAndVault(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory desc,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint deadline,\\r\\n        uint256 selector\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        if (selector == 0) swapTokensVaultAndFireBird(fireBird, caller, desc, data, vault, swaps, assets, deadline);\\r\\n        else swapTokensFireBirdAndVault(fireBird, caller, desc, data, vault, swaps, assets, deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with firebird and 1inch\\r\\n     * If selector is 0, buy tokens with 1inch and sell tokens with firebird.\\r\\n     * Otherwise, buy tokens with firebird and sell tokens with 1inch.\\r\\n     * @param fireBird Address of firebird router\\r\\n     * @param caller Aggregation caller that executes calls described in data for firebird\\r\\n     * @param descFireBird Swap descrption in firebird\\r\\n     * @param dataFireBird Encoded calls that caller should execute in between of swaps for firebird\\r\\n     * @param oneInch Address of 1inch router\\r\\n     * @param executor Aggregation executor that executes calls described in data\\r\\n     * @param descInch Swap description in 1inch\\r\\n     * @param dataInch Encoded calls that caller should execute in between of swaps\\r\\n     */\\r\\n    function arbFromTokensWithFireBirdAnd1Inch(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory descFireBird,\\r\\n        bytes memory dataFireBird,\\r\\n        address oneInch,\\r\\n        IAggregationExecutor executor,\\r\\n        I1InchRouter.SwapDescription memory descInch,\\r\\n        bytes memory dataInch,\\r\\n        uint selector\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        if (selector == 0)\\r\\n            swapTokens1InchAndFireBird(\\r\\n                fireBird,\\r\\n                caller,\\r\\n                descFireBird,\\r\\n                dataFireBird,\\r\\n                oneInch,\\r\\n                executor,\\r\\n                descInch,\\r\\n                dataInch\\r\\n            );\\r\\n        else\\r\\n            swapTokensFireBirdAnd1Inch(\\r\\n                fireBird,\\r\\n                caller,\\r\\n                descFireBird,\\r\\n                dataFireBird,\\r\\n                oneInch,\\r\\n                executor,\\r\\n                descInch,\\r\\n                dataInch\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with odos and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with odos.\\r\\n     * Otherwise, buy tokens with odos and sell tokens with vault.\\r\\n     * @param odos Address of odos router\\r\\n     * @param tokenInfo All information about the tokens being swapped\\r\\n     * @param data Encoded data for swapCompact\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWithOdosAndVault(\\r\\n        address odos,\\r\\n        IOdosRouter.swapTokenInfo memory tokenInfo,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline,\\r\\n        uint selector\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        if (selector == 0) swapTokensVaultAndOdos(odos, tokenInfo, data, vault, swaps, assets, deadline);\\r\\n        else swapTokensOdosAndVault(odos, tokenInfo, data, vault, swaps, assets, deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with paraswap and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with paraswap.\\r\\n     * Otherwise, buy tokens with paraswap and sell tokens with vault.\\r\\n     * @param para Address of para router\\r\\n     * @param data Data structure for simple swap of para\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWithParaAndVault(\\r\\n        address para,\\r\\n        Utils.SimpleData memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline,\\r\\n        uint selector\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        if (selector == 0) swapTokensVaultAndPara(para, data, vault, swaps, assets, deadline);\\r\\n        else swapTokensParaAndVault(para, data, vault, swaps, assets, deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swap tokens with orion and vault\\r\\n     * If selector is 0, buy tokens with vault and sell tokens with orion.\\r\\n     * Otherwise, buy tokens with orion and sell tokens with vault.\\r\\n     * @param orion Address of orion router\\r\\n     * @param amountSpend Amount to spend for swap of orion\\r\\n     * @param amountReceive Amount to receive of orion\\r\\n     * @param path Path to swap token of orion\\r\\n     * @param isExactSpend Boolean of exact spend\\r\\n     * @param vault Address of vault\\r\\n     * @param swaps BatchSwapStep struct in vault\\r\\n     * @param assets An array of tokens which are used in the batch swap. This is referenced from within swaps\\r\\n     * @param deadline The deadline timestamp\\r\\n     * @param selector Selector of the swap method\\r\\n     */\\r\\n    function arbFromTokensWithOrionAndVault(\\r\\n        address orion,\\r\\n        uint112 amountSpend,\\r\\n        uint112 amountReceive,\\r\\n        address[] calldata path,\\r\\n        bool isExactSpend,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline,\\r\\n        uint selector\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        if (selector == 0)\\r\\n            swapTokensVaultAndOrion(\\r\\n                orion,\\r\\n                amountSpend,\\r\\n                amountReceive,\\r\\n                path,\\r\\n                isExactSpend,\\r\\n                vault,\\r\\n                swaps,\\r\\n                assets,\\r\\n                deadline\\r\\n            );\\r\\n        else\\r\\n            swapTokensOrionAndVault(\\r\\n                orion,\\r\\n                amountSpend,\\r\\n                amountReceive,\\r\\n                path,\\r\\n                isExactSpend,\\r\\n                vault,\\r\\n                swaps,\\r\\n                assets,\\r\\n                deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with 1inch\\r\\n     */\\r\\n    function swapTokensVaultAnd1Inch(\\r\\n        address oneInchSell,\\r\\n        IAggregationExecutor executorSell,\\r\\n        I1InchRouter.SwapDescription memory descSell,\\r\\n        bytes memory data,\\r\\n        address vaultBuy,\\r\\n        IVault.BatchSwapStep[] memory swapsBuy,\\r\\n        address[] memory assetsBuy,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vaultBuy);\\r\\n        address sellStrategy = get1InchStrategy(oneInchSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assetsBuy[swapsBuy[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swapsBuy[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swapsBuy[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vaultBuy,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsBuy,\\r\\n            assetsBuy,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assetsBuy.length),\\r\\n            deadline\\r\\n        );\\r\\n        // Sell tokens\\r\\n        descSell.amount = descSell.srcToken.balanceOf(sellStrategy);\\r\\n        I1InchStrategy(sellStrategy).swap(oneInchSell, executorSell, descSell, ZERO_BYTES, data);\\r\\n\\r\\n        _ensureProfit(swapsBuy[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with 1inch and sell tokens with vault\\r\\n     */\\r\\n    function swapTokens1InchAndVault(\\r\\n        address oneInchBuy,\\r\\n        IAggregationExecutor executorBuy,\\r\\n        I1InchRouter.SwapDescription memory descBuy,\\r\\n        bytes memory data,\\r\\n        address vaultSell,\\r\\n        IVault.BatchSwapStep[] memory swapsSell,\\r\\n        address[] memory assetsSell,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = get1InchStrategy(oneInchBuy);\\r\\n        address sellStrategy = getVaultStrategy(vaultSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(address(descBuy.srcToken));\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), descBuy.amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, descBuy.amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        I1InchStrategy(buyStrategy).swap(oneInchBuy, executorBuy, descBuy, ZERO_BYTES, data);\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swapsSell[0].amount = IERC20Upgradeable(assetsSell[swapsSell[0].assetInIndex]).balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vaultSell,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsSell,\\r\\n            assetsSell,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assetsSell.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(descBuy.amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with univ3swap of 1inch\\r\\n     */\\r\\n    function swapTokensVaultAnd1InchUniV3(\\r\\n        address oneInchSell,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256[] memory pools,\\r\\n        address vaultBuy,\\r\\n        IVault.BatchSwapStep[] memory swapsBuy,\\r\\n        address[] memory assetsBuy,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vaultBuy);\\r\\n        address sellStrategy = get1InchStrategy(oneInchSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assetsBuy[swapsBuy[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swapsBuy[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swapsBuy[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vaultBuy,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsBuy,\\r\\n            assetsBuy,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assetsBuy.length),\\r\\n            deadline\\r\\n        );\\r\\n        // Sell tokens\\r\\n        amount = IERC20Upgradeable(srcToken).balanceOf(sellStrategy);\\r\\n        I1InchStrategy(sellStrategy).uniswapV3SwapTo(oneInchSell, payable(address(this)), srcToken, amount, 0, pools);\\r\\n\\r\\n        _ensureProfit(swapsBuy[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with univ3swap of 1inch and sell tokens with vault\\r\\n     */\\r\\n    function swapTokens1InchUniV3AndVault(\\r\\n        address oneInchBuy,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256[] memory pools,\\r\\n        address vaultSell,\\r\\n        IVault.BatchSwapStep[] memory swapsSell,\\r\\n        address[] memory assetsSell,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = get1InchStrategy(oneInchBuy);\\r\\n        address sellStrategy = getVaultStrategy(vaultSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(srcToken);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        I1InchStrategy(buyStrategy).uniswapV3SwapTo(oneInchBuy, payable(sellStrategy), srcToken, amount, 0, pools);\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swapsSell[0].amount = IERC20Upgradeable(assetsSell[swapsSell[0].assetInIndex]).balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vaultSell,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsSell,\\r\\n            assetsSell,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assetsSell.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with unoswap of 1inch\\r\\n     */\\r\\n    function swapTokensVaultAnd1InchUno(\\r\\n        address oneInchSell,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256[] memory pools,\\r\\n        address vaultBuy,\\r\\n        IVault.BatchSwapStep[] memory swapsBuy,\\r\\n        address[] memory assetsBuy,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vaultBuy);\\r\\n        address sellStrategy = get1InchStrategy(oneInchSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assetsBuy[swapsBuy[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swapsBuy[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swapsBuy[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vaultBuy,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsBuy,\\r\\n            assetsBuy,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assetsBuy.length),\\r\\n            deadline\\r\\n        );\\r\\n        // Sell tokens\\r\\n        amount = IERC20Upgradeable(srcToken).balanceOf(sellStrategy);\\r\\n        I1InchStrategy(sellStrategy).unoswapTo(oneInchSell, payable(address(this)), srcToken, amount, 0, pools);\\r\\n\\r\\n        _ensureProfit(swapsBuy[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with unoswap of 1inch and sell tokens with vault\\r\\n     */\\r\\n    function swapTokens1InchUnoAndVault(\\r\\n        address oneInchBuy,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256[] memory pools,\\r\\n        address vaultSell,\\r\\n        IVault.BatchSwapStep[] memory swapsSell,\\r\\n        address[] memory assetsSell,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = get1InchStrategy(oneInchBuy);\\r\\n        address sellStrategy = getVaultStrategy(vaultSell);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(srcToken);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        I1InchStrategy(buyStrategy).unoswapTo(oneInchBuy, payable(sellStrategy), srcToken, amount, 0, pools);\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swapsSell[0].amount = IERC20Upgradeable(assetsSell[swapsSell[0].assetInIndex]).balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vaultSell,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swapsSell,\\r\\n            assetsSell,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assetsSell.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with firebird\\r\\n     */\\r\\n    function swapTokensVaultAndFireBird(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory desc,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vault);\\r\\n        address sellStrategy = getFireBirdStrategy(fireBird);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assets[swaps[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swaps[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swaps[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n        // Sell tokens\\r\\n        desc.amount = desc.srcToken.balanceOf(sellStrategy);\\r\\n        IFireBirdStrategy(sellStrategy).swap(fireBird, caller, desc, data);\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with firebird and sell tokens with vault\\r\\n     */\\r\\n    function swapTokensFireBirdAndVault(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory desc,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getFireBirdStrategy(fireBird);\\r\\n        address sellStrategy = getVaultStrategy(vault);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(address(desc.srcToken));\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), desc.amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, desc.amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IFireBirdStrategy(buyStrategy).swap(fireBird, caller, desc, data);\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swaps[0].amount = desc.dstToken.balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(desc.amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with 1inch and sell tokens with firebird\\r\\n     */\\r\\n    function swapTokens1InchAndFireBird(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory descFireBird,\\r\\n        bytes memory dataFireBird,\\r\\n        address oneInch,\\r\\n        IAggregationExecutor executor,\\r\\n        I1InchRouter.SwapDescription memory descInch,\\r\\n        bytes memory dataInch\\r\\n    ) private {\\r\\n        address buyStrategy = get1InchStrategy(oneInch);\\r\\n        address sellStrategy = getFireBirdStrategy(fireBird);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(address(descInch.srcToken));\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), descInch.amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, descInch.amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        I1InchStrategy(buyStrategy).swap(oneInch, executor, descInch, ZERO_BYTES, dataInch);\\r\\n        // Sell tokens\\r\\n        descFireBird.amount = IERC20Upgradeable(address(descFireBird.srcToken)).balanceOf(sellStrategy);\\r\\n        IFireBirdStrategy(sellStrategy).swap(fireBird, caller, descFireBird, dataFireBird);\\r\\n\\r\\n        _ensureProfit(descInch.amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with firebird and sell tokens with 1inch\\r\\n     */\\r\\n    function swapTokensFireBirdAnd1Inch(\\r\\n        address fireBird,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription memory descFireBird,\\r\\n        bytes memory dataFireBird,\\r\\n        address oneInch,\\r\\n        IAggregationExecutor executor,\\r\\n        I1InchRouter.SwapDescription memory descInch,\\r\\n        bytes memory dataInch\\r\\n    ) private {\\r\\n        address buyStrategy = get1InchStrategy(oneInch);\\r\\n        address sellStrategy = getFireBirdStrategy(fireBird);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(address(descFireBird.srcToken));\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), descFireBird.amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, descFireBird.amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IFireBirdStrategy(sellStrategy).swap(fireBird, caller, descFireBird, dataFireBird);\\r\\n        // Sell tokens\\r\\n        descInch.amount = descInch.srcToken.balanceOf(sellStrategy);\\r\\n        I1InchStrategy(buyStrategy).swap(oneInch, executor, descInch, ZERO_BYTES, dataInch);\\r\\n\\r\\n        _ensureProfit(descFireBird.amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with odos\\r\\n     */\\r\\n    function swapTokensVaultAndOdos(\\r\\n        address odos,\\r\\n        IOdosRouter.swapTokenInfo memory tokenInfo,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vault);\\r\\n        address sellStrategy = getOdosStrategy(odos);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assets[swaps[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swaps[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swaps[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        // Sell tokens\\r\\n        tokenInfo.inputAmount = IERC20Upgradeable(tokenInfo.inputToken).balanceOf(sellStrategy);\\r\\n        bytes32 newAmountBytes = bytes32(tokenInfo.inputAmount);\\r\\n        uint8 length = uint8(data[8]); // 9th byte marks the length of `tokenInfo.inputToken`\\r\\n        for (uint8 i = 0; i < length; i++) {\\r\\n            data[9 + i] = newAmountBytes[32 - length + i];\\r\\n        }\\r\\n        IOdosStrategy(sellStrategy).swapCompact(odos, tokenInfo, data);\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with odos and sell tokens with vault\\r\\n     */\\r\\n    function swapTokensOdosAndVault(\\r\\n        address odos,\\r\\n        IOdosRouter.swapTokenInfo memory tokenInfo,\\r\\n        bytes memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getOdosStrategy(odos);\\r\\n        address sellStrategy = getVaultStrategy(vault);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(tokenInfo.inputToken);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), tokenInfo.inputAmount);\\r\\n        tokenIn.safeTransfer(buyStrategy, tokenInfo.inputAmount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IOdosStrategy(buyStrategy).swapCompact(odos, tokenInfo, data);\\r\\n\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swaps[0].amount = IERC20Upgradeable(tokenInfo.outputToken).balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(tokenInfo.inputAmount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with paraswap\\r\\n     */\\r\\n    function swapTokensVaultAndPara(\\r\\n        address para,\\r\\n        Utils.SimpleData memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vault);\\r\\n        address sellStrategy = getParaStrategy(para);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assets[swaps[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swaps[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swaps[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        // Sell tokens\\r\\n        data.fromAmount = IERC20Upgradeable(data.fromToken).balanceOf(sellStrategy);\\r\\n        IParaswapStrategy(sellStrategy).simpleSwap(para, data);\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with paraswap and sell tokens with vault\\r\\n     */\\r\\n    function swapTokensParaAndVault(\\r\\n        address para,\\r\\n        Utils.SimpleData memory data,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getParaStrategy(para);\\r\\n        address sellStrategy = getVaultStrategy(vault);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(data.fromToken);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), data.fromAmount);\\r\\n        tokenIn.safeTransfer(buyStrategy, data.fromAmount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IParaswapStrategy(buyStrategy).simpleSwap(para, data);\\r\\n\\r\\n        // Sell tokens\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swaps[0].amount = IERC20Upgradeable(data.toToken).balanceOf(sellStrategy);\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(data.fromAmount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with vault and sell tokens with orion\\r\\n     */\\r\\n    function swapTokensVaultAndOrion(\\r\\n        address orion,\\r\\n        uint112 amountSpend,\\r\\n        uint112 amountReceive,\\r\\n        address[] calldata path,\\r\\n        bool isExactSpend,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getVaultStrategy(vault);\\r\\n        address sellStrategy = getOrionStrategy(orion);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(assets[swaps[0].assetInIndex]);\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), swaps[0].amount);\\r\\n        tokenIn.safeTransfer(buyStrategy, swaps[0].amount);\\r\\n\\r\\n        // Buy tokens\\r\\n        IVault.FundManagement memory fundsBuy = IVault.FundManagement({\\r\\n            sender: buyStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(sellStrategy),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        IVaultStrategy(buyStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsBuy,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        // Sell tokens\\r\\n        amountSpend = uint112(IERC20Upgradeable(path[0]).balanceOf(sellStrategy));\\r\\n        IOrionStrategy(sellStrategy).swapThroughOrionPool(orion, amountSpend, amountReceive, path, isExactSpend);\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with orion and sell tokens with vault\\r\\n     */\\r\\n    function swapTokensOrionAndVault(\\r\\n        address orion,\\r\\n        uint112 amountSpend,\\r\\n        uint112 amountReceive,\\r\\n        address[] calldata path,\\r\\n        bool isExactSpend,\\r\\n        address vault,\\r\\n        IVault.BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        address buyStrategy = getOrionStrategy(orion);\\r\\n        address sellStrategy = getVaultStrategy(vault);\\r\\n        IERC20Upgradeable tokenIn = IERC20Upgradeable(\\r\\n            LibPool.retrieveAssetSpend(IOrionRouter(orion)._orionpoolRouter(), path)\\r\\n        );\\r\\n        tokenIn.safeTransferFrom(_msgSender(), address(this), uint256(amountSpend));\\r\\n        tokenIn.safeTransfer(buyStrategy, uint256(amountSpend));\\r\\n\\r\\n        // Buy tokens\\r\\n        uint amountOut = IOrionStrategy(buyStrategy).swapThroughOrionPool(\\r\\n            orion,\\r\\n            amountSpend,\\r\\n            amountReceive,\\r\\n            path,\\r\\n            isExactSpend\\r\\n        );\\r\\n\\r\\n        // Sell tokens\\r\\n        IERC20Upgradeable(assets[swaps[0].assetInIndex]).safeTransfer(sellStrategy, amountOut);\\r\\n        IVault.FundManagement memory fundsSell = IVault.FundManagement({\\r\\n            sender: sellStrategy,\\r\\n            fromInternalBalance: false,\\r\\n            recipient: payable(address(this)),\\r\\n            toInternalBalance: false\\r\\n        });\\r\\n        swaps[0].amount = amountOut;\\r\\n        IVaultStrategy(sellStrategy).batchSwap(\\r\\n            vault,\\r\\n            IVault.SwapKind.GIVEN_IN,\\r\\n            swaps,\\r\\n            assets,\\r\\n            fundsSell,\\r\\n            getLimitsForVault(assets.length),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        _ensureProfit(swaps[0].amount, tokenIn);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/FakeOrionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\n\\r\\nimport '../../interfaces/IPoolFunctionality.sol';\\r\\nimport '../../interfaces/IOrionRouter.sol';\\r\\nimport '../../libraries/TransferHelper.sol';\\r\\nimport './libraries/LibPool.sol';\\r\\nimport './libraries/LibValidator.sol';\\r\\n\\r\\ncontract FakeOrionRouter is IOrionRouter, Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice Settle a trade with two orders, filled price and amount\\r\\n     * @dev 2 orders are submitted, it is necessary to match them:\\r\\n        check conditions in orders for compliance filledPrice, filledAmountbuyOrderHash\\r\\n        change balances on the contract respectively with buyer, seller, matcbuyOrderHashher\\r\\n     * @param buyOrder structure of buy side orderbuyOrderHash\\r\\n     * @param sellOrder structure of sell side order\\r\\n     * @param filledPrice price at which the order was settled\\r\\n     * @param filledAmount amount settled between orders\\r\\n     */\\r\\n    struct UpdateOrderBalanceData {\\r\\n        uint buyType;\\r\\n        uint sellType;\\r\\n        int buyIn;\\r\\n        int sellIn;\\r\\n    }\\r\\n\\r\\n    struct Liability {\\r\\n        address asset;\\r\\n        uint64 timestamp;\\r\\n        uint192 outstandingAmount;\\r\\n    }\\r\\n\\r\\n    address public override _orionpoolRouter;\\r\\n    mapping(address => bool) orionpoolAllowances;\\r\\n\\r\\n    address public WETH;\\r\\n\\r\\n    // Get user balance by address and asset address\\r\\n    mapping(address => mapping(address => int192)) internal assetBalances;\\r\\n    // List of assets with negative balance for each user\\r\\n    mapping(address => Liability[]) public liabilities;\\r\\n\\r\\n    //Important catch-all a function that should only accept ethereum and don't allow do something with it\\r\\n    //We accept ETH there only from out router or wrapped ethereum contract.\\r\\n    //If router sends some ETH to us - it's just swap completed, and we don't need to do something\\r\\n    receive() external payable {\\r\\n        require(msg.sender == _orionpoolRouter || msg.sender == WETH, 'NPF');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev wrapper for LibValidator methods, may be deleted.\\r\\n     */\\r\\n    function validateOrder(LibValidator.Order memory order) public pure override returns (bool isValid) {\\r\\n        isValid = order.isPersonalSign ? LibValidator.validatePersonal(order) : LibValidator.validateV3(order);\\r\\n    }\\r\\n\\r\\n    function fillOrders(\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) public override nonReentrant {\\r\\n        // // --- VARIABLES --- //\\r\\n        // // Amount of quote asset\\r\\n        // uint256 _amountQuote = (uint256(filledAmount) * filledPrice) / (10 ** 8);\\r\\n        // require(_amountQuote < type(uint112).max, 'E12G');\\r\\n        // uint112 amountQuote = uint112(_amountQuote);\\r\\n        // // Order Hashes\\r\\n        // bytes32 buyOrderHash = buyOrder.getTypeValueHash();\\r\\n        // bytes32 sellOrderHash = sellOrder.getTypeValueHash();\\r\\n        // // --- VALIDATIONS --- //\\r\\n        // // Validate signatures using eth typed sign V1\\r\\n        // require(\\r\\n        //     LibValidator.checkOrdersInfo(\\r\\n        //         buyOrder,\\r\\n        //         sellOrder,\\r\\n        //         msg.sender,\\r\\n        //         filledAmount,\\r\\n        //         filledPrice,\\r\\n        //         block.timestamp,\\r\\n        //         _allowedMatcher\\r\\n        //     ),\\r\\n        //     'E3G'\\r\\n        // );\\r\\n        // // --- UPDATES --- //\\r\\n        // //updateFilledAmount\\r\\n        // filledAmounts[buyOrderHash] += filledAmount; //it is safe to add ui112 to each other to get i192\\r\\n        // filledAmounts[sellOrderHash] += filledAmount;\\r\\n        // require(filledAmounts[buyOrderHash] <= buyOrder.amount, 'E12B');\\r\\n        // require(filledAmounts[sellOrderHash] <= sellOrder.amount, 'E12S');\\r\\n        // // Update User's balances\\r\\n        // UpdateOrderBalanceData memory data;\\r\\n        // (data.buyType, data.buyIn) = LibExchange.updateOrderBalanceDebit(\\r\\n        //     buyOrder,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote,\\r\\n        //     kBuy | kCorrectMatcherFeeByOrderAmount,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // (data.sellType, data.sellIn) = LibExchange.updateOrderBalanceDebit(\\r\\n        //     sellOrder,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote,\\r\\n        //     kSell | kCorrectMatcherFeeByOrderAmount,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // LibExchange.creditUserAssets(\\r\\n        //     data.buyType,\\r\\n        //     buyOrder.senderAddress,\\r\\n        //     data.buyIn,\\r\\n        //     buyOrder.baseAsset,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // LibExchange.creditUserAssets(\\r\\n        //     data.sellType,\\r\\n        //     sellOrder.senderAddress,\\r\\n        //     data.sellIn,\\r\\n        //     sellOrder.quoteAsset,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // require(checkPosition(buyOrder.senderAddress), 'E1PB');\\r\\n        // require(checkPosition(sellOrder.senderAddress), 'E1PS');\\r\\n        // emit NewTrade(\\r\\n        //     buyOrder.senderAddress,\\r\\n        //     sellOrder.senderAddress,\\r\\n        //     buyOrder.baseAsset,\\r\\n        //     buyOrder.quoteAsset,\\r\\n        //     filledPrice,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote\\r\\n        // );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) public override nonReentrant {\\r\\n        // LibPool.OrderExecutionData memory d;\\r\\n        // d.order = order;\\r\\n        // d.filledAmount = filledAmount;\\r\\n        // d.blockchainFee = blockchainFee;\\r\\n        // d.path = path;\\r\\n        // d.allowedMatcher = _allowedMatcher;\\r\\n        // d.orionpoolRouter = _orionpoolRouter;\\r\\n        // LibPool.doFillThroughOrionPool(d, assetBalances, liabilities, filledAmounts);\\r\\n        // require(checkPosition(order.senderAddress), order.buySide == 0 ? 'E1PS' : 'E1PB');\\r\\n    }\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) public payable override nonReentrant {\\r\\n        // LibPool.doSwapThroughOrionPool(\\r\\n        //     IPoolFunctionality.SwapData({\\r\\n        //         amount_spend: amount_spend,\\r\\n        //         amount_receive: amount_receive,\\r\\n        //         is_exact_spend: is_exact_spend,\\r\\n        //         supportingFee: false,\\r\\n        //         path: path,\\r\\n        //         orionpool_router: _orionpoolRouter,\\r\\n        //         isInContractTrade: false,\\r\\n        //         isSentETHEnough: false,\\r\\n        //         isFromWallet: false,\\r\\n        //         asset_spend: address(0)\\r\\n        //     }),\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/libraries/LibPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '../../../interfaces/IPoolFunctionality.sol';\\r\\nimport '../FakeOrionRouter.sol';\\r\\nimport './LibValidator.sol';\\r\\n\\r\\nlibrary LibPool {\\r\\n    //  Just to avoid stack too deep error;\\r\\n    struct OrderExecutionData {\\r\\n        LibValidator.Order order;\\r\\n        uint filledAmount;\\r\\n        uint blockchainFee;\\r\\n        address[] path;\\r\\n        address allowedMatcher;\\r\\n        address orionpoolRouter;\\r\\n        uint amount_spend;\\r\\n        uint amount_receive;\\r\\n        uint amountQuote;\\r\\n        uint filledBase;\\r\\n        uint filledQuote;\\r\\n        uint filledPrice;\\r\\n        uint amountOut;\\r\\n        uint amountIn;\\r\\n        bool isInContractTrade;\\r\\n        bool isRetainFee;\\r\\n        bool isFromWallet;\\r\\n        address to;\\r\\n        address asset_spend;\\r\\n    }\\r\\n\\r\\n    function retrieveAssetSpend(address pf, address[] memory path) internal view returns (address) {\\r\\n        return path.length > 2 ? (IPoolFunctionality(pf).isFactory(path[0]) ? path[1] : path[0]) : path[0];\\r\\n    }\\r\\n\\r\\n    function doSwapThroughOrionPool(\\r\\n        IPoolFunctionality.SwapData memory d,\\r\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\r\\n        mapping(address => FakeOrionRouter.Liability[]) storage liabilities\\r\\n    ) public returns (bool) {\\r\\n        // require(d.is_exact_spend || !d.supportingFee, \\\"FNS\\\");\\r\\n        // d.asset_spend = retrieveAssetSpend(d.orionpool_router, d.path);\\r\\n        // d.isInContractTrade = assetBalances[msg.sender][d.asset_spend] > 0;\\r\\n        // if (msg.value > 0) {\\r\\n        //     uint112 eth_sent = uint112(LibUnitConverter.baseUnitToDecimal(address(0), msg.value));\\r\\n        //     if (d.asset_spend == address(0) && eth_sent >= d.amount_spend) {\\r\\n        //         d.isSentETHEnough = true;\\r\\n        //         d.isInContractTrade = false;\\r\\n        //     } else {\\r\\n        //         LibExchange._updateBalance(msg.sender, address(0), eth_sent, assetBalances, liabilities);\\r\\n        //     }\\r\\n        // }\\r\\n        // d.isFromWallet = assetBalances[msg.sender][d.asset_spend] < d.amount_spend;\\r\\n        // if (d.isInContractTrade) {\\r\\n        //     if (d.supportingFee) {\\r\\n        //         // Depositing before _updateBalance and changing amount_spend if token has internal fee\\r\\n        //         uint beforeBalance = uint(assetBalances[msg.sender][d.asset_spend]);\\r\\n        //         int afterBalance = int(beforeBalance) - int(d.amount_spend);\\r\\n        //         if (afterBalance < 0) {\\r\\n        //             uint previousBalance = IERC20(d.asset_spend).balanceOf(address(this));\\r\\n        //             LibExchange._tryDeposit(d.asset_spend, uint(-afterBalance), msg.sender);\\r\\n        //             uint depositedAmount = IERC20(d.asset_spend).balanceOf(address(this)) - previousBalance;\\r\\n        //             depositedAmount = LibUnitConverter.baseUnitToDecimal(d.asset_spend, depositedAmount);\\r\\n        //             require(depositedAmount != 0, \\\"E1S\\\");\\r\\n        //             assetBalances[msg.sender][d.asset_spend] += int192(depositedAmount);\\r\\n        //             d.amount_spend = uint112(beforeBalance) + uint112(depositedAmount);\\r\\n        //         }\\r\\n        //     }\\r\\n        //     LibExchange._updateBalance(msg.sender, d.asset_spend, -1*int(d.amount_spend), assetBalances, liabilities);\\r\\n        //     require(assetBalances[msg.sender][d.asset_spend] >= 0, \\\"E1S\\\");\\r\\n        // }\\r\\n        // (uint amountOut, uint amountIn) = IPoolFunctionality(d.orionpool_router).doSwapThroughOrionPool(\\r\\n        //     d.isInContractTrade || d.isSentETHEnough ? address(this) : msg.sender,\\r\\n        //     d.isInContractTrade && !d.supportingFee ? address(this) : msg.sender,\\r\\n        //     d\\r\\n        // );\\r\\n        // if (d.isSentETHEnough) {\\r\\n        //     refundChange(amountOut);\\r\\n        // } else if (d.isInContractTrade && !d.supportingFee) {\\r\\n        //     if (d.amount_spend > amountOut) { //Refund\\r\\n        //         LibExchange._updateBalance(msg.sender, d.asset_spend, int(d.amount_spend) - int(amountOut), assetBalances, liabilities);\\r\\n        //     }\\r\\n        //     LibExchange.creditUserAssets(d.isFromWallet ? 1 : 0, msg.sender, int(amountIn), d.path[d.path.length-1], assetBalances, liabilities);\\r\\n        //     return true;\\r\\n        // }\\r\\n        // return d.isInContractTrade;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/libraries/LibValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '../utils/fromOZ/ECDSA.sol';\\r\\n\\r\\nlibrary LibValidator {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    string public constant DOMAIN_NAME = 'Orion Exchange';\\r\\n    string public constant DOMAIN_VERSION = '1';\\r\\n    uint256 public constant CHAIN_ID = 137;\\r\\n    bytes32 public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\r\\n\\r\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\\r\\n        keccak256(abi.encodePacked('EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)'));\\r\\n    bytes32 public constant ORDER_TYPEHASH =\\r\\n        keccak256(\\r\\n            abi.encodePacked(\\r\\n                'Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)'\\r\\n            )\\r\\n        );\\r\\n\\r\\n    bytes32 public constant DOMAIN_SEPARATOR =\\r\\n        keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(DOMAIN_NAME)),\\r\\n                keccak256(bytes(DOMAIN_VERSION)),\\r\\n                CHAIN_ID,\\r\\n                DOMAIN_SALT\\r\\n            )\\r\\n        );\\r\\n\\r\\n    struct Order {\\r\\n        address senderAddress;\\r\\n        address matcherAddress;\\r\\n        address baseAsset;\\r\\n        address quoteAsset;\\r\\n        address matcherFeeAsset;\\r\\n        uint64 amount;\\r\\n        uint64 price;\\r\\n        uint64 matcherFee;\\r\\n        uint64 nonce;\\r\\n        uint64 expiration;\\r\\n        uint8 buySide; // buy or sell\\r\\n        bool isPersonalSign;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev validate order signature\\r\\n     */\\r\\n    function validateV3(Order memory order) public pure returns (bool) {\\r\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, getTypeValueHash(order)));\\r\\n\\r\\n        return digest.recover(order.signature) == order.senderAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return hash order\\r\\n     */\\r\\n    function getTypeValueHash(Order memory _order) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    ORDER_TYPEHASH,\\r\\n                    _order.senderAddress,\\r\\n                    _order.matcherAddress,\\r\\n                    _order.baseAsset,\\r\\n                    _order.quoteAsset,\\r\\n                    _order.matcherFeeAsset,\\r\\n                    _order.amount,\\r\\n                    _order.price,\\r\\n                    _order.matcherFee,\\r\\n                    _order.nonce,\\r\\n                    _order.expiration,\\r\\n                    _order.buySide\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev basic checks of matching orders against each other\\r\\n     */\\r\\n    function checkOrdersInfo(\\r\\n        Order memory buyOrder,\\r\\n        Order memory sellOrder,\\r\\n        address sender,\\r\\n        uint256 filledAmount,\\r\\n        uint256 filledPrice,\\r\\n        uint256 currentTime,\\r\\n        address allowedMatcher\\r\\n    ) public pure returns (bool success) {\\r\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), 'E2BP') : require(validateV3(buyOrder), 'E2B');\\r\\n        sellOrder.isPersonalSign ? require(validatePersonal(sellOrder), 'E2SP') : require(validateV3(sellOrder), 'E2S');\\r\\n\\r\\n        // Same matcher address\\r\\n        require(buyOrder.matcherAddress == sender && sellOrder.matcherAddress == sender, 'E3M');\\r\\n\\r\\n        if (allowedMatcher != address(0)) {\\r\\n            require(buyOrder.matcherAddress == allowedMatcher, 'E3M2');\\r\\n        }\\r\\n\\r\\n        // Check matching assets\\r\\n        require(buyOrder.baseAsset == sellOrder.baseAsset && buyOrder.quoteAsset == sellOrder.quoteAsset, 'E3As');\\r\\n\\r\\n        // Check order amounts\\r\\n        require(filledAmount <= buyOrder.amount, 'E3AmB');\\r\\n        require(filledAmount <= sellOrder.amount, 'E3AmS');\\r\\n\\r\\n        // Check Price values\\r\\n        require(filledPrice <= buyOrder.price, 'E3');\\r\\n        require(filledPrice >= sellOrder.price, 'E3');\\r\\n\\r\\n        // Check Expiration Time. Convert to seconds first\\r\\n        require(buyOrder.expiration / 1000 >= currentTime, 'E4B');\\r\\n        require(sellOrder.expiration / 1000 >= currentTime, 'E4S');\\r\\n\\r\\n        require(buyOrder.buySide == 1 && sellOrder.buySide == 0, 'E3D');\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    'order',\\r\\n                    _order.senderAddress,\\r\\n                    _order.matcherAddress,\\r\\n                    _order.baseAsset,\\r\\n                    _order.quoteAsset,\\r\\n                    _order.matcherFeeAsset,\\r\\n                    _order.amount,\\r\\n                    _order.price,\\r\\n                    _order.matcherFee,\\r\\n                    _order.nonce,\\r\\n                    _order.expiration,\\r\\n                    _order.buySide\\r\\n                )\\r\\n            ).toEthSignedMessageHash();\\r\\n    }\\r\\n\\r\\n    function validatePersonal(Order memory order) public pure returns (bool) {\\r\\n        bytes32 digest = getEthSignedOrderHash(order);\\r\\n        return digest.recover(order.signature) == order.senderAddress;\\r\\n    }\\r\\n\\r\\n    function checkOrderSingleMatch(\\r\\n        Order memory buyOrder,\\r\\n        address sender,\\r\\n        address allowedMatcher,\\r\\n        uint112 filledAmount,\\r\\n        uint256 currentTime,\\r\\n        address asset_spend,\\r\\n        address asset_receive\\r\\n    ) internal pure {\\r\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), 'E2BP') : require(validateV3(buyOrder), 'E2B');\\r\\n        require(buyOrder.matcherAddress == sender && buyOrder.matcherAddress == allowedMatcher, 'E3M2');\\r\\n        if (buyOrder.buySide == 1) {\\r\\n            require(buyOrder.baseAsset == asset_receive && buyOrder.quoteAsset == asset_spend, 'E3As');\\r\\n        } else {\\r\\n            require(buyOrder.quoteAsset == asset_receive && buyOrder.baseAsset == asset_spend, 'E3As');\\r\\n        }\\r\\n        require(filledAmount <= buyOrder.amount, 'E3AmB');\\r\\n        require(buyOrder.expiration / 1000 >= currentTime, 'E4B');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/utils/fromOZ/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        // Check the signature length\\r\\n        if (signature.length != 65) {\\r\\n            revert('ECDSA: invalid signature length');\\r\\n        }\\r\\n\\r\\n        // Divide the signature in r, s and v variables\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        // ecrecover takes the signature parameters, and the only way to get them\\r\\n        // currently is to use assembly.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            r := mload(add(signature, 0x20))\\r\\n            s := mload(add(signature, 0x40))\\r\\n            v := byte(0, mload(add(signature, 0x60)))\\r\\n        }\\r\\n\\r\\n        return recover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        require(\\r\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"ECDSA: invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), 'ECDSA: invalid signature');\\r\\n\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * replicates the behavior of the\\r\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/I1InchRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nimport './IAggregationExecutor.sol';\\r\\n\\r\\ninterface I1InchRouter {\\r\\n    struct SwapDescription {\\r\\n        IERC20 srcToken;\\r\\n        IERC20 dstToken;\\r\\n        address payable srcReceiver;\\r\\n        address payable dstReceiver;\\r\\n        uint256 amount;\\r\\n        uint256 minReturnAmount;\\r\\n        uint256 flags;\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        IAggregationExecutor executor,\\r\\n        SwapDescription calldata desc,\\r\\n        bytes calldata permit,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\r\\n\\r\\n    function uniswapV3Swap(\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function uniswapV3SwapTo(\\r\\n        address payable recipient,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function uniswapV3SwapToWithPermit(\\r\\n        address payable recipient,\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools,\\r\\n        bytes calldata permit\\r\\n    ) external returns (uint256 returnAmount);\\r\\n\\r\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n\\r\\n    function unoswap(\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function unoswapTo(\\r\\n        address payable recipient,\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function unoswapToWithPermit(\\r\\n        address payable recipient,\\r\\n        IERC20 srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools,\\r\\n        bytes calldata permit\\r\\n    ) external returns (uint256 returnAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/I1InchStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IAggregationExecutor.sol';\\r\\nimport './I1InchRouter.sol';\\r\\n\\r\\ninterface I1InchStrategy {\\r\\n    // For uniswapV3SwapTo\\r\\n    struct UniV3SwapTo {\\r\\n        address payable recipient;\\r\\n        address srcToken;\\r\\n        uint256 amount;\\r\\n        uint256 minReturn;\\r\\n        uint256[] pools;\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address router,\\r\\n        IAggregationExecutor executor,\\r\\n        I1InchRouter.SwapDescription calldata desc,\\r\\n        bytes calldata permit,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\r\\n\\r\\n    function uniswapV3Swap(\\r\\n        address router,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function uniswapV3SwapTo(\\r\\n        address router,\\r\\n        address payable recipient,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function uniswapV3SwapToWithPermit(\\r\\n        address router,\\r\\n        address payable recipient,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools,\\r\\n        bytes calldata permit\\r\\n    ) external returns (uint256 returnAmount);\\r\\n\\r\\n    function unoswap(\\r\\n        address router,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function unoswapTo(\\r\\n        address router,\\r\\n        address payable recipient,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function unoswapToWithPermit(\\r\\n        address router,\\r\\n        address payable recipient,\\r\\n        address srcToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] calldata pools,\\r\\n        bytes calldata permit\\r\\n    ) external returns (uint256 returnAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregationExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Interface for making arbitrary calls during swap\\r\\ninterface IAggregationExecutor {\\r\\n    /// @notice propagates information about original msg.sender and executes arbitrary data\\r\\n    function execute(address msgSender) external payable;\\r\\n\\r\\n    function callBytes(bytes calldata data, address srcSpender) external payable; // 0xd9c45357\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFireBirdRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nimport '../interfaces/IAggregationExecutor.sol';\\r\\n\\r\\ninterface IFireBirdRouter {\\r\\n    struct SwapDescription {\\r\\n        IERC20 srcToken;\\r\\n        IERC20 dstToken;\\r\\n        address srcReceiver;\\r\\n        address dstReceiver;\\r\\n        uint256 amount;\\r\\n        uint256 minReturnAmount;\\r\\n        uint256 flags;\\r\\n        bytes permit;\\r\\n    }\\r\\n\\r\\n    event Exchange(address pair, uint amountOut, address output);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function formula() external view returns (address);\\r\\n\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    function swapFeeReward() external view returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address pair,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address pair,\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        address tokenOut,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        address tokenIn,\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        address tokenIn,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        address tokenOut,\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        address tokenOut,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        address tokenIn,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swap(\\r\\n        IAggregationExecutor caller,\\r\\n        SwapDescription calldata desc,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountA,\\r\\n        uint amountB,\\r\\n        uint32 tokenWeightA,\\r\\n        uint32 swapFee,\\r\\n        address to\\r\\n    ) external returns (uint liquidity);\\r\\n\\r\\n    function createPairETH(\\r\\n        address token,\\r\\n        uint amountToken,\\r\\n        uint32 tokenWeight,\\r\\n        uint32 swapFee,\\r\\n        address to\\r\\n    ) external payable returns (uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address pair,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address pair,\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address pair,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address pair,\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address pair,\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address pair,\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFireBirdStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../interfaces/IAggregationExecutor.sol';\\r\\nimport '../interfaces/IFireBirdRouter.sol';\\r\\n\\r\\ninterface IFireBirdStrategy {\\r\\n    function swapExactTokensForTokens(\\r\\n        address router,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        address router,\\r\\n        address tokenOut,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        address router,\\r\\n        address tokenIn,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        address router,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        address router,\\r\\n        address tokenOut,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        address router,\\r\\n        address tokenIn,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint8[] calldata dexIds,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swap(\\r\\n        address router,\\r\\n        IAggregationExecutor caller,\\r\\n        IFireBirdRouter.SwapDescription calldata desc,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256 returnAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOdosRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOdosRouter {\\r\\n    /// @dev Contains all information needed to describe the input and output for a swap\\r\\n    //solhint-disable-next-line contract-name-camelcase\\r\\n    struct swapTokenInfo {\\r\\n        address inputToken;\\r\\n        uint256 inputAmount;\\r\\n        address inputReceiver;\\r\\n        address outputToken;\\r\\n        uint256 outputQuote;\\r\\n        uint256 outputMin;\\r\\n        address outputReceiver;\\r\\n    }\\r\\n    /// @dev Contains all information needed to describe an intput token for swapMulti\\r\\n    //solhint-disable-next-line contract-name-camelcase\\r\\n    struct inputTokenInfo {\\r\\n        address tokenAddress;\\r\\n        uint256 amountIn;\\r\\n        address receiver;\\r\\n    }\\r\\n    /// @dev Contains all information needed to describe an output token for swapMulti\\r\\n    //solhint-disable-next-line contract-name-camelcase\\r\\n    struct outputTokenInfo {\\r\\n        address tokenAddress;\\r\\n        uint256 relativeValue;\\r\\n        address receiver;\\r\\n    }\\r\\n\\r\\n    /// @notice Custom decoder to swap with compact calldata for efficient execution on L2s\\r\\n    function swapCompact() external payable returns (uint256);\\r\\n\\r\\n    /// @notice Externally facing interface for swapping two tokens\\r\\n    /// @param tokenInfo All information about the tokens being swapped\\r\\n    /// @param pathDefinition Encoded path definition for executor\\r\\n    /// @param executor Address of contract that will execute the path\\r\\n    /// @param referralCode referral code to specify the source of the swap\\r\\n    function swap(\\r\\n        swapTokenInfo memory tokenInfo,\\r\\n        bytes calldata pathDefinition,\\r\\n        address executor,\\r\\n        uint32 referralCode\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Externally facing interface for swapping between two sets of tokens\\r\\n    /// @param inputs list of input token structs for the path being executed\\r\\n    /// @param outputs list of output token structs for the path being executed\\r\\n    /// @param valueOutMin minimum amount of value out the user will accept\\r\\n    /// @param pathDefinition Encoded path definition for executor\\r\\n    /// @param executor Address of contract that will execute the path\\r\\n    /// @param referralCode referral code to specify the source of the swap\\r\\n    function swapMulti(\\r\\n        inputTokenInfo[] memory inputs,\\r\\n        outputTokenInfo[] memory outputs,\\r\\n        uint256 valueOutMin,\\r\\n        bytes calldata pathDefinition,\\r\\n        address executor,\\r\\n        uint32 referralCode\\r\\n    ) external payable returns (uint256[] memory amountsOut);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOdosStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IOdosRouter.sol';\\r\\n\\r\\ninterface IOdosStrategy {\\r\\n    function swapCompact(\\r\\n        address router,\\r\\n        IOdosRouter.swapTokenInfo memory tokenInfo,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function swap(\\r\\n        address router,\\r\\n        IOdosRouter.swapTokenInfo memory tokenInfo,\\r\\n        bytes calldata pathDefinition,\\r\\n        address executor,\\r\\n        uint32 referralCode\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function swapMulti(\\r\\n        address router,\\r\\n        IOdosRouter.inputTokenInfo[] memory inputs,\\r\\n        IOdosRouter.outputTokenInfo[] memory outputs,\\r\\n        uint256 valueOutMin,\\r\\n        bytes calldata pathDefinition,\\r\\n        address executor,\\r\\n        uint32 referralCode\\r\\n    ) external payable returns (uint256[] memory amountsOut);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../fakes/orion/libraries/LibValidator.sol';\\r\\n\\r\\ninterface IOrionRouter {\\r\\n    function _orionpoolRouter() external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev wrapper for LibValidator methods, may be deleted.\\r\\n     */\\r\\n    function validateOrder(LibValidator.Order memory order) external pure returns (bool isValid);\\r\\n\\r\\n    function fillOrders(\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) external;\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrionStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../fakes/orion/libraries/LibValidator.sol';\\r\\n\\r\\ninterface IOrionStrategy {\\r\\n    function fillOrders(\\r\\n        address router,\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        address router,\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) external;\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        address router,\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) external payable returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IParaswapStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nimport '../libraries/Utils.sol';\\r\\n\\r\\ninterface IParaswapStrategy {\\r\\n    // function multiSwap(Utils.SellData calldata data) external payable returns (uint256);\\r\\n\\r\\n    // function megaSwap(Utils.MegaSwapSellData calldata data) external payable returns (uint256);\\r\\n\\r\\n    // function protectedMultiSwap(Utils.SellData calldata data) external payable returns (uint256);\\r\\n\\r\\n    // function protectedMegaSwap(Utils.MegaSwapSellData calldata data) external payable returns (uint256);\\r\\n\\r\\n    // function protectedSimpleSwap(Utils.SimpleData calldata data) external payable returns (uint256 receivedAmount);\\r\\n\\r\\n    // function protectedSimpleBuy(Utils.SimpleData calldata data) external payable;\\r\\n\\r\\n    function simpleSwap(\\r\\n        address router,\\r\\n        Utils.SimpleData calldata data\\r\\n    ) external payable returns (uint256 receivedAmount);\\r\\n\\r\\n    // function simpleBuy(Utils.SimpleData calldata data) external payable;\\r\\n\\r\\n    // function swapOnUniswap(uint256 amountIn, uint256 amountOutMin, address[] calldata path) external payable;\\r\\n\\r\\n    // function swapOnUniswapFork(\\r\\n    //     address factory,\\r\\n    //     bytes32 initCode,\\r\\n    //     uint256 amountIn,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address[] calldata path\\r\\n    // ) external payable;\\r\\n\\r\\n    // function buyOnUniswap(uint256 amountInMax, uint256 amountOut, address[] calldata path) external payable;\\r\\n\\r\\n    // function buyOnUniswapFork(\\r\\n    //     address factory,\\r\\n    //     bytes32 initCode,\\r\\n    //     uint256 amountInMax,\\r\\n    //     uint256 amountOut,\\r\\n    //     address[] calldata path\\r\\n    // ) external payable;\\r\\n\\r\\n    // function swapOnUniswapV2Fork(\\r\\n    //     address tokenIn,\\r\\n    //     uint256 amountIn,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address weth,\\r\\n    //     uint256[] calldata pools\\r\\n    // ) external payable;\\r\\n\\r\\n    // function buyOnUniswapV2Fork(\\r\\n    //     address tokenIn,\\r\\n    //     uint256 amountInMax,\\r\\n    //     uint256 amountOut,\\r\\n    //     address weth,\\r\\n    //     uint256[] calldata pools\\r\\n    // ) external payable;\\r\\n\\r\\n    // function swapOnZeroXv2(\\r\\n    //     IERC20 fromToken,\\r\\n    //     IERC20 toToken,\\r\\n    //     uint256 fromAmount,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address exchange,\\r\\n    //     bytes calldata payload\\r\\n    // ) external payable;\\r\\n\\r\\n    // function swapOnZeroXv4(\\r\\n    //     IERC20 fromToken,\\r\\n    //     IERC20 toToken,\\r\\n    //     uint256 fromAmount,\\r\\n    //     uint256 amountOutMin,\\r\\n    //     address exchange,\\r\\n    //     bytes calldata payload\\r\\n    // ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolFunctionality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IPoolFunctionality {\\r\\n    struct SwapData {\\r\\n        uint112 amount_spend;\\r\\n        uint112 amount_receive;\\r\\n        address orionpool_router;\\r\\n        bool is_exact_spend;\\r\\n        bool supportingFee;\\r\\n        bool isInContractTrade;\\r\\n        bool isSentETHEnough;\\r\\n        bool isFromWallet;\\r\\n        address asset_spend;\\r\\n        address[] path;\\r\\n    }\\r\\n\\r\\n    struct InternalSwapData {\\r\\n        address user;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOut;\\r\\n        address asset_spend;\\r\\n        address[] path;\\r\\n        bool isExactIn;\\r\\n        address to;\\r\\n        address curFactory;\\r\\n        FactoryType curFactoryType;\\r\\n        bool supportingFee;\\r\\n    }\\r\\n\\r\\n    enum FactoryType {\\r\\n        UNSUPPORTED,\\r\\n        UNISWAPLIKE,\\r\\n        CURVE\\r\\n    }\\r\\n\\r\\n    function doSwapThroughOrionPool(\\r\\n        address user,\\r\\n        address to,\\r\\n        IPoolFunctionality.SwapData calldata swapData\\r\\n    ) external returns (uint amountOut, uint amountIn);\\r\\n\\r\\n    function getWETH() external view returns (address);\\r\\n\\r\\n    function addLiquidityFromExchange(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function isFactory(address a) external view returns (bool);\\r\\n\\r\\n    function isLending(address pool) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITokenTransferProxy {\\r\\n    function transferFrom(address token, address from, address to, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniV2Strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniV2Strategy {\\r\\n    function swapExactTokensForTokens(\\r\\n        address router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        address router,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        address router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function getAmountsOut(\\r\\n        address router,\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniV3Strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../interfaces/ISwapRouter.sol';\\r\\n\\r\\ninterface IUniV3Strategy {\\r\\n    function exactInputSingle(\\r\\n        address router,\\r\\n        ISwapRouter.ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function exactInput(\\r\\n        address router,\\r\\n        ISwapRouter.ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function exactOutputSingle(\\r\\n        address router,\\r\\n        ISwapRouter.ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function exactOutput(\\r\\n        address router,\\r\\n        ISwapRouter.ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IVault {\\r\\n    enum SwapKind {\\r\\n        GIVEN_IN,\\r\\n        GIVEN_OUT\\r\\n    }\\r\\n\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        address assetIn;\\r\\n        address assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        address[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IVaultStrategy {\\r\\n    function batchSwap(\\r\\n        address vault,\\r\\n        IVault.SwapKind kind,\\r\\n        IVault.BatchSwapStep[] calldata swaps,\\r\\n        address[] calldata assets,\\r\\n        IVault.FundManagement calldata funds,\\r\\n        int256[] calldata limits,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swap(\\r\\n        address vault,\\r\\n        IVault.SingleSwap calldata singleSwap,\\r\\n        IVault.FundManagement calldata funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable\\r\\n\\r\\n/**\\r\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\r\\n * supported.\\r\\n */\\r\\nfunction _require(bool condition, uint256 errorCode) pure {\\r\\n    if (!condition) _revert(errorCode);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\r\\n */\\r\\nfunction _revert(uint256 errorCode) pure {\\r\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\r\\n    // 'BAL#{errorCode}'\\r\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\r\\n    //\\r\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\r\\n    // number (8 to 16 bits) than the individual string characters.\\r\\n    //\\r\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\r\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\r\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\r\\n    assembly {\\r\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\r\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\r\\n        // the '0' character.\\r\\n\\r\\n        let units := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let tenths := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        errorCode := div(errorCode, 10)\\r\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\r\\n\\r\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\r\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\r\\n        // characters to it, each shifted by a multiple of 8.\\r\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\r\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\r\\n        // array).\\r\\n\\r\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\r\\n\\r\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\r\\n        // message will have the following layout:\\r\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\r\\n\\r\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\r\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\r\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\r\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\r\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\r\\n        // The string length is fixed: 7 characters.\\r\\n        mstore(0x24, 7)\\r\\n        // Finally, the string itself is stored.\\r\\n        mstore(0x44, revertReason)\\r\\n\\r\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\r\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\r\\n        revert(0, 100)\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Errors {\\r\\n    // ArbSwap\\r\\n    uint internal constant NOT_WHITELIST = 101;\\r\\n    uint internal constant NO_PROFIT = 102;\\r\\n    uint internal constant NO_AMOUNT = 103;\\r\\n    uint internal constant NOT_WITHDRAWABLE = 104;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\n\\r\\nimport '../interfaces/ITokenTransferProxy.sol';\\r\\n\\r\\ninterface IERC20PermitLegacy {\\r\\n    function permit(\\r\\n        address holder,\\r\\n        address spender,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        bool allowed,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nlibrary Utils {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n\\r\\n    uint256 private constant MAX_UINT = type(uint256).max;\\r\\n\\r\\n    /**\\r\\n   * @param fromToken Address of the source token\\r\\n   * @param fromAmount Amount of source tokens to be swapped\\r\\n   * @param toAmount Minimum destination token amount expected out of this swap\\r\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\r\\n   * @param beneficiary Beneficiary address\\r\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\r\\n   * @param path Route to be taken for this swap to take place\\r\\n\\r\\n   */\\r\\n    struct SellData {\\r\\n        address fromToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        Utils.Path[] path;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct BuyData {\\r\\n        address adapter;\\r\\n        address fromToken;\\r\\n        address toToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        Utils.Route[] route;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct MegaSwapSellData {\\r\\n        address fromToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        Utils.MegaSwapPath[] path;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct SimpleData {\\r\\n        address fromToken;\\r\\n        address toToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address[] callees;\\r\\n        bytes exchangeData;\\r\\n        uint256[] startIndexes;\\r\\n        uint256[] values;\\r\\n        address payable beneficiary;\\r\\n        address payable partner;\\r\\n        uint256 feePercent;\\r\\n        bytes permit;\\r\\n        uint256 deadline;\\r\\n        bytes16 uuid;\\r\\n    }\\r\\n\\r\\n    struct Adapter {\\r\\n        address payable adapter;\\r\\n        uint256 percent;\\r\\n        uint256 networkFee; //NOT USED\\r\\n        Route[] route;\\r\\n    }\\r\\n\\r\\n    struct Route {\\r\\n        uint256 index; //Adapter at which index needs to be used\\r\\n        address targetExchange;\\r\\n        uint256 percent;\\r\\n        bytes payload;\\r\\n        uint256 networkFee; //NOT USED - Network fee is associated with 0xv3 trades\\r\\n    }\\r\\n\\r\\n    struct MegaSwapPath {\\r\\n        uint256 fromAmountPercent;\\r\\n        Path[] path;\\r\\n    }\\r\\n\\r\\n    struct Path {\\r\\n        address to;\\r\\n        uint256 totalNetworkFee; //NOT USED - Network fee is associated with 0xv3 trades\\r\\n        Adapter[] adapters;\\r\\n    }\\r\\n\\r\\n    function ethAddress() internal pure returns (address) {\\r\\n        return ETH_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function maxUint() internal pure returns (uint256) {\\r\\n        return MAX_UINT;\\r\\n    }\\r\\n\\r\\n    function approve(address addressToApprove, address token, uint256 amount) internal {\\r\\n        if (token != ETH_ADDRESS) {\\r\\n            IERC20 _token = IERC20(token);\\r\\n\\r\\n            uint256 allowance = _token.allowance(address(this), addressToApprove);\\r\\n\\r\\n            if (allowance < amount) {\\r\\n                _token.safeApprove(addressToApprove, 0);\\r\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferTokens(address token, address payable destination, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            if (token == ETH_ADDRESS) {\\r\\n                (bool result, ) = destination.call{ value: amount, gas: 10000 }('');\\r\\n                require(result, 'Failed to transfer Ether');\\r\\n            } else {\\r\\n                IERC20(token).safeTransfer(destination, amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenBalance(address token, address account) internal view returns (uint256) {\\r\\n        if (token == ETH_ADDRESS) {\\r\\n            return account.balance;\\r\\n        } else {\\r\\n            return IERC20(token).balanceOf(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function permit(address token, bytes memory permit) internal {\\r\\n        if (permit.length == 32 * 7) {\\r\\n            (bool success, ) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\r\\n            require(success, 'Permit failed');\\r\\n        }\\r\\n\\r\\n        if (permit.length == 32 * 8) {\\r\\n            (bool success, ) = token.call(abi.encodePacked(IERC20PermitLegacy.permit.selector, permit));\\r\\n            require(success, 'Permit failed');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferETH(address payable destination, uint256 amount) internal {\\r\\n        if (amount > 0) {\\r\\n            (bool result, ) = destination.call{ value: amount, gas: 10000 }('');\\r\\n            require(result, 'Transfer ETH failed');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/ArbStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\r\\n\\r\\nimport '../interfaces/IUniV2Strategy.sol';\\r\\nimport '../interfaces/IVaultStrategy.sol';\\r\\nimport '../interfaces/IUniV3Strategy.sol';\\r\\nimport '../interfaces/I1InchStrategy.sol';\\r\\nimport '../interfaces/IFireBirdStrategy.sol';\\r\\nimport '../interfaces/IOdosStrategy.sol';\\r\\nimport '../interfaces/IParaswapStrategy.sol';\\r\\nimport '../interfaces/IOrionStrategy.sol';\\r\\nimport '../interfaces/IVault.sol';\\r\\nimport '../interfaces/IAggregationExecutor.sol';\\r\\nimport '../interfaces/I1InchRouter.sol';\\r\\nimport '../interfaces/IOdosRouter.sol';\\r\\nimport '../interfaces/IOrionRouter.sol';\\r\\nimport '../libraries/Errors.sol';\\r\\nimport '../libraries/Utils.sol';\\r\\nimport '../fakes/orion/libraries/LibPool.sol';\\r\\nimport '../WithdrawableUpgradeable.sol';\\r\\n\\r\\ncontract ArbStrategy is WithdrawableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using AddressUpgradeable for address payable;\\r\\n\\r\\n    bytes internal constant ZERO_BYTES = '';\\r\\n\\r\\n    address public defaultUniV2Strategy;\\r\\n    mapping(address => address) private uniV2Strategies;\\r\\n\\r\\n    address public defaultVaultStrategy;\\r\\n    mapping(address => address) private vaultStrategies;\\r\\n\\r\\n    address public defaultUniV3Strategy;\\r\\n    mapping(address => address) private uniV3Strategies;\\r\\n\\r\\n    address public default1InchStrategy;\\r\\n    mapping(address => address) private oneInchStrategies;\\r\\n\\r\\n    address public defaultFireBirdStrategy;\\r\\n    mapping(address => address) private fireBirdStrategies;\\r\\n\\r\\n    address public defaultOdosStrategy;\\r\\n    mapping(address => address) private odosStrategies;\\r\\n\\r\\n    address public defaultParaStrategy;\\r\\n    mapping(address => address) private paraStrategies;\\r\\n\\r\\n    address public defaultOrionStrategy;\\r\\n    mapping(address => address) private orionStrategies;\\r\\n\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    modifier onlyWhitelist() {\\r\\n        _require(whitelist[_msgSender()], Errors.NOT_WHITELIST);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //solhint-disable-next-line no-empty-blocks\\r\\n    receive() external payable {\\r\\n        // Required to receive funds\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize functions for withdrawable, reentrancy guard, pausable\\r\\n     */\\r\\n    function initialize() public initializer {\\r\\n        __Withdrawable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        __Pausable_init();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for univ2 router\\r\\n     * @param uniV2 Address of univ2 router\\r\\n     * @return strategy Address of strategy for univ2 router\\r\\n     */\\r\\n    function getUniV2Strategy(address uniV2) public view returns (address strategy) {\\r\\n        address _strat = uniV2Strategies[uniV2];\\r\\n        return _strat != address(0) ? _strat : defaultUniV2Strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for vault\\r\\n     * @param vault Address of vault\\r\\n     * @return strategy Address of strategy for vault\\r\\n     */\\r\\n    function getVaultStrategy(address vault) public view returns (address strategy) {\\r\\n        address _strat = vaultStrategies[vault];\\r\\n        return _strat != address(0) ? _strat : defaultVaultStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for univ3 router\\r\\n     * @param uniV3 Address of univ3 router\\r\\n     * @return strategy Address of strategy for univ3 router\\r\\n     */\\r\\n    function getUniV3Strategy(address uniV3) public view returns (address strategy) {\\r\\n        address _strat = uniV3Strategies[uniV3];\\r\\n        return _strat != address(0) ? _strat : defaultUniV3Strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for 1inch router\\r\\n     * @param oneInch Address of 1inch router\\r\\n     * @return strategy Address of strategy for 1inch router\\r\\n     */\\r\\n    function get1InchStrategy(address oneInch) public view returns (address strategy) {\\r\\n        address _strat = oneInchStrategies[oneInch];\\r\\n        return _strat != address(0) ? _strat : default1InchStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for firebird router\\r\\n     * @param fireBird Address of firebird router\\r\\n     * @return strategy Address of strategy for firebird router\\r\\n     */\\r\\n    function getFireBirdStrategy(address fireBird) public view returns (address strategy) {\\r\\n        address _strat = fireBirdStrategies[fireBird];\\r\\n        return _strat != address(0) ? _strat : defaultFireBirdStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for odos router\\r\\n     * @param odos Address of odos router\\r\\n     * @return strategy Address of strategy for odos router\\r\\n     */\\r\\n    function getOdosStrategy(address odos) public view returns (address strategy) {\\r\\n        address _strat = odosStrategies[odos];\\r\\n        return _strat != address(0) ? _strat : defaultOdosStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for paraswap router\\r\\n     * @param para Address of paraswap router\\r\\n     * @return strategy Address of strategy for paraswap router\\r\\n     */\\r\\n    function getParaStrategy(address para) public view returns (address strategy) {\\r\\n        address _strat = paraStrategies[para];\\r\\n        return _strat != address(0) ? _strat : defaultParaStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get strategy address for orion router\\r\\n     * @param orion Address of orion router\\r\\n     * @return strategy Address of strategy for orion router\\r\\n     */\\r\\n    function getOrionStrategy(address orion) public view returns (address strategy) {\\r\\n        address _strat = orionStrategies[orion];\\r\\n        return _strat != address(0) ? _strat : defaultOrionStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for univ2 router\\r\\n     * @param strategy Address of strategy for univ2 router\\r\\n     */\\r\\n    function setDefaultUniV2Strategy(address strategy) external onlyOwner {\\r\\n        defaultUniV2Strategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for vault\\r\\n     * @param strategy Address of strategy for vault\\r\\n     */\\r\\n    function setDefaultVaultStrategy(address strategy) external onlyOwner {\\r\\n        defaultVaultStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for univ3 router\\r\\n     * @param strategy Address of strategy for univ3 router\\r\\n     */\\r\\n    function setDefaultUniV3Strategy(address strategy) external onlyOwner {\\r\\n        defaultUniV3Strategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for 1inch router\\r\\n     * @param strategy Address of strategy for 1inch router\\r\\n     */\\r\\n    function setDefault1InchStrategy(address strategy) external onlyOwner {\\r\\n        default1InchStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for firebird router\\r\\n     * @param strategy Address of strategy for firebird router\\r\\n     */\\r\\n    function setDefaultFireBirdStrategy(address strategy) external onlyOwner {\\r\\n        defaultFireBirdStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for odos router\\r\\n     * @param strategy Address of strategy for odos router\\r\\n     */\\r\\n    function setDefaultOdosStrategy(address strategy) external onlyOwner {\\r\\n        defaultOdosStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for paraswap router\\r\\n     * @param strategy Address of strategy for paraswap router\\r\\n     */\\r\\n    function setDefaultParaStrategy(address strategy) external onlyOwner {\\r\\n        defaultParaStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set default strategy for orion router\\r\\n     * @param strategy Address of strategy for orion router\\r\\n     */\\r\\n    function setDefaultOrionStrategy(address strategy) external onlyOwner {\\r\\n        defaultOrionStrategy = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for univ2 router\\r\\n     * @param uniV2 Address of univ2 router\\r\\n     * @param strategy Address of strategy for univ2 router\\r\\n     */\\r\\n    function setUniV2Strategy(address uniV2, address strategy) external onlyOwner {\\r\\n        uniV2Strategies[uniV2] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for vault\\r\\n     * @param vault Address of vault\\r\\n     * @param strategy Address of strategy for vault\\r\\n     */\\r\\n    function setVaultStrategy(address vault, address strategy) external onlyOwner {\\r\\n        vaultStrategies[vault] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for univ3 router\\r\\n     * @param uniV3 Address of univ3 router\\r\\n     * @param strategy Address of strategy for univ3 router\\r\\n     */\\r\\n    function setUniV3Strategy(address uniV3, address strategy) external onlyOwner {\\r\\n        uniV3Strategies[uniV3] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for 1inch router\\r\\n     * @param oneInch Address of 1inch router\\r\\n     * @param strategy Address of strategy for 1inch router\\r\\n     */\\r\\n    function set1InchStrategy(address oneInch, address strategy) external onlyOwner {\\r\\n        oneInchStrategies[oneInch] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for firebird router\\r\\n     * @param fireBird Address of firebird router\\r\\n     * @param strategy Address of strategy for firebird router\\r\\n     */\\r\\n    function setFireBirdStrategy(address fireBird, address strategy) external onlyOwner {\\r\\n        fireBirdStrategies[fireBird] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for odos router\\r\\n     * @param odos Address of odos router\\r\\n     * @param strategy Address of strategy for odos router\\r\\n     */\\r\\n    function setOdosStrategy(address odos, address strategy) external onlyOwner {\\r\\n        odosStrategies[odos] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for paraswap router\\r\\n     * @param para Address of paraswap router\\r\\n     * @param strategy Address of strategy for paraswap router\\r\\n     */\\r\\n    function setParaStrategy(address para, address strategy) external onlyOwner {\\r\\n        paraStrategies[para] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set strategy for orion router\\r\\n     * @param orion Address of orion router\\r\\n     * @param strategy Address of strategy for orion router\\r\\n     */\\r\\n    function setOrionStrategy(address orion, address strategy) external onlyOwner {\\r\\n        orionStrategies[orion] = strategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the whitelist status of an address.\\r\\n     * @param user Address of user\\r\\n     * @param isWhitelist If true, add the address to the whitelist. If false, remove it from the whitelist.\\r\\n     */\\r\\n    function setWhitelist(address user, bool isWhitelist) external onlyOwner {\\r\\n        whitelist[user] = isWhitelist;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the default strategies\\r\\n     */\\r\\n    function setup(\\r\\n        address uniV2Strategy,\\r\\n        address vaultStrategy,\\r\\n        address uniV3Strategy,\\r\\n        address oneInchStrategy,\\r\\n        address fireBirdStrategy,\\r\\n        address odosStrategy,\\r\\n        address paraStrategy,\\r\\n        address orionStrategy\\r\\n    ) external onlyOwner {\\r\\n        defaultUniV2Strategy = uniV2Strategy;\\r\\n        defaultVaultStrategy = vaultStrategy;\\r\\n        defaultUniV3Strategy = uniV3Strategy;\\r\\n        default1InchStrategy = oneInchStrategy;\\r\\n        defaultFireBirdStrategy = fireBirdStrategy;\\r\\n        defaultOdosStrategy = odosStrategy;\\r\\n        defaultParaStrategy = paraStrategy;\\r\\n        defaultOrionStrategy = orionStrategy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause the contract\\r\\n     */\\r\\n    function pause() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resume the contract\\r\\n     */\\r\\n    function unpause() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get balance of this contract.\\r\\n     */\\r\\n    function getBalance() internal view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Ensure we got a profit\\r\\n     */\\r\\n    function _ensureProfit(uint256 amountIn, IERC20Upgradeable tokenOut) internal returns (uint256 actualAmountOut) {\\r\\n        if (tokenOut == ZERO_ADDRESS) {\\r\\n            actualAmountOut = getBalance();\\r\\n            payable(_msgSender()).sendValue(actualAmountOut);\\r\\n        } else {\\r\\n            actualAmountOut = tokenOut.balanceOf(address(this));\\r\\n            tokenOut.transfer(_msgSender(), actualAmountOut);\\r\\n        }\\r\\n        _require(actualAmountOut > amountIn, Errors.NO_PROFIT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer profit to treasury\\r\\n     */\\r\\n    function _transferProfit(uint256 amountIn, IERC20Upgradeable tokenOut) internal returns (uint256 profit) {\\r\\n        uint256 amountOut;\\r\\n        if (tokenOut == ZERO_ADDRESS) amountOut = getBalance();\\r\\n        else amountOut = tokenOut.balanceOf(address(this));\\r\\n\\r\\n        _require(amountOut > amountIn, Errors.NO_PROFIT);\\r\\n\\r\\n        profit = amountOut - amountIn;\\r\\n        if (tokenOut == ZERO_ADDRESS) payable(treasury).sendValue(profit);\\r\\n        else tokenOut.safeTransfer(treasury, profit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get limits for vault\\r\\n     */\\r\\n    function getLimitsForVault(uint length) internal pure returns (int256[] memory) {\\r\\n        int256[] memory limits = new int256[](length);\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            limits[i] = type(int256).max;\\r\\n        }\\r\\n        return limits;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/WithdrawableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\r\\n\\r\\nimport './libraries/Errors.sol';\\r\\n\\r\\nabstract contract WithdrawableUpgradeable is OwnableUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using AddressUpgradeable for address payable;\\r\\n\\r\\n    // constants\\r\\n    IERC20Upgradeable internal constant ZERO_ADDRESS = IERC20Upgradeable(address(0));\\r\\n\\r\\n    // state variables\\r\\n    address public treasury; // Address to transfer profit\\r\\n\\r\\n    modifier withdrawable(address _to) {\\r\\n        _require(_to == treasury || _to == owner(), Errors.NOT_WITHDRAWABLE);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function __Withdrawable_init() internal initializer {\\r\\n        __Ownable_init_unchained();\\r\\n        __Withdrawable_init_unchained();\\r\\n    }\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    function __Withdrawable_init_unchained() internal initializer {}\\r\\n\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function withdraw(IERC20Upgradeable _token, address _to, uint _amount) external onlyOwner withdrawable(_to) {\\r\\n        if (_token == ZERO_ADDRESS) payable(_to).sendValue(_amount);\\r\\n        else _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAll(IERC20Upgradeable _token, address _to) external onlyOwner withdrawable(_to) {\\r\\n        if (_token == ZERO_ADDRESS) payable(_to).sendValue(address(this).balance);\\r\\n        else _token.safeTransfer(_to, _token.balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneInch\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct I1InchRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWith1InchAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneInch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWith1InchUniAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireBird\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IFireBirdRouter.SwapDescription\",\"name\":\"descFireBird\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dataFireBird\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"oneInch\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct I1InchRouter.SwapDescription\",\"name\":\"descInch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dataInch\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithFireBirdAnd1Inch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireBird\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IFireBirdRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithFireBirdAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"odos\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputReceiver\",\"type\":\"address\"}],\"internalType\":\"struct IOdosRouter.swapTokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithOdosAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orion\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountSpend\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountReceive\",\"type\":\"uint112\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isExactSpend\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithOrionAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"para\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"}],\"internalType\":\"struct Utils.SimpleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selector\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithParaAndVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"arbFromTokensWithVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"default1InchStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFireBirdStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOdosStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOrionStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultParaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUniV2Strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultUniV3Strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultVaultStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneInch\",\"type\":\"address\"}],\"name\":\"get1InchStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireBird\",\"type\":\"address\"}],\"name\":\"getFireBirdStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"odos\",\"type\":\"address\"}],\"name\":\"getOdosStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orion\",\"type\":\"address\"}],\"name\":\"getOrionStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"para\",\"type\":\"address\"}],\"name\":\"getParaStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV2\",\"type\":\"address\"}],\"name\":\"getUniV2Strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3\",\"type\":\"address\"}],\"name\":\"getUniV3Strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getVaultStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneInch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"set1InchStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefault1InchStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultFireBirdStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultOdosStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultOrionStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultParaStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultUniV2Strategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultUniV3Strategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setDefaultVaultStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fireBird\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setFireBirdStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"odos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setOdosStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setOrionStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"para\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setParaStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setUniV2Strategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setUniV3Strategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setVaultStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV2Strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniV3Strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oneInchStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fireBirdStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"odosStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paraStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orionStrategy\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ArbFromTokens", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}