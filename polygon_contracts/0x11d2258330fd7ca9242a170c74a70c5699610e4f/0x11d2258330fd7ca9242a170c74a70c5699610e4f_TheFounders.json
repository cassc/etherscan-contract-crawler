{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// Founder Token mainnet\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n\\n// pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\ncontract TheFounders is Context, IBEP20 {\\n    using SafeMath for uint256;\\n    mapping (address => uint256) public _balances;\\n     mapping (address => uint256) public selling;\\n     mapping (address => uint256) public buying;\\n     mapping (address=>bool) public  isBlacklisted;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping (address => bool) public _isExcluded;\\n    // transfer conditions mapping\\n    \\n    mapping(address => uint256) private _firstTransfer;\\n    mapping(address => uint256) private _totTransfers;\\n\\n    //pancake/uniswap/sunswap selling condition \\n    mapping(address => uint256) private _firstSelltime;\\n    mapping(address => uint256) private _totalAmountSell;\\n\\n    // pancake/uniswap/sunswap buying condition\\n    mapping(address => uint256) private _firstBuytime;\\n    mapping(address => uint256) private _totalAmountBuy;\\n\\n    // multisendtoken receiver condition\\n    mapping(address => uint256) private _firstReceivetime;\\n    mapping(address => uint256) private _totalAmountreceive;\\n\\n\\n\\n    IUniswapV2Router02 public  uniswapV2Router;\\n    address public  uniswapV2Pair;\\n    address public NFTwallet;\\n    address public Liquiditywallet;\\n    address public deadAddress=0x0000000000000000000000000000000000000000;\\n\\n\\n\\n    mapping (address => bool) public automatedMarketMakerPairs;\\n     uint256 public maxwalletamount=500000000e18;\\n    uint256 public maxTxAmount=500000000e18;\\n    uint256 public buyBurnFee = 1e18;   //1 %\\n    uint256 public buyliquidityFee=2e18;  //2 %\\n    uint256 public buyNFTFee = 5e18;    //5 %\\n    uint256 public sellBurnFee = 1e18; //1 %\\n    uint256 public sellliquidityFee=2e18;  //2 %\\n    uint256 public sellNFTFee = 5e18;  //5 %\\n\\n\\n  \\n    bool public tradingActive;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n  \\n       uint256 public maxsellamount=500000000e18;\\n       uint256 public maxbuyamount=500000000e18;\\n       uint256 public maxTrPerDay = 500000000e18;\\n       address public owner;\\n       uint256 public locktime= 1 days;\\n      \\n     \\n\\n\\n    constructor (address _NFTWallet,address _Liquiditywallet)  {\\n        _name = 'Founders';\\n        _symbol = 'FNDR';\\n        _totalSupply = 500000000e18;\\n        _decimals = 18;\\n      \\n        NFTwallet=_NFTWallet;\\n        Liquiditywallet=_Liquiditywallet;\\n        tradingActive=false;\\n        \\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff); //quickswap\\n         // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\\n        owner=msg.sender;\\n        _balances[owner] = _totalSupply;\\n        _isExcluded[msg.sender]=true;\\n        _isExcluded[address(this)]=true;\\n        _isExcluded[uniswapV2Pair]=true;\\n        _paused = false;\\n        emit Transfer(address(0), owner, _totalSupply);\\n        \\n    }\\n\\n     modifier onlyOwner() {\\n        require(msg.sender==owner, \\\"Only Call by Owner\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n \\n\\n      \\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    function pauseContract() public onlyOwner{\\n        _pause();\\n\\n    }\\n    function unpauseContract() public onlyOwner{\\n        _unpause();\\n\\n    }\\n\\n//         \\n    // \\n\\n\\n\\n\\n\\n    \\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n    function transfer(address recipient, uint256 amount) public virtual whenNotPaused override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual whenNotPaused returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal whenNotPaused virtual {\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\n        require(isBlacklisted[sender]==false,\\\"you are blacklisted\\\");\\n        require(isBlacklisted[recipient]==false,\\\"recipient is blacklisted\\\");\\n        _beforeTokenTransfer(sender, recipient, amount);  \\n  \\n         if(sender==owner && recipient == uniswapV2Pair  ){\\n        _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\t\\n         selling[sender]=selling[sender].add(amount);\\n\\n        }    \\n\\n          else if(sender==owner){\\n            _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n        }\\n////////////////////////////////////////////////////////////////////////        \\n                    // Selling limits\\n// ////////////////////////////////////////////////////////////////////\\n        else if (recipient == uniswapV2Pair || automatedMarketMakerPairs[recipient] ){\\n        require(tradingActive==true,\\\"Trading is off!\\\");  \\n    \\n\\n        if(_isExcluded[sender]==false ){\\n\\n        require(amount<=maxTxAmount,\\\"Max Transaction per amount reached\\\");\\n        if(block.timestamp < _firstSelltime[sender].add(locktime)){\\t\\t\\t \\n\\t\\t\\t\\n\\t\\t\\t\\trequire(_totalAmountSell[sender]+amount <= maxsellamount, \\\"You can't sell more than maxsellamount 1\\\");\\n\\t\\t\\t\\t_totalAmountSell[sender]= _totalAmountSell[sender].add(amount);\\n                 _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: sell amount exceeds balance 1\\\");\\n                _balances[deadAddress] = _balances[deadAddress].add(calculatesellBurnFee(amount));\\n                _balances[Liquiditywallet] = _balances[Liquiditywallet].add(calculatesellliquidityFee(amount));\\n                _balances[NFTwallet]=_balances[NFTwallet].add(calculatesellNFTFee(amount));\\n                 uint256 remaining=amount.sub((calculatesellliquidityFee(amount).add(calculatesellNFTFee(amount))).add(calculatesellBurnFee(amount)));\\n                _balances[recipient] = _balances[recipient].add(remaining);\\n\\t\\t\\t}  \\n\\n        else if(block.timestamp>_firstSelltime[sender].add(locktime)){\\n               _totalAmountSell[sender]=0;\\n                 require(_totalAmountSell[sender].add(amount) <= maxsellamount, \\\"You can't sell more than maxsellamount 2\\\");\\n                _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: sell amount exceeds balance 2\\\");\\n                _balances[deadAddress] = _balances[deadAddress].add(calculatesellBurnFee(amount));\\n                _balances[Liquiditywallet] = _balances[Liquiditywallet].add(calculatesellliquidityFee(amount));\\n                _balances[NFTwallet]=_balances[NFTwallet].add(calculatesellNFTFee(amount));\\n                 uint256 remaining=amount.sub((calculatesellliquidityFee(amount).add(calculatesellNFTFee(amount))).add(calculatesellBurnFee(amount)));\\n                _balances[recipient] = _balances[recipient].add(remaining);\\n                _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\\n                _firstSelltime[sender]=block.timestamp;\\n        }\\n        }\\n        else{\\n            _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: selling amount exceeds balance 3\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n            _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\\n        }\\n\\n\\t\\t\\t}\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \\n                              // Buying Condition\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n        else if(sender== uniswapV2Pair || automatedMarketMakerPairs[recipient]) {\\n        require(tradingActive==true,\\\"Trading is off!\\\");    \\n\\n        if(_isExcluded[recipient]==false ){\\n        require(amount<=maxTxAmount,\\\"Max Transaction per amount reached\\\");\\n\\n        if(block.timestamp < _firstBuytime[recipient].add(locktime)){\\t\\t\\t \\n\\t\\t\\t\\n\\t\\t\\t\\trequire(_totalAmountBuy[recipient]+amount <= maxbuyamount, \\\"You can't sell more than maxbuyamount 1\\\");\\n\\t\\t\\t\\t_totalAmountBuy[recipient]= _totalAmountBuy[recipient].add(amount);\\n                 _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: buy amount exceeds balance 1\\\");\\n                 _balances[deadAddress] = _balances[deadAddress].add(calculatebuyBurnFee(amount));\\n                 _balances[Liquiditywallet] = _balances[Liquiditywallet].add(calculatebuyliquidityFee(amount));\\n                _balances[NFTwallet]=_balances[NFTwallet].add(calculatebuyNFTFee(amount));\\n                 uint256 remaining=amount.sub((calculatebuyliquidityFee(amount).add(calculatebuyNFTFee(amount))).add(calculatebuyBurnFee(amount)));\\n                _balances[recipient] = _balances[recipient].add(remaining);\\n\\t\\t\\t}  \\n\\n        else if(block.timestamp>_firstBuytime[recipient].add(locktime)){\\n               _totalAmountBuy[recipient]=0;\\n                 require(_totalAmountBuy[recipient].add(amount) <= maxbuyamount, \\\"You can't sell more than maxbuyamount 2\\\");\\n                  _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: buy amount exceeds balance 2\\\");\\n                 _balances[deadAddress] = _balances[deadAddress].add(calculatebuyBurnFee(amount));\\n                _balances[Liquiditywallet] = _balances[Liquiditywallet].add(calculatebuyliquidityFee(amount));\\n                _balances[NFTwallet]=_balances[NFTwallet].add(calculatebuyNFTFee(amount));\\n                 uint256 remaining=amount.sub((calculatebuyliquidityFee(amount).add(calculatebuyNFTFee(amount))).add(calculatebuyBurnFee(amount)));\\n                _balances[recipient] = _balances[recipient].add(remaining);\\n\\n                _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\\n                _firstBuytime[recipient]=block.timestamp;\\n        }\\n        }\\n        else{\\n            _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: buy amount exceeds balance 3\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n            _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\\n        }\\n            \\n\\n        }\\n\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // exclude receiver\\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////// \\nelse if(_isExcluded[recipient]==true )\\n       {\\n           _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: simple transfer amount exceeds balance 3\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n       }\\n\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                // simple transfer\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n       else if(_isExcluded[sender]==false ){\\n        require(amount<=maxTxAmount,\\\"Max Transaction per amount reached\\\");\\n       \\n\\n       if(block.timestamp < _firstTransfer[sender].add(locktime)){\\t\\t\\t \\n\\t\\t\\t\\n\\t\\t\\t\\trequire(_totTransfers[sender]+amount <= maxTrPerDay, \\\"You can't transfer more than maxTrPerDay 1\\\");\\n\\t\\t\\t\\t_totTransfers[sender]= _totTransfers[sender].add(amount);\\n                 _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance 1\\\");\\n                _balances[recipient] = _balances[recipient].add(amount);\\n\\t\\t\\t}  \\n\\n        else if(block.timestamp>_firstTransfer[sender].add(locktime)){\\n               _totTransfers[sender]=0;\\n                 require(_totTransfers[sender].add(amount) <= maxTrPerDay, \\\"You can't transfer more than maxTrPerDay 2\\\");\\n                  _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance 2\\\");\\n                _balances[recipient] = _balances[recipient].add(amount);\\n                _totTransfers[sender] =_totTransfers[sender].add(amount);\\n                _firstTransfer[sender]=block.timestamp;\\n        }\\n         else{\\n            _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: buy amount exceeds balance 2\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n        }\\n\\n             \\n       }\\n// ///////////////////////////////////////////////////////////////////////////////////\\n                            // tranfer for excluded accounts\\n//////////////////////////////////////////////////////////////////////////////////////\\n       else if(_isExcluded[sender]==true )\\n       {\\n           _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: simple transfer amount exceeds balance 3\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n       }\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address _owner, address spender, uint256 amount) internal whenNotPaused virtual {\\n        require(_owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n      function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 value) internal whenNotPaused {\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    \\n\\n     \\n    \\n    \\n    \\n    \\n  \\n\\n    \\n\\n    \\n\\n    function calculatebuyliquidityFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(buyliquidityFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n     function calculatesellliquidityFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(sellliquidityFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n     function calculatesellBurnFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(sellBurnFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n    function calculatebuyBurnFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(buyBurnFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n        function calculatesellNFTFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(sellNFTFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n    function calculatebuyNFTFee(uint256 _amount) public view returns (uint256) {\\n        return (_amount.mul(buyNFTFee).div(\\n            10**2\\n        )).div(1e18);\\n    }\\n\\n\\n\\n\\n    function setNFTfeepercent(uint256  _sellNFTFee,uint256  _buyNFTFee) external onlyOwner{\\n     \\n        sellNFTFee=_sellNFTFee;\\n        buyNFTFee=_buyNFTFee;\\n    }\\n\\n      function setBurnFeepercent(uint256  _sellBurnFee,uint256  _buyBurnFee) external onlyOwner{\\n     \\n        sellBurnFee=_sellBurnFee;\\n        buyBurnFee=_buyBurnFee;\\n    }\\n\\n     function setLiquidityFeePercent(uint256 _buyliquidityFee,uint256 _sellliquidityFee) external onlyOwner() {\\n       \\n        buyliquidityFee=_buyliquidityFee;\\n        sellliquidityFee=_sellliquidityFee;\\n\\n    }\\n\\n       function setAutomatedMarketMakerPairs(address newPair) external onlyOwner() {\\n       automatedMarketMakerPairs[newPair] = true;\\n       \\n       }\\n\\n    function setmaxwalletamount(uint256 _maxwalletamount) external onlyOwner{\\n        maxwalletamount=_maxwalletamount;\\n    }\\n    function setmaxTxAmount(uint256 _maxTxAmount) external onlyOwner{\\n        maxTxAmount=_maxTxAmount;\\n    }\\n\\n    function setNFTwallet (address _newNFTwallet) external onlyOwner{\\n        NFTwallet=_newNFTwallet;\\n    }\\n\\n      function setLiquiditywallet (address _newLiquiditywallet) external onlyOwner{\\n        Liquiditywallet=_newLiquiditywallet;\\n    }\\n\\n      function getTokens (uint256 _amount) onlyOwner public \\n    {\\n        _transfer(address(this),msg.sender,_amount);\\n    }\\n    function ExcludefromLimits(address _addr,bool _state) public onlyOwner whenNotPaused{\\n        _isExcluded[_addr]=_state;\\n    }\\n\\n    function setTrading(bool _state) external onlyOwner{\\n        tradingActive=_state;\\n    }\\n    function setbuylimit(uint256 _amount) public onlyOwner whenNotPaused{\\n    maxbuyamount=_amount*1e18;\\n    }\\n\\n      function setmaxsell(uint256 _amount) public whenNotPaused onlyOwner{\\n\\n        maxsellamount=_amount*1e18;\\n\\n    }\\n\\n    function setTransferperdaylimti(uint256 _amount) public onlyOwner whenNotPaused{\\n        maxTrPerDay=_amount*1e18;\\n    }\\n  \\n    function addtoblacklisted(address _addr) public onlyOwner whenNotPaused{\\n        _burn(_addr,balanceOf(_addr));\\n        isBlacklisted[_addr]=true;\\n    }\\n\\n     function removeFromblacklisted(address _addr) public onlyOwner whenNotPaused{\\n        isBlacklisted[_addr]=false;\\n    }\\n \\n    \\n    function withDraw (uint256 _amount) onlyOwner public \\n    {\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function addpairaddress(address _pair) public onlyOwner whenNotPaused{\\n        uniswapV2Pair=_pair;\\n    }\\n        \\n    function transferownership(address _newonwer) public whenNotPaused onlyOwner{\\n        owner=_newonwer;\\n    }\\n    \\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n      receive() external payable{\\n\\n} \\n}\\n\\n\\n// Liquiidty fee: 0x0f8DE3b69051d94cAF15c81c423EfB89ECa9a469\\n// NFT FEE: 0xF418EaaF5E913681461fb648aD673Acd98AEd95A\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Liquiditywallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"ExcludefromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Liquiditywallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addpairaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addtoblacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatebuyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatebuyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatebuyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatesellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatesellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatesellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuyamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxsellamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxwalletamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromblacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBurnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeepercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellliquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLiquiditywallet\",\"type\":\"address\"}],\"name\":\"setLiquiditywallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellNFTFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNFTFee\",\"type\":\"uint256\"}],\"name\":\"setNFTfeepercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNFTwallet\",\"type\":\"address\"}],\"name\":\"setNFTwallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferperdaylimti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setbuylimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxsell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxwalletamount\",\"type\":\"uint256\"}],\"name\":\"setmaxwalletamount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newonwer\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TheFounders", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f418eaaf5e913681461fb648ad673acd98aed95a0000000000000000000000000f8de3b69051d94caf15c81c423efb89eca9a469", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}