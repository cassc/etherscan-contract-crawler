{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DistributorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Rewards Distributor\\npragma solidity ^0.8.0;\\n\\nimport \\\"ISheqelToken.sol\\\"; \\nimport \\\"IERC20.sol\\\";\\nimport \\\"IReserve.sol\\\";\\n\\ncontract Distributor {\\n    event Log(string message, uint data);\\n\\n    uint256 public lastDistribution;\\n    uint256 public currentShqToUBR;\\n    uint256 public currentShqToRewards;\\n    uint256 public currentUSDCToUBR;\\n    uint256 public currentUSDCToRewards;\\n    bool public shqSet = false;\\n    ISheqelToken public sheqelToken;\\n    IERC20 public USDC;\\n    address public teamAddress;\\n    IReserve public reserveContract;\\n\\n    constructor(address _usdcAddress, address _reserveAddress) {\\n        teamAddress = msg.sender;\\n        USDC = IERC20(_usdcAddress);\\n        reserveContract = IReserve(_reserveAddress);\\n    }\\n\\n    modifier onlyTeam() {\\n        require(msg.sender == teamAddress, \\\"Caller must be team address\\\");\\n        _;\\n    }\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(sheqelToken), \\\"Caller must be Sheqel Token\\\");\\n        _;\\n    }\\n\\n    modifier onlyReserve() {\\n        require(msg.sender == address(reserveContract), \\\"Caller must be Reserve\\\");\\n        _;\\n    }\\n\\n    function setShq(address _addr) external onlyTeam() {\\n        require(shqSet == false, \\\"SHQ Already set\\\");\\n        sheqelToken = ISheqelToken(_addr);\\n        shqSet = true;\\n    }\\n\\n    function addToCurrentShqToUBR(uint256 _amount) external onlyToken() {\\n        currentShqToUBR += _amount;\\n    }\\n\\n    function addToCurrentShqToRewards(uint256 _amount) external onlyToken() {\\n        currentShqToRewards += _amount;\\n    }\\n\\n    function addToCurrentUsdcToRewards(uint256 _amount) external onlyReserve() {\\n        currentUSDCToRewards += _amount;\\n    }\\n\\n    function addToCurrentUsdcToUBR(uint256 _amount) external onlyReserve() {\\n        currentUSDCToUBR += _amount;\\n    }\\n\\n\\n\\n    function processAllRewards(address[] calldata _addresses , uint256[] calldata _balances, address[] calldata _ubrAddresses, uint256 _totalBalance) onlyTeam() external{\\n        require(block.timestamp >= lastDistribution + 1 days, \\\"Cannot distribute two times in a day\\\");\\n        require(_addresses.length == _balances.length, \\\"Addresses and balances must be the same length\\\");\\n\\n        // Convert all SHQ to USDC\\n        if(currentShqToRewards > 0){\\n            currentUSDCToRewards += swapSHQToUSDC(currentShqToRewards);\\n            currentShqToRewards = 0;\\n        }\\n        if(currentShqToUBR > 0){\\n            currentUSDCToUBR += swapSHQToUSDC(currentShqToUBR);\\n            currentShqToUBR = 0;\\n        }   \\n\\n        require(currentUSDCToRewards > 0, \\\"No USDC to distribute prec\\\");\\n        require(currentUSDCToUBR > 0, \\\"No USDC to distribute UBR\\\");\\n\\n        // Iterate through all balances and add it to checkTotalBalance\\n        uint256 checkTotalBalance = 0;\\n        for (uint256 i = 0; i < _balances.length; i++) {\\n            checkTotalBalance += _balances[i];\\n        }\\n\\n        // Check if the total balance is the same as the total balance !\\n        require(checkTotalBalance == _totalBalance, \\\"Total balance does not match\\\");\\n\\n        // Iterate through all addresses\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            // Get the address\\n            address holder = _addresses[i];\\n            // Get the balance\\n            uint256 balance = _balances[i];\\n\\n            // Calculate the rewards\\n            uint256 percentageReward = (balance * (currentUSDCToRewards-100)) / _totalBalance;\\n            // Send the rewards\\n            USDC.transfer(holder, percentageReward);\\n        }\\n        currentUSDCToRewards = 0;\\n\\n        currentUSDCToUBR = USDC.balanceOf(address(this));\\n\\n        // Compute the UBR\\n        uint256 ubrReward = (currentUSDCToUBR / _ubrAddresses.length) - 100;\\n        // Iterate through all UBR addresses\\n        for (uint256 i = 0; i < _ubrAddresses.length; i++) {\\n            // Get the address\\n            address holder = _ubrAddresses[i];\\n\\n            // Send the UBR\\n            USDC.transfer(holder, ubrReward);\\n        }\\n        currentUSDCToUBR = 0;\\n\\n        // Update last distribution\\n        lastDistribution = block.timestamp;\\n\\n        // Send rest to the reserve \\n        USDC.transfer(address(reserveContract), USDC.balanceOf(address(this)));\\n        sheqelToken.transfer(address(reserveContract), sheqelToken.balanceOf(address(this)));\\n    }\\n\\n    function swapSHQToUSDC(uint256 amount) internal returns(uint256){\\n        uint256 balancePreswapUSDC = USDC.balanceOf(address(this));\\n        sheqelToken.approve(address(reserveContract), amount);\\n        reserveContract.sellShq(address(this), amount);\\n\\n        return USDC.balanceOf(address(this)) - balancePreswapUSDC;\\n    }\\n}\"\r\n    },\r\n    \"ISheqelToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ISheqelToken {\\n    function getDistributor() external returns (address);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function MDOAddress() external returns (address);\\n    function liquidityManagerAddress() external returns (address);\\n    function reserveAddress() external view returns (address);\\n\\n\\n\\n}\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    \\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IReserve.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n    function sellShq(address _beneficiary, uint256 _shqAmount) external;\\n    function buyShq(address _beneficiary, uint256 _shqAmount) external;\\n    function buyShqWithUsdc(address _beneficiary, uint256 _usdcAmount) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"DistributorV2.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToCurrentShqToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToCurrentShqToUBR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToCurrentUsdcToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToCurrentUsdcToUBR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentShqToRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentShqToUBR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUSDCToRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUSDCToUBR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_ubrAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalBalance\",\"type\":\"uint256\"}],\"name\":\"processAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveContract\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setShq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheqelToken\",\"outputs\":[{\"internalType\":\"contract ISheqelToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shqSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Distributor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000f6fd220b436fb4834bcccd7b6263e06238a12d67", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}