{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/XFUNBetLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IXFUNBetData.sol\\\";\\r\\nimport \\\"./interfaces/IXFUNEscrow.sol\\\";\\r\\nimport \\\"./interfaces/IXFUNBetLiabilityCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IXFUNBetRevShares.sol\\\";\\r\\n\\r\\n\\r\\ncontract XFUNBetLogic is Ownable {\\r\\n\\r\\n   \\tusing SafeMath for uint256;\\r\\n    using SafeMath for uint64;\\r\\n\\r\\n  // Constructor function\\r\\n    constructor() {\\r\\n\\t}\\r\\n\\r\\n\\taddress _trustedForwarder;\\r\\n\\r\\n    function isTrustedForwarder(address forwarder) view public returns(bool) {\\r\\n        return forwarder == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal override view returns (address signer) {\\r\\n        signer = msg.sender;\\r\\n        if (msg.data.length>=20 && isTrustedForwarder(signer)) {\\r\\n            assembly {\\r\\n                signer := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        }    \\r\\n    }\\r\\n\\r\\n\\tfunction setTrustedForwarder(address _forwarder) external onlyOwner() {\\t\\t\\r\\n\\t\\t_trustedForwarder = _forwarder;\\r\\n\\t}\\r\\n\\r\\n   \\tIXFUNBetData public dataContract; \\r\\n    IXFUNEscrow public escrowContract;\\r\\n    IXFUNBetLiabilityCalculator public liabilityContract;\\r\\n\\tIXFUNBetRevShares public revSharesContract;\\r\\n\\r\\n\\t// Events\\r\\n    event BetPlaced(uint256 _betId);\\r\\n    event BetConfirmed(uint256 _betId);\\r\\n    event BetResulted(uint256 _betId, uint256 _bettorReward);\\r\\n    event BetRejected(uint256 _betId);\\r\\n    event BetCanceled(uint256 _betId);\\r\\n\\tevent FeeUpdated(uint8 _feeIndex, uint256 _feeAmount);\\r\\n    event AccessGranted(address _addr, uint256 _timestamp);\\r\\n    event AccessRemoved(address _addr, uint256 _timestamp);\\r\\n\\t\\r\\n\\tfunction setContractAddresses(\\r\\n\\r\\n\\t\\taddress \\t\\t\\t\\t_dataContract, \\r\\n\\t\\taddress \\t\\t\\t\\t_escrowContract, \\r\\n\\t\\taddress \\t\\t\\t\\t_liabilityContract, \\r\\n\\t\\taddress \\t\\t\\t\\t_revSharesContract \\r\\n\\t\\r\\n\\t) external onlyOwner {\\r\\n\\r\\n\\t\\tdataContract \\t\\t= IXFUNBetData(_dataContract);\\r\\n        escrowContract \\t\\t= IXFUNEscrow(_escrowContract);\\r\\n        liabilityContract \\t= IXFUNBetLiabilityCalculator(_liabilityContract);\\r\\n\\t\\trevSharesContract \\t= IXFUNBetRevShares(_revSharesContract);\\r\\n   }\\r\\n  \\r\\n\\t// Fees\\r\\n\\tuint256[10] fees;\\r\\n\\t\\r\\n \\t// Constants for fees array\\r\\n\\tuint8 constant LIABILITY_CALC_REQUIRES_WITHDRAW_FEE_i\\t\\t= 0;   \\r\\n\\tuint8 constant REJECT_BY_LAYER_RETURN_FEE_i\\t\\t\\t\\t\\t= 1;   \\r\\n\\tuint8 constant BETTOR_WIN_FEE_i \\t\\t\\t\\t\\t\\t\\t= 2;   \\r\\n\\tuint8 constant BETTOR_REFUND_FEE_i \\t\\t\\t\\t\\t\\t\\t= 3;   \\r\\n\\tuint8 constant BETTOR_LOST_PUSH_FEE_i \\t\\t\\t\\t\\t\\t= 4;   \\r\\n\\tuint8 constant BETTOR_WIN_PUSH_FEE_i \\t\\t\\t\\t\\t\\t= 5;   \\r\\n\\tuint8 constant LAYER_ESCROW_RETURN_FEE_i \\t\\t\\t\\t\\t= 6;   \\r\\n\\tuint8 constant CANCEL_BET_BY_BETTOR_RETURN_FEE_i \\t\\t\\t= 7;   \\r\\n\\t\\r\\n\\t// Constants for BetData structure f64 array\\r\\n\\tuint8 constant LAY_MARKET_ID_i \\t\\t\\t\\t\\t\\t= 0;\\r\\n\\tuint8 constant SELECTION_ID_i \\t\\t\\t\\t\\t\\t= 1;\\r\\n\\tuint8 constant ODDS_i \\t\\t\\t\\t\\t\\t\\t\\t= 2;\\r\\n\\tuint8 constant DATETIME_CONFIRMED_i \\t\\t\\t\\t= 3;\\r\\n\\tuint8 constant DATETIME_PLACED_i\\t\\t\\t\\t\\t= 4;\\r\\n\\tuint8 constant DATETIME_RESULTED_i \\t\\t\\t\\t\\t= 5;\\r\\n\\t\\r\\n\\t// For the placeBet _P3 array\\r\\n\\tuint8 constant p3_LAYER_ADDRESS_i \\t\\t\\t\\t= 0;\\r\\n\\tuint8 constant p3_RESULTOR_ADDRESS_i \\t\\t\\t= 1;\\r\\n\\r\\n\\t// For the Bet Data fa array\\r\\n\\tuint8 constant LAYER_ADDRESS_i \\t\\t\\t\\t= 0;\\r\\n\\tuint8 constant BETTOR_ADDRESS_i \\t\\t\\t= 1;\\r\\n\\tuint8 constant RESULTOR_ADDRESS_i \\t\\t\\t= 2;\\r\\n\\t\\r\\n\\t// For Bet Data f8\\r\\n\\tuint8 constant BET_STATUS_i \\t\\t\\t\\t= 0;\\r\\n\\tuint8 constant LIABILITY_CALC_i \\t\\t\\t= 1;\\r\\n\\tuint8 constant WIN_OVERRIDE_REASON_CODE_i \\t= 2;\\r\\n\\r\\n\\t// For the _winOverride parameter array \\r\\n\\tuint8 constant WIN_OVERRIDE_REDUCE_ODDS_i \\t= 0;\\r\\n\\tuint8 constant WIN_OVERRIDE_REDUCE_STAKE_i \\t= 1;\\r\\n\\r\\n\\t// For Helper vars256 array\\r\\n\\tuint8 constant STAKE_AMOUNT_REMAINING\\t\\t= 0;\\t\\t\\t\\r\\n\\tuint8 constant AFFILIATE_REVENUE\\t\\t\\t= 1;\\t\\t\\t\\r\\n\\tuint8 constant NEW_STAKE_AMOUNT \\t\\t\\t= 2;\\t\\t\\t\\r\\n\\tuint8 constant NEW_ODDS_AMOUNT \\t\\t\\t\\t= 3;\\t\\t\\t\\r\\n\\tuint8 constant WIN_AMOUNT \\t\\t\\t\\t\\t= 4;\\r\\n\\tuint8 constant PUSH_AMOUNT \\t\\t\\t\\t\\t= 5;\\r\\n\\tuint8 constant PUSH_AMOUNT_REMAINING \\t\\t= 6;\\r\\n\\tuint8 constant GSP_REVENUE\\t\\t\\t \\t\\t= 7;\\r\\n\\tuint8 constant BURN_AMOUNT\\t\\t\\t \\t\\t= 7;\\r\\n\\r\\n\\t// PLACE A NEW BET\\r\\n    function placeBet(\\r\\n        uint256 \\t\\t\\t\\t\\t\\t_stakeAmount,\\t\\t// Stake Amount\\r\\n\\t\\tuint64[3]\\t\\t\\tcalldata\\t_p2,\\t\\t\\t\\t// LAYMARKET_ID [0], selectionId [1], odds [2]\\r\\n        address payable[2]\\tcalldata\\t_p3,\\t\\t\\t\\t// layerAddress, _resultorAddress\\r\\n        uint8 \\t\\t\\t\\t\\t\\t\\t_liabilityCalc\\t\\t// Liabiltiy Calc\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t) external {\\r\\n\\r\\n\\t\\t// Added this next line - not sure why it wasnt there before\\r\\n\\t\\trequire(_stakeAmount > 0, \\\"Stake Amount must be greater than 0\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire (!dataContract.isLockedLayMarketId(_p2[LAY_MARKET_ID_i]), \\\"Market is LOCKED!\\\"); // Market must be open and resulting not started\\r\\n\\r\\n        uint256 betId = dataContract.updateBetBettor(\\r\\n\\t\\t\\t_stakeAmount,\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Stake Amount\\r\\n\\t\\t\\t[_p2[LAY_MARKET_ID_i], _p2[SELECTION_ID_i], _p2[ODDS_i], uint64(block.timestamp)],\\t\\t// LayMarketId, selectionId, odds, datetime placed\\r\\n\\t\\t\\t[_p3[p3_LAYER_ADDRESS_i], payable(_msgSender()), _p3[p3_RESULTOR_ADDRESS_i]],\\t\\t\\t\\t// Addresses: Layer, Bettor, Resultor \\t\\r\\n\\t\\t\\t_liabilityCalc \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Liability Calc\\r\\n         ); \\r\\n         \\r\\n\\t\\tescrowContract.deposit(_msgSender() , _stakeAmount);\\r\\n        \\r\\n\\t\\tdataContract.addToTotalBetsOfLayMarketId(_p2[LAY_MARKET_ID_i], 1);\\r\\n        \\r\\n\\t\\temit BetPlaced(betId);\\r\\n    }\\r\\n\\t\\r\\n\\t\\r\\n\\r\\n\\t// CONFIRM BET\\r\\n    function confirmBet(\\r\\n\\t\\tuint256 _betId, \\r\\n\\t\\tuint8 \\t_betStatus\\r\\n\\t\\r\\n\\t) external {\\r\\n\\r\\n        require(_betStatus >= 1 && _betStatus <= 9, \\\"Invalid Bet Status\\\");\\r\\n\\t\\t\\r\\n\\t\\t// Get Bet Return variables\\r\\n\\t\\tuint256\\t\\t\\t\\t\\t\\tstakeAmount;\\t// Stake Amount (decimal 18)\\r\\n\\t\\tuint64[8] \\t\\t\\tmemory\\tf64;\\t\\t\\t// LAYMARKET_ID[0], selectionId[1], Odds (decimal 8)[2], DateTimes: Placed[3], Confirmed[4], Resulted[5], Win Override Reduce Odds % (decimal 8)[6], Win Override Reduce Stake % (decimal 8)[7]\\r\\n\\t\\taddress payable[3]  memory\\tfa; \\t\\t\\t// Addresses: Layer, Bettor, Resultor                  \\r\\n\\t\\tuint8[3] \\t\\t\\tmemory \\tf8;  \\t\\t\\t// betStatus; liabilityCalc, wORC \u2013 Win Override Reason Code\\r\\n\\t\\t         \\r\\n\\t\\t// ====> Get the Bet\\r\\n        (stakeAmount, f64, fa, f8) = dataContract.getBet(_betId);\\r\\n\\r\\n \\t\\t// sender must be layer and status must be 0\\r\\n\\t\\trequire(_msgSender()  == fa[LAYER_ADDRESS_i] && f8[BET_STATUS_i] == 0, \\\"Invalid _msgSender\\\");\\r\\n\\r\\n      \\t// betStatus is what the caller wants the new betStatus to be... \\r\\n\\t\\t// betStatus = 1 - Confirm Bet\\r\\n\\r\\n       \\t// The Ketchup incident Bet 2150 5th Oct. Cannot confirm if market locked, must refund\\r\\n\\t   \\tuint8 betStatus = _betStatus;\\r\\n        if (betStatus == 1 && dataContract.isLockedLayMarketId(f64[LAY_MARKET_ID_i])) {\\r\\n            //Trying to confirm bet, but laymarket is locked. Must not confirm, just cancel by system\\r\\n            betStatus = 3;\\r\\n        }\\r\\n\\r\\n\\t\\tif (betStatus == 1) {\\r\\n\\r\\n\\t\\t\\tuint256 toDeposit;\\r\\n\\t\\t\\tuint256 toWithdraw;\\r\\n\\t\\t\\tuint256 revShareAmount;\\r\\n            \\r\\n\\t\\t\\t// Update Bet\\t\\t\\t\\r\\n\\t\\t\\trequire(dataContract.updateBetLayer(_betId, betStatus, _msgSender() , uint64(block.timestamp)) == true);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Work out Liability\\r\\n\\t\\t\\t// Rev Share is paid on Layer Profit. Need to calculate and store the Rev Share commitment \\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// If Layers are paying Affiliates then check if Bettor belongs to an Affiliate and if so get the total amount that needs to be paid to affiliate if necessary\\r\\n\\t\\t\\tif (revSharesContract.layerAffiliatePercent() > 0) {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif (revSharesContract.getBettorAffiliateTotalPercent(fa[BETTOR_ADDRESS_i]) == 10000000000) { // Total Affilate rev share amount must add up to 100%. Is 0 if no affilieate belongs to bettor \\r\\n\\r\\n\\t\\t\\t\\t\\trevShareAmount = revSharesContract.layerAffiliatePercent().mul(stakeAmount).div(10000000000);\\t\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t \\r\\n\\t\\t\\t// GSP Rev Share to be put aside too\\r\\n\\t\\t\\tif(revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]) > 0) {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\trevShareAmount = revShareAmount.add(revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]).mul(stakeAmount).div(10000000000));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Calculate Liability\\r\\n\\t\\t\\t(toDeposit, toWithdraw) = liabilityContract.computeRisk([f64[LAY_MARKET_ID_i], f64[SELECTION_ID_i], f64[ODDS_i]], stakeAmount, f8[LIABILITY_CALC_i], revShareAmount);\\r\\n            \\r\\n\\t\\t\\t// Make escrow deposit if liability greater than current escrow or withdraw if less\\r\\n\\t\\t\\tif (toDeposit > 0 && toWithdraw == 0) {\\r\\n                \\r\\n\\t\\t\\t\\tescrowContract.deposit(_msgSender() , toDeposit);\\r\\n            \\r\\n\\t\\t\\t} else if (toWithdraw > 0 && toDeposit == 0) {\\r\\n                \\r\\n\\t\\t\\t\\tescrowContract.withdraw(_msgSender() , toWithdraw, returnFee(toWithdraw, fees[LIABILITY_CALC_REQUIRES_WITHDRAW_FEE_i]));\\r\\n            }\\r\\n            \\r\\n\\t\\t\\temit BetConfirmed(_betId);\\r\\n        \\r\\n\\t\\t} else {\\r\\n            \\r\\n\\t\\t\\t// Reject and Refund this bet\\r\\n\\t\\t\\trequire(dataContract.updateBetLayer(_betId, betStatus, _msgSender() , uint64(block.timestamp)) == true);\\r\\n            \\r\\n\\t\\t\\tbettorWithdraw(fa[BETTOR_ADDRESS_i], stakeAmount, returnFee(stakeAmount, fees[REJECT_BY_LAYER_RETURN_FEE_i]));\\r\\n            \\r\\n\\t\\t\\tdataContract.subtractFromTotalBetsOfLayMarketId(f64[LAY_MARKET_ID_i], 1);\\r\\n            \\r\\n\\t\\t\\temit BetRejected(_betId);\\r\\n        }\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\t// RESULT BET\\r\\n    function resultBet(\\t\\r\\n\\t\\tuint256 \\t\\t\\t\\t_betId, \\r\\n\\t\\tuint8 \\t\\t\\t\\t\\t_selectionResult, \\r\\n\\t\\tuint64[2]\\tcalldata \\t_winOverride, \\t\\t\\t//[0] = % to reduce odds by (decimal 8), [1] reduce stake by % (decimal 8)\\r\\n\\t\\tuint8 \\t\\t\\t\\t\\t_winOverrideReasonCode\\t// 0 = no reduce, 1 = Rule 4, 2 = Dead Heat, 3 = Rule 4 and Dead Heat\\r\\n\\t\\r\\n\\t) external returns(bool) {\\r\\n\\r\\n        require(_selectionResult >= 12 && _selectionResult <= 16, \\\"Invalid _selectionResult\\\");  \\r\\n\\r\\n\\t\\t// Return variables\\r\\n\\t\\tuint256\\t\\t\\t\\t\\t\\tstakeAmount;\\t// Stake Amount (decimal 18)\\r\\n\\t\\tuint64[8] \\t\\t\\tmemory\\tf64;\\t\\t\\t// LAYMARKET_ID[0], selectionId[1], Odds (decimal 8)[2], DateTimes: Placed[3], Confirmed[4], Resulted[5], Win Override Reduce Odds % (decimal 8)[6], Win Override Reduce Stake % (decimal 8)[7]\\r\\n\\t\\taddress payable[3] \\tmemory\\tfa; \\t\\t\\t// Addresses: Layer, Bettor, Resultor                  \\r\\n\\t\\tuint8[3] \\t\\t\\tmemory \\tf8;  \\t\\t\\t// betStatus; liabilityCalc, wORC \u2013 Win Override Reason Code\\r\\n\\t\\t\\r\\n \\t\\t// ====> Get the Bet\\r\\n        (stakeAmount, f64, fa, f8) = dataContract.getBet(_betId);\\t\\t\\t\\t\\r\\n\\r\\n        // Check Bet Status and _msgSender()  are correct\\r\\n        require(f8[BET_STATUS_i] == 1 && fa[RESULTOR_ADDRESS_i] == _msgSender() , \\\"Invalid _msgSender!!\\\");\\r\\n        \\r\\n        // If this is the first bet to be resulted, then lock market so no more bets can be accepted\\r\\n        if (dataContract.resultedBetsOfLayMarketId(f64[LAY_MARKET_ID_i]) == 0) {\\r\\n            dataContract.lockLayMarketId(f64[LAY_MARKET_ID_i]);\\r\\n        }\\r\\n\\r\\n        // Update Bet with new Status\\r\\n        require(dataContract.updateBetResultor(_betId, _selectionResult, _msgSender() , uint64(block.timestamp), _winOverride, _winOverrideReasonCode));\\r\\n\\r\\n\\t\\t// Set up VARS256[]\\r\\n\\t\\tuint256[10] memory vars256; \\r\\n\\t\\t\\r\\n\\t\\t// Setup Index i for structs\\r\\n\\t\\tuint256 i;\\r\\n\\t\\t\\t\\t\\r\\n        // Bettor LOSS\\r\\n        if (_selectionResult == 12) {\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\tvars256[STAKE_AMOUNT_REMAINING] = stakeAmount;\\r\\n\\r\\n\\t\\t\\t// GSP Rev Share\\r\\n\\t\\t\\tif(revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]) > 0) {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tvars256[GSP_REVENUE] = revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]).mul(stakeAmount).div(10000000000);\\r\\n\\r\\n\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], revSharesContract.getResultorGSPRevSharePool(fa[RESULTOR_ADDRESS_i]), vars256[GSP_REVENUE]); \\r\\n\\t\\t\\t\\tescrowContract.withdraw(revSharesContract.getResultorGSPRevSharePool(fa[RESULTOR_ADDRESS_i]), vars256[GSP_REVENUE], 0); \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tvars256[STAKE_AMOUNT_REMAINING] = vars256[STAKE_AMOUNT_REMAINING].sub(vars256[GSP_REVENUE]);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Affiliate(s) Rev Share\\r\\n\\t\\t\\tif (revSharesContract.layerAffiliatePercent() > 0) {\\r\\n\\t\\t\\t\\t \\r\\n\\t\\t\\t\\tif (revSharesContract.getBettorAffiliateTotalPercent(fa[BETTOR_ADDRESS_i]) == 10000000000) { // Total Affilate rev share amount must add up to 100% \\r\\n\\r\\n\\t// Maybe check if bettor_address is the EOSBet Contract -this means its an EOS Bet\\r\\n\\t// If so, then look up the ultimate affilate address and use that for payment\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tfor (i = 0; i < revSharesContract.getBettorAffiliateLength(fa[BETTOR_ADDRESS_i]); i++) {\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t//\\tCalculate Affiliate Revenue Share Amount\\r\\n\\t\\t\\t\\t\\t\\tvars256[AFFILIATE_REVENUE] = revSharesContract.layerAffiliatePercent().mul(revSharesContract.getBettorAffiliatePercent(fa[BETTOR_ADDRESS_i], i)).mul(stakeAmount).div(10000000000).div(10000000000);\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t//\\tPay Affiliate from Stake - move escrow from bettor to affiliate, then withdraw\\r\\n\\t\\t\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], revSharesContract.getBettorAffiliateRevSharePool(fa[BETTOR_ADDRESS_i], i), vars256[AFFILIATE_REVENUE]); \\r\\n\\t\\t\\t\\t\\t\\tescrowContract.withdraw(revSharesContract.getBettorAffiliateRevSharePool(fa[BETTOR_ADDRESS_i], i), vars256[AFFILIATE_REVENUE], 0); \\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdataContract.subtractFromRevShareOfLayMarketId(f64[LAY_MARKET_ID_i], vars256[AFFILIATE_REVENUE]);\\t\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tvars256[STAKE_AMOUNT_REMAINING] = vars256[STAKE_AMOUNT_REMAINING].sub(vars256[AFFILIATE_REVENUE]);\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\t\\t\\t\\t\\r\\n\\t\\t\\t\\r\\n            escrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], fa[LAYER_ADDRESS_i], vars256[STAKE_AMOUNT_REMAINING]); // Move Stake from Bettor to Layer\\r\\n            \\r\\n\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]).add(vars256[STAKE_AMOUNT_REMAINING])); // Add Stake to Accumulator\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tdataContract.addToProfitOfLayMarketId(f64[LAY_MARKET_ID_i], int256(vars256[STAKE_AMOUNT_REMAINING])); // Add Stake Amount of this Bet to Profit of this Lay Market\\r\\n            \\r\\n\\t\\t\\temit BetResulted(_betId, 0); // Event\\r\\n        }\\r\\n\\r\\n        // Bettor WIN\\r\\n        if (_selectionResult == 13) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\trequire(_winOverride[WIN_OVERRIDE_REDUCE_ODDS_i] < 10000000000 && _winOverride[WIN_OVERRIDE_REDUCE_STAKE_i] < 10000000000, \\\"Invalid _winOverride\\\"); // Both must be less that 100%\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t// Reduce odds by winOverride amounts for rule 4 and rule 10 stuff\\r\\n\\t\\t\\tif (_winOverride[WIN_OVERRIDE_REDUCE_ODDS_i] > 0) {\\r\\n\\t\\t\\t\\tvars256[NEW_ODDS_AMOUNT] = f64[ODDS_i].sub(100000000).mul(10000000000 - _winOverride[WIN_OVERRIDE_REDUCE_ODDS_i]).div(10000000000).add(100000000); // Odds reduced\\r\\n\\t\\t\\t} else {\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tvars256[NEW_ODDS_AMOUNT] = f64[ODDS_i]; // Odds the same\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Reduce stake by winOverride amounts for rule 4 and rule 10 stuff\\r\\n\\t\\t\\tif (_winOverride[WIN_OVERRIDE_REDUCE_STAKE_i] > 0) {\\r\\n\\t\\t\\t\\tvars256[NEW_STAKE_AMOUNT] = stakeAmount.mul(10000000000 - _winOverride[WIN_OVERRIDE_REDUCE_STAKE_i]).div(10000000000);  \\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tvars256[NEW_STAKE_AMOUNT] = stakeAmount;\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// win amount calculation now includes stake amount as it can now be below the value of stake amount (rule 10)\\r\\n\\t\\t\\tvars256[WIN_AMOUNT] = vars256[NEW_STAKE_AMOUNT].mul(vars256[NEW_ODDS_AMOUNT]).div(100000000); // Replaces Risk Amount. Win amount is stake * odds\\\\\\t\\t\\t\\r\\n\\r\\n\\t\\t\\t// If the case is that the win is less than the stake, then return the win to bettor but send remainder of stake - win to layer\\r\\n\\t\\t\\tif (vars256[WIN_AMOUNT] <= stakeAmount) {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], fa[LAYER_ADDRESS_i], stakeAmount.sub(vars256[WIN_AMOUNT])); // Move remainder of Stake from Bettor to Layer           \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]).add(stakeAmount.sub(vars256[WIN_AMOUNT]))); // Add remainder of Stake to Accumulator\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tdataContract.addToProfitOfLayMarketId(f64[LAY_MARKET_ID_i], int256(stakeAmount.sub(vars256[WIN_AMOUNT]))); // Add Stake - Win as Profit of this Lay Market\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[LAYER_ADDRESS_i], fa[BETTOR_ADDRESS_i], vars256[WIN_AMOUNT].sub(stakeAmount)); // Move Win Amount (less stake) from Layer to Bettor\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]).sub(vars256[WIN_AMOUNT].sub(stakeAmount))); // Subtract Win from Accumulator\\r\\n\\r\\n\\t\\t\\t\\tdataContract.addToProfitOfLayMarketId(f64[LAY_MARKET_ID_i], int256(vars256[WIN_AMOUNT].sub(stakeAmount)) * -1); // Add Win - Stake as Loss of this Bet to Lay Market\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Withdraw WIN_AMOUNT to Bettor\\r\\n\\t\\t\\tbettorWithdraw(fa[BETTOR_ADDRESS_i], vars256[WIN_AMOUNT], returnFee(vars256[WIN_AMOUNT], fees[BETTOR_WIN_FEE_i]));\\r\\n\\t\\t\\t\\r\\n            emit BetResulted(_betId, vars256[WIN_AMOUNT]);  // Event\\r\\n        }\\r\\n\\r\\n        // REFUND\\r\\n        if (_selectionResult == 14) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tbettorWithdraw(fa[BETTOR_ADDRESS_i], stakeAmount, returnFee(stakeAmount, fees[BETTOR_REFUND_FEE_i]));\\r\\n  \\r\\n\\t\\t\\temit BetResulted(_betId, stakeAmount);  // Event\\r\\n        }\\r\\n\\r\\n        // Bettor LOSE / PUSH\\r\\n        if (_selectionResult == 15) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tvars256[PUSH_AMOUNT] = stakeAmount.div(2);  // Calculate the Win for the Layer which is half the bettors Stake\\r\\n\\r\\n\\t\\t\\tvars256[PUSH_AMOUNT_REMAINING] = vars256[PUSH_AMOUNT];\\r\\n\\r\\n\\t\\t\\t// Return PUSH amount to Bettor\\t\\t\\t\\r\\n\\t\\t\\tbettorWithdraw(fa[BETTOR_ADDRESS_i], stakeAmount.sub(vars256[PUSH_AMOUNT]), returnFee(stakeAmount.sub(vars256[PUSH_AMOUNT] ), fees[BETTOR_LOST_PUSH_FEE_i]));\\r\\n\\r\\n\\t\\t\\t// GSP Rev Share\\r\\n\\t\\t\\tif(revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]) > 0) {\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tvars256[GSP_REVENUE] = revSharesContract.getResultorGSPPercent(fa[RESULTOR_ADDRESS_i]).mul(vars256[PUSH_AMOUNT]).div(10000000000);\\r\\n\\r\\n\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], revSharesContract.getResultorGSPRevSharePool(fa[RESULTOR_ADDRESS_i]), vars256[GSP_REVENUE]); \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tescrowContract.withdraw(revSharesContract.getResultorGSPRevSharePool(fa[RESULTOR_ADDRESS_i]), vars256[GSP_REVENUE], 0); \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tvars256[PUSH_AMOUNT_REMAINING] = vars256[PUSH_AMOUNT_REMAINING].sub(vars256[GSP_REVENUE]);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// If Layers are paying Affiliates\\r\\n\\t\\t\\tif (revSharesContract.layerAffiliatePercent() > 0) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\tif (revSharesContract.getBettorAffiliateTotalPercent(fa[BETTOR_ADDRESS_i]) == 10000000000) { // Total Affilate rev share amount must add up to 100% \\r\\n\\t\\t\\t\\t\\t\\r\\n\\t// Maybe check if bettor_address is the EOSBet Contract -this means its an EOS Bet\\r\\n\\t// If so, then look up the ultimate affilate address and use that for payment\\r\\n\\t\\r\\n\\t\\t\\t\\t\\tfor (i = 0; i < revSharesContract.getBettorAffiliateLength(fa[BETTOR_ADDRESS_i]); i++) {\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t//\\tCalculate Affiliate Revenue Share Amount\\r\\n\\t\\t\\t\\t\\t\\tvars256[AFFILIATE_REVENUE] = revSharesContract.layerAffiliatePercent().mul(revSharesContract.getBettorAffiliatePercent(fa[BETTOR_ADDRESS_i], i)).mul(vars256[PUSH_AMOUNT]).div(10000000000).div(10000000000);\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t//\\tPay Affiliate - move escrow from bettor to affiliate, then withdraw\\r\\n\\t\\t\\t\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], revSharesContract.getBettorAffiliateRevSharePool(fa[BETTOR_ADDRESS_i], i), vars256[AFFILIATE_REVENUE]); \\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tescrowContract.withdraw(revSharesContract.getBettorAffiliateRevSharePool(fa[BETTOR_ADDRESS_i], i), vars256[AFFILIATE_REVENUE], 0); \\r\\n\\r\\n\\t\\t\\t\\t\\t\\tdataContract.subtractFromRevShareOfLayMarketId(f64[LAY_MARKET_ID_i], vars256[AFFILIATE_REVENUE]);\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tvars256[PUSH_AMOUNT_REMAINING] = vars256[PUSH_AMOUNT_REMAINING].sub(vars256[AFFILIATE_REVENUE]);\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t}\\t\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n            \\r\\n\\t\\t\\t// Move PUSH_AMOUNT_REMAINING to the Layer. This is the net Profit \\r\\n\\t\\t\\tescrowContract.moveEscrowShadow(fa[BETTOR_ADDRESS_i], fa[LAYER_ADDRESS_i], vars256[PUSH_AMOUNT_REMAINING] );  \\r\\n\\r\\n\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]).add(vars256[PUSH_AMOUNT_REMAINING] )); // Add push amount to Accumulator\\r\\n \\r\\n\\t\\t\\tdataContract.addToProfitOfLayMarketId(f64[LAY_MARKET_ID_i], int256(vars256[PUSH_AMOUNT_REMAINING] )); // Add Profit of this Bet to Lay Market\\r\\n \\r\\n\\t\\t\\temit BetResulted(_betId, stakeAmount.sub(vars256[PUSH_AMOUNT] ));  //Event       \\r\\n\\t\\t}\\r\\n\\r\\n        // Bettor WIN / PUSH\\r\\n        if (_selectionResult == 16) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tvars256[WIN_AMOUNT] = (stakeAmount.mul(f64[ODDS_i]).div(100000000).sub(stakeAmount)).div(2);  // Calculate the Bettor Win which is half of the Risk\\r\\n            \\r\\n\\t\\t\\tescrowContract.moveEscrowShadow(fa[LAYER_ADDRESS_i], fa[BETTOR_ADDRESS_i], vars256[WIN_AMOUNT]); // Move Half of the Risk from the Layer to the Bettor            \\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Withdraw stakeAmount + WIN_AMOUNT to Bettor\\r\\n\\t\\t\\tbettorWithdraw(fa[BETTOR_ADDRESS_i], stakeAmount.add(vars256[WIN_AMOUNT]), returnFee(stakeAmount.add(vars256[WIN_AMOUNT]), fees[BETTOR_WIN_PUSH_FEE_i]));\\r\\n            \\r\\n\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]).sub(vars256[WIN_AMOUNT]));  // Subtract half the risk from the Accumulator\\r\\n \\r\\n\\t\\t\\tdataContract.addToProfitOfLayMarketId(f64[LAY_MARKET_ID_i], int256(vars256[WIN_AMOUNT]) * -1); // Add Loss of this Bet to Lay Market\\r\\n \\r\\n\\t\\t\\temit BetResulted(_betId, stakeAmount.add(vars256[WIN_AMOUNT]));  // Event\\r\\n        }\\r\\n\\t\\r\\n\\t\\t// For ALL Results, Increase Resulted Bets counter by 1\\r\\n        dataContract.addToResultedBetsOfLayMarketId(f64[LAY_MARKET_ID_i], 1);  \\r\\n        \\r\\n\\t\\t// Last Bet to Result, return ALL contents of accumulator to Layer\\r\\n        if (dataContract.totalBetsOfLayMarketId(f64[LAY_MARKET_ID_i]) == dataContract.resultedBetsOfLayMarketId(f64[LAY_MARKET_ID_i])) {\\r\\n\\t\\t\\t            \\r\\n\\t\\t\\t// Withdraw remainder in escrow for this lay market to Layer\\r\\n\\t\\t\\tif (dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]) > 0) {\\r\\n\\r\\n\\t\\t\\t\\t// Calculate the Burn Amount\\r\\n\\t\\t\\t\\tif (revSharesContract.layerBurnPercent() > 0) {\\r\\n\\r\\n\\t\\t\\t\\t\\t// Check if burn % > 0\\r\\n\\t\\t\\t\\t\\tif (dataContract.profitOfLayMarketId(f64[LAY_MARKET_ID_i]) > 0) {\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t// Calculate Burn Amount\\r\\n\\t\\t\\t\\t\\t\\tvars256[BURN_AMOUNT] = uint256(dataContract.profitOfLayMarketId(f64[LAY_MARKET_ID_i])).mul(revSharesContract.layerBurnPercent() ).div(10000000000);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t// Withdraw remainder and burn Burn Amount plus any Layer Escrow Return Fee\\r\\n\\t\\t\\t\\tescrowContract.withdraw(fa[LAYER_ADDRESS_i], dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]), returnFee(dataContract.escrowOfLayMarketId(f64[LAY_MARKET_ID_i]), vars256[BURN_AMOUNT].add( fees[LAYER_ESCROW_RETURN_FEE_i])));  \\r\\n \\r\\n\\t\\t\\t\\t// Set the Accumulator to 0\\r\\n\\t\\t\\t\\tdataContract.setEscrowOfLayMarketId(f64[LAY_MARKET_ID_i], 0); \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t// Reset Rev Share for this Lay Market\\r\\n\\t\\t\\t\\tdataContract.subtractFromRevShareOfLayMarketId(f64[LAY_MARKET_ID_i], dataContract.revShareOfLayMarketId(f64[LAY_MARKET_ID_i]));\\t// Reset Rev Share for this Lay Market\\r\\n\\t\\t\\t}\\r\\n        }\\r\\n\\r\\n\\t\\treturn true;\\r\\n    }\\r\\n\\t\\r\\n\\t// CANCEL BET by bettor\\r\\n    function cancelBet(uint256 _betId) external {\\r\\n\\t\\tuint256\\t\\t\\t\\t\\t\\tstakeAmount;\\t// Stake Amount (decimal 18)\\r\\n\\t\\tuint64[8] \\t\\t\\tmemory\\tf64;\\t\\t\\t// LayMarketId[0], selectionId[1], Odds (decimal 8)[2], DateTimes: Placed[3], Confirmed[4], Resulted[5], Win Override Reduce Odds % (decimal 8)[6], Win Override Reduce Stake % (decimal 8)[7] \\r\\n\\t\\taddress payable[3] \\tmemory\\tfa; \\t\\t\\t// Addresses: Layer, Bettor, Resultor                  \\r\\n\\t\\tuint8[3] \\t\\t\\tmemory \\tf8;  \\t\\t\\t// betStatus; liabilityCalc, winOverrideReasonCode  \\r\\n\\t\\t\\r\\n \\t\\t// ====> Get the Bet\\r\\n        (stakeAmount, f64, fa, f8) = dataContract.getBet(_betId);\\t\\t\\t\\t\\r\\n\\t\\r\\n        require(fa[BETTOR_ADDRESS_i] == _msgSender()  && f8[BET_STATUS_i] == 0, \\\"Invalid _msgSender or BetStatus <> 0\\\");\\r\\n\\r\\n\\t\\tuint256 stakeToReturn = dataContract.cancelBetBettor(_betId, _msgSender() , uint64(block.timestamp));\\r\\n\\r\\n\\t\\tbettorWithdraw(payable(_msgSender() ), stakeToReturn, returnFee(stakeToReturn, fees[CANCEL_BET_BY_BETTOR_RETURN_FEE_i]));\\r\\n\\t\\t\\t    \\r\\n\\t\\tdataContract.subtractFromTotalBetsOfLayMarketId(f64[LAY_MARKET_ID_i], 1);\\r\\n\\t\\t\\r\\n\\t\\temit BetCanceled(_betId);\\r\\n   }\\r\\n\\t\\r\\n\\tfunction bettorWithdraw(\\r\\n\\t\\taddress payable \\t_bettorAddress,\\r\\n\\t\\tuint256 \\t\\t\\t_amount,\\r\\n\\t\\tuint256 \\t\\t\\t_fee\\r\\n\\t\\t\\r\\n\\t) internal {\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\tescrowContract.withdraw(_bettorAddress, _amount, _fee);\\t\\t\\t\\r\\n\\r\\n\\t\\treturn;\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\t// Set the fee value in the array. See above for constant values\\r\\n    function setFeeAmount(uint8 _feeIndex, uint256 _feeAmount) external onlyOwner {\\r\\n        fees[_feeIndex] = _feeAmount;\\r\\n        emit FeeUpdated(_feeIndex, _feeAmount);\\r\\n    }\\r\\n\\t\\r\\n\\t// Have to have this coz the escrow contract has underflow issue .withdraw sub fee\\r\\n\\tfunction returnFee(uint256 _withdrawAmount, uint256 _feeAmount) private pure returns (uint256) {\\t\\t\\r\\n\\t\\tif (_feeAmount > _withdrawAmount) {\\t\\t\\t\\r\\n\\t\\t\\treturn _withdrawAmount; // If fee is greater than the withdraw amount, then limit fee to withdraw amount\\t\\t\\t\\r\\n\\t\\t} else {\\t\\t\\t\\r\\n\\t\\t\\treturn _feeAmount;\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IXFUNEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IXFUNEscrow {\\r\\n    event AccessGranted(address _addr, uint256 _id);\\r\\n    event AccessRemoved(address _addr, uint256 _id);\\r\\n    event EscrowMoved(address _who, address _fromAddress, uint256 _amount);\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event TokenEscrowDeposit(\\r\\n        address _who,\\r\\n        address _fromAddress,\\r\\n        uint256 _amount\\r\\n    );\\r\\n    event TokenEscrowWithdraw(\\r\\n        address _who,\\r\\n        address _toAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _fee\\r\\n    );\\r\\n\\r\\n    function escrowedBalancesOfService(uint256, address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function escrowedOfService(uint256) external view returns (uint256);\\r\\n\\r\\n    function granted(address) external view returns (uint256);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function allowAccess(address _addr, uint256 _id) external;\\r\\n\\r\\n    function removeAccess(address _addr) external;\\r\\n\\r\\n    function deposit(address _addr, uint256 _amount) external;\\r\\n\\r\\n    function moveEscrowShadow(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _fee\\r\\n    ) external;\\r\\n\\r\\n    function escrowedBalanceOf(uint256 _id, address _address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IXFUNBetRevShares.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IXFUNBetRevShares {\\r\\n    // Rev Share Deal struct, For GSP and Affilate deals\\r\\n\\tstruct revShare {\\r\\n\\t\\taddress \\trevSharePool;  \\t// Where to send the revenue share amount\\r\\n\\t\\tuint64 \\t\\tpercent;\\t\\t// Commission - How much to take\\r\\n\\t}\\r\\n\\r\\n    event UpdateLayerBurnPercent(\\r\\n        uint64 _percent\\r\\n    );\\r\\n\\r\\n    event NewBettorAffiliate(\\r\\n        address _bettorAddress,\\r\\n        uint256 _index,\\r\\n        address _revSharePool,\\r\\n        uint64 _percent,\\r\\n        uint256 _index2\\r\\n    );\\r\\n    event UpdateLayerAffiliatePercent(uint64 _percent);\\r\\n    event UpdateResultorGSP(\\r\\n        address _resultorAddress,\\r\\n        address _revSharePool,\\r\\n        uint64 _percent\\r\\n    );\\r\\n\\r\\n    function layerBurnPercent() external view returns (uint64);\\r\\n    \\r\\n    function updateLayerBurnPercent(uint64 _percent) external; \\r\\n\\r\\n    function layerAffiliatePercent() external view returns (uint64);\\r\\n\\r\\n    // function tokenContract() external view returns (address);\\r\\n\\r\\n    function updateLayerAffiliatePercent(uint64 _percent) external;\\r\\n\\r\\n    function updateResultorGSP(\\r\\n        address _resultorAddress,\\r\\n        address _revSharePool,\\r\\n        uint64 _percent\\r\\n    ) external;\\r\\n\\r\\n    function getResultorGSPRevSharePool(address _resultorAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function getResultorGSPPercent(address _resultorAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    function newBettorAffiliate(\\r\\n        address _bettorAddress,\\r\\n        address _revSharePool,\\r\\n        uint64 _percent\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function getRevSharePoolLength(address _revSharePool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getRevSharePoolBettor(address _revSharePool, uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function getBettorAffiliateLength(address _bettorAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getBettorAffiliateRevSharePool(\\r\\n        address _bettorAddress,\\r\\n        uint256 _index\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getBettorAffiliatePercent(address _bettorAddress, uint256 _index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    function getBettorAffiliateTotalPercent(address _bettorAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IXFUNBetLiabilityCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IXFUNBetLiabilityCalculator {\\r\\n    event AccessGranted(address _addr, uint256 _timestamp);\\r\\n    event AccessRemoved(address _addr, uint256 _timestamp);\\r\\n\\r\\n    // function dataContract() external view returns (address);\\r\\n\\r\\n    function granted(address) external view returns (bool);\\r\\n\\r\\n    function allowAccess(address _addr) external;\\r\\n\\r\\n    function removeAccess(address _addr) external;\\r\\n\\r\\n    function computeRisk(\\r\\n        uint64[3] memory _p1,\\r\\n        uint256 _stakeAmount,\\r\\n        uint8 _liabilityCalc,\\r\\n        uint256 _revShareAmount\\r\\n    ) external returns (uint256 r1, uint256 r2);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IXFUNBetData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IXFUNBetData {\\r\\n    event AccessGranted(address _addr, uint256 _timestamp);\\r\\n    event AccessRemoved(address _addr, uint256 _timestamp);\\r\\n\\r\\n    function bets(uint256) external view returns (uint256 stakeAmount);\\r\\n\\r\\n    function escrowOfLayMarketId(uint64) external view returns (uint256);\\r\\n\\r\\n    function exposureOfSelectionOfLayMarketId(uint64, uint64)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function granted(address) external view returns (bool);\\r\\n\\r\\n    function hasSelectionOfLayMarketId(uint64, uint64)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function isLockedLayMarketId(uint64) external view returns (bool);\\r\\n\\r\\n    function profitOfLayMarketId(uint64) external view returns (int256);\\r\\n\\r\\n    function resultedBetsOfLayMarketId(uint64) external view returns (uint256);\\r\\n\\r\\n    function revShareOfLayMarketId(uint64) external view returns (uint256);\\r\\n\\r\\n    function selectionsOfLayMarketId(uint64, uint256)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    function selectionsOfLayMarketIdCount(uint64)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function selectionsOfLayMarketIdIndex(uint64, uint256)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    function stakeOfLayMarketId(uint64) external view returns (uint256);\\r\\n\\r\\n    function totalBetsOfLayMarketId(uint64) external view returns (uint256);\\r\\n\\r\\n    function allowAccess(address _addr) external;\\r\\n\\r\\n    function removeAccess(address _addr) external;\\r\\n\\r\\n    function updateBetBettor(\\r\\n        uint256 _stakeAmount,\\r\\n        uint64[4] memory _p2,\\r\\n        address payable[3] calldata _p3,\\r\\n        uint8 _liabilityCalc\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function updateBetLayer(\\r\\n        uint256 _betId,\\r\\n        uint8 _betStatus,\\r\\n        address _sender,\\r\\n        uint64 _timestamp\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function updateBetResultor(\\r\\n        uint256 _betId,\\r\\n        uint8 _selectionResult,\\r\\n        address _sender,\\r\\n        uint64 _timestamp,\\r\\n        uint64[2] memory _winOverride,\\r\\n        uint8 _winOverrideReasonCode\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function getBet(uint256 _betId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256                         stakeAmount, \\r\\n            uint64[8]           memory      f64, \\r\\n            address payable[3]  memory      fa, \\r\\n            uint8[3]            memory      f8\\r\\n        );\\r\\n\\r\\n    function cancelBetBettor(\\r\\n        uint256 _betId,\\r\\n        address _sender,\\r\\n        uint64 _timestamp\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function addToTotalBetsOfLayMarketId(uint64 _layMarketId, uint256 _amount)\\r\\n        external;\\r\\n\\r\\n    function subtractFromTotalBetsOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function addToResultedBetsOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function substractFromResultedBetsOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function lockLayMarketId(uint64 _layMarketId) external;\\r\\n\\r\\n    function setHasSelectionOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint64 _selection,\\r\\n        bool _choice\\r\\n    ) external;\\r\\n\\r\\n    function addToExposureOfSelectionOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint64 _selection,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function subtractFromExposureOfSelectionOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint64 _selection,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function pushToSelectionsOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint64 _selectionId\\r\\n    ) external;\\r\\n\\r\\n    function setEscrowOfLayMarketId(uint64 _layMarketId, uint256 _amount)\\r\\n        external;\\r\\n\\r\\n    function addToStakeOfLayMarketId(uint64 _layMarketId, uint256 _amount)\\r\\n        external;\\r\\n\\r\\n    function subtractFromStakeOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function addToProfitOfLayMarketId(uint64 _layMarketId, int256 _amount)\\r\\n        external;\\r\\n\\r\\n    function addToRevShareOfLayMarketId(uint64 _layMarketId, uint256 _amount)\\r\\n        external;\\r\\n\\r\\n    function subtractFromRevShareOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function getLayMarketInfo(uint64 _layMarketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[7] memory f256, bool fb);\\r\\n\\r\\n    function getExposureOfSelectionOfLayMarketId(\\r\\n        uint64 _layMarketId,\\r\\n        uint64 _index\\r\\n    ) external view returns (uint64 f64, uint256 f256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"BetCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"BetConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"BetRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bettorReward\",\"type\":\"uint256\"}],\"name\":\"BetResulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_feeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_betStatus\",\"type\":\"uint8\"}],\"name\":\"confirmBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"internalType\":\"contract IXFUNBetData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowContract\",\"outputs\":[{\"internalType\":\"contract IXFUNEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liabilityContract\",\"outputs\":[{\"internalType\":\"contract IXFUNBetLiabilityCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64[3]\",\"name\":\"_p2\",\"type\":\"uint64[3]\"},{\"internalType\":\"address payable[2]\",\"name\":\"_p3\",\"type\":\"address[2]\"},{\"internalType\":\"uint8\",\"name\":\"_liabilityCalc\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_selectionResult\",\"type\":\"uint8\"},{\"internalType\":\"uint64[2]\",\"name\":\"_winOverride\",\"type\":\"uint64[2]\"},{\"internalType\":\"uint8\",\"name\":\"_winOverrideReasonCode\",\"type\":\"uint8\"}],\"name\":\"resultBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revSharesContract\",\"outputs\":[{\"internalType\":\"contract IXFUNBetRevShares\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrowContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liabilityContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revSharesContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XFUNBetLogic", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}