{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConduit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IConduitController {\\n  function getConduitCodeHashes()\\n    external\\n    view\\n    returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\\n}\\n\\ninterface IConduit {\\n  enum ConduitItemType {\\n    NATIVE, // Unused\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n  }\\n\\n  struct ConduitTransfer {\\n    ConduitItemType itemType;\\n    address token;\\n    address from;\\n    address to;\\n    uint256 identifier;\\n    uint256 amount;\\n  }\\n\\n  function execute(ConduitTransfer[] calldata transfers) external returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReservoirV6_0_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IReservoirV6_0_1 {\\n  struct ExecutionInfo {\\n    address module;\\n    bytes data;\\n    uint256 value;\\n  }\\n\\n  function execute(ExecutionInfo[] calldata executionInfos) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/misc/ReservoirApprovalProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {IConduit, IConduitController} from \\\"../interfaces/IConduit.sol\\\";\\nimport {IReservoirV6_0_1} from \\\"../interfaces/IReservoirV6_0_1.sol\\\";\\n\\n// Forked from:\\n// https://github.com/ProjectOpenSea/seaport/blob/b13939729001cb12f715d7b73422aafeca0bcd0d/contracts/helpers/TransferHelper.sol\\ncontract ReservoirApprovalProxy is ReentrancyGuard {\\n  // --- Structs ---\\n\\n  struct TransferHelperItem {\\n    IConduit.ConduitItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n  }\\n\\n  struct TransferHelperItemsWithRecipient {\\n    TransferHelperItem[] items;\\n    address recipient;\\n  }\\n\\n  // --- Errors ---\\n\\n  error ConduitExecutionFailed();\\n  error InvalidRecipient();\\n\\n  // --- Fields ---\\n\\n  IConduitController internal immutable _CONDUIT_CONTROLLER;\\n  bytes32 internal immutable _CONDUIT_CREATION_CODE_HASH;\\n  bytes32 internal immutable _CONDUIT_RUNTIME_CODE_HASH;\\n\\n  IReservoirV6_0_1 internal immutable _ROUTER;\\n\\n  // --- Constructor ---\\n\\n  constructor(address conduitController, address router) {\\n    IConduitController controller = IConduitController(conduitController);\\n    (_CONDUIT_CREATION_CODE_HASH, _CONDUIT_RUNTIME_CODE_HASH) = controller.getConduitCodeHashes();\\n\\n    _CONDUIT_CONTROLLER = controller;\\n    _ROUTER = IReservoirV6_0_1(router);\\n  }\\n\\n  // --- Public methods ---\\n\\n  function bulkTransferWithExecute(\\n    TransferHelperItemsWithRecipient[] calldata transfers,\\n    IReservoirV6_0_1.ExecutionInfo[] calldata executionInfos,\\n    bytes32 conduitKey\\n  ) external nonReentrant {\\n    uint256 numTransfers = transfers.length;\\n\\n    address conduit = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              bytes1(0xff),\\n              address(_CONDUIT_CONTROLLER),\\n              conduitKey,\\n              _CONDUIT_CREATION_CODE_HASH\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    uint256 sumOfItemsAcrossAllTransfers;\\n    unchecked {\\n      for (uint256 i = 0; i < numTransfers; ++i) {\\n        TransferHelperItemsWithRecipient calldata transfer = transfers[i];\\n        sumOfItemsAcrossAllTransfers += transfer.items.length;\\n      }\\n    }\\n\\n    IConduit.ConduitTransfer[] memory conduitTransfers = new IConduit.ConduitTransfer[](\\n      sumOfItemsAcrossAllTransfers\\n    );\\n\\n    uint256 itemIndex;\\n    unchecked {\\n      for (uint256 i = 0; i < numTransfers; ++i) {\\n        TransferHelperItemsWithRecipient calldata transfer = transfers[i];\\n        TransferHelperItem[] calldata transferItems = transfer.items;\\n\\n        _checkRecipientIsNotZeroAddress(transfer.recipient);\\n\\n        uint256 numItemsInTransfer = transferItems.length;\\n        for (uint256 j = 0; j < numItemsInTransfer; ++j) {\\n          TransferHelperItem calldata item = transferItems[j];\\n          conduitTransfers[itemIndex] = IConduit.ConduitTransfer(\\n            item.itemType,\\n            item.token,\\n            msg.sender,\\n            transfer.recipient,\\n            item.identifier,\\n            item.amount\\n          );\\n\\n          ++itemIndex;\\n        }\\n      }\\n    }\\n\\n    bytes4 conduitMagicValue = IConduit(conduit).execute(conduitTransfers);\\n    if (conduitMagicValue != IConduit.execute.selector) {\\n      revert ConduitExecutionFailed();\\n    }\\n\\n    _ROUTER.execute(executionInfos);\\n  }\\n\\n  function _checkRecipientIsNotZeroAddress(address recipient) internal pure {\\n    if (recipient == address(0x0)) {\\n      revert InvalidRecipient();\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConduitExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum IConduit.ConduitItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ReservoirApprovalProxy.TransferHelperItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ReservoirApprovalProxy.TransferHelperItemsWithRecipient[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IReservoirV6_0_1.ExecutionInfo[]\",\"name\":\"executionInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"}],\"name\":\"bulkTransferWithExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReservoirApprovalProxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000f9490004c11cef243f5400493c00ad63000000000000000000000000c2c862322e9c97d6244a3506655da95f05246fd8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}