{"SourceCode": "// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract FeesDistribute {\r\n    using SafeMath for uint256; \r\n    IERC20 private usdt;\r\n\r\n    uint256 private baseDivider = 700;\r\n    address[8] private feeReceivers;\r\n    uint256[8] private feeRates = [100, 100, 100, 100, 100, 100, 50, 50];\r\n\r\n    constructor(address _usdtAddr) \r\n    {\r\n        usdt = IERC20(_usdtAddr);\r\n        feeReceivers[0] = 0xbEeb4E9837c7bf8F2927E26402848b67b0153F33;\r\n        feeReceivers[1] = 0x2D793ddC54efDA85257FBd9be952d6DACCF111e4;\r\n        feeReceivers[2] = 0x5eAE0d718E3C082cDDE9fcf9B0Db019CAcf9cE99;\r\n        feeReceivers[3] = 0x5f517d094929927791C01b4806405bbDA0eE4c54;\r\n        feeReceivers[4] = 0xcD392e2C543b012497E1ffda91f77D6427d65C07;\r\n        feeReceivers[5] = 0x859db861B332111cF46202Dd3793Faa037A2a6ad;\r\n        feeReceivers[6] = 0x4cb0a7Bcb90FBF9D36C23FEb6336983553C22736;\r\n        feeReceivers[7] = 0xDDE5D9c04a26B6498A238bC217D37c76b6de4B0A;\r\n    }\r\n\r\n    function distribute() external \r\n    {\r\n        uint256 balNow = usdt.balanceOf(address(this));\r\n        if(balNow > 0)\r\n        {\r\n            for(uint256 i = 0; i < feeReceivers.length; i++)\r\n            {\r\n                uint256 fee = balNow.mul(feeRates[i]).div(baseDivider);\r\n                usdt.transfer(feeReceivers[i], fee);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeesDistribute", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9306cdccfc3f2310a9984e3698f3dc6b1d500ca209e70a88ddbd5f94e517fb3"}