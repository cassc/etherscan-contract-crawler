{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wav3s.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Events} from \\\"./wav3sEvents.sol\\\";\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport './wav3sFunctions.sol';\\nimport \\\"./PhatRollupAnchor.sol\\\";\\nimport './RaffleStateLibrary.sol';\\n// VRF\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\n\\n/**\\n * @title wav3s\\n * @author Daniel Beltr\u00e1n for wav3s\\n * @notice A contract to decentralize incentives on web3 social media for users that want to \\n * add transactional value on exchange for responses of the network.\\n */\\n\\n/**\\n * @notice A struct containing the necessary data to execute funded mirror actions on a given profile and post.\\n * @param currency The address of the currency used for rewards.\\n * @param pubId The identifier of the Publication.\\n * @param actionName The name of the action.\\n * @param budget The total budget to pay mirrorers.\\n * @param reward The amount to be paid to each mirrorer.\\n * @param pubIdSet A boolean indicating if the Publication identifier is set.\\n * @param initiatedAction A boolean indicating if the action has been initiated.\\n */\\nstruct ActionDataBase {\\n    address currency;\\n    string pubId;\\n    string actionName;\\n    uint256 budget;\\n    uint256 reward;\\n    bool pubIdSet;\\n    bool initiatedAction;\\n}\\n\\n/**\\n * @notice A struct containing additional filters and parameters for mirror actions.\\n * @param zurfersCount The number of zurfers (or retwitters), amount of users interacting with the Action.\\n * @param zurfers Addresses of zurfers that have interacted with the action.\\n * @param raffleEnd The ending timestamp of the raffle in seconds.\\n * @param winners The number of winners in a raffle.\\n * @param withdrawalTime The time until which rewards can be withdrawn.\\n * @param variable The minimum number of a requirement required to be eligible for rewards.\\n */\\nstruct ActionDataFilters {\\n    uint256 zurfersCount;\\n    address[] zurfers;\\n    uint256 raffleEnd;\\n    uint256 winners;\\n    uint256 withdrawalTime;\\n    uint256 variable;\\n    address pubOwner;\\n}\\n\\nstruct pa_DATA {\\n    ActionDataBase pa_ActionDataBase;\\n    ActionDataFilters pa_ActionDataFilters;\\n    address user;\\n    string profileId;\\n}\\n\\ncontract wav3s is VRFConsumerBaseV2, PhatRollupAnchor {\\n    using Events for *;\\n    wav3sFunctions public wav3sFunction;\\n\\n    using RaffleStateLibrary for RaffleStateLibrary.RaffleState;\\n    RaffleStateLibrary.RaffleState public raffleState;\\n    address payable public owner;  // Address of the deployer.\\n    address public s_multisig;  // The address of the wav3s multisig contract.\\n    bool private stopped = false;  // Circuit breaker\\n    uint256 public nextActionId;  // NextId indexer\\n    uint256 public consumerAppFee_; // buffer helper for _consumerAppFee\\n    uint256 public protocolFee;  // The fee that will be charged in percentage.\\n    uint256 public baseFee;  // The base fee that will be charged in ether value.\\n    using SafeERC20 for IERC20;  // SafeERC20 to transfer tokens.\\n    //Contract data access\\n    mapping(uint256 => ActionDataBase) s_actionIdToActionDataBase;  // Mapping to store the base data associated with an action wav3s, indexed by an arbitrary actionId index\\n    mapping(uint256 => ActionDataFilters) s_actionIdToActionDataFilters;  // Mapping to store the filter data associated with an action wav3s, indexed by an arbitrary actionId index\\n    mapping(string => mapping (string => ActionDataBase)) public s_PubIdToActionNameToActionDataBase;\\n    mapping(string => mapping (string => ActionDataFilters)) public s_PubIdToActionNameToActionDataFilters;\\n    mapping(string => mapping(string => mapping(address => bool))) public s_pubIdToActionNameToUserHasActed;  // Mapping to store whether a given zurfer has interacted with a funded action.\\n    mapping(address => bool) public s_triggerWhitelisted;  // Whitelisted triggers\\n    mapping(address => bool) public s_currencyWhitelisted;  // Currency whitelisted currencies\\n    mapping(address => bool) public s_superCurrencyWhitelisted;  // SuperCurrency whitelisted currencies\\n    mapping(address => uint256) public s_appAddressToAppFee; // Fee each app charges\\n    //Internal ZURF wallets\\n    mapping(address => mapping(address => uint256)) public s_userToCurrencyToWalletBudget; // Mapping to store internal wallet balances in different whitelisted currencies  \\n    mapping(address => uint256) public s_userToNativeCurrencyWalletBudget; // Mapping to store internal wallet balances in the native currency\\n    // Internal wav3s and apps wallets\\n    mapping(address => uint256) public s_CurrencyToProtocolWallet;\\n    uint256 public s_NativeCurrencyProtocolWallet;\\n    mapping(address => mapping(address => uint256)) public s_appToCurrencyToWallet;\\n\\n    // VRF \\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane; // 500 gwei Key Hash;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n     mapping(string => mapping (string => RaffleStateLibrary.RaffleState)) s_pubIdToActionNameToRaffleState; // Mapping to store if a raffle is being calculated or not\\n    // Mapping to store the association between requestId and pubId-actionName pair\\n    mapping(uint256 => string[2]) public requestIdToPubIdActionName;\\n    mapping(string => mapping (string => address[])) public wav3Winner; // Winners of pubid to action wav3\\n    // VRF Requests\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    } \\n\\n    // Phala Oracle Consumer Contract\\n    event ResponseReceived(uint reqId, string reqData, uint256 value);\\n    event ErrorReceived(uint reqId, string reqData, uint256 errno);\\n\\n    uint constant TYPE_RESPONSE = 0;\\n    uint constant TYPE_ERROR = 2;\\n\\n    mapping(uint => string) requests;\\n    uint nextRequest = 1;\\n    uint256 receivedFollowers;\\n    uint256 paId;\\n    mapping(uint256 => pa_DATA) s_ProcessActionIdToProcessActionData;\\n\\n    //Events\\n    event wav3s__ActionFunded(\\n        address sender,\\n        uint256 budget,\\n        uint256 reward,\\n        uint256 actionId\\n    );\\n    event wav3s__ActionProcessed(\\n        address user,\\n        string pubId,\\n        string action\\n    );\\n    event wav3s__RewardsWithdrawn(\\n        address user,\\n        uint256 rewardsWitdrawn\\n    );\\n    event wav3s__ActionFinished(string pubId, string action);\\n    event wav3s__ActionPrizeFinished(string pubId, string actionName);\\n    event wav3s__TriggerSet(address trigger, address sender);\\n    event wav3s__ProtocolFeeSet(uint256 protocolFee,uint256 baseFee, address sender);\\n    event wav3s__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event RequestedRaffleWinners(uint256 indexed requestId);\\n    event wav3s__PrizePaid(string pubId, string actionName,uint256 indexOfWinners,address mirrorer, uint256 reward);\\n    event wav3s__ConsumerAppWhitelisted(address consumerAppAddress);\\n    event wav3s__CircuitBreak(bool stop);\\n    event wav3s__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3s__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n    event wav3s__backdoor(address currency, uint256 balance);\\n    event wav3s__CurrencyWhitelisted(address currency,bool isSuperCurrency);\\n\\n    constructor(address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        address _wav3sFunctionsAddress\\n        ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        owner = payable(msg.sender);\\n        wav3sFunction = wav3sFunctions(_wav3sFunctionsAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"OnlyOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyWav3sTrigger() {\\n        require(\\n            s_triggerWhitelisted[msg.sender] == true,\\n            \\\"OnlyTriggers\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier stopInEmergency() {\\n        require(\\n            !stopped,\\n            \\\"EmergencyStop\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInEmergency() {\\n        require(stopped, \\\"NotInEmergency\\\");\\n        _;\\n    }\\n\\n    function fundWallet(uint256 _fundingAmount, address _currency) payable external stopInEmergency returns (uint256){\\n        require(isTokenWhitelisted(_currency), \\\"TokenNotWhitelisted\\\");\\n        IERC20(_currency).transferFrom(msg.sender, address(this), _fundingAmount);\\n        s_userToCurrencyToWalletBudget[msg.sender][_currency] += _fundingAmount;\\n        require(msg.value >= 0, \\\"Insufficient payment\\\"); \\n        s_userToNativeCurrencyWalletBudget[msg.sender] += msg.value;\\n\\n        return _fundingAmount;\\n    }\\n\\n    function fundAction(\\n        uint256[] memory _budget, uint256[] memory _reward, uint256[] memory _raffleDuration, uint256[] memory _variable, address _currency,\\n        address consumerApp\\n    ) external stopInEmergency payable returns (uint256[10] memory){\\n        // Check array lengths and token whitelisting\\n        require(_budget.length == _reward.length && _raffleDuration.length == _reward.length && _variable.length == _reward.length, \\\"ArrayLengthMismatch\\\");\\n        require(isTokenWhitelisted(_currency), \\\"TokenNotWhitelisted\\\");\\n\\n        consumerAppFee_ = s_appAddressToAppFee[consumerApp];\\n        uint256 nt = s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n\\n        (uint256 amountToTransfer,uint256[10] memory actionIds) = separateBudgetAndFees(\\n            _budget,\\n            _reward,\\n            _raffleDuration,\\n            _variable,\\n            _currency,\\n            consumerAppFee_\\n            );\\n        // Transfer currency fees and base fee to wav3s.sol contract\\n        if(s_userToCurrencyToWalletBudget[msg.sender][_currency] >= amountToTransfer){\\n            s_userToCurrencyToWalletBudget[msg.sender][_currency] -= amountToTransfer;\\n            //s_CurrencyToProtocolWallet[_currency] += amountToTransfer;\\n            }else{\\n            IERC20(_currency).transferFrom(msg.sender, address(this), amountToTransfer);\\n            s_userToCurrencyToWalletBudget[msg.sender][_currency] +=amountToTransfer;\\n            }\\n        // Transfer fees from wav3s.sol to multisig and to consumer App\\n        transferFeesToWav3sAndConsumerApp(_currency, nt, amountToTransfer, consumerApp);\\n\\n        return actionIds;\\n    }\\n    function isTokenWhitelisted(address _token) internal view returns (bool) {\\n        return s_currencyWhitelisted[_token] || s_superCurrencyWhitelisted[_token];\\n    }\\n    function calculateNormalTokenMultiplier(address _currency) internal view returns (uint256) {\\n        return s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n    }\\n\\n    function separateBudgetAndFees(uint256[] memory _budget,\\n            uint256[] memory _reward,\\n            uint256[] memory _raffleDuration,\\n            uint256[] memory _variable,\\n            address _currency,\\n            uint256 _consumerAppFee) internal returns (uint256, uint256[10] memory) {\\n\\n        uint256 amountToTransfer;\\n        uint256 actionBudget; \\n        uint256[10] memory actionIds;    \\n        uint256 _nt = s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n\\n        for (uint256 i; i < _budget.length; ++i) {\\n            uint256 budget_ = _budget[i];\\n            uint256 reward_ = _reward[i];\\n            uint256 raffleDuration_ = _raffleDuration[i];\\n            uint256 variable_ = _variable[i];\\n\\n            wav3sFunction.requireValidValues1(reward_,budget_);\\n            wav3sFunction.requireValidValues2(raffleDuration_,variable_);\\n            wav3sFunction.requireValidValues3(_consumerAppFee);\\n\\n            uint256 fees_amount = calculateFeesAmount(budget_, _nt, _consumerAppFee);\\n            require(reward_ <= (budget_ - fees_amount), \\\"NotEnoughBudgetForThatReward\\\");\\n            amountToTransfer += budget_;\\n            actionBudget = budget_ - fees_amount;\\n\\n            initializeActionDataBase1(nextActionId,actionBudget);\\n            initializeActionDataBase2(nextActionId,_currency);\\n            initializeActionDataBase3(nextActionId,reward_);\\n            initializeActionDataFilters(nextActionId,raffleDuration_,variable_ );\\n\\n            actionIds[i] = nextActionId;\\n\\n            emit Events.wav3s__ActionFunded(\\n                msg.sender,\\n                s_actionIdToActionDataBase[nextActionId].budget,\\n                s_actionIdToActionDataBase[nextActionId].reward,\\n                nextActionId\\n            );\\n            nextActionId++;\\n        }\\n        return (amountToTransfer,actionIds);\\n    }\\n\\n    function initializeActionDataBase1(\\n        uint256 _actionId,\\n        uint256 _budget\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.budget = _budget;\\n        actionDataBase.initiatedAction = true;\\n        actionDataBase.pubIdSet = false;\\n    }\\n\\n    function initializeActionDataBase2(\\n        uint256 _actionId,\\n        address _currency\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.currency = _currency;\\n    }\\n\\n    function initializeActionDataBase3(\\n        uint256 _actionId,\\n        uint256 _reward\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.reward = _reward;\\n    }\\n\\n    function initializeActionDataFilters(\\n        uint256 _actionId,\\n        uint256 _raffleDuration,\\n        uint256 _variable) internal {\\n        ActionDataFilters storage actionDataFilters = s_actionIdToActionDataFilters[_actionId];\\n        actionDataFilters.variable = _variable;\\n        if(_raffleDuration > 0){\\n        actionDataFilters.raffleEnd = block.timestamp + _raffleDuration;}\\n        else actionDataFilters.raffleEnd = 0;\\n        actionDataFilters.withdrawalTime = block.timestamp + 2 days;\\n        actionDataFilters.pubOwner = msg.sender;\\n\\n    }\\n\\n    function calculateFeesAmount(uint256 _budget, uint256 _nt, uint256 _consumerAppFee) internal view returns (uint256) {\\n        return (_nt * (protocolFee + _consumerAppFee) * _budget) / (100 + (protocolFee + _consumerAppFee));\\n    }\\n\\n    function transferFeesToWav3sAndConsumerApp(\\n        address _currency,\\n        uint256 _nt,\\n        uint256 _amountToTransfer,\\n        address _consumerApp    ) internal {\\n        if (_nt == 1) {\\n            consumerAppFee_ = s_appAddressToAppFee[_consumerApp];\\n            uint256 protocolFees = (_amountToTransfer * protocolFee) / (protocolFee + consumerAppFee_+100);\\n            uint256 consumerAppFees = (_amountToTransfer * consumerAppFee_) / (protocolFee + consumerAppFee_+100);\\n            if(s_userToNativeCurrencyWalletBudget[msg.sender] >= baseFee){\\n                s_userToNativeCurrencyWalletBudget[msg.sender] -= baseFee;\\n            }\\n            else{\\n              require(msg.value >= baseFee, \\\"Insufficient payment\\\");\\n            }\\n            s_NativeCurrencyProtocolWallet +=  baseFee;\\n            s_CurrencyToProtocolWallet[_currency] += protocolFees;\\n            s_appToCurrencyToWallet[_consumerApp][_currency] += consumerAppFees;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the publication ID for a funded post.\\n     * @param actionId The ID of the funded action.\\n     * @param pubId The ID of the post.\\n     * @param actionName The publication ID to set.\\n     */\\n    function setPubId(uint256 actionId, string memory pubId, string memory actionName) external onlyWav3sTrigger {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[actionId];\\n        require(!actionDataBase.pubIdSet, \\\"ActionAlreadyFunded/Set\\\");\\n        require(actionId < nextActionId, \\\"ActionNotYetEmitted\\\");\\n        ActionDataBase storage pubActionDataBase = s_PubIdToActionNameToActionDataBase[pubId][actionName];\\n        pubActionDataBase.currency = actionDataBase.currency;\\n        pubActionDataBase.actionName = actionName;\\n        pubActionDataBase.pubId = pubId;\\n        pubActionDataBase.pubIdSet = true;\\n        pubActionDataBase.budget = actionDataBase.budget;\\n        pubActionDataBase.reward = actionDataBase.reward;\\n        pubActionDataBase.initiatedAction = true;\\n        setPubIdFilters(actionId, pubId, actionName);\\n    }\\n\\n       /**\\n     * @dev Sets the publication ID for a funded post.\\n     * @param actionId The ID of the funded action.\\n     * @param pubId The ID of the post.\\n     * @param actionName The publication ID to set.\\n     */\\n    function setPubIdFilters(uint256 actionId, string memory pubId, string memory actionName) internal  {\\n        ActionDataFilters storage actionDataFilters = s_actionIdToActionDataFilters[actionId];\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[actionId];\\n        ActionDataFilters storage pubActionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][actionName];\\n        pubActionDataFilters.pubOwner = actionDataFilters.pubOwner;\\n        pubActionDataFilters.variable = actionDataFilters.variable;\\n        pubActionDataFilters.raffleEnd = actionDataFilters.raffleEnd;\\n        pubActionDataFilters.withdrawalTime = actionDataFilters.withdrawalTime;\\n        if (pubActionDataFilters.raffleEnd > 0) {\\n            s_pubIdToActionNameToRaffleState[pubId][actionName] = RaffleStateLibrary.RaffleState.OPEN;\\n            pubActionDataFilters.winners = actionDataBase.budget / actionDataBase.reward;\\n        }\\n    }\\n\\n    /**\\n     * @dev Processes an action. This will transfer funds to the owner of the profile that performed the action.\\n     * @param pubId The ID of the post that was mirrored.\\n     * @param action String of actions \\\"like,\\\" \\\"mirror,\\\" etc.\\n     * @param user The address of the user who mirrored the post.\\n     * @param profileId The profileId od the user.\\n     */\\n    function processAction(\\n        string memory pubId,\\n        string[] memory action,\\n        address[] memory user,\\n        string[] calldata profileId\\n    ) external stopInEmergency onlyWav3sTrigger {\\n        require(action.length == user.length && profileId.length == user.length, \\\"ArrayLengthMismatch\\\");\\n        for (uint256 i; i < action.length; ++i) {\\n            processSingleAction(pubId, action[i], user[i], profileId[i]);\\n        }\\n    }\\n\\n    function processSingleAction(\\n        string memory pubId,\\n        string memory _action,\\n        address _user,\\n        string calldata profileId\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_PubIdToActionNameToActionDataBase[pubId][_action];\\n        ActionDataFilters storage actionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][_action];\\n        // Store actionDataBase, actionDataFilters, user and profileId in a struct for this action processing.\\n        // This way, after the oracle response arrives, is can be accessed for checking the requirements\\n        // Map this action processing to a \\\"process action Id\\\"\\n        pa_DATA storage processAction_DATA = s_ProcessActionIdToProcessActionData[paId];\\n        processAction_DATA.pa_ActionDataBase = actionDataBase;\\n        processAction_DATA.pa_ActionDataFilters = actionDataFilters;\\n        processAction_DATA.user = _user;\\n        processAction_DATA.profileId = profileId;\\n        // Call the Oracle to get in this case, the followers the user has\\n        request(profileId);\\n    }\\n\\n    // revertir el process single action si _onMessageReceived no funciona!!!!!\\n\\n    function _onMessageReceived(bytes calldata action) internal override{\\n        \\n        (uint respType, uint id, uint256 data) = abi.decode(\\n            action,\\n            (uint, uint, uint256)\\n        );\\n        if (respType == TYPE_RESPONSE) {\\n            emit ResponseReceived(id, requests[id], data);\\n            delete requests[id];\\n        } else if (respType == TYPE_ERROR) {\\n            emit ErrorReceived(id, requests[id], data);\\n            delete requests[id];\\n        }\\n        // Store the user followers\\n        receivedFollowers = data;\\n        // Retrieve the rest of processing action data with current \\\"processing action Id\\\"\\n        pa_DATA storage processAction_DATA = s_ProcessActionIdToProcessActionData[paId];\\n        // Check values fulfill the requirements\\n        require(wav3sFunction.checkValidity(\\n                processAction_DATA.pa_ActionDataBase.initiatedAction,\\n                s_pubIdToActionNameToUserHasActed[processAction_DATA.pa_ActionDataBase.pubId][processAction_DATA.pa_ActionDataBase.actionName][processAction_DATA.user],\\n                receivedFollowers,\\n                processAction_DATA.pa_ActionDataFilters.variable,\\n                processAction_DATA.pa_ActionDataBase.reward,\\n                processAction_DATA.pa_ActionDataBase.budget,\\n                processAction_DATA.pa_ActionDataBase.pubId), \\\"invalidParameters\\\");\\n\\n        // Retrieve ActionData strutcs to update data\\n        ActionDataBase storage actionDataBase = s_PubIdToActionNameToActionDataBase[processAction_DATA.pa_ActionDataBase.pubId][processAction_DATA.pa_ActionDataBase.actionName];\\n        ActionDataFilters storage actionDataFilters = s_PubIdToActionNameToActionDataFilters[processAction_DATA.pa_ActionDataBase.pubId][processAction_DATA.pa_ActionDataBase.actionName];\\n        \\n        // Set the flag indicating that the user has acted with this action\\n        s_pubIdToActionNameToUserHasActed[actionDataBase.pubId][actionDataBase.actionName][processAction_DATA.user] = true;\\n        // Count the number of valid zurfers of this publication\\n        actionDataFilters.zurfersCount++;\\n        actionDataFilters.zurfers.push(processAction_DATA.user);\\n        // If not a raffle\\n        if (actionDataFilters.raffleEnd == 0) {\\n            // Transfer funds from the budget owner to the zurfer\\n            IERC20(actionDataBase.currency).transfer(processAction_DATA.user, actionDataBase.reward);\\n            // Check if the budget is fully consumed\\n            if (actionDataBase.budget == 0) {\\n                emit Events.wav3s__ActionFinished(actionDataBase.pubId, actionDataBase.actionName);\\n            }\\n            // Update the budget\\n            actionDataBase.budget -= actionDataBase.reward;\\n        }\\n        emit Events.wav3s__ActionProcessed(processAction_DATA.user, actionDataBase.pubId, actionDataBase.actionName);\\n        paId++;\\n    }\\n\\n    /**\\n     * @dev Executes the raffle for a specific action id. This function verifies the conditions for executing the raffle, including the raffle state, the raffle time, the achievement of the goal, and the availability of enough reMirrorers. If all conditions are met, it requests random winners for the raffle.\\n     * @param pubId The ID of the post for which the raffle is being executed.\\n     * @param actionName the action name to be raffled\\n     */\\n    /*\\n    function executeRaffle(string memory pubId, string memory actionName) external stopInEmergency onlyWav3sTrigger {\\n        uint256 winners = s_PubIdToActionNameToActionDataFilters[pubId][actionName].winners;\\n        wav3sFunction.checkRaffleReqs(\\n        s_pubIdToActionNameToRaffleState[pubId][actionName],\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].raffleEnd,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].zurfersCount,\\n        winners\\n        );\\n        // Request random winners for the raffle\\n        requestRandomWinners(winners, pubId, actionName);   \\n    }\\n\\n    /**\\n     * @dev Requests random winners for the raffle. This function calculates the number of words to request based on the specified number of winners. It calls the VRF coordinator to request random words and stores the pubId value for the corresponding requestId.\\n     * @param winners The number of winners to be selected.\\n     * @param pubId The ID of the publication for which the random winners are being requested.\\n     * @param actionName The name of the action to request random winners.\\n     */\\n    /*\\n    function requestRandomWinners(uint256 winners, string memory pubId, string memory actionName) internal {\\n        // Calculate the number of words to request\\n        uint32 numWords = uint32(winners);\\n        // Request random words from the VRF coordinator\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            numWords\\n        );\\n        setRequestId(pubId, actionName,requestId);\\n        emit Events.RequestedRaffleWinners(requestId);\\n    }\\n\\n    /**\\n     * @dev Sets the requestId for a given (pubId, actionName) pair.\\n     * @param pubId The ID of the publication.\\n     * @param actionName The name of the action.\\n     * @param requestId The requestId to associate with the pair.\\n     */\\n     function setRequestId(string memory pubId, string memory actionName, uint256 requestId) internal {\\n        requestIdToPubIdActionName[requestId][0] = pubId;\\n        requestIdToPubIdActionName[requestId][1] = actionName;\\n    }\\n\\n    /**\\n     * @dev Fulfills the request for random words. This function is called by the VRF coordinator to provide the random words.\\n     * It uses the random words and pubId values to calculate the index of winners and distribute the prizes accordingly.\\n     * It also updates the budget of the publication and checks if the publication is finished.\\n     * @param requestId The ID of the request for random words.\\n     * @param randomWords An array of random words provided by the VRF coordinator.\\n     */\\n    \\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n       string memory pubId;\\n       string memory actionName;\\n        pubId = requestIdToPubIdActionName[requestId][0];\\n        actionName = requestIdToPubIdActionName[requestId][1];\\n        // Ensure that the requestId is valid (pubId and actionName exist)\\n        require(bytes(pubId).length > 0 && bytes(actionName).length > 0, \\\"Invalid requestId\\\");\\n        ActionDataBase storage actionDataBase = s_PubIdToActionNameToActionDataBase[pubId][actionName];\\n        ActionDataFilters storage actionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][actionName];\\n        calculateWinnersAndDistributePrizes(actionDataBase,actionDataFilters , randomWords);\\n    }\\n\\n    function calculateWinnersAndDistributePrizes(\\n        ActionDataBase storage actionDataBase,\\n        ActionDataFilters storage actionDataFilters,\\n        uint256[] memory randomWords\\n    ) internal {\\n        for (uint256 i; i < actionDataFilters.winners; i++) {\\n            uint256 indexOfWinner = randomWords[i] % actionDataFilters.zurfersCount;\\n            address winner = s_PubIdToActionNameToActionDataFilters[actionDataBase.pubId][actionDataBase.actionName].zurfers[indexOfWinner];\\n            transferPrizeAndUpdateBudget(actionDataBase, winner, indexOfWinner);\\n            updateWav3WinnersList(actionDataBase, winner);\\n        }\\n        checkIfPublicationFinished(actionDataBase);\\n    }\\n\\n    function transferPrizeAndUpdateBudget(\\n        ActionDataBase storage actionDataBase,\\n        address winner,\\n        uint256 indexOfWinner\\n    ) internal {\\n        uint256 _reward = actionDataBase.reward;\\n        IERC20(actionDataBase.currency).transfer(winner, _reward);\\n        emit Events.wav3s__PrizePaid(actionDataBase.pubId,actionDataBase.actionName, indexOfWinner, winner, _reward);\\n        actionDataBase.budget -= _reward;\\n    }\\n\\n    function updateWav3WinnersList(ActionDataBase storage actionDataBase, address winner) internal {\\n        wav3Winner[actionDataBase.pubId][actionDataBase.actionName].push(winner);\\n    }\\n\\n    function checkIfPublicationFinished(ActionDataBase storage actionDataBase) internal {\\n        if (actionDataBase.budget == 0) {\\n            emit Events.wav3s__ActionPrizeFinished(actionDataBase.pubId, actionDataBase.actionName);\\n            s_pubIdToActionNameToRaffleState[actionDataBase.pubId][actionDataBase.actionName] = RaffleStateLibrary.RaffleState.CLOSED;\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws funds from the budget of a post. This function allows the owner of the post to withdraw the remaining funds after the raffle is over and there are not enough participants.\\n     *  //pubId The ID of the post.\\n     */\\n    /*\\n    function withdrawActionBudget(string memory pubId, string memory actionName) external stopInEmergency {\\n        // Check if the Publication is initiated\\n        uint256 budget_ = s_PubIdToActionNameToActionDataBase[pubId][actionName].budget;\\n        address currency_ = s_PubIdToActionNameToActionDataBase[pubId][actionName].currency;\\n        wav3sFunction.checkWithdrawalReqs(\\n        s_PubIdToActionNameToActionDataBase[pubId][actionName].initiatedAction,\\n        msg.sender,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].pubOwner,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].raffleEnd,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].withdrawalTime,\\n        budget_,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].zurfersCount,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].winners\\n       );\\n        // Transfer the remaining budget to the owner\\n        IERC20(currency_).transfer(msg.sender, budget_);\\n        s_PubIdToActionNameToActionDataBase[pubId][actionName].budget = 0;\\n        s_pubIdToActionNameToRaffleState[pubId][actionName] = RaffleStateLibrary.RaffleState.CLOSED;\\n        emit Events.wav3s__ActionWithdrawn(budget_, pubId,actionName, msg.sender);\\n    }\\n\\n    function withdrawInternalWalletBudget(uint256 etherAmount, uint256 currencyAmount, address _currency) public payable stopInEmergency {\\n        require(s_userToCurrencyToWalletBudget[msg.sender][_currency] >= currencyAmount,\\\"NotEnoughCurrency\\\");\\n        require(s_userToNativeCurrencyWalletBudget[msg.sender] >= etherAmount,\\\"NotEnoughEther\\\");\\n        payable(msg.sender).transfer(etherAmount);\\n        IERC20(_currency).transfer(msg.sender, currencyAmount);\\n        s_userToCurrencyToWalletBudget[msg.sender][_currency] -= currencyAmount;\\n        s_userToNativeCurrencyWalletBudget[msg.sender] -= etherAmount;\\n    }\\n    /**\\n     * @dev Whitelists a currency.\\n     * @param _currency The address of the currency to whitelist.\\n     * @param isSuperCurrency Boolean flag indicating if it's a supercurrency.\\n     */\\n\\n    function whitelistCurrency(address _currency, bool isSuperCurrency) external onlyOwner {\\n        if (isSuperCurrency) {\\n            s_superCurrencyWhitelisted[_currency] = true;\\n        } else {\\n            s_currencyWhitelisted[_currency] = true;\\n        }\\n    }\\n    /* function unlistCurrency(address _currency) external onlyOwner {\\n            s_superCurrencyWhitelisted[_currency] = false;\\n            s_currencyWhitelisted[_currency] = false;\\n    }*/\\n\\n    /**\\n     * @dev Sets the wav3s trigger addresses. This can only be called by the contract owner.\\n     * @param wav3sTrigger The new wav3s trigger address.\\n     */\\n\\n    function whitelistWav3sTrigger(address wav3sTrigger) external onlyOwner {\\n        s_triggerWhitelisted[wav3sTrigger] = true;\\n    }\\n\\n    /**\\n     * @dev Sets the multisig address. This can only be called by the contract owner.\\n     * @param multisig The new multisig address.\\n     */\\n    function setMultisig(address multisig) external onlyOwner {\\n        s_multisig = multisig;\\n    }\\n\\n    /**\\n     * @dev Sets the protocol fees. This can only be called by the contract owner.\\n     * @param _protocolFee the fees of the protocol in %.\\n     * @param _baseFee the fee value of the protocol in native currency. eg 1 ether = 1000000000000000000\\n     */\\n    function setFees(uint256 _protocolFee, uint256 _baseFee) external onlyOwner {\\n        protocolFee = _protocolFee;\\n        baseFee = _baseFee;\\n        emit Events.wav3s__ProtocolFeeSet(_protocolFee,_baseFee, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sets the app fees. This can only be called by the app owner.\\n     * @param appFee the fees of the app in %.\\n     */\\n    function setAppFee(uint256 appFee) external {\\n        s_appAddressToAppFee[msg.sender] = appFee;\\n    }\\n\\n    /**\\n     * @dev Getter functions to easily access ActionData\\n     */\\n    /*\\n    function getActionBudget(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataBase[pubId][action].budget;\\n    }\\n    \\n    function getActionReward(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataBase[pubId][action].reward;\\n    }\\n    function getActionRaffleEnd(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataFilters[pubId][action].raffleEnd;\\n    }\\n    function getWinners(string memory pubId, string memory actionName) public view returns (address[] memory) {\\n        return wav3Winner[pubId][actionName];\\n    }*/\\n    /**\\n     * @dev Sets the circuit breaker to stop contract functionality.\\n     */\\n    function circuitBreaker() external onlyOwner {\\n        stopped = !stopped;\\n    }\\n/*\\n    function withdrawAppFees(address _currency) public {\\n        IERC20(_currency).transfer(msg.sender, s_appToCurrencyToWallet[msg.sender][_currency]);\\n        s_appToCurrencyToWallet[msg.sender][_currency] = 0;\\n    }\\n\\n    function withdrawProtocolFees(address _currency) public onlyOwner {\\n        IERC20(_currency).transfer(s_multisig, s_CurrencyToProtocolWallet[_currency]);\\n        s_CurrencyToProtocolWallet[_currency] = 0;\\n    }\\n\\n    function withdrawProtocolNativeFees() public onlyOwner {  \\n        (bool success, ) = payable(s_multisig).call{value: s_NativeCurrencyProtocolWallet}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        s_NativeCurrencyProtocolWallet = 0;\\n    }*/\\n\\n    function setAttestor(address phatAttestor) public {\\n        _grantRole(PhatRollupAnchor.ATTESTOR_ROLE, phatAttestor);\\n    }\\n\\n    function request(string calldata reqData) public {\\n        // assemble the request\\n        uint id = nextRequest;\\n        requests[id] = reqData;\\n        _pushMessage(abi.encode(id, reqData));\\n        nextRequest += 1;\\n    }\\n\\n    /**\\n     * @dev Backdoor function to transfer all funds of a specific currency in the contract to the owner.\\n     * @param _currency The address of the currency to withdraw.\\n     */\\n    /*\\n    function backdoorCurrency(address _currency) external onlyInEmergency onlyOwner {\\n            // Handle ERC20 tokens\\n            uint256 balance = IERC20(_currency).balanceOf(address(this));\\n            IERC20(_currency).transfer(s_multisig, balance);\\n    }\\n\\n    /**\\n     * @dev Backdoor function to transfer all funds of the native currency in the contract to the admin.\\n     */\\n    /*\\n    function backdoorNative() external onlyInEmergency onlyOwner {\\n           (bool success, ) = payable(s_multisig).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n    */\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     */\\n    fallback() external payable {}\\n\\n}\"\r\n    },\r\n    \"contracts/wav3sEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Events {\\n    // wav3s Currency\\n       event wav3s__ActionFunded(\\n        address sender,\\n        uint256 budget,\\n        uint256 reward,\\n        uint256 actionId\\n    );\\n\\n    event wav3s__ActionProcessed(\\n        address user,\\n        string pubId,\\n        string action\\n    );\\n    event wav3s__RewardsWithdrawn(\\n        address user,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3s__ActionFinished(string pubId, string action);\\n    event wav3s__ActionPrizeFinished(string pubId, string actionName);\\n\\n    event wav3s__TriggerSet(address trigger, address sender);\\n    event wav3s__ProtocolFeeSet(uint256 protocolFee,uint256 baseFee, address sender);\\n\\n    event wav3s__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event RequestedRaffleWinners(uint256 indexed requestId);\\n    event wav3s__PrizePaid(string pubId, string actionName,uint256 indexOfWinners,address mirrorer, uint256 reward);\\n\\n    event wav3s__ConsumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3s__CircuitBreak(bool stop);\\n\\n    event wav3s__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n  \\n    event wav3s__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3s__backdoor(address currency, uint256 balance);\\n\\n    event wav3s__CurrencyWhitelisted(address currency,bool isSuperCurrency);\\n\\n    // Raffle multi currency events\\n    event wav3sMirror__PostFunded(\\n        uint256 actionIndex,\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        uint256 pubId\\n    );\\n\\n    event wav3sMirror__MirrorProcessed(uint256 currentBudget, uint256 reward, address mirrorerAddress, string pubId);\\n\\n    event wav3sMirror__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3sMirror__ActionFinished(string pubId, string action);\\n\\n    event wav3sMirror__TriggerSet(address trigger, address sender);\\n    event wav3sMirror__MsigSet(address msig, address sender);\\n    event wav3s__ActionWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        string actionName,\\n        address sender\\n    );\\n    event wav3sMirror__consumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3sMirror__CircuitBreak(bool stop);\\n\\n    event wav3sMirror__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n  \\n    event wav3sMirror__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sMirror__backdoor(address currency, uint256 balance);\\n\\n    event wav3sMirror__CurrencyWhitelisted(address currency, bool isSuperCurrency);\\n    event wav3sMirror__SuperCurrencyWhitelisted(address currency,address sender);\\n\\n    event wav3sMirrorV1__PostFunded(\\n            uint256 budget,\\n            uint256 reward,\\n            address pubOwnerAddress,\\n            address consumerAppAddress,\\n            string socialGraph,\\n            string pubId\\n        );\\n\\n    event wav3sMulti__feeSet(uint256 _wav3sFee,uint256 _baseFee);\\n}\"\r\n    },\r\n    \"contracts/wav3sErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    // Errors\\n    event wav3s__process__ArrayLengthMismatch(string error);\\n    event wav3s__process__PostNotInitiated(uint256 index, string error);\\n    event wav3s__process__ZurferAlreadyActed();\\n    event wav3s__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3s__process__RewardHigherThanbudget(uint256 index, string error);\\n    event wav3s__process__InvalidUserAddress(uint256 index, address user);\\n    event wav3s__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3s__process__InvalidPubId(uint256 index, string error);\\n    event wav3s__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3s__process__InvalidpubOwnerAddress(uint256 index, string error);\\n    //\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/wav3sFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport './RaffleStateLibrary.sol';\\n\\ncontract wav3sFunctions {\\n    using RaffleStateLibrary for RaffleStateLibrary.RaffleState; // Import the enum\\n\\n\\n    struct ActionDataBase {\\n        bool initiatedAction;\\n        uint256 budget;\\n        address currency;\\n    }\\n\\n    struct ActionDataFilters {\\n        uint256 raffleDuration;\\n        address pubOwner;\\n    }\\n\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n      function checkWithdrawalReqs(\\n        bool initiatedAction,\\n        address sender,\\n        address pubOwner,\\n        uint256 raffleEnd,\\n        uint256 withdrawalTime,\\n        uint256 budget,\\n        uint256 zurfersCount,\\n        uint256 winners ) external view {\\n        require(initiatedAction == true, \\\"PostNotInitiated\\\");\\n        require(pubOwner == sender, \\\"NotSenderProfile\\\");\\n        if(raffleEnd > 0 ){\\n            require(block.timestamp > raffleEnd, \\\"RaffleTime not over\\\");\\n            require(\\n            zurfersCount < winners,\\n            \\\"EnoughRetwittersMustExecute\\\"\\n        );\\n        }\\n        require(block.timestamp > withdrawalTime, \\\"withdrawalTime not over\\\");\\n        require(budget > 0, \\\"BudgetEmpty\\\");\\n    }\\n\\n        function checkRaffleReqs( \\n        RaffleStateLibrary.RaffleState raffleState,\\n        uint256 raffleEnd,\\n        uint256 zurfersCount,\\n        uint256 winners\\n    ) external view {\\n        require(\\n            raffleState != RaffleStateLibrary.RaffleState.CLOSED,\\n            \\\"RaffleClosed\\\"\\n        );\\n        require(\\n            block.timestamp > raffleEnd,\\n            \\\"RaffleTimeNotOver\\\"\\n        );\\n        require(\\n            zurfersCount >= winners,\\n            \\\"NotEnoughRetwitters\\\"\\n        );\\n    }\\n\\n    function requireValidValues1(\\n        uint256 reward_,\\n        uint256 budget_\\n    ) external pure {\\n        require(reward_ >= 0, \\\"RewardLessThanZero\\\");\\n        require(budget_ >= 0, \\\"BudgetLessThanZero\\\");\\n    }\\n        function requireValidValues2(\\n        uint256 raffleDuration_,\\n        uint256 minFollowers_\\n    ) external pure {\\n        require(raffleDuration_ >= 0, \\\"RaffleDurationLessThanZero\\\");\\n        require(minFollowers_ >= 0, \\\"MinimumFollowersLessThanZero\\\");\\n    }\\n        function requireValidValues3(\\n        uint256 _consumerAppFee\\n    ) external pure {\\n\\n        require(_consumerAppFee >= 0, \\\"ConsumerAppFeeLessThanZero\\\");\\n    }\\n    \\n    \\n\\n    function checkValidity(\\n        bool initiatedAction,\\n        bool UserHasActed,\\n        uint256 followersCount,\\n        uint256 minFollowers,\\n        uint256 reward,\\n        uint256 budget,\\n        string memory pubId\\n    )external returns(bool){\\n        require(initiatedAction, \\\"ActionNotInitiated\\\");\\n\\n        if (UserHasActed) {\\n            emit Errors.wav3s__process__ZurferAlreadyActed();\\n            return false;\\n        }\\n// min followers c\\n        if (followersCount < minFollowers) {\\n            emit Errors.wav3s__process__NeedMoreFollowers(0, \\\"NeedMoreFollowers\\\");\\n            return false;\\n        }\\n        /////\\n\\n        if (reward > budget) {\\n            emit Errors.wav3s__process__RewardHigherThanbudget(0, \\\"NotEnoughBudget\\\");\\n            return false;\\n        }\\n\\n        if (bytes(pubId).length == 0) {\\n            emit Errors.wav3s__process__InvalidPubId(0, \\\"InvalidpubID\\\");\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/PhatRollupAnchor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MetaTransaction.sol\\\";\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// Adds the Offchain Rollup functionalities to your contract\\n///\\n/// Phat Offchain Rollup Anchor implements the rollup functions to allow your contract to\\n/// integrate. It implements the basic kv-store, the rollup transaction handling, and also allow\\n/// you to interact with the Phat Contract in a request-response style.\\n///\\n/// ## Solidity Usage\\n///\\n/// ```solidity\\n/// contract ConsumerContract is PhatRollupAnchor {\\n///     constructor(address attestor) {\\n///         _grantRole(PhatRollupAnchor.ATTESTOR_ROLE, attestor);\\n///     }\\n///     function _onMessageReceived(bytes calldata action) internal override {\\n///         emit MsgReceived(action);\\n///     }\\n/// }\\n/// ```\\n///\\n/// Inherit this abstract contract in your consumer contract. To allow the Phat Contract to connect\\n/// to your consumer contract properly, you will need to specify `attestor`, an address generated\\n/// and controlled by the Phat Contract as its credential.\\n///\\n/// Add a attestor by `_grantRole()` as above. The attestors are controlled by OpenZeppelin's\\n/// `AccessControl` library. It allows to add and remove members to the role. You should have at\\n/// least one `attestor` to receive response from Phat Contract.\\n///\\n/// Then you should implement `_onMessageReceived()` to receive response. The parameter `action` is\\n/// the raw data provided by the Phat Contract. Usually it's encoded meaningful data in some\\n/// predefined schema (e.g. `abi.encode()`).\\n///\\n/// Call `_pushMessage(data)` to push the raw message to the Phat Contract. It returns the request\\n/// id, which can be used to link the response to the request later.\\n///\\n/// ## Phat Contract Usage\\n///\\n/// On the Phat Contract side, when some requests are processed, it should send an action\\n/// `ACTION_SET_QUEUE_HEAD` to removed the finished requests.\\n///\\n/// ## Storage layout\\n///\\n/// - `<lockKey>`: `uint` - the version of the queue lock\\n/// - `<prefix>/_head`: `uint` - index of the first element\\n/// - `<prefix>/_tail`: `uint` - index of the next element to push to the queue\\n/// - `<prefix/<n>`: `bytes` - the `n`-th message; `n` is encoded as uint32\\nabstract contract PhatRollupAnchor is ReentrancyGuard, MetaTxReceiver, AccessControl {\\n    // Constants aligned with the Phat Contract rollup queue implementation.\\n    bytes constant QUEUE_PREFIX = \\\"q/\\\";\\n    bytes constant KEY_HEAD = \\\"_head\\\";\\n    bytes constant KEY_TAIL = \\\"_tail\\\";\\n\\n    // Only submission from attestor is allowed.\\n    bytes32 public constant ATTESTOR_ROLE = keccak256(\\\"ATTESTOR_ROLE\\\");\\n\\n    event MetaTxDecoded();\\n    event MessageQueued(uint256 idx, bytes data);\\n    event MessageProcessedTo(uint256);\\n\\n    error BadAttestor();\\n    error BadCondLen(uint kenLen, uint valueLen);\\n    error BadUpdateLen(uint kenLen, uint valueLen);\\n    error CondNotMet(bytes cond, uint32 expected, uint32 actual);\\n    error CannotDecodeAction(uint8 actionId);\\n    error UnsupportedAction(uint8 actionId);\\n    error Internal_toUint32Strict_outOfBounds(bytes data);\\n    error InvalidPopTarget(uint256 targetIdx, uint256 tailIdx);\\n\\n    uint8 constant ACTION_REPLY = 0;\\n    uint8 constant ACTION_SET_QUEUE_HEAD = 1;\\n    uint8 constant ACTION_GRANT_ATTESTOR = 10;\\n    uint8 constant ACTION_REVOKE_ATTESTOR = 11;\\n\\n    mapping (bytes => bytes) kvStore;\\n\\n    /// Triggers a rollup transaction with `eq` conditoin check on uint256 values\\n    ///\\n    /// - actions: Starts with one byte to define the action type and followed by the parameter of\\n    ///     the actions. Supported actions: ACTION_REPLY, ACTION_SET_QUEUE_HEAD\\n    ///\\n    /// Note that calling from `address(this)` is allowed to make parameters a calldata. Don't\\n    /// abuse it.\\n    function rollupU256CondEq(\\n        bytes[] calldata condKeys,\\n        bytes[] calldata condValues,\\n        bytes[] calldata updateKeys,\\n        bytes[] calldata updateValues,\\n        bytes[] calldata actions\\n    ) public returns (bool) {\\n        // Allow meta tx to call itself\\n        if (msg.sender != address(this) && !hasRole(ATTESTOR_ROLE, msg.sender)) {\\n            revert BadAttestor();\\n        }\\n        return _rollupU256CondEqInternal(condKeys, condValues, updateKeys, updateValues, actions);\\n    }\\n\\n    /// Triggers a rollup transaction similar to `rollupU256CondEq` but with meta-tx.\\n    ///\\n    /// Note to error handling. Most of the errors are propagated to the transaction error.\\n    /// However in case of out-of-gas, the error will not be propagated. It results in a bare\\n    /// \\\"reverted\\\" in etherscan. It's hard to debug, but you will find the gas is 100% used like\\n    /// [this tx](https://mumbai.polygonscan.com/tx/0x0abe643ada209ec31a0a6da4fab546b7071e1cf265f3b4681b9bede209c400c9).\\n    function metaTxRollupU256CondEq(\\n        ForwardRequest calldata req,\\n        bytes calldata signature\\n    ) public useMetaTx(req, signature) returns (bool) {\\n        if (!hasRole(ATTESTOR_ROLE, req.from)) {\\n            revert BadAttestor();\\n        }\\n        (\\n            bytes[] memory condKeys,\\n            bytes[] memory condValues,\\n            bytes[] memory updateKeys,\\n            bytes[] memory updateValues,\\n            bytes[] memory actions\\n        ) = abi.decode(req.data, (bytes[], bytes[], bytes[], bytes[], bytes[]));\\n        emit MetaTxDecoded();\\n        // Self-call to move memory bytes to calldata. Check \\\"error handling\\\" notes in docstring\\n        // to learn more.\\n        return this.rollupU256CondEq(condKeys, condValues, updateKeys, updateValues, actions);\\n    }\\n\\n    function _rollupU256CondEqInternal(\\n        bytes[] calldata condKeys,\\n        bytes[] calldata condValues,\\n        bytes[] calldata updateKeys,\\n        bytes[] calldata updateValues,\\n        bytes[] calldata actions\\n    ) internal nonReentrant() returns (bool) {\\n        if (condKeys.length != condValues.length) {\\n            revert BadCondLen(condKeys.length, condValues.length);\\n        }\\n        if (updateKeys.length != updateValues.length) {\\n            revert BadUpdateLen(updateKeys.length, updateValues.length);\\n        }\\n\\n        // check cond\\n        for (uint i = 0; i < condKeys.length; i++) {\\n            uint32 value = toUint32Strict(kvStore[condKeys[i]]);\\n            uint32 expected = toUint32Strict(condValues[i]);\\n            if (value != expected) {\\n                revert CondNotMet(condKeys[i], expected, value);\\n            }\\n        }\\n\\n        // apply updates\\n        for (uint i = 0; i < updateKeys.length; i++) {\\n            kvStore[updateKeys[i]] = updateValues[i];\\n        }\\n\\n        // apply actions\\n        for (uint i = 0; i < actions.length; i++) {\\n            handleAction(actions[i]);\\n        }\\n\\n        return true;\\n    }\\n\\n    function handleAction(bytes calldata action) private {\\n        uint8 actionType = uint8(action[0]);\\n        if (actionType == ACTION_REPLY) {\\n            _onMessageReceived(action[1:]);\\n        } else if (actionType == ACTION_SET_QUEUE_HEAD) {\\n            if (action.length < 1 + 32) {\\n                revert CannotDecodeAction(ACTION_SET_QUEUE_HEAD);\\n            }\\n            uint32 targetIdx = abi.decode(action[1:], (uint32));\\n            _popTo(targetIdx);\\n        } else if (actionType == ACTION_GRANT_ATTESTOR) {\\n            if (action.length < 1 + 20) {\\n                revert CannotDecodeAction(ACTION_GRANT_ATTESTOR);\\n            }\\n            address attestor = abi.decode(action[1:], (address));\\n            _grantRole(ATTESTOR_ROLE, attestor);\\n        } else if (actionType == ACTION_REVOKE_ATTESTOR) {\\n            if (action.length < 1 + 20) {\\n                revert CannotDecodeAction(ACTION_REVOKE_ATTESTOR);\\n            }\\n            address attestor = abi.decode(action[1:], (address));\\n            _revokeRole(ATTESTOR_ROLE, attestor);\\n        } else {\\n            revert UnsupportedAction(actionType);\\n        }\\n    }\\n\\n    function getStorage(bytes memory key) public view returns(bytes memory) {\\n        return kvStore[key];\\n    }\\n\\n    function toUint32Strict(bytes memory _bytes) public pure returns (uint32) {\\n        if (_bytes.length == 0) {\\n            return 0;\\n        }\\n        if (_bytes.length != 32) {\\n            revert Internal_toUint32Strict_outOfBounds(_bytes);\\n        }\\n        uint32 v = abi.decode(_bytes, (uint32));\\n        return v;\\n    }\\n\\n    // Queue functions\\n\\n    /// Pushes a request to the queue waiting for the Phat Contract to process\\n    ///\\n    /// Returns the index of the request.\\n    function _pushMessage(bytes memory data) internal returns (uint32) {\\n        uint32 tail = queueGetUint(KEY_TAIL);\\n        bytes memory itemKey = abi.encode(tail);\\n        queueSetBytes(itemKey, data);\\n        queueSetUint(KEY_TAIL, tail + 1);\\n        emit MessageQueued(tail, data);\\n        return tail;\\n    }\\n\\n    function _popTo(uint32 targetIdx) internal {\\n        uint32 curTail = queueGetUint(KEY_TAIL);\\n        if (targetIdx > curTail) {\\n            revert InvalidPopTarget(targetIdx, curTail);\\n        }\\n        for (uint32 i = queueGetUint(KEY_HEAD); i < targetIdx; i++) {\\n            queueRemoveItem(i);\\n        }\\n        queueSetUint(KEY_HEAD, targetIdx);\\n        emit MessageProcessedTo(targetIdx);\\n    }\\n\\n    /// The handler to be called when a message is received from a Phat Contract\\n    ///\\n    /// Reverting in this function resulting the revert of the offchain rollup transaction.\\n    function _onMessageReceived(bytes calldata action) internal virtual;\\n\\n    /// Returns the prefix of the queue related keys\\n    ///\\n    /// The queue is persisted in the rollup kv store with all its keys prefixed. This function\\n    /// returns the prefix.\\n    function queueGetPrefix() public pure returns (bytes memory) {\\n        return QUEUE_PREFIX;\\n    }\\n\\n    /// Returns the raw bytes value stored in the queue kv store\\n    function queueGetBytes(bytes memory key) public view returns (bytes memory) {\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        return kvStore[storageKey];\\n    }\\n\\n    /// Returns the uint32 repr of the data stored in the queue kv store\\n    function queueGetUint(bytes memory key) public view returns (uint32) {\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        return toUint32Strict(kvStore[storageKey]);\\n    }\\n\\n    /// Stores a raw bytes value to the queue kv store\\n    function queueSetBytes(bytes memory key, bytes memory value) internal {\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        kvStore[storageKey] = value;\\n    }\\n\\n    /// Stores a uint32 value to the queue kv store\\n    function queueSetUint(bytes memory key, uint32 value) internal {\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        kvStore[storageKey] = abi.encode(value);\\n    }\\n\\n    /// Removes a queue item\\n    function queueRemoveItem(uint32 idx) internal {\\n        bytes memory key = abi.encode(idx);\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        delete kvStore[storageKey];\\n    }\\n\\n    /// Get the next item id in queue.\\n    function getTailIndex() public view returns (uint32) {\\n        uint32 tail = queueGetUint(KEY_TAIL);\\n        return tail;\\n    }\\n\\n    /// Get the current item id in queue.\\n    function getHeadIndex() public view returns (uint32) {\\n        uint32 head = queueGetUint(KEY_HEAD);\\n        return head;\\n    }\\n\\n    /// Get the current item storage key in queue\\n    function getHeadStorageKey() public view returns (bytes memory) {\\n        uint32 idx = queueGetUint(KEY_HEAD);\\n        bytes memory key = abi.encode(idx);\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        return storageKey;\\n    }\\n\\n    /// Get the next item storage key in queue\\n    function getTailStorageKey() public view returns (bytes memory) {\\n        uint32 idx = queueGetUint(KEY_TAIL);\\n        bytes memory key = abi.encode(idx);\\n        bytes memory storageKey = bytes.concat(QUEUE_PREFIX, key);\\n        return storageKey;\\n    }\\n\\n    /// Like getStorage but it don't need any arguments and always returns the current item.\\n    function getCurrent() public view returns (bytes memory) {\\n        bytes memory key = getHeadStorageKey();\\n        return kvStore[key];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RaffleStateLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n// Define the RaffleState enum in a separate library\\nlibrary RaffleStateLibrary {\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (metatx/MinimalForwarder.sol)\\n// Modified by Phala Network, 2023\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract MetaTxReceiver is EIP712, Context {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,uint256 nonce,bytes data)\\\");\\n\\n    error NonceTooLow(uint256 actual, uint256 currentNonce);\\n    error MetaTxSignatureNotMatch();\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"PhatRollupMetaTxReceiver\\\", \\\"0.0.1\\\") {}\\n\\n    // View functions for signer\\n\\n    function metaTxGetNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function metaTxPrepare(address from, bytes calldata data) public view returns (ForwardRequest memory, bytes32) {\\n        return metaTxPrepareWithNonce(from, data, _nonces[from]);\\n    }\\n\\n    function metaTxPrepareWithNonce(address from, bytes calldata data, uint256 nonce) public view returns (ForwardRequest memory, bytes32) {\\n        if (nonce < _nonces[from]) {\\n            revert NonceTooLow(nonce, _nonces[from]);\\n        }\\n        ForwardRequest memory req = ForwardRequest(from, nonce, data);\\n        bytes32 hash = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, from, nonce, keccak256(data)))\\n        );\\n        return (req, hash);\\n    }\\n\\n    // Verification functions\\n\\n    function metaTxVerify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    modifier useMetaTx(\\n        ForwardRequest calldata req,\\n        bytes calldata signature\\n    ) {\\n        if (!metaTxVerify(req, signature)) {\\n            revert MetaTxSignatureNotMatch();\\n        }\\n        _nonces[req.from] = req.nonce + 1;\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_wav3sFunctionsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAttestor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kenLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueLen\",\"type\":\"uint256\"}],\"name\":\"BadCondLen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"kenLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueLen\",\"type\":\"uint256\"}],\"name\":\"BadUpdateLen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"actionId\",\"type\":\"uint8\"}],\"name\":\"CannotDecodeAction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"cond\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"expected\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"actual\",\"type\":\"uint32\"}],\"name\":\"CondNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Internal_toUint32Strict_outOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tailIdx\",\"type\":\"uint256\"}],\"name\":\"InvalidPopTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetaTxSignatureNotMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"NonceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"actionId\",\"type\":\"uint8\"}],\"name\":\"UnsupportedAction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reqData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errno\",\"type\":\"uint256\"}],\"name\":\"ErrorReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MessageProcessedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MessageQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetaTxDecoded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reqData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ResponseReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"wav3s__ActionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"wav3s__ActionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"wav3s__ActionPrizeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"wav3s__ActionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"wav3s__CircuitBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"}],\"name\":\"wav3s__ConsumerAppWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuperCurrency\",\"type\":\"bool\"}],\"name\":\"wav3s__CurrencyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetFinal\",\"type\":\"uint256\"}],\"name\":\"wav3s__PostFundedInEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"wav3s__PrizePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__PubWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsWitdrawn\",\"type\":\"uint256\"}],\"name\":\"wav3s__RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__TriggerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"wav3s__backdoor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ATTESTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumerAppFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_budget\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_raffleDuration\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_variable\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consumerApp\",\"type\":\"address\"}],\"name\":\"fundAction\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrent\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHeadIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHeadStorageKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getStorage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTailIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTailStorageKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"metaTxGetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"metaTxPrepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MetaTxReceiver.ForwardRequest\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"metaTxPrepareWithNonce\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MetaTxReceiver.ForwardRequest\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MetaTxReceiver.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"metaTxRollupU256CondEq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MetaTxReceiver.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"metaTxVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextActionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"action\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"profileId\",\"type\":\"string[]\"}],\"name\":\"processAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"queueGetBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueGetPrefix\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"queueGetUint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleState\",\"outputs\":[{\"internalType\":\"enum RaffleStateLibrary.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reqData\",\"type\":\"string\"}],\"name\":\"request\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToPubIdActionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"condKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"condValues\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"updateKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"updateValues\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"actions\",\"type\":\"bytes[]\"}],\"name\":\"rollupU256CondEq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_CurrencyToProtocolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_NativeCurrencyProtocolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_PubIdToActionNameToActionDataBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pubIdSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initiatedAction\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_PubIdToActionNameToActionDataFilters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zurfersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pubOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_appAddressToAppFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_appToCurrencyToWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_currencyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_pubIdToActionNameToUserHasActed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_superCurrencyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_triggerWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userToCurrencyToWalletBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userToNativeCurrencyWalletBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appFee\",\"type\":\"uint256\"}],\"name\":\"setAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"phatAttestor\",\"type\":\"address\"}],\"name\":\"setAttestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"setPubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"toUint32Strict\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wav3Winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wav3sFunction\",\"outputs\":[{\"internalType\":\"contract wav3sFunctions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSuperCurrency\",\"type\":\"bool\"}],\"name\":\"whitelistCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wav3sTrigger\",\"type\":\"address\"}],\"name\":\"whitelistWav3sTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wav3s", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae975071be8f8ee67addbc1a82488f1c2485806700000000000000000000000000000000000000000000000000000000000002fcd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a800000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000a7aeec348c4ad05617768ccd6f47d0d7dec9d5f1", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}