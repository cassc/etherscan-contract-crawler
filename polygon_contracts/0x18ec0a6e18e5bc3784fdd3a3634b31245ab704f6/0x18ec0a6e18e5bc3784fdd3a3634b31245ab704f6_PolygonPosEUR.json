{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PolygonPosEUR.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./PolygonPosTokenFrontend.sol\\\";\\n\\ncontract PolygonPosEUR is PolygonPosTokenFrontend {\\n\\n    constructor(address childChainManagerProxy)\\n      PolygonPosTokenFrontend(\\\"Monerium EUR emoney\\\", \\\"EURe\\\", \\\"EUR\\\", childChainManagerProxy)\\n    { }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Basic.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  function safeTransfer(\\n    ERC20Basic _token,\\n    address _to,\\n    uint256 _value\\n  )\\n    internal\\n  {\\n    require(_token.transfer(_to, _value));\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC20/ERC20Basic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * See https://github.com/ethereum/EIPs/issues/179\\n */\\nabstract contract ERC20Basic {\\n  function totalSupply() public virtual view returns (uint256);\\n  function balanceOf(address _who) public virtual view returns (uint256);\\n  function transfer(address _to, uint256 _value) public virtual returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/Roles.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: MIT */\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Roles\\n * @author Francisco Giordano (@frangio)\\n * @dev Library for managing addresses assigned to a Role.\\n * See RBAC.sol for example usage.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping (address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev give an address access to this role\\n   */\\n  function add(Role storage _role, address _addr)\\n    internal\\n  {\\n    _role.bearer[_addr] = true;\\n  }\\n\\n  /**\\n   * @dev remove an address' access to this role\\n   */\\n  function remove(Role storage _role, address _addr)\\n    internal\\n  {\\n    _role.bearer[_addr] = false;\\n  }\\n\\n  /**\\n   * @dev check if an address has this role\\n   * // reverts\\n   */\\n  function check(Role storage _role, address _addr)\\n    internal\\n    view\\n  {\\n    require(has(_role, _addr));\\n  }\\n\\n  /**\\n   * @dev check if an address has this role\\n   * @return bool\\n   */\\n  function has(Role storage _role, address _addr)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _role.bearer[_addr];\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor(){\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipRenounced(owner);\\n    owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address _newOwner) public virtual onlyOwner {\\n    _transferOwnership(_newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param _newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address _newOwner) internal {\\n    require(_newOwner != address(0));\\n    emit OwnershipTransferred(owner, _newOwner);\\n    owner = _newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/NoOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./HasNoEther.sol\\\";\\nimport \\\"./HasNoTokens.sol\\\";\\nimport \\\"./HasNoContracts.sol\\\";\\n\\n/**\\n * @title Base contract for contracts that should not own things.\\n * @author Remco Bloemen <remco@2\u03c0.com>\\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\\n * Owned contracts. See respective base contracts for details.\\n */\\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/HasNoTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CanReclaimToken.sol\\\";\\n\\n/**\\n * @title Contracts that should not own Tokens\\n * @author Remco Bloemen <remco@2\u03c0.com>\\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\\n * owner to reclaim the tokens.\\n */\\ncontract HasNoTokens is CanReclaimToken {\\n\\n /**\\n  * @dev Reject all ERC223 compatible tokens\\n  * @param _from address The address that is transferring the tokens\\n  * @param _value uint256 the amount of the specified token\\n  * @param _data Bytes The data passed from the caller.\\n  */\\n  function tokenFallback(\\n    address _from,\\n    uint256 _value,\\n    bytes calldata _data\\n  )\\n    external\\n    pure\\n  {\\n    _from;\\n    _value;\\n    _data;\\n    revert();\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/HasNoEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Contracts that should not own Ether\\n * @author Remco Bloemen <remco@2\u03c0.com>\\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\\n * in the contract, it will allow the owner to reclaim this Ether.\\n * @notice Ether can still be sent to this contract by:\\n * calling functions labeled `payable`\\n * `selfdestruct(contract_address)`\\n * mining directly to the contract address\\n */\\ncontract HasNoEther is Ownable {\\n\\n  /**\\n  * @dev Constructor that rejects incoming Ether\\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\\n  * we could use assembly to access msg.value.\\n  */\\n  constructor() payable {\\n    require(msg.value == 0);\\n  }\\n\\n  /**\\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\\n   */\\n  fallback() external {\\n  }\\n\\n  /**\\n   * @dev Transfer all Ether held by the contract to the owner.\\n   */\\n  function reclaimEther() external onlyOwner {\\n    payable(owner).transfer(address(this).balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/HasNoContracts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Contracts that should not own Contracts\\n * @author Remco Bloemen <remco@2\u03c0.com>\\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\\n * of this contract to reclaim ownership of the contracts.\\n */\\ncontract HasNoContracts is Ownable {\\n\\n  /**\\n   * @dev Reclaim ownership of Ownable contracts\\n   * @param _contractAddr The address of the Ownable to be reclaimed.\\n   */\\n  function reclaimContract(address _contractAddr) external onlyOwner {\\n    Ownable contractInst = Ownable(_contractAddr);\\n    contractInst.transferOwnership(owner);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/Claimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\nabstract contract Claimable is Ownable {\\n  address public pendingOwner;\\n\\n  /**\\n   * @dev Modifier throws if called by any account other than the pendingOwner.\\n   */\\n  modifier onlyPendingOwner() {\\n    require(msg.sender == pendingOwner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to set the pendingOwner address.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Allows the pendingOwner address to finalize the transfer.\\n   */\\n  function claimOwnership() public onlyPendingOwner {\\n    emit OwnershipTransferred(owner, pendingOwner);\\n    owner = pendingOwner;\\n    pendingOwner = address(0);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ownership/CanReclaimToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"../token/ERC20/ERC20Basic.sol\\\";\\nimport \\\"../token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title Contracts that should be able to recover tokens\\n * @author SylTi\\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\\n * This will prevent any accidental loss of tokens.\\n */\\ncontract CanReclaimToken is Ownable {\\n  using SafeERC20 for ERC20Basic;\\n\\n  /**\\n   * @dev Reclaim all ERC20Basic compatible tokens\\n   * @param _token ERC20Basic The address of the token contract\\n   */\\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\\n    uint256 balance = _token.balanceOf(address(this));\\n    _token.safeTransfer(owner, balance);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/TokenStorageLib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/*\\n * @title TokenStorageLib\\n * @dev Implementation of an[external storage for tokens.\\n */\\nlibrary TokenStorageLib {\\n\\n    using SafeMath for uint;\\n\\n    struct TokenStorage {\\n        mapping (address => uint) balances;\\n        mapping (address => mapping (address => uint)) allowed;\\n        uint totalSupply;\\n    }\\n\\n    /**\\n     * @dev Increases balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param to Address to increase.\\n     * @param amount Number of units to add.\\n     */\\n    function addBalance(TokenStorage storage self, address to, uint amount)\\n        external\\n    {\\n        self.totalSupply = self.totalSupply.add(amount);\\n        self.balances[to] = self.balances[to].add(amount);\\n    }\\n\\n    /**\\n     * @dev Decreases balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param from Address to decrease.\\n     * @param amount Number of units to subtract.\\n     */\\n    function subBalance(TokenStorage storage self, address from, uint amount)\\n        external\\n    {\\n        self.totalSupply = self.totalSupply.sub(amount);\\n        self.balances[from] = self.balances[from].sub(amount);\\n    }\\n\\n    /**\\n     * @dev Sets the allowance for a spender.\\n     * @param self Token storage to operate on.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @param amount Qunatity of allowance.\\n     */\\n    function setAllowed(TokenStorage storage self, address owner, address spender, uint amount)\\n        external\\n    {\\n        self.allowed[owner][spender] = amount;\\n    }\\n\\n    /**\\n     * @dev Returns the supply of tokens.\\n     * @param self Token storage to operate on.\\n     * @return Total supply.\\n     */\\n    function getSupply(TokenStorage storage self)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return self.totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param who Address to lookup.\\n     * @return Number of units.\\n     */\\n    function getBalance(TokenStorage storage self, address who)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return self.balances[who];\\n    }\\n\\n    /**\\n     * @dev Returns the allowance for a spender.\\n     * @param self Token storage to operate on.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @return Number of units.\\n     */\\n    function getAllowed(TokenStorage storage self, address owner, address spender)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return self.allowed[owner][spender];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/TokenStorage.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ownership/Claimable.sol\\\";\\nimport \\\"./ownership/CanReclaimToken.sol\\\";\\nimport \\\"./ownership/NoOwner.sol\\\";\\nimport \\\"./TokenStorageLib.sol\\\";\\n\\n/**\\n * @title TokenStorage\\n * @dev External storage for tokens.\\n * The storage is implemented in a separate contract to maintain state\\n * between token upgrades.\\n */\\ncontract TokenStorage is Claimable, CanReclaimToken, NoOwner {\\n\\n    using TokenStorageLib for TokenStorageLib.TokenStorage;\\n\\n    TokenStorageLib.TokenStorage internal tokenStorage;\\n\\n    /**\\n     * @dev Increases balance of an address.\\n     * @param to Address to increase.\\n     * @param amount Number of units to add.\\n     */\\n    function addBalance(address to, uint amount) external onlyOwner {\\n        tokenStorage.addBalance(to, amount);\\n    }\\n\\n    /**\\n     * @dev Decreases balance of an address.\\n     * @param from Address to decrease.\\n     * @param amount Number of units to subtract.\\n     */\\n    function subBalance(address from, uint amount) external onlyOwner {\\n        tokenStorage.subBalance(from, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the allowance for a spender.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @param amount Qunatity of allowance.\\n     */\\n    function setAllowed(address owner, address spender, uint amount) external onlyOwner {\\n        tokenStorage.setAllowed(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the supply of tokens.\\n     * @return Total supply.\\n     */\\n    function getSupply() external view returns (uint) {\\n        return tokenStorage.getSupply();\\n    }\\n\\n    /**\\n     * @dev Returns the balance of an address.\\n     * @param who Address to lookup.\\n     * @return Number of units.\\n     */\\n    function getBalance(address who) external view returns (uint) {\\n        return tokenStorage.getBalance(who);\\n    }\\n\\n    /**\\n     * @dev Returns the allowance for a spender.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @return Number of units.\\n     */\\n    function getAllowed(address owner, address spender)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return tokenStorage.getAllowed(owner, spender);\\n    }\\n\\n    /**\\n     * @dev Explicit override of transferOwnership from Claimable and Ownable\\n     * @param newOwner Address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public override(Claimable, Ownable){\\n      Claimable.transferOwnership(newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/TokenFrontend.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ownership/Claimable.sol\\\";\\nimport \\\"./ownership/CanReclaimToken.sol\\\";\\nimport \\\"./ownership/NoOwner.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SmartController.sol\\\";\\nimport \\\"./IPolygonPosRootToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title TokenFrontend\\n * @dev This contract implements a token forwarder.\\n * The token frontend is [ERC20 and ERC677] compliant and forwards\\n * standard methods to a controller. The primary function is to allow\\n * for a statically deployed contract for users to interact with while\\n * simultaneously allow the controllers to be upgraded when bugs are\\n * discovered or new functionality needs to be added.\\n */\\nabstract contract TokenFrontend is Claimable, CanReclaimToken, NoOwner, IERC20, IPolygonPosRootToken, AccessControl {\\n  bytes32 public constant PREDICATE_ROLE = keccak256(\\\"PREDICATE_ROLE\\\");\\n\\n  SmartController internal controller;\\n\\n  string public name;\\n  string public symbol;\\n  bytes3 public ticker;\\n\\n  /**\\n   * @dev Emitted when tokens are transferred.\\n   * @param from Sender address.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens transferred.\\n   * @param data Additional data passed to the recipient's tokenFallback method.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint amount, bytes data);\\n\\n  /**\\n   * @dev Emitted when updating the controller.\\n   * @param ticker Three letter ticker representing the currency.\\n   * @param old Address of the old controller.\\n   * @param current Address of the new controller.\\n   */\\n  event Controller(bytes3 indexed ticker, address indexed old, address indexed current);\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @notice The contract is an abstract contract as a result of the internal modifier.\\n   * @param name_ Token name.\\n   * @param symbol_ Token symbol.\\n   * @param ticker_ 3 letter currency ticker.\\n   */\\n  constructor(string memory name_, string memory symbol_, bytes3 ticker_) {\\n    name = name_;\\n    symbol = symbol_;\\n    ticker = ticker_;\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Sets a new controller.\\n   * @param address_ Address of the controller.\\n   */\\n  function setController(address address_) external onlyOwner {\\n    require(address_ != address(0x0), \\\"controller address cannot be the null address\\\");\\n    emit Controller(ticker, address(controller), address_);\\n    controller = SmartController(address_);\\n    require(controller.getFrontend() == address(this), \\\"controller frontend does not point back\\\");\\n    require(controller.ticker() == ticker, \\\"ticker does not match controller ticket\\\");\\n  }\\n\\n  /**\\n   * @dev Transfers tokens [ERC20].\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   */\\n  function transfer(address to, uint amount) external returns (bool ok) {\\n    ok = controller.transfer_withCaller(msg.sender, to, amount);\\n    emit Transfer(msg.sender, to, amount);\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from a specific address [ERC20].\\n   * The address owner has to approve the spender beforehand.\\n   * @param from Address to debet the tokens from.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   */\\n  function transferFrom(address from, address to, uint amount) external returns (bool ok) {\\n    ok = controller.transferFrom_withCaller(msg.sender, from, to, amount);\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Approves a spender [ERC20].\\n   * Note that using the approve/transferFrom presents a possible\\n   * security vulnerability described in:\\n   * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.quou09mcbpzw\\n   * Use transferAndCall to mitigate.\\n   * @param spender The address of the future spender.\\n   * @param amount The allowance of the spender.\\n   */\\n  function approve(address spender, uint amount) external returns (bool ok) {\\n    ok = controller.approve_withCaller(msg.sender, spender, amount);\\n    emit Approval(msg.sender, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Transfers tokens and subsequently calls a method on the recipient [ERC677].\\n   * If the recipient is a non-contract address this method behaves just like transfer.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   * @param data Additional data passed to the recipient's tokenFallback method.\\n   */\\n  function transferAndCall(address to, uint256 amount, bytes calldata data)\\n    external\\n    returns (bool ok)\\n  {\\n    ok = controller.transferAndCall_withCaller(msg.sender, to, amount, data);\\n    emit Transfer(msg.sender, to, amount);\\n    emit Transfer(msg.sender, to, amount, data);\\n  }\\n\\n  /**\\n   * @dev Mints new tokens.\\n   * @param to Address to credit the tokens.\\n   * @param amount Number of tokens to mint.\\n   */\\n  function mintTo(address to, uint amount)\\n    external\\n    returns (bool ok)\\n  {\\n    ok = controller.mintTo_withCaller(msg.sender, to, amount);\\n    emit Transfer(address(0x0), to, amount);\\n  }\\n\\n  /**\\n   * @notice Polygon Bridge Mechanism. Called when token is withdrawn from child chain.\\n   * @dev Should be callable only by Matic's Predicate contract.\\n   * Should handle deposit by minting the required amount for user.\\n   * @param to Address to credit the tokens.\\n   * @param amount Number of tokens to mint.\\n   */\\n  function mint(address to, uint amount)\\n    override\\n    external\\n    returns (bool ok)\\n  {\\n    require(hasRole(PREDICATE_ROLE, msg.sender), \\\"caller is not PREDICATE\\\");\\n    ok = this.mintTo(to, amount);\\n  }\\n\\n  /**\\n   * @dev Burns tokens from token owner.\\n   * This removfes the burned tokens from circulation.\\n   * @param from Address of the token owner.\\n   * @param amount Number of tokens to burn.\\n   * @param h Hash which the token owner signed.\\n   * @param v Signature component.\\n   * @param r Signature component.\\n   * @param s Sigature component.\\n   */\\n  function burnFrom(address from, uint amount, bytes32 h, uint8 v, bytes32 r, bytes32 s)\\n    external\\n    returns (bool ok)\\n  {\\n    ok = controller.burnFrom_withCaller(msg.sender, from, amount, h, v, r, s);\\n    emit Transfer(from, address(0x0), amount);\\n  }\\n\\n  /**\\n   * @dev Recovers tokens from an address and reissues them to another address.\\n   * In case a user loses its private key the tokens can be recovered by burning\\n   * the tokens from that address and reissuing to a new address.\\n   * To recover tokens the contract owner needs to provide a signature\\n   * proving that the token owner has authorized the owner to do so.\\n   * @param from Address to burn tokens from.\\n   * @param to Address to mint tokens to.\\n   * @param h Hash which the token owner signed.\\n   * @param v Signature component.\\n   * @param r Signature component.\\n   * @param s Sigature component.\\n   * @return amount Amount recovered.\\n   */\\n  function recover(address from, address to, bytes32 h, uint8 v, bytes32 r, bytes32 s)\\n    external\\n    returns (uint amount)\\n  {\\n    amount = controller.recover_withCaller(msg.sender, from, to, h ,v, r, s);\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Gets the current controller.\\n   * @return Address of the controller.\\n   */\\n  function getController() external view returns (address) {\\n    return address(controller);\\n  }\\n\\n  /**\\n   * @dev Returns the total supply.\\n   * @return Number of tokens.\\n   */\\n  function totalSupply() external view returns (uint) {\\n    return controller.totalSupply();\\n  }\\n\\n  /**\\n   * @dev Returns the number tokens associated with an address.\\n   * @param who Address to lookup.\\n   * @return Balance of address.\\n   */\\n  function balanceOf(address who) external view returns (uint) {\\n    return controller.balanceOf(who);\\n  }\\n\\n  /**\\n   * @dev Returns the allowance for a spender\\n   * @param owner The address of the owner of the tokens.\\n   * @param spender The address of the spender.\\n   * @return Number of tokens the spender is allowed to spend.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint) {\\n    return controller.allowance(owner, spender);\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals in one token.\\n   * @return Number of decimals.\\n   */\\n  function decimals() external view returns (uint) {\\n    return controller.decimals();\\n  }\\n\\n  /**\\n   * @dev Explicit override of transferOwnership from Claimable and Ownable\\n   * @param newOwner Address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public override(Claimable, Ownable) {\\n    Claimable.transferOwnership(newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/SystemRole.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ownership/Roles.sol\\\";\\n\\n/**\\n * @title SystemRole\\n * @dev SystemRole accounts have been approved to perform operational actions (e.g. mint and burn).\\n * @notice addSystemAccount and removeSystemAccount are unprotected by default, i.e. anyone can call them.\\n * @notice Contracts inheriting SystemRole *should* authorize the caller by overriding them.\\n * @notice The contract is an abstract contract.\\n */\\nabstract contract SystemRole {\\n\\n  using Roles for Roles.Role;\\n  Roles.Role private systemAccounts;\\n\\n    /**\\n     * @dev Emitted when system account is added.\\n     * @param account is a new system account.\\n     */\\n    event SystemAccountAdded(address indexed account);\\n\\n    /**\\n     * @dev Emitted when system account is removed.\\n     * @param account is the old system account.\\n     */\\n    event SystemAccountRemoved(address indexed account);\\n\\n    /**\\n     * @dev Modifier which prevents non-system accounts from calling protected functions.\\n     */\\n    modifier onlySystemAccounts() {\\n        require(isSystemAccount(msg.sender));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier which prevents non-system accounts from being passed to the guard.\\n     * @param account The account to check.\\n     */\\n    modifier onlySystemAccount(address account) {\\n        require(\\n            isSystemAccount(account),\\n            \\\"must be a system account\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks whether an address is a system account.\\n     * @param account the address to check.\\n     * @return true if system account.\\n     */\\n    function isSystemAccount(address account) public view returns (bool) {\\n        return systemAccounts.has(account);\\n    }\\n\\n    /**\\n     * @dev Assigns the system role to an account.\\n     * @notice This method is unprotected and should be authorized in the child contract.\\n     */\\n    function addSystemAccount(address account) public virtual {\\n        systemAccounts.add(account);\\n        emit SystemAccountAdded(account);\\n    }\\n\\n    /**\\n     * @dev Removes the system role from an account.\\n     * @notice This method is unprotected and should be authorized in the child contract.\\n     */\\n    function removeSystemAccount(address account) public virtual {\\n        systemAccounts.remove(account);\\n        emit SystemAccountRemoved(account);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/StandardController.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ownership/Claimable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./TokenStorage.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ERC20Lib.sol\\\";\\nimport \\\"./ERC677Lib.sol\\\";\\n\\n/**\\n * @title StandardController\\n * @dev This is the base contract which delegates token methods [ERC20 and ERC677]\\n * to their respective library implementations.\\n * The controller is primarily intended to be interacted with via a token frontend.\\n */\\ncontract StandardController is Pausable, Claimable {\\n\\n  using ERC20Lib for TokenStorage;\\n  using ERC677Lib for TokenStorage;\\n\\n  TokenStorage internal token;\\n  address internal frontend;\\n\\n  string public name;\\n  string public symbol;\\n  uint public decimals = 18;\\n\\n  /**\\n   * @dev Emitted when updating the frontend.\\n   * @param old Address of the old frontend.\\n   * @param current Address of the new frontend.\\n   */\\n  event Frontend(address indexed old, address indexed current);\\n\\n  /**\\n   * @dev Emitted when updating the storage.\\n   * @param old Address of the old storage.\\n   * @param current Address of the new storage.\\n   */\\n  event Storage(address indexed old, address indexed current);\\n\\n  /**\\n   * @dev Modifier which prevents the function from being called by unauthorized parties.\\n   * The caller must either be the sender or the function must be\\n   * called via the frontend, otherwise the call is reverted.\\n   * @param caller The address of the passed-in caller. Used to preserve the original caller.\\n   */\\n  modifier guarded(address caller) {\\n    require(\\n            msg.sender == caller || msg.sender == frontend,\\n            \\\"either caller must be sender or calling via frontend\\\"\\n            );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @param storage_ Address of the token storage for the controller.\\n   * @param initialSupply The amount of tokens to mint upon creation.\\n   * @param frontend_ Address of the authorized frontend.\\n   */\\n  constructor(address storage_, uint initialSupply, address frontend_) {\\n    require(\\n            storage_ == address(0x0) || initialSupply == 0,\\n            \\\"either a token storage must be initialized or no initial supply\\\"\\n            );\\n    if (storage_ == address(0x0)) {\\n      token = new TokenStorage();\\n      token.addBalance(msg.sender, initialSupply);\\n    } else {\\n      token = TokenStorage(storage_);\\n    }\\n    frontend = frontend_;\\n  }\\n\\n  /**\\n   * @dev Prevents tokens to be sent to well known blackholes by throwing on known blackholes.\\n   * @param to The address of the intended recipient.\\n   */\\n  function avoidBlackholes(address to) internal view {\\n    require(to != address(0x0), \\\"must not send to 0x0\\\");\\n    require(to != address(this), \\\"must not send to controller\\\");\\n    require(to != address(token), \\\"must not send to token storage\\\");\\n    require(to != frontend, \\\"must not send to frontend\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the current frontend.\\n   * @return Address of the frontend.\\n   */\\n  function getFrontend() external view returns (address) {\\n    return frontend;\\n  }\\n\\n  /**\\n   * @dev Returns the current storage.\\n   * @return Address of the storage.\\n   */\\n  function getStorage() external view returns (address) {\\n    return address(token);\\n  }\\n\\n  /**\\n   * @dev Sets a new frontend.\\n   * @param frontend_ Address of the new frontend.\\n   */\\n  function setFrontend(address frontend_) public onlyOwner {\\n    emit Frontend(frontend, frontend_);\\n    frontend = frontend_;\\n  }\\n\\n  /**\\n   * @dev Sets a new storage.\\n   * @param storage_ Address of the new storage.\\n   */\\n  function setStorage(address storage_) external onlyOwner {\\n    emit Storage(address(token), storage_);\\n    token = TokenStorage(storage_);\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of the storage.\\n   * @param newOwner Address of the new storage owner.\\n   */\\n  function transferStorageOwnership(address newOwner) public onlyOwner {\\n    token.transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Claims the ownership of the storage.\\n   */\\n  function claimStorageOwnership() public onlyOwner {\\n    token.claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers tokens [ERC20].\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   */\\n  function transfer_withCaller(address caller, address to, uint amount)\\n    public\\n    virtual\\n    guarded(caller)\\n    whenNotPaused\\n    returns (bool ok)\\n  {\\n    avoidBlackholes(to);\\n    return token.transfer(caller, to, amount);\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from a specific address [ERC20].\\n   * The address owner has to approve the spender beforehand.\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param from Address to debet the tokens from.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   */\\n  function transferFrom_withCaller(address caller, address from, address to, uint amount)\\n    public\\n    virtual\\n    guarded(caller)\\n    whenNotPaused\\n    returns (bool ok)\\n  {\\n    avoidBlackholes(to);\\n    return token.transferFrom(caller, from, to, amount);\\n  }\\n\\n  /**\\n   * @dev Approves a spender [ERC20].\\n   * Note that using the approve/transferFrom presents a possible\\n   * security vulnerability described in:\\n   * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.quou09mcbpzw\\n   * Use transferAndCall to mitigate.\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param spender The address of the future spender.\\n   * @param amount The allowance of the spender.\\n   */\\n  function approve_withCaller(address caller, address spender, uint amount)\\n    public\\n    guarded(caller)\\n    whenNotPaused\\n    returns (bool ok)\\n  {\\n    return token.approve(caller, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Transfers tokens and subsequently calls a method on the recipient [ERC677].\\n   * If the recipient is a non-contract address this method behaves just like transfer.\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param to Recipient address.\\n   * @param amount Number of tokens to transfer.\\n   * @param data Additional data passed to the recipient's tokenFallback method.\\n   */\\n  function transferAndCall_withCaller(\\n                                      address caller,\\n                                      address to,\\n                                      uint256 amount,\\n                                      bytes calldata data\\n                                      )\\n    public\\n    virtual\\n    guarded(caller)\\n    whenNotPaused\\n    returns (bool ok)\\n  {\\n    avoidBlackholes(to);\\n    return token.transferAndCall(caller, to, amount, data);\\n  }\\n\\n  /**\\n   * @dev Returns the total supply.\\n   * @return Number of tokens.\\n   */\\n  function totalSupply() external view returns (uint) {\\n    return token.getSupply();\\n  }\\n\\n  /**\\n   * @dev Returns the number tokens associated with an address.\\n   * @param who Address to lookup.\\n   * @return Balance of address.\\n   */\\n  function balanceOf(address who) external view returns (uint) {\\n    return token.getBalance(who);\\n  }\\n\\n  /**\\n   * @dev Returns the allowance for a spender\\n   * @param owner The address of the owner of the tokens.\\n   * @param spender The address of the spender.\\n   * @return Number of tokens the spender is allowed to spend.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint) {\\n    return token.allowance(owner, spender);\\n  }\\n\\n  /**\\n   * @dev Pause the function protected by Pausable modifier.\\n   */\\n  function pause() public onlyOwner\\n  {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpause the function protected by Pausable modifier.\\n   */\\n  function unpause() public onlyOwner\\n  {\\n    _unpause();\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/SmartTokenLib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC20Lib.sol\\\";\\nimport \\\"./MintableTokenLib.sol\\\";\\nimport \\\"./IValidator.sol\\\";\\n\\n/**\\n * @title SmartTokenLib\\n * @dev This library provides functionality which is required from a regulatory perspective.\\n */\\nlibrary SmartTokenLib {\\n\\n    using ERC20Lib for TokenStorage;\\n    using MintableTokenLib for TokenStorage;\\n\\n    struct SmartStorage {\\n        IValidator validator;\\n    }\\n\\n    /**\\n     * @dev Emitted when the contract owner recovers tokens.\\n     * @param from Sender address.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens.\\n     */\\n    event Recovered(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @dev Emitted when updating the validator.\\n     * @param old Address of the old validator.\\n     * @param current Address of the new validator.\\n     */\\n    event Validator(address indexed old, address indexed current);\\n\\n    /**\\n     * @dev Sets a new validator.\\n     * @param self Smart storage to operate on.\\n     * @param validator Address of validator.\\n     */\\n    function setValidator(SmartStorage storage self, address validator)\\n        external\\n    {\\n      emit Validator(address(self.validator), validator);\\n        self.validator = IValidator(validator);\\n    }\\n\\n\\n    /**\\n     * @dev Approves or rejects a transfer request.\\n     * The request is forwarded to a validator which implements\\n     * the actual business logic.\\n     * @param self Smart storage to operate on.\\n     * @param from Sender address.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens.\\n     */\\n    function validate(SmartStorage storage self, address from, address to, uint amount)\\n        external\\n        returns (bool valid)\\n    {\\n        return self.validator.validate(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Recovers tokens from an address and reissues them to another address.\\n     * In case a user loses its private key the tokens can be recovered by burning\\n     * the tokens from that address and reissuing to a new address.\\n     * To recover tokens the contract owner needs to provide a signature\\n     * proving that the token owner has authorized the owner to do so.\\n     * @param from Address to burn tokens from.\\n     * @param to Address to mint tokens to.\\n     * @param h Hash which the token owner signed.\\n     * @param v Signature component.\\n     * @param r Signature component.\\n     * @param s Sigature component.\\n     * @return Amount recovered.\\n     */\\n    function recover(\\n        TokenStorage token,\\n        address from,\\n        address to,\\n        bytes32 h,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        returns (uint)\\n    {\\n        require(\\n            ecrecover(h, v, r, s) == from,\\n            \\\"signature/hash does not recover from address\\\"\\n        );\\n        uint amount = token.balanceOf(from);\\n        token.burn(from, amount);\\n        token.mint(to, amount);\\n        emit Recovered(from, to, amount);\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Gets the current validator.\\n     * @param self Smart storage to operate on.\\n     * @return Address of validator.\\n     */\\n    function getValidator(SmartStorage storage self)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return address(self.validator);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/SmartController.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./SmartTokenLib.sol\\\";\\nimport \\\"./MintableController.sol\\\";\\nimport \\\"./IValidator.sol\\\";\\n\\n/**\\n * @title SmartController\\n * @dev This contract adds \\\"smart\\\" functionality which is required from a regulatory perspective.\\n */\\ncontract SmartController is MintableController {\\n\\n    using SmartTokenLib for SmartTokenLib.SmartStorage;\\n\\n    SmartTokenLib.SmartStorage internal smartToken;\\n\\n    bytes3 public ticker;\\n    uint constant public INITIAL_SUPPLY = 0;\\n\\n    /**\\n     * @dev Contract constructor.\\n     * @param storage_ Address of the token storage for the controller.\\n     * @param validator Address of validator.\\n     * @param ticker_ 3 letter currency ticker.\\n     * @param frontend_ Address of the authorized frontend.\\n     */\\n    constructor(address storage_, address validator, bytes3 ticker_, address frontend_)\\n        MintableController(storage_, INITIAL_SUPPLY, frontend_)\\n    {\\n        require(validator != address(0x0), \\\"validator cannot be the null address\\\");\\n        smartToken.setValidator(validator);\\n        ticker = ticker_;\\n    }\\n\\n    /**\\n     * @dev Sets a new validator.\\n     * @param validator Address of validator.\\n     */\\n    function setValidator(address validator) external onlySystemAccounts {\\n        smartToken.setValidator(validator);\\n    }\\n\\n    /**\\n     * @dev Recovers tokens from an address and reissues them to another address.\\n     * In case a user loses its private key the tokens can be recovered by burning\\n     * the tokens from that address and reissuing to a new address.\\n     * To recover tokens the contract owner needs to provide a signature\\n     * proving that the token owner has authorized the owner to do so.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param from Address to burn tokens from.\\n     * @param to Address to mint tokens to.\\n     * @param h Hash which the token owner signed.\\n     * @param v Signature component.\\n     * @param r Signature component.\\n     * @param s Sigature component.\\n     * @return Amount recovered.\\n     */\\n    function recover_withCaller(address caller, address from, address to, bytes32 h, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        guarded(caller)\\n        onlySystemAccount(caller)\\n        returns (uint)\\n    {\\n        avoidBlackholes(to);\\n        return SmartTokenLib.recover(token, from, to, h, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens [ERC20].\\n     * The caller, to address and amount are validated before executing method.\\n     * Prior to transfering tokens the validator needs to approve.\\n     * @notice Overrides method in a parent.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     */\\n    function transfer_withCaller(address caller, address to, uint amount)\\n        public\\n        override\\n        guarded(caller)\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(smartToken.validate(caller, to, amount), \\\"transfer request not valid\\\");\\n        return super.transfer_withCaller(caller, to, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from a specific address [ERC20].\\n     * The address owner has to approve the spender beforehand.\\n     * The from address, to address and amount are validated before executing method.\\n     * @notice Overrides method in a parent.\\n     * Prior to transfering tokens the validator needs to approve.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param from Address to debet the tokens from.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     */\\n    function transferFrom_withCaller(address caller, address from, address to, uint amount)\\n        public\\n        override\\n        guarded(caller)\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(smartToken.validate(from, to, amount), \\\"transferFrom request not valid\\\");\\n        return super.transferFrom_withCaller(caller, from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens and subsequently calls a method on the recipient [ERC677].\\n     * If the recipient is a non-contract address this method behaves just like transfer.\\n     * The caller, to address and amount are validated before executing method.\\n     * @notice Overrides method in a parent.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     * @param data Additional data passed to the recipient's tokenFallback method.\\n     */\\n    function transferAndCall_withCaller(\\n        address caller,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        public\\n        override\\n        guarded(caller)\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(smartToken.validate(caller, to, amount), \\\"transferAndCall request not valid\\\");\\n        return super.transferAndCall_withCaller(caller, to, amount, data);\\n    }\\n\\n    /**\\n     * @dev Gets the current validator.\\n     * @return Address of validator.\\n     */\\n    function getValidator() external view returns (address) {\\n        return smartToken.getValidator();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/PolygonPosTokenFrontend.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./TokenFrontend.sol\\\";\\nimport \\\"./IPolygonPosChildToken.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title PolygonPosTokenFrontend\\n * @notice This contract is to be deployed on Matic Polygon network.\\n * @dev This contract implements a token forwarder.\\n * The token frontend is [ERC20 and ERC677] compliant and forwards\\n * standard methods to a controller. The primary function is to allow\\n * for a statically deployed contract for users to interact with while\\n * simultaneously allow the controllers to be upgraded when bugs are\\n * discovered or new functionality needs to be added.\\n * This token implement function for the Matic Polygon Brige.\\n */\\nabstract contract PolygonPosTokenFrontend is TokenFrontend, IPolygonPosChildToken {\\n  bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @notice The contract is an abstract contract as a result of the internal modifier.\\n   * @param name_ Token name.\\n   * @param symbol_ Token symbol.\\n   * @param ticker_ 3 letter currency ticker.\\n   * @param childChainManager_ Address of Polygon Pos's child chain manager proxy.\\n   */\\n  constructor(string memory name_, string memory symbol_, bytes3 ticker_,  address childChainManager_)\\n    TokenFrontend(name_, symbol_, ticker_)\\n    {\\n      _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n      _setupRole(DEPOSITOR_ROLE, childChainManager_);\\n    }\\n\\n  /**\\n   * @notice Polygon Bridge Mechanism. Called when token is deposited on root chain\\n   * @dev Should be callable only by ChildChainManager\\n   * Should handle deposit by minting the required amount for user\\n   * @param user user address for whom deposit is being done\\n   * @param depositData abi encoded amount\\n   */\\n  function deposit(address user, bytes calldata depositData)\\n    override\\n    external\\n  {\\n    require(hasRole(DEPOSITOR_ROLE, msg.sender), \\\"caller is not a DEPOSITOR\\\");\\n    uint256 amount = abi.decode(depositData, (uint256));\\n    this.mintTo(user, amount);\\n  }\\n\\n  /**\\n   * @notice Polygon Bridge Mechanism. Called when user wants to withdraw tokens back to root chain\\n   * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n   * @param amount amount of tokens to withdraw\\n   */\\n  function withdraw(uint256 amount)\\n    override\\n    external\\n  {\\n    controller.burnFrom(msg.sender, amount);\\n    emit Transfer(msg.sender, address(0x0), amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/MintableTokenLib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./ERC20Lib.sol\\\";\\nimport \\\"./TokenStorage.sol\\\";\\n\\n/**\\n * @title Mintable token\\n * @dev Simple ERC20 Token example, with mintable token creation\\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n */\\n\\nlibrary MintableTokenLib {\\n\\n  using SafeMath for uint;\\n\\n    /**\\n     * @dev Mints new tokens.\\n     * @param db Token storage to operate on.\\n     * @param to The address that will recieve the minted tokens.\\n     * @param amount The amount of tokens to mint.\\n     */\\n    function mint(\\n        TokenStorage db,\\n        address to,\\n        uint amount\\n    )\\n        external\\n        returns (bool)\\n    {\\n        db.addBalance(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns tokens.\\n     * @param db Token storage to operate on.\\n     * @param from The address holding tokens.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(\\n        TokenStorage db,\\n        address from,\\n        uint amount\\n    )\\n        public\\n        returns (bool)\\n    {\\n        db.subBalance(from, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns tokens from a specific address.\\n     * To burn the tokens the caller needs to provide a signature\\n     * proving that the caller is authorized by the token owner to do so.\\n     * @param db Token storage to operate on.\\n     * @param from The address holding tokens.\\n     * @param amount The amount of tokens to burn.\\n     * @param h Hash which the token owner signed.\\n     * @param v Signature component.\\n     * @param r Signature component.\\n     * @param s Sigature component.\\n     */\\n    function burn(\\n        TokenStorage db,\\n        address from,\\n        uint amount,\\n        bytes32 h,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            ecrecover(h, v, r, s) == from,\\n            \\\"signature/hash does not match\\\"\\n        );\\n        return burn(db, from, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/MintableController.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./StandardController.sol\\\";\\nimport \\\"./MintableTokenLib.sol\\\";\\nimport \\\"./SystemRole.sol\\\";\\n\\n/**\\n* @title MintableController\\n* @dev This contracts implements functionality allowing for minting and burning of tokens.\\n*/\\ncontract MintableController is SystemRole, StandardController {\\n\\n  using MintableTokenLib for TokenStorage;\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @param storage_ Address of the token storage for the controller.\\n   * @param initialSupply The amount of tokens to mint upon creation.\\n   * @param frontend_ Address of the authorized frontend.\\n   */\\n  constructor(address storage_, uint initialSupply, address frontend_)\\n    StandardController(storage_, initialSupply, frontend_)\\n    { }\\n\\n  /**\\n   * @dev Assigns the system role to an account.\\n   */\\n  function addSystemAccount(address account) public override onlyOwner {\\n    super.addSystemAccount(account);\\n  }\\n\\n  /**\\n   * @dev Removes the system role from an account.\\n   */\\n  function removeSystemAccount(address account) public override onlyOwner {\\n    super.removeSystemAccount(account);\\n  }\\n\\n  /**\\n   * @dev Mints new tokens.\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param to Address to credit the tokens.\\n   * @param amount Number of tokens to mint.\\n   */\\n  function mintTo_withCaller(address caller, address to, uint amount)\\n    public\\n    guarded(caller)\\n    onlySystemAccount(caller)\\n    returns (bool)\\n  {\\n    avoidBlackholes(to);\\n    return token.mint(to, amount);\\n  }\\n\\n  /**\\n   * @dev Burns tokens from token owner.\\n   * This removes the burned tokens from circulation.\\n   * @param caller Address of the caller passed through the frontend.\\n   * @param from Address of the token owner.\\n   * @param amount Number of tokens to burn.\\n   * @param h Hash which the token owner signed.\\n   * @param v Signature component.\\n   * @param r Signature component.\\n   * @param s Sigature component.\\n   */\\n  function burnFrom_withCaller(address caller, address from, uint amount, bytes32 h, uint8 v, bytes32 r, bytes32 s)\\n    public\\n    guarded(caller)\\n    onlySystemAccount(caller)\\n    returns (bool)\\n  {\\n    return token.burn(from, amount, h, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Burns tokens from token owner.\\n   * This removes the burned tokens from circulation.\\n   * @param from Address of the token owner.\\n   * @param amount Number of tokens to burn.\\n   */\\n  function burnFrom(address from, uint amount)\\n    public\\n    guarded(msg.sender)\\n    onlySystemAccount(msg.sender)\\n    returns (bool)\\n  {\\n    return token.burn(from, amount);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IValidator.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\n/**\\n * @title IValidator\\n * @dev Contracts implementing this interface validate token transfers.\\n */\\ninterface IValidator {\\n\\n    /**\\n     * @dev Emitted when a validator makes a decision.\\n     * @param from Sender address.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens.\\n     * @param valid True if transfer approved, false if rejected.\\n     */\\n    event Decision(address indexed from, address indexed to, uint amount, bool valid);\\n\\n    /**\\n     * @dev Validates token transfer.\\n     * If the sender is on the blacklist the transfer is denied.\\n     * @param from Sender address.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens.\\n     */\\n    function validate(address from, address to, uint amount) external returns (bool valid);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IPolygonPosRootToken.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPolygonPosRootToken\\n * @dev This interface define the mandatory method enabling polygon bridging mechanism.\\n * @notice This interface should be inherited to deploy on ethereum.\\n */\\ninterface IPolygonPosRootToken {\\n  function mint(address user, uint256 amount) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/IPolygonPosChildToken.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPolygonPosChildToken\\n * @dev This interface define the mandatory method enabling polygon bridging mechanism.\\n * @notice This interface should be inherited to deploy on polygon POS network.\\n */\\ninterface IPolygonPosChildToken {\\n  function deposit(address user, bytes calldata depositData) external;\\n  function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC677Recipient.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\n/**\\n * @title IERC677Recipient\\n * @dev Contracts implementing this interface can participate in [ERC677].\\n */\\ninterface IERC677Recipient {\\n\\n    /**\\n     * @dev Receives notification from [ERC677] transferAndCall.\\n     * @param from Sender address.\\n     * @param amount Number of tokens.\\n     * @param data Additional data.\\n     */\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC20.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC677Lib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IERC677Recipient.sol\\\";\\nimport \\\"./TokenStorage.sol\\\";\\nimport \\\"./ERC20Lib.sol\\\";\\n\\n/**\\n * @title ERC677\\n * @dev ERC677 token functionality.\\n * https://github.com/ethereum/EIPs/issues/677\\n */\\nlibrary ERC677Lib {\\n\\n    using ERC20Lib for TokenStorage;\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfers tokens and subsequently calls a method on the recipient [ERC677].\\n     * If the recipient is a non-contract address this method behaves just like transfer.\\n     * @notice db.transfer either returns true or reverts.\\n     * @param db Token storage to operate on.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     * @param data Additional data passed to the recipient's tokenFallback method.\\n     */\\n    function transferAndCall(\\n        TokenStorage db,\\n        address caller,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            db.transfer(caller, to, amount), \\n            \\\"unable to transfer\\\"\\n        );\\n        if (to.isContract()) {\\n            IERC677Recipient recipient = IERC677Recipient(to);\\n            require(\\n                recipient.onTokenTransfer(caller, amount, data),\\n                \\\"token handler returns false\\\"\\n            );\\n        }\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC20Lib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2019 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./TokenStorage.sol\\\";\\n\\n/**\\n * @title ERC20Lib\\n * @dev Standard ERC20 token functionality.\\n * https://github.com/ethereum/EIPs/issues/20\\n */\\nlibrary ERC20Lib {\\n\\n    using SafeMath for uint;\\n\\n    /**\\n     * @dev Transfers tokens [ERC20].\\n     * @param db Token storage to operate on.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     */\\n    function transfer(TokenStorage db, address caller, address to, uint amount)\\n        external\\n        returns (bool success)\\n    {\\n        db.subBalance(caller, amount);\\n        db.addBalance(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from a specific address [ERC20].\\n     * The address owner has to approve the spender beforehand.\\n     * @param db Token storage to operate on.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param from Address to debet the tokens from.\\n     * @param to Recipient address.\\n     * @param amount Number of tokens to transfer.\\n     */\\n    function transferFrom(\\n        TokenStorage db,\\n        address caller,\\n        address from,\\n        address to,\\n        uint amount\\n    )\\n        external\\n        returns (bool success)\\n    {\\n        uint allowance_ = db.getAllowed(from, caller);\\n        db.subBalance(from, amount);\\n        db.addBalance(to, amount);\\n        db.setAllowed(from, caller, allowance_.sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approves a spender [ERC20].\\n     * Note that using the approve/transferFrom presents a possible\\n     * security vulnerability described in:\\n     * https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit#heading=h.quou09mcbpzw\\n     * Use transferAndCall to mitigate.\\n     * @param db Token storage to operate on.\\n     * @param caller Address of the caller passed through the frontend.\\n     * @param spender The address of the future spender.\\n     * @param amount The allowance of the spender.\\n     */\\n    function approve(TokenStorage db, address caller, address spender, uint amount)\\n        public\\n        returns (bool success)\\n    {\\n        db.setAllowed(caller, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the number tokens associated with an address.\\n     * @param db Token storage to operate on.\\n     * @param who Address to lookup.\\n     * @return balance Balance of address.\\n     */\\n    function balanceOf(TokenStorage db, address who)\\n        external\\n        view\\n        returns (uint balance)\\n    {\\n        return db.getBalance(who);\\n    }\\n\\n    /**\\n     * @dev Returns the allowance for a spender\\n     * @param db Token storage to operate on.\\n     * @param owner The address of the owner of the tokens.\\n     * @param spender The address of the spender.\\n     * @return remaining Number of tokens the spender is allowed to spend.\\n     */\\n    function allowance(TokenStorage db, address owner, address spender)\\n        external\\n        view\\n        returns (uint remaining)\\n    {\\n        return db.getAllowed(owner, spender);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childChainManagerProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes3\",\"name\":\"ticker\",\"type\":\"bytes3\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"Controller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Basic\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"h\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticker\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PolygonPosEUR", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}