{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n  /*\r\n _____  ______  ____         \r\n  / ____||  ____|/ __ \\        \r\n | |  __ | |__  | |  | |       \r\n | | |_ ||  __| | |  | |       \r\n | |__| || |____| |__| |       \r\n  \\_____||______|\\____/_     __\r\n |  __ \\  / __ \\ | |  \\ \\   / /\r\n | |__) || |  | || |   \\ \\_/ / \r\n |  ___/ | |  | || |    \\   /  \r\n | |     | |__| || |____ | |   \r\n |_|      \\____/ |______||_|   \r\n                              \r\n*/\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: GEO_NFT_v2.sol\r\n\r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary Nums {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\nlibrary GeoSpecial {\r\n    /**\r\n     * @dev mutiple arithmatic, types and logical checks can be implemented\r\n     * to ensure proper propogation of the contract when calling this library.\r\n     * However, checks are actually done in the contract itself as a result of\r\n     * the owner having the freedom in picking and choosing from the list of outcomes\r\n     * that this library produces. mainly the functions:\r\n     * 1- `GeoPoly.addToMints`\r\n     * 2- `GeoPoly.resetReservedNFTs`\r\n     */\r\n    function disect(bytes calldata _in) public pure returns(bytes32[] memory){ //  \r\n        bytes32[] memory output = new bytes32[](5);\r\n        uint256 curIdx = 0;\r\n        uint256 oIdx = 0;\r\n        for(uint256 i=0; i<_in.length; i++){\r\n            if(_in[i] == 0x2f){\r\n                output[oIdx] = bytes32(_in[curIdx:i]);\r\n                oIdx++;\r\n                curIdx = i+1;\r\n            }\r\n        }\r\n        output[4] = bytes32(_in[curIdx:_in.length]);\r\n        return(output);\r\n    }\r\n        \r\n    function format(bytes32[] memory _inArr) public pure returns(uint256 category, uint256 tier, uint256 price, string memory lat, string memory lng){\r\n        category = reverse_int(uint256(asciiToInteger(_inArr[0])));\r\n        tier = reverse_int(uint256(asciiToInteger(_inArr[1])));\r\n        price = reverse_int(uint256(asciiToInteger(_inArr[2])));\r\n        lat = bytes32ToString(_inArr[3]);\r\n        lng = bytes32ToString(_inArr[4]);\r\n    }\r\n    \r\n    function convertStringToByes(string calldata _in) public pure returns(bytes calldata _out){\r\n\r\n        _out = bytes(_in);\r\n    }\r\n\r\n  \r\n    \r\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\r\n        uint256 i = 0;\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    function reverse_int(uint256 i) public pure returns(uint) {\r\n      return reverse_recurse(i, 0);\r\n    }\r\n\r\n    function reverse_recurse(uint256 i, uint r) internal pure returns(uint256) {\r\n      if (i != 0) {\r\n        uint least_digit = i % 10;\r\n        if (r >= type(uint256).max / 10 && (r > type(uint256).max / 10 || least_digit > type(uint256).max % 10)) {\r\n          return 0; /// Overflow\r\n        }\r\n        r = reverse_recurse(i / 10, r * 10 + least_digit);\r\n      }\r\n      return r;\r\n    }\r\n\r\n    \r\n    function asciiToInteger(bytes32 x) public pure returns (uint256) {\r\n            uint256 y;\r\n            for (uint256 i = 0; i < 32; i++) {\r\n                uint256 c = (uint256(x) >> (248 - i * 8)) & 0xff;\r\n                if (48 <= c && c <= 57)\r\n                    y += (c - 48) * 10 ** i;\r\n                 else if (65 <= c && c <= 90)\r\n                    y += (c - 65 + 10) * 10 ** i;\r\n                else if (97 <= c && c <= 122)\r\n                    y += (c - 97 + 10) * 10 ** i;\r\n                else\r\n                    break;\r\n            }\r\n            return y;\r\n    }\r\n    \r\n    function doAll(string calldata _in) public pure returns(uint256 cat, uint256 tier, uint256 _price, string memory lat, string memory lng){\r\n\r\n        return(format(disect(convertStringToByes(_in))));\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\r\n \r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface GEOS20 {\r\n    function transfer(address _to, uint256 _amount) external returns(bool);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address wallet) external returns(uint256);\r\n    function transferFrom( address sender,address recipient,uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ninterface GeosOracle {\r\n    function getExchangeRate(string calldata tokenName) external view returns(uint256);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n \r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Roles is Ownable {\r\n    mapping(address => bool) private admins;\r\n    \r\n    constructor() {\r\n        addToAdmins(_msgSender());\r\n    }\r\n\r\n    function addToAdmins(address _addr) public onlyOwner {\r\n        admins[_addr] = true;\r\n    }\r\n    \r\n    function removeFromAdmins(address _addr) public onlyOwner {\r\n        admins[_addr] = false;\r\n    } \r\n    \r\n    modifier isAdmin() {\r\n        require(admins[_msgSender()], \"Roles: This address is not an admin\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract GeoPoly is ERC1155,ReentrancyGuard,Ownable,Roles {\r\n    // using counters for index trackers\r\n    using Nums for Nums.Counter;\r\n\r\n    // events for topics which are cruical\r\n    // minting an NFT\r\n    event GeoMint(string mintingProperties, address indexed minter);\r\n    // reserving an NFT\r\n    event ReserveMint(string mintingProperties, address indexed minter);\r\n    // upgrading an NFT\r\n    event GeoUpgrade(uint256 category, uint256 previousTier, uint256 newTier, address indexed owner);\r\n\r\n    // an array for the reserved NFTs\r\n    string[] _reservedNFTs;\r\n    \r\n    // mapping for reservations\r\n    mapping(string => address) _resNFTs;\r\n\r\n    // a mapping for the mints\r\n    mapping(string => NFTVars) _avalMints;\r\n\r\n    // a reference for tokenIDs and their reference string\r\n    mapping(uint256 => string) _mintIDs;\r\n\r\n    // all the current avaliable categories\r\n    mapping(uint256 => Category) _avalibleCategory;\r\n\r\n    // different private NFT sales resulting in \r\n    // differnt addresses being whitelisted\r\n    // @params keccak256(uint256 privateNFTSaleVersion, address whiteListed)\r\n    mapping (bytes32 => bool) privateNFTSale;\r\n\r\n    // current privateSaleVersion\r\n    uint256 privateNFTSaleVersion;\r\n\r\n    // a maximum cap for reservations\r\n    uint256 public constant reservedCap = 100;\r\n\r\n    // owner minting NFT cap\r\n    uint256 public constant ownerNFTCap = 2500;\r\n\r\n    // the amount of nfts avaliable for minting this season\r\n    uint256 nftsPerSeason = 0;\r\n\r\n    // the current season num;\r\n    uint256 seasonNum = 0;\r\n\r\n    // upgrade price in GEOS\r\n    uint256 public upgradePrice = 0.1 ether;\r\n\r\n    // all functionality for nfts is paused\r\n    bool privateSaleLive = false;\r\n\r\n    // all functionality for nft sales (mint) is paused\r\n    bool allowNFTSales = true;\r\n\r\n    // a counter to track category indexes\r\n    Nums.Counter private catIdx;\r\n\r\n    // a counter to track minting indexes\r\n    Nums.Counter private mintCounter;\r\n\r\n    // a counter to track owner mints\r\n    Nums.Counter private oMints;\r\n\r\n    // a counter for total season minting\r\n    Nums.Counter private seasonMints;\r\n\r\n    // category variables \r\n    struct Category{\r\n        uint256[] _upgradesPerTier;\r\n        uint256[] _avaliableTiers;\r\n        string _categoryName;\r\n    }\r\n\r\n    // NFT variables\r\n    struct NFTVars {\r\n        uint256 _categoryID;\r\n        uint256 _currentTier;\r\n        uint256 _price;\r\n        string _lat;\r\n        string _lng;\r\n        uint256 _mintIDX;\r\n    }\r\n\r\n    // an address for GEO$20 token\r\n    address gToken;\r\n\r\n    // an address for geosOracle\r\n    address gOracle = 0x85DA2B76976Bf31103256a92c14f4398CeaB0541;\r\n\r\n    // the USDT address in `MATIC`\r\n    address public constant USDTToken = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n\r\n    string private _baseURL;\r\n\r\n    string private baseExtension = \".json\";\r\n\r\n\r\n    constructor(string memory generalURL) ERC1155(generalURL) {\r\n        mintCounter.increment();\r\n        catIdx.increment();\r\n        _baseURL = generalURL;\r\n    }\r\n\r\n    /**\r\n     * @dev view functions are used extensivly \r\n     * in the onChain game, some redudency for different purposes is \r\n     * also necessary.\r\n     * \r\n     *                          **View Functions**\r\n     */\r\n    // get the CategoryID from the category Name\r\n    function getCategory(string memory _categoryName) public view returns(uint256 categoryID) {\r\n        categoryID = 0;\r\n        for (uint256 i=0; i< catIdx.current(); i++){\r\n            if (GeoSpecial.compareStrings(_categoryName, _avalibleCategory[i]._categoryName)){\r\n                categoryID = i;\r\n                break;\r\n            }\r\n        }\r\n    }    \r\n    // get all the categories that are currently implemented\r\n    function getAllCategories() external view returns(string[] memory){\r\n        uint256 idx = 0;\r\n        string[] memory _cats = new string[](catIdx.current());\r\n        for (uint256 i=1; i<=catIdx.current(); i++){\r\n            if (categoryExists(i)){\r\n                _cats[idx] = _avalibleCategory[i]._categoryName;\r\n                idx++;\r\n            }\r\n        }\r\n        return _cats;\r\n    }\r\n    // check if a category exists\r\n    function categoryExists(uint256 _category) public view returns(bool){\r\n\r\n        return(_avalibleCategory[_category]._avaliableTiers.length > 0);\r\n    }\r\n    // get the category name by querying the category ID\r\n    function getCategoryName(uint256 _categoryID) external view returns(string memory){\r\n\r\n        return(_avalibleCategory[_categoryID]._categoryName);\r\n    } \r\n    // get the current avaliable tiers for the category ID\r\n    function getAvaliableTiers(uint256 _categoryID) public view returns(uint256[] memory){\r\n\r\n        return(_avalibleCategory[_categoryID]._avaliableTiers);\r\n    }\r\n    // get the tier prices for the avaliable tiers for the category ID\r\n    function getTierPrices(uint256 _categoryID) public view returns(uint256[] memory){\r\n\r\n        return(_avalibleCategory[_categoryID]._upgradesPerTier);\r\n    }\r\n    // get the token id from the common string\r\n    function getTokenId(string memory _mintString) external view returns(uint256 _mintIndex){\r\n        _mintIndex = _avalMints[_mintString]._mintIDX;\r\n        if (_mintIndex != 0){\r\n            return(_mintIndex);\r\n        }\r\n        revert(\"This token is not avaliable\");\r\n    }\r\n    // get the minted token variables\r\n    function getTokenVars(uint256 _tokenID) public view returns(NFTVars memory _out){\r\n        _out = _avalMints[_mintIDs[_tokenID]];\r\n        if(_out._categoryID != 0 && _out._mintIDX != 0){\r\n            return(_out);\r\n        }\r\n        revert(\"This NFT doesn't exist\");\r\n    }    \r\n    // get the reference string from the token id\r\n    function getMintingString(uint256 _tokenID) external view returns(string memory){\r\n\r\n       return(_mintIDs[_tokenID]);\r\n    }\r\n    // get how many NFTs exist in a wallet\r\n    function getNumOfNFTs(address _wallet) public view returns(uint256 _len){\r\n        for (uint256 i=1; i<=mintCounter.current(); i++){\r\n            if (balanceOf(_wallet, i) > 0){\r\n                _len += 1;\r\n            }\r\n        }\r\n        return _len;\r\n    }\r\n    // get the NFT ids of a particular wallet\r\n    function getWalletNFTs(address _wallet) external view returns(uint256[] memory){\r\n        uint256 _len = getNumOfNFTs(_wallet);\r\n        uint256[] memory _wNFTs = new uint256[](_len);\r\n        uint256 idx = 0;\r\n        for (uint256 i=1; i<=mintCounter.current(); i++){\r\n            if (balanceOf(_wallet, i) > 0){\r\n                _wNFTs[idx] = i;\r\n                idx++;\r\n            }\r\n        }\r\n        return _wNFTs;\r\n    }\r\n    // get the nft variables using the nft common string\r\n    function getNFTVars(string memory _mintString) public view returns(NFTVars memory _out){\r\n        _out = _avalMints[_mintString];\r\n        if (_out._categoryID == 0){\r\n            revert(\"This NFT doesn't exist\");\r\n        }else if (_out._mintIDX != 0){\r\n            revert(\"This NFT has already been minted\");\r\n        }else if (!categoryExists(_out._categoryID)){\r\n            revert(\"This category doesn't exist\");\r\n        }\r\n    }\r\n    // get the current nft props from the common string\r\n    function deserilazeNFTProps(string memory _mintString) public pure returns(NFTVars memory _out){\r\n        (uint256 cat, uint256 tier, uint256 _price, string memory lat, string memory lng) = GeoSpecial.doAll(_mintString);\r\n        _out = NFTVars(cat, tier, (_price*(10**6)), lat, lng, 0);\r\n    }\r\n    // get the current tier for the NFT\r\n    function getNFTTier(uint256 _tokenID) external view returns(uint256){\r\n\r\n        return(_avalMints[_mintIDs[_tokenID]]._currentTier);\r\n    }\r\n    // returns the current price of matic from a usdt value\r\n    function oracleUSDTcalc(uint256 _humanUSDT) public view returns(uint256){\r\n\r\n        return(_humanUSDT*(10**18)/ GeosOracle(gOracle).getExchangeRate(\"WMATIC\"));\r\n    }\r\n    // calculate how much it will cost to upgrade from the current tier to the next tier\r\n    function calcUpgradeCost(uint256 _category, uint256 _currentTier, uint256 _nextTier) public view returns(uint256) {\r\n        if (_currentTier >= _nextTier){\r\n            revert(\"This NFT has the same or greater tier than requested\");\r\n        }\r\n        Category memory category = _avalibleCategory[_category];\r\n        uint256 _avalLen = category._avaliableTiers.length;\r\n        // since it's sequential no need to worry, this is sufficent\r\n        require(_nextTier <= category._avaliableTiers[_avalLen-1],\"This tier does not exist\");\r\n\r\n        uint256 upgradeCost = 0;\r\n        \r\n        for(uint256 i=0; i< _avalLen; i++){\r\n            if (category._avaliableTiers[i] <= _nextTier && category._avaliableTiers[i] > _currentTier){\r\n                upgradeCost += category._upgradesPerTier[i];\r\n            }\r\n        }\r\n        uint256 _fUpgrade = upgradeCost*upgradePrice;\r\n        if (_fUpgrade > 0){\r\n            return(_fUpgrade);\r\n        }else{\r\n            revert(\"Cannot Upgrade\");\r\n        }\r\n    }\r\n    // check if an address is whitelisted to be in the NFT presale\r\n    function isWhitelisted(address _wallet) public view returns(bool) {\r\n\r\n        return(privateNFTSale[getKec(_wallet)]);\r\n    }\r\n\r\n    /**\r\n     * @dev public payable functions in a way or another\r\n     * either by `ETH` transfer using payable or ERC20 `transfer` || `transferFrom`\r\n     * all calls to `transferFrom` has an `allowance` check instead of optmisitc transfers with \r\n     * a revert call.\r\n     * \r\n     *                          **PAYABLE FUNCTIONS**\r\n     */\r\n\r\n    // upgrade the current NFT using the tokenID\r\n    function upgradeNFT(uint256 _tokenID, uint256 _newTier) external nonReentrant {\r\n        require(allowNFTSales, \"NFT upgrades are currently not allowed\");\r\n        require(balanceOf(msg.sender, _tokenID) > 0, \"Need To be the owner to upgrade the NFT\");\r\n        NFTVars memory _nft = getTokenVars(_tokenID);\r\n        checkGeosPayment(msg.sender, calcUpgradeCost(_nft._categoryID, _nft._currentTier, _newTier));\r\n        changeNFTTier(_tokenID, _newTier);\r\n        emit GeoUpgrade(_nft._categoryID, _nft._currentTier, _newTier, msg.sender);\r\n    }\r\n    // a generic function for minting NFTs\r\n    function geoMint(string memory _props, address _to) external payable nonReentrant{\r\n        require(allowNFTSales || (privateSaleLive && isWhitelisted(msg.sender)), \"NFT sales are currently not allowed\");\r\n        NFTVars memory _nft = getNFTVars(_props);\r\n        if(msg.sender == owner()){\r\n            require(oMints.current() < ownerNFTCap, \"GeoPoly: Owner cannot mint anymore\");\r\n            oMints.increment();\r\n        }else{\r\n            require(checkPayment(msg.sender, uint256(msg.value), _nft._price), \"Payment is required to mint an NFT\");\r\n        }\r\n        genericMint(_props, _to);\r\n    }\r\n    // Reserve an NFT \r\n    function reserveNFT(string memory _props, address _to) external payable nonReentrant{\r\n       require(allowNFTSales, \"NFT reservations are currently not allowed\");\r\n       require(categoryExists(deserilazeNFTProps(_props)._categoryID));\r\n       require(_reservedNFTs.length <= reservedCap,\"Maximum limit for reservations, try later\");\r\n       require(checkPayment(msg.sender, uint256(msg.value), deserilazeNFTProps(_props)._price), \"Payment is required to reserve an NFT\");\r\n       require(_resNFTs[_props] == address(0), \"This NFT has already been reserved\");\r\n       if(_avalMints[_props]._categoryID != 0){\r\n           if (_avalMints[_props]._mintIDX == 0){\r\n               revert(\"This NFT is avaliable, mint it before it's gone.\");\r\n           }\r\n           revert(\"This NFT has already been minted\");\r\n        }\r\n\r\n        _resNFTs[_props] = _to;\r\n        _reservedNFTs.push(_props);\r\n        emit ReserveMint(_props, _to);\r\n    }\r\n\r\n    /**\r\n     * @dev internal functions, different use cases for different\r\n     * implementations, the ERC1155 standard `_mint` is not of much use\r\n     * without wrappers for different functionality, i.e resevingNFTs \r\n     * most internal functions handle calls that are exposed by the payable\r\n     * functions.\r\n     * \r\n     *                          **INTERNAL FUNCTIONS**\r\n     */\r\n    // get the keccak256() to check in whitelist mapping\r\n    function getKec(address _wallet) internal view returns(bytes32) {\r\n\r\n        return(keccak256(abi.encodePacked(_wallet, privateNFTSaleVersion)));\r\n    }\r\n    // change the NFT tier\r\n    function changeNFTTier(uint256 _tokenID, uint256 _newTier) internal {\r\n\r\n        _avalMints[_mintIDs[_tokenID]]._currentTier = _newTier;\r\n    }\r\n    // check if a payment was made, either in USDT or MATIC\r\n    function checkPayment(address _sender, uint256 _senderMsgVal, uint256 _priceUSDT) internal returns(bool) {\r\n        if(_senderMsgVal >= oracleUSDTcalc(_priceUSDT)){\r\n            return true;\r\n        } else if (GEOS20(USDTToken).allowance(_sender, address(this)) >= _priceUSDT){\r\n            if(GEOS20(USDTToken).transferFrom(_sender, address(this), _priceUSDT)){\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n    // check if payment was done in GEOS\r\n    function checkGeosPayment(address _sender, uint256 _amount) internal returns(bool){\r\n        require(GEOS20(gToken).allowance(_sender, address(this)) >= _amount, \"You need to allow us to spend your GEO$ for upgrades\");\r\n        require(GEOS20(gToken).transferFrom(_sender, address(this), _amount),\"You have to pay to upgrade your NFT\");\r\n        return true;\r\n    }\r\n    // add a mint using batches, using a single addition\r\n    function addMint(string memory _gpMint) internal returns(bool){\r\n        if(_avalMints[_gpMint]._categoryID != 0){\r\n            revert(\"This NFT has already been added\");\r\n        }\r\n        _avalMints[_gpMint] = deserilazeNFTProps(_gpMint);\r\n        return(true);\r\n    }\r\n\r\n    function removeMints(string[] memory _nftStrings) external isAdmin {\r\n        for(uint256 i=0; i<_nftStrings.length; i++){\r\n            removeMint(_nftStrings[i]);\r\n        }\r\n    }\r\n\r\n    function removeMint(string memory _gpMint) internal{\r\n        require(_avalMints[_gpMint]._mintIDX == 0);\r\n        _avalMints[_gpMint] = NFTVars(uint256(0),uint256(0),uint256(0),\"\",\"\",uint256(0));\r\n    }\r\n\r\n\r\n    // genericMint \r\n    function genericMint(string memory _props, address _to) internal {\r\n        mintCounter.increment();\r\n        uint256 nftMintIdx = mintCounter.current();\r\n        _avalMints[_props] = deserilazeNFTProps(_props);\r\n        _avalMints[_props]._mintIDX = nftMintIdx;\r\n        _mint(_to, nftMintIdx, 1 ,\"\");\r\n        _mintIDs[nftMintIdx] = _props;\r\n        emit GeoMint(_props, _to);\r\n    }\r\n\r\n    /**\r\n     * @dev admin functions are the heart and soul of this contract\r\n     * in terms of continuity in development. these functions are linked\r\n     * to services on servers that will call different functionalities in\r\n     * cronjobs to ensure smooth and realistic gameplay. owner is also an admin\r\n     * keeping in mind that many of these functions grow the game,\r\n     * i.e adding new categories&tiers.\r\n     * \r\n     *                            **ADMIN FUNCTIONS**\r\n     */\r\n\r\n    // get all the currently reserved NFTs\r\n    function getReservedNFTs() external view isAdmin returns(string[] memory, address[] memory) {\r\n        address[] memory _reservedAddresses = new address[](_reservedNFTs.length);\r\n        for (uint256 i=0; i<_reservedNFTs.length; i++){\r\n            _reservedAddresses[i] = _resNFTs[_reservedNFTs[i]];\r\n        }\r\n        return(_reservedNFTs, _reservedAddresses);\r\n    }\r\n    // add a new category\r\n    function addCategory(string memory _categoryNew,uint256[] memory _tiersUpgrades, uint256[] memory _tiersAva) external isAdmin returns (bool){\r\n        if (getCategory(_categoryNew) != 0){\r\n            revert(\"This category already exists\");\r\n        }\r\n        uint256 _categoryID = catIdx.current();\r\n        _avalibleCategory[_categoryID] = Category(_tiersUpgrades, _tiersAva, _categoryNew);\r\n        catIdx.increment();\r\n        return(true);\r\n    }\r\n    // add a new tier for the categoryID and update the price of the new tier\r\n    function addTier(uint256 _categoryID, uint256 _tierNew, uint256 _tierPrice) external isAdmin {\r\n        uint256[] memory _tiersAval = getAvaliableTiers(_categoryID);\r\n        uint256[] memory _tiersUpg = getTierPrices(_categoryID);\r\n        uint256 tiersLen = _tiersAval.length;\r\n        uint256[] memory _newTiers = new uint256[](tiersLen+1);\r\n        uint256[] memory _newTierPrices = new uint256[](tiersLen+1);\r\n        for(uint256 i=0; i < tiersLen; i++){\r\n            _newTiers[i] = _tiersAval[i];\r\n            _newTierPrices[i] = _tiersUpg[i];\r\n        }\r\n        _newTiers[tiersLen] = _tierNew;\r\n        _newTierPrices[tiersLen] = _tierPrice;\r\n        _avalibleCategory[_categoryID]._avaliableTiers = _newTiers;\r\n        _avalibleCategory[_categoryID]._upgradesPerTier = _newTierPrices;\r\n    }\r\n    // change the tier price for a particular category\r\n    function changeUpgradePerTier(uint256 _categoryID, uint256 _tierIdx, uint256 _upgrades) external isAdmin{\r\n\r\n        _avalibleCategory[_categoryID]._upgradesPerTier[_tierIdx] = _upgrades;\r\n    }\r\n    // set the general upgrade price\r\n    function changeUpgradePrice(uint256 _price) external isAdmin {\r\n\r\n        upgradePrice = _price;\r\n    }\r\n    // pause the NFT sales\r\n    function nftSalePaused(bool _state) external isAdmin  {\r\n\r\n        allowNFTSales = _state;\r\n    }\r\n    // pause the private sale\r\n    function pausePrivatePresale(bool _state) external isAdmin  {\r\n\r\n        privateSaleLive = _state;\r\n    }\r\n    // change the season\r\n    function changeSeason(uint256 _seasonNum, uint256 _nftsPer) external isAdmin  {\r\n        seasonNum = _seasonNum;\r\n        nftsPerSeason = _nftsPer;\r\n        oMints.reset();\r\n        seasonMints.reset();\r\n    }\r\n    // mint all reserved nfts to their respective owners\r\n    function mintReserved() external isAdmin {\r\n        if (_reservedNFTs.length != 0){\r\n            for (uint256 i=0; i< _reservedNFTs.length; i++){\r\n                genericMint(_reservedNFTs[i], _resNFTs[_reservedNFTs[i]]);\r\n            }\r\n            delete _reservedNFTs;\r\n        }\r\n    }\r\n    // add new mints by batches\r\n    function addToMints(string[] memory _newMints) external isAdmin {\r\n        for (uint256 i=0; i<_newMints.length; i++){\r\n            addMint(_newMints[i]);\r\n        }\r\n    }\r\n    // set a new array for reserved NFTs\r\n    function resetReservedNFTs(string[] memory _nfts, address[] memory _reservations) external isAdmin {\r\n        require(_nfts.length == _reservations.length, \"NFTs and RESERVATIONs needs to be the same length\");\r\n        _reservedNFTs = _nfts;\r\n        // check if we should refund wrong NFTs;\r\n        for(uint256 i=0; i<_nfts.length; i++){\r\n            _resNFTs[_nfts[i]] = _reservations[i];\r\n        }\r\n    }\r\n    // add addresses to whitelisting\r\n    function addToWhitelist(address _wallet) external isAdmin {\r\n    \r\n        privateNFTSale[getKec(_wallet)] = true;\r\n    }\r\n    // remove address from whitelisting\r\n    function removeFromWhitelist(address _wallet) external isAdmin {\r\n\r\n        privateNFTSale[getKec(_wallet)] = false;\r\n    }\r\n    // add batch addresses to whitelisting\r\n    function addBatchWhitelist(address[] calldata _wallets) external isAdmin {\r\n\r\n        for(uint256 i=0; i<_wallets.length; i++){\r\n            privateNFTSale[getKec(_wallets[i])] = true;\r\n        }\r\n    }\r\n    // incrementing the private presale version will render old addresses `false`\r\n    function nextPrivateSaleV() external isAdmin {\r\n\r\n        privateNFTSaleVersion++;\r\n    }\r\n\r\n    function setBaseURL(string memory _nURL) external isAdmin {\r\n        _baseURL = _nURL;\r\n    }\r\n\r\n    function setBaseExtention(string memory _nEXT) external isAdmin {\r\n        baseExtension = _nEXT;\r\n    }\r\n\r\n    //get the specific tokenURI from the tokenID\r\n       function tokenURI(uint256 tokenId) external view returns(string memory){\r\n        NFTVars memory _vars = getTokenVars(tokenId);\r\n        uint256 _mintIDX = _vars._mintIDX;\r\n        string memory currentBaseURI = _baseURL;\r\n        return\r\n            bytes(currentBaseURI).length > 0\r\n                ? string(abi.encodePacked(currentBaseURI, GeoSpecial.toString(_mintIDX), baseExtension))\r\n                : \"\";\r\n    }\r\n    /**\r\n     * @dev owner functions are mostly CFO&CEO responsibilities \r\n     * such as token withdrawal and managment of the external \r\n     * contract addresses in terms of GEO$ token or Geos Oracle,\r\n     * adding and removing admins.\r\n     *\r\n     *                      **OWNER FUNCTIONS**\r\n     */\r\n\r\n    // set the address of GEOS token\r\n    function setGeosToken(address _geo20) external onlyOwner {\r\n\r\n        gToken = _geo20;\r\n    }\r\n    // set a new oracle address\r\n    function setgOracle(address _newGOracle) external onlyOwner {\r\n\r\n        gOracle = _newGOracle;\r\n    }\r\n    // withdraw all matic avaliable\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        require(address(this).balance >= amount,\"Not enough balance to withdraw this much\");\r\n        require(payable(msg.sender).send(amount), \"cannot process withdrawal\");\r\n    }\r\n    // withdraw an amount of GEOS which is avaliable\r\n    function withdrawGeos(uint256 amount) external onlyOwner {\r\n\r\n        require(GEOS20(gToken).transfer(msg.sender, amount));\r\n    }\r\n    // withdraw an amount of USDT which is avaliable (6 decimals)\r\n    function withdrawUSDT(uint256 amount) external onlyOwner {\r\n\r\n        require(GEOS20(USDTToken).transfer(msg.sender, amount));\r\n    }\r\n    // withdraw any other token addresses safekeeping\r\n    function withdrawTokens(address tokenAddr) external onlyOwner {\r\n\r\n        require(GEOS20(tokenAddr).transfer(msg.sender, GEOS20(tokenAddr).balanceOf(address(this))));\r\n    }\r\n    // withdraw `MATIC`&`GEOS`&`USDT` in one function\r\n    function withdrawAll() external onlyOwner {\r\n        require(payable(msg.sender).send(address(this).balance));\r\n        require(GEOS20(gToken).transfer(msg.sender, GEOS20(gToken).balanceOf(address(this))));\r\n        require(GEOS20(USDTToken).transfer(msg.sender, GEOS20(USDTToken).balanceOf(address(this))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"generalURL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mintingProperties\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"GeoMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"GeoUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mintingProperties\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"ReserveMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDTToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"addBatchWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_categoryNew\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiersUpgrades\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tiersAva\",\"type\":\"uint256[]\"}],\"name\":\"addCategory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierNew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierPrice\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_newMints\",\"type\":\"string[]\"}],\"name\":\"addToMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextTier\",\"type\":\"uint256\"}],\"name\":\"calcUpgradeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"categoryExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seasonNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftsPer\",\"type\":\"uint256\"}],\"name\":\"changeSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upgrades\",\"type\":\"uint256\"}],\"name\":\"changeUpgradePerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeUpgradePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_mintString\",\"type\":\"string\"}],\"name\":\"deserilazeNFTProps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lng\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintIDX\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoPoly.NFTVars\",\"name\":\"_out\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_props\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"geoMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCategories\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"}],\"name\":\"getAvaliableTiers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_categoryName\",\"type\":\"string\"}],\"name\":\"getCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"}],\"name\":\"getCategoryName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getMintingString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getNFTTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_mintString\",\"type\":\"string\"}],\"name\":\"getNFTVars\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lng\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintIDX\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoPoly.NFTVars\",\"name\":\"_out\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNumOfNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservedNFTs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"}],\"name\":\"getTierPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_mintString\",\"type\":\"string\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenVars\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_categoryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lng\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintIDX\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoPoly.NFTVars\",\"name\":\"_out\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWalletNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReserved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPrivateSaleV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"nftSalePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_humanUSDT\",\"type\":\"uint256\"}],\"name\":\"oracleUSDTcalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerNFTCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pausePrivatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_nftStrings\",\"type\":\"string[]\"}],\"name\":\"removeMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_props\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reserveNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_nfts\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_reservations\",\"type\":\"address[]\"}],\"name\":\"resetReservedNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nEXT\",\"type\":\"string\"}],\"name\":\"setBaseExtention\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nURL\",\"type\":\"string\"}],\"name\":\"setBaseURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_geo20\",\"type\":\"address\"}],\"name\":\"setGeosToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGOracle\",\"type\":\"address\"}],\"name\":\"setgOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTier\",\"type\":\"uint256\"}],\"name\":\"upgradeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGeos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GeoPoly", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c68747470733a2f2f7374617469632e67656f706f6c792e696f2f6e6674732f25374269642537442e6a736f6e0000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "GeoSpecial:44da64602f77f7caded40d71e0f1a252e6800064", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d64ac15b081cee962563a90f777746ad2b2ac65d3442076c8aa332d7b628a156"}