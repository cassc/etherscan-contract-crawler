{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/*\\r\\n * @author Uniswap\\r\\n * @notice Library from Uniswap\\r\\n */\\r\\nlibrary Babylonian {\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx \\u003e= 0x100000000000000000000000000000000) {\\r\\n            xx \\u003e\\u003e= 128;\\r\\n            r \\u003c\\u003c= 64;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10000000000000000) {\\r\\n            xx \\u003e\\u003e= 64;\\r\\n            r \\u003c\\u003c= 32;\\r\\n        }\\r\\n        if (xx \\u003e= 0x100000000) {\\r\\n            xx \\u003e\\u003e= 32;\\r\\n            r \\u003c\\u003c= 16;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10000) {\\r\\n            xx \\u003e\\u003e= 16;\\r\\n            r \\u003c\\u003c= 8;\\r\\n        }\\r\\n        if (xx \\u003e= 0x100) {\\r\\n            xx \\u003e\\u003e= 8;\\r\\n            r \\u003c\\u003c= 4;\\r\\n        }\\r\\n        if (xx \\u003e= 0x10) {\\r\\n            xx \\u003e\\u003e= 4;\\r\\n            r \\u003c\\u003c= 2;\\r\\n        }\\r\\n        if (xx \\u003e= 0x8) {\\r\\n            r \\u003c\\u003c= 1;\\r\\n        }\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n        r = (r + x / r) \\u003e\\u003e 1;\\r\\n\\r\\n        uint256 r1 = x / r;\\r\\n\\r\\n        return (r \\u003c r1 ? r : r1);\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\"},\"IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\nimport \\\"./IPancakeRouter01.sol\\\";\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"PancakeZapV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\r\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport {IPancakePair} from \\\"./IPancakePair.sol\\\";\\r\\nimport {IPancakeRouter02} from \\\"./IPancakeRouter02.sol\\\";\\r\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\r\\nimport {Babylonian} from \\\"./Babylonian.sol\\\";\\r\\n\\r\\n/*\\r\\n * @author Inspiration from the work of Zapper and Beefy.\\r\\n * Implemented and modified by PancakeSwap teams.\\r\\n */\\r\\ncontract PancakeZapV1 is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Interface for Wrapped BNB (WBNB)\\r\\n    IWETH public WBNB;\\r\\n\\r\\n    // PancakeRouter interface\\r\\n    IPancakeRouter02 public pancakeRouter;\\r\\n\\r\\n    // Maximum integer (used for managing allowance)\\r\\n    uint256 public constant MAX_INT = 2**256 - 1;\\r\\n\\r\\n    // Minimum amount for a swap (derived from PancakeSwap)\\r\\n    uint256 public constant MINIMUM_AMOUNT = 1000;\\r\\n\\r\\n    // Maximum reverse zap ratio (100 --\\u003e 1%, 1000 --\\u003e 0.1%)\\r\\n    uint256 public maxZapReverseRatio;\\r\\n\\r\\n    // Address PancakeRouter\\r\\n    address private pancakeRouterAddress;\\r\\n\\r\\n    // Address Wrapped BNB (WBNB)\\r\\n    address private WBNBAddress;\\r\\n\\r\\n    // Owner recovers token\\r\\n    event AdminTokenRecovery(address indexed tokenAddress, uint256 amountTokens);\\r\\n\\r\\n    // Owner changes the maxZapReverseRatio\\r\\n    event NewMaxZapReverseRatio(uint256 maxZapReverseRatio);\\r\\n\\r\\n    // tokenToZap = 0x00 address if BNB\\r\\n    event ZapIn(\\r\\n        address indexed tokenToZap,\\r\\n        address indexed lpToken,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 lpTokenAmountReceived,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    // token0ToZap = 0x00 address if BNB\\r\\n    event ZapInRebalancing(\\r\\n        address indexed token0ToZap,\\r\\n        address indexed token1ToZap,\\r\\n        address lpToken,\\r\\n        uint256 token0AmountIn,\\r\\n        uint256 token1AmountIn,\\r\\n        uint256 lpTokenAmountReceived,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    // tokenToReceive = 0x00 address if BNB\\r\\n    event ZapOut(\\r\\n        address indexed lpToken,\\r\\n        address indexed tokenToReceive,\\r\\n        uint256 lpTokenAmount,\\r\\n        uint256 tokenAmountReceived,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /*\\r\\n     * @notice Fallback for WBNB\\r\\n     */\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WBNBAddress);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Constructor\\r\\n     * @param _WBNBAddress: address of the WBNB contract\\r\\n     * @param _pancakeRouter: address of the PancakeRouter\\r\\n     * @param _maxZapReverseRatio: maximum zap ratio\\r\\n     */\\r\\n    constructor(\\r\\n        address _WBNBAddress,\\r\\n        address _pancakeRouter,\\r\\n        uint256 _maxZapReverseRatio\\r\\n    ) {\\r\\n        WBNBAddress = _WBNBAddress;\\r\\n        WBNB = IWETH(_WBNBAddress);\\r\\n        pancakeRouterAddress = _pancakeRouter;\\r\\n        pancakeRouter = IPancakeRouter02(_pancakeRouter);\\r\\n        maxZapReverseRatio = _maxZapReverseRatio;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap BNB in a WBNB pool (e.g. WBNB/token)\\r\\n     * @param _lpToken: LP token address (e.g. CAKE/BNB)\\r\\n     * @param _tokenAmountOutMin: minimum token amount (e.g. CAKE) to receive in the intermediary swap (e.g. BNB --\\u003e CAKE)\\r\\n     */\\r\\n    function zapInBNB(address _lpToken, uint256 _tokenAmountOutMin) external payable nonReentrant {\\r\\n        WBNB.deposit{value: msg.value}();\\r\\n\\r\\n        // Call zap function\\r\\n        uint256 lpTokenAmountTransferred = _zapIn(WBNBAddress, msg.value, _lpToken, _tokenAmountOutMin);\\r\\n\\r\\n        // Emit event\\r\\n        emit ZapIn(\\r\\n            address(0x0000000000000000000000000000000000000000),\\r\\n            _lpToken,\\r\\n            msg.value,\\r\\n            lpTokenAmountTransferred,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap a token in (e.g. token/other token)\\r\\n     * @param _tokenToZap: token to zap\\r\\n     * @param _tokenAmountIn: amount of token to swap\\r\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\r\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --\\u003e CAKE)\\r\\n     */\\r\\n    function zapInToken(\\r\\n        address _tokenToZap,\\r\\n        uint256 _tokenAmountIn,\\r\\n        address _lpToken,\\r\\n        uint256 _tokenAmountOutMin\\r\\n    ) external nonReentrant {\\r\\n        // Transfer tokens to this contract\\r\\n        IERC20(_tokenToZap).safeTransferFrom(msg.sender, address(this), _tokenAmountIn);\\r\\n\\r\\n        // Call zap function\\r\\n        uint256 lpTokenAmountTransferred = _zapIn(_tokenToZap, _tokenAmountIn, _lpToken, _tokenAmountOutMin);\\r\\n\\r\\n        // Emit event\\r\\n        emit ZapIn(_tokenToZap, _lpToken, _tokenAmountIn, lpTokenAmountTransferred, msg.sender);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap two tokens in, rebalance them to 50-50, before adding them to LP\\r\\n     * @param _token0ToZap: address of token0 to zap\\r\\n     * @param _token1ToZap: address of token1 to zap\\r\\n     * @param _token0AmountIn: amount of token0 to zap\\r\\n     * @param _token1AmountIn: amount of token1 to zap\\r\\n     * @param _lpToken: LP token address (token0/token1)\\r\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\r\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\r\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\r\\n     */\\r\\n    function zapInTokenRebalancing(\\r\\n        address _token0ToZap,\\r\\n        address _token1ToZap,\\r\\n        uint256 _token0AmountIn,\\r\\n        uint256 _token1AmountIn,\\r\\n        address _lpToken,\\r\\n        uint256 _tokenAmountInMax,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        bool _isToken0Sold\\r\\n    ) external nonReentrant {\\r\\n        // Transfer tokens to this contract\\r\\n        IERC20(_token0ToZap).safeTransferFrom(msg.sender, address(this), _token0AmountIn);\\r\\n        IERC20(_token1ToZap).safeTransferFrom(msg.sender, address(this), _token1AmountIn);\\r\\n\\r\\n        // Call zapIn function\\r\\n        uint256 lpTokenAmountTransferred = _zapInRebalancing(\\r\\n            _token0ToZap,\\r\\n            _token1ToZap,\\r\\n            _token0AmountIn,\\r\\n            _token1AmountIn,\\r\\n            _lpToken,\\r\\n            _tokenAmountInMax,\\r\\n            _tokenAmountOutMin,\\r\\n            _isToken0Sold\\r\\n        );\\r\\n\\r\\n        // Emit event\\r\\n        emit ZapInRebalancing(\\r\\n            _token0ToZap,\\r\\n            _token1ToZap,\\r\\n            _lpToken,\\r\\n            _token0AmountIn,\\r\\n            _token1AmountIn,\\r\\n            lpTokenAmountTransferred,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap 1 token and BNB, rebalance them to 50-50, before adding them to LP\\r\\n     * @param _token1ToZap: address of token1 to zap\\r\\n     * @param _token1AmountIn: amount of token1 to zap\\r\\n     * @param _lpToken: LP token address\\r\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\r\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\r\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\r\\n     */\\r\\n    function zapInBNBRebalancing(\\r\\n        address _token1ToZap,\\r\\n        uint256 _token1AmountIn,\\r\\n        address _lpToken,\\r\\n        uint256 _tokenAmountInMax,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        bool _isToken0Sold\\r\\n    ) external payable nonReentrant {\\r\\n        WBNB.deposit{value: msg.value}();\\r\\n\\r\\n        IERC20(_token1ToZap).safeTransferFrom(msg.sender, address(this), _token1AmountIn);\\r\\n\\r\\n        // Call zapIn function\\r\\n        uint256 lpTokenAmountTransferred = _zapInRebalancing(\\r\\n            WBNBAddress,\\r\\n            _token1ToZap,\\r\\n            msg.value,\\r\\n            _token1AmountIn,\\r\\n            _lpToken,\\r\\n            _tokenAmountInMax,\\r\\n            _tokenAmountOutMin,\\r\\n            _isToken0Sold\\r\\n        );\\r\\n\\r\\n        // Emit event\\r\\n        emit ZapInRebalancing(\\r\\n            address(0x0000000000000000000000000000000000000000),\\r\\n            _token1ToZap,\\r\\n            _lpToken,\\r\\n            msg.value,\\r\\n            _token1AmountIn,\\r\\n            lpTokenAmountTransferred,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap a LP token out to receive BNB\\r\\n     * @param _lpToken: LP token address (e.g. CAKE/WBNB)\\r\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\r\\n     * @param _tokenAmountOutMin: minimum amount to receive (in BNB/WBNB) in the intermediary swap (e.g. CAKE --\\u003e BNB)\\r\\n     */\\r\\n    function zapOutBNB(\\r\\n        address _lpToken,\\r\\n        uint256 _lpTokenAmount,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        uint256 _totalTokenAmountOutMin\\r\\n    ) external nonReentrant {\\r\\n        // Transfer LP token to this address\\r\\n        IERC20(_lpToken).safeTransferFrom(msg.sender, address(_lpToken), _lpTokenAmount);\\r\\n\\r\\n        // Call zapOut\\r\\n        uint256 tokenAmountToTransfer = _zapOut(_lpToken, WBNBAddress, _tokenAmountOutMin, _totalTokenAmountOutMin);\\r\\n\\r\\n        // Unwrap BNB\\r\\n        WBNB.withdraw(tokenAmountToTransfer);\\r\\n\\r\\n        // Transfer BNB to the msg.sender\\r\\n        (bool success, ) = msg.sender.call{value: tokenAmountToTransfer}(new bytes(0));\\r\\n        require(success, \\\"BNB: transfer fail\\\");\\r\\n\\r\\n        // Emit event\\r\\n        emit ZapOut(\\r\\n            _lpToken,\\r\\n            address(0x0000000000000000000000000000000000000000),\\r\\n            _lpTokenAmount,\\r\\n            tokenAmountToTransfer,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap a LP token out (to receive a token)\\r\\n     * @param _lpToken: LP token address (e.g. CAKE/BUSD)\\r\\n     * @param _tokenToReceive: one of the 2 tokens from the LP (e.g. CAKE or BUSD)\\r\\n     * @param _lpTokenAmount: amount of LP tokens to zap out\\r\\n     * @param _tokenAmountOutMin: minimum token to receive (e.g. CAKE) in the intermediary swap (e.g. BUSD --\\u003e CAKE)\\r\\n     */\\r\\n    function zapOutToken(\\r\\n        address _lpToken,\\r\\n        address _tokenToReceive,\\r\\n        uint256 _lpTokenAmount,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        uint256 _totalTokenAmountOutMin\\r\\n    ) external nonReentrant {\\r\\n        // Transfer LP token to this address\\r\\n        IERC20(_lpToken).safeTransferFrom(msg.sender, address(_lpToken), _lpTokenAmount);\\r\\n\\r\\n        uint256 tokenAmountToTransfer = _zapOut(_lpToken, _tokenToReceive, _tokenAmountOutMin, _totalTokenAmountOutMin);\\r\\n\\r\\n        IERC20(_tokenToReceive).safeTransfer(msg.sender, tokenAmountToTransfer);\\r\\n\\r\\n        emit ZapOut(_lpToken, _tokenToReceive, _lpTokenAmount, tokenAmountToTransfer, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the owner to change the risk parameter for quantities\\r\\n     * @param _maxZapInverseRatio: new inverse ratio\\r\\n     * @dev This function is only callable by owner.\\r\\n     */\\r\\n    function updateMaxZapInverseRatio(uint256 _maxZapInverseRatio) external onlyOwner {\\r\\n        maxZapReverseRatio = _maxZapInverseRatio;\\r\\n        emit NewMaxZapReverseRatio(_maxZapInverseRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the owner to recover wrong tokens sent to the contract\\r\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\r\\n     * @param _tokenAmount: the number of token amount to withdraw\\r\\n     * @dev This function is only callable by owner.\\r\\n     */\\r\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\r\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\r\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice View the details for single zap\\r\\n     * @dev Use WBNB for _tokenToZap (if BNB is the input)\\r\\n     * @param _tokenToZap: address of the token to zap\\r\\n     * @param _tokenAmountIn: amount of token to zap inputed\\r\\n     * @param _lpToken: address of the LP token\\r\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\r\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\r\\n     * @return swapTokenOut: token address of the token that is used in the intermediary swap\\r\\n     */\\r\\n    function estimateZapInSwap(\\r\\n        address _tokenToZap,\\r\\n        uint256 _tokenAmountIn,\\r\\n        address _lpToken\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 swapAmountIn,\\r\\n            uint256 swapAmountOut,\\r\\n            address swapTokenOut\\r\\n        )\\r\\n    {\\r\\n        address token0 = IPancakePair(_lpToken).token0();\\r\\n        address token1 = IPancakePair(_lpToken).token1();\\r\\n\\r\\n        require(_tokenToZap == token0 || _tokenToZap == token1, \\\"Zap: Wrong tokens\\\");\\r\\n\\r\\n        // Convert to uint256 (from uint112)\\r\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\r\\n\\r\\n        if (token0 == _tokenToZap) {\\r\\n            swapTokenOut = token1;\\r\\n            swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveA, reserveB);\\r\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\r\\n        } else {\\r\\n            swapTokenOut = token0;\\r\\n            swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveB, reserveA);\\r\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\r\\n        }\\r\\n\\r\\n        return (swapAmountIn, swapAmountOut, swapTokenOut);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice View the details for a rebalancing zap\\r\\n     * @dev Use WBNB for _token0ToZap (if BNB is the input)\\r\\n     * @param _token0ToZap: address of the token0 to zap\\r\\n     * @param _token1ToZap: address of the token0 to zap\\r\\n     * @param _token0AmountIn: amount for token0 to zap\\r\\n     * @param _token1AmountIn: amount for token1 to zap\\r\\n     * @param _lpToken: address of the LP token\\r\\n     * @return swapAmountIn: amount that is expected to get swapped in intermediary swap\\r\\n     * @return swapAmountOut: amount that is expected to get received in intermediary swap\\r\\n     * @return isToken0Sold: whether the token0 is sold (false --\\u003e token1 is sold in the intermediary swap)\\r\\n     */\\r\\n    function estimateZapInRebalancingSwap(\\r\\n        address _token0ToZap,\\r\\n        address _token1ToZap,\\r\\n        uint256 _token0AmountIn,\\r\\n        uint256 _token1AmountIn,\\r\\n        address _lpToken\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 swapAmountIn,\\r\\n            uint256 swapAmountOut,\\r\\n            bool sellToken0\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            _token0ToZap == IPancakePair(_lpToken).token0() || _token0ToZap == IPancakePair(_lpToken).token1(),\\r\\n            \\\"Zap: Wrong token0\\\"\\r\\n        );\\r\\n        require(\\r\\n            _token1ToZap == IPancakePair(_lpToken).token0() || _token1ToZap == IPancakePair(_lpToken).token1(),\\r\\n            \\\"Zap: Wrong token1\\\"\\r\\n        );\\r\\n\\r\\n        require(_token0ToZap != _token1ToZap, \\\"Zap: Same tokens\\\");\\r\\n\\r\\n        // Convert to uint256 (from uint112)\\r\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\r\\n\\r\\n        if (_token0ToZap == IPancakePair(_lpToken).token0()) {\\r\\n            sellToken0 = (_token0AmountIn * reserveB \\u003e _token1AmountIn * reserveA) ? true : false;\\r\\n\\r\\n            // Calculate the amount that is expected to be swapped\\r\\n            swapAmountIn = _calculateAmountToSwapForRebalancing(\\r\\n                _token0AmountIn,\\r\\n                _token1AmountIn,\\r\\n                reserveA,\\r\\n                reserveB,\\r\\n                sellToken0\\r\\n            );\\r\\n\\r\\n            // Calculate the amount expected to be received in the intermediary swap\\r\\n            if (sellToken0) {\\r\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\r\\n            } else {\\r\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\r\\n            }\\r\\n        } else {\\r\\n            sellToken0 = (_token0AmountIn * reserveA \\u003e _token1AmountIn * reserveB) ? true : false;\\r\\n            // Calculate the amount that is expected to be swapped\\r\\n            swapAmountIn = _calculateAmountToSwapForRebalancing(\\r\\n                _token0AmountIn,\\r\\n                _token1AmountIn,\\r\\n                reserveB,\\r\\n                reserveA,\\r\\n                sellToken0\\r\\n            );\\r\\n\\r\\n            // Calculate the amount expected to be received in the intermediary swap\\r\\n            if (sellToken0) {\\r\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\r\\n            } else {\\r\\n                swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (swapAmountIn, swapAmountOut, sellToken0);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice View the details for single zap\\r\\n     * @dev Use WBNB for _tokenToReceive (if BNB is the asset to be received)\\r\\n     * @param _lpToken: address of the LP token to zap out\\r\\n     * @param _lpTokenAmount: amount of LP token to zap out\\r\\n     * @param _tokenToReceive: token address to receive\\r\\n     * @return swapAmountIn: amount that is expected to get swapped for intermediary swap\\r\\n     * @return swapAmountOut: amount that is expected to get received for intermediary swap\\r\\n     * @return swapTokenOut: address of the token that is sold in the intermediary swap\\r\\n     */\\r\\n    function estimateZapOutSwap(\\r\\n        address _lpToken,\\r\\n        uint256 _lpTokenAmount,\\r\\n        address _tokenToReceive\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 swapAmountIn,\\r\\n            uint256 swapAmountOut,\\r\\n            address swapTokenOut\\r\\n        )\\r\\n    {\\r\\n        address token0 = IPancakePair(_lpToken).token0();\\r\\n        address token1 = IPancakePair(_lpToken).token1();\\r\\n\\r\\n        require(_tokenToReceive == token0 || _tokenToReceive == token1, \\\"Zap: Token not in LP\\\");\\r\\n\\r\\n        // Convert to uint256 (from uint112)\\r\\n        (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\r\\n\\r\\n        if (token1 == _tokenToReceive) {\\r\\n            // sell token0\\r\\n            uint256 tokenAmountIn = (_lpTokenAmount * reserveA) / IPancakePair(_lpToken).totalSupply();\\r\\n\\r\\n            swapAmountIn = tokenAmountIn;\\r\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveA, reserveB);\\r\\n\\r\\n            swapTokenOut = token0;\\r\\n        } else {\\r\\n            // sell token1\\r\\n            uint256 tokenAmountIn = (_lpTokenAmount * reserveB) / IPancakePair(_lpToken).totalSupply();\\r\\n\\r\\n            swapAmountIn = tokenAmountIn;\\r\\n            swapAmountOut = pancakeRouter.getAmountOut(swapAmountIn, reserveB, reserveA);\\r\\n\\r\\n            swapTokenOut = token1;\\r\\n        }\\r\\n\\r\\n        return (swapAmountIn, swapAmountOut, swapTokenOut);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap a token in (e.g. token/other token)\\r\\n     * @param _tokenToZap: token to zap\\r\\n     * @param _tokenAmountIn: amount of token to swap\\r\\n     * @param _lpToken: LP token address\\r\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\r\\n     */\\r\\n    function _zapIn(\\r\\n        address _tokenToZap,\\r\\n        uint256 _tokenAmountIn,\\r\\n        address _lpToken,\\r\\n        uint256 _tokenAmountOutMin\\r\\n    ) internal returns (uint256 lpTokenReceived) {\\r\\n        require(_tokenAmountIn \\u003e= MINIMUM_AMOUNT, \\\"Zap: Amount too low\\\");\\r\\n\\r\\n        address token0 = IPancakePair(_lpToken).token0();\\r\\n        address token1 = IPancakePair(_lpToken).token1();\\r\\n\\r\\n        require(_tokenToZap == token0 || _tokenToZap == token1, \\\"Zap: Wrong tokens\\\");\\r\\n\\r\\n        // Retrieve the path\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _tokenToZap;\\r\\n\\r\\n        // Initiates an estimation to swap\\r\\n        uint256 swapAmountIn;\\r\\n\\r\\n        {\\r\\n            // Convert to uint256 (from uint112)\\r\\n            (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\r\\n\\r\\n            require((reserveA \\u003e= MINIMUM_AMOUNT) \\u0026\\u0026 (reserveB \\u003e= MINIMUM_AMOUNT), \\\"Zap: Reserves too low\\\");\\r\\n\\r\\n            if (token0 == _tokenToZap) {\\r\\n                swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveA, reserveB);\\r\\n                path[1] = token1;\\r\\n                require(reserveA / swapAmountIn \\u003e= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\r\\n            } else {\\r\\n                swapAmountIn = _calculateAmountToSwap(_tokenAmountIn, reserveB, reserveA);\\r\\n                path[1] = token0;\\r\\n                require(reserveB / swapAmountIn \\u003e= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Approve token to zap if necessary\\r\\n        _approveTokenIfNeeded(_tokenToZap, swapAmountIn);\\r\\n\\r\\n        uint256[] memory swapedAmounts = pancakeRouter.swapExactTokensForTokens(\\r\\n            swapAmountIn,\\r\\n            _tokenAmountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Approve other token if necessary\\r\\n        if (token0 == _tokenToZap) {\\r\\n            _approveTokenIfNeeded(token1, swapAmountIn);\\r\\n        } else {\\r\\n            _approveTokenIfNeeded(token0, swapAmountIn);\\r\\n        }\\r\\n\\r\\n        // Add liquidity and retrieve the amount of LP received by the sender\\r\\n        (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\r\\n            path[0],\\r\\n            path[1],\\r\\n            _tokenAmountIn - swapedAmounts[0],\\r\\n            swapedAmounts[1],\\r\\n            1,\\r\\n            1,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return lpTokenReceived;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap two tokens in, rebalance them to 50-50, before adding them to LP\\r\\n     * @param _token0ToZap: address of token0 to zap\\r\\n     * @param _token1ToZap: address of token1 to zap\\r\\n     * @param _token0AmountIn: amount of token0 to zap\\r\\n     * @param _token1AmountIn: amount of token1 to zap\\r\\n     * @param _lpToken: LP token address\\r\\n     * @param _tokenAmountInMax: maximum token amount to sell (in token to sell in the intermediary swap)\\r\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\r\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\r\\n     */\\r\\n    function _zapInRebalancing(\\r\\n        address _token0ToZap,\\r\\n        address _token1ToZap,\\r\\n        uint256 _token0AmountIn,\\r\\n        uint256 _token1AmountIn,\\r\\n        address _lpToken,\\r\\n        uint256 _tokenAmountInMax,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        bool _isToken0Sold\\r\\n    ) internal returns (uint256 lpTokenReceived) {\\r\\n        require(\\r\\n            _token0ToZap == IPancakePair(_lpToken).token0() || _token0ToZap == IPancakePair(_lpToken).token1(),\\r\\n            \\\"Zap: Wrong token0\\\"\\r\\n        );\\r\\n        require(\\r\\n            _token1ToZap == IPancakePair(_lpToken).token0() || _token1ToZap == IPancakePair(_lpToken).token1(),\\r\\n            \\\"Zap: Wrong token1\\\"\\r\\n        );\\r\\n\\r\\n        require(_token0ToZap != _token1ToZap, \\\"Zap: Same tokens\\\");\\r\\n\\r\\n        // Initiates an estimation to swap\\r\\n        uint256 swapAmountIn;\\r\\n\\r\\n        {\\r\\n            // Convert to uint256 (from uint112)\\r\\n            (uint256 reserveA, uint256 reserveB, ) = IPancakePair(_lpToken).getReserves();\\r\\n\\r\\n            require((reserveA \\u003e= MINIMUM_AMOUNT) \\u0026\\u0026 (reserveB \\u003e= MINIMUM_AMOUNT), \\\"Zap: Reserves too low\\\");\\r\\n\\r\\n            if (_token0ToZap == IPancakePair(_lpToken).token0()) {\\r\\n                swapAmountIn = _calculateAmountToSwapForRebalancing(\\r\\n                    _token0AmountIn,\\r\\n                    _token1AmountIn,\\r\\n                    reserveA,\\r\\n                    reserveB,\\r\\n                    _isToken0Sold\\r\\n                );\\r\\n                require(reserveA / swapAmountIn \\u003e= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\r\\n            } else {\\r\\n                swapAmountIn = _calculateAmountToSwapForRebalancing(\\r\\n                    _token0AmountIn,\\r\\n                    _token1AmountIn,\\r\\n                    reserveB,\\r\\n                    reserveA,\\r\\n                    _isToken0Sold\\r\\n                );\\r\\n\\r\\n                require(reserveB / swapAmountIn \\u003e= maxZapReverseRatio, \\\"Zap: Quantity higher than limit\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(swapAmountIn \\u003c= _tokenAmountInMax, \\\"Zap: Amount to swap too high\\\");\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n\\r\\n        // Define path for swapping and check whether to approve token to sell in intermediary swap\\r\\n        if (_isToken0Sold) {\\r\\n            path[0] = _token0ToZap;\\r\\n            path[1] = _token1ToZap;\\r\\n            _approveTokenIfNeeded(_token0ToZap, swapAmountIn);\\r\\n        } else {\\r\\n            path[0] = _token1ToZap;\\r\\n            path[1] = _token0ToZap;\\r\\n            _approveTokenIfNeeded(_token1ToZap, swapAmountIn);\\r\\n        }\\r\\n\\r\\n        // Execute the swap and retrieve quantity received\\r\\n        uint256[] memory swapedAmounts = pancakeRouter.swapExactTokensForTokens(\\r\\n            swapAmountIn,\\r\\n            _tokenAmountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        // Check whether to approve other token and add liquidity to LP\\r\\n        if (_isToken0Sold) {\\r\\n            _approveTokenIfNeeded(_token1ToZap, swapAmountIn);\\r\\n\\r\\n            (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\r\\n                path[0],\\r\\n                path[1],\\r\\n                (_token0AmountIn - swapedAmounts[0]),\\r\\n                (_token1AmountIn + swapedAmounts[1]),\\r\\n                1,\\r\\n                1,\\r\\n                msg.sender,\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            _approveTokenIfNeeded(_token0ToZap, swapAmountIn);\\r\\n            (, , lpTokenReceived) = pancakeRouter.addLiquidity(\\r\\n                path[0],\\r\\n                path[1],\\r\\n                (_token1AmountIn - swapedAmounts[0]),\\r\\n                (_token0AmountIn + swapedAmounts[1]),\\r\\n                1,\\r\\n                1,\\r\\n                msg.sender,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return lpTokenReceived;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Zap a LP token out to a token (e.g. token/other token)\\r\\n     * @param _lpToken: LP token address\\r\\n     * @param _tokenToReceive: token address\\r\\n     * @param _tokenAmountOutMin: minimum token to receive in the intermediary swap\\r\\n     */\\r\\n    function _zapOut(\\r\\n        address _lpToken,\\r\\n        address _tokenToReceive,\\r\\n        uint256 _tokenAmountOutMin,\\r\\n        uint256 _totalTokenAmountOutMin\\r\\n    ) internal returns (uint256) {\\r\\n        address token0 = IPancakePair(_lpToken).token0();\\r\\n        address token1 = IPancakePair(_lpToken).token1();\\r\\n\\r\\n        require(_tokenToReceive == token0 || _tokenToReceive == token1, \\\"Zap: Token not in LP\\\");\\r\\n\\r\\n        // Burn all LP tokens to receive the two tokens to this address\\r\\n        (uint256 amount0, uint256 amount1) = IPancakePair(_lpToken).burn(address(this));\\r\\n\\r\\n        require(amount0 \\u003e= MINIMUM_AMOUNT, \\\"PancakeRouter: INSUFFICIENT_A_AMOUNT\\\");\\r\\n        require(amount1 \\u003e= MINIMUM_AMOUNT, \\\"PancakeRouter: INSUFFICIENT_B_AMOUNT\\\");\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[1] = _tokenToReceive;\\r\\n\\r\\n        uint256 swapAmountIn;\\r\\n\\r\\n        if (token0 == _tokenToReceive) {\\r\\n            path[0] = token1;\\r\\n            swapAmountIn = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n            // Approve token to sell if necessary\\r\\n            _approveTokenIfNeeded(token1, swapAmountIn);\\r\\n        } else {\\r\\n            path[0] = token0;\\r\\n            swapAmountIn = IERC20(token0).balanceOf(address(this));\\r\\n\\r\\n            // Approve token to sell if necessary\\r\\n            _approveTokenIfNeeded(token0, swapAmountIn);\\r\\n        }\\r\\n\\r\\n        // Swap tokens\\r\\n        pancakeRouter.swapExactTokensForTokens(swapAmountIn, _tokenAmountOutMin, path, address(this), block.timestamp);\\r\\n\\r\\n        // Return full balance for the token to receive by the sender\\r\\n        require(_totalTokenAmountOutMin \\u003c IERC20(_tokenToReceive).balanceOf(address(this)), \\\"amount is not enough\\\");\\r\\n        return IERC20(_tokenToReceive).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Allows to zap a token in (e.g. token/other token)\\r\\n     * @param _token: token address\\r\\n     */\\r\\n    function _approveTokenIfNeeded(address _token, uint256 _swapAmountIn) private {\\r\\n        if (IERC20(_token).allowance(address(this), pancakeRouterAddress) \\u003c _swapAmountIn) {\\r\\n            // Reset to 0\\r\\n            IERC20(_token).safeApprove(pancakeRouterAddress, 0);\\r\\n            // Re-approve\\r\\n            IERC20(_token).safeApprove(pancakeRouterAddress, MAX_INT);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Calculate the swap amount to get the price at 50/50 split\\r\\n     * @param _token0AmountIn: amount of token 0\\r\\n     * @param _reserve0: amount in reserve for token0\\r\\n     * @param _reserve1: amount in reserve for token1\\r\\n     * @return amountToSwap: swapped amount (in token0)\\r\\n     */\\r\\n    function _calculateAmountToSwap(\\r\\n        uint256 _token0AmountIn,\\r\\n        uint256 _reserve0,\\r\\n        uint256 _reserve1\\r\\n    ) private view returns (uint256 amountToSwap) {\\r\\n        uint256 halfToken0Amount = _token0AmountIn / 2;\\r\\n        uint256 nominator = pancakeRouter.getAmountOut(halfToken0Amount, _reserve0, _reserve1);\\r\\n        uint256 denominator = pancakeRouter.quote(\\r\\n            halfToken0Amount,\\r\\n            _reserve0 + halfToken0Amount,\\r\\n            _reserve1 - nominator\\r\\n        );\\r\\n\\r\\n        // Adjustment for price impact\\r\\n        amountToSwap =\\r\\n            _token0AmountIn -\\r\\n            Babylonian.sqrt((halfToken0Amount * halfToken0Amount * nominator) / denominator);\\r\\n\\r\\n        return amountToSwap;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Calculate the amount to swap to get the tokens at a 50/50 split\\r\\n     * @param _token0AmountIn: amount of token 0\\r\\n     * @param _token1AmountIn: amount of token 1\\r\\n     * @param _reserve0: amount in reserve for token0\\r\\n     * @param _reserve1: amount in reserve for token1\\r\\n     * @param _isToken0Sold: whether token0 is expected to be sold (if false, sell token1)\\r\\n     * @return amountToSwap: swapped amount in token0 (if _isToken0Sold is true) or token1 (if _isToken0Sold is false)\\r\\n     */\\r\\n    function _calculateAmountToSwapForRebalancing(\\r\\n        uint256 _token0AmountIn,\\r\\n        uint256 _token1AmountIn,\\r\\n        uint256 _reserve0,\\r\\n        uint256 _reserve1,\\r\\n        bool _isToken0Sold\\r\\n    ) private view returns (uint256 amountToSwap) {\\r\\n        bool sellToken0 = (_token0AmountIn * _reserve1 \\u003e _token1AmountIn * _reserve0) ? true : false;\\r\\n\\r\\n        require(sellToken0 == _isToken0Sold, \\\"Zap: Wrong trade direction\\\");\\r\\n\\r\\n        if (sellToken0) {\\r\\n            uint256 token0AmountToSell = (_token0AmountIn - (_token1AmountIn * _reserve0) / _reserve1) / 2;\\r\\n            uint256 nominator = pancakeRouter.getAmountOut(token0AmountToSell, _reserve0, _reserve1);\\r\\n            uint256 denominator = pancakeRouter.quote(\\r\\n                token0AmountToSell,\\r\\n                _reserve0 + token0AmountToSell,\\r\\n                _reserve1 - nominator\\r\\n            );\\r\\n\\r\\n            // Calculate the amount to sell (in token0)\\r\\n            token0AmountToSell =\\r\\n                (_token0AmountIn - (_token1AmountIn * (_reserve0 + token0AmountToSell)) / (_reserve1 - nominator)) /\\r\\n                2;\\r\\n\\r\\n            // Adjustment for price impact\\r\\n            amountToSwap =\\r\\n                2 *\\r\\n                token0AmountToSell -\\r\\n                Babylonian.sqrt((token0AmountToSell * token0AmountToSell * nominator) / denominator);\\r\\n        } else {\\r\\n            uint256 token1AmountToSell = (_token1AmountIn - (_token0AmountIn * _reserve1) / _reserve0) / 2;\\r\\n            uint256 nominator = pancakeRouter.getAmountOut(token1AmountToSell, _reserve1, _reserve0);\\r\\n\\r\\n            uint256 denominator = pancakeRouter.quote(\\r\\n                token1AmountToSell,\\r\\n                _reserve1 + token1AmountToSell,\\r\\n                _reserve0 - nominator\\r\\n            );\\r\\n\\r\\n            // Calculate the amount to sell (in token1)\\r\\n            token1AmountToSell =\\r\\n                (_token1AmountIn - ((_token0AmountIn * (_reserve1 + token1AmountToSell)) / (_reserve0 - nominator))) /\\r\\n                2;\\r\\n\\r\\n            // Adjustment for price impact\\r\\n            amountToSwap =\\r\\n                2 *\\r\\n                token1AmountToSell -\\r\\n                Babylonian.sqrt((token1AmountToSell * token1AmountToSell * nominator) / denominator);\\r\\n        }\\r\\n\\r\\n        return amountToSwap;\\r\\n    }\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WBNBAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxZapReverseRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxZapReverseRatio\",\"type\":\"uint256\"}],\"name\":\"NewMaxZapReverseRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToZap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0ToZap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1ToZap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0AmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1AmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapInRebalancing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToReceive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0ToZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"estimateZapInRebalancingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellToken0\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"estimateZapInSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenToReceive\",\"type\":\"address\"}],\"name\":\"estimateZapOutSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxZapReverseRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxZapInverseRatio\",\"type\":\"uint256\"}],\"name\":\"updateMaxZapInverseRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0Sold\",\"type\":\"bool\"}],\"name\":\"zapInBNBRebalancing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0ToZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1ToZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0Sold\",\"type\":\"bool\"}],\"name\":\"zapInTokenRebalancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PancakeZapV1", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000009bfaa0e9b73d4741ae3721b6f82409e79695ebf0000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f85e8586634a98c6a630afcef412b7774fa896803078901ef48ff2a7160fdc0"}