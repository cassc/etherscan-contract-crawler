{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VaultZapIn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IfVault.sol\\\";\\r\\nimport \\\"./IZapInV2.sol\\\";\\r\\n\\r\\ncontract VaultZapIn {\\r\\n    IZapInV2 internal zap; //0x83d4908c1b4f9ca423bee264163bc1d50f251c31\\r\\n    IfVault internal vaultFLAGWETH; //0x320C6d2C4C5fade15D4059855Fe41D5406c0D099\\r\\n    IfVault internal vaultFLAGMATIC; //0x4cd334012B540A0287256a4395b58dDC9a68543C\\r\\n    IERC20 internal lpFLAGWETH; //0x30D50b36bE1Fe4BD1D78553F77937cAaBad37F7f\\r\\n    IERC20 internal lpFLAGMATIC; //0xcFe88814f8ef4BcEFeB4483046B7229511E8AA06\\r\\n    IERC20 internal flag; //0x9111D6446Ac5b88A84cf06425c6286658368542F\\r\\n    IERC20 internal wmatic; //0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\\r\\n    IERC20 internal weth; //0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\\r\\n\\r\\n    constructor(\\r\\n        address _zap,\\r\\n        address _vaultFLAGWETH,\\r\\n        address _vaultFLAGMATIC,\\r\\n        address _lpFLAGWETH,\\r\\n        address _lpFLAGMATIC,\\r\\n        address _flag,\\r\\n        address _wmatic,\\r\\n        address _weth\\r\\n    ) {\\r\\n        zap = IZapInV2(_zap);\\r\\n        vaultFLAGWETH = IfVault(_vaultFLAGWETH);\\r\\n        vaultFLAGMATIC = IfVault(_vaultFLAGMATIC);\\r\\n        lpFLAGWETH = IERC20(_lpFLAGWETH);\\r\\n        lpFLAGMATIC = IERC20(_lpFLAGMATIC);\\r\\n        flag = IERC20(_flag);\\r\\n        wmatic = IERC20(_wmatic);\\r\\n        weth = IERC20(_weth);\\r\\n    }\\r\\n\\r\\n    function depositGastoFLAGMATIC() external payable {\\r\\n        uint256 lpDeposit = zap.zapInEth{value: msg.value}(\\r\\n            flag,\\r\\n            address(lpFLAGMATIC),\\r\\n            address(this),\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n        lpFLAGMATIC.approve(address(vaultFLAGMATIC), lpDeposit);\\r\\n        vaultFLAGMATIC.deposit(lpDeposit);\\r\\n        IERC20(address(vaultFLAGMATIC)).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(address(vaultFLAGMATIC)).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositFLAGtoFLAGMATIC(uint256 amountIn) external {\\r\\n        flag.transferFrom(msg.sender, address(this), amountIn);\\r\\n        flag.approve(address(zap), amountIn);\\r\\n        uint256 lpDeposit = zap.zapIn(\\r\\n            flag,\\r\\n            wmatic,\\r\\n            amountIn,\\r\\n            address(lpFLAGMATIC),\\r\\n            address(this),\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n        lpFLAGMATIC.approve(address(vaultFLAGMATIC), lpDeposit);\\r\\n        vaultFLAGMATIC.deposit(lpDeposit);\\r\\n        IERC20(address(vaultFLAGMATIC)).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(address(vaultFLAGMATIC)).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositFLAGtoFLAGWETH(uint256 amountIn) external {\\r\\n        flag.transferFrom(msg.sender, address(this), amountIn);\\r\\n        flag.approve(address(zap), amountIn);\\r\\n        uint256 lpDeposit = zap.zapIn(\\r\\n            flag,\\r\\n            weth,\\r\\n            amountIn,\\r\\n            address(lpFLAGWETH),\\r\\n            address(this),\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n        lpFLAGWETH.approve(address(vaultFLAGWETH), lpDeposit);\\r\\n        vaultFLAGWETH.deposit(lpDeposit);\\r\\n        IERC20(address(vaultFLAGWETH)).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(address(vaultFLAGWETH)).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function depositWETHtoFLAGWETH(uint256 amountIn) external {\\r\\n        weth.transferFrom(msg.sender, address(this), amountIn);\\r\\n        weth.approve(address(zap), amountIn);\\r\\n        uint256 lpDeposit = zap.zapIn(\\r\\n            weth,\\r\\n            flag,\\r\\n            amountIn,\\r\\n            address(lpFLAGWETH),\\r\\n            address(this),\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n        lpFLAGWETH.approve(address(vaultFLAGWETH), lpDeposit);\\r\\n        vaultFLAGWETH.deposit(lpDeposit);\\r\\n        IERC20(address(vaultFLAGWETH)).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(address(vaultFLAGWETH)).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawFLAGfromFLAGWMATIC(uint256 _shares) external {\\r\\n        IERC20(address(vaultFLAGMATIC)).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _shares\\r\\n        );\\r\\n        vaultFLAGMATIC.withdrawAll();\\r\\n        uint256 lpWithdraw = lpFLAGMATIC.balanceOf(address(this));\\r\\n        lpFLAGMATIC.approve(address(zap), lpWithdraw);\\r\\n        zap.zapOut(\\r\\n            wmatic,\\r\\n            flag,\\r\\n            lpWithdraw,\\r\\n            address(lpFLAGMATIC),\\r\\n            msg.sender,\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawMATICfromFLAGWMATIC(uint256 _shares) external {\\r\\n        IERC20(address(vaultFLAGMATIC)).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _shares\\r\\n        );\\r\\n        vaultFLAGMATIC.withdrawAll();\\r\\n        uint256 lpWithdraw = lpFLAGMATIC.balanceOf(address(this));\\r\\n        lpFLAGMATIC.approve(address(zap), lpWithdraw);\\r\\n        zap.zapOutEth(\\r\\n            flag,\\r\\n            lpWithdraw,\\r\\n            address(lpFLAGMATIC),\\r\\n            msg.sender,\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawFLAGfromFLAGWETH(uint256 _shares) external {\\r\\n        IERC20(address(vaultFLAGWETH)).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _shares\\r\\n        );\\r\\n        vaultFLAGWETH.withdrawAll();\\r\\n        uint256 lpWithdraw = lpFLAGWETH.balanceOf(address(this));\\r\\n        lpFLAGWETH.approve(address(zap), lpWithdraw);\\r\\n        zap.zapOut(\\r\\n            weth,\\r\\n            flag,\\r\\n            lpWithdraw,\\r\\n            address(lpFLAGWETH),\\r\\n            msg.sender,\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawWETHfromFLAGWETH(uint256 _shares) external {\\r\\n        IERC20(address(vaultFLAGWETH)).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _shares\\r\\n        );\\r\\n        vaultFLAGWETH.withdrawAll();\\r\\n        uint256 lpWithdraw = lpFLAGWETH.balanceOf(address(this));\\r\\n        lpFLAGWETH.approve(address(zap), lpWithdraw);\\r\\n        zap.zapOut(\\r\\n            flag,\\r\\n            weth,\\r\\n            lpWithdraw,\\r\\n            address(lpFLAGWETH),\\r\\n            msg.sender,\\r\\n            0,\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IfVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IfVault {\\r\\n    //  -------------------- EVENTS --------------------\\r\\n    event Deposited(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    //  -------------------- VIEW FUNCTIONS --------------------\\r\\n    function getDepositToken() external view returns (address);\\r\\n    function totalBalance() external view returns (uint);\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n    function getTokensFromShares() external view returns (uint256);\\r\\n    //  -------------------- ADMIN FUNCTIONS --------------------\\r\\n    function setStrategy(address _strategyAddr) external;\\r\\n    function pause() external;\\r\\n    function unpause() external;\\r\\n    function emergencyWithdrawFromStrategy() external;\\r\\n    //  -------------------- USER FUNCTIONS --------------------\\r\\n    function deposit(uint _amount) external payable;\\r\\n    function withdraw(uint _shares) external;\\r\\n    function withdrawAll() external;\\r\\n}\"\r\n    },\r\n    \"contracts/IZapInV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IZapInV2 {\\r\\n    function zapInEth(\\r\\n        IERC20 tokenOut,\\r\\n        address pool,\\r\\n        address to,\\r\\n        uint256 minLpQty,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 lpQty);\\r\\n\\r\\n    function zapIn(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 userIn,\\r\\n        address pool,\\r\\n        address to,\\r\\n        uint256 minLpQty,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 lpQty);\\r\\n\\r\\n    function zapOut(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        uint256 liquidity,\\r\\n        address pool,\\r\\n        address to,\\r\\n        uint256 minTokenOut,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function zapOutEth(\\r\\n        IERC20 tokenIn,\\r\\n        uint256 liquidity,\\r\\n        address pool,\\r\\n        address to,\\r\\n        uint256 minTokenOut,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    function calculateZapInAmounts(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        address pool,\\r\\n        uint256 userIn\\r\\n    ) external view returns (uint256 tokenInAmount, uint256 tokenOutAmount);\\r\\n\\r\\n    function calculateZapOutAmount(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        address pool,\\r\\n        uint256 lpQty\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function calculateSwapAmounts(\\r\\n        IERC20 tokenIn,\\r\\n        IERC20 tokenOut,\\r\\n        address pool,\\r\\n        uint256 userIn\\r\\n    ) external view returns (uint256 amountSwap, uint256 amountOutput);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFLAGWETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFLAGMATIC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpFLAGWETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpFLAGMATIC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flag\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmatic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"depositFLAGtoFLAGMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"depositFLAGtoFLAGWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositGastoFLAGMATIC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"depositWETHtoFLAGWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawFLAGfromFLAGWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawFLAGfromFLAGWMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawMATICfromFLAGWMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawWETHfromFLAGWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaultZapIn", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "00000000000000000000000083d4908c1b4f9ca423bee264163bc1d50f251c31000000000000000000000000320c6d2c4c5fade15d4059855fe41d5406c0d0990000000000000000000000004cd334012b540a0287256a4395b58ddc9a68543c00000000000000000000000030d50b36be1fe4bd1d78553f77937caabad37f7f000000000000000000000000cfe88814f8ef4bcefeb4483046b7229511e8aa060000000000000000000000009111d6446ac5b88a84cf06425c6286658368542f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}