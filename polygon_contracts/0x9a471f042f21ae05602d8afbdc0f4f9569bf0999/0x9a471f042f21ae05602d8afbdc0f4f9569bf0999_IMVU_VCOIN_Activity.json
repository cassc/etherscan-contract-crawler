{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IMVU_VCOIN_Activity.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title VCOIN Transaction Tracker\\r\\n/// @author MetaJuice\\r\\n/// @notice Tracks VCOIN transactions on the IMVU Platform\\r\\ncontract IMVU_VCOIN_Activity is Ownable {\\r\\n\\r\\n    /// @dev mapping of provider => baseUrl for looking up transactions of provider\\r\\n    mapping(string => string) public providerBaseUrls;\\r\\n\\r\\n    /// @dev mapping of provider => Url Suffix, if there is any\\r\\n    mapping(string => string) public providerUrlSuffix;\\r\\n\\r\\n    /// @dev Tracks when users convert VCOIN into IMVU Credits\\r\\n    /// @param from The address VCOIN was sent from \\r\\n    /// @param provider The provider of the transaction\\r\\n    /// @param txId The transaction id from the provider\\r\\n    /// @param to The address VCOIN was sent to\\r\\n    /// @param amount The amount of VCOIN transacted\\r\\n    event Conversion(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users purchase an item in the IMVU store using VCOIN\\r\\n    event SpentInStore(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users give VCOIN to another user \\r\\n    event CustomerGifting(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users purchase VCOIN with USD\\r\\n    event Purchase(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users withdraw VCOIN off IMVU platform\\r\\n    event Withdrawal(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when VCOIN is paid out as royalties for the sale of an NFT \\r\\n    event NFTRoyalty(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users are granted VCOIN from a Daily Spin \\r\\n    event DailySpinGrant(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks general VCOIN Activity \\r\\n    event General(address indexed from, string indexed provider, string indexed txId, address to, string amount);\\r\\n\\r\\n    /// @dev Tracks when users convert VCOIN into IMVU Credits\\r\\n    function conversion(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit Conversion(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks when users purchase an item in the IMVU store using VCOIN\\r\\n    function spentInStore(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit SpentInStore(from, provider, txId, to, amount);\\r\\n    }\\r\\n    \\r\\n    /// @dev Tracks when users give VCOIN to another user \\r\\n    function customerGifting(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit CustomerGifting(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks when users purchase VCOIN with USD\\r\\n    function purchase(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit Purchase(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks when users withdraw VCOIN off IMVU platform\\r\\n    function withdrawal(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit Withdrawal(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks when VCOIN is paid out as royalties for the sale of an NFT\\r\\n    function nftRoyalty(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit NFTRoyalty(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks when users are granted VCOIN from a Daily Spin\\r\\n    function dailySpinGrant(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit DailySpinGrant(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Tracks general VCOIN activity\\r\\n    function general(address from, string calldata provider, string calldata txId, address to, string calldata amount) external {\\r\\n        emit General(from, provider, txId, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Adds OR Updates a URL to the provider => baseUrl mapping\\r\\n    /// @param provider The provider of the transaction\\r\\n    /// @param url The baseUrl of the provider\\r\\n    /// @param suffix The Url suffix of the provider\\r\\n    function addUrl(string calldata provider, string calldata url, string calldata suffix) external onlyOwner {\\r\\n        providerBaseUrls[provider] = url;\\r\\n        providerUrlSuffix[provider] = suffix;\\r\\n    }\\r\\n\\r\\n    /// @dev Removes a URL from the provider => baseUrl mapping\\r\\n    /// @param provider The provider of the transaction\\r\\n    function removeUrl(string calldata provider) external onlyOwner {\\r\\n        providerBaseUrls[provider] = '';\\r\\n        providerUrlSuffix[provider] = '';\\r\\n    }\\r\\n\\r\\n    /// @notice Users can retrieve a URL to the provider's original transaction\\r\\n    /// @dev Gets a URL by concatenating the baseUrl of the provider with the txId\\r\\n    /// @param provider The provider of the transaction\\r\\n    /// @param txId The transaction id from the provider\\r\\n    /// @return url The concatenated URL\\r\\n    function getUrl(string calldata provider, string calldata txId) public view returns(string memory url){\\r\\n        return string(abi.encodePacked(providerBaseUrls[provider], txId, providerUrlSuffix[provider]));\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"CustomerGifting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"DailySpinGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"General\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"NFTRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"SpentInStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"addUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"conversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"customerGifting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"dailySpinGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"general\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"}],\"name\":\"getUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"nftRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"providerBaseUrls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"providerUrlSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"removeUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"spentInStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"amount\",\"type\":\"string\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IMVU_VCOIN_Activity", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}