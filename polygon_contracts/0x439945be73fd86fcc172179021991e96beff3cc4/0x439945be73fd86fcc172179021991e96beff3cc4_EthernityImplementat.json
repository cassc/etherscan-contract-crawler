{"SourceCode": "// File: contracts/Owned.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'FIXED' 'Example Fixed Supply Token' token contract\r\n//\r\n// Symbol      : FIXED\r\n// Name        : Example Fixed Supply Token\r\n// Total supply: 1,000,000.000000000000000000\r\n// Decimals    : 18\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/Models.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n * Copyright (C) 2018, 2019, 2020 Ethernity HODL UG\r\n *\r\n * This file is part of ETHERNITY PoX SC.\r\n *\r\n * ETHERNITY PoE SC is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Affero General Public License as\r\n * published by the Free Software Foundation, either version 3 of the\r\n * License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\nlibrary Models {\r\n    /*\r\n     * used for storing multiple data\r\n     */\r\n    struct Metadata {\r\n        string key;\r\n        string value;\r\n    }\r\n\r\n    struct Order {\r\n        uint8 instance;\r\n        address dproc;\r\n        address downer;\r\n        address processor;\r\n        address placedBy;\r\n        uint dpRequest;\r\n        uint doRequest;\r\n        uint timeout;\r\n        mapping(uint => Metadata) metadata;\r\n        uint metadataSize;\r\n        string result;\r\n        uint price;\r\n        OrderStatus status;\r\n    }\r\n\r\n    struct DPRequest {\r\n        address dproc;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint32 durationSec;\r\n        uint256 minPrice;\r\n        uint32 createdAt;\r\n        string metadata1;\r\n        string metadata2;\r\n        string metadata3;\r\n        string metadata4;\r\n        mapping(uint => Metadata) metadata;\r\n        uint metadataSize;\r\n        RequestStatus status;\r\n    }\r\n\r\n    struct DPRequestDetails {\r\n        address dproc;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint32 durationSec;\r\n        uint256 minPrice;\r\n        uint status;\r\n    }\r\n\r\n    struct DPRequestOrderData {\r\n        address dproc;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint256 minPrice;\r\n        Models.RequestStatus status;\r\n        string metadata2;\r\n    }\r\n\r\n    struct DPRequestDetailsWithDate {\r\n        address dproc;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint32 durationSec;\r\n        uint256 minPrice;\r\n        uint status;\r\n        uint32 createdAt;\r\n    }\r\n\r\n    struct DORequest {\r\n        address downer;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint32 durationSec;\r\n        uint8 instances;\r\n        uint8 bookedInstances;\r\n        uint32 createdAt;\r\n        uint256 maxPrice;\r\n        string metadata1;\r\n        string metadata2;\r\n        string metadata3;\r\n        string metadata4;\r\n        mapping(uint => Metadata) metadata;\r\n        uint metadataSize;\r\n        RequestStatus status;\r\n    }\r\n\r\n    struct DORequestDetails {\r\n        address downer;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint32 durationSec;\r\n        uint256 maxPrice;\r\n        uint status;\r\n    }\r\n\r\n    struct DORequestOrderData {\r\n        address downer;\r\n        uint8 cpuCores;\r\n        uint16 ramMemoryGB;\r\n        uint8 storageGB;\r\n        uint8 bandwidthMbps;\r\n        uint256 maxPrice;\r\n        Models.RequestStatus status;\r\n        string metadata4;\r\n    }\r\n\r\n    enum OrderStatus {\r\n        OPEN,\r\n        PROCESSING,\r\n        CLOSED,\r\n        CANCELED\r\n    }\r\n\r\n    enum RequestStatus {\r\n        AVAILABLE,\r\n        BOOKED,\r\n        CANCELED\r\n    }\r\n}\r\n\r\n// File: contracts/EthernityStorage.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n * Copyright (C) 2018, 2019, 2020 Ethernity HODL UG\r\n *\r\n * This file is part of ETHERNITY PoX SC.\r\n *\r\n * ETHERNITY PoE SC is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Affero General Public License as\r\n * published by the Free Software Foundation, either version 3 of the\r\n * License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\n\r\ncontract EthernityStorage {\r\n\r\n    address public implementation;\r\n    address public implementationPro;\r\n\r\n    address[] internal versions;\r\n    address[] internal versionsPro;\r\n    mapping(address => bool) usersPro;\r\n\r\n    uint128 internal baseLockDate = 1688169599; // Fri Jun 30 2023 23:59:59 GMT+0000\r\n    uint128 constant internal twoYears = 63072000;\r\n    uint128 constant internal oneYear = 31536000;\r\n    uint128 constant internal sixMonths = 15780000;\r\n\r\n    mapping(address => uint128) lockTime;\r\n\r\n    mapping(address => uint256) attestation;\r\n    mapping(address => uint256) aggregation;\r\n    mapping(address => uint256) proposal;\r\n\r\n    uint16 constant internal HOURS_IN_SECONDS = 3600;\r\n    uint8 constant internal MAX_CPU = 255;\r\n    uint8 constant internal MAX_MEMORY = 255;\r\n    uint8 constant internal MAX_STORAGE = 255;\r\n    uint8 constant internal MAX_BANDWIDTH = 255;\r\n    uint8 constant internal MAX_INSTANCES = 10;\r\n\r\n    Models.DORequest[] internal doRequestsList;\r\n    Models.DPRequest[] internal dpRequestsList;\r\n    Models.Order[] internal orders;\r\n\r\n    mapping(address => uint256[]) usersDORequests;\r\n    mapping(address => uint256[]) usersDPRequests;\r\n    mapping(address => uint256[]) usersOrders;\r\n}\r\n\r\n// File: contracts/IEthernityCloudStorage.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n * Copyright (C) 2018, 2019, 2020 Ethernity HODL UG\r\n *\r\n * This file is part of ETHERNITY PoX SC.\r\n *\r\n * ETHERNITY PoE SC is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Affero General Public License as\r\n * published by the Free Software Foundation, either version 3 of the\r\n * License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\n\r\ncontract IEthernityCloudStorage {\r\n    function insertDPRequest(\r\n        address caller,\r\n        uint8 cpuCores,\r\n        uint16 ramMemoryGB,\r\n        uint8 storageGB,\r\n        uint8 bandwidthMbps,\r\n        uint32 durationSec,\r\n        uint256 minPrice,\r\n        string calldata metadata1,\r\n        string calldata metadata2,\r\n        string calldata metadata3,\r\n        string calldata metadata4\r\n    ) external returns (uint requestId);\r\n\r\n    function getDPRequestsCount()\r\n        external\r\n        view\r\n        returns (uint256 dpRequestsCount);\r\n\r\n    function getDPRequest(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 minPrice,\r\n            uint status\r\n        );\r\n\r\n    function getDPRequestOrderData(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint256 minPrice,\r\n            Models.RequestStatus status,\r\n            string memory metadata2\r\n        );\r\n\r\n    function getDPRequestWithCreationDate(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 minPrice,\r\n            uint status,\r\n            uint32 createdAt\r\n        );\r\n\r\n    function getDPRequestMetadata(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address dproc,\r\n            string memory metadata1,\r\n            string memory metadata2,\r\n            string memory metadata3,\r\n            string memory metadata4\r\n        );\r\n\r\n    function getDPRequestStatus(\r\n        uint256 requestId\r\n    ) external view returns (Models.RequestStatus status);\r\n\r\n    function setDPRequestStatusFrom(\r\n        address caller,\r\n        uint256 requestId,\r\n        Models.RequestStatus status\r\n    ) external;\r\n\r\n    function setDPRequestStatus(\r\n        uint256 requestId,\r\n        Models.RequestStatus status\r\n    ) external;\r\n\r\n    function getDPRequestIds(\r\n        address caller\r\n    ) external view returns (uint256[] memory req);\r\n\r\n    function addMetadataToDPRequestFrom(\r\n        address caller,\r\n        uint256 requestId,\r\n        string calldata mdKey,\r\n        string calldata mdValue\r\n    ) external returns (uint metadataId);\r\n\r\n    function addMetadataToDPRequest(\r\n        uint256 requestId,\r\n        string calldata mdKey,\r\n        string calldata mdValue\r\n    ) external returns (uint metadataId);\r\n\r\n    function getMetadataCountForDPRequest(\r\n        uint256 requestId\r\n    ) external view returns (uint256 metadataCount);\r\n\r\n    function getMetadataValueForDPRequest(\r\n        uint256 requestId,\r\n        uint256 metadataId\r\n    ) external view returns (string memory key, string memory value);\r\n\r\n    function insertDORequest(\r\n        address caller,\r\n        uint8 cpuCores,\r\n        uint16 ramMemoryGB,\r\n        uint8 storageGB,\r\n        uint8 bandwidthMbps,\r\n        uint32 durationSec,\r\n        uint8 instances,\r\n        uint256 maxPrice\r\n    ) public returns (uint requestId);\r\n\r\n    function updateDORequestMetadata(\r\n        uint requestId,\r\n        string calldata metadata1,\r\n        string calldata metadata2,\r\n        string calldata metadata3,\r\n        string calldata metadata4\r\n    ) external;\r\n\r\n    function getDORequestsCount() external view returns (uint256 requestCount);\r\n\r\n    function getDORequest(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address downer,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 maxPrice,\r\n            uint status\r\n        );\r\n\r\n    function getDORequestOrderData(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address downer,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint256 maxPrice,\r\n            Models.RequestStatus status,\r\n            string memory metadata4\r\n        );\r\n\r\n    function getMinDORequest(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint32 durationSec,\r\n            uint256 maxPrice,\r\n            uint8 bookedInstances,\r\n            Models.RequestStatus status\r\n        );\r\n\r\n    function getDORequestMetadata(\r\n        uint256 requestId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address downer,\r\n            string memory metadata1,\r\n            string memory metadata2,\r\n            string memory metadata3,\r\n            string memory metadata4\r\n        );\r\n\r\n    function setDORequestStatusFrom(\r\n        address caller,\r\n        uint256 requestId,\r\n        Models.RequestStatus status\r\n    ) external;\r\n\r\n    function setDORequestStatus(\r\n        uint256 requestId,\r\n        Models.RequestStatus status\r\n    ) external;\r\n\r\n    function incrementDORequestBookedInstances(uint256 requestId) external;\r\n\r\n    function getDORequestIds(\r\n        address caller\r\n    ) external view returns (uint256[] memory doRequestIds);\r\n\r\n    function addMetadataToDORequestFrom(\r\n        address caller,\r\n        uint256 requestId,\r\n        string calldata key,\r\n        string calldata value\r\n    ) external returns (uint metadataId);\r\n\r\n    function addMetadataToDORequest(\r\n        uint256 requestId,\r\n        string calldata key,\r\n        string calldata value\r\n    ) external returns (uint metadataId);\r\n\r\n    function getMetadataCountForDORequest(\r\n        uint256 requestId\r\n    ) external view returns (uint256 metadataCount);\r\n\r\n    function getMetadataValueForDORequest(\r\n        uint256 requestId,\r\n        uint256 metadataId\r\n    ) external view returns (string memory key, string memory value);\r\n\r\n    function insertOrder(\r\n        address caller,\r\n        uint256 dowRequestId,\r\n        uint256 dprRequestId\r\n    ) external returns (uint orderId);\r\n\r\n    function parseAddr(\r\n        string calldata a\r\n    ) external pure returns (address parsedAddress);\r\n\r\n    function getOrdersCount() external view returns (uint256 ordersCount);\r\n\r\n    function getDOOrdersIds(\r\n        address caller\r\n    ) external view returns (uint256[] memory doOrderIds);\r\n\r\n    function getOrder(\r\n        uint256 orderId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address downer,\r\n            address dproc,\r\n            uint dowRequestId,\r\n            uint dprRequestId,\r\n            uint status\r\n        );\r\n\r\n    function getOrderDetails(\r\n        uint256 orderId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address downer,\r\n            address dproc,\r\n            address placedBy,\r\n            Models.OrderStatus status\r\n        );\r\n\r\n    function getOrderStatusDproc(\r\n        uint256 orderId\r\n    ) external view returns (address dproc, Models.OrderStatus status);\r\n\r\n    function getOrderStatus(\r\n        uint256 orderId\r\n    ) external view returns (Models.OrderStatus status);\r\n\r\n    function getOrderAmountDetails(\r\n        uint256 orderId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            Models.OrderStatus status,\r\n            address dproc,\r\n            address downer,\r\n            uint256 price,\r\n            uint32 durationSec\r\n        );\r\n\r\n    function getOrderResultDetails(\r\n        uint256 orderId\r\n    ) external view returns (string memory result, Models.OrderStatus status);\r\n\r\n    function getOrderDORequestInstances(\r\n        uint256 orderId\r\n    ) public view returns (uint8 instances);\r\n\r\n    function setOrderStatus(\r\n        uint256 orderId,\r\n        Models.OrderStatus status\r\n    ) external;\r\n\r\n    function setOrderResult(uint256 orderId, string calldata result) external;\r\n\r\n    function setOrderProcessor(uint256 orderId, address processor) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC3156FlashBorrower.sol)\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC3156FlashBorrower {\r\n    /**\r\n     * @dev Receive a flash loan.\r\n     * @param initiator The initiator of the loan.\r\n     * @param token The loan currency.\r\n     * @param amount The amount of tokens lent.\r\n     * @param fee The additional amount of tokens to repay.\r\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n     */\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IEthernityCloudERC20.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n\r\ninterface IEthernityCloudERC20 {\r\n     /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // ERC20Permit\r\n    // ----------------------------------------------------------------------------\r\n\r\n     /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // ERC20Capped\r\n    // ----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() external view returns (uint256);\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // ERC20FlashMint\r\n    // ----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of tokens available for loan.\r\n     * @param token The address of the token that is requested.\r\n     * @return The amount of token that can be loaned.\r\n     */\r\n    function maxFlashLoan(address token) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the fee applied when doing flash loans. This function calls\r\n     * the {_flashFee} function which returns the fee applied when doing flash\r\n     * loans.\r\n     * @param token The token to be flash loaned.\r\n     * @param amount The amount of tokens to be loaned.\r\n     * @return The fees applied to the corresponding flash loan.\r\n     */\r\n    function flashFee(address token, uint256 amount) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Performs a flash loan. New tokens are minted and sent to the\r\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\r\n     * interface. By the end of the flash loan, the receiver is expected to own\r\n     * amount + fee tokens and have them approved back to the token contract itself so\r\n     * they can be burned.\r\n     * @param receiver The receiver of the flash loan. Should implement the\r\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\r\n     * @param token The token to be flash loaned. Only `address(this)` is\r\n     * supported.\r\n     * @param amount The amount of tokens to be loaned.\r\n     * @param data An arbitrary datafield that is passed to the receiver.\r\n     * @return `true` if the flash loan was successful.\r\n     */\r\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\r\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\r\n    // slither-disable-next-line reentrancy-no-eth\r\n    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\r\n}\r\n// File: contracts/Ethernity.sol\r\n\r\n\r\npragma solidity ^0.5.17;\r\n\r\n/**\r\n * Copyright (C) 2018, 2019, 2020 Ethernity HODL UG\r\n *\r\n * This file is part of ETHERNITY PoX SC.\r\n *\r\n * ETHERNITY PoE SC is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Affero General Public License as\r\n * published by the Free Software Foundation, either version 3 of the\r\n * License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Affero General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Affero General Public License\r\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EthernityImplementationV2 is Owned {\r\n    uint16 constant internal HOURS_IN_SECONDS = 3600;\r\n    uint8 constant internal MAX_CPU = 255;\r\n    uint8 constant internal MAX_MEMORY = 255;\r\n    uint8 constant internal MAX_STORAGE = 255;\r\n    uint8 constant internal MAX_BANDWIDTH = 255;\r\n    uint8 constant internal MAX_INSTANCES = 10;\r\n\r\n    event _addDPRequestEV(address indexed _from, uint _rowNumber);\r\n    event _addDORequestEV(address indexed _from, uint _rowNumber);\r\n    event _placeOrderEV(address indexed _from, uint _orderNumber);\r\n    event _orderApprovedEV(address indexed _downer, address _dproc, uint _orderNumber);\r\n    event _orderPlacedEV(uint _orderNumber, uint _doRequestId, uint _dpRequestId);\r\n    event _orderClosedEV(uint _orderNumber);\r\n    event _orderValidatedEV(uint _orderNumber);\r\n    event _orderInvalidatedEV(uint _orderNumber);\r\n\r\n    address payable public ecAddress = address(0);\r\n    address payable public devAddress = address(0);\r\n    address public validatorRegistryAddress = address(0);\r\n    address public erc20Address = address(0);\r\n    address public ethStorageAddress = address(0);\r\n    IEthernityCloudERC20 private erc20;\r\n    IEthernityCloudStorage private ethStorage;\r\n\r\n    function setEcAddress(address payable newEcAddress) public onlyOwner {\r\n        ecAddress = newEcAddress;\r\n    }\r\n\r\n    function setDevAddress(address payable newDevAddress) public onlyOwner {\r\n        devAddress = newDevAddress;\r\n    }\r\n\r\n    function setValidatorRegistryAddress(address newValidatorRegistryAddress) public onlyOwner {\r\n        validatorRegistryAddress = newValidatorRegistryAddress;\r\n    }\r\n\r\n    function setEthernityCloudERC20Address(address newErc20Address) public onlyOwner {\r\n        require(erc20Address == address(0), \"IEthernityCloudERC20 was already initialized\");\r\n        erc20Address = newErc20Address;\r\n        erc20 = IEthernityCloudERC20(newErc20Address);\r\n    }\r\n\r\n    function _erc20() internal view returns (IEthernityCloudERC20) {\r\n        require(erc20Address != address(0), \"IEthernityCloudERC20 not initialized\");\r\n\r\n        return erc20;\r\n    }\r\n\r\n    function setEthernityCloudStorageAddress(address newEthStorageAddress) public onlyOwner {\r\n        ethStorageAddress = newEthStorageAddress;\r\n        ethStorage = IEthernityCloudStorage(newEthStorageAddress);\r\n    }\r\n\r\n    function _ethStorage() internal view returns (IEthernityCloudStorage) {\r\n        require(ethStorageAddress != address(0), \"IEthernityCloudStorage not initialized\");\r\n\r\n        return ethStorage;\r\n    }\r\n\r\n    function _addDPRequest(\r\n        uint8 _cpuRequest,\r\n        uint8 _memRequest,\r\n        uint8 _storageRequest,\r\n        uint8 _bandwidthRequest,\r\n        uint16 _duration,\r\n        uint8 _minPrice,\r\n        string memory _metadata1,\r\n        string memory _metadata2,\r\n        string memory _metadata3,\r\n        string memory _metadata4\r\n    ) public returns (uint _rowNumber)\r\n    {\r\n        require(_cpuRequest > 0 && _cpuRequest <= MAX_CPU, \"cpu invalid\");\r\n        require(_memRequest > 0 && _memRequest <= MAX_MEMORY, \"mem invalid\");\r\n        require(_bandwidthRequest > 0 && _bandwidthRequest <= MAX_BANDWIDTH, \"bw invalid\");\r\n        require(_storageRequest > 0 && _storageRequest <= MAX_STORAGE, \"strg invalid\");\r\n\r\n        _rowNumber = _ethStorage().insertDPRequest(\r\n            msg.sender,\r\n            _cpuRequest,\r\n            _memRequest,\r\n            _storageRequest,\r\n            _bandwidthRequest,\r\n            _hoursToSecconds(_duration),\r\n            _tokensToWeis(_minPrice),\r\n            _metadata1,\r\n            _metadata2,\r\n            _metadata3,\r\n            _metadata4\r\n        );\r\n\r\n        emit _addDPRequestEV(msg.sender, _rowNumber);\r\n    }\r\n\r\n    function _getDPRequestsCount() public view returns (uint256 _length) {\r\n        _length = _ethStorage().getDPRequestsCount();\r\n    }\r\n\r\n    function _getDPRequest(uint256 _requestListItem) public view returns (\r\n        address dproc,\r\n        uint8 cpuRequest,\r\n        uint8 memoryRequest,\r\n        uint8 storageRequest,\r\n        uint8 bandwidthRequest,\r\n        uint16 duration,\r\n        uint8 minPrice,\r\n        uint status)\r\n    {\r\n        Models.DPRequestDetails memory dpRequestDetails = _convertDPRequestDetails(_requestListItem);\r\n\r\n        dproc = dpRequestDetails.dproc;\r\n        cpuRequest = dpRequestDetails.cpuCores;\r\n        memoryRequest = uint8(dpRequestDetails.ramMemoryGB);\r\n        storageRequest = dpRequestDetails.storageGB;\r\n        bandwidthRequest = dpRequestDetails.bandwidthMbps;\r\n        duration = _seccondsToHours(dpRequestDetails.durationSec);\r\n        minPrice = _weisToTokens(dpRequestDetails.minPrice);\r\n        status = dpRequestDetails.status;\r\n    }\r\n\r\n    function _convertDPRequestDetails(\r\n        uint256 _requestListItem\r\n    ) internal view returns (Models.DPRequestDetails memory dpRequestDetails) {\r\n        (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 minPrice,\r\n            uint status\r\n        ) = _ethStorage().getDPRequest(_requestListItem);\r\n\r\n        dpRequestDetails = Models.DPRequestDetails({\r\n            dproc: dproc,\r\n            cpuCores: cpuCores,\r\n            ramMemoryGB: ramMemoryGB,\r\n            storageGB: storageGB,\r\n            bandwidthMbps: bandwidthMbps,\r\n            durationSec: durationSec,\r\n            minPrice: minPrice,\r\n            status: status\r\n        });\r\n    }\r\n\r\n    function _getDPRequestWithCreationDate(uint256 _requestListItem) public view returns (\r\n        address dproc,\r\n        uint8 cpuRequest,\r\n        uint8 memoryRequest,\r\n        uint8 storageRequest,\r\n        uint8 bandwidthRequest,\r\n        uint16 duration,\r\n        uint8 minPrice,\r\n        uint status,\r\n        uint32 createdAt)\r\n    {\r\n        Models.DPRequestDetailsWithDate memory dpRequestDetailsWithDate = _convertDPRequestDetailsWithDate(_requestListItem);\r\n\r\n        dproc = dpRequestDetailsWithDate.dproc;\r\n        cpuRequest = dpRequestDetailsWithDate.cpuCores;\r\n        memoryRequest = uint8(dpRequestDetailsWithDate.ramMemoryGB);\r\n        storageRequest = dpRequestDetailsWithDate.storageGB;\r\n        bandwidthRequest = dpRequestDetailsWithDate.bandwidthMbps;\r\n        duration = _seccondsToHours(dpRequestDetailsWithDate.durationSec);\r\n        minPrice = _weisToTokens(dpRequestDetailsWithDate.minPrice);\r\n        status = dpRequestDetailsWithDate.status;\r\n        createdAt = dpRequestDetailsWithDate.createdAt;\r\n    }\r\n\r\n    function _convertDPRequestDetailsWithDate(\r\n        uint256 _requestListItem\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            Models.DPRequestDetailsWithDate memory dpRequestDetailsWithDate\r\n        )\r\n    {\r\n        (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 minPrice,\r\n            uint status,\r\n            uint32 createdAt\r\n        ) = _ethStorage().getDPRequestWithCreationDate(_requestListItem);\r\n\r\n        dpRequestDetailsWithDate = Models.DPRequestDetailsWithDate({\r\n            dproc: dproc,\r\n            cpuCores: cpuCores,\r\n            ramMemoryGB: ramMemoryGB,\r\n            storageGB: storageGB,\r\n            bandwidthMbps: bandwidthMbps,\r\n            durationSec: durationSec,\r\n            minPrice: minPrice,\r\n            status: status,\r\n            createdAt: createdAt\r\n        });\r\n    }\r\n\r\n    function _getDPRequestMetadata(uint256 _requestListItem) public view returns (\r\n        address dproc,\r\n        string memory metadata1,\r\n        string memory metadata2,\r\n        string memory metadata3,\r\n        string memory metadata4)\r\n    {\r\n        return _ethStorage().getDPRequestMetadata(_requestListItem);\r\n    }\r\n\r\n    function _cancelDPRequest(uint256 _requestListItem) public {\r\n\r\n        require(_ethStorage().getDPRequestStatus(_requestListItem) == Models.RequestStatus.AVAILABLE, \"status must be available\");\r\n\r\n        _ethStorage().setDPRequestStatusFrom(msg.sender, _requestListItem, Models.RequestStatus.CANCELED);\r\n    }\r\n\r\n    function _getMyDPRequests() public view returns (uint256[] memory req){\r\n        req = _ethStorage().getDPRequestIds(msg.sender);\r\n    }\r\n\r\n    /**\r\n    ** metadata storage part\r\n    */\r\n    function _addMetadataToDPRequest(uint256 _requestListItem, string calldata _key, string calldata _value) external returns (uint _rowNumber){\r\n        _rowNumber = _ethStorage().addMetadataToDPRequestFrom(msg.sender, _requestListItem, _key, _value);\r\n    }\r\n\r\n    function _getMetadataCountForDPRequest(uint256 _requestListItem) public view returns (uint256 _length){\r\n        _length = _ethStorage().getMetadataCountForDPRequest(_requestListItem);\r\n    }\r\n\r\n    function _getMetadataValueForDPRequest(uint256 _requestListItem, uint256 _metadataItem)\r\n    public view returns (\r\n        string memory key,\r\n        string memory value\r\n    ){\r\n        return _ethStorage().getMetadataValueForDPRequest(_requestListItem, _metadataItem);\r\n    }\r\n\r\n    /**\r\n    * region data owner requests\r\n    */\r\n\r\n    function _addDORequest(\r\n        uint8 _cpuRequest,\r\n        uint8 _memRequest,\r\n        uint8 _storageRequest,\r\n        uint8 _bandwidthRequest,\r\n        uint16 _duration,\r\n        uint8 _instances,\r\n        uint8 _maxPrice,\r\n        string memory _metadata1,\r\n        string memory _metadata2,\r\n        string memory _metadata3,\r\n        string memory _metadata4\r\n    ) public returns (uint _rowNumber)\r\n    {\r\n        require(_instances > 0 && _instances <= MAX_INSTANCES, \"instance invalid\");\r\n        require(_cpuRequest > 0 && _cpuRequest <= MAX_CPU, \"cpu invalid\");\r\n        require(_memRequest > 0 && _memRequest <= MAX_MEMORY, \"mem invalid\");\r\n        require(_bandwidthRequest > 0 && _bandwidthRequest <= MAX_BANDWIDTH, \"bw invalid\");\r\n        require(_storageRequest > 0 && _storageRequest <= MAX_STORAGE, \"strg invalid\");\r\n\r\n        _transferFrom(msg.sender, address(this), _maxPrice * _duration * 10 ** uint(18));\r\n\r\n        _rowNumber = _insertDORequest(\r\n            _cpuRequest,\r\n            _memRequest,\r\n            _storageRequest,\r\n            _bandwidthRequest,\r\n            _duration,\r\n            _instances,\r\n            _maxPrice\r\n        );\r\n\r\n        _ethStorage().updateDORequestMetadata(_rowNumber, _metadata1, _metadata2, _metadata3, _metadata4);\r\n\r\n        emit _addDORequestEV(msg.sender, _rowNumber);\r\n    }\r\n\r\n    function _insertDORequest(\r\n        uint8 _cpuRequest,\r\n        uint8 _memRequest,\r\n        uint8 _storageRequest,\r\n        uint8 _bandwidthRequest,\r\n        uint16 _duration,\r\n        uint8 _instances,\r\n        uint8 _maxPrice\r\n    ) internal returns (uint _rowNumber)\r\n    {\r\n        uint32 durationSec = _hoursToSecconds(_duration);\r\n        uint256 maxPriceWeis = _tokensToWeis(_maxPrice);\r\n\r\n        _rowNumber = _ethStorage().insertDORequest(\r\n            msg.sender,\r\n            _cpuRequest,\r\n            _memRequest,\r\n            _storageRequest,\r\n            _bandwidthRequest,\r\n            durationSec,\r\n            _instances,\r\n            maxPriceWeis\r\n        );\r\n    }\r\n\r\n    function _getDORequestsCount() public view returns (uint256 _length) {\r\n        _length = _ethStorage().getDORequestsCount();\r\n    }\r\n\r\n    function _getDORequest(uint256 _requestListItem) public view returns (\r\n        address downer,\r\n        uint8 cpuRequest,\r\n        uint8 memoryRequest,\r\n        uint8 storageRequest,\r\n        uint8 bandwidthRequest,\r\n        uint16 duration,\r\n        uint8 maxPrice,\r\n        uint status)\r\n    {\r\n        Models.DORequestDetails memory doRequestDetails = _convertDORequestDetails(_requestListItem);\r\n\r\n        downer = doRequestDetails.downer;\r\n        cpuRequest = doRequestDetails.cpuCores;\r\n        memoryRequest = uint8(doRequestDetails.ramMemoryGB);\r\n        storageRequest = doRequestDetails.storageGB;\r\n        bandwidthRequest = doRequestDetails.bandwidthMbps;\r\n        duration = _seccondsToHours(doRequestDetails.durationSec);\r\n        maxPrice = _weisToTokens(doRequestDetails.maxPrice);        \r\n        status = doRequestDetails.status;\r\n    }\r\n\r\n    function _convertDORequestDetails(\r\n        uint256 _requestListItem\r\n    ) internal view returns (Models.DORequestDetails memory doRequestDetails) {\r\n        (address downer,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint32 durationSec,\r\n            uint256 maxPrice,\r\n            uint status) = _ethStorage().getDORequest(_requestListItem);\r\n\r\n        return\r\n            Models.DORequestDetails({\r\n                downer: downer,\r\n                cpuCores: cpuCores,\r\n                ramMemoryGB: ramMemoryGB,\r\n                storageGB: storageGB,\r\n                bandwidthMbps: bandwidthMbps,\r\n                durationSec: durationSec,\r\n                maxPrice: maxPrice,\r\n                status: status\r\n            });\r\n    }\r\n\r\n    function _getDORequestMetadata(uint256 _requestListItem) public view returns (\r\n        address downer,\r\n        string memory metadata1,\r\n        string memory metadata2,\r\n        string memory metadata3,\r\n        string memory metadata4)\r\n    {\r\n        return _ethStorage().getDORequestMetadata(_requestListItem);\r\n    }\r\n\r\n    function _cancelDORequest(uint256 _requestListItem) public {\r\n        (\r\n            uint32 durationSec,\r\n            uint256 maxPrice,\r\n            uint8 bookedInstances,\r\n            Models.RequestStatus status\r\n        ) = _ethStorage().getMinDORequest(_requestListItem);\r\n\r\n        require(status == Models.RequestStatus.AVAILABLE && bookedInstances == 0, \"status must be available\");\r\n\r\n        _transfer(msg.sender, maxPrice * _seccondsToHours(durationSec));\r\n\r\n        _ethStorage().setDORequestStatusFrom(msg.sender, _requestListItem, Models.RequestStatus.CANCELED);\r\n    }\r\n\r\n    function _getMyDORequests() public view returns (uint256[] memory req){\r\n        req = _ethStorage().getDORequestIds(msg.sender);\r\n    }\r\n\r\n    function _addMetadataToRequest(uint256 _requestListItem, string calldata _key, string calldata _value) external returns (uint _rowNumber){\r\n        _rowNumber = _ethStorage().addMetadataToDORequestFrom(msg.sender, _requestListItem, _key, _value);\r\n    }\r\n\r\n    function _getMetadataCountForRequest(uint256 _requestListItem) public view returns (uint256 _length){\r\n        _length = _ethStorage().getMetadataCountForDORequest(_requestListItem);\r\n    }\r\n\r\n    function _getMetadataValueForRequest(uint256 _requestListItem, uint256 _metadataItem)\r\n    public view returns (\r\n        string memory key,\r\n        string memory value\r\n    ){\r\n        return _ethStorage().getMetadataValueForDORequest(_requestListItem, _metadataItem);\r\n    }\r\n\r\n    /**\r\n    * order region\r\n    */\r\n\r\n    function _placeOrder(uint256 _doRequestItem, uint256 _dpRequestItem) public returns (uint _orderNumber){\r\n        (string memory doReqMetadata4, address downer, address dproc) = _validateOrderPlacement(_doRequestItem, _dpRequestItem);\r\n\r\n        _ethStorage().incrementDORequestBookedInstances(_doRequestItem);\r\n\r\n        _ethStorage().setDPRequestStatus(_dpRequestItem, Models.RequestStatus.BOOKED);\r\n\r\n        _orderNumber = _ethStorage().insertOrder(msg.sender, _doRequestItem, _dpRequestItem);\r\n\r\n        emit _placeOrderEV(msg.sender, _orderNumber);\r\n        emit _orderPlacedEV(_orderNumber, _doRequestItem, _dpRequestItem);\r\n\r\n        if (bytes(doReqMetadata4).length != 0) {\r\n            emit _orderApprovedEV(downer, dproc, _orderNumber);\r\n        }\r\n    }   \r\n\r\n    function _validateOrderPlacement(\r\n        uint256 _doRequestItem,\r\n        uint256 _dpRequestItem\r\n    ) internal view returns (string memory doReqMetadata4, address downer, address dproc) {\r\n        Models.DORequestOrderData memory doRequestOrderData = _getDORequestOrderData(_doRequestItem);\r\n        Models.DPRequestOrderData memory dpRequestOrderData = _getDPRequestOrderData(_dpRequestItem);\r\n\r\n        require(doRequestOrderData.status == Models.RequestStatus.AVAILABLE,\"status must be available\");\r\n        require(dpRequestOrderData.status == Models.RequestStatus.AVAILABLE, \"status must be available\");\r\n\r\n        require(bytes(dpRequestOrderData.metadata2).length > 0, \"metadata2 required\");\r\n        require(bytes(doRequestOrderData.metadata4).length == 0 || _ethStorage().parseAddr(doRequestOrderData.metadata4) == msg.sender, \"node address invalid\");\r\n\r\n        require(dpRequestOrderData.dproc == msg.sender || doRequestOrderData.downer == msg.sender, \"invalid downer or dproc\");\r\n\r\n        require(doRequestOrderData.cpuCores <= dpRequestOrderData.cpuCores, \"cpu core number exceeded\");\r\n        require(doRequestOrderData.ramMemoryGB <= dpRequestOrderData.ramMemoryGB, \"memory size exceeded\");\r\n        require(doRequestOrderData.storageGB <= dpRequestOrderData.storageGB, \"storage size exceeded\");\r\n        require(doRequestOrderData.bandwidthMbps <= dpRequestOrderData.bandwidthMbps, \"bandwidth size exceeded\");\r\n        require(doRequestOrderData.maxPrice >= dpRequestOrderData.minPrice, \"price exceeded\");\r\n\r\n        doReqMetadata4 = doRequestOrderData.metadata4;\r\n        downer = doRequestOrderData.downer;\r\n        dproc = dpRequestOrderData.dproc;\r\n    }\r\n\r\n    function _getDORequestOrderData(\r\n        uint256 _doRequestItem\r\n    )\r\n        internal\r\n        view\r\n        returns (Models.DORequestOrderData memory doRequestOrderData)\r\n    {\r\n        (\r\n            address downer,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint256 maxPrice,\r\n            Models.RequestStatus status,\r\n            string memory metadata4\r\n        ) = _ethStorage().getDORequestOrderData(_doRequestItem);\r\n\r\n        doRequestOrderData = Models.DORequestOrderData(\r\n            downer,\r\n            cpuCores,\r\n            ramMemoryGB,\r\n            storageGB,\r\n            bandwidthMbps,\r\n            maxPrice,\r\n            status,\r\n            metadata4\r\n        );\r\n    }\r\n\r\n    function _getDPRequestOrderData(\r\n        uint256 _dpRequestItem\r\n    )\r\n        internal\r\n        view\r\n        returns (Models.DPRequestOrderData memory dpRequestOrderData)\r\n    {\r\n        (\r\n            address dproc,\r\n            uint8 cpuCores,\r\n            uint16 ramMemoryGB,\r\n            uint8 storageGB,\r\n            uint8 bandwidthMbps,\r\n            uint256 minPrice,\r\n            Models.RequestStatus status,\r\n            string memory metadata2\r\n        ) = _ethStorage().getDPRequestOrderData(_dpRequestItem);\r\n\r\n        dpRequestOrderData = Models.DPRequestOrderData(\r\n            dproc,\r\n            cpuCores,\r\n            ramMemoryGB,\r\n            storageGB,\r\n            bandwidthMbps,\r\n            minPrice,\r\n            status,\r\n            metadata2\r\n        );\r\n    }\r\n\r\n    function _getOrdersCount() public view returns (uint256 _length) {\r\n        _length = _ethStorage().getOrdersCount();\r\n    }\r\n\r\n    function _getMyDOOrders() public view returns (uint256[] memory req){\r\n        req = _ethStorage().getDOOrdersIds(msg.sender);\r\n    }\r\n\r\n    function _getOrder(uint256 _orderItem) public view returns (\r\n        address downer,\r\n        address dproc,\r\n        uint doRequest,\r\n        uint dpRequest,\r\n        uint status)\r\n    {\r\n        return _ethStorage().getOrder(_orderItem);\r\n    }\r\n\r\n    /**\r\n    * orders can be processed only after being approved\r\n    * by other part(do/dp)\r\n    */\r\n    function _approveOrder(uint256 _orderItem) public returns (bool success){\r\n        (address downer, address dproc, address placedBy, Models.OrderStatus status) = _ethStorage().getOrderDetails(_orderItem);\r\n\r\n        require(msg.sender == downer || msg.sender == dproc, \"downer or dproc invalid\");\r\n        require(msg.sender != placedBy, \"invalid approver\");\r\n        require(status == Models.OrderStatus.OPEN, \"order must be open\");\r\n\r\n        _ethStorage().setOrderStatus(_orderItem, Models.OrderStatus.PROCESSING);\r\n\r\n        emit _orderApprovedEV(downer, dproc, _orderItem);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * add processor address by data processor\r\n    */\r\n    function _addProcessorToOrder(uint256 _orderItem, address processor) public returns (bool success){\r\n        (address dproc, Models.OrderStatus status) = _ethStorage().getOrderStatusDproc(_orderItem);\r\n\r\n        require(msg.sender == dproc, \"allowd only to dproc\");\r\n        require(status == Models.OrderStatus.PROCESSING, \"order must be processing\");\r\n\r\n        _ethStorage().setOrderProcessor(_orderItem, processor);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * add result to order\r\n    */\r\n    function _addResultToOrder(uint256 _orderItem, string calldata _result) external returns (bool success){\r\n        (address dproc, Models.OrderStatus status) = _ethStorage().getOrderStatusDproc(_orderItem);\r\n\r\n        require(msg.sender == dproc, \"allowd only to dproc\");\r\n        require(status == Models.OrderStatus.PROCESSING, \"order must be processing\");\r\n\r\n        _ethStorage().setOrderResult(_orderItem, _result);\r\n        _ethStorage().setOrderStatus(_orderItem, Models.OrderStatus.CLOSED);\r\n\r\n        emit _orderClosedEV(_orderItem);\r\n        return true;\r\n    }\r\n\r\n    function validate (uint256 _orderItem) external returns (bool success){\r\n        require(ecAddress != address(0), \"ecAddress not initialized\");\r\n        require(devAddress != address(0), \"devAddress not initialized\");\r\n        require(validatorRegistryAddress != address(0), \"validatorRegistryAddress not initialized\");\r\n\r\n        require(msg.sender == validatorRegistryAddress, \"Only ValidatorRegistry can validate a result\");\r\n\r\n        (Models.OrderStatus status, address dproc, , uint256 price, uint32 durationSec) = _ethStorage().getOrderAmountDetails(_orderItem);\r\n\r\n        require(status == Models.OrderStatus.CLOSED, \"order must be closed\");\r\n\r\n        //second parameter is the percentage reward(int value)\r\n        uint256 totalAmount = price * _seccondsToHours(durationSec);\r\n        uint256 ecReward = _computePercentage(totalAmount, 5);\r\n        uint256 devReward = _computePercentage(totalAmount, 10);\r\n\r\n        _transfer(dproc, totalAmount - ecReward - devReward);\r\n        _transfer(ecAddress, ecReward);\r\n        _transfer(devAddress, devReward);\r\n\r\n        emit _orderValidatedEV(_orderItem);\r\n\r\n        return true;\r\n    }\r\n\r\n    function invalidate (uint256 _orderItem) external returns (bool success){\r\n        require(validatorRegistryAddress != address(0), \"validatorRegistryAddress not initialized\");\r\n\r\n        require(msg.sender == validatorRegistryAddress, \"Only ValidatorRegistry can validate a result\");\r\n\r\n        (Models.OrderStatus status, , address downer, uint256 price, uint32 durationSec) = _ethStorage().getOrderAmountDetails(_orderItem);\r\n\r\n        require(status == Models.OrderStatus.CLOSED, \"order must be closed\");\r\n\r\n        _transfer(downer, price * _seccondsToHours(durationSec));\r\n\r\n        emit _orderInvalidatedEV(_orderItem);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * get result from order, public no validation is required\r\n    */\r\n    function _getResultFromOrder(uint256 _orderItem) public view returns (string memory _Result){\r\n        (string memory result, Models.OrderStatus status) = _ethStorage().getOrderResultDetails(_orderItem);\r\n\r\n        require(status == Models.OrderStatus.CLOSED, \"order must be closed\");\r\n\r\n        _Result = result;\r\n    }\r\n\r\n    /**\r\n    * get how many validators were requested\r\n    */\r\n    function _getRequiredValidators(uint256 _orderItem) public view returns (uint256 _Result){\r\n        _Result = _ethStorage().getOrderDORequestInstances(_orderItem);\r\n    }\r\n\r\n    function _transferFrom(address from, address to, uint tokens) internal returns (bool success) {\r\n        return _erc20().transferFrom(from, to, tokens);\r\n    }\r\n\r\n    function _transfer(address to, uint tokens) internal returns (bool success) {\r\n        return _erc20().transfer(to, tokens);\r\n    }\r\n\r\n    function _computePercentage(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n        uint256 result = (value * percentage) / 100;\r\n        return result;\r\n    }\r\n\r\n    function _hoursToSecconds(uint16 durationHour) internal pure returns (uint32) {\r\n        return durationHour * HOURS_IN_SECONDS;\r\n    }\r\n\r\n    function _seccondsToHours(uint32 durationSec) internal pure returns (uint16) {\r\n        return  uint16(durationSec/ HOURS_IN_SECONDS);\r\n    }\r\n\r\n    function _tokensToWeis(uint8 tokens) internal pure returns (uint256) {\r\n        return tokens * (10 ** uint(18));\r\n    }\r\n\r\n    function _weisToTokens(uint256 weis) internal pure returns (uint8) {\r\n        return uint8(weis / (10 ** uint(18)));\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"name\":\"_addDORequestEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"name\":\"_addDPRequestEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_downer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dproc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"name\":\"_orderApprovedEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"name\":\"_orderClosedEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"name\":\"_orderInvalidatedEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_doRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dpRequestId\",\"type\":\"uint256\"}],\"name\":\"_orderPlacedEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"name\":\"_orderValidatedEV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"name\":\"_placeOrderEV\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_cpuRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_memRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_storageRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bandwidthRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_duration\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_instances\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxPrice\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_metadata1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata4\",\"type\":\"string\"}],\"name\":\"_addDORequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_cpuRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_memRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_storageRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bandwidthRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_duration\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_minPrice\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_metadata1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadata4\",\"type\":\"string\"}],\"name\":\"_addDPRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"_addMetadataToDPRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"_addMetadataToRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rowNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"_addProcessorToOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"_addResultToOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"_approveOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_cancelDORequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_cancelDPRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getDORequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"downer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cpuRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"memoryRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"storageRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bandwidthRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"maxPrice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getDORequestMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"downer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata4\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getDORequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getDPRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dproc\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cpuRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"memoryRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"storageRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bandwidthRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"minPrice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getDPRequestMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dproc\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata4\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getDPRequestWithCreationDate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dproc\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cpuRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"memoryRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"storageRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bandwidthRequest\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"minPrice\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getDPRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getMetadataCountForDPRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"}],\"name\":\"_getMetadataCountForRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metadataItem\",\"type\":\"uint256\"}],\"name\":\"_getMetadataValueForDPRequest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestListItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_metadataItem\",\"type\":\"uint256\"}],\"name\":\"_getMetadataValueForRequest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getMyDOOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"req\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getMyDORequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"req\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getMyDPRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"req\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"_getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"downer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dproc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"doRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dpRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getOrdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"_getRequiredValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_Result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"_getResultFromOrder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_Result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_doRequestItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dpRequestItem\",\"type\":\"uint256\"}],\"name\":\"_placeOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"invalidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newEcAddress\",\"type\":\"address\"}],\"name\":\"setEcAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newErc20Address\",\"type\":\"address\"}],\"name\":\"setEthernityCloudERC20Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEthStorageAddress\",\"type\":\"address\"}],\"name\":\"setEthernityCloudStorageAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValidatorRegistryAddress\",\"type\":\"address\"}],\"name\":\"setValidatorRegistryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderItem\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EthernityImplementationV2", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5dcc1359a55ea3f7cb97162538ad5269fe1191fd446a7f768f52c0927e7a7a8d"}