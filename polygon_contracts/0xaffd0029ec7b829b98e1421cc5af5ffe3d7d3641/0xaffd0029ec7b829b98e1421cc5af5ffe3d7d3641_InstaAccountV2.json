{"SourceCode": "// Sources flattened with hardhat v2.0.8 https://hardhat.org\r\n\r\n// File contracts/v2/proxy/accountProxy.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\ninterface AccountImplementations {\r\n    function getImplementation(bytes4 _sig) external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`.\r\n */\r\ncontract InstaAccountV2 {\r\n\r\n    AccountImplementations public immutable implementations;\r\n\r\n    constructor(address _implementations) {\r\n        implementations = AccountImplementations(_implementations);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by Implementations registry.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback(bytes4 _sig) internal {\r\n        address _implementation = implementations.getImplementation(_sig);\r\n        require(_implementation != address(0), \"InstaAccountV2: Not able to find _implementation\");\r\n        _delegate(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by Implementations registry.\r\n     */\r\n    fallback () external payable {\r\n        _fallback(msg.sig);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by Implementations registry.\r\n     */\r\n    receive () external payable {\r\n        if (msg.sig != 0x00000000) {\r\n            _fallback(msg.sig);\r\n        }\r\n    }\r\n}\r\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementations\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"contract AccountImplementations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InstaAccountV2", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000039d3d5e7c11d61e072511485878dd84711c19d4a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x4aec8c5b1cf3498bef061e13d8e7f646feeb7029", "SwarmSource": ""}