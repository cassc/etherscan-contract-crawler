{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts@5.0.0/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@5.0.0/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@5.0.0/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: contracts/LiquidityLockV2.sol\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function burn(uint256 amount) external;\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    }\r\ninterface IUniswapV3PoolState {\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n    function liquidity() external view returns (uint128);\r\n    }\r\ninterface INonfungiblePositionManager {\r\n    struct PositionData {\r\n        uint96 nonce;\r\n        address operator;\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint128 liquidity;\r\n        uint256 feeGrowthInside0LastX128;\r\n        uint256 feeGrowthInside1LastX128;\r\n        uint128 tokensOwed0;\r\n        uint128 tokensOwed1;\r\n    }\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n    function positions(uint256 tokenId) external view returns (PositionData memory);\r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    }\r\n\r\n\r\n\r\n\r\n//********************************************************************************************\r\n//***********************      HERE STARTS THE CODE OF CONTRACT     **************************\r\n//********************************************************************************************\r\n\r\ncontract UniswapNFTpositionLocker {\r\n\r\n// simplified version of ownable (to save gas)\r\n    address private _owner;\r\n    constructor() {_owner = msg.sender;}\r\n    modifier onlyOwner() {require(_owner == msg.sender, \"Ownable: caller is not the owner\"); _;}\r\n\r\n// variables\r\n    INonfungiblePositionManager private UniswapManager = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\r\n    IERC20 public EQT;\r\n    address public PoolWallet = 0x79C08ce94676106f3a11c561D893F9fb26dd007C;\r\n    address private TeamWallet;\r\n    address[] public Partners;\r\n    uint256 public RequiredUnlockTime_90days = 150; //7776000;      // time since the requested unlock of tokens required to pass before the tokens can be withdrawn (90 days in seconds)\r\n    uint256 public RequiredUnlockTime_30days = 100; //2592000;      // time since the requested unlock of tokens required to pass before the tokens can be withdrawn (30 days in seconds)\r\n    uint256 public RequiredUnlockTime_1day = 50;    //86400;        // time since the requested unlock of tokens required to pass before the tokens can be withdrawn (1 day in seconds)\r\n    mapping(uint8 => IUniswapV3PoolState) public Pool;\r\n    mapping(uint8 => uint256) public Pool_NFT_ID;\r\n    mapping(uint8 => uint256) internal Pool_Timestamp;\r\n    mapping(uint8 => uint8) public Pool_LockDays;\r\n    mapping(uint8 => uint256) internal Pool_feeGrowth0;\r\n    mapping(uint8 => uint256) internal Pool_feeGrowth1;\r\n    mapping(uint8 => string) public Pool_priceRange;\r\n    bool public EQTaddressLocked = false;\r\n    error Withdrawing_EQT();\r\n    error Not_Enough_To_Withdraw();\r\n    error Locked();\r\n    error AlreadyExist();\r\n    error IncorrectLockTime();\r\n\r\n// internal functions\r\n    function uint256toString(uint256 value, uint8 decimals) internal pure returns (string memory) {\r\n        if (value == 0) {return \"0\";}\r\n        if (decimals == 0) {return Strings.toString(value);}\r\n        string memory IntPart = Strings.toString(value / (10**decimals));\r\n        string memory DecPart = Strings.toString(value % (10**decimals));\r\n        bytes memory DecPartBytes = bytes(DecPart);\r\n        if (DecPartBytes.length == decimals) {return string(abi.encodePacked(IntPart, \".\", DecPart));}\r\n        if (DecPartBytes.length > decimals) {return \"ERROR\";}\r\n        string memory Zeros = \"0\";\r\n        uint256 counter = (DecPartBytes.length + 1);\r\n        while (counter < decimals) {Zeros = string(abi.encodePacked(Zeros, \"0\")); counter++;}\r\n        return string(abi.encodePacked(IntPart, \".\", Zeros, DecPart));\r\n    }\r\n\r\n// onlyOwner functions\r\n    function setPool(uint8 Pool_Number, IUniswapV3PoolState Pool_Address, uint256 NFT_ID, uint8 LockDays, string calldata priceRange) external onlyOwner {\r\n        if (LockDays != 1 && LockDays != 30 && LockDays != 90) {revert IncorrectLockTime();}\r\n        if ((Pool_Timestamp[Pool_Number] == 0) && (Pool_LockDays[Pool_Number] != 0)) {revert Locked();}\r\n        if((Pool_LockDays[Pool_Number] == 1) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_1day)) {revert Locked();}\r\n        if((Pool_LockDays[Pool_Number] == 30) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_30days)) {revert Locked();}\r\n        if((Pool_LockDays[Pool_Number] == 90) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_90days)) {revert Locked();}\r\n        for (uint8 i = 0; i <= 254; i++) {if (Pool_NFT_ID[i] == NFT_ID) {revert AlreadyExist();}}\r\n        if (Pool_NFT_ID[255] == NFT_ID) {revert AlreadyExist();}\r\n        Pool[Pool_Number] = Pool_Address;\r\n        Pool_NFT_ID[Pool_Number] = NFT_ID;\r\n        Pool_LockDays[Pool_Number] = LockDays;\r\n        Pool_priceRange[Pool_Number] = priceRange;\r\n        Pool_Timestamp[Pool_Number] = 0;\r\n        Pool_feeGrowth0[Pool_Number] = Pool_Address.feeGrowthGlobal0X128();\r\n        Pool_feeGrowth1[Pool_Number] = Pool_Address.feeGrowthGlobal1X128();\r\n    }\r\n    function setTeamWallet(address _addr) external onlyOwner {TeamWallet = _addr;}\r\n    function addPartnerWallet(address _addr) external onlyOwner {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {revert AlreadyExist();}\r\n        }\r\n        Partners.push(_addr);\r\n        }\r\n    function removePartnerWallet(address _addr) external onlyOwner {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {\r\n                Partners[i] = Partners[Partners.length - 1];\r\n                Partners.pop();\r\n            }\r\n        }\r\n    }\r\n    function setEQT(IERC20 _addr) external onlyOwner {if (EQTaddressLocked) {revert Locked();} else {EQT = _addr;}}\r\n    function lockEQTaddress(bool confirm) external onlyOwner {if (confirm) {EQTaddressLocked = true;}}\r\n    function lockPool(uint8 Pool_Number, uint8 LockDays) external onlyOwner {\r\n        if (LockDays != 1 && LockDays != 30 && LockDays != 90) {revert IncorrectLockTime();}\r\n        if (Pool_LockDays[Pool_Number] > LockDays) {\r\n            if (Pool_Timestamp[Pool_Number] == 0) {revert Locked();}\r\n            if((Pool_LockDays[Pool_Number] == 1) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_1day)) {revert Locked();}\r\n            if((Pool_LockDays[Pool_Number] == 30) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_30days)) {revert Locked();}\r\n            if((Pool_LockDays[Pool_Number] == 90) && ((block.timestamp - Pool_Timestamp[Pool_Number]) <= RequiredUnlockTime_90days)) {revert Locked();}\r\n            }\r\n        Pool_Timestamp[Pool_Number] = 0; Pool_LockDays[Pool_Number] = LockDays;\r\n    }\r\n    function unlockPool(uint8 Pool_Number) external onlyOwner {Pool_Timestamp[Pool_Number] = block.timestamp;}\r\n    function withdrawUnlockedPool (uint8 Pool_Number) external onlyOwner {\r\n        if ((Pool_LockDays[Pool_Number] == 1) && (Pool_Timestamp[Pool_Number] != 0) && ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_1day)) {UniswapManager.transferFrom(address(this), PoolWallet, Pool_NFT_ID[Pool_Number]);}\r\n        if ((Pool_LockDays[Pool_Number] == 30) && (Pool_Timestamp[Pool_Number] != 0) && ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_30days)) {UniswapManager.transferFrom(address(this), PoolWallet, Pool_NFT_ID[Pool_Number]);}\r\n        if ((Pool_LockDays[Pool_Number] == 90) && (Pool_Timestamp[Pool_Number] != 0) && ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_90days)) {UniswapManager.transferFrom(address(this), PoolWallet, Pool_NFT_ID[Pool_Number]);}\r\n    }\r\n\r\n// view functions\r\n    function checkRemainingLockTime(uint8 Pool_Number) external view returns (uint256 RemainingSeconds, string memory Status) {\r\n        if (Pool_Timestamp[Pool_Number] == 0) {return (99999999999, \"Locked\");}\r\n        else {\r\n            if (Pool_LockDays[Pool_Number] == 1){\r\n                if ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_1day) {return (0, \"Unlocked\");}\r\n                else {return ((RequiredUnlockTime_1day - (block.timestamp - Pool_Timestamp[Pool_Number])), \"Unlocking\");}\r\n            }\r\n            if (Pool_LockDays[Pool_Number] == 30){\r\n                if ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_30days) {return (0, \"Unlocked\");}\r\n                else {return ((RequiredUnlockTime_30days - (block.timestamp - Pool_Timestamp[Pool_Number])), \"Unlocking\");}\r\n            }\r\n            if (Pool_LockDays[Pool_Number] == 90){\r\n                if ((block.timestamp - Pool_Timestamp[Pool_Number]) >= RequiredUnlockTime_90days) {return (0, \"Unlocked\");}\r\n                else {return ((RequiredUnlockTime_90days - (block.timestamp - Pool_Timestamp[Pool_Number])), \"Unlocking\");}\r\n            }\r\n        }\r\n    }\r\n    function getPartnerNumber(address _addr) external view returns (uint256) {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {return i;}\r\n        }\r\n        return 0;\r\n    }\r\n    function checkPoolData(uint8 Pool_Number) external view returns (string memory Token0_Symbol, address Token0_Address, string memory Token1_Symbol, address Token1_Address, string memory EQT_Price_Range) {\r\n        INonfungiblePositionManager.PositionData memory positionData = UniswapManager.positions(Pool_NFT_ID[Pool_Number]);\r\n        return (IERC20(positionData.token0).symbol(), positionData.token0, IERC20(positionData.token1).symbol(), positionData.token1, Pool_priceRange[Pool_Number]);\r\n    }\r\n    function checkAccumulatedFees(uint8 Pool_Number) public view returns (string memory AccumulatedFees){\r\n        INonfungiblePositionManager.PositionData memory positionData = UniswapManager.positions(Pool_NFT_ID[Pool_Number]);\r\n        uint256 feeGrowth_0 = (Pool[Pool_Number].feeGrowthGlobal0X128() - Pool_feeGrowth0[Pool_Number]);\r\n        uint256 feeGrowth_1 = (Pool[Pool_Number].feeGrowthGlobal1X128() - Pool_feeGrowth1[Pool_Number]);\r\n        uint256 estimatedFees0;\r\n        uint256 estimatedFees1;\r\n        if (feeGrowth_0 < 340282366920938463463374607431768211456) {estimatedFees0 = (feeGrowth_0 * positionData.liquidity) / 340282366920938463463374607431768211456;}\r\n        else {estimatedFees0 = ((feeGrowth_0 / 3402823669209384634633746074317682114) * (positionData.liquidity / 100));}\r\n        if (feeGrowth_1 < 340282366920938463463374607431768211456) {estimatedFees1 = (feeGrowth_1 * positionData.liquidity) / 340282366920938463463374607431768211456;}\r\n        else {estimatedFees1 = ((feeGrowth_1 / 3402823669209384634633746074317682114) * (positionData.liquidity / 100));}\r\n        string memory output = string(abi.encodePacked(\"\\nPool: \", Strings.toString(Pool_Number), \" ... \", uint256toString(estimatedFees0, IERC20(positionData.token0).decimals()), \" \", IERC20(positionData.token0).symbol(), \" + \", uint256toString(estimatedFees1, IERC20(positionData.token1).decimals()), \" \", IERC20(positionData.token1).symbol()));\r\n        return (output);\r\n    }\r\n    function checkAccumulatedFees_batch(uint8 batchStart, uint8 batchEnd) external view returns (string memory AccumulatedFees_Batch) {\r\n        require (batchStart < batchEnd, \"Incorrect range\");\r\n        string memory AccumulatedFeesBatch;\r\n        for (uint8 i = batchStart; i < batchEnd; i++) {\r\n            if (Pool[i] != IUniswapV3PoolState(address(0))) {\r\n                AccumulatedFeesBatch = string(abi.encodePacked(AccumulatedFeesBatch, checkAccumulatedFees(i)));\r\n            }\r\n        }\r\n        if (Pool[batchEnd] != IUniswapV3PoolState(address(0))) {\r\n            AccumulatedFeesBatch = string(abi.encodePacked(AccumulatedFeesBatch, checkAccumulatedFees(batchEnd)));\r\n        }\r\n        return AccumulatedFeesBatch;\r\n    }\r\n\r\n// fee collection\r\n    function collectFees(uint8 Pool_Number) external {\r\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams({\r\n            tokenId: Pool_NFT_ID[Pool_Number],\r\n            recipient: address(this),\r\n            amount0Max: type(uint128).max,\r\n            amount1Max: type(uint128).max\r\n        });\r\n        UniswapManager.collect(params);\r\n        Pool_feeGrowth0[Pool_Number] = Pool[Pool_Number].feeGrowthGlobal0X128();\r\n        Pool_feeGrowth1[Pool_Number] = Pool[Pool_Number].feeGrowthGlobal1X128();\r\n    }\r\n    function withdrawFees (IERC20 token) external {\r\n        if (token == EQT) {revert Withdrawing_EQT();}\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if ((2*Partners.length >= balance) || (1 >= balance)) {revert Not_Enough_To_Withdraw();}\r\n        uint256 amount;\r\n        if (Partners.length == 0) {\r\n            amount = balance/2;\r\n            token.transfer(TeamWallet, amount);\r\n            token.transfer(_owner, balance - amount);\r\n        } else {\r\n            if (Partners.length == 1) {\r\n                amount = balance/3;\r\n                token.transfer(TeamWallet, amount);\r\n                token.transfer(Partners[0], amount);\r\n                token.transfer(_owner, (balance - (2*amount)));\r\n            } else {\r\n                amount = balance/4;\r\n                uint256 PartnerAmount = (balance/(2*Partners.length));\r\n                token.transfer(TeamWallet, amount);\r\n                token.transfer(_owner, amount);\r\n                for (uint256 i = 0; i < Partners.length; i++) {\r\n                    token.transfer(Partners[i], PartnerAmount);\r\n                }\r\n            }\r\n        }\r\n        if (EQT.balanceOf(address(this)) >= 10**21) {EQT.burn(EQT.balanceOf(address(this)));}\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Enough_To_Withdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdrawing_EQT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EQT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTaddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Pool_LockDays\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Pool_NFT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Pool_priceRange\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RequiredUnlockTime_1day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RequiredUnlockTime_30days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RequiredUnlockTime_90days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPartnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"checkAccumulatedFees\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"AccumulatedFees\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"batchStart\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"batchEnd\",\"type\":\"uint8\"}],\"name\":\"checkAccumulatedFees_batch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"AccumulatedFees_Batch\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"checkPoolData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"Token0_Symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Token0_Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"Token1_Symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Token1_Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"EQT_Price_Range\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"checkRemainingLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"RemainingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPartnerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"confirm\",\"type\":\"bool\"}],\"name\":\"lockEQTaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"LockDays\",\"type\":\"uint8\"}],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePartnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEQT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"},{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"Pool_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"NFT_ID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"LockDays\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"priceRange\",\"type\":\"string\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"unlockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Pool_Number\",\"type\":\"uint8\"}],\"name\":\"withdrawUnlockedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniswapNFTpositionLocker", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://171eb6c9d46e7210ed2bba34cec6232b2027aaff2c133e5d6e6677237c453181"}