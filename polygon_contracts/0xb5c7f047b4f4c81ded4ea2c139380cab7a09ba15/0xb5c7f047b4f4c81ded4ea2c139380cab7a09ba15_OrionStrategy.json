{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/fakes/orion/FakeOrionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\n\\r\\nimport '../../interfaces/IPoolFunctionality.sol';\\r\\nimport '../../interfaces/IOrionRouter.sol';\\r\\nimport '../../libraries/TransferHelper.sol';\\r\\nimport './libraries/LibPool.sol';\\r\\nimport './libraries/LibValidator.sol';\\r\\n\\r\\ncontract FakeOrionRouter is IOrionRouter, Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice Settle a trade with two orders, filled price and amount\\r\\n     * @dev 2 orders are submitted, it is necessary to match them:\\r\\n        check conditions in orders for compliance filledPrice, filledAmountbuyOrderHash\\r\\n        change balances on the contract respectively with buyer, seller, matcbuyOrderHashher\\r\\n     * @param buyOrder structure of buy side orderbuyOrderHash\\r\\n     * @param sellOrder structure of sell side order\\r\\n     * @param filledPrice price at which the order was settled\\r\\n     * @param filledAmount amount settled between orders\\r\\n     */\\r\\n    struct UpdateOrderBalanceData {\\r\\n        uint buyType;\\r\\n        uint sellType;\\r\\n        int buyIn;\\r\\n        int sellIn;\\r\\n    }\\r\\n\\r\\n    struct Liability {\\r\\n        address asset;\\r\\n        uint64 timestamp;\\r\\n        uint192 outstandingAmount;\\r\\n    }\\r\\n\\r\\n    address public override _orionpoolRouter;\\r\\n    mapping(address => bool) orionpoolAllowances;\\r\\n\\r\\n    address public WETH;\\r\\n\\r\\n    // Get user balance by address and asset address\\r\\n    mapping(address => mapping(address => int192)) internal assetBalances;\\r\\n    // List of assets with negative balance for each user\\r\\n    mapping(address => Liability[]) public liabilities;\\r\\n\\r\\n    //Important catch-all a function that should only accept ethereum and don't allow do something with it\\r\\n    //We accept ETH there only from out router or wrapped ethereum contract.\\r\\n    //If router sends some ETH to us - it's just swap completed, and we don't need to do something\\r\\n    receive() external payable {\\r\\n        require(msg.sender == _orionpoolRouter || msg.sender == WETH, 'NPF');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev wrapper for LibValidator methods, may be deleted.\\r\\n     */\\r\\n    function validateOrder(LibValidator.Order memory order) public pure override returns (bool isValid) {\\r\\n        isValid = order.isPersonalSign ? LibValidator.validatePersonal(order) : LibValidator.validateV3(order);\\r\\n    }\\r\\n\\r\\n    function fillOrders(\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) public override nonReentrant {\\r\\n        // // --- VARIABLES --- //\\r\\n        // // Amount of quote asset\\r\\n        // uint256 _amountQuote = (uint256(filledAmount) * filledPrice) / (10 ** 8);\\r\\n        // require(_amountQuote < type(uint112).max, 'E12G');\\r\\n        // uint112 amountQuote = uint112(_amountQuote);\\r\\n        // // Order Hashes\\r\\n        // bytes32 buyOrderHash = buyOrder.getTypeValueHash();\\r\\n        // bytes32 sellOrderHash = sellOrder.getTypeValueHash();\\r\\n        // // --- VALIDATIONS --- //\\r\\n        // // Validate signatures using eth typed sign V1\\r\\n        // require(\\r\\n        //     LibValidator.checkOrdersInfo(\\r\\n        //         buyOrder,\\r\\n        //         sellOrder,\\r\\n        //         msg.sender,\\r\\n        //         filledAmount,\\r\\n        //         filledPrice,\\r\\n        //         block.timestamp,\\r\\n        //         _allowedMatcher\\r\\n        //     ),\\r\\n        //     'E3G'\\r\\n        // );\\r\\n        // // --- UPDATES --- //\\r\\n        // //updateFilledAmount\\r\\n        // filledAmounts[buyOrderHash] += filledAmount; //it is safe to add ui112 to each other to get i192\\r\\n        // filledAmounts[sellOrderHash] += filledAmount;\\r\\n        // require(filledAmounts[buyOrderHash] <= buyOrder.amount, 'E12B');\\r\\n        // require(filledAmounts[sellOrderHash] <= sellOrder.amount, 'E12S');\\r\\n        // // Update User's balances\\r\\n        // UpdateOrderBalanceData memory data;\\r\\n        // (data.buyType, data.buyIn) = LibExchange.updateOrderBalanceDebit(\\r\\n        //     buyOrder,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote,\\r\\n        //     kBuy | kCorrectMatcherFeeByOrderAmount,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // (data.sellType, data.sellIn) = LibExchange.updateOrderBalanceDebit(\\r\\n        //     sellOrder,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote,\\r\\n        //     kSell | kCorrectMatcherFeeByOrderAmount,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // LibExchange.creditUserAssets(\\r\\n        //     data.buyType,\\r\\n        //     buyOrder.senderAddress,\\r\\n        //     data.buyIn,\\r\\n        //     buyOrder.baseAsset,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // LibExchange.creditUserAssets(\\r\\n        //     data.sellType,\\r\\n        //     sellOrder.senderAddress,\\r\\n        //     data.sellIn,\\r\\n        //     sellOrder.quoteAsset,\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n        // require(checkPosition(buyOrder.senderAddress), 'E1PB');\\r\\n        // require(checkPosition(sellOrder.senderAddress), 'E1PS');\\r\\n        // emit NewTrade(\\r\\n        //     buyOrder.senderAddress,\\r\\n        //     sellOrder.senderAddress,\\r\\n        //     buyOrder.baseAsset,\\r\\n        //     buyOrder.quoteAsset,\\r\\n        //     filledPrice,\\r\\n        //     filledAmount,\\r\\n        //     amountQuote\\r\\n        // );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) public override nonReentrant {\\r\\n        // LibPool.OrderExecutionData memory d;\\r\\n        // d.order = order;\\r\\n        // d.filledAmount = filledAmount;\\r\\n        // d.blockchainFee = blockchainFee;\\r\\n        // d.path = path;\\r\\n        // d.allowedMatcher = _allowedMatcher;\\r\\n        // d.orionpoolRouter = _orionpoolRouter;\\r\\n        // LibPool.doFillThroughOrionPool(d, assetBalances, liabilities, filledAmounts);\\r\\n        // require(checkPosition(order.senderAddress), order.buySide == 0 ? 'E1PS' : 'E1PB');\\r\\n    }\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) public payable override nonReentrant {\\r\\n        // LibPool.doSwapThroughOrionPool(\\r\\n        //     IPoolFunctionality.SwapData({\\r\\n        //         amount_spend: amount_spend,\\r\\n        //         amount_receive: amount_receive,\\r\\n        //         is_exact_spend: is_exact_spend,\\r\\n        //         supportingFee: false,\\r\\n        //         path: path,\\r\\n        //         orionpool_router: _orionpoolRouter,\\r\\n        //         isInContractTrade: false,\\r\\n        //         isSentETHEnough: false,\\r\\n        //         isFromWallet: false,\\r\\n        //         asset_spend: address(0)\\r\\n        //     }),\\r\\n        //     assetBalances,\\r\\n        //     liabilities\\r\\n        // );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/libraries/LibPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '../../../interfaces/IPoolFunctionality.sol';\\r\\nimport '../FakeOrionRouter.sol';\\r\\nimport './LibValidator.sol';\\r\\n\\r\\nlibrary LibPool {\\r\\n    //  Just to avoid stack too deep error;\\r\\n    struct OrderExecutionData {\\r\\n        LibValidator.Order order;\\r\\n        uint filledAmount;\\r\\n        uint blockchainFee;\\r\\n        address[] path;\\r\\n        address allowedMatcher;\\r\\n        address orionpoolRouter;\\r\\n        uint amount_spend;\\r\\n        uint amount_receive;\\r\\n        uint amountQuote;\\r\\n        uint filledBase;\\r\\n        uint filledQuote;\\r\\n        uint filledPrice;\\r\\n        uint amountOut;\\r\\n        uint amountIn;\\r\\n        bool isInContractTrade;\\r\\n        bool isRetainFee;\\r\\n        bool isFromWallet;\\r\\n        address to;\\r\\n        address asset_spend;\\r\\n    }\\r\\n\\r\\n    function retrieveAssetSpend(address pf, address[] memory path) internal view returns (address) {\\r\\n        return path.length > 2 ? (IPoolFunctionality(pf).isFactory(path[0]) ? path[1] : path[0]) : path[0];\\r\\n    }\\r\\n\\r\\n    function doSwapThroughOrionPool(\\r\\n        IPoolFunctionality.SwapData memory d,\\r\\n        mapping(address => mapping(address => int192)) storage assetBalances,\\r\\n        mapping(address => FakeOrionRouter.Liability[]) storage liabilities\\r\\n    ) public returns (bool) {\\r\\n        // require(d.is_exact_spend || !d.supportingFee, \\\"FNS\\\");\\r\\n        // d.asset_spend = retrieveAssetSpend(d.orionpool_router, d.path);\\r\\n        // d.isInContractTrade = assetBalances[msg.sender][d.asset_spend] > 0;\\r\\n        // if (msg.value > 0) {\\r\\n        //     uint112 eth_sent = uint112(LibUnitConverter.baseUnitToDecimal(address(0), msg.value));\\r\\n        //     if (d.asset_spend == address(0) && eth_sent >= d.amount_spend) {\\r\\n        //         d.isSentETHEnough = true;\\r\\n        //         d.isInContractTrade = false;\\r\\n        //     } else {\\r\\n        //         LibExchange._updateBalance(msg.sender, address(0), eth_sent, assetBalances, liabilities);\\r\\n        //     }\\r\\n        // }\\r\\n        // d.isFromWallet = assetBalances[msg.sender][d.asset_spend] < d.amount_spend;\\r\\n        // if (d.isInContractTrade) {\\r\\n        //     if (d.supportingFee) {\\r\\n        //         // Depositing before _updateBalance and changing amount_spend if token has internal fee\\r\\n        //         uint beforeBalance = uint(assetBalances[msg.sender][d.asset_spend]);\\r\\n        //         int afterBalance = int(beforeBalance) - int(d.amount_spend);\\r\\n        //         if (afterBalance < 0) {\\r\\n        //             uint previousBalance = IERC20(d.asset_spend).balanceOf(address(this));\\r\\n        //             LibExchange._tryDeposit(d.asset_spend, uint(-afterBalance), msg.sender);\\r\\n        //             uint depositedAmount = IERC20(d.asset_spend).balanceOf(address(this)) - previousBalance;\\r\\n        //             depositedAmount = LibUnitConverter.baseUnitToDecimal(d.asset_spend, depositedAmount);\\r\\n        //             require(depositedAmount != 0, \\\"E1S\\\");\\r\\n        //             assetBalances[msg.sender][d.asset_spend] += int192(depositedAmount);\\r\\n        //             d.amount_spend = uint112(beforeBalance) + uint112(depositedAmount);\\r\\n        //         }\\r\\n        //     }\\r\\n        //     LibExchange._updateBalance(msg.sender, d.asset_spend, -1*int(d.amount_spend), assetBalances, liabilities);\\r\\n        //     require(assetBalances[msg.sender][d.asset_spend] >= 0, \\\"E1S\\\");\\r\\n        // }\\r\\n        // (uint amountOut, uint amountIn) = IPoolFunctionality(d.orionpool_router).doSwapThroughOrionPool(\\r\\n        //     d.isInContractTrade || d.isSentETHEnough ? address(this) : msg.sender,\\r\\n        //     d.isInContractTrade && !d.supportingFee ? address(this) : msg.sender,\\r\\n        //     d\\r\\n        // );\\r\\n        // if (d.isSentETHEnough) {\\r\\n        //     refundChange(amountOut);\\r\\n        // } else if (d.isInContractTrade && !d.supportingFee) {\\r\\n        //     if (d.amount_spend > amountOut) { //Refund\\r\\n        //         LibExchange._updateBalance(msg.sender, d.asset_spend, int(d.amount_spend) - int(amountOut), assetBalances, liabilities);\\r\\n        //     }\\r\\n        //     LibExchange.creditUserAssets(d.isFromWallet ? 1 : 0, msg.sender, int(amountIn), d.path[d.path.length-1], assetBalances, liabilities);\\r\\n        //     return true;\\r\\n        // }\\r\\n        // return d.isInContractTrade;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/libraries/LibValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '../utils/fromOZ/ECDSA.sol';\\r\\n\\r\\nlibrary LibValidator {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    string public constant DOMAIN_NAME = 'Orion Exchange';\\r\\n    string public constant DOMAIN_VERSION = '1';\\r\\n    uint256 public constant CHAIN_ID = 137;\\r\\n    bytes32 public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\r\\n\\r\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\\r\\n        keccak256(abi.encodePacked('EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)'));\\r\\n    bytes32 public constant ORDER_TYPEHASH =\\r\\n        keccak256(\\r\\n            abi.encodePacked(\\r\\n                'Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)'\\r\\n            )\\r\\n        );\\r\\n\\r\\n    bytes32 public constant DOMAIN_SEPARATOR =\\r\\n        keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(DOMAIN_NAME)),\\r\\n                keccak256(bytes(DOMAIN_VERSION)),\\r\\n                CHAIN_ID,\\r\\n                DOMAIN_SALT\\r\\n            )\\r\\n        );\\r\\n\\r\\n    struct Order {\\r\\n        address senderAddress;\\r\\n        address matcherAddress;\\r\\n        address baseAsset;\\r\\n        address quoteAsset;\\r\\n        address matcherFeeAsset;\\r\\n        uint64 amount;\\r\\n        uint64 price;\\r\\n        uint64 matcherFee;\\r\\n        uint64 nonce;\\r\\n        uint64 expiration;\\r\\n        uint8 buySide; // buy or sell\\r\\n        bool isPersonalSign;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev validate order signature\\r\\n     */\\r\\n    function validateV3(Order memory order) public pure returns (bool) {\\r\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, getTypeValueHash(order)));\\r\\n\\r\\n        return digest.recover(order.signature) == order.senderAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return hash order\\r\\n     */\\r\\n    function getTypeValueHash(Order memory _order) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    ORDER_TYPEHASH,\\r\\n                    _order.senderAddress,\\r\\n                    _order.matcherAddress,\\r\\n                    _order.baseAsset,\\r\\n                    _order.quoteAsset,\\r\\n                    _order.matcherFeeAsset,\\r\\n                    _order.amount,\\r\\n                    _order.price,\\r\\n                    _order.matcherFee,\\r\\n                    _order.nonce,\\r\\n                    _order.expiration,\\r\\n                    _order.buySide\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev basic checks of matching orders against each other\\r\\n     */\\r\\n    function checkOrdersInfo(\\r\\n        Order memory buyOrder,\\r\\n        Order memory sellOrder,\\r\\n        address sender,\\r\\n        uint256 filledAmount,\\r\\n        uint256 filledPrice,\\r\\n        uint256 currentTime,\\r\\n        address allowedMatcher\\r\\n    ) public pure returns (bool success) {\\r\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), 'E2BP') : require(validateV3(buyOrder), 'E2B');\\r\\n        sellOrder.isPersonalSign ? require(validatePersonal(sellOrder), 'E2SP') : require(validateV3(sellOrder), 'E2S');\\r\\n\\r\\n        // Same matcher address\\r\\n        require(buyOrder.matcherAddress == sender && sellOrder.matcherAddress == sender, 'E3M');\\r\\n\\r\\n        if (allowedMatcher != address(0)) {\\r\\n            require(buyOrder.matcherAddress == allowedMatcher, 'E3M2');\\r\\n        }\\r\\n\\r\\n        // Check matching assets\\r\\n        require(buyOrder.baseAsset == sellOrder.baseAsset && buyOrder.quoteAsset == sellOrder.quoteAsset, 'E3As');\\r\\n\\r\\n        // Check order amounts\\r\\n        require(filledAmount <= buyOrder.amount, 'E3AmB');\\r\\n        require(filledAmount <= sellOrder.amount, 'E3AmS');\\r\\n\\r\\n        // Check Price values\\r\\n        require(filledPrice <= buyOrder.price, 'E3');\\r\\n        require(filledPrice >= sellOrder.price, 'E3');\\r\\n\\r\\n        // Check Expiration Time. Convert to seconds first\\r\\n        require(buyOrder.expiration / 1000 >= currentTime, 'E4B');\\r\\n        require(sellOrder.expiration / 1000 >= currentTime, 'E4S');\\r\\n\\r\\n        require(buyOrder.buySide == 1 && sellOrder.buySide == 0, 'E3D');\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    'order',\\r\\n                    _order.senderAddress,\\r\\n                    _order.matcherAddress,\\r\\n                    _order.baseAsset,\\r\\n                    _order.quoteAsset,\\r\\n                    _order.matcherFeeAsset,\\r\\n                    _order.amount,\\r\\n                    _order.price,\\r\\n                    _order.matcherFee,\\r\\n                    _order.nonce,\\r\\n                    _order.expiration,\\r\\n                    _order.buySide\\r\\n                )\\r\\n            ).toEthSignedMessageHash();\\r\\n    }\\r\\n\\r\\n    function validatePersonal(Order memory order) public pure returns (bool) {\\r\\n        bytes32 digest = getEthSignedOrderHash(order);\\r\\n        return digest.recover(order.signature) == order.senderAddress;\\r\\n    }\\r\\n\\r\\n    function checkOrderSingleMatch(\\r\\n        Order memory buyOrder,\\r\\n        address sender,\\r\\n        address allowedMatcher,\\r\\n        uint112 filledAmount,\\r\\n        uint256 currentTime,\\r\\n        address asset_spend,\\r\\n        address asset_receive\\r\\n    ) internal pure {\\r\\n        buyOrder.isPersonalSign ? require(validatePersonal(buyOrder), 'E2BP') : require(validateV3(buyOrder), 'E2B');\\r\\n        require(buyOrder.matcherAddress == sender && buyOrder.matcherAddress == allowedMatcher, 'E3M2');\\r\\n        if (buyOrder.buySide == 1) {\\r\\n            require(buyOrder.baseAsset == asset_receive && buyOrder.quoteAsset == asset_spend, 'E3As');\\r\\n        } else {\\r\\n            require(buyOrder.quoteAsset == asset_receive && buyOrder.baseAsset == asset_spend, 'E3As');\\r\\n        }\\r\\n        require(filledAmount <= buyOrder.amount, 'E3AmB');\\r\\n        require(buyOrder.expiration / 1000 >= currentTime, 'E4B');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fakes/orion/utils/fromOZ/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        // Check the signature length\\r\\n        if (signature.length != 65) {\\r\\n            revert('ECDSA: invalid signature length');\\r\\n        }\\r\\n\\r\\n        // Divide the signature in r, s and v variables\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        // ecrecover takes the signature parameters, and the only way to get them\\r\\n        // currently is to use assembly.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            r := mload(add(signature, 0x20))\\r\\n            s := mload(add(signature, 0x40))\\r\\n            v := byte(0, mload(add(signature, 0x60)))\\r\\n        }\\r\\n\\r\\n        return recover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        require(\\r\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"ECDSA: invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), 'ECDSA: invalid signature');\\r\\n\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * replicates the behavior of the\\r\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', hash));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../fakes/orion/libraries/LibValidator.sol';\\r\\n\\r\\ninterface IOrionRouter {\\r\\n    function _orionpoolRouter() external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev wrapper for LibValidator methods, may be deleted.\\r\\n     */\\r\\n    function validateOrder(LibValidator.Order memory order) external pure returns (bool isValid);\\r\\n\\r\\n    function fillOrders(\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) external;\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrionStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../fakes/orion/libraries/LibValidator.sol';\\r\\n\\r\\ninterface IOrionStrategy {\\r\\n    function fillOrders(\\r\\n        address router,\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        address router,\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) external;\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        address router,\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) external payable returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolFunctionality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IPoolFunctionality {\\r\\n    struct SwapData {\\r\\n        uint112 amount_spend;\\r\\n        uint112 amount_receive;\\r\\n        address orionpool_router;\\r\\n        bool is_exact_spend;\\r\\n        bool supportingFee;\\r\\n        bool isInContractTrade;\\r\\n        bool isSentETHEnough;\\r\\n        bool isFromWallet;\\r\\n        address asset_spend;\\r\\n        address[] path;\\r\\n    }\\r\\n\\r\\n    struct InternalSwapData {\\r\\n        address user;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOut;\\r\\n        address asset_spend;\\r\\n        address[] path;\\r\\n        bool isExactIn;\\r\\n        address to;\\r\\n        address curFactory;\\r\\n        FactoryType curFactoryType;\\r\\n        bool supportingFee;\\r\\n    }\\r\\n\\r\\n    enum FactoryType {\\r\\n        UNSUPPORTED,\\r\\n        UNISWAPLIKE,\\r\\n        CURVE\\r\\n    }\\r\\n\\r\\n    function doSwapThroughOrionPool(\\r\\n        address user,\\r\\n        address to,\\r\\n        IPoolFunctionality.SwapData calldata swapData\\r\\n    ) external returns (uint amountOut, uint amountIn);\\r\\n\\r\\n    function getWETH() external view returns (address);\\r\\n\\r\\n    function addLiquidityFromExchange(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function isFactory(address a) external view returns (bool);\\r\\n\\r\\n    function isLending(address pool) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/OrionStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nimport '../interfaces/IOrionStrategy.sol';\\r\\nimport '../interfaces/IOrionRouter.sol';\\r\\nimport '../fakes/orion/libraries/LibPool.sol';\\r\\nimport '../fakes/orion/libraries/LibValidator.sol';\\r\\nimport '../Withdrawable.sol';\\r\\n\\r\\ncontract OrionStrategy is IOrionStrategy, Withdrawable {\\r\\n    address private constant ETH_ADDR = address(0);\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    receive() external payable {}\\r\\n\\r\\n    function fillOrders(\\r\\n        address router,\\r\\n        LibValidator.Order memory buyOrder,\\r\\n        LibValidator.Order memory sellOrder,\\r\\n        uint64 filledPrice,\\r\\n        uint112 filledAmount\\r\\n    ) external override {\\r\\n        IOrionRouter(router).fillOrders(buyOrder, sellOrder, filledPrice, filledAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice (partially) settle buy order with OrionPool as counterparty\\r\\n     * @dev order and orionpool path are submitted, it is necessary to match them:\\r\\n        check conditions in order for compliance filledPrice and filledAmount\\r\\n        change tokens via OrionPool\\r\\n        check that final price after exchange not worse than specified in order\\r\\n        change balances on the contract respectively\\r\\n     * @param order structure of buy side orderbuyOrderHash\\r\\n     * @param filledAmount amount of purchaseable token\\r\\n     * @param path array of assets addresses (each consequent asset pair is change pair)\\r\\n     */\\r\\n    function fillThroughOrionPool(\\r\\n        address router,\\r\\n        LibValidator.Order memory order,\\r\\n        uint112 filledAmount,\\r\\n        uint64 blockchainFee,\\r\\n        address[] calldata path\\r\\n    ) external override {\\r\\n        IOrionRouter(router).fillThroughOrionPool(order, filledAmount, blockchainFee, path);\\r\\n    }\\r\\n\\r\\n    function swapThroughOrionPool(\\r\\n        address router,\\r\\n        uint112 amount_spend,\\r\\n        uint112 amount_receive,\\r\\n        address[] calldata path,\\r\\n        bool is_exact_spend\\r\\n    ) external payable override returns (uint256 amountOut) {\\r\\n        address tokenIn = LibPool.retrieveAssetSpend(IOrionRouter(router)._orionpoolRouter(), path);\\r\\n        if (tokenIn != ETH_ADDR) IERC20(tokenIn).approve(router, amount_spend);\\r\\n        IOrionRouter(router).swapThroughOrionPool{ value: msg.value }(\\r\\n            amount_spend,\\r\\n            amount_receive,\\r\\n            path,\\r\\n            is_exact_spend\\r\\n        );\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        if (tokenOut != ETH_ADDR) {\\r\\n            amountOut = IERC20(tokenOut).balanceOf(address(this));\\r\\n            IERC20(tokenOut).transfer(msg.sender, amountOut);\\r\\n        } else {\\r\\n            amountOut = address(this).balance;\\r\\n            payable(msg.sender).transfer(amountOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/Context.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\n\\r\\nabstract contract Withdrawable is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address payable;\\r\\n\\r\\n    address public treasury;\\r\\n\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function withdrawToken(IERC20 _token, uint _amount) external onlyOwner {\\r\\n        _token.safeTransfer(treasury, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint _amount) external onlyOwner {\\r\\n        payable(treasury).sendValue(_amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokenAll(IERC20 _token) external onlyOwner {\\r\\n        _token.safeTransfer(treasury, _token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function withdrawETHAll() external onlyOwner {\\r\\n        payable(treasury).sendValue(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"filledAmount\",\"type\":\"uint112\"}],\"name\":\"fillOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPersonalSign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint112\",\"name\":\"filledAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint64\",\"name\":\"blockchainFee\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"fillThroughOrionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount_spend\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amount_receive\",\"type\":\"uint112\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"is_exact_spend\",\"type\":\"bool\"}],\"name\":\"swapThroughOrionPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETHAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokenAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OrionStrategy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}