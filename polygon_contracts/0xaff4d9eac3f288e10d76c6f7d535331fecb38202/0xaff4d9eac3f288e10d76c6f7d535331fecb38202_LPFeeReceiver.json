{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Farms/LPFeeReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint amountA,\\r\\n        uint reserveA,\\r\\n        uint reserveB\\r\\n    ) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint amountOut,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set & change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private owner;\\r\\n\\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address\\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IToken {\\r\\n    function sellFeeRecipient() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract LPFeeReceiver is Ownable {\\r\\n    address public LP_TWO_TOKENS;\\r\\n    address public LP_ETH;\\r\\n    address public STS;\\r\\n    address public STSP;\\r\\n    address public treasury;\\r\\n    IUniswapV2Router02 public router;\\r\\n\\r\\n    modifier notZeroOrDead(address addr) {\\r\\n        require(addr != address(0), \\\"Cannot be 0\\\");\\r\\n        require(\\r\\n            addr != address(0x000000000000000000000000000000000000dEaD),\\r\\n            \\\"Cannot be dead\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //events\\r\\n\\r\\n    event SetLPAddresses(address newLPTwoTokens, address newLPEth);\\r\\n    event SetRouter(address newRouter);\\r\\n    event SetTreasury(address newTreasury);\\r\\n    event SetSTSP(address newSTSP);\\r\\n    event SetSTS(address newSTS);\\r\\n\\r\\n    constructor(\\r\\n        address LP_TWO,\\r\\n        address LP_ETH_,\\r\\n        address router_,\\r\\n        address STS_,\\r\\n        address STSP_,\\r\\n        address treasury_\\r\\n    )\\r\\n        notZeroOrDead(LP_TWO)\\r\\n        notZeroOrDead(LP_ETH_)\\r\\n        notZeroOrDead(router_)\\r\\n        notZeroOrDead(STS_)\\r\\n        notZeroOrDead(STSP_)\\r\\n        notZeroOrDead(treasury_)\\r\\n    {\\r\\n        LP_TWO_TOKENS = LP_TWO;\\r\\n        LP_ETH = LP_ETH_;\\r\\n        router = IUniswapV2Router02(router_);\\r\\n        STS = STS_;\\r\\n        STSP = STSP_;\\r\\n        treasury = treasury_;\\r\\n    }\\r\\n\\r\\n    function withdraw(address token) external onlyOwner {\\r\\n        IERC20(token).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(token).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external onlyOwner {\\r\\n        (bool s, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s, \\\"ETH Transfer Failed\\\");\\r\\n    }\\r\\n\\r\\n    function setLPAddresses(\\r\\n        address LP_TWO_TOKENS_,\\r\\n        address LP_ETH_\\r\\n    ) external onlyOwner notZeroOrDead(LP_TWO_TOKENS_) notZeroOrDead(LP_ETH_) {\\r\\n        LP_TWO_TOKENS = LP_TWO_TOKENS_;\\r\\n        LP_ETH = LP_ETH_;\\r\\n        emit SetLPAddresses(LP_TWO_TOKENS, LP_ETH);\\r\\n    }\\r\\n\\r\\n    function setRouter(\\r\\n        address router_\\r\\n    ) external onlyOwner notZeroOrDead(router_) {\\r\\n        router = IUniswapV2Router02(router_);\\r\\n        emit SetRouter(router_);\\r\\n    }\\r\\n\\r\\n    function setTreasury(\\r\\n        address treasury_\\r\\n    ) external onlyOwner notZeroOrDead(treasury_) {\\r\\n        treasury = treasury_;\\r\\n        emit SetTreasury(treasury_);\\r\\n    }\\r\\n\\r\\n    function setSTSP(address STSP_) external onlyOwner notZeroOrDead(STSP_) {\\r\\n        STSP = STSP_;\\r\\n        emit SetSTSP(STSP_);\\r\\n    }\\r\\n\\r\\n    function setSTS(address STS_) external onlyOwner notZeroOrDead(STS_) {\\r\\n        STS = STS_;\\r\\n        emit SetSTS(STS_);\\r\\n    }\\r\\n\\r\\n    function trigger() external {\\r\\n        uint256 bal_two_tokens = IERC20(LP_TWO_TOKENS).balanceOf(address(this));\\r\\n        uint256 bal_eth = IERC20(LP_ETH).balanceOf(address(this));\\r\\n\\r\\n        if (bal_two_tokens > 0) {\\r\\n            // approve router\\r\\n            IERC20(LP_TWO_TOKENS).approve(address(router), bal_two_tokens);\\r\\n\\r\\n            // remove LP\\r\\n            router.removeLiquidity(\\r\\n                STS,\\r\\n                STSP,\\r\\n                bal_two_tokens,\\r\\n                1,\\r\\n                1,\\r\\n                address(this),\\r\\n                block.timestamp + 100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (bal_eth > 0) {\\r\\n            // approve router\\r\\n            IERC20(LP_ETH).approve(address(router), bal_eth);\\r\\n\\r\\n            // remove LP\\r\\n            router.removeLiquidityETH(\\r\\n                STS,\\r\\n                bal_eth,\\r\\n                1,\\r\\n                1,\\r\\n                address(this),\\r\\n                block.timestamp + 100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // send all STS to Sell Receiver\\r\\n        if (IERC20(STS).balanceOf(address(this)) > 0) {\\r\\n            IERC20(STS).transfer(\\r\\n                IToken(STS).sellFeeRecipient(),\\r\\n                IERC20(STS).balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // send rest to Treasury\\r\\n        if (IERC20(STSP).balanceOf(address(this)) > 0) {\\r\\n            IERC20(STSP).transfer(\\r\\n                treasury,\\r\\n                IERC20(STSP).balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            (bool s, ) = payable(treasury).call{value: address(this).balance}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            require(s, \\\"ETH Treasury Payment Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LP_TWO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LP_ETH_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STSP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPTwoTokens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPEth\",\"type\":\"address\"}],\"name\":\"SetLPAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSTS\",\"type\":\"address\"}],\"name\":\"SetSTS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSTSP\",\"type\":\"address\"}],\"name\":\"SetSTSP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LP_ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TWO_TOKENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LP_TWO_TOKENS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LP_ETH_\",\"type\":\"address\"}],\"name\":\"setLPAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"}],\"name\":\"setSTS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"STSP_\",\"type\":\"address\"}],\"name\":\"setSTSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPFeeReceiver", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000074f09c9d8d5f4cf49f28ae755902ee6ca38b8f1f000000000000000000000000966f2f7064137e7c448cecbec20d8bbf44f2e52e000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff00000000000000000000000045ab8afc660b6c78b7de02cff88e963e34f794180000000000000000000000000d9a09bd3970a456168bef973ce71769b1217398000000000000000000000000311e34a3492aa572195f4c8f3bdfbcbb9fe9c3ea", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}