{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev This contract is part of GLM payment system. Visit https://golem.network for details.\r\n * Be careful when interacting with this contract, because it has no exit mechanism. Any assets sent directly to this contract will be lost.\r\n */\r\ncontract MultiTransferERC20 {\r\n    IERC20 public GLM;\r\n\r\n    /**\r\n     * @dev Contract works only on currency specified during contract deployment\r\n     */\r\n    constructor(IERC20 _GLM) {\r\n        GLM = _GLM;\r\n    }\r\n\r\n    /**\r\n     * @dev `recipients` is the list of addresses that will receive `amounts` of GLMs from the caller's account\r\n     *\r\n     * Both `recipients` and `amounts` have to be the same length. \r\n     *\r\n     * Use this function on Polygon chain to avoid excessive approval events. It saves gas on Polygon compared to batchTransferDirect.\r\n     * \r\n     * Note that this function emits one extra transfer event, which needs to be taken into account when parsing events.\r\n     * GLM flow: Sender -> Contract -> Recipients\r\n     */\r\n    function golemTransferIndirect(address[] calldata recipients, uint256[] calldata amounts) external {\r\n        require(recipients.length == amounts.length, \"recipients.length == amounts.length\");\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint i = 0; i < recipients.length; ++i) {\r\n            totalAmount += amounts[i];\r\n        }\r\n        require(GLM.transferFrom(msg.sender, address(this), totalAmount), \"transferFrom failed\");\r\n        \r\n        for (uint i = 0; i < recipients.length; ++i) {\r\n            require(GLM.transfer(recipients[i], amounts[i]), \"transfer failed\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev `recipients` is the list of addresses that will receive `amounts` of GLMs from the caller's account\r\n     *\r\n     * Both `recipients` and `amounts` have to be the same length. \r\n     *\r\n     * Sometimes this function is cheaper than batchTransferIndirect.\r\n     * GLM flow: Sender -> Recipients\r\n     */\r\n    function golemTransferDirect(address[] calldata recipients, uint256[] calldata amounts) external {\r\n        require(recipients.length == amounts.length, \"recipients.length == amounts.length\");\r\n\r\n        for (uint i = 0; i < recipients.length; ++i) {\r\n            require(GLM.transferFrom(msg.sender, recipients[i], amounts[i]), \"transferFrom failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Packed version of batchTransferDirect to save some gas on arguments\r\n     *\r\n     * `payments` is an array which consists of packed data as follows:\r\n     * target address (20 bytes), amount (12 bytes)\r\n     */\r\n    function golemTransferDirectPacked(bytes32[] calldata payments) external {\r\n        for (uint i = 0; i < payments.length; ++i) {\r\n            // A payment contains compressed data:\r\n            // first 160 bits (20 bytes) is an address.\r\n            // following 96 bits (12 bytes) is a value,\r\n            bytes32 payment = payments[i];\r\n            address addr = address(bytes20(payment));\r\n            uint amount = uint(payment) % 2**96;\r\n            require(GLM.transferFrom(msg.sender, addr, amount), \"transferFrom failed\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Packed version of batchTransferIndirect to save some gas on arguments. \r\n     * `totalTransferred` - sum of GLM transferred\r\n     * `payments` is an array which consists of packed data as follows:\r\n     * target address (20 bytes), amount (12 bytes)\r\n     */\r\n    function golemTransferIndirectPacked(bytes32[] calldata payments, uint256 totalTransferred) external {\r\n        uint256 totalAmount = 0;\r\n        require(GLM.transferFrom(msg.sender, address(this), totalTransferred), \"transferFrom failed\");\r\n        for (uint i = 0; i < payments.length; ++i) {\r\n            // A payment contains compressed data:\r\n            // first 160 bits (20 bytes) is an address.\r\n            // following 96 bits (12 bytes) is a value,\r\n            bytes32 payment = payments[i];\r\n            address addr = address(bytes20(payment));\r\n            uint amount = uint(payment) % 2**96;\r\n            totalAmount += amount;\r\n            require(GLM.transfer(addr, amount), \"transfer failed\");\r\n        }\r\n        require(totalAmount == totalTransferred, \"Amount sum not equal totalTransferred\");\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_GLM\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GLM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"golemTransferDirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"payments\",\"type\":\"bytes32[]\"}],\"name\":\"golemTransferDirectPacked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"golemTransferIndirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"payments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"totalTransferred\",\"type\":\"uint256\"}],\"name\":\"golemTransferIndirectPacked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiTransferERC20", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000b220b82f3ea3b7f6d9a1d8ab58930c064a2b5bf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d93b1a0ba7cb980624b2a60ab6b45ebd8d0ab3774ce16724c43cc6637dd699e"}