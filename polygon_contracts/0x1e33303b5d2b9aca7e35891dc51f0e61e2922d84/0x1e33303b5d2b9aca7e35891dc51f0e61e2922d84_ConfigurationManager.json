{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/configuration/ConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IConfigurationManager } from \\\"../interfaces/IConfigurationManager.sol\\\";\\n\\n/**\\n * @title ConfigurationManager\\n * @author Pods Finance\\n * @notice Allows contracts to read protocol-wide settings\\n */\\ncontract ConfigurationManager is IConfigurationManager, Ownable {\\n    mapping(address => mapping(bytes32 => uint256)) private _parameters;\\n    mapping(address => uint256) private _caps;\\n    mapping(address => address) private _allowedVaults;\\n    address private immutable _global = address(0);\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function setParameter(address target, bytes32 name, uint256 value) public override onlyOwner {\\n        _parameters[target][name] = value;\\n        emit ParameterSet(target, name, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function getParameter(address target, bytes32 name) external view override returns (uint256) {\\n        return _parameters[target][name];\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function getGlobalParameter(bytes32 name) external view override returns (uint256) {\\n        return _parameters[_global][name];\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function setCap(address target, uint256 value) external override onlyOwner {\\n        if (target == address(0)) revert ConfigurationManager__TargetCannotBeTheZeroAddress();\\n        _caps[target] = value;\\n        emit SetCap(target, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function getCap(address target) external view override returns (uint256) {\\n        return _caps[target];\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function setVaultMigration(address oldVault, address newVault) external override onlyOwner {\\n        if (newVault == address(0)) revert ConfigurationManager__NewVaultCannotBeTheZeroAddress();\\n        _allowedVaults[oldVault] = newVault;\\n        emit VaultAllowanceSet(oldVault, newVault);\\n    }\\n\\n    /**\\n     * @inheritdoc IConfigurationManager\\n     */\\n    function getVaultMigration(address oldVault) external view override returns (address) {\\n        return _allowedVaults[oldVault];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IConfigurationManager\\n * @notice Allows contracts to read protocol-wide configuration modules\\n * @author Pods Finance\\n */\\ninterface IConfigurationManager {\\n    event SetCap(address indexed target, uint256 value);\\n    event ParameterSet(address indexed target, bytes32 indexed name, uint256 value);\\n    event VaultAllowanceSet(address indexed oldVault, address indexed newVault);\\n\\n    error ConfigurationManager__TargetCannotBeTheZeroAddress();\\n    error ConfigurationManager__NewVaultCannotBeTheZeroAddress();\\n\\n    /**\\n     * @notice Set specific parameters to a contract or globally across multiple contracts.\\n     * @dev Use `address(0)` to set a global parameter.\\n     * @param target The contract address\\n     * @param name The parameter name\\n     * @param value The parameter value\\n     */\\n    function setParameter(address target, bytes32 name, uint256 value) external;\\n\\n    /**\\n     * @notice Retrieves the value of a parameter set to contract.\\n     * @param target The contract address\\n     * @param name The parameter name\\n     */\\n    function getParameter(address target, bytes32 name) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the value of a parameter shared between multiple contracts.\\n     * @param name The parameter name\\n     */\\n    function getGlobalParameter(bytes32 name) external view returns (uint256);\\n\\n    /**\\n     * @notice Defines a cap value to a contract.\\n     * @param target The contract address\\n     * @param value Cap amount\\n     */\\n    function setCap(address target, uint256 value) external;\\n\\n    /**\\n     * @notice Get the value of a defined cap.\\n     * @dev Note that 0 cap means that the contract is not capped\\n     * @param target The contract address\\n     */\\n    function getCap(address target) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the allowance to migrate to a `vault` address.\\n     * @param oldVault The current vault address\\n     * @param newVault The vault where assets are going to be migrated to\\n     */\\n    function setVaultMigration(address oldVault, address newVault) external;\\n\\n    /**\\n     * @notice Returns the new Vault address.\\n     * @param oldVault The current vault address\\n     */\\n    function getVaultMigration(address oldVault) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ConfigurationManager__NewVaultCannotBeTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConfigurationManager__TargetCannotBeTheZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ParameterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"VaultAllowanceSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getGlobalParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"}],\"name\":\"getVaultMigration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"setVaultMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfigurationManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}