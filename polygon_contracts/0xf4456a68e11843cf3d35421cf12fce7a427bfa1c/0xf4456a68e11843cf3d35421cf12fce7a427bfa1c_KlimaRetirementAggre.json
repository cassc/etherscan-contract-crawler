{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKlimaInfinity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IKlimaInfinity {\\n    function retireExactCarbonDefault(\\n        address sourceToken,\\n        address poolToken,\\n        uint maxAmountIn,\\n        uint retireAmount,\\n        string memory retiringEntityString,\\n        address beneficiaryAddress,\\n        string memory beneficiaryString,\\n        string memory retirementMessage,\\n        uint8 fromMode\\n    ) external payable returns (uint retirementIndex);\\n\\n    function retireExactCarbonSpecific(\\n        address sourceToken,\\n        address poolToken,\\n        address projectToken,\\n        uint maxAmountIn,\\n        uint retireAmount,\\n        string memory retiringEntityString,\\n        address beneficiaryAddress,\\n        string memory beneficiaryString,\\n        string memory retirementMessage,\\n        uint8 fromMode\\n    ) external payable returns (uint retirementIndex);\\n\\n    function retireExactSourceDefault(\\n        address sourceToken,\\n        address poolToken,\\n        uint maxAmountIn,\\n        string memory retiringEntityString,\\n        address beneficiaryAddress,\\n        string memory beneficiaryString,\\n        string memory retirementMessage,\\n        uint8 fromMode\\n    ) external payable returns (uint retirementIndex);\\n\\n    function retireExactSourceSpecific(\\n        address sourceToken,\\n        address poolToken,\\n        address projectToken,\\n        uint maxAmountIn,\\n        string memory retiringEntityString,\\n        address beneficiaryAddress,\\n        string memory beneficiaryString,\\n        string memory retirementMessage,\\n        uint8 fromMode\\n    ) external payable returns (uint retirementIndex);\\n\\n    function getSourceAmountDefaultRetirement(\\n        address sourceToken,\\n        address carbonToken,\\n        uint retireAmount\\n    ) external view returns (uint amountIn);\\n\\n    function getSourceAmountSpecificRetirement(\\n        address sourceToken,\\n        address carbonToken,\\n        uint retireAmount\\n    ) external view returns (uint amountIn);\\n\\n    function getRetireAmountSourceDefault(\\n        address sourceToken,\\n        address carbonToken,\\n        uint amount\\n    ) external view returns (uint amountOut);\\n\\n    function getRetireAmountSourceSpecific(\\n        address sourceToken,\\n        address carbonToken,\\n        uint amount\\n    ) external view returns (uint amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRetireBridgeCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRetireBridgeCommon {\\n    function getNeededBuyAmount(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _poolAmount,\\n        bool _retireSpecific\\n    ) external view returns (uint256, uint256);\\n\\n    function getSwapPath(address _sourceToken, address _poolToken)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function poolRouter(address _poolToken) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRetireC3Carbon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRetireC3Carbon {\\n    function retireC3(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree\\n    ) external;\\n\\n    function retireC3Specific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree,\\n        address[] memory _carbonList\\n    ) external;\\n\\n    function getNeededBuyAmount(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _poolAmount,\\n        bool _retireSpecific\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRetireMossCarbon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRetireMossCarbon {\\n    function retireMoss(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree\\n    ) external;\\n\\n    function getNeededBuyAmount(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _poolAmount,\\n        bool _retireSpecific\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRetireToucanCarbon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRetireToucanCarbon {\\n    function retireToucan(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree\\n    ) external;\\n\\n    function retireToucanSpecific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree,\\n        address[] memory _carbonList\\n    ) external;\\n\\n    function getNeededBuyAmount(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _poolAmount,\\n        bool _retireSpecific\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IwsKLIMA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IwsKLIMA {\\r\\n    function wrap(uint256 _amount) external returns (uint256);\\r\\n\\r\\n    function unwrap(uint256 _amount) external returns (uint256);\\r\\n\\r\\n    function wKLIMATosKLIMA(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function sKLIMATowKLIMA(uint256 _amount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/KlimaRetirementAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IwsKLIMA.sol\\\";\\nimport \\\"./interfaces/IRetireBridgeCommon.sol\\\";\\nimport \\\"./interfaces/IRetireMossCarbon.sol\\\";\\nimport \\\"./interfaces/IRetireToucanCarbon.sol\\\";\\nimport \\\"./interfaces/IRetireC3Carbon.sol\\\";\\nimport \\\"./interfaces/IKlimaInfinity.sol\\\";\\n\\n/**\\n * @title KlimaRetirementAggregator\\n * @author KlimaDAO\\n *\\n * @notice This is the master aggregator contract for the Klima retirement utility.\\n *\\n * This allows a user to provide a source token and an approved carbon pool token to retire.\\n * If the source is different than the pool, it will attempt to swap to that pool then retire.\\n */\\ncontract KlimaRetirementAggregator is Initializable, ContextUpgradeable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Context_init();\\n    }\\n\\n    /**\\n     * === State Variables and Mappings ===\\n     */\\n    address public KLIMA;\\n    address public sKLIMA;\\n    address public wsKLIMA;\\n    address public USDC;\\n    address public staking;\\n    address public stakingHelper;\\n    address public treasury;\\n    address public klimaRetirementStorage;\\n\\n    mapping(address => bool) public isPoolToken;\\n    mapping(address => uint256) public poolBridge;\\n    mapping(uint256 => address) public bridgeHelper;\\n\\n    address public constant INFINITY = 0x8cE54d9625371fb2a068986d32C85De8E6e995f8;\\n\\n    /**\\n     * === Event Setup ===\\n     */\\n    event AddressUpdated(uint256 addressIndex, address indexed oldAddress, address indexed newAddress);\\n    event PoolAdded(address poolToken, uint256 bridge);\\n    event PoolRemoved(address poolToken);\\n    event BridgeHelperUpdated(uint256 bridgeID, address helper);\\n\\n    /**\\n     * === Non Specific Auto Retirements\\n     */\\n\\n    /**\\n     * @notice This function will retire a carbon pool token that is held\\n     * in the caller's wallet. Depending on the pool provided the appropriate\\n     * retirement helper will be used as defined in the bridgeHelper mapping.\\n     * If a token other than the pool is provided then the helper will attempt\\n     * to swap to the appropriate pool and then retire.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @param _beneficiaryAddress Address of the beneficiary of the retirement.\\n     * @param _beneficiaryString String representing the beneficiary. A name perhaps.\\n     * @param _retirementMessage Specific message relating to this retirement event.\\n     */\\n    function retireCarbon(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountDefaultRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonDefault(\\n                _sourceToken,\\n                _poolToken,\\n                sourceAmount,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceDefault(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    function retireCarbon(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountDefaultRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonDefault(\\n                _sourceToken,\\n                _poolToken,\\n                sourceAmount,\\n                _amount,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceDefault(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function will retire a carbon pool token that has been\\n     * transferred to this contract. Useful when an intermediary contract has\\n     * approval to transfer the source tokens from the initiator.\\n     * Depending on the pool provided the appropriate retirement helper will\\n     * be used as defined in the bridgeHelper mapping. If a token other than\\n     * the pool is provided then the helper will attempt to swap to the\\n     * appropriate pool and then retire.\\n     *\\n     * @param _initiator The original sender of the transaction.\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @param _beneficiaryAddress Address of the beneficiary of the retirement.\\n     * @param _beneficiaryString String representing the beneficiary. A name perhaps.\\n     * @param _retirementMessage Specific message relating to this retirement event.\\n     */\\n    function retireCarbonFrom(\\n        address _initiator,\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountDefaultRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_initiator, address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonDefault(\\n                _sourceToken,\\n                _poolToken,\\n                sourceAmount,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_initiator, address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceDefault(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function that checks to make sure the needed source tokens\\n     * have been transferred to this contract, then calls the retirement function\\n     * on the bridge's specific helper contract.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @param _beneficiaryAddress Address of the beneficiary of the retirement.\\n     * @param _beneficiaryString String representing the beneficiary. A name perhaps.\\n     * @param _retirementMessage Specific message relating to this retirement event.\\n     * @param _retiree Address of the initiator where source tokens originated.\\n     */\\n    function _retireCarbon(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree\\n    ) internal {\\n        (uint256 sourceAmount,) = getSourceAmount(_sourceToken, _poolToken, _amount, _amountInCarbon);\\n\\n        require(\\n            IERC20Upgradeable(_sourceToken).balanceOf(address(this)) == sourceAmount, \\\"Source tokens not transferred.\\\"\\n        );\\n\\n        IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(bridgeHelper[poolBridge[_poolToken]], sourceAmount);\\n\\n        if (poolBridge[_poolToken] == 0) {\\n            IRetireMossCarbon(bridgeHelper[0]).retireMoss(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        } else if (poolBridge[_poolToken] == 1) {\\n            IRetireToucanCarbon(bridgeHelper[1]).retireToucan(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                \\\"KlimaDAO Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        } else if (poolBridge[_poolToken] == 2) {\\n            IRetireC3Carbon(bridgeHelper[2]).retireC3(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        }\\n    }\\n\\n    function _retireCarbon(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree\\n    ) internal {\\n        (uint256 sourceAmount,) = getSourceAmount(_sourceToken, _poolToken, _amount, _amountInCarbon);\\n\\n        require(\\n            IERC20Upgradeable(_sourceToken).balanceOf(address(this)) == sourceAmount, \\\"Source tokens not transferred.\\\"\\n        );\\n\\n        IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(bridgeHelper[poolBridge[_poolToken]], sourceAmount);\\n\\n        if (poolBridge[_poolToken] == 0) {\\n            IRetireMossCarbon(bridgeHelper[0]).retireMoss(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        } else if (poolBridge[_poolToken] == 1) {\\n            IRetireToucanCarbon(bridgeHelper[1]).retireToucan(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        } else if (poolBridge[_poolToken] == 2) {\\n            IRetireC3Carbon(bridgeHelper[2]).retireC3(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree\\n            );\\n        }\\n    }\\n\\n    /**\\n     * === Specific offset selection retirements ===\\n     */\\n\\n    /**\\n     * @notice This function will retire a carbon pool token that is held\\n     * in the caller's wallet. Depending on the pool provided the appropriate\\n     * retirement helper will be used as defined in the bridgeHelper mapping.\\n     * If a token other than the pool is provided then the helper will attempt\\n     * to swap to the appropriate pool and then retire.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @param _beneficiaryAddress Address of the beneficiary of the retirement.\\n     * @param _beneficiaryString String representing the beneficiary. A name perhaps.\\n     * @param _retirementMessage Specific message relating to this retirement event.\\n     */\\n    function retireCarbonSpecific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address[] memory _carbonList\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n        require(_carbonList.length == 1, \\\"Can only specify one project.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountSpecificRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                sourceAmount,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    function retireCarbonSpecific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address[] memory _carbonList\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n        require(_carbonList.length == 1, \\\"Can only specify one project.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountSpecificRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                sourceAmount,\\n                _amount,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_msgSender(), address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                _amount,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    function retireCarbonSpecificFrom(\\n        address _initiator,\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address[] memory _carbonList\\n    ) public {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n        require(_carbonList.length == 1, \\\"Can only specify one project.\\\");\\n\\n        if (_amountInCarbon) {\\n            uint256 sourceAmount =\\n                IKlimaInfinity(INFINITY).getSourceAmountSpecificRetirement(_sourceToken, _poolToken, _amount);\\n\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_initiator, address(this), sourceAmount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, sourceAmount);\\n\\n            IKlimaInfinity(INFINITY).retireExactCarbonSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                sourceAmount,\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        } else {\\n            // Transfer and approve the source tokens for Infinity\\n            IERC20Upgradeable(_sourceToken).safeTransferFrom(_initiator, address(this), _amount);\\n            IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(INFINITY, _amount);\\n\\n            IKlimaInfinity(INFINITY).retireExactSourceSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _carbonList[0],\\n                _amount,\\n                \\\"KlimaDAO Retirement Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                0\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function that checks to make sure the needed source tokens\\n     * have been transferred to this contract, then calls the retirement function\\n     * on the bridge's specific helper contract.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @param _beneficiaryAddress Address of the beneficiary of the retirement.\\n     * @param _beneficiaryString String representing the beneficiary. A name perhaps.\\n     * @param _retirementMessage Specific message relating to this retirement event.\\n     * @param _retiree Address of the initiator where source tokens originated.\\n     */\\n    function _retireCarbonSpecific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree,\\n        address[] memory _carbonList\\n    ) internal {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n        // Only Toucan and C3 currently allow specific retirement.\\n        require(poolBridge[_poolToken] == 1 || poolBridge[_poolToken] == 2, \\\"Pool does not allow specific.\\\");\\n\\n        _prepareRetireSpecific(_sourceToken, _poolToken, _amount, _amountInCarbon);\\n\\n        if (poolBridge[_poolToken] == 0) {\\n            // Reserve for possible future use.\\n        } else if (poolBridge[_poolToken] == 1) {\\n            IRetireToucanCarbon(bridgeHelper[1]).retireToucanSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                \\\"KlimaDAO Aggregator\\\",\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree,\\n                _carbonList\\n            );\\n        } else if (poolBridge[_poolToken] == 2) {\\n            IRetireC3Carbon(bridgeHelper[2]).retireC3Specific(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree,\\n                _carbonList\\n            );\\n        }\\n    }\\n\\n    function _retireCarbonSpecific(\\n        address _sourceToken,\\n        address _poolToken,\\n        uint256 _amount,\\n        bool _amountInCarbon,\\n        string memory _retireEntityString,\\n        address _beneficiaryAddress,\\n        string memory _beneficiaryString,\\n        string memory _retirementMessage,\\n        address _retiree,\\n        address[] memory _carbonList\\n    ) internal {\\n        require(isPoolToken[_poolToken], \\\"Pool Token Not Accepted.\\\");\\n        // Only Toucan and C3 currently allow specific retirement.\\n        require(poolBridge[_poolToken] == 1 || poolBridge[_poolToken] == 2, \\\"Pool does not allow specific.\\\");\\n\\n        _prepareRetireSpecific(_sourceToken, _poolToken, _amount, _amountInCarbon);\\n\\n        if (poolBridge[_poolToken] == 0) {\\n            // Reserve for possible future use.\\n        } else if (poolBridge[_poolToken] == 1) {\\n            IRetireToucanCarbon(bridgeHelper[1]).retireToucanSpecific(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _retireEntityString,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree,\\n                _carbonList\\n            );\\n        } else if (poolBridge[_poolToken] == 2) {\\n            IRetireC3Carbon(bridgeHelper[2]).retireC3Specific(\\n                _sourceToken,\\n                _poolToken,\\n                _amount,\\n                _amountInCarbon,\\n                _beneficiaryAddress,\\n                _beneficiaryString,\\n                _retirementMessage,\\n                _retiree,\\n                _carbonList\\n            );\\n        }\\n    }\\n\\n    function _prepareRetireSpecific(address _sourceToken, address _poolToken, uint256 _amount, bool _amountInCarbon)\\n        internal\\n    {\\n        (uint256 sourceAmount,) = getSourceAmountSpecific(_sourceToken, _poolToken, _amount, _amountInCarbon);\\n\\n        require(\\n            IERC20Upgradeable(_sourceToken).balanceOf(address(this)) == sourceAmount, \\\"Source tokens not transferred.\\\"\\n        );\\n\\n        IERC20Upgradeable(_sourceToken).safeIncreaseAllowance(bridgeHelper[poolBridge[_poolToken]], sourceAmount);\\n    }\\n\\n    /**\\n     * === External views and helpful functions ===\\n     */\\n\\n    /**\\n     * @notice This function calls the appropriate helper for a pool token and\\n     * returns the total amount in source tokens needed to perform the transaction.\\n     * Any swap slippage buffers and fees are included in the return value.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @return Returns both the source amount and carbon amount as a result of swaps.\\n     */\\n    function getSourceAmount(address _sourceToken, address _poolToken, uint256 _amount, bool _amountInCarbon)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (_amountInCarbon) {\\n            return\\n                (IKlimaInfinity(INFINITY).getSourceAmountDefaultRetirement(_sourceToken, _poolToken, _amount), _amount);\\n        }\\n        return (_amount, IKlimaInfinity(INFINITY).getRetireAmountSourceDefault(_sourceToken, _poolToken, _amount));\\n    }\\n\\n    /**\\n     * @notice Same as getSourceAmount, but factors in the redemption fee\\n     * for specific retirements.\\n     *\\n     * @param _sourceToken The contract address of the token being supplied.\\n     * @param _poolToken The contract address of the pool token being retired.\\n     * @param _amount The amount being supplied. Expressed in either the total\\n     *          carbon to offset or the total source to spend. See _amountInCarbon.\\n     * @param _amountInCarbon Bool indicating if _amount is in carbon or source.\\n     * @return Returns both the source amount and carbon amount as a result of swaps.\\n     */\\n    function getSourceAmountSpecific(address _sourceToken, address _poolToken, uint256 _amount, bool _amountInCarbon)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (_amountInCarbon) {\\n            return\\n                (IKlimaInfinity(INFINITY).getSourceAmountSpecificRetirement(_sourceToken, _poolToken, _amount), _amount);\\n        }\\n        return (_amount, IKlimaInfinity(INFINITY).getRetireAmountSourceSpecific(_sourceToken, _poolToken, _amount));\\n    }\\n\\n    /**\\n     * @notice Allow the contract owner to update Klima protocol addresses\\n     * resulting from possible migrations.\\n     * @param _selection Int to indicate which address is being updated.\\n     * @param _newAddress New address for contract needing to be updated.\\n     * @return bool\\n     */\\n    function setAddress(uint256 _selection, address _newAddress) external onlyOwner returns (bool) {\\n        address oldAddress;\\n        if (_selection == 0) {\\n            oldAddress = KLIMA;\\n            KLIMA = _newAddress; // 0; Set new KLIMA address\\n        } else if (_selection == 1) {\\n            oldAddress = sKLIMA;\\n            sKLIMA = _newAddress; // 1; Set new sKLIMA address\\n        } else if (_selection == 2) {\\n            oldAddress = wsKLIMA;\\n            wsKLIMA = _newAddress; // 2; Set new wsKLIMA address\\n        } else if (_selection == 3) {\\n            oldAddress = USDC;\\n            USDC = _newAddress; // 3; Set new USDC address\\n        } else if (_selection == 4) {\\n            oldAddress = staking;\\n            staking = _newAddress; // 4; Set new staking address\\n        } else if (_selection == 5) {\\n            oldAddress = stakingHelper;\\n            stakingHelper = _newAddress; // 5; Set new stakingHelper address\\n        } else if (_selection == 6) {\\n            oldAddress = treasury;\\n            treasury = _newAddress; // 6; Set new treasury address\\n        } else if (_selection == 7) {\\n            oldAddress = klimaRetirementStorage;\\n            klimaRetirementStorage = _newAddress; // 7; Set new storage address\\n        } else {\\n            return false;\\n        }\\n\\n        emit AddressUpdated(_selection, oldAddress, _newAddress);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add a new carbon pool to retire with helper contract.\\n     * @param _poolToken Pool being added.\\n     * @param _poolBridge Int ID of the bridge used for this token.\\n     * @return bool\\n     */\\n    function addPool(address _poolToken, uint256 _poolBridge) external onlyOwner returns (bool) {\\n        require(!isPoolToken[_poolToken], \\\"Pool already added\\\");\\n        require(_poolToken != address(0), \\\"Pool cannot be zero address\\\");\\n\\n        isPoolToken[_poolToken] = true;\\n        poolBridge[_poolToken] = _poolBridge;\\n\\n        emit PoolAdded(_poolToken, _poolBridge);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Remove a carbon pool to retire.\\n     *     @param _poolToken Pool being removed.\\n     *     @return bool\\n     */\\n    function removePool(address _poolToken) external onlyOwner returns (bool) {\\n        require(isPoolToken[_poolToken], \\\"Pool not added\\\");\\n\\n        isPoolToken[_poolToken] = false;\\n\\n        emit PoolRemoved(_poolToken);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set the helper contract to be used with a carbon bridge.\\n     *     @param _bridgeID Int ID of the bridge.\\n     *     @param _helper Helper contract to use with this bridge.\\n     *     @return bool\\n     */\\n    function setBridgeHelper(uint256 _bridgeID, address _helper) external onlyOwner returns (bool) {\\n        require(_helper != address(0), \\\"Helper cannot be zero address\\\");\\n\\n        bridgeHelper[_bridgeID] = _helper;\\n\\n        emit BridgeHelperUpdated(_bridgeID, _helper);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allow withdrawal of any tokens sent in error\\n     *     @param _token Address of token to transfer\\n     */\\n    function feeWithdraw(address _token, address _recipient) external onlyOwner returns (bool) {\\n        IERC20Upgradeable(_token).safeTransfer(_recipient, IERC20Upgradeable(_token).balanceOf(address(this)));\\n\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addressIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"}],\"name\":\"BridgeHelperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridge\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INFINITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KLIMA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolBridge\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"feeWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"}],\"name\":\"getSourceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"}],\"name\":\"getSourceAmountSpecific\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"klimaRetirementStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_retireEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"}],\"name\":\"retireCarbon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"}],\"name\":\"retireCarbon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"}],\"name\":\"retireCarbonFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_retireEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_carbonList\",\"type\":\"address[]\"}],\"name\":\"retireCarbonSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_carbonList\",\"type\":\"address[]\"}],\"name\":\"retireCarbonSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_amountInCarbon\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_retirementMessage\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_carbonList\",\"type\":\"address[]\"}],\"name\":\"retireCarbonSpecificFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sKLIMA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_selection\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bridgeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"name\":\"setBridgeHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wsKLIMA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KlimaRetirementAggregator", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}