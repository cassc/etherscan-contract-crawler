{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PhenixNFTStaking.sol\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract PhenixNFTStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private constant FXP_BASE = 1000000;\r\n    uint256 private constant REWARD_INTERVAL = 86400;\r\n\r\n    uint256 public dailyRewardRate;\r\n    uint256 public maxNFTsPerTransaction;\r\n    uint256 public totalStaked;\r\n\r\n    address public rewardToken;\r\n    address public erc721Token;\r\n    bool public rewardsUnlocked;\r\n\r\n    struct Commitment {\r\n        uint256 time;\r\n        uint256 multiplierNumerator;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 tokenId;\r\n        address stakeholder;\r\n        uint256 lastRewardTimestamp;\r\n        uint256 endStakeTimestamp;\r\n        uint256 currentTokenRewardMultiplier;\r\n        Commitment currentCommitment;\r\n        uint256 dailyRewardRate;\r\n    }\r\n\r\n    mapping(address => uint256[]) public stakeholderTokens;\r\n    mapping(uint256 => Stake) public stakeMapping;\r\n    mapping(uint256 => uint256) public nftIdRewardMultiplier;\r\n    mapping(address => uint256) public stakeholderTotalRewards;\r\n    mapping(uint256 => Commitment) public stakingTimeCommitmentMapping;\r\n\r\n    event StakeNFT(uint256 indexed _tokenId, address indexed _owner);\r\n    event UnstakeNFT(uint256 indexed _tokenId, address indexed _owner);\r\n    event ClaimRewards(\r\n        address indexed _stakeholder,\r\n        uint256 indexed _claimAmount\r\n    );\r\n\r\n    constructor(address _rewardTokenAddress, address _erc721TokenAddress) {\r\n        // PHNX TOKEN (Mainnet): 0x6C997a37f5a1Dca62b58EEB01041f056942966B3;\r\n        // FPC NFT Token (Mainnet): 0x752892900c197B9C5b10B93e6F19B0365c296F18;\r\n        rewardToken = _rewardTokenAddress;\r\n        erc721Token = _erc721TokenAddress;\r\n\r\n        // Staking time commitments\r\n        _setStakingTimeCommitment(120, 100, 100); // 2 Minutes (1.0x Multiplier)\r\n        _setStakingTimeCommitment(300, 100, 100); // 5 Minutes (1.0x Multiplier)\r\n        _setStakingTimeCommitment(600, 100, 100); // 10 Minutes (1.0x Multiplier)\r\n\r\n        _setStakingTimeCommitment(15 * 86400, 100, 100); // 15 Days (1.05x Multiplier)\r\n        _setStakingTimeCommitment(30 * 86400, 105, 100); // 30 Days (1.10x Multiplier)\r\n        _setStakingTimeCommitment(60 * 86400, 110, 100); // 60 Days (1.20x Multiplier)\r\n\r\n        dailyRewardRate = 4 ether;\r\n        maxNFTsPerTransaction = 500;\r\n    }\r\n\r\n    modifier isOwnerOfERC721Token(uint256 _id) {\r\n        require(\r\n            IERC721(erc721Token).ownerOf(_id) == msg.sender,\r\n            \"User does not own this ERC721 Token.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier maxNFTsNotExceeded(uint256[] calldata _tokenIds) {\r\n        require(\r\n            _tokenIds.length != 0 && _tokenIds.length <= maxNFTsPerTransaction,\r\n            \"Too many (or zero) NFTs to process in this transaction.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier stakeCommitmentAllowed(uint256 _seconds) {\r\n        require(\r\n            stakingTimeCommitmentMapping[_seconds].multiplierNumerator != 0,\r\n            \"Staking for this period of time is not allowed.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function withdrawRewardTokenAssets() external onlyOwner {\r\n        IERC20(rewardToken).transfer(\r\n            owner(),\r\n            IERC20(rewardToken).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function withdrawETHAssets() external onlyOwner {\r\n        (bool success, ) = address(owner()).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n        require(success, \"Failed to withdraw ETH from contract\");\r\n    }\r\n\r\n    function setERC721TokenAddress(address _erc721Token) external onlyOwner {\r\n        erc721Token = _erc721Token;\r\n    }\r\n\r\n    function setRewardToken(address _rewardToken) external onlyOwner {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function setMaxNFTsPerTransaction(uint256 _amountPerTransation)\r\n        external\r\n        onlyOwner\r\n    {\r\n        maxNFTsPerTransaction = _amountPerTransation;\r\n    }\r\n\r\n    function setDailyRewardRate(uint256 _rewardRate) external onlyOwner {\r\n        dailyRewardRate = _rewardRate;\r\n    }\r\n\r\n    function setRewardsUnlocked(bool _state) external onlyOwner {\r\n        rewardsUnlocked = _state;\r\n    }\r\n\r\n    function setMultiplierOf(\r\n        uint256[] calldata _tokenIds,\r\n        uint256 _multiplierNumerator,\r\n        uint256 _multiplierDenominator\r\n    ) external onlyOwner {\r\n        require(\r\n            _multiplierNumerator > _multiplierDenominator,\r\n            \"Numerator must be greater than denominator.\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            nftIdRewardMultiplier[_tokenIds[i]] =\r\n                (FXP_BASE * _multiplierNumerator) /\r\n                _multiplierDenominator;\r\n        }\r\n    }\r\n\r\n    function _setStakingTimeCommitment(\r\n        uint256 _seconds,\r\n        uint256 _multiplierNumerator,\r\n        uint256 _multiplierDenominator\r\n    ) internal {\r\n        stakingTimeCommitmentMapping[_seconds] = Commitment(\r\n            _seconds,\r\n            (FXP_BASE * _multiplierNumerator) / _multiplierDenominator\r\n        );\r\n    }\r\n\r\n    function setStakingTimeCommitment(\r\n        uint256 _seconds,\r\n        uint256 _multiplierNumerator,\r\n        uint256 _multiplierDenominator\r\n    ) external onlyOwner {\r\n        _setStakingTimeCommitment(\r\n            _seconds,\r\n            _multiplierNumerator,\r\n            _multiplierDenominator\r\n        );\r\n    }\r\n\r\n    function removeStakingTimeCommitment(uint256 _seconds) external onlyOwner {\r\n        _setStakingTimeCommitment(_seconds, 0, 0);\r\n    }\r\n\r\n    function claimableRewardsOfStakedTokens(address _owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory stakedTokensOfOwner = stakeholderTokens[_owner];\r\n        uint256[] memory result = new uint256[](stakedTokensOfOwner.length);\r\n\r\n        for (uint256 i = 0; i < stakedTokensOfOwner.length; i++) {\r\n            if (\r\n                block.timestamp >=\r\n                stakeMapping[stakedTokensOfOwner[i]].endStakeTimestamp\r\n            ) {\r\n                result[i] = rewardOf(stakedTokensOfOwner[i]);\r\n            } else {\r\n                result[i] = 0;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function totalClaimableRewardsOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalClaimableRewards;\r\n        uint256[] memory stakedTokensOfOwner = stakedTokensOf(_owner);\r\n\r\n        for (uint256 i = 0; i < stakedTokensOfOwner.length; i++) {\r\n            if (\r\n                block.timestamp >=\r\n                stakeMapping[stakedTokensOfOwner[i]].endStakeTimestamp\r\n            ) {\r\n                totalClaimableRewards = totalClaimableRewards.add(\r\n                    rewardOf(stakedTokensOfOwner[i])\r\n                );\r\n            }\r\n        }\r\n\r\n        return totalClaimableRewards;\r\n    }\r\n\r\n    function pendingRewardsOfStakedTokens(address _owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory stakedTokensOfOwner = stakedTokensOf(_owner);\r\n        uint256[] memory result = new uint256[](stakedTokensOfOwner.length);\r\n\r\n        for (uint256 i = 0; i < stakedTokensOfOwner.length; i++) {\r\n            result[i] = rewardOf(stakedTokensOfOwner[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function totalPendingRewardOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalPendingReward;\r\n        uint256[] memory stakedTokensOfOwner = stakedTokensOf(_owner);\r\n\r\n        for (uint256 i = 0; i < stakedTokensOfOwner.length; i++) {\r\n            totalPendingReward = totalPendingReward.add(\r\n                rewardOf(stakedTokensOfOwner[i])\r\n            );\r\n        }\r\n\r\n        return totalPendingReward;\r\n    }\r\n\r\n    function rewardOf(uint256 _tokenId) public view returns (uint256) {\r\n        if (\r\n            stakeMapping[_tokenId].stakeholder != address(0) &&\r\n            stakeMapping[_tokenId].stakeholder ==\r\n            IERC721(erc721Token).ownerOf(_tokenId) &&\r\n            stakeMapping[_tokenId].endStakeTimestamp != 0\r\n        ) {\r\n            // Initialize as the commitment daily reward rate\r\n            uint256 totalTokenAllocation = stakeMapping[_tokenId]\r\n                .dailyRewardRate;\r\n\r\n            // Determine timestamp for calculation in token reward\r\n            uint256 timestamp = block.timestamp;\r\n            if (timestamp > stakeMapping[_tokenId].endStakeTimestamp) {\r\n                // Set timestamp as end stake timestamp if exceeds end stake timestamp\r\n                timestamp = stakeMapping[_tokenId].endStakeTimestamp;\r\n            }\r\n\r\n            // Determine the delta between the defined timestamp and last claim timestamp\r\n            uint256 lastRewardDelta = uint256(timestamp).sub(\r\n                stakeMapping[_tokenId].lastRewardTimestamp\r\n            );\r\n\r\n            /* SHARE BASED CALCULATION \r\n            totalTokenAllocation = totalTokenAllocation\r\n                .mul(dailyRewardRate)\r\n                .div(FXP_BASE)\r\n                .div(totalStaked);\r\n            */\r\n\r\n            uint256 nextRewardPercentage = lastRewardDelta.mul(FXP_BASE).div(\r\n                REWARD_INTERVAL\r\n            );\r\n\r\n            totalTokenAllocation = totalTokenAllocation\r\n                .mul(nextRewardPercentage)\r\n                .div(FXP_BASE);\r\n\r\n            uint256 rewardMultiplierNumerator = stakeMapping[_tokenId]\r\n                .currentCommitment\r\n                .multiplierNumerator;\r\n\r\n            if (nftIdRewardMultiplier[_tokenId] != 0) {\r\n                rewardMultiplierNumerator = rewardMultiplierNumerator\r\n                    .add(nftIdRewardMultiplier[_tokenId])\r\n                    .sub(FXP_BASE);\r\n            }\r\n\r\n            totalTokenAllocation = totalTokenAllocation\r\n                .mul(rewardMultiplierNumerator)\r\n                .div(FXP_BASE);\r\n\r\n            return totalTokenAllocation;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function stakeholderInfo(address _stakeholder)\r\n        public\r\n        view\r\n        returns (Stake[] memory)\r\n    {\r\n        uint256[] memory _stakeholderTokens = stakedTokensOf(_stakeholder);\r\n        Stake[] memory result = new Stake[](uint256(_stakeholderTokens.length));\r\n\r\n        for (uint256 i = 0; i < _stakeholderTokens.length; i++) {\r\n            result[i] = stakeMapping[_stakeholderTokens[i]];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function stakedTokensOf(address _stakeholder)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return stakeholderTokens[_stakeholder];\r\n    }\r\n\r\n    function _stakeNFT(uint256 _tokenId, uint256 _seconds)\r\n        internal\r\n        isOwnerOfERC721Token(_tokenId)\r\n    {\r\n        if (stakeMapping[_tokenId].stakeholder == msg.sender) {\r\n            require(\r\n                block.timestamp >= stakeMapping[_tokenId].endStakeTimestamp,\r\n                \"One or more of the NFTs attempting to be staked is still being staked by the function caller.\"\r\n            );\r\n        }\r\n\r\n        if (stakeMapping[_tokenId].stakeholder != address(0)) {\r\n            _removeStakeholderToken(_tokenId);\r\n        }\r\n\r\n        uint256 endStakeTimestamp = block.timestamp +\r\n            stakingTimeCommitmentMapping[_seconds].time;\r\n\r\n        stakeMapping[_tokenId] = Stake(\r\n            _tokenId,\r\n            msg.sender,\r\n            block.timestamp,\r\n            endStakeTimestamp,\r\n            nftIdRewardMultiplier[_tokenId],\r\n            stakingTimeCommitmentMapping[_seconds],\r\n            dailyRewardRate\r\n        );\r\n\r\n        stakeholderTokens[msg.sender].push(_tokenId);\r\n        totalStaked = totalStaked.add(1);\r\n\r\n        emit StakeNFT(_tokenId, msg.sender);\r\n    }\r\n\r\n    function _unstakeNFT(uint256 _tokenId)\r\n        internal\r\n        isOwnerOfERC721Token(_tokenId)\r\n    {\r\n        _removeStakeholderToken(_tokenId);\r\n\r\n        stakeMapping[_tokenId] = Stake(\r\n            _tokenId,\r\n            address(0),\r\n            block.timestamp,\r\n            0,\r\n            nftIdRewardMultiplier[_tokenId],\r\n            Commitment(0, 0),\r\n            dailyRewardRate\r\n        );\r\n\r\n        emit UnstakeNFT(_tokenId, msg.sender);\r\n    }\r\n\r\n    function _removeStakeholderToken(uint256 _tokenId) internal {\r\n        if (stakeholderTokens[stakeMapping[_tokenId].stakeholder].length > 0) {\r\n            if (\r\n                stakeholderTokens[stakeMapping[_tokenId].stakeholder].length !=\r\n                1\r\n            ) {\r\n                for (\r\n                    uint256 i = 0;\r\n                    i <\r\n                    stakeholderTokens[stakeMapping[_tokenId].stakeholder]\r\n                        .length;\r\n                    i++\r\n                ) {\r\n                    if (\r\n                        stakeholderTokens[stakeMapping[_tokenId].stakeholder][\r\n                            i\r\n                        ] == _tokenId\r\n                    ) {\r\n                        stakeholderTokens[stakeMapping[_tokenId].stakeholder][\r\n                            i\r\n                        ] = stakeholderTokens[\r\n                            stakeMapping[_tokenId].stakeholder\r\n                        ][\r\n                            stakeholderTokens[\r\n                                stakeMapping[_tokenId].stakeholder\r\n                            ].length - 1\r\n                        ];\r\n                        stakeholderTokens[stakeMapping[_tokenId].stakeholder]\r\n                            .pop();\r\n                    }\r\n                }\r\n            } else {\r\n                stakeholderTokens[stakeMapping[_tokenId].stakeholder].pop();\r\n            }\r\n            totalStaked = totalStaked.sub(1);\r\n        }\r\n    }\r\n\r\n    function claimRewards(uint256[] calldata _tokenIds, uint256 _seconds)\r\n        external\r\n        maxNFTsNotExceeded(_tokenIds)\r\n        stakeCommitmentAllowed(_seconds)\r\n    {\r\n        uint256 totalRewards;\r\n        uint256[] memory _stakeholderTokens = _tokenIds;\r\n\r\n        for (uint256 i = 0; i < _stakeholderTokens.length; i++) {\r\n            require(\r\n                stakeMapping[_stakeholderTokens[i]].stakeholder == msg.sender &&\r\n                    IERC721(erc721Token).ownerOf(_stakeholderTokens[i]) ==\r\n                    stakeMapping[_stakeholderTokens[i]].stakeholder,\r\n                \"Functional caller is not the stakeholder or owner of 1 or more NFTs.\"\r\n            );\r\n\r\n            uint256 _rewardOf = rewardOf(_stakeholderTokens[i]);\r\n\r\n            if (\r\n                stakeMapping[_stakeholderTokens[i]].endStakeTimestamp != 0 &&\r\n                (block.timestamp >\r\n                    stakeMapping[_stakeholderTokens[i]].endStakeTimestamp ||\r\n                    rewardsUnlocked == true)\r\n            ) {\r\n                totalRewards = totalRewards.add(_rewardOf);\r\n\r\n                stakeMapping[_stakeholderTokens[i]].endStakeTimestamp = uint256(\r\n                    block.timestamp\r\n                ).add(stakingTimeCommitmentMapping[_seconds].time);\r\n\r\n                stakeMapping[_stakeholderTokens[i]]\r\n                    .currentCommitment = stakingTimeCommitmentMapping[_seconds];\r\n\r\n                stakeMapping[_stakeholderTokens[i]].lastRewardTimestamp = block\r\n                    .timestamp;\r\n\r\n                stakeMapping[_stakeholderTokens[i]]\r\n                    .dailyRewardRate = dailyRewardRate;\r\n            }\r\n        }\r\n\r\n        stakeholderTotalRewards[msg.sender] = stakeholderTotalRewards[\r\n            msg.sender\r\n        ].add(totalRewards);\r\n\r\n        IERC20(rewardToken).transfer(msg.sender, totalRewards);\r\n\r\n        emit ClaimRewards(msg.sender, totalRewards);\r\n    }\r\n\r\n    function stakeNFT(uint256[] calldata _tokenIds, uint256 _seconds)\r\n        external\r\n        maxNFTsNotExceeded(_tokenIds)\r\n        stakeCommitmentAllowed(_seconds)\r\n    {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(\r\n                stakeMapping[_tokenIds[i]].stakeholder != msg.sender,\r\n                \"ERC721 Token already staked by this address.\"\r\n            );\r\n\r\n            _stakeNFT(_tokenIds[i], _seconds);\r\n        }\r\n    }\r\n\r\n    function unstakeNFT(uint256[] calldata _tokenIds)\r\n        external\r\n        maxNFTsNotExceeded(_tokenIds)\r\n    {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(\r\n                stakeMapping[_tokenIds[i]].stakeholder == msg.sender,\r\n                \"ERC721 Token is not being staked or is staked by another address.\"\r\n            );\r\n\r\n            _unstakeNFT(_tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721TokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"StakeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"UnstakeNFT\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claimableRewardsOfStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFTsPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"pendingRewardsOfStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"removeStakingTimeCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setDailyRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721Token\",\"type\":\"address\"}],\"name\":\"setERC721TokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPerTransation\",\"type\":\"uint256\"}],\"name\":\"setMaxNFTsPerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierDenominator\",\"type\":\"uint256\"}],\"name\":\"setMultiplierOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRewardsUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierDenominator\",\"type\":\"uint256\"}],\"name\":\"setStakingTimeCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endStakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTokenRewardMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierNumerator\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixNFTStaking.Commitment\",\"name\":\"currentCommitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakedTokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeholderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endStakeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTokenRewardMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierNumerator\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixNFTStaking.Commitment\",\"name\":\"currentCommitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardRate\",\"type\":\"uint256\"}],\"internalType\":\"struct PhenixNFTStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholderTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholderTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTimeCommitmentMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierNumerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalClaimableRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalPendingRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETHAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PhenixNFTStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c997a37f5a1dca62b58eeb01041f056942966b3000000000000000000000000752892900c197b9c5b10b93e6f19b0365c296f18", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://efc610801a80a54211fc82438a13fd5b384118d64f440b19dfa38924a1c3e0e2"}