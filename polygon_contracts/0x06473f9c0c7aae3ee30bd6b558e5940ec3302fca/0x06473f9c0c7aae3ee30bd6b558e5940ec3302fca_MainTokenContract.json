{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @author  Shubhankar Banerjee\\r\\n * @title   Context\\r\\n * @dev     This contract provides the address and data of the sender of the transaction\\r\\n */\\r\\n\\r\\nabstract contract Context {\\r\\n    /**\\r\\n     * @notice  Returns the address of the message sender\\r\\n     */\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the data of the message sender in bytes\\r\\n     */\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @author  Shubhankar Banerjee\\r\\n * @title   Interface ERC20\\r\\n * @dev     Contains the necessary functions and events which are specified according to ERC20 token standard.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\"},\"MainTokenContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\r\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\r\\nimport {Pausable} from \\\"./Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author  Shubhankar Banerjee\\r\\n * @title   Main Token Contract\\r\\n * @dev     This contract defines the token and its activities\\r\\n * @dev     This contract contains all the function present in the interface and is following the token standard\\r\\n */\\r\\n\\r\\ncontract MainTokenContract is IERC20, Ownable, Pausable {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    event Burn(address indexed burnerAddress, uint256 indexed amount);\\r\\n\\r\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\r\\n        _name = tokenName;\\r\\n        _symbol = tokenSymbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function returns the name of the token\\r\\n     * @return  string\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     This function returns the symbol of the token\\r\\n     * @return  string\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function returns the decimal places the token holds\\r\\n     * @return  uint8\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function returns the current total supply of the token along with its decimal places\\r\\n     * @return  uint256\\r\\n     */\\r\\n    function totalSupply() public view virtual returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function returns the balance of a particular accunt address\\r\\n     * @param   account  .address type parameter, takes in the address of the account holder\\r\\n     * @return  uint256  .the token amount that the account holds\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice     This function is used to transfer tokens from the one account address to another\\r\\n     * @dev     The token transfer occurs from the function caller\\u0027s address to the receiver address provided in the function parameter\\r\\n     * @param   to  .address type paremeter, takes the address of the token receiver\\r\\n     * @param   amount  .uint256 type parameter, takes the amount of tokens to be transferred\\r\\n     * @return  bool  .\\r\\n     */\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external virtual returns (bool) {\\r\\n        if (beforeTransfer()) {\\r\\n            revert(\\\"Transfer Paused by owner\\\");\\r\\n        }\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function returns the allowance amount of tokens which is set for an owner and spener\\r\\n     * @param   owner  .address type parameter, takes the address of the actual address of the owner of tokens\\r\\n     * @param   spender  .address type parameter, takes the address that is approved by the owner to spend tokens\\r\\n     * @return  uint256  .amount of tokens approved by the owner for a particular spender\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  This function approves an token allowance amount for an address\\r\\n     * @param   spender  address type parameter, takes the address of the spender allowance account\\r\\n     * @param   amount   uint256 type parameter, takes the amount of tokens that is set to be allowed as allowance\\r\\n     * @return  bool\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        if (beforeTransfer()) {\\r\\n            revert(\\\"Transfer Paused by owner\\\");\\r\\n        }\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     This function is used to transfer allowance tokens from the spender address to the receiver address\\r\\n     * @param   from  address type parameter, takes the address of the actual token holder the address that allowed the allowance\\r\\n     * @param   to  address type parameter, takes the address of the receiver of the tokens\\r\\n     * @param   amount  uint256 type parameter, takes the amount of tokens to be transferred\\r\\n     * @return  bool\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external virtual returns (bool) {\\r\\n        if (beforeTransfer()) {\\r\\n            revert(\\\"Transfer Paused by owner\\\");\\r\\n        }\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     This function is used to increase the allowance amount for a spender\\r\\n     * @param   spender  address type parameter, takes the address of the spender who is allowed by the token owner\\r\\n     * @param   addedAmount  uint256 type parameter, takes in the increased amount\\r\\n     * @return  bool\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedAmount\\r\\n    ) external virtual returns (bool) {\\r\\n        if (beforeTransfer()) {\\r\\n            revert(\\\"Transfer Paused by owner\\\");\\r\\n        }\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     This function is used to decrease the allowance amount of a spender\\r\\n     * @param   spender  .address type parameter, takes the address of the spender who is allowed by the token owner\\r\\n     * @param   requestedDecrease  uint256 type parameter, takes in the amount which is to be subtracted fron the current amount\\r\\n     * @return  bool  .\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 requestedDecrease\\r\\n    ) external virtual returns (bool) {\\r\\n        if (beforeTransfer()) {\\r\\n            revert(\\\"Transfer Paused by owner\\\");\\r\\n        }\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance \\u003c requestedDecrease) {\\r\\n            revert(\\\"current allowance is less than requested decrease\\\");\\r\\n        }\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - requestedDecrease);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice     This function is used to burn tokens from the total supply\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     * @dev     The amount to be burned cannot be greater than the total supply of the token\\r\\n     * @param   amount  .uint256 type parameter, takes in the amount of tokens to be burned\\r\\n     * @return  bool\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual onlyOwner returns (bool) {\\r\\n        require(amount \\u003c= _totalSupply, \\\"Burn amount greater than token count\\\");\\r\\n        _burn(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This function is used to mint new tokens in the network\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     * @dev     The minting amount cannot be 0\\r\\n     * @dev     The minting amount and the available total supply amount cannot exceed a certain fixed amount (i.e 100 Billion)\\r\\n     * @param   amount  .uint256 type parameter, takes in the amount to be minted\\r\\n     * @return  bool\\r\\n     */\\r\\n    function mint(uint256 amount) public virtual onlyOwner returns (bool) {\\r\\n        if (_msgSender() == address(0)) {\\r\\n            revert(\\\"Invalid address\\\");\\r\\n        }\\r\\n        uint256 minting_amount = amount * (10 ** 18);\\r\\n        if (minting_amount == 0) {\\r\\n            revert(\\\"Cannot mint 0 tokens\\\");\\r\\n        }\\r\\n        require(\\r\\n            _totalSupply + minting_amount \\u003c= 100000000000 * 10 ** 18,\\r\\n            \\\"Mint amount exceeds the maximum supply\\\"\\r\\n        );\\r\\n        _mint(_msgSender(), minting_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This function is used to start the ownership transfer process.\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     * @param   addr  .address type parameter, takes in the address of the new contract owner\\r\\n     * @return  bool\\r\\n     */\\r\\n    function StartTransferOwnership(\\r\\n        address addr\\r\\n    ) public virtual onlyOwner returns (bool) {\\r\\n        require(addr != address(0), \\\"Invalid address\\\");\\r\\n        startTransferOwnership(addr);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This function is used to accept the transfer ownership of the contract.\\r\\n     * @dev     This function can only be called by the Authorized new owner.\\r\\n     * @dev     After the ownership is transferred, all the owners tokens are transferred to the new owner as well\\r\\n     * @return  bool  .\\r\\n     */\\r\\n    function AcceptOwnership() public virtual returns (bool) {\\r\\n        address owner = owner();\\r\\n        if (acceptOwnership()) {\\r\\n            _transfer(owner, _msgSender(), _balances[owner]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This is an internal function which is called during token transfer.\\r\\n     * @dev     This function validates the address provided to itself.\\r\\n     * @param   from  .address type parameter, takes in the address of the token sender\\r\\n     * @param   to  .address type parameter, takes in the address of the token receiver\\r\\n     * @param   amount  .uint256 type parameter, takes in the amount to be send\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 amount) internal {\\r\\n        if (from == address(0)) {\\r\\n            revert(\\\"Invalid Sender\\\");\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            revert(\\\"Invalid Receiver\\\");\\r\\n        }\\r\\n        _update(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This is an internal function which is used to update the token balances of the accounts among which the transfer is initiated.\\r\\n     * @dev     This function sends the tokens\\r\\n     * @param   from  .address type parameter, takes in the address of the account from which the tokens are to be subtracted.\\r\\n     * @param   to  .address type parameter, takes in the address of the account to which the tokens are to be added.\\r\\n     * @param   amount  .uint256 type parameter, takes the amount of tokens to be transferred\\r\\n     */\\r\\n    function _update(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        // checking if sender\\u0027s address is 0x000000000000....\\r\\n        if (from == address(0)) {\\r\\n            _totalSupply += amount;\\r\\n        } else {\\r\\n            uint256 fromBalance = _balances[from];\\r\\n            if (fromBalance \\u003c amount) {\\r\\n                revert(\\\"Insufficient balance\\\");\\r\\n            }\\r\\n            if (amount == 0) {\\r\\n                revert(\\\"Cannot send 0 tokens\\\");\\r\\n            }\\r\\n            unchecked {\\r\\n                _balances[from] = fromBalance - amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            _totalSupply -= amount;\\r\\n        } else {\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This is an internal function which is called during token minting\\r\\n     * @dev     This function calls the internal update function\\r\\n     * @param   account  .address type parameter, takes in the account address on which new tokens are to be minted.\\r\\n     * @param   value  .uint256 type parameter, takes in the amount of the tokens to be minted.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        _update(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This is an internal function which is called during token burn\\r\\n     * @dev     This function validates the account and calles the internal update function\\r\\n     * @param   account  .address type parameter, takes in the contract owners account address\\r\\n     * @param   value  .uint256 type parameter, takes the amount of tokens to be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        if (account == address(0)) {\\r\\n            revert(\\\"Invalid Sender\\\");\\r\\n        }\\r\\n        _update(account, address(0), value);\\r\\n        emit Burn(account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This is an internal function which is used to approve allowance tokens for an address\\r\\n     * @dev     This function calls another internal function\\r\\n     * @param   owner  .address type parameter, takes in the address of the actual token owner\\r\\n     * @param   spender  .address type parameter, takes in the address of the spender allowed by the owner\\r\\n     * @param   amount  .uint256 type parameter, takes in the token amount\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _approve(owner, spender, amount, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This function approves allowance token for an address\\r\\n     * @param   owner  .address type parameter, takes in the address of the actual token owner\\r\\n     * @param   spender  .address type parameter, takes in the address of the spender allowed by the owner\\r\\n     * @param   amount  .uint256 type parameter, takes in the amount that is to be allowed for spending\\r\\n     * @param   accessEvent  .boolean type parameter\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bool accessEvent\\r\\n    ) internal virtual {\\r\\n        if (owner == address(0)) {\\r\\n            revert(\\\"Invalid Owner\\\");\\r\\n        }\\r\\n        if (spender == address(0)) {\\r\\n            revert(\\\"Invalid Spender\\\");\\r\\n        }\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        if (accessEvent) {\\r\\n            emit Approval(owner, spender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  This internal function is used to spend allowance approved for an address\\r\\n     * @dev     This function is called during transferFrom where allowance tokens are transferred\\r\\n     * @param   owner  .address type parameter, takes in the address of the actual token owner\\r\\n     * @param   spender  .address type parameter, takes in the address of the spender allowed by the owner\\r\\n     * @param   amount  .uint256 type parameter, takes in the amount that is to be allowed for spending\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            if (currentAllowance \\u003c amount) {\\r\\n                revert(\\\"Insufficient allowance\\\");\\r\\n            }\\r\\n            unchecked {\\r\\n                // unchecked is used to remove the compiler checks thus reducing gas fees\\r\\n                _approve(owner, spender, currentAllowance - amount, false);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\nimport {Context} from \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title   Ownable Contract\\r\\n * @author  Shubhankar Banerjee\\r\\n * @notice  This is an ownable contract which sets an owner to the contract and transfers or removes it as per the owner\\u0027s requirements. \\r\\n * @dev     The transfer ownership is a two-way process, where the transfer starts and then the newOwner has to accept the ownership transfer.\\r\\n */\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed peviousOwner, address indexed newOwner);\\r\\n    event OwnershipTransferred(address indexed previousOwner,\\r\\n                                address indexed CurrentOwner);\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0),msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Modifier to check the message sender is owner of the contract or not\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require((_owner == msg.sender || _owner == address(0)), \\r\\n                \\\"Not the Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the current owner of the contract\\r\\n     */\\r\\n    function owner() public view virtual returns(address){\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the pending owner address\\r\\n     */\\r\\n    function PendingOwner() public view  virtual  returns(address){\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Called when the ownership is to be transferred. Initiates the transfer of ownership\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     * @param   newOwnerAddress  .\\r\\n     */\\r\\n    function startTransferOwnership(address newOwnerAddress) internal virtual onlyOwner {\\r\\n        address oldOwner = _msgSender();\\r\\n        _pendingOwner = newOwnerAddress;\\r\\n        emit OwnershipTransferStarted(oldOwner,newOwnerAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice  Called to accept ownership of the contract by the new owner, only the pending owner can accept ownership\\r\\n     * @dev     After ownership is accepted, ownership and token transfer is completed\\r\\n     */\\r\\n    function acceptOwnership() internal virtual returns(bool){\\r\\n        address acceptingOwner = _msgSender();\\r\\n        if(acceptingOwner != PendingOwner()){\\r\\n            revert(\\\"Unauthorized account for Ownership\\\");\\r\\n        }\\r\\n        return _transferOwnership(acceptingOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Internal Function called after accepting the ownership transfer, transfers the ownersip\\r\\n     * @param   addr  .\\r\\n     */\\r\\n    function _transferOwnership(address addr) internal  virtual \\r\\n        returns(bool){\\r\\n        delete _pendingOwner; \\r\\n        address previousOwner = owner();   \\r\\n        _owner = addr;\\r\\n        emit OwnershipTransferred(previousOwner,addr);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Called when ownership is to be revoked or removed. \\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner returns(bool){\\r\\n        _owner = address(0);\\r\\n        emit OwnershipTransferred(_msgSender(), address(0));\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author  Shubhankar\\r\\n * @title   Pausable Contract\\r\\n * @dev     Contract defining the pause and unpause functionality.\\r\\n * @dev     This contract inherits the Ownable contract for ownership access control\\r\\n * @dev     The contract pauses the token transfer for desired amount of time and can resume it wheneevr needed\\r\\n */\\r\\n\\r\\nabstract contract Pausable is Ownable {\\r\\n    bool private _paused;\\r\\n    event Paused(\\r\\n        address indexed currentOwner,\\r\\n        uint indexed timeStamp,\\r\\n        bool indexed paused\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the state of the _paused variable, telling if the user paused the actions of the contract or not\\r\\n     */\\r\\n    function beforeTransfer() internal view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pauses the token activity, changes the state of the paused variable\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     */\\r\\n    function Pause() public virtual onlyOwner returns (bool) {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender(), block.timestamp, true);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Remove the pause from the token activity\\r\\n     * @dev     This function can only be called by the owner of the contract\\r\\n     */\\r\\n    function unPause() public virtual onlyOwner returns (bool) {\\r\\n        _paused = false;\\r\\n        emit Paused(_msgSender(), block.timestamp, false);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"peviousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"CurrentOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AcceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"StartTransferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MainTokenContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000094d61696e5f54657374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024d54000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fbb6015f7f4e329c99a981602abb9740f4b004e508211cd3b679df8a6af6b1aa"}