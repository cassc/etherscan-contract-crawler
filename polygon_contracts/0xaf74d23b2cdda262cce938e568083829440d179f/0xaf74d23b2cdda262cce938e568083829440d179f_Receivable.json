{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/branded-token/Receivable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../trex/token/Token2.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n// import { UD60x18, ud } from \\\"@prb/math/src/UD60x18.sol\\\";\\n\\n/**\\n */\\ncontract Receivable is Context, Token2 /*, AccessControl*/ {\\n\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    enum Status{\\n        CREATED,\\n        FUNDING,\\n        YIELDING,\\n        CLOSED\\n    }\\n\\n    Status _status = Status.CREATED;\\n    \\n    // uint256 maxTotalDeposits;\\n    // uint256 minimumTotalDeposits;\\n    uint256 _minDeposit;\\n    uint64 _expectedYield;\\n\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n\\n    address[] private _holders;\\n    mapping(address => uint256) private _lastInvestmentTimestamp;\\n    mapping(address => uint256) private _totalInvested;\\n    mapping(address => uint256) private _totalPlatformFees;\\n\\n    uint256 private _poolStart;\\n    uint256 private _poolEnd;\\n    uint256 private _start;\\n    uint256 private _end;\\n    // uint256 private immutable _duration;\\n\\n    // uint256 private _totalAssets;\\n\\n    struct FundConfig {\\n        uint256 start;\\n        uint256 end;\\n        uint256 poolEnd;\\n        uint256 minDeposit;\\n        uint256 minAssets;\\n        uint256 maxAssets;\\n    }\\n\\n    uint256 private _maxAssets;\\n    uint256 private _minAssets;\\n\\n\\n    uint256 public PLATFORM_FEE = 100000;\\n\\n    error ClosedForDeposits();\\n\\n    error CannotTransferBeforePoolEnd();\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    error ERC4626LessThanMinDeposit(address receiver, uint256 assets, uint256 min);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor (\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        IERC20 asset_,\\n        uint64 yield_,\\n        FundConfig memory fundConfig,\\n        address _identityRegistry,\\n        address _compliance,\\n        address _onchainId\\n    ) \\n    Token2 (\\n        _identityRegistry,\\n        _compliance,\\n        _name,\\n        _symbol,\\n        _decimals,\\n        _onchainId\\n    )\\n    {\\n        _asset = asset_;\\n        _start = fundConfig.start;\\n        _end = fundConfig.end;\\n        _expectedYield = yield_;\\n        _minAssets = fundConfig.minAssets;\\n        _maxAssets = fundConfig.maxAssets;\\n        _minDeposit = fundConfig.minDeposit;\\n        _poolEnd = fundConfig.poolEnd;\\n    }\\n\\n    function startPool() public virtual {\\n        onlyAgent();\\n        _status = Status.FUNDING;\\n        _poolStart = block.timestamp;\\n    }\\n\\n    function endPool() public virtual {\\n        onlyAgent();\\n        _status = Status.CLOSED;\\n        _poolEnd = block.timestamp;\\n    }\\n\\n    //     uint256 private _poolStart;\\n    // uint256 private _poolEnd;\\n    // uint256 private _start;\\n    // uint256 private _end;\\n\\n    // function status() public view virtual returns (uint8) {\\n    //     return _status;\\n    // }\\n\\n    function status() public view virtual returns (Status) {\\n        return _status;\\n    }\\n\\n     function setStatus(Status status_) public virtual /*onlyRole(DEPOSIT_OPERATOR_ROLE)*/ {\\n        onlyAgent();\\n        _status = status_;\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        // return _underlyingDecimals + _decimalsOffset();\\n        return 6;\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    // /**\\n    //  * @dev Getter for the start timestamp.\\n    //  */\\n    // function start() public view virtual returns (uint256) {\\n    //     return _start;\\n    // }\\n\\n    // /**\\n    //  * @dev Getter for the vesting duration.\\n    //  */\\n    // function duration() public view virtual returns (uint256) {\\n    //     return _duration;\\n    // }\\n\\n        /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function yield() public view virtual returns (uint64) {\\n        return _expectedYield;\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        // return _totalAssets;\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        if (status() != Status.FUNDING) revert CannotTransferBeforePoolEnd();\\n        return Token2.transfer(to, amount);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        if (status() != Status.FUNDING) revert CannotTransferBeforePoolEnd();\\n        return Token2.transferFrom(from, to, amount);\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares, address receiver) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, _totalInvested[receiver], true, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return _maxAssets;\\n    }\\n\\n    function minDeposit() public view virtual returns (uint256) {\\n        return _minDeposit;\\n    }\\n\\n    function maxAssets() public view virtual returns (uint256) {\\n        // return type(uint256).max;\\n        return _maxAssets;\\n    }\\n\\n    function minAssets() public view virtual returns (uint256) {\\n        // return type(uint256).max;\\n        return _minAssets;\\n    }\\n\\n    function increaseMaxAssets(uint256 increase) public virtual /*onlyRole(DEPOSIT_OPERATOR_ROLE)*/ returns (uint256) {\\n        onlyAgent();\\n        _maxAssets += increase;\\n        return _maxAssets;\\n    }\\n\\n    // /** @dev See {IERC4626-maxMint}. */\\n    // function maxMint(address) public view virtual returns (uint256) {\\n    //     // return type(uint256).max;\\n    //     return _maxMint;\\n    // }\\n\\n    // function increaseMaxMint(uint256 increase) public virtual returns (uint256) {\\n    //     // return type(uint256).max;\\n    //     _maxMint += increase;\\n    //     return _maxMint;\\n    // }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner, address receiver) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), _totalInvested[receiver], false, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n\\n    // /** @dev See {IERC4626-previewMint}. */\\n    // function previewMint(uint256 shares) public view virtual returns (uint256) {\\n    //     return _convertToAssets(shares, Math.Rounding.Up);\\n    // }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    // function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n    //     return _convertToShares(assets, Math.Rounding.Up);\\n    // }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares, address receiver) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, _totalInvested[receiver], true, Math.Rounding.Down);\\n    }\\n\\n    //var seconds = new Date().getTime() / 1000;\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual /*onlyRole(DEPOSIT_OPERATOR_ROLE)*/ returns (uint256) {\\n        if (_status != Status.FUNDING) revert ClosedForDeposits();\\n        uint256 minDeposit_ = minDeposit();\\n        if (assets < minDeposit_) revert ERC4626LessThanMinDeposit(receiver, assets, minDeposit_);\\n        uint256 maxAssets_ = maxAssets();\\n        if (totalAssets() + assets > maxAssets_) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets_);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        _holders.push(receiver);\\n\\n        _lastInvestmentTimestamp[receiver] = block.timestamp;\\n        _totalInvested[receiver] += assets;\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    // function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n    //     uint256 maxShares = maxMint(receiver);\\n    //     if (shares > maxShares) {\\n    //         revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n    //     }\\n\\n    //     uint256 assets = previewMint(shares);\\n    //     _deposit(_msgSender(), receiver, assets, shares);\\n\\n    //     return assets;\\n    // }\\n\\n    // /** @dev See {IERC4626-withdraw}. */\\n    // function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n    //     uint256 maxAssets = maxWithdraw(owner);\\n    //     if (assets > maxAssets) {\\n    //         revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n    //     }\\n\\n    //     uint256 shares = previewWithdraw(assets);\\n    //     _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n    //     return shares;\\n    // }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function _redeem(uint256 shares, address receiver, address owner) internal virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares, receiver);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    function redeemAll() public virtual /*onlyRole(WITHDRAW_OPERATOR_ROLE)*/ {\\n        onlyAgent();\\n        for (uint i=0; i < _holders.length; i++) {\\n            address holder = _holders[i];\\n            uint256 holderBalance = balanceOf(holder);\\n            // console.log(holder, holderBalance);\\n            if (holderBalance > 0) {\\n                _redeem(holderBalance, holder, holder);\\n            }\\n        }\\n    }\\n\\n    function cancel(address holder) public virtual /*onlyRole(WITHDRAW_OPERATOR_ROLE)*/ {\\n        onlyAgent();\\n        uint256 holderBalance = balanceOf(holder);\\n        uint256 totalInvested = _totalInvested[holder];\\n        // console.log(holder, holderBalance, totalInvested, totalAssets());\\n        if (holderBalance > 0) {\\n            _withdraw(_msgSender(), holder, holder, totalInvested, holderBalance);\\n        }\\n    }\\n\\n    function withdrawAssets(address destination, uint256 amount) public virtual /*onlyRole(WITHDRAW_OPERATOR_ROLE)*/ {\\n        onlyAgent();\\n        SafeERC20.safeTransfer(_asset, destination, amount);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets - (assets * PLATFORM_FEE / 100_000_000);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, uint256 totalInvested, bool netValue, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets(), totalSupply(), rounding);\\n        \\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        // console.log(\\\"_deposit\\\", address(_asset), caller, shares);\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        // ERC20Burnable(address(_asset)).burn(assets);\\n\\n        _checkAndMint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // if (caller != owner) {\\n        //     _spendAllowance(owner, caller, shares);\\n        // }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        // console.log(IERC20(_asset).balanceOf(address(this)),assets);\\n        IERC20(_asset).transfer(receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n//     ### `getInvestmentInfo`\\n\\n// - nome do investimento `name`\\n// - status `status`\\n// - valor de BRLX captado `totalDeposits` _totalAssets\\n// - valor m\u00e1ximo de BRLX que pode ser captado `maximumTotalDeposits`\\n// - valor m\u00ednimo de BRLX a ser captado `minimumTotalDeposits`\\n\\n// - percentual captado `percetageOfMaximumDeposits`\\n\\n// - valor total de shares mintadas `totalMintedShares`\\n// - valor m\u00ednimo de aplica\u00e7\u00e3o `minimumDeposit`\\n// - rendimento (21% aa) `apy`\\n\\n// - data de in\u00edcio da capta\u00e7\u00e3o start `poolStartAt`\\n// - data do fim da capta\u00e7\u00e3o `poolFinishAt`\\n// - capta\u00e7\u00e3o termina em X dias `poolDaysRemaining`\\n// - data do fim de investimento `investmentFinishAt`\\n// - n\u00famero de investidores `totalInvestors`\\n\\n    function getInvestmentInfo() public view virtual returns (\\n        Status status_,\\n        uint256 totalAssets_,\\n        uint256 maxAssets_,\\n        uint256 minAssets_,\\n        // uint256 percentageOfMinDeposits,\\n        uint256 totalShares_,\\n        uint256 minDeposit_,\\n        uint64 expectedApy_,\\n        uint256 poolStartAt_,\\n        uint256 poolEndAt_,\\n        uint256 poolDaysRemaining_,\\n        uint256 investmentFinishAt_,\\n        uint256 totalInvestors_\\n    ) {\\n            status_ = status();\\n            totalAssets_ = totalAssets();\\n            maxAssets_ = _maxAssets;\\n            minAssets_ = _minAssets;\\n            totalShares_ = totalSupply();\\n            minDeposit_ = _minDeposit;\\n            expectedApy_ = _expectedYield;\\n            poolStartAt_ = _poolStart;\\n            poolEndAt_ = _poolEnd;\\n            poolDaysRemaining_ = daysDiff(block.timestamp, _poolEnd);\\n            investmentFinishAt_ = _end;\\n            totalInvestors_ = _holders.length;\\n    }\\n\\n\\n    function daysDiff(uint256 startDate, uint256 endDate) internal view virtual returns (uint256 _daysDiff) {\\n        _daysDiff = (endDate - startDate) / 60 / 60 / 24;\\n    }\\n\\n    function getInterestInfo(uint256 assets) internal view virtual returns (\\n        uint256 projectedWithdraw,\\n        uint256 projectedInterest,\\n        uint256 projectedYield\\n    ) {\\n        uint256 depositValue = previewDeposit(assets);\\n        uint256 duration = daysDiff(_poolEnd, _end);\\n        projectedInterest = duration * _expectedYield / 365;\\n        projectedYield = depositValue * projectedInterest / 100_000_000;\\n        projectedWithdraw = depositValue + projectedYield;\\n    }\\n\\n    function getReceiverInfo(address receiver) public view virtual returns (\\n        uint256 lastDepositDate,\\n        uint256 totalDeposits,\\n        uint256 totalShares,\\n        uint256 projectedYield,\\n        uint256 projectedInterest\\n    ) {\\n        lastDepositDate = _lastInvestmentTimestamp[receiver];\\n        totalDeposits = _totalInvested[receiver]; \\n        totalShares = balanceOf(receiver);\\n        (projectedYield, projectedInterest, ) = getInterestInfo(totalDeposits);\\n    }\\n\\n    function simulateYield(uint256 assets) public view virtual returns (\\n        uint256 deadline,\\n        uint256 expectedYield,\\n        uint256 projectedWithdraw,\\n        uint256 projectedYield,\\n        uint256 minimumDeposit\\n    ) {\\n        deadline = _end;\\n        expectedYield = _expectedYield;\\n        (projectedWithdraw, , projectedYield) = getInterestInfo(assets);\\n        minimumDeposit = _minDeposit;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/onchain-id/interface/IClaimIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n\\n    /**\\n     * @dev returns the address that signed the given data\\n     * @param sig the signature of the data\\n     * @param dataHash the data that was signed\\n     * returns the address that signed dataHash and created the signature sig\\n     */\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/onchain-id/interface/IERC734.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\"\r\n    },\r\n    \"contracts/onchain-id/interface/IERC735.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\"\r\n    },\r\n    \"contracts/onchain-id/interface/IIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {}\\n\"\r\n    },\r\n    \"contracts/trex/compliance/modular/IModularCompliance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\ninterface IModularCompliance {\\n\\n    /// events\\n\\n    /**\\n     *  @dev Event emitted for each executed interaction with a module contract.\\n     *  For gas efficiency, only the interaction calldata selector (first 4\\n     *  bytes) is included in the event. For interactions without calldata or\\n     *  whose calldata is shorter than 4 bytes, the selector will be `0`.\\n     */\\n    event ModuleInteraction(address indexed target, bytes4 selector);\\n\\n    /**\\n     *  this event is emitted when a token has been bound to the compliance contract\\n     *  the event is emitted by the bindToken function\\n     *  `_token` is the address of the token to bind\\n     */\\n    event TokenBound(address _token);\\n\\n    /**\\n     *  this event is emitted when a token has been unbound from the compliance contract\\n     *  the event is emitted by the unbindToken function\\n     *  `_token` is the address of the token to unbind\\n     */\\n    event TokenUnbound(address _token);\\n\\n    /**\\n     *  this event is emitted when a module has been added to the list of modules bound to the compliance contract\\n     *  the event is emitted by the addModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleAdded(address indexed _module);\\n\\n    /**\\n     *  this event is emitted when a module has been removed from the list of modules bound to the compliance contract\\n     *  the event is emitted by the removeModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleRemoved(address indexed _module);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev binds a token to the compliance contract\\n     *  @param _token address of the token to bind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenBound event\\n     */\\n    function bindToken(address _token) external;\\n\\n    /**\\n     *  @dev unbinds a token from the compliance contract\\n     *  @param _token address of the token to unbind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenUnbound event\\n     */\\n    function unbindToken(address _token) external;\\n\\n    /**\\n     *  @dev adds a module to the list of compliance modules\\n     *  @param _module address of the module to add\\n     *  there cannot be more than 25 modules bound to the modular compliance for gas cost reasons\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleAdded event\\n     */\\n    function addModule(address _module) external;\\n\\n    /**\\n     *  @dev removes a module from the list of compliance modules\\n     *  @param _module address of the module to remove\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleRemoved event\\n     */\\n    function removeModule(address _module) external;\\n\\n    /**\\n     *  @dev calls any function on bound modules\\n     *  can be called only on bound modules\\n     *  @param callData the bytecode for interaction with the module, abi encoded\\n     *  @param _module The address of the module\\n     *  This function can be called only by the modular compliance owner\\n     *  emits a `ModuleInteraction` event\\n     */\\n    function callModuleFunction(bytes calldata callData, address _module) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are transferred\\n     *  from one wallet to another\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function calls moduleTransferAction() on each module bound to the compliance contract\\n     */\\n    function transferred(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are created on a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the minting\\n     *  This function calls moduleMintAction() on each module bound to the compliance contract\\n     */\\n    function created(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are destroyed from a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address on which tokens are burnt\\n     *  @param _amount The amount of tokens involved in the burn\\n     *  This function calls moduleBurnAction() on each module bound to the compliance contract\\n     */\\n    function destroyed(address _from, uint256 _amount) external;\\n\\n    /**\\n     *  @dev checks that the transfer is compliant.\\n     *  default compliance always returns true\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\n     *  counters, emit events, ...\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function will call moduleCheck() on every module bound to the compliance\\n     *  If each of the module checks return TRUE, this function will return TRUE as well\\n     *  returns FALSE otherwise\\n     */\\n    function canTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (bool);\\n\\n    /**\\n     *  @dev getter for the modules bound to the compliance contract\\n     *  returns address array of module contracts bound to the compliance\\n     */\\n    function getModules() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev getter for the address of the token bound\\n     *  returns the address of the token\\n     */\\n    function getTokenBound() external view returns (address);\\n\\n    /**\\n     *  @dev checks if a module is bound to the compliance contract\\n     *  returns true if module is bound, false otherwise\\n     */\\n    function isModuleBound(address _module) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/registry/interface/IClaimTopicsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\ninterface IClaimTopicsRegistry {\\n    /**\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\n     *  the event is emitted by the 'addClaimTopic' function\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\n     */\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n\\n    /**\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\n     *  the event is emitted by the 'removeClaimTopic' function\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\n     */\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    /**\\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\\n     * Only owner can call.\\n     * emits `ClaimTopicAdded` event\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\n     * @param _claimTopic The claim topic index\\n     */\\n    function addClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\\n     *  Only owner can call.\\n     *  emits `ClaimTopicRemoved` event\\n     *  @param _claimTopic The claim topic index\\n     */\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Get the trusted claim topics for the security token\\n     *  @return Array of trusted claim topics\\n     */\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/registry/interface/IIdentityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./ITrustedIssuersRegistry.sol\\\";\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\n\\nimport \\\"../../../onchain-id/interface/IClaimIssuer.sol\\\";\\nimport \\\"../../../onchain-id/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    /**\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\n     */\\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\\n\\n    /**\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\n     */\\n    event IdentityStorageSet(address indexed identityStorage);\\n\\n    /**\\n     *  this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\\n     */\\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  @dev Register an identity contract corresponding to a user address.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityRegistered` event\\n     */\\n    function registerIdentity(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the identity registry.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityRemoved` event\\n     */\\n    function deleteIdentity(address _userAddress) external;\\n\\n    /**\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\n     *  emits `IdentityStorageSet` event\\n     */\\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\\n\\n    /**\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\n     *  emits `ClaimTopicsRegistrySet` event\\n     */\\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\\n\\n    /**\\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\\n     *  emits `TrustedIssuersRegistrySet` event\\n     */\\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryUpdated` event\\n     */\\n    function updateCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityUpdated` event\\n     */\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @dev function allowing to register identities in batch\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  Requires that none of the users has an identity contract already registered.\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses of the users\\n     *  @param _identities The addresses of the corresponding identity contracts\\n     *  @param _countries The countries of the corresponding investors\\n     *  emits _userAddresses.length `IdentityRegistered` events\\n     */\\n    function batchRegisterIdentity(\\n        address[] calldata _userAddresses,\\n        IIdentity[] calldata _identities,\\n        uint16[] calldata _countries\\n    ) external;\\n\\n    /**\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\n     *  in the Identity Registry.\\n     *  @param _userAddress The address of the user to be checked.\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\n     */\\n    function contains(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev This functions checks whether an identity contract\\n     *  corresponding to the provided user address has the required claims or not based\\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\\n     *  @param _userAddress The address of the user to be verified.\\n     *  @return 'True' if the address is verified, 'false' if not.\\n     */\\n    function isVerified(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function identity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function investorCountry(address _userAddress) external view returns (uint16);\\n\\n    /**\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\n     */\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\n\\n    /**\\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\\n     */\\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\\n\\n    /**\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\n     */\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/registry/interface/IIdentityRegistryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../../onchain-id/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistryStorage {\\n\\n    /// events\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the storage contract.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the storage contract.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\n     *  the event is emitted by the 'addIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry added\\n     */\\n    event IdentityRegistryBound(address indexed identityRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry removed\\n     */\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityStored` event\\n     */\\n    function addIdentityToStorage(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the storage.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityUnstored` event\\n     */\\n    function removeIdentityFromStorage(address _userAddress) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryModified` event\\n     */\\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityModified` event\\n     */\\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\n     *  cannot bind more than 300 IR to 1 IRS\\n     *  @param _identityRegistry The identity registry address to add.\\n     */\\n    function bindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\n     *  @param _identityRegistry The identity registry address to remove.\\n     */\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @dev Returns the identity registries linked to the storage contract\\n     */\\n    function linkedIdentityRegistries() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedIdentity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/registry/interface/ITrustedIssuersRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../../onchain-id/interface/IClaimIssuer.sol\\\";\\n\\ninterface ITrustedIssuersRegistry {\\n    /**\\n     *  this event is emitted when a trusted issuer is added in the registry.\\n     *  the event is emitted by the addTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  this event is emitted when a trusted issuer is removed from the registry.\\n     *  the event is emitted by the removeTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     */\\n    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\\n\\n    /**\\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\\n     *  the event is emitted by the updateIssuerClaimTopics function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\n     *  Requires that the claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  Requires that there is no more than 50 Trusted issuers\\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerAdded` event\\n     */\\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\\n     *  Requires that the claim issuer contract to be registered first\\n     *  @param _trustedIssuer the claim issuer to remove.\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerRemoved` event\\n     */\\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\\n\\n    /**\\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\n     *  Requires that the provided claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  @param _trustedIssuer the claim issuer to update.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `ClaimTopicsUpdated` event\\n     */\\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Function for getting all the trusted claim issuers stored.\\n     *  @return array of all claim issuers registered.\\n     */\\n    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Function for getting all the trusted issuer allowed for a given claim topic.\\n     *  @param claimTopic the claim topic to get the trusted issuers for.\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\n     */\\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Checks if the ClaimIssuer contract is trusted\\n     *  @param _issuer the address of the ClaimIssuer contract\\n     *  @return true if the issuer is trusted, false otherwise.\\n     */\\n    function isTrustedIssuer(address _issuer) external view returns (bool);\\n\\n    /**\\n     *  @dev Function for getting all the claim topic of trusted claim issuer\\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\\n     *  @param _trustedIssuer the trusted issuer concerned.\\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\\n     */\\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns (uint256[] memory);\\n\\n    /**\\n     *  @dev Function for checking if the trusted claim issuer is allowed\\n     *  to emit a certain claim topic\\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\n     *  @return true if the issuer is trusted for this claim topic.\\n     */\\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/roles/AgentRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AgentRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    Roles.Role private _agents;\\n\\n    event AgentAdded(address indexed _agent);\\n    event AgentRemoved(address indexed _agent);\\n\\n    error CallerNotAgent();\\n    error ZeroAddress();\\n\\n    // modifier onlyAgent() {\\n    //     // require(isAgent(msg.sender), \\\"AgentRole: caller does not have the Agent role\\\");\\n    //     if (!isAgent(msg.sender)) revert CallerNotAgent();\\n    //     _;\\n    // }\\n\\n    function onlyAgent() internal {\\n        // require(isAgent(msg.sender), \\\"AgentRole: caller does not have the Agent role\\\");\\n        if (!isAgent(msg.sender)) revert CallerNotAgent();\\n        // _;\\n    }\\n\\n    function addAgent(address _agent) public onlyOwner {\\n        // require(_agent != address(0), \\\"invalid argument - zero address\\\");\\n        if (_agent == address(0)) revert ZeroAddress();\\n        _agents.add(_agent);\\n        emit AgentAdded(_agent);\\n    }\\n\\n    function removeAgent(address _agent) public onlyOwner {\\n        // require(_agent != address(0), \\\"invalid argument - zero address\\\");\\n        if (_agent == address(0)) revert ZeroAddress();\\n        _agents.remove(_agent);\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    function isAgent(address _agent) public view returns (bool) {\\n        return _agents.has(_agent);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/trex/roles/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/trex/token/IToken2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\nimport \\\"../compliance/modular/IModularCompliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev interface\\ninterface IToken2 is IERC20 {\\n\\n    /// Errors\\n\\n    error TransferNotPossible();\\n    error IdentityNotVerified();\\n    error NotCompliant();\\n    error InsufficientBalanceFrozen();\\n    error InsufficientBalance();\\n    error WalletFronzen();\\n    error RecoveryNotPossible();\\n\\n    /// events\\n\\n    /**\\n     *  this event is emitted when the token information is updated.\\n     *  the event is emitted by the token init function and by the setTokenInformation function\\n     *  `_newName` is the name of the token\\n     *  `_newSymbol` is the symbol of the token\\n     *  `_newDecimals` is the decimals of the token\\n     *  `_newVersion` is the version of the token, current version is 3.0\\n     *  `_newOnchainID` is the address of the onchainID of the token\\n     */\\n    event UpdatedTokenInformation(string indexed _newName, string indexed _newSymbol, uint8 _newDecimals, string\\n    _newVersion, address indexed _newOnchainID);\\n\\n    /**\\n     *  this event is emitted when the IdentityRegistry has been set for the token\\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\\n     *  `_identityRegistry` is the address of the Identity Registry of the token\\n     */\\n    event IdentityRegistryAdded(address indexed _identityRegistry);\\n\\n    /**\\n     *  this event is emitted when the Compliance has been set for the token\\n     *  the event is emitted by the token constructor and by the setCompliance function\\n     *  `_compliance` is the address of the Compliance contract of the token\\n     */\\n    event ComplianceAdded(address indexed _compliance);\\n\\n    /**\\n     *  this event is emitted when an investor successfully recovers his tokens\\n     *  the event is emitted by the recoveryAddress function\\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\\n     */\\n    event RecoverySuccess(address indexed _lostWallet, address indexed _newWallet, address indexed _investorOnchainID);\\n\\n    /**\\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_isFrozen` is the freezing status of the wallet\\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\\n     */\\n    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\\n\\n    /**\\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_amount` is the amount of tokens that are frozen\\n     */\\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\\n\\n    /**\\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_amount` is the amount of tokens that are unfrozen\\n     */\\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\\n\\n    // /**\\n    //  *  this event is emitted when the token is paused\\n    //  *  the event is emitted by the pause function\\n    //  *  `_userAddress` is the address of the wallet that called the pause function\\n    //  */\\n    // event Paused(address _userAddress);\\n\\n    // /**\\n    //  *  this event is emitted when the token is unpaused\\n    //  *  the event is emitted by the unpause function\\n    //  *  `_userAddress` is the address of the wallet that called the unpause function\\n    //  */\\n    // event Unpaused(address _userAddress);\\n\\n    /// functions\\n\\n    // /**\\n    //  *  @dev sets the token name\\n    //  *  @param _name the name of token to set\\n    //  *  Only the owner of the token smart contract can call this function\\n    //  *  emits a `UpdatedTokenInformation` event\\n    //  */\\n    // function setName(string calldata _name) external;\\n\\n    // /**\\n    //  *  @dev sets the token symbol\\n    //  *  @param _symbol the token symbol to set\\n    //  *  Only the owner of the token smart contract can call this function\\n    //  *  emits a `UpdatedTokenInformation` event\\n    //  */\\n    // function setSymbol(string calldata _symbol) external;\\n\\n    /**\\n     *  @dev sets the onchain ID of the token\\n     *  @param _onchainID the address of the onchain ID to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits a `UpdatedTokenInformation` event\\n     */\\n    function setOnchainID(address _onchainID) external;\\n\\n    // /**\\n    //  *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits a `Paused` event\\n    //  */\\n    // function pause() external;\\n\\n    // /**\\n    //  *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\\n    //  *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits an `Unpaused` event\\n    //  */\\n    // function unpause() external;\\n\\n    /**\\n     *  @dev sets an address frozen status for this token.\\n     *  @param _userAddress The address for which to update frozen status\\n     *  @param _freeze Frozen status of the address\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits an `AddressFrozen` event\\n     */\\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\\n\\n    /**\\n     *  @dev freezes token amount specified for given address.\\n     *  @param _userAddress The address for which to update frozen tokens\\n     *  @param _amount Amount of Tokens to be frozen\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensFrozen` event\\n     */\\n    function freezePartialTokens(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev unfreezes token amount specified for given address\\n     *  @param _userAddress The address for which to update frozen tokens\\n     *  @param _amount Amount of Tokens to be unfrozen\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event\\n     */\\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev sets the Identity Registry for the token\\n     *  @param _identityRegistry the address of the Identity Registry to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits an `IdentityRegistryAdded` event\\n     */\\n    function setIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @dev sets the compliance contract of the token\\n     *  @param _compliance the address of the compliance contract to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  calls bindToken on the compliance contract\\n     *  emits a `ComplianceAdded` event\\n     */\\n    function setCompliance(address _compliance) external;\\n\\n    /**\\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\\n     *  but has a total balance higher or equal to the `amount`\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\\n     *  account is 100% composed of frozen tokens post-transfer.\\n     *  Require that the `to` address is a verified address,\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The number of tokens to transfer\\n     *  @return `true` if successful and revert if unsuccessful\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\\n     *  emits a `Transfer` event\\n     */\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    /**\\n     *  @dev mint tokens on a wallet\\n     *  Improved version of default mint method. Tokens can be minted\\n     *  to an address if only it is a verified address as per the security token.\\n     *  @param _to Address to mint the tokens to.\\n     *  @param _amount Amount of tokens to mint.\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `Transfer` event\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev burn tokens on a wallet\\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\\n     *  but has a total balance higher or equal to the `value` amount\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\\n     *  is 100% composed of frozen tokens post-transaction.\\n     *  @param _userAddress Address to burn the tokens from.\\n     *  @param _amount Amount of tokens to burn.\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\\n     *  emits a `Transfer` event\\n     */\\n    function burn(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev recovery function used to force transfer tokens from a\\n     *  lost wallet to a new wallet for an investor.\\n     *  @param _lostWallet the wallet that the investor lost\\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\\n     *  emits a `Transfer` event if the recovery process is successful\\n     *  emits a `RecoverySuccess` event if the recovery process is successful\\n     *  emits a `RecoveryFails` event if the recovery process fails\\n     */\\n    function recoveryAddress(\\n        address _lostWallet,\\n        address _newWallet,\\n        address _investorOnchainID\\n    ) external returns (bool);\\n\\n    // /**\\n    //  *  @dev function allowing to issue transfers in batch\\n    //  *  Require that the msg.sender and `to` addresses are not frozen.\\n    //  *  Require that the total value should not exceed available balance.\\n    //  *  Require that the `to` addresses are all verified addresses,\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _toList The addresses of the receivers\\n    //  *  @param _amounts The number of tokens to transfer to the corresponding receiver\\n    //  *  emits _toList.length `Transfer` events\\n    //  */\\n    // function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\\n\\n    // /**\\n    //  *  @dev function allowing to issue forced transfers in batch\\n    //  *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\\n    //  *  Require that the `_toList` addresses are all verified addresses\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _fromList The addresses of the senders\\n    //  *  @param _toList The addresses of the receivers\\n    //  *  @param _amounts The number of tokens to transfer to the corresponding receiver\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\\n    //  *  emits _fromList.length `Transfer` events\\n    //  */\\n    // function batchForcedTransfer(\\n    //     address[] calldata _fromList,\\n    //     address[] calldata _toList,\\n    //     uint256[] calldata _amounts\\n    // ) external;\\n\\n    // /**\\n    //  *  @dev function allowing to mint tokens in batch\\n    //  *  Require that the `_toList` addresses are all verified addresses\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _toList The addresses of the receivers\\n    //  *  @param _amounts The number of tokens to mint to the corresponding receiver\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits _toList.length `Transfer` events\\n    //  */\\n    // function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\\n\\n    // /**\\n    //  *  @dev function allowing to burn tokens in batch\\n    //  *  Require that the `_userAddresses` addresses are all verified addresses\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _userAddresses The addresses of the wallets concerned by the burn\\n    //  *  @param _amounts The number of tokens to burn from the corresponding wallets\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits _userAddresses.length `Transfer` events\\n    //  */\\n    // function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    // /**\\n    //  *  @dev function allowing to set frozen addresses in batch\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _userAddresses The addresses for which to update frozen status\\n    //  *  @param _freeze Frozen status of the corresponding address\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits _userAddresses.length `AddressFrozen` events\\n    //  */\\n    // function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\\n\\n    // /**\\n    //  *  @dev function allowing to freeze tokens partially in batch\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _userAddresses The addresses on which tokens need to be frozen\\n    //  *  @param _amounts the amount of tokens to freeze on the corresponding address\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits _userAddresses.length `TokensFrozen` events\\n    //  */\\n    // function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    // /**\\n    //  *  @dev function allowing to unfreeze tokens partially in batch\\n    //  *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n    //  *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n    //  *  @param _userAddresses The addresses on which tokens need to be unfrozen\\n    //  *  @param _amounts the amount of tokens to unfreeze on the corresponding address\\n    //  *  This function can only be called by a wallet set as agent of the token\\n    //  *  emits _userAddresses.length `TokensUnfrozen` events\\n    //  */\\n    // function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    // /**\\n    //  * @dev Returns the number of decimals used to get its user representation.\\n    //  * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    //  * be displayed to a user as `5,05` (`505 / 1 ** 2`).\\n    //  *\\n    //  * Tokens usually opt for a value of 18, imitating the relationship between\\n    //  * Ether and Wei.\\n    //  *\\n    //  * NOTE: This information is only used for _display_ purposes: it in\\n    //  * no way affects any of the arithmetic of the contract, including\\n    //  * balanceOf() and transfer().\\n    //  */\\n    // function decimals() external view returns (uint8);\\n\\n    // /**\\n    //  * @dev Returns the name of the token.\\n    //  */\\n    // function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the address of the onchainID of the token.\\n     * the onchainID of the token gives all the information available\\n     * about the token and is managed by the token issuer or his agent.\\n     */\\n    function onchainID() external view returns (address);\\n\\n    // /**\\n    //  * @dev Returns the symbol of the token, usually a shorter version of the\\n    //  * name.\\n    //  */\\n    // function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the TREX version of the token.\\n     * current version is 3.0.0\\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     *  @dev Returns the Identity Registry linked to the token\\n     */\\n    function identityRegistry() external view returns (IIdentityRegistry);\\n\\n    /**\\n     *  @dev Returns the Compliance contract linked to the token\\n     */\\n    function compliance() external view returns (IModularCompliance);\\n\\n    // /**\\n    //  * @dev Returns true if the contract is paused, and false otherwise.\\n    //  */\\n    // function paused() external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the freezing status of a wallet\\n     *  if isFrozen returns `true` the wallet is frozen\\n     *  if isFrozen returns `false` the wallet is not frozen\\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\\n     *  a partial freeze or the whole token could be blocked by pause\\n     *  @param _userAddress the address of the wallet on which isFrozen is called\\n     */\\n    function isFrozen(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\\n     */\\n    function getFrozenTokens(address _userAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/trex/token/Token2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IToken2.sol\\\";\\nimport \\\"../../onchain-id/interface/IIdentity.sol\\\";\\nimport \\\"./TokenStorage2.sol\\\";\\nimport \\\"../roles/AgentRole.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Token2 is IToken2, ERC20, Pausable, AgentRole, TokenStorage2 {\\n\\n    /// modifiers\\n\\n    // /// @dev Modifier to make a function callable only when the contract is not paused.\\n    // modifier whenNotPaused() {\\n    //     require(!_tokenPaused, \\\"Pausable: paused\\\");\\n    //     _;\\n    // }\\n\\n    // /// @dev Modifier to make a function callable only when the contract is paused.\\n    // modifier whenPaused() {\\n    //     require(_tokenPaused, \\\"Pausable: not paused\\\");\\n    //     _;\\n    // }\\n\\n    /**\\n     *  @dev the constructor initiates the token contract\\n     *  msg.sender is set automatically as the owner of the smart contract\\n     *  @param _identityRegistry the address of the Identity registry linked to the token\\n     *  @param _compliance the address of the compliance contract linked to the token\\n     *  @param _name the name of the token\\n     *  @param _symbol the symbol of the token\\n     *  @param _onchainID the address of the onchainID of the token\\n     *  emits an `UpdatedTokenInformation` event\\n     *  emits an `IdentityRegistryAdded` event\\n     *  emits a `ComplianceAdded` event\\n     */\\n    constructor (\\n        address _identityRegistry,\\n        address _compliance,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        // _onchainID can be zero address if not set, can be set later by owner\\n        address _onchainID\\n    ) ERC20 (_name, _symbol){\\n        // that require is protecting legacy versions of TokenProxy contracts\\n        // as there was a bug with the initializer modifier on these proxies\\n        // that check is preventing attackers to call the init functions on those\\n        // legacy contracts.\\n        // require(owner() == address(0), \\\"already initialized\\\");\\n        // require(\\n        //     _identityRegistry != address(0)\\n        //     && _compliance != address(0)\\n        // , \\\"invalid argument - zero address\\\");\\n        // require(\\n        //     keccak256(abi.encode(_name)) != keccak256(abi.encode(\\\"\\\"))\\n        //     && keccak256(abi.encode(_symbol)) != keccak256(abi.encode(\\\"\\\"))\\n        // , \\\"invalid argument - empty string\\\");\\n        // require(0 <= _decimals && _decimals <= 18, \\\"decimals between 0 and 18\\\");\\n        // __Ownable_init();\\n        // _tokenName = _name;\\n        // _tokenSymbol = _symbol;\\n        // _tokenDecimals = _decimals;\\n        _tokenOnchainID = _onchainID;\\n        // _tokenPaused = true;\\n        // _pause();\\n        setIdentityRegistry(_identityRegistry);\\n        setCompliance(_compliance);\\n        emit UpdatedTokenInformation(name(), symbol(), _decimals, _TOKEN_VERSION, _tokenOnchainID);\\n    }\\n\\n    // /**\\n    //  *  @dev See {IERC20-approve}.\\n    //  */\\n    // function approve(address _spender, uint256 _amount) external virtual override returns (bool) {\\n    //     _approve(msg.sender, _spender, _amount);\\n    //     return true;\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-increaseAllowance}.\\n    //  */\\n    // function increaseAllowance(address _spender, uint256 _addedValue) external virtual returns (bool) {\\n    //     _approve(msg.sender, _spender, _allowances[msg.sender][_spender] + (_addedValue));\\n    //     return true;\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-decreaseAllowance}.\\n    //  */\\n    // function decreaseAllowance(address _spender, uint256 _subtractedValue) external virtual returns (bool) {\\n    //     _approve(msg.sender, _spender, _allowances[msg.sender][_spender] - _subtractedValue);\\n    //     return true;\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-setName}.\\n    //  */\\n    // function setName(string calldata _name) external override onlyOwner {\\n    //     require(keccak256(abi.encode(_name)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n    //     _tokenName = _name;\\n    //     emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-setSymbol}.\\n    //  */\\n    // function setSymbol(string calldata _symbol) external override onlyOwner {\\n    //     require(keccak256(abi.encode(_symbol)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n    //     _tokenSymbol = _symbol;\\n    //     emit UpdatedTokenInformation(_tokenName, _tokenSymbol, _tokenDecimals, _TOKEN_VERSION, _tokenOnchainID);\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-setOnchainID}.\\n     *  if _onchainID is set at zero address it means no ONCHAINID is bound to this token\\n     */\\n    function setOnchainID(address _onchainID) external override onlyOwner {\\n        _tokenOnchainID = _onchainID;\\n        emit UpdatedTokenInformation(name(), symbol(), decimals(), _TOKEN_VERSION, _tokenOnchainID);\\n    }\\n\\n    // /**\\n    //  *  @dev See {IToken-pause}.\\n    //  */\\n    // function pause() external override onlyAgent whenNotPaused {\\n    //     _tokenPaused = true;\\n    //     emit Paused(msg.sender);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-unpause}.\\n    //  */\\n    // function unpause() external override onlyAgent whenPaused {\\n    //     _tokenPaused = false;\\n    //     emit Unpaused(msg.sender);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchTransfer}.\\n    //  */\\n    // function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external override {\\n    //     for (uint256 i = 0; i < _toList.length; i++) {\\n    //         transfer(_toList[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    /**\\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\\n     *  Require that the from and to addresses are not frozen.\\n     *  Require that the value should not exceed available balance .\\n     *  Require that the to address is a verified address\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The number of tokens to transfer\\n     *  @return `true` if successful and revert if unsuccessful\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) public virtual override(ERC20, IERC20) whenNotPaused returns (bool) {\\n        // require(!_frozen[_to] && !_frozen[msg.sender], \\\"wallet is frozen\\\");\\n        if (!(!_frozen[_to] && !_frozen[msg.sender])) revert WalletFronzen();\\n        // require(_amount <= balanceOf(msg.sender) - (_frozenTokens[msg.sender]), \\\"Insufficient Balance\\\");\\n        if (!(_amount <= balanceOf(msg.sender) - (_frozenTokens[msg.sender]))) revert InsufficientBalanceFrozen();\\n        if (checkCanTransfer(_from, _to, _amount)) {\\n            ERC20.transferFrom(_from, _to, _amount);\\n            // _approve(_from, msg.sender, _allowances[_from][msg.sender] - (_amount));\\n            // _transfer(_from, _to, _amount);\\n            _tokenCompliance.transferred(_from, _to, _amount);\\n            return true;\\n        }\\n\\n        revert TransferNotPossible();//(\\\"Transfer not possible\\\");\\n    }\\n\\n    function checkCanTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\\n        return _tokenIdentityRegistry.isVerified(_to) && _tokenCompliance.canTransfer(_from, _to, _amount);\\n    }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchForcedTransfer}.\\n    //  */\\n    // function batchForcedTransfer(\\n    //     address[] calldata _fromList,\\n    //     address[] calldata _toList,\\n    //     uint256[] calldata _amounts\\n    // ) external override {\\n    //     for (uint256 i = 0; i < _fromList.length; i++) {\\n    //         forcedTransfer(_fromList[i], _toList[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchMint}.\\n    //  */\\n    // function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external override {\\n    //     for (uint256 i = 0; i < _toList.length; i++) {\\n    //         mint(_toList[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchBurn}.\\n    //  */\\n    // function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\\n    //     for (uint256 i = 0; i < _userAddresses.length; i++) {\\n    //         burn(_userAddresses[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchSetAddressFrozen}.\\n    //  */\\n    // function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external override {\\n    //     for (uint256 i = 0; i < _userAddresses.length; i++) {\\n    //         setAddressFrozen(_userAddresses[i], _freeze[i]);\\n    //     }\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchFreezePartialTokens}.\\n    //  */\\n    // function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\\n    //     for (uint256 i = 0; i < _userAddresses.length; i++) {\\n    //         freezePartialTokens(_userAddresses[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-batchUnfreezePartialTokens}.\\n    //  */\\n    // function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external override {\\n    //     for (uint256 i = 0; i < _userAddresses.length; i++) {\\n    //         unfreezePartialTokens(_userAddresses[i], _amounts[i]);\\n    //     }\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-recoveryAddress}.\\n     */\\n    function recoveryAddress(\\n        address _lostWallet,\\n        address _newWallet,\\n        address _investorOnchainID\\n    ) external override returns (bool) {\\n        onlyAgent();\\n        // require(balanceOf(_lostWallet) != 0, \\\"no tokens to recover\\\");\\n        if (!(balanceOf(_lostWallet) != 0)) revert InsufficientBalance();\\n        IIdentity _onchainID = IIdentity(_investorOnchainID);\\n        bytes32 _key = keccak256(abi.encode(_newWallet));\\n        if (_onchainID.keyHasPurpose(_key, 1)) {\\n            uint256 investorTokens = balanceOf(_lostWallet);\\n            uint256 frozenTokens = _frozenTokens[_lostWallet];\\n            _tokenIdentityRegistry.registerIdentity(_newWallet, _onchainID, _tokenIdentityRegistry.investorCountry\\n                (_lostWallet));\\n            forcedTransfer(_lostWallet, _newWallet, investorTokens);\\n            if (frozenTokens > 0) {\\n                freezePartialTokens(_newWallet, frozenTokens);\\n            }\\n            if (_frozen[_lostWallet] == true) {\\n                setAddressFrozen(_newWallet, true);\\n            }\\n            _tokenIdentityRegistry.deleteIdentity(_lostWallet);\\n            emit RecoverySuccess(_lostWallet, _newWallet, _investorOnchainID);\\n            return true;\\n        }\\n        //revert(\\\"Recovery not possible\\\");\\n        revert RecoveryNotPossible();\\n    }\\n\\n    // /**\\n    //  *  @dev See {IERC20-totalSupply}.\\n    //  */\\n    // function totalSupply() external view virtual override returns (uint256) {\\n    //     return _totalSupply;\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IERC20-allowance}.\\n    //  */\\n    // function allowance(address _owner, address _spender) external view virtual override returns (uint256) {\\n    //     return _allowances[_owner][_spender];\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-identityRegistry}.\\n     */\\n    function identityRegistry() external view override returns (IIdentityRegistry) {\\n        return _tokenIdentityRegistry;\\n    }\\n\\n    /**\\n     *  @dev See {IToken-compliance}.\\n     */\\n    function compliance() external view override returns (IModularCompliance) {\\n        return _tokenCompliance;\\n    }\\n\\n    // /**\\n    //  *  @dev See {IToken-paused}.\\n    //  */\\n    // function paused() external view override returns (bool) {\\n    //     return _tokenPaused;\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-isFrozen}.\\n     */\\n    function isFrozen(address _userAddress) external view override returns (bool) {\\n        return _frozen[_userAddress];\\n    }\\n\\n    /**\\n     *  @dev See {IToken-getFrozenTokens}.\\n     */\\n    function getFrozenTokens(address _userAddress) external view override returns (uint256) {\\n        return _frozenTokens[_userAddress];\\n    }\\n\\n    // /**\\n    //  *  @dev See {IToken-decimals}.\\n    //  */\\n    // function decimals() external view virtual override returns (uint8) {\\n    //     return _tokenDecimals;\\n    // }\\n\\n    // /**\\n    //  *  @dev See {IToken-name}.\\n    //  */\\n    // function name() external view virtual override returns (string memory) {\\n    //     return _tokenName;\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-onchainID}.\\n     */\\n    function onchainID() external view override returns (address) {\\n        return _tokenOnchainID;\\n    }\\n\\n    // /**\\n    //  *  @dev See {IToken-symbol}.\\n    //  */\\n    // function symbol() external view virtual override returns (string memory) {\\n    //     return _tokenSymbol;\\n    // }\\n\\n    /**\\n     *  @dev See {IToken-version}.\\n     */\\n    function version() external pure override returns (string memory) {\\n        return _TOKEN_VERSION;\\n    }\\n\\n    /**\\n     *  @notice ERC-20 overridden function that include logic to check for trade validity.\\n     *  Require that the msg.sender and to addresses are not frozen.\\n     *  Require that the value should not exceed available balance .\\n     *  Require that the to address is a verified address\\n     *  @param _to The address of the receiver\\n     *  @param _amount The number of tokens to transfer\\n     *  @return `true` if successful and revert if unsuccessful\\n     */\\n    function transfer(address _to, uint256 _amount) public virtual override (ERC20, IERC20) whenNotPaused returns (bool) {\\n        // console.log(\\\"TRANSFER\\\", _to, _amount);\\n        // require(!_frozen[_to] && !_frozen[msg.sender], \\\"wallet is frozen\\\");\\n        if (!(!_frozen[_to] && !_frozen[msg.sender])) revert WalletFronzen();\\n        // require(_amount <= balanceOf(msg.sender) - (_frozenTokens[msg.sender]), \\\"Insufficient Balance\\\");\\n        if (!(_amount <= balanceOf(msg.sender) - (_frozenTokens[msg.sender]))) revert InsufficientBalanceFrozen();\\n        // if (_tokenIdentityRegistry.isVerified(_to) && _tokenCompliance.canTransfer(msg.sender, _to, _amount)) {\\n        if (checkCanTransfer(msg.sender, _to, _amount)) {\\n            _transfer(msg.sender, _to, _amount);\\n            _tokenCompliance.transferred(msg.sender, _to, _amount);\\n            return true;\\n        }\\n        revert TransferNotPossible();//(\\\"Transfer not possible\\\");\\n    }\\n\\n    /**\\n     *  @dev See {IToken-forcedTransfer}.\\n     */\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) public override returns (bool) {\\n        onlyAgent();\\n        // require(balanceOf(_from) >= _amount, \\\"sender balance too low\\\");\\n        if (!(balanceOf(_from) >= _amount)) revert InsufficientBalance();\\n        uint256 freeBalance = balanceOf(_from) - (_frozenTokens[_from]);\\n        if (_amount > freeBalance) {\\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\\n            _frozenTokens[_from] = _frozenTokens[_from] - (tokensToUnfreeze);\\n            emit TokensUnfrozen(_from, tokensToUnfreeze);\\n        }\\n        if (_tokenIdentityRegistry.isVerified(_to)) {\\n            _transfer(_from, _to, _amount);\\n            _tokenCompliance.transferred(_from, _to, _amount);\\n            return true;\\n        }\\n        revert TransferNotPossible();//(\\\"Transfer not possible\\\");\\n    }\\n\\n    function _checkAndMint(address _to, uint256 _amount) internal {\\n        // require(_tokenIdentityRegistry.isVerified(_to), \\\"Identity is not verified.\\\");\\n        if (!_tokenIdentityRegistry.isVerified(_to)) revert IdentityNotVerified();\\n        // require(_tokenCompliance.canTransfer(address(0), _to, _amount), \\\"Compliance not followed\\\");\\n        if (!_tokenCompliance.canTransfer(address(0), _to, _amount)) revert NotCompliant();\\n        _mint(_to, _amount);\\n        _tokenCompliance.created(_to, _amount);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-mint}.\\n     */\\n    function mint(address _to, uint256 _amount) public override {\\n        onlyAgent();\\n        _checkAndMint(_to, _amount);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-burn}.\\n     */\\n    function burn(address _userAddress, uint256 _amount) public override {\\n        onlyAgent();\\n        // require(balanceOf(_userAddress) >= _amount, \\\"cannot burn more than balance\\\");\\n        if (!(balanceOf(_userAddress) >= _amount)) revert InsufficientBalance();\\n        uint256 freeBalance = balanceOf(_userAddress) - _frozenTokens[_userAddress];\\n        if (_amount > freeBalance) {\\n            uint256 tokensToUnfreeze = _amount - (freeBalance);\\n            _frozenTokens[_userAddress] = _frozenTokens[_userAddress] - (tokensToUnfreeze);\\n            emit TokensUnfrozen(_userAddress, tokensToUnfreeze);\\n        }\\n        _burn(_userAddress, _amount);\\n        _tokenCompliance.destroyed(_userAddress, _amount);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-setAddressFrozen}.\\n     */\\n    function setAddressFrozen(address _userAddress, bool _freeze) public override {\\n        onlyAgent();\\n        _frozen[_userAddress] = _freeze;\\n\\n        emit AddressFrozen(_userAddress, _freeze, msg.sender);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-freezePartialTokens}.\\n     */\\n    function freezePartialTokens(address _userAddress, uint256 _amount) public override {\\n        onlyAgent();\\n        uint256 balance = balanceOf(_userAddress);\\n        // require(balance >= _frozenTokens[_userAddress] + _amount, \\\"Amount exceeds available balance\\\");\\n        if (!(balance >= _frozenTokens[_userAddress] + _amount)) revert InsufficientBalanceFrozen();\\n        _frozenTokens[_userAddress] = _frozenTokens[_userAddress] + (_amount);\\n        emit TokensFrozen(_userAddress, _amount);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-unfreezePartialTokens}.\\n     */\\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) public override {\\n        onlyAgent();\\n        // require(_frozenTokens[_userAddress] >= _amount, \\\"Amount should be less than or equal to frozen tokens\\\");\\n        if (!(_frozenTokens[_userAddress] >= _amount)) revert InsufficientBalanceFrozen();\\n        _frozenTokens[_userAddress] = _frozenTokens[_userAddress] - (_amount);\\n        emit TokensUnfrozen(_userAddress, _amount);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-setIdentityRegistry}.\\n     */\\n    function setIdentityRegistry(address _identityRegistry) public override onlyOwner {\\n        _tokenIdentityRegistry = IIdentityRegistry(_identityRegistry);\\n        emit IdentityRegistryAdded(_identityRegistry);\\n    }\\n\\n    /**\\n     *  @dev See {IToken-setCompliance}.\\n     */\\n    function setCompliance(address _compliance) public override onlyOwner {\\n        if (address(_tokenCompliance) != address(0)) {\\n            _tokenCompliance.unbindToken(address(this));\\n        }\\n        _tokenCompliance = IModularCompliance(_compliance);\\n        _tokenCompliance.bindToken(address(this));\\n        emit ComplianceAdded(_compliance);\\n    }\\n\\n    // /**\\n    //  *  @dev See {IERC20-balanceOf}.\\n    //  */\\n    // function balanceOf(address _userAddress) public view virtual override returns (uint256) {\\n    //     return _balances[_userAddress];\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-_transfer}.\\n    //  */\\n    // function _transfer(\\n    //     address _from,\\n    //     address _to,\\n    //     uint256 _amount\\n    // ) internal virtual {\\n    //     require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    //     require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    //     _beforeTokenTransfer(_from, _to, _amount);\\n\\n    //     _balances[_from] = _balances[_from] - _amount;\\n    //     _balances[_to] = _balances[_to] + _amount;\\n    //     emit Transfer(_from, _to, _amount);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-_mint}.\\n    //  */\\n    // function _mint(address _userAddress, uint256 _amount) internal virtual {\\n    //     require(_userAddress != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    //     _beforeTokenTransfer(address(0), _userAddress, _amount);\\n\\n    //     _totalSupply = _totalSupply + _amount;\\n    //     _balances[_userAddress] = _balances[_userAddress] + _amount;\\n    //     emit Transfer(address(0), _userAddress, _amount);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-_burn}.\\n    //  */\\n    // function _burn(address _userAddress, uint256 _amount) internal virtual {\\n    //     require(_userAddress != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    //     _beforeTokenTransfer(_userAddress, address(0), _amount);\\n\\n    //     _balances[_userAddress] = _balances[_userAddress] - _amount;\\n    //     _totalSupply = _totalSupply - _amount;\\n    //     emit Transfer(_userAddress, address(0), _amount);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-_approve}.\\n    //  */\\n    // function _approve(\\n    //     address _owner,\\n    //     address _spender,\\n    //     uint256 _amount\\n    // ) internal virtual {\\n    //     require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    //     require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    //     _allowances[_owner][_spender] = _amount;\\n    //     emit Approval(_owner, _spender, _amount);\\n    // }\\n\\n    // /**\\n    //  *  @dev See {ERC20-_beforeTokenTransfer}.\\n    //  */\\n    // // solhint-disable-next-line no-empty-blocks\\n    // function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/trex/token/TokenStorage2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.19;\\nimport \\\"../compliance/modular/IModularCompliance.sol\\\";\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\n\\ncontract TokenStorage2 {\\n    /// @dev ERC20 basic variables\\n    // mapping(address => uint256) internal _balances;\\n    // mapping(address => mapping(address => uint256)) internal _allowances;\\n    // uint256 internal _totalSupply;\\n\\n    // /// @dev Token information\\n    // string internal _tokenName;\\n    // string internal _tokenSymbol;\\n    // uint8 internal _tokenDecimals;\\n    address internal _tokenOnchainID;\\n    string internal constant _TOKEN_VERSION = \\\"4.0.1\\\";\\n\\n    /// @dev Variables of freeze and pause functions\\n    mapping(address => bool) internal _frozen;\\n    mapping(address => uint256) internal _frozenTokens;\\n\\n    // bool internal _tokenPaused = false;\\n\\n    /// @dev Identity Registry contract used by the onchain validator system\\n    IIdentityRegistry internal _tokenIdentityRegistry;\\n\\n    /// @dev Compliance contract linked to the onchain validator system\\n    IModularCompliance internal _tokenCompliance;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"yield_\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"internalType\":\"struct Receivable.FundConfig\",\"name\":\"fundConfig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onchainId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotAgent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferBeforePoolEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClosedForDeposits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"ERC4626LessThanMinDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdentityNotVerified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalanceFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCompliant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecoveryNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletFronzen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isFrozen\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"ComplianceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"IdentityRegistryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"RecoverySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_newDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newVersion\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOnchainID\",\"type\":\"address\"}],\"name\":\"UpdatedTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compliance\",\"outputs\":[{\"internalType\":\"contract IModularCompliance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getFrozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestmentInfo\",\"outputs\":[{\"internalType\":\"enum Receivable.Status\",\"name\":\"status_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"expectedApy_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"poolStartAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolEndAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDaysRemaining_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentFinishAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestors_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getReceiverInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDepositDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectedInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityRegistry\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"increaseMaxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lostWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorOnchainID\",\"type\":\"address\"}],\"name\":\"recoveryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"setAddressFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"}],\"name\":\"setCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"}],\"name\":\"setIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"setOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Receivable.Status\",\"name\":\"status_\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"simulateYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectedWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum Receivable.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfreezePartialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Receivable", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000060000000000000000000000002c1fcb4074d143880cf9469babebdbea0da08d6c0000000000000000000000000000000000000000000000000000000001312d0000000000000000000000000000000000000000000000000000000000652ca73000000000000000000000000000000000000000000000000000000000657d12b000000000000000000000000000000000000000000000000000000000655585b000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000671fefe929b8e536c88df8067c8e7fbe21588b3b0000000000000000000000008fa0fdec6fea5c427959e5ac050352845e6710220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b52656365626976656c203200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045245433200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}