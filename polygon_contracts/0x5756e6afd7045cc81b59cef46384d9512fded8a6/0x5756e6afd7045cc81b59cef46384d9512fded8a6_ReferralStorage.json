{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Interfaces.sol\\\";\\n\\n/**\\n * @author Heisenberg\\n * @title Referral Storage\\n * @notice Contains referral Logic for option buying\\n */\\ncontract ReferralStorage is IReferralStorage, Ownable {\\n    mapping(address => uint8) public override referrerTier; // link between user <> tier\\n    mapping(uint8 => Tier) public tiers;\\n    mapping(uint8 => uint8) public override referrerTierStep;\\n    mapping(uint8 => uint32) public override referrerTierDiscount;\\n    mapping(string => address) public override codeOwner;\\n    mapping(address => string) public userCode;\\n    mapping(address => string) public override traderReferralCodes;\\n    mapping(address => ReferralData) public UserReferralData;\\n\\n    /**\\n     * @notice Sets the config for step reduction and discount on the basis of tier\\n     */\\n    function configure(\\n        uint8[3] calldata _referrerTierStep,\\n        uint32[3] calldata _referrerTierDiscount // Factor of 1e5\\n    ) external onlyOwner {\\n        for (uint8 i = 0; i < 3; i++) {\\n            referrerTierStep[i] = _referrerTierStep[i];\\n        }\\n\\n        for (uint8 i = 0; i < 3; i++) {\\n            referrerTierDiscount[i] = _referrerTierDiscount[i];\\n        }\\n    }\\n\\n    /************************************************\\n     *  ADMIN ONLY FUNCTIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets referrer's tier\\n     */\\n    function setReferrerTier(address _referrer, uint8 tier)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(tier < 3);\\n        referrerTier[_referrer] = tier;\\n        emit UpdateReferrerTier(_referrer, tier);\\n    }\\n\\n    /**\\n     * @notice Sets referral code for trader\\n     */\\n    function setTraderReferralCode(address user, string memory _code)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _setTraderReferralCode(user, _code);\\n    }\\n\\n    /************************************************\\n     *  EXTERNAL FUNCTIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets referral code for trader\\n     */\\n    function setTraderReferralCodeByUser(string memory _code) external {\\n        _setTraderReferralCode(msg.sender, _code);\\n    }\\n\\n    /**\\n     * @notice Creates a referral code for the user to share\\n     */\\n    function registerCode(string memory _code) external {\\n        require(bytes(_code).length != 0, \\\"ReferralStorage: invalid _code\\\");\\n        require(\\n            codeOwner[_code] == address(0),\\n            \\\"ReferralStorage: code already exists\\\"\\n        );\\n\\n        codeOwner[_code] = msg.sender;\\n        userCode[msg.sender] = _code;\\n        emit RegisterCode(msg.sender, _code);\\n    }\\n\\n    /**\\n     * @notice Creates a referral code for the user to share\\n     */\\n    function registerCodeForUser(string memory _code, address user)\\n        external\\n        onlyOwner\\n    {\\n        require(bytes(_code).length != 0, \\\"ReferralStorage: invalid _code\\\");\\n        require(\\n            codeOwner[_code] == address(0),\\n            \\\"ReferralStorage: code already exists\\\"\\n        );\\n\\n        codeOwner[_code] = user;\\n        userCode[user] = _code;\\n        emit RegisterCode(user, _code);\\n    }\\n\\n    /**\\n     * @notice Returns the referrer associated with a trader\\n     */\\n    function getTraderReferralInfo(address user)\\n        external\\n        view\\n        override\\n        returns (string memory code, address referrer)\\n    {\\n        code = traderReferralCodes[user];\\n        if (bytes(code).length != 0) {\\n            referrer = codeOwner[code];\\n        }\\n    }\\n\\n    /************************************************\\n     *  PRIVATE FUNCTIONS\\n     ***********************************************/\\n\\n    function _setTraderReferralCode(address user, string memory _code) private {\\n        traderReferralCodes[user] = _code;\\n        emit UpdateTraderReferralCode(user, _code);\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"ERC20.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\ninterface IKeeperPayment {\\n    function distributeForOpen(\\n        uint256 queueId,\\n        uint256 size,\\n        address keeper\\n    ) external;\\n\\n    function distributeForClose(\\n        uint256 optionId,\\n        uint256 size,\\n        address keeper\\n    ) external;\\n\\n    event DistriuteRewardForOpen(uint256 queueId, uint256 size, address keeper);\\n    event DistriuteRewardForClose(\\n        uint256 optionId,\\n        uint256 size,\\n        address keeper\\n    );\\n    event UpdateOpenRewardPercent(uint32 value);\\n    event UpdateReward(uint32 value);\\n}\\n\\ninterface IBufferRouter {\\n    struct QueuedTrade {\\n        uint256 queueId;\\n        uint256 userQueueIndex;\\n        address user;\\n        uint256 totalFee;\\n        uint256 period;\\n        bool isAbove;\\n        address targetContract;\\n        uint256 expectedStrike;\\n        uint256 slippage;\\n        bool allowPartialFill;\\n        uint256 queuedTime;\\n        bool isQueued;\\n        string referralCode;\\n        uint256 traderNFTId;\\n    }\\n    struct Trade {\\n        uint256 queueId;\\n        uint256 price;\\n    }\\n    struct OpenTradeParams {\\n        uint256 queueId;\\n        uint256 timestamp;\\n        uint256 price;\\n        bytes signature;\\n    }\\n    struct CloseTradeParams {\\n        uint256 optionId;\\n        address targetContract;\\n        uint256 expiryTimestamp;\\n        uint256 priceAtExpiry;\\n        bytes signature;\\n    }\\n    event OpenTrade(address indexed account, uint256 queueId, uint256 optionId);\\n    event CancelTrade(address indexed account, uint256 queueId, string reason);\\n    event FailUnlock(uint256 optionId, string reason);\\n    event FailResolve(uint256 queueId, string reason);\\n    event InitiateTrade(\\n        address indexed account,\\n        uint256 queueId,\\n        uint256 queuedTime\\n    );\\n}\\n\\ninterface IBufferBinaryOptions {\\n    event Create(\\n        address indexed account,\\n        uint256 indexed id,\\n        uint256 settlementFee,\\n        uint256 totalFee\\n    );\\n\\n    event Exercise(\\n        address indexed account,\\n        uint256 indexed id,\\n        uint256 profit,\\n        uint256 priceAtExpiration\\n    );\\n    event Expire(\\n        uint256 indexed id,\\n        uint256 premium,\\n        uint256 priceAtExpiration\\n    );\\n    event Pause(bool isPaused);\\n    event UpdateReferral(\\n        address user,\\n        address referrer,\\n        bool isReferralValid,\\n        uint256 totalFee,\\n        uint256 referrerFee,\\n        uint256 rebate,\\n        string referralCode\\n    );\\n\\n    function createFromRouter(\\n        OptionParams calldata optionParams,\\n        bool isReferralValid,\\n        uint256 queuedTime\\n    ) external returns (uint256 optionID);\\n\\n    function checkParams(OptionParams calldata optionParams)\\n        external\\n        returns (\\n            uint256 amount,\\n            uint256 revisedFee,\\n            bool isReferralValid\\n        );\\n\\n    function runInitialChecks(\\n        uint256 slippage,\\n        uint256 period,\\n        uint256 totalFee\\n    ) external view;\\n\\n    function isStrikeValid(\\n        uint256 slippage,\\n        uint256 strike,\\n        uint256 expectedStrike\\n    ) external view returns (bool);\\n\\n    function tokenX() external view returns (ERC20);\\n\\n    function pool() external view returns (ILiquidityPool);\\n\\n    function config() external view returns (IOptionsConfig);\\n\\n    function assetPair() external view returns (string calldata);\\n\\n    function fees(\\n        uint256 amount,\\n        address user,\\n        bool isAbove,\\n        string calldata referralCode,\\n        uint256 traderNFTId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 settlementFee,\\n            uint256 premium\\n        );\\n\\n    function getMaxUtilization() external view returns (uint256 maxAmount);\\n\\n    enum State {\\n        Inactive,\\n        Active,\\n        Exercised,\\n        Expired\\n    }\\n\\n    enum AssetCategory {\\n        Forex,\\n        Crypto,\\n        Commodities\\n    }\\n    struct OptionExpiryData {\\n        uint256 optionId;\\n        uint256 priceAtExpiration;\\n    }\\n\\n    struct Option {\\n        State state;\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n        uint256 premium;\\n        uint256 expiration;\\n        bool isAbove;\\n        uint256 totalFee;\\n        uint256 createdAt;\\n    }\\n    struct OptionParams {\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 period;\\n        bool isAbove;\\n        bool allowPartialFill;\\n        uint256 totalFee;\\n        address user;\\n        string referralCode;\\n        uint256 traderNFTId;\\n    }\\n\\n    function options(uint256 optionId)\\n        external\\n        view\\n        returns (\\n            State state,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 premium,\\n            uint256 expiration,\\n            bool isAbove,\\n            uint256 totalFee,\\n            uint256 createdAt\\n        );\\n\\n    function unlock(uint256 optionID, uint256 priceAtExpiration) external;\\n}\\n\\ninterface ILiquidityPool {\\n    struct LockedAmount {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n    struct ProvidedLiquidity {\\n        uint256 unlockedAmount;\\n        LockedAmount[] lockedAmounts;\\n        uint256 nextIndexForUnlock;\\n    }\\n    struct LockedLiquidity {\\n        uint256 amount;\\n        uint256 premium;\\n        bool locked;\\n    }\\n    event Profit(uint256 indexed id, uint256 amount);\\n    event Loss(uint256 indexed id, uint256 amount);\\n    event Provide(address indexed account, uint256 amount, uint256 writeAmount);\\n    event UpdateMaxLiquidity(uint256 indexed maxLiquidity);\\n    event Withdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 writeAmount\\n    );\\n\\n    function unlock(uint256 id) external;\\n\\n    function totalTokenXBalance() external view returns (uint256 amount);\\n\\n    function availableBalance() external view returns (uint256 balance);\\n\\n    function send(\\n        uint256 id,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function lock(\\n        uint256 id,\\n        uint256 tokenXAmount,\\n        uint256 premium\\n    ) external;\\n}\\n\\ninterface IOptionsConfig {\\n    struct Window {\\n        uint8 startHour;\\n        uint8 startMinute;\\n        uint8 endHour;\\n        uint8 endMinute;\\n    }\\n\\n    event UpdateMarketTime();\\n    event UpdateMaxPeriod(uint32 value);\\n    event UpdateMinPeriod(uint32 value);\\n\\n    event UpdateOptionFeePerTxnLimitPercent(uint16 value);\\n    event UpdateOverallPoolUtilizationLimit(uint16 value);\\n    event UpdateSettlementFeeDisbursalContract(address value);\\n    event UpdatetraderNFTContract(address value);\\n    event UpdateAssetUtilizationLimit(uint16 value);\\n    event UpdateMinFee(uint256 value);\\n\\n    function traderNFTContract() external view returns (address);\\n\\n    function settlementFeeDisbursalContract() external view returns (address);\\n\\n    function marketTimes(uint8)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            uint8,\\n            uint8\\n        );\\n\\n    function assetUtilizationLimit() external view returns (uint16);\\n\\n    function overallPoolUtilizationLimit() external view returns (uint16);\\n\\n    function maxPeriod() external view returns (uint32);\\n\\n    function minPeriod() external view returns (uint32);\\n\\n    function minFee() external view returns (uint256);\\n\\n    function optionFeePerTxnLimitPercent() external view returns (uint16);\\n}\\n\\ninterface ITraderNFT {\\n    function tokenOwner(uint256 id) external view returns (address user);\\n\\n    function tokenTierMappings(uint256 id) external view returns (uint8 tier);\\n\\n    event UpdateTiers(uint256[] tokenIds, uint8[] tiers, uint256[] batchIds);\\n}\\n\\ninterface IFakeTraderNFT {\\n    function tokenOwner(uint256 id) external view returns (address user);\\n\\n    function tokenTierMappings(uint256 id) external view returns (uint8 tier);\\n\\n    event UpdateNftBasePrice(uint256 nftBasePrice);\\n    event UpdateMaxNFTMintLimits(uint256 maxNFTMintLimit);\\n    event UpdateBaseURI(string baseURI);\\n    event Claim(address indexed account, uint256 claimTokenId);\\n    event Mint(address indexed account, uint256 tokenId, uint8 tier);\\n}\\n\\ninterface IReferralStorage {\\n    function codeOwner(string memory _code) external view returns (address);\\n\\n    function traderReferralCodes(address) external view returns (string memory);\\n\\n    function getTraderReferralInfo(address user)\\n        external\\n        view\\n        returns (string memory, address);\\n\\n    function setTraderReferralCode(address user, string memory _code) external;\\n\\n    function setReferrerTier(address, uint8) external;\\n\\n    function referrerTierStep(uint8 referralTier)\\n        external\\n        view\\n        returns (uint8 step);\\n\\n    function referrerTierDiscount(uint8 referralTier)\\n        external\\n        view\\n        returns (uint32 discount);\\n\\n    function referrerTier(address referrer) external view returns (uint8 tier);\\n\\n    struct ReferrerData {\\n        uint256 tradeVolume;\\n        uint256 rebate;\\n        uint256 trades;\\n    }\\n\\n    struct ReferreeData {\\n        uint256 tradeVolume;\\n        uint256 rebate;\\n    }\\n\\n    struct ReferralData {\\n        ReferrerData referrerData;\\n        ReferreeData referreeData;\\n    }\\n\\n    struct Tier {\\n        uint256 totalRebate; // e.g. 2400 for 24%\\n        uint256 discountShare; // 5000 for 50%/50%, 7000 for 30% rebates/70% discount\\n    }\\n\\n    event UpdateTraderReferralCode(address indexed account, string code);\\n    event UpdateReferrerTier(address referrer, uint8 tierId);\\n    event RegisterCode(address indexed account, string code);\\n    event SetCodeOwner(\\n        address indexed account,\\n        address newAccount,\\n        string code\\n    );\\n}\\n\\ninterface IBufferOptionsForReader is IBufferBinaryOptions {\\n    function baseSettlementFeePercentageForAbove()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function baseSettlementFeePercentageForBelow()\\n        external\\n        view\\n        returns (uint16);\\n\\n    function referral() external view returns (IReferralStorage);\\n\\n    function stepSize() external view returns (uint16);\\n\\n    function _getSettlementFeeDiscount(\\n        address referrer,\\n        address user,\\n        uint256 traderNFTId\\n    ) external view returns (bool isReferralValid, uint8 maxStep);\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"libraries\": {\r\n      \"ReferralStorage.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"RegisterCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"SetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tierId\",\"type\":\"uint8\"}],\"name\":\"UpdateReferrerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"UpdateTraderReferralCode\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserReferralData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trades\",\"type\":\"uint256\"}],\"internalType\":\"struct IReferralStorage.ReferrerData\",\"name\":\"referrerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tradeVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebate\",\"type\":\"uint256\"}],\"internalType\":\"struct IReferralStorage.ReferreeData\",\"name\":\"referreeData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"codeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_referrerTierStep\",\"type\":\"uint8[3]\"},{\"internalType\":\"uint32[3]\",\"name\":\"_referrerTierDiscount\",\"type\":\"uint32[3]\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTraderReferralInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referrerTierDiscount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"referrerTierStep\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"registerCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerCodeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"setTraderReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"setTraderReferralCodeByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReferralCodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReferralStorage", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}