{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/getPairs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract getPairs {\\r\\n    function lengthOfPairs(\\r\\n        address routerAddress\\r\\n    ) external view returns (uint256 length) {\\r\\n        address factory = IUniswapV2Pair(routerAddress).factory();\\r\\n        length = IUniswapV2Factory(factory).allPairsLength();\\r\\n        return length;\\r\\n    }\\r\\n\\r\\n    function getAllPairs(\\r\\n        address routerAddress,\\r\\n        uint256 i,\\r\\n        uint256 end\\r\\n    ) external view returns (address[] memory pairs) {\\r\\n        address factory = IUniswapV2Pair(routerAddress).factory();\\r\\n        pairs = new address[](end - i);\\r\\n        uint256 count;\\r\\n        while (i < end) {\\r\\n            pairs[count] = IUniswapV2Factory(factory).allPairs(i);\\r\\n            i++;\\r\\n            count++;\\r\\n        }\\r\\n        return pairs;\\r\\n    }\\r\\n\\r\\n    function getAllTokensFromPairs(\\r\\n        address[] memory pairs\\r\\n    ) external view returns (address[] memory tokens) {\\r\\n        tokens = new address[](pairs.length * 2);\\r\\n        for (uint256 i; i < tokens.length; i += 2) {\\r\\n            tokens[i] = IUniswapV2Pair(pairs[i / 2]).token0();\\r\\n            tokens[i + 1] = IUniswapV2Pair(pairs[i / 2]).token1();\\r\\n        }\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    function getDecimal(address token) private view returns (uint8) {\\r\\n        uint256 codeSize;\\r\\n        assembly {\\r\\n            codeSize := extcodesize(token)\\r\\n        }\\r\\n        if (codeSize == 0) {\\r\\n            return 99;\\r\\n        }\\r\\n\\r\\n        try IUniswapV2Pair(token).decimals() returns (uint8 dec) {\\r\\n            return dec;\\r\\n        } catch {\\r\\n            return 99;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAllDecimals(\\r\\n        address[] memory tokens\\r\\n    ) external view returns (uint8[] memory decimals) {\\r\\n        decimals = new uint8[](tokens.length);\\r\\n        uint256 len = tokens.length;\\r\\n        uint256 i;\\r\\n        while (i < len) {\\r\\n            decimals[i] = getDecimal(tokens[i]);\\r\\n            ++i;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAllReserves(\\r\\n        address[] calldata pairs\\r\\n    ) external view returns (uint112[] memory reserves) {\\r\\n        reserves = new uint112[](pairs.length * 3);\\r\\n        for (uint112 i; i < reserves.length; i += 3) {\\r\\n            (\\r\\n                uint112 reserve0,\\r\\n                uint112 reserve1,\\r\\n                uint112 timestamp\\r\\n            ) = IUniswapV2Pair(pairs[i / 3]).getReserves();\\r\\n            reserves[i] = reserve0;\\r\\n            reserves[i + 1] = reserve1;\\r\\n            reserves[i + 2] = timestamp;\\r\\n        }\\r\\n        return reserves;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAllDecimals\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAllPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"getAllReserves\",\"outputs\":[{\"internalType\":\"uint112[]\",\"name\":\"reserves\",\"type\":\"uint112[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"name\":\"getAllTokensFromPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"lengthOfPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "getPairs", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}