{"SourceCode": "// File: contracts/lib/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/OwnableUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract for authorization control.\r\n * @author dicether\r\n */\r\ncontract OwnableUpgradeable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event LogOwnerShipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event LogOwnerShipTransferInitiated(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Modifier, which throws if called by other account than owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract creator as initial owner\r\n     */\r\n    constructor() public {}\r\n\r\n    function __Ownable_init() internal {\r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        pendingOwner = _newOwner;\r\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev PendingOwner can accept ownership.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n        emit LogOwnerShipTransferred(owner, pendingOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/RewardHub.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Reward Hub Contract\r\n */\r\n\r\ncontract RewardHub is OwnableUpgradeable {\r\n    using SafeMath for uint256;\r\n\r\n    address public qid;\r\n    address public qpost;\r\n\r\n    uint256 public gap1 = 0;\r\n    bool private isInitialized = false;\r\n\r\n    mapping(uint256 => uint256) public referrals;\r\n    mapping(uint256 => uint256) public totalReferrals;\r\n\r\n    mapping(uint256 => mapping(uint256 => uint256)) public referredUsers;\r\n    mapping(uint256 => uint256) public referredCounts;\r\n\r\n    struct UserReward {\r\n        uint256 posts;\r\n        uint256 collecting;\r\n        uint256 tipping;\r\n        uint256 follows;\r\n        uint256 invite;\r\n        uint256 shareCoinVolume;\r\n        uint256 claimedTimestamp;\r\n    }\r\n\r\n    struct DistributionInfo {\r\n        uint256 totalReward;\r\n        uint256 roundVolumeWeight;\r\n        uint256 roundScorePoints;\r\n        uint256 roundStatus; //0: Not Started, 1: Cancelled, 2: Started, 3: Ended\r\n        uint256 roundEndTimestamp;\r\n    }\r\n\r\n    mapping(uint256 => mapping(uint256 => UserReward)) public userScores; // distributionId -> userId -> UserReward\r\n    mapping(uint256 => DistributionInfo) public distributions;\r\n\r\n    uint256 public distributionIndex = 0;\r\n\r\n    modifier onlyIdOrPost() {\r\n        require(\r\n            msg.sender == owner || qid == msg.sender || qpost == msg.sender,\r\n            \"Reward Hub: NOT_WHITELISTED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyInitializing() {\r\n        require(!isInitialized, \"initialized\");\r\n        _;\r\n        isInitialized = true;\r\n    }\r\n\r\n    /// @notice Contract constructor\r\n    constructor() public {}\r\n\r\n    function initialize(address _id, address _post) public onlyInitializing {\r\n        __Ownable_init();\r\n        qid = _id;\r\n        qpost = _post;\r\n    }\r\n\r\n    function addReferral(\r\n        uint256 _tokenId,\r\n        uint256 _referredUserId\r\n    ) external onlyIdOrPost returns (uint256) {\r\n        referrals[_tokenId] = referrals[_tokenId].add(1);\r\n        totalReferrals[_tokenId] = totalReferrals[_tokenId].add(1);\r\n        referredUsers[_tokenId][referredCounts[_tokenId]] = _referredUserId;\r\n        referredCounts[_tokenId] = referredCounts[_tokenId] + 1;\r\n    }\r\n\r\n    function increaseScore(\r\n        uint256 _scoreId,\r\n        uint256 _tokenId\r\n    ) external onlyIdOrPost returns (uint256) {\r\n        uint256 _tier = 0;\r\n        uint16[4] memory tierCount = [0, 100, 200, 300];\r\n        uint8[4] memory tierPoints = [10, 12, 15, 20]; // 1.2x, 1.5x, 2x\r\n\r\n        for (uint256 i = 0; i < tierCount.length; i++) {\r\n            if (referredCounts[_tokenId] >= tierCount[i]) {\r\n                _tier = i;\r\n            }\r\n        }\r\n        uint256 _increasePoint = uint256(tierPoints[_tier]);\r\n        if (distributions[distributionIndex].roundStatus == 2) {\r\n            if (_scoreId == 0) {\r\n                // posts\r\n                userScores[distributionIndex][_tokenId].posts =\r\n                    userScores[distributionIndex][_tokenId].posts +\r\n                    _increasePoint;\r\n            } else if (_scoreId == 1) {\r\n                // collecting\r\n                userScores[distributionIndex][_tokenId].collecting =\r\n                    userScores[distributionIndex][_tokenId].collecting +\r\n                    _increasePoint;\r\n            } else if (_scoreId == 2) {\r\n                // tipping\r\n                userScores[distributionIndex][_tokenId].tipping =\r\n                    userScores[distributionIndex][_tokenId].tipping +\r\n                    _increasePoint;\r\n            } else if (_scoreId == 3) {\r\n                // follows\r\n                userScores[distributionIndex][_tokenId].follows =\r\n                    userScores[distributionIndex][_tokenId].follows +\r\n                    _increasePoint;\r\n            } else if (_scoreId == 4) {\r\n                // invitation\r\n                userScores[distributionIndex][_tokenId].invite =\r\n                    userScores[distributionIndex][_tokenId].invite +\r\n                    _increasePoint;\r\n            }\r\n            distributions[distributionIndex].roundScorePoints =\r\n                distributions[distributionIndex].roundScorePoints +\r\n                _increasePoint;\r\n        }\r\n    }\r\n\r\n    function increaseShareVolume(\r\n        uint256 _tokenId,\r\n        uint256 _buyAmount\r\n    ) external onlyIdOrPost returns (uint256) {\r\n        uint256 _tier = 0;\r\n        uint16[4] memory tierCount = [0, 100, 200, 300];\r\n        uint8[4] memory tierPoints = [10, 12, 15, 20]; // 1.2x, 1.5x, 2x\r\n\r\n        for (uint256 i = 0; i < tierCount.length; i++) {\r\n            if (referredCounts[_tokenId] >= tierCount[i]) {\r\n                _tier = i;\r\n            }\r\n        }\r\n        uint256 _increasePoint = uint256(tierPoints[_tier])\r\n            .mul(userScores[distributionIndex][_tokenId].shareCoinVolume)\r\n            .div(distributions[distributionIndex].roundVolumeWeight);\r\n        if (distributions[distributionIndex].roundStatus == 2) {\r\n            userScores[distributionIndex][_tokenId].shareCoinVolume =\r\n                userScores[distributionIndex][_tokenId].shareCoinVolume +\r\n                _buyAmount;\r\n            distributions[distributionIndex].roundScorePoints =\r\n                distributions[distributionIndex].roundScorePoints +\r\n                _increasePoint;\r\n        }\r\n    }\r\n\r\n    function addDistributionRound(\r\n        uint256 _reward,\r\n        uint256 _volumeWeight,\r\n        uint256 _endTime\r\n    ) external payable onlyOwner {\r\n        distributions[distributionIndex].roundStatus = 3;\r\n        distributionIndex = distributionIndex + 1;\r\n        distributions[distributionIndex].totalReward = _reward;\r\n        distributions[distributionIndex].roundVolumeWeight = _volumeWeight;\r\n        distributions[distributionIndex].roundEndTimestamp = _endTime;\r\n        distributions[distributionIndex].roundStatus = 2;\r\n        require(msg.value >= _reward, \"insufficient reward\");\r\n    }\r\n\r\n    function editDistributionRound(\r\n        uint256 _roundIndex,\r\n        uint256 _totalReward,\r\n        uint256 _volumeWeight,\r\n        uint256 _status,\r\n        uint256 _endTime\r\n    ) external payable onlyOwner {\r\n        if (_totalReward >= distributions[_roundIndex].totalReward) {\r\n            require(\r\n                msg.value >=\r\n                    _totalReward.sub(distributions[_roundIndex].totalReward),\r\n                \"insufficient reward\"\r\n            );\r\n        }\r\n        distributions[_roundIndex].roundStatus = _status;\r\n        distributions[_roundIndex].totalReward = _totalReward;\r\n        distributions[_roundIndex].roundVolumeWeight = _volumeWeight;\r\n        distributions[_roundIndex].roundEndTimestamp = _endTime;\r\n    }\r\n\r\n    function endDistributionRound(uint256 _roundIndex) external onlyOwner {\r\n        require(\r\n            distributions[_roundIndex].roundEndTimestamp < block.timestamp,\r\n            \"not yet\"\r\n        );\r\n        distributions[_roundIndex].roundStatus = 3;\r\n    }\r\n\r\n    function claimReward(uint256 _tokenId) external returns (uint256) {\r\n        address _owner = IERC721(qid).ownerOf(_tokenId);\r\n        uint256 _totalReward = 0;\r\n        for (uint256 i = 0; i < distributionIndex; i++) {\r\n            if (\r\n                userScores[i][_tokenId].claimedTimestamp == 0 &&\r\n                distributions[i].roundStatus == 3\r\n            ) {\r\n                UserReward memory _user = userScores[i][_tokenId];\r\n                DistributionInfo memory _info = distributions[i];\r\n                if (_info.roundScorePoints > 0 && _info.roundVolumeWeight > 0) {\r\n                    _totalReward += (_user.posts +\r\n                        _user.tipping +\r\n                        _user.invite +\r\n                        _user.follows +\r\n                        _user.collecting +\r\n                        _user.shareCoinVolume.div(_info.roundVolumeWeight))\r\n                        .mul(_info.totalReward)\r\n                        .div(_info.roundScorePoints);\r\n                }\r\n                userScores[i][_tokenId].claimedTimestamp = block.timestamp;\r\n            }\r\n        }\r\n        payable(_owner).call{value: _totalReward}(\"\");\r\n        return _totalReward;\r\n    }\r\n\r\n    function getPendingReward(\r\n        uint256 _tokenId\r\n    ) external view returns (uint256) {\r\n        uint256 _totalReward = 0;\r\n        for (uint256 i = 0; i < distributionIndex; i++) {\r\n            if (\r\n                userScores[i][_tokenId].claimedTimestamp == 0 &&\r\n                distributions[i].roundStatus == 3\r\n            ) {\r\n                UserReward memory _user = userScores[i][_tokenId];\r\n                DistributionInfo memory _info = distributions[i];\r\n\r\n                _totalReward += (_user.posts +\r\n                    _user.tipping +\r\n                    _user.invite +\r\n                    _user.follows +\r\n                    _user.collecting +\r\n                    _user.shareCoinVolume.div(_info.roundVolumeWeight))\r\n                    .mul(_info.totalReward)\r\n                    .div(_info.roundScorePoints);\r\n            }\r\n        }\r\n        return _totalReward;\r\n    }\r\n\r\n    function getRewardInfo(\r\n        uint256 _tokenId,\r\n        uint256 _disId\r\n    ) external view returns (UserReward memory) {\r\n        return userScores[_disId][_tokenId];\r\n    }\r\n\r\n    function getAllRewards(\r\n        uint256 _tokenId\r\n    ) external view returns (UserReward[] memory, DistributionInfo[] memory) {\r\n        UserReward[] memory rewards = new UserReward[](distributionIndex + 1);\r\n        DistributionInfo[] memory disArray = new DistributionInfo[](\r\n            distributionIndex + 1\r\n        );\r\n\r\n        for (uint256 i = 0; i <= distributionIndex; i++) {\r\n            rewards[i] = userScores[i][_tokenId];\r\n            disArray[i] = distributions[i];\r\n        }\r\n        return (rewards, disArray);\r\n    }\r\n\r\n    function getReferredUsers(\r\n        uint256 _tokenId\r\n    ) external view returns (uint256[] memory) {\r\n        uint256[] memory users = new uint256[](referredCounts[_tokenId]);\r\n        for (uint256 i = 0; i < referredCounts[_tokenId]; i++) {\r\n            users[i] = referredUsers[_tokenId][i];\r\n        }\r\n        return users;\r\n    }\r\n\r\n    function setVariables(address _qid, address _qpost) external onlyOwner {\r\n        qid = _qid;\r\n        qpost = _qpost;\r\n    }\r\n\r\n    uint256[45] private __gap;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volumeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"addDistributionRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referredUserId\",\"type\":\"uint256\"}],\"name\":\"addReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundVolumeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundScorePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volumeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"editDistributionRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"endDistributionRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gap1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAllRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"posts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collecting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"follows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCoinVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardHub.UserReward[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundVolumeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundScorePoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardHub.DistributionInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getReferredUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_disId\",\"type\":\"uint256\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"posts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collecting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"follows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCoinVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardHub.UserReward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scoreId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"increaseScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"}],\"name\":\"increaseShareVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_post\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qpost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referredCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referredUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_qid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_qpost\",\"type\":\"address\"}],\"name\":\"setVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"posts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collecting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"follows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCoinVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardHub", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://880c28439e5f63d5fd6c5bb236ddccae2383a9cf3f62b8f8189c7ea08039cdca"}