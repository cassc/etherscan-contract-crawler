{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MarketRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./interfaces/CloberOrderBook.sol\\\";\\nimport \\\"./interfaces/CloberMarketSwapCallbackReceiver.sol\\\";\\nimport \\\"./interfaces/CloberRouter.sol\\\";\\nimport \\\"./interfaces/CloberMarketFactory.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/CloberOrderNFT.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract MarketRouter is CloberMarketSwapCallbackReceiver, CloberRouter {\\n    using SafeERC20 for IERC20;\\n\\n    bool private constant _BID = true;\\n    bool private constant _ASK = false;\\n\\n    CloberMarketFactory private immutable _factory;\\n\\n    mapping(address => bool) private _registeredMarkets;\\n\\n    modifier checkDeadline(uint64 deadline) {\\n        _checkDeadline(deadline);\\n        _;\\n    }\\n\\n    function _checkDeadline(uint64 deadline) internal view {\\n        if (block.timestamp > deadline) {\\n            revert Errors.CloberError(Errors.DEADLINE);\\n        }\\n    }\\n\\n    modifier flushNative() {\\n        _;\\n        if (address(this).balance > 0) {\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n            if (!success) {\\n                revert Errors.CloberError(Errors.FAILED_TO_SEND_VALUE);\\n            }\\n        }\\n    }\\n\\n    constructor(address factory) {\\n        _factory = CloberMarketFactory(factory);\\n    }\\n\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address,\\n        uint256 inputAmount,\\n        uint256,\\n        bytes calldata data\\n    ) external payable {\\n        // check if caller is registered market\\n        if (!isRegisteredMarket(msg.sender) && _factory.getMarketHost(msg.sender) == address(0)) {\\n            revert Errors.CloberError(Errors.ACCESS);\\n        }\\n\\n        (address payer, bool useNative, uint256 nativeToRemain) = abi.decode(data, (address, bool, uint256));\\n\\n        // transfer input tokens\\n        if (useNative) {\\n            uint256 nativeAmount = address(this).balance - nativeToRemain;\\n            (inputAmount, nativeAmount) = nativeAmount > inputAmount\\n                ? (0, inputAmount)\\n                : (inputAmount - nativeAmount, nativeAmount);\\n\\n            IWETH(inputToken).deposit{value: nativeAmount}();\\n            IWETH(inputToken).transfer(msg.sender, nativeAmount);\\n        }\\n        if (inputAmount > 0) {\\n            IERC20(inputToken).safeTransferFrom(payer, msg.sender, inputAmount);\\n        }\\n    }\\n\\n    function limitOrder(\\n        GeneralLimitOrderParams[] calldata limitOrderParamsList,\\n        ClaimOrderParams[] calldata claimParamsList\\n    ) external payable flushNative returns (uint256[] memory orderIds) {\\n        orderIds = new uint256[](limitOrderParamsList.length);\\n        _claim(claimParamsList);\\n        uint256 nativeToRemain;\\n        for (uint256 i = 0; i < limitOrderParamsList.length; ++i) {\\n            _checkDeadline(limitOrderParamsList[i].params.deadline);\\n            nativeToRemain += uint256(limitOrderParamsList[i].params.claimBounty) * 1 gwei;\\n        }\\n\\n        for (uint256 i = 0; i < limitOrderParamsList.length; ++i) {\\n            nativeToRemain -= uint256(limitOrderParamsList[i].params.claimBounty) * 1 gwei;\\n            orderIds[i] = _limitOrder(limitOrderParamsList[i].params, limitOrderParamsList[i].isBid, nativeToRemain);\\n        }\\n    }\\n\\n    function limitBid(LimitOrderParams calldata params)\\n        external\\n        payable\\n        checkDeadline(params.deadline)\\n        flushNative\\n        returns (uint256)\\n    {\\n        return _limitOrder(params, _BID);\\n    }\\n\\n    function limitAsk(LimitOrderParams calldata params)\\n        external\\n        payable\\n        checkDeadline(params.deadline)\\n        flushNative\\n        returns (uint256)\\n    {\\n        return _limitOrder(params, _ASK);\\n    }\\n\\n    function _limitOrder(LimitOrderParams calldata params, bool isBid) internal returns (uint256) {\\n        return _limitOrder(params, isBid, 0);\\n    }\\n\\n    function _limitOrder(\\n        LimitOrderParams calldata params,\\n        bool isBid,\\n        uint256 nativeToRemain\\n    ) internal returns (uint256) {\\n        return\\n            CloberOrderBook(params.market).limitOrder{value: uint256(params.claimBounty) * 1 gwei}(\\n                params.user,\\n                params.priceIndex,\\n                params.rawAmount,\\n                params.baseAmount,\\n                (isBid ? 1 : 0) + (params.postOnly ? 2 : 0),\\n                abi.encode(msg.sender, params.useNative, nativeToRemain)\\n            );\\n    }\\n\\n    function marketBid(MarketOrderParams calldata params) external payable checkDeadline(params.deadline) flushNative {\\n        _marketOrder(params, _BID);\\n    }\\n\\n    function marketAsk(MarketOrderParams calldata params) external payable checkDeadline(params.deadline) flushNative {\\n        _marketOrder(params, _ASK);\\n    }\\n\\n    function _marketOrder(MarketOrderParams calldata params, bool isBid) internal {\\n        CloberOrderBook(params.market).marketOrder(\\n            params.user,\\n            params.limitPriceIndex,\\n            params.rawAmount,\\n            params.baseAmount,\\n            (isBid ? 1 : 0) + (params.expendInput ? 2 : 0),\\n            abi.encode(msg.sender, params.useNative, 0)\\n        );\\n    }\\n\\n    function claim(uint64 deadline, ClaimOrderParams[] calldata paramsList)\\n        external\\n        checkDeadline(deadline)\\n        flushNative\\n    {\\n        _claim(paramsList);\\n    }\\n\\n    function _claim(ClaimOrderParams[] calldata paramsList) internal {\\n        for (uint256 i = 0; i < paramsList.length; ++i) {\\n            ClaimOrderParams calldata params = paramsList[i];\\n            CloberOrderBook(params.market).claim(msg.sender, params.orderKeys);\\n        }\\n    }\\n\\n    function limitBidAfterClaim(ClaimOrderParams[] calldata claimParamsList, LimitOrderParams calldata limitOrderParams)\\n        external\\n        payable\\n        checkDeadline(limitOrderParams.deadline)\\n        flushNative\\n        returns (uint256)\\n    {\\n        _claim(claimParamsList);\\n        return _limitOrder(limitOrderParams, _BID);\\n    }\\n\\n    function limitAskAfterClaim(ClaimOrderParams[] calldata claimParamsList, LimitOrderParams calldata limitOrderParams)\\n        external\\n        payable\\n        checkDeadline(limitOrderParams.deadline)\\n        flushNative\\n        returns (uint256)\\n    {\\n        _claim(claimParamsList);\\n        return _limitOrder(limitOrderParams, _ASK);\\n    }\\n\\n    function marketBidAfterClaim(\\n        ClaimOrderParams[] calldata claimParamsList,\\n        MarketOrderParams calldata marketOrderParams\\n    ) external payable checkDeadline(marketOrderParams.deadline) flushNative {\\n        _claim(claimParamsList);\\n        _marketOrder(marketOrderParams, _BID);\\n    }\\n\\n    function marketAskAfterClaim(\\n        ClaimOrderParams[] calldata claimParamsList,\\n        MarketOrderParams calldata marketOrderParams\\n    ) external payable checkDeadline(marketOrderParams.deadline) flushNative {\\n        _claim(claimParamsList);\\n        _marketOrder(marketOrderParams, _ASK);\\n    }\\n\\n    function isRegisteredMarket(address market) public view returns (bool) {\\n        return _registeredMarkets[market];\\n    }\\n\\n    function registerMarkets(address[] calldata markets) external {\\n        if (msg.sender != _factory.owner()) {\\n            revert Errors.CloberError(Errors.ACCESS);\\n        }\\n        for (uint256 i = 0; i < markets.length; ++i) {\\n            _registeredMarkets[markets[i]] = true;\\n        }\\n    }\\n\\n    function unregisterMarkets(address[] calldata markets) external {\\n        if (msg.sender != _factory.owner()) {\\n            revert Errors.CloberError(Errors.ACCESS);\\n        }\\n        for (uint256 i = 0; i < markets.length; ++i) {\\n            _registeredMarkets[markets[i]] = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    error CloberError(uint256 errorCode); // 0x1d25260a\\n\\n    uint256 public constant ACCESS = 0;\\n    uint256 public constant FAILED_TO_SEND_VALUE = 1;\\n    uint256 public constant INSUFFICIENT_BALANCE = 2;\\n    uint256 public constant OVERFLOW_UNDERFLOW = 3;\\n    uint256 public constant EMPTY_INPUT = 4;\\n    uint256 public constant DELEGATE_CALL = 5;\\n    uint256 public constant DEADLINE = 6;\\n    uint256 public constant NOT_IMPLEMENTED_INTERFACE = 7;\\n    uint256 public constant INVALID_FEE = 8;\\n    uint256 public constant REENTRANCY = 9;\\n    uint256 public constant POST_ONLY = 10;\\n    uint256 public constant SLIPPAGE = 11;\\n    uint256 public constant QUEUE_REPLACE_FAILED = 12;\\n    uint256 public constant INVALID_COEFFICIENTS = 13;\\n    uint256 public constant INVALID_ID = 14;\\n    uint256 public constant INVALID_QUOTE_TOKEN = 15;\\n    uint256 public constant INVALID_PRICE = 16;\\n    uint256 public constant INVALID_PRICE_INDEX = 17;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(OrderKey calldata orderKey)\\n        external\\n        view\\n        returns (\\n            uint64 claimableRawAmount,\\n            uint256 claimableAmount,\\n            uint256 feeAmount,\\n            uint256 rebateAmount\\n        );\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(\\n        address borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(\\n        uint64 rawAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(\\n        uint256 baseAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberRouter {\\n    /**\\n     * @notice LimitOrderParams struct contains information about a limit order.\\n     * @param market The address of the market for this order.\\n     * @param deadline The deadline for the transaction. Reverts if the block timestamp is greater than this value.\\n     * @param claimBounty The bounty the user is willing to pay in gwei to delegate claiming.\\n     * @param user The address of the user placing the order.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param postOnly Flag indicating if the order should only be placed if it does not fill any existing orders.\\n     * @param useNative Flag indicating whether the order should use the native token supplied.\\n     * Only works when the input in the wrapped native token.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     */\\n    struct LimitOrderParams {\\n        address market;\\n        uint64 deadline;\\n        uint32 claimBounty;\\n        address user;\\n        uint16 priceIndex;\\n        uint64 rawAmount;\\n        bool postOnly;\\n        bool useNative;\\n        uint256 baseAmount;\\n    }\\n\\n    /**\\n     * @notice LimitOrderParams struct is a generalized version of LimitOrderParam to be used for both bids and asks.\\n     * @param params This is the LimitOrderParams struct which contains all the necessary information of a limit order.\\n     * @param isBid This flag, if set to true, means that the order is a bid. If false, the order is an ask.\\n     */\\n    struct GeneralLimitOrderParams {\\n        LimitOrderParams params;\\n        bool isBid;\\n    }\\n\\n    /**\\n     * @notice Places limit orders.\\n     * @param limitOrderParamsList The limit order parameters list.\\n     * @param claimParamsList Array of ClaimOrderParams: The list of orders to be claimed.\\n     * @return orderIds The order indices. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        GeneralLimitOrderParams[] calldata limitOrderParamsList,\\n        ClaimOrderParams[] calldata claimParamsList\\n    ) external payable returns (uint256[] memory orderIds);\\n\\n    /**\\n     * @notice Places a limit order on the bid side.\\n     * @param params The limit order parameters.\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitBid(LimitOrderParams calldata params) external payable returns (uint256);\\n\\n    /**\\n     * @notice Places a limit order on the ask side.\\n     * @param params The limit order parameters.\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitAsk(LimitOrderParams calldata params) external payable returns (uint256);\\n\\n    /**\\n     * @notice MarketOrderParams struct contains information about a market order.\\n     * @param market The address of the market for this order.\\n     * @param deadline The deadline for the transaction. Reverts if the block timestamp is greater than this value.\\n     * @param user The address of the user placing the order.\\n     * @param limitPriceIndex Index of the price at which to limit the order.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param expendInput Flag indicating whether the order should spend all of the user's\\n     * input tokens (true) or just until the desired output amount is met (false).\\n     * @param useNative Flag indicating whether the order should use the native token supplied.\\n     * Only works when the input in the wrapped native token.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     */\\n    struct MarketOrderParams {\\n        address market;\\n        uint64 deadline;\\n        address user;\\n        uint16 limitPriceIndex;\\n        uint64 rawAmount;\\n        bool expendInput;\\n        bool useNative;\\n        uint256 baseAmount;\\n    }\\n\\n    /**\\n     * @notice Place a market order on the bid side.\\n     * @param params The market order parameters.\\n     */\\n    function marketBid(MarketOrderParams calldata params) external payable;\\n\\n    /**\\n     * @notice Place a market order on the ask side.\\n     * @param params The market order parameters.\\n     */\\n    function marketAsk(MarketOrderParams calldata params) external payable;\\n\\n    /**\\n     * @notice Struct for passing parameters to the function that claims orders.\\n     * @param market The market address of the orders to claim from.\\n     * @param orderKeys An array of OrderKey structs representing the keys of the orders being claimed.\\n     */\\n    struct ClaimOrderParams {\\n        address market;\\n        OrderKey[] orderKeys;\\n    }\\n\\n    /**\\n     * @notice Claims orders across markets.\\n     * @param deadline The deadline for the transaction. Reverts if the block timestamp is greater than this value.\\n     * @param paramsList The list of ClaimOrderParams\\n     */\\n    function claim(uint64 deadline, ClaimOrderParams[] calldata paramsList) external;\\n\\n    /**\\n     * @notice Submits a limit bid order to the order book after claiming a list of orders.\\n     * @param claimParamsList Array of ClaimOrderParams: The list of orders to be claimed.\\n     * @param limitOrderParams LimitOrderParams: The parameters for the limit order.\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitBidAfterClaim(ClaimOrderParams[] calldata claimParamsList, LimitOrderParams calldata limitOrderParams)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Submits a limit ask order to the order book after claiming a list of orders.\\n     * @param claimParamsList Array of ClaimOrderParams: The list of orders to be claimed.\\n     * @param limitOrderParams LimitOrderParams: The parameters for the limit order.\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitAskAfterClaim(ClaimOrderParams[] calldata claimParamsList, LimitOrderParams calldata limitOrderParams)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Submits a market bid order to the order book after claiming a list of orders.\\n     * @param claimParamsList Array of ClaimOrderParams: The list of orders to be claimed.\\n     * @param marketOrderParams MarketOrderParams: The parameters for the market order.\\n     */\\n    function marketBidAfterClaim(\\n        ClaimOrderParams[] calldata claimParamsList,\\n        MarketOrderParams calldata marketOrderParams\\n    ) external payable;\\n\\n    /**\\n     * @notice Submits a market ask order to the order book after claiming a list of orders.\\n     * @param claimParamsList Array of ClaimOrderParams: The list of orders to be claimed.\\n     * @param marketOrderParams MarketOrderParams: The parameters for the market order.\\n     */\\n    function marketAskAfterClaim(\\n        ClaimOrderParams[] calldata claimParamsList,\\n        MarketOrderParams calldata marketOrderParams\\n    ) external payable;\\n\\n    /**\\n     * @notice Registers markets to be accepted by the router.\\n     * @param markets Markets to be registered.\\n     */\\n    function registerMarkets(address[] calldata markets) external;\\n\\n    /**\\n     * @notice Unregisters markets denying their use by the router.\\n     * @param markets Markets to be unregistered.\\n     */\\n    function unregisterMarkets(address[] calldata markets) external;\\n\\n    /**\\n     * @notice Checks if the market is registered.\\n     * @param market The market to be checked for registration status.\\n     */\\n    function isRegisteredMarket(address market) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberMarketFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactory {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MarketDeployer.\\n     * @return The address of the MarketDeployer.\\n     */\\n    function marketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the priceBookDeployer.\\n     * @return The address of the priceBookDeployer.\\n     */\\n    function priceBookDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the orderTokenDeployer.\\n     * @return The address of the orderTokenDeployer.\\n     */\\n    function orderTokenDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberMarketSwapCallbackReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketSwapCallbackReceiver {\\n    /**\\n     * @notice Contracts placing orders on the OrderBook must implement this method.\\n     * In this method, the contract has to send the required token, or the transaction will revert.\\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\\n     * @param inputToken The address of the token the user has to send.\\n     * @param outputToken The address of the token the user has received.\\n     * @param inputAmount The amount of tokens the user has to send.\\n     * @param outputAmount The amount of tokens the user has received.\\n     * @param data The user's custom callback data.\\n     */\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderNFT is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Returns the base URI for the metadata of this NFT collection.\\n     * @return The base URI for the metadata of this NFT collection.\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI for the metadata of this NFT collection.\\n     * @return The contract URI for the metadata of this NFT collection.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the address of the market contract that manages this token.\\n     * @return The address of the market contract that manages this token.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of contract owner.\\n     * @return The address of the contract owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Called when a new token is minted.\\n     * @param to The receiver address of the minted token.\\n     * @param tokenId The id of the token minted.\\n     */\\n    function onMint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Called when a token is burned.\\n     * @param tokenId The id of the token burned.\\n     */\\n    function onBurn(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Changes the base URI for the metadata of this NFT collection.\\n     * @param newBaseURI The new base URI for the metadata of this NFT collection.\\n     */\\n    function changeBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Changes the contract URI for the metadata of this NFT collection.\\n     * @param newContractURI The new contract URI for the metadata of this NFT collection.\\n     */\\n    function changeContractURI(string memory newContractURI) external;\\n\\n    /**\\n     * @notice Decodes a token id into an order key.\\n     * @param id The id to decode.\\n     * @return The order key corresponding to the given id.\\n     */\\n    function decodeId(uint256 id) external pure returns (OrderKey memory);\\n\\n    /**\\n     * @notice Encodes an order key to a token id.\\n     * @param orderKey The order key to encode.\\n     * @return The id corresponding to the given order key.\\n     */\\n    function encodeId(OrderKey memory orderKey) external pure returns (uint256);\\n\\n    /**\\n     * @notice Cancels orders with token ids.\\n     * @dev Only the OrderCanceler can call this function.\\n     * @param from The address of the owner of the tokens.\\n     * @param tokenIds The ids of the tokens to cancel.\\n     * @param receiver The address to send the underlying assets to.\\n     */\\n    function cancel(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        address receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"CloberError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"paramsList\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cloberMarketSwapCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"isRegisteredMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"claimBounty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"postOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.LimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"limitAsk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"claimParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"claimBounty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"postOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.LimitOrderParams\",\"name\":\"limitOrderParams\",\"type\":\"tuple\"}],\"name\":\"limitAskAfterClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"claimBounty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"postOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.LimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"limitBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"claimParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"claimBounty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"postOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.LimitOrderParams\",\"name\":\"limitOrderParams\",\"type\":\"tuple\"}],\"name\":\"limitBidAfterClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"claimBounty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"postOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.LimitOrderParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"internalType\":\"struct CloberRouter.GeneralLimitOrderParams[]\",\"name\":\"limitOrderParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"claimParamsList\",\"type\":\"tuple[]\"}],\"name\":\"limitOrder\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitPriceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"expendInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.MarketOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"marketAsk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"claimParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitPriceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"expendInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.MarketOrderParams\",\"name\":\"marketOrderParams\",\"type\":\"tuple\"}],\"name\":\"marketAskAfterClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitPriceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"expendInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.MarketOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"marketBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"priceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CloberRouter.ClaimOrderParams[]\",\"name\":\"claimParamsList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitPriceIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"expendInput\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberRouter.MarketOrderParams\",\"name\":\"marketOrderParams\",\"type\":\"tuple\"}],\"name\":\"marketBidAfterClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"registerMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"unregisterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketRouter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000024ac0938c010fb520f1068e96d78e0458855111d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}