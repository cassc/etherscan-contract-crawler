{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/modules/reference/wav3sEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Events {\\n    /**\\n     * @dev Emitted when funds are withdrawn from a profile's post budget.\\n\\n     */\\n    event wav3sMirror__MirrorProcessed(\\n        address mirrorerAddress,\\n        string pubId,\\n        uint256 reward,\\n        uint256 currentBudget,\\n        uint256 feePerMirror\\n    );\\n    event wav3sMirror__PostFunded(\\n        string pubId,\\n        address profileAddress,\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        uint256 minFollowers,\\n        uint256 feePerMirror\\n    );\\n    event wav3sMirror__PostRefilled(\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        uint256 minFollowers,\\n        uint256 feePerMirror\\n    );\\n\\n    event wav3sMirror__HubSet(address wav3sHub, address sender);\\n    event wav3sMirror__MsigSet(address msig, address sender);\\n    event wav3sMirror__PubWithdrawn(string pubId, uint256 budget, address sender);\\n    event wav3sMirror__AppWhitelisted(address appAddress);\\n    event wav3sMirror__AppUnlisted(address appAddress);\\n\\n    event wav3sMirror__AppPaid(address appAddress, address currencyAddress, uint256 appFees);\\n    event wav3sMirror__CircuitBreak(bool stop);\\n\\n    event wav3sMirror__EmergencyWithdraw(string pubId, uint256 budget, address sender);\\n    event wav3sMirror__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        address currencyAddress,\\n        uint256 appFees\\n    );\\n    event wav3sMirror__PostFundedInEmergency(\\n        string pubId,\\n        address profileAddress,\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        uint256 minFollowers,\\n        uint256 feePerMirror\\n    );\\n\\n    event wav3sMirror__backdoor(uint256 balance);\\n    event wav3sMirror__PubFinished(string pubId);\\n\\n    // Events\\n    event wav3sFrenMirror__MirrorProcessed(\\n        address mirrorerAddress,\\n        string pubId,\\n        uint256 reward,\\n        uint256 currentBudget,\\n        uint256 feePerMirror\\n    );\\n\\n    event wav3sFrenMirror__PostFunded(\\n        string pubId,\\n        address profileAddress,\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        uint256 minFollowers,\\n        uint256 feePerMirror,\\n        address appAddress,\\n        uint256 appFee\\n    );\\n\\n    event wav3sFrenMirror__HubSet(address wav3sHub, address sender);\\n    event wav3sFrenMirror__MsigSet(address msig, address sender);\\n    event wav3sFrenMirror__PubWithdrawn(string pubId, uint256 budget, address sender);\\n    event wav3sFrenMirror__AppWhitelisted(address appAddress);\\n    event wav3sFrenMirror__AppUnlisted(address appAddress);\\n\\n    event wav3sFrenMirror__AppPaid(address appAddress, address currencyAddress, uint256 appFees);\\n    event wav3sFrenMirror__CircuitBreak(bool stop);\\n\\n    event wav3sFrenMirror__EmergencyWithdraw(string pubId, uint256 budget, address sender);\\n    event wav3sFrenMirror__EmergencyAppFeeWithdraw(address appAddress, uint256 appFees);\\n    event wav3sFrenMirror__PostFundedInEmergency(string pubId, uint256 budget, uint256 budgetFinal);\\n\\n    event wav3sFrenMirror__backdoor(uint256 balance);\\n    event wav3sFrenMirror__PubFinished(string pubId);\\n}\\n\"\r\n    },\r\n    \"contracts/core/modules/reference/wav3sFrenMirror.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Events} from \\\"./wav3sEvents.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title wav3sFrenMirror\\n * @author Daniel Beltr\u00e1n for wav3s\\n * @notice A contract to transfer rewards to profiles that mirror a publication\\n * on Lens Protocol that the user previously fund with a budget.\\n */\\n\\n/**\\n * @notice A struct containing the necessary data to execute funded mirror actions on a given profile and post.\\n *\\n * @param budget The total budget to pay mirrorers.\\n * @param reward The amount to be paid to each mirrorer.\\n * @param currencyAddress The currency associated with this post.\\n * @param profileAddress The address associated with the profile owner of the publication.\\n * @param minFollowers The minimum amount of followers a user has to have to receive a reward from this post.\\n * @param feePerMirror Fee per mirror acording to this budget and reward.\\n\\n */\\n\\nstruct FrenFundedPostData {\\n    uint256 budget;\\n    uint256 reward;\\n    address currencyAddress;\\n    address profileAddress;\\n    uint256 minFollowers;\\n    uint256 feePerMirror;\\n    bool initiatedFrenWav3;\\n}\\n\\ncontract wav3sFrenMirror {\\n    using Events for *;\\n\\n    // Address of the deployer.\\n    address public owner;\\n    // The address of the wav3s multisig contract.\\n    address public s_multisig;\\n    // The addresses of whitelisted currencies.\\n    address private immutable i_wMatic;\\n    // Circuit breaker\\n    bool private stopped = false;\\n\\n    // The address of the wav3sHub contract.\\n    address public s_wav3sHub;\\n    // The fee that will be charged in percentage.\\n    uint256 immutable i_fee;\\n    // The minimum reward possible.\\n    uint256 immutable i_minReward;\\n    // SafeERC20 to transfer tokens.\\n    using SafeERC20 for IERC20;\\n    // Post variables\\n    // The budget for the post pointed to\\n    uint256 private budget;\\n    // The reward for the post pointed to\\n    uint256 private reward;\\n    // The currency address for the post pointed to\\n    address private currency;\\n    // The minimum followers for the post pointed to\\n    uint256 private minFollowers;\\n    // Mapping to store the data associated with a fren funded post, indexed by the publication ID\\n    mapping(string => FrenFundedPostData) dataByFrenFundedPublication;\\n    // Mapping to store whether a given follower has mirrored a given post or not\\n    mapping(string => mapping(address => bool)) s_publicationToFollowerHasMirrored;\\n    // Mapping to track fees\\n    mapping(address => mapping(address => uint256)) s_appToCurrencyToFees;\\n    // Whitelisted apps to track fees\\n    mapping(address => bool) s_appWhitelisted;\\n\\n    // Events\\n    event wav3sFrenMirror__MirrorProcessed(\\n        address mirrorerAddress,\\n        string pubId,\\n        uint256 reward,\\n        uint256 currentBudget,\\n        uint256 feePerMirror\\n    );\\n\\n    event wav3sFrenMirror__PostFunded(\\n        string pubId,\\n        address profileAddress,\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        uint256 minFollowers,\\n        uint256 feePerMirror,\\n        address appAddress,\\n        uint256 appFee\\n    );\\n\\n    event wav3sFrenMirror__HubSet(address wav3sHub, address sender);\\n    event wav3sFrenMirror__MsigSet(address msig, address sender);\\n    event wav3sFrenMirror__PubWithdrawn(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sFrenMirror__AppWhitelisted(address appAddress);\\n    event wav3sFrenMirror__AppUnlisted(address appAddress);\\n\\n    event wav3sFrenMirror__AppPaid(\\n        address appAddress,\\n        address currencyAddress,\\n        uint256 appFees\\n    );\\n    event wav3sFrenMirror__CircuitBreak(bool stop);\\n\\n    event wav3sFrenMirror__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3sFrenMirror__EmergencyAppFeeWithdraw(\\n        address appAddress,\\n        uint256 appFees\\n    );\\n    event wav3sFrenMirror__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sFrenMirror__backdoor(uint256 balance);\\n    event wav3sFrenMirror__PubFinished(string pubId);\\n\\n    constructor(uint256 fee, address wMatic) {\\n        i_fee = fee;\\n        i_wMatic = wMatic;\\n        i_minReward = 1E17;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only the owner can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier onlyWav3sHub() {\\n        require(\\n            msg.sender == s_wav3sHub,\\n            \\\"Errors.Only wav3sHub can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier stopInEmergency() {\\n        require(\\n            !stopped,\\n            \\\"Emergency stop is active, function execution is prevented.\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyInEmergency() {\\n        require(stopped, \\\"Not in Emergency, function execution is prevented.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Processes a mirror action. This will transfer funds to the owner of the profile that initiated the mirror.\\n     * @param pubId The ID of the post that was mirrored.\\n     * @param mirrorerAddress The address of the follower who mirrored the post.\\n     * @param followersCount The number of followers that the mirrorer has.\\n     * @param appAddress The address of the app integrated with wav3s where the mirror was done.\\n\\n     */\\n    function processMirror(\\n        string memory pubId,\\n        address mirrorerAddress,\\n        uint256 followersCount,\\n        address appAddress\\n    ) external stopInEmergency onlyWav3sHub {\\n        // Check if the publication is initiated\\n        require(\\n            dataByFrenFundedPublication[pubId].initiatedFrenWav3 != false,\\n            \\\"Errors.wav3sFrenMirror__process__PostNotInitiated(): Post is not funded yet\\\"\\n        );\\n\\n        // Get the budget for the post pointed to\\n        budget = dataByFrenFundedPublication[pubId].budget;\\n        // Get the reward for the post pointed to\\n        reward = dataByFrenFundedPublication[pubId].reward;\\n        // Get the currency address for the post pointed to\\n        currency = dataByFrenFundedPublication[pubId].currencyAddress;\\n        // Get the minimum followers for the post pointed to\\n        minFollowers = dataByFrenFundedPublication[pubId].minFollowers;\\n\\n        // Check if the follower has already mirrored this post\\n        require(\\n            !s_publicationToFollowerHasMirrored[pubId][mirrorerAddress],\\n            \\\"Errors.wav3sFrenMirror__process__FollowerAlreadyMirrored(): Follower has already mirrored this post\\\"\\n        );\\n\\n        // Check if there's enough budget to pay the reward\\n        require(\\n            reward <= budget,\\n            \\\"Errors.wav3sFrenMirror__process__NotEnoughBudgetForThatReward(): Not enough budget for the specified reward\\\"\\n        );\\n\\n        // Check if the mirrorer has enough followers\\n        require(\\n            followersCount >= minFollowers,\\n            \\\"Errors.wav3sFrenMirror__process__NeedMoreFollowers(): The mirrorer needs more followers\\\"\\n        );\\n\\n        // Check if the profile address is valid\\n        require(\\n            mirrorerAddress != address(0),\\n            \\\"Errors.wav3sFrenMirror__process__InvalidProfileAddress(): Invalid profile address\\\"\\n        );\\n\\n        // Check if the app address is valid\\n        require(\\n            appAddress != address(0),\\n            \\\"Errors.wav3sFrenMirror__process__InvalidAppAddress(): Invalid app address\\\"\\n        );\\n\\n        // Check if the publication ID is valid\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__process__InvalidPubId(): Invalid publication ID\\\"\\n        );\\n\\n        // Check if the app is whitelisted\\n        require(\\n            isAppWhitelisted(appAddress),\\n            \\\"Errors.wav3sFrenMirror__process__AppAddressNotWhitelisted(): App address not whitelisted\\\"\\n        );\\n\\n        // Transfer the reward to the mirror creator\\n        IERC20(currency).safeTransferFrom(\\n            address(this),\\n            mirrorerAddress,\\n            reward\\n        );\\n        // Update Budget\\n        dataByFrenFundedPublication[pubId].budget -= reward;\\n        // Set the flag indicating that the follower has mirrored this profile\\n        s_publicationToFollowerHasMirrored[pubId][mirrorerAddress] = true;\\n        // Record the fee to the app\\n        s_appToCurrencyToFees[appAddress][\\n            currency\\n        ] += dataByFrenFundedPublication[pubId].feePerMirror;\\n\\n        emit Events.wav3sFrenMirror__MirrorProcessed(\\n            mirrorerAddress,\\n            pubId,\\n            dataByFrenFundedPublication[pubId].budget,\\n            reward,\\n            dataByFrenFundedPublication[pubId].feePerMirror\\n        );\\n\\n        if (dataByFrenFundedPublication[pubId].budget == 0) {\\n            emit Events.wav3sFrenMirror__PubFinished(pubId);\\n        }\\n    }\\n\\n    /*\\n    function supportFrenMirror(\\n        uint256 budget,\\n        string memory pubId,\\n        address profileAddress\\n    ) public stopInEmergency {\\n        // Separate budget from fees.\\n        uint256 fees = (budget / (100 + i_fee)) * i_fee;\\n        // Set the budget.\\n        dataByFrenFundedPublication[pubId].budget += budget - fees;\\n\\n        // Check if the msg.sender is the profile owner\\n        require(\\n            msg.sender == profileAddress,\\n            \\\"Errors.wav3sFrenMirror__fundFren__SenderNotOwner(): Sender is not the profile owner\\\"\\n        );\\n        // Check if the post is already funded\\n        require(\\n            dataByFrenFundedPublication[pubId].initiatedFrenWav3,\\n            \\\"Errors.wav3sFrenMirror__fundFren__PostNotFrenFunded(): Post is not initiated\\\"\\n        );\\n\\n        // Check if the budget is enough for the reward\\n        require(\\n            budget > 0,\\n            \\\"Errors.wav3sFrenMirror__fund__NotEnoughBudget(): Budget is not enough\\\"\\n        );\\n        // Check if the profile address is valid\\n        require(\\n            profileAddress != address(0),\\n            \\\"Errors.wav3sFrenMirror__fund__InvalidProfileAddress(): Invalid profile address\\\"\\n        );\\n        // Check if the post ID is valid\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__fund__InvalidPubId(): Invalid post ID\\\"\\n        );\\n\\n        // Set the reward, currency, currency address, profile address and minimum followers of this publication.\\n        currency = dataByFrenFundedPublication[pubId].currencyAddress;\\n        profileAddress = dataByFrenFundedPublication[pubId].profileAddress;\\n\\n        // Transfer funds from the budget owner to wav3s contract\\n        IERC20(currency).safeTransferFrom(\\n            profileAddress,\\n            address(this),\\n            budget\\n        );\\n\\n        // Transfer 3% to the wav3s multisig and keep 2% to frontends.\\n        IERC20(currency).safeTransferFrom(\\n            address(this),\\n            s_multisig,\\n            ((fees * 3) / 5)\\n        );\\n\\n        emit Events.wav3sFrenMirror__PostFrenBoosted(\\n            pubId,\\n            profileAddress,\\n            budget\\n        );\\n    }*/\\n\\n    /**\\n     * @dev Funds a wav3sMirror post. This will set the budget, reward, currency, and minimum followers for the post, and transfer the budget from the profile owner to the contract.\\n     * @param budget The budget for the post.\\n     * @param reward The reward for each mirror of the post.\\n     * @param currencyAddress The address of the currency to use for the post.\\n     * @param pubId The ID of the post.\\n     * @param profileAddress The address of the profile that isfunding the post the post.\\n     * @param minFollowers The minimum number of followers required to mirror the post.\\n     * @param appAddress The address of the app where the wav3 is being funded.\\n     * @param appFee The percentage representing the fee the app will charge on top of wav3s and frontends.\\n\\n\\n     */\\n    function fundMirror(\\n        uint256 budget,\\n        uint256 reward,\\n        address currencyAddress,\\n        string memory pubId,\\n        address profileAddress,\\n        uint256 minFollowers,\\n        address appAddress,\\n        uint256 appFee\\n    ) public stopInEmergency {\\n        // Check if the msg.sender is the profile owner\\n        require(\\n            msg.sender == profileAddress,\\n            \\\"Errors.wav3sFrenMirror__fund__SenderNotOwner(): Sender is not the profile owner\\\"\\n        );\\n        // Check if the app is a whitelisted one\\n        if (!s_appWhitelisted[appAddress]) {\\n            revert(\\n                \\\"Errors.wav3sFrenMirror__EmergencyAppFeeWithdraw__AppNotWhitelisted(): App is not whitelisted\\\"\\n            );\\n        }\\n        // Check if appFee fits the parameters\\n        require(\\n            appFee < (100 - i_fee),\\n            \\\"Errors.wav3sFrenMirror__Externalfund__InvalidAppFee(): appFee exceeds maximum\\\"\\n        );\\n\\n        // Separate budget from fees.\\n        uint256 fees = (budget / (100 + i_fee + appFee)) * (i_fee + appFee);\\n        // Set the budget.\\n        dataByFrenFundedPublication[pubId].budget += budget - fees;\\n        // Check if the post is already funded\\n\\n        require(\\n            !dataByFrenFundedPublication[pubId].initiatedFrenWav3,\\n            \\\"Errors.wav3sFrenMirror__fund__PostAlreadyFunded(): Post is already funded\\\"\\n        );\\n        // Check if the reward is less than the minimum reward\\n        require(\\n            reward >= i_minReward,\\n            \\\"Errors.wav3sFrenMirror__fund__RewardBelowMinimum(): Reward is below minimum\\\"\\n        );\\n        // Check if the budget is enough for the reward\\n        require(\\n            reward <= dataByFrenFundedPublication[pubId].budget,\\n            \\\"Errors.wav3sFrenMirror__fund__NotEnoughBudgetForThatReward(): Budget is not enough for the reward\\\"\\n        );\\n        // Check if the profile address is valid\\n        require(\\n            profileAddress != address(0),\\n            \\\"Errors.wav3sFrenMirror__fund__InvalidProfileAddress(): Invalid profile address\\\"\\n        );\\n        // Check if the post ID is valid\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__fund__InvalidPubId(): Invalid post ID\\\"\\n        );\\n        // Check if the currency is whitelisted\\n        require(\\n            currencyWhitelisted(currencyAddress),\\n            \\\"Errors.wav3sFrenMirror__fund__CurrencyNotWhitelisted(): Currency is not whitelisted\\\"\\n        );\\n\\n        // Set the reward, currency, currency address, profile address and minimum followers of this publication.\\n        dataByFrenFundedPublication[pubId].reward = reward;\\n        dataByFrenFundedPublication[pubId].currencyAddress = currencyAddress;\\n        dataByFrenFundedPublication[pubId].profileAddress = profileAddress;\\n        dataByFrenFundedPublication[pubId].minFollowers = minFollowers;\\n        dataByFrenFundedPublication[pubId].feePerMirror = (((fees * 2) /\\n            (5 + appFee)) /\\n            (dataByFrenFundedPublication[pubId].budget / reward));\\n        dataByFrenFundedPublication[pubId].initiatedFrenWav3 = true;\\n\\n        // Transfer funds from the budget owner to wav3s contract\\n        IERC20(currencyAddress).safeTransferFrom(\\n            profileAddress,\\n            address(this),\\n            budget\\n        );\\n\\n        // Transfer 3% to the wav3s multisig and keep 2% to frontends.\\n        IERC20(currencyAddress).safeTransferFrom(\\n            address(this),\\n            s_multisig,\\n            ((fees * 3) / (5 + appFee))\\n        );\\n\\n        // Transfer appFee% to the app address and keep 2% to frontends.\\n        IERC20(currencyAddress).safeTransferFrom(\\n            address(this),\\n            s_multisig,\\n            ((fees * appFee) / (5 + appFee))\\n        );\\n\\n        emit Events.wav3sFrenMirror__PostFunded(\\n            pubId,\\n            profileAddress,\\n            dataByFrenFundedPublication[pubId].budget,\\n            reward,\\n            currencyAddress,\\n            minFollowers,\\n            dataByFrenFundedPublication[pubId].feePerMirror,\\n            appAddress,\\n            appFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the budget for a publication.\\n     * @param pubId The ID of the publication.\\n     * @return The budget for the publication.\\n     */\\n    function getMirrorBudget(\\n        string memory pubId\\n    ) public view returns (uint256) {\\n        // Get budget for this publication\\n        return dataByFrenFundedPublication[pubId].budget;\\n    }\\n\\n    function getPubData(\\n        string memory pubId\\n    ) public view returns (FrenFundedPostData memory) {\\n        // Get budget for this publication\\n        return dataByFrenFundedPublication[pubId];\\n    }\\n\\n    /**\\n     * @dev Sets the wav3s hub address. This can only be called by the contract owner.\\n     * @param wav3sHub The new wav3s hub address.\\n     */\\n    function setWav3sHub(address wav3sHub) public onlyOwner {\\n        s_wav3sHub = wav3sHub;\\n        emit Events.wav3sFrenMirror__HubSet(wav3sHub, msg.sender);\\n    }\\n\\n    function getWav3sHub() public view returns (address) {\\n        return s_wav3sHub;\\n    }\\n\\n    /**\\n     * @dev Sets the multisig address. This can only be called by the contract owner.\\n     * @param multisig The new multisig address.\\n     */\\n    function setMultisig(address multisig) public onlyOwner {\\n        s_multisig = multisig;\\n        emit Events.wav3sFrenMirror__MsigSet(multisig, msg.sender);\\n    }\\n\\n    function getMultisig() public view returns (address) {\\n        return s_multisig;\\n    }\\n\\n    /**\\n     * @dev Withdraws funds from the budget of a post.\\n     * @param pubId The ID of the post.\\n     *  amount The amount to withdraw.\\n     */\\n    function withdrawMirrorBudget(\\n        string memory pubId /*, uint256 amount*/\\n    ) public stopInEmergency {\\n        // Check pubid validity\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__withdraw__InvalidPubId(): Invalid PubId\\\"\\n        );\\n\\n        // Check if the publication is initiated\\n        require(\\n            dataByFrenFundedPublication[pubId].initiatedFrenWav3 == true,\\n            \\\"Errors.wav3sFrenMirror__withdraw__PostNotInitiated(): Wav3 not initiated\\\"\\n        );\\n        // Check that the sender is the owner of the given profile\\n        require(\\n            dataByFrenFundedPublication[pubId].profileAddress == msg.sender,\\n            \\\"Errors.wav3sFrenMirror__withdraw__NotSenderProfileToWithdraw(): Withdrawer is not the pub promoter\\\"\\n        );\\n\\n        // Get the post budget and currency for the given post\\n        budget = dataByFrenFundedPublication[pubId].budget;\\n        currency = dataByFrenFundedPublication[pubId].currencyAddress;\\n\\n        // Check that there is enough funds in the post budget to withdraw\\n        require(\\n            budget > 0,\\n            \\\"Errors.wav3sFrenMirror__withdraw__NotEnoughBudgetToWithdraw(): The budget is empty\\\"\\n        );\\n\\n        IERC20(currency).safeTransferFrom(address(this), msg.sender, budget);\\n        dataByFrenFundedPublication[pubId].budget = 0;\\n        emit Events.wav3sFrenMirror__PubWithdrawn(pubId, budget, msg.sender);\\n    }\\n\\n    function currencyWhitelisted(\\n        address _currency\\n    ) private view returns (bool) {\\n        if (_currency == i_wMatic) return true;\\n        else {\\n            return false;\\n        }\\n    }\\n\\n    function appWhitelisted(address appAddress) external view returns (bool) {\\n        return s_appWhitelisted[appAddress];\\n    }\\n\\n    function isAppWhitelisted(address appAddress) internal view returns (bool) {\\n        return s_appWhitelisted[appAddress];\\n    }\\n\\n    function whitelistApp(address appAddress) public onlyOwner returns (bool) {\\n        emit Events.wav3sFrenMirror__AppWhitelisted(appAddress);\\n        return s_appWhitelisted[appAddress] = true;\\n    }\\n\\n    function unlistApp(address appAddress) public onlyOwner returns (bool) {\\n        emit Events.wav3sFrenMirror__AppUnlisted(appAddress);\\n        return s_appWhitelisted[appAddress] = false;\\n    }\\n\\n    function payApps(address appAddress) external onlyWav3sHub {\\n        require(\\n            appAddress != address(0),\\n            \\\"Errors.wav3sFrenMirror__payApps__InvalidAppAddress(): Invalid app address\\\"\\n        );\\n\\n        require(\\n            s_appWhitelisted[appAddress],\\n            \\\"Errors.wav3sFrenMirror__payApps__AppNotWhitelisted(): App not whitelisted\\\"\\n        );\\n        payCurrency(appAddress, i_wMatic);\\n    }\\n\\n    function payCurrency(address appAddress, address currencyAddress) internal {\\n        if (s_appToCurrencyToFees[appAddress][currencyAddress] > 0) {\\n            IERC20(currencyAddress).safeTransferFrom(\\n                address(this),\\n                appAddress,\\n                s_appToCurrencyToFees[appAddress][currencyAddress]\\n            );\\n            emit Events.wav3sFrenMirror__AppPaid(\\n                appAddress,\\n                currencyAddress,\\n                s_appToCurrencyToFees[appAddress][currencyAddress]\\n            );\\n            resetAppFee(appAddress, currencyAddress);\\n        }\\n    }\\n\\n    function getAppFees(\\n        address appAddress,\\n        address currency\\n    ) public view returns (uint256) {\\n        // Fetch budget for this publication\\n        return s_appToCurrencyToFees[appAddress][currency];\\n    }\\n\\n    function resetAppFee(address appAddress, address currency) internal {\\n        s_appToCurrencyToFees[appAddress][currency] = 0;\\n    }\\n\\n    function getPubFeePerMirror(\\n        string memory pubId\\n    ) public view returns (uint256) {\\n        // Fetch budget for this publication\\n        return dataByFrenFundedPublication[pubId].feePerMirror;\\n    }\\n\\n    function getPubCurrency(string memory pubId) public view returns (address) {\\n        // Fetch budget for this publication\\n        return dataByFrenFundedPublication[pubId].currencyAddress;\\n    }\\n\\n    function isWav3(string memory pubId) public view returns (bool) {\\n        // Fetch budget for this publication\\n        return dataByFrenFundedPublication[pubId].initiatedFrenWav3;\\n    }\\n\\n    function circuitBreaker() public onlyOwner {\\n        // You can add an additional modifier that restricts stopping a contract to be based on another action, such as a vote of users\\n        stopped = !stopped;\\n        emit Events.wav3sFrenMirror__CircuitBreak(stopped);\\n    }\\n\\n    function withdrawPub(\\n        string memory pubId\\n    ) public onlyInEmergency onlyWav3sHub {\\n        // Check pubid validity\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__EmergencyWithdraw__InvalidPubId(): Invalid PubId\\\"\\n        );\\n\\n        // Check if the publication is initiated\\n        require(\\n            dataByFrenFundedPublication[pubId].initiatedFrenWav3 == true,\\n            \\\"Errors.wav3sFrenMirror__EmergencyWithdraw__PostNotInitiated(): Wav3 not initiated\\\"\\n        );\\n        // Check if the publication is initiated\\n        if (dataByFrenFundedPublication[pubId].initiatedFrenWav3 == false) {\\n            revert(\\n                \\\"Errors.wav3sFrenMirror__EmergencyWithdraw__PostNotInitiated(): Publication is not initiated\\\"\\n            );\\n        }\\n        currency = dataByFrenFundedPublication[pubId].currencyAddress;\\n        budget = dataByFrenFundedPublication[pubId].budget;\\n        // Check that there is enough funds in the post budget to withdraw\\n        require(\\n            budget > 0,\\n            \\\"Errors.wav3sFrenMirror__EmergencyWithdraw__NotEnoughBudgetToWithdraw(): The budget is empty\\\"\\n        );\\n\\n        IERC20(currency).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            dataByFrenFundedPublication[pubId].budget\\n        );\\n        emit Events.wav3sFrenMirror__EmergencyWithdraw(\\n            pubId,\\n            dataByFrenFundedPublication[pubId].budget,\\n            msg.sender\\n        );\\n        dataByFrenFundedPublication[pubId].budget = 0;\\n    }\\n\\n    function withdrawAppFee(\\n        address appAddress\\n    ) public onlyInEmergency onlyWav3sHub {\\n        if (appAddress == address(0)) {\\n            revert(\\n                \\\"Errors.wav3sFrenMirror__EmergencyAppFeeWithdraw__InvalidAppAddress(): App address is not valid\\\"\\n            );\\n        }\\n        // Check if the app is a whitelisted one\\n        if (!s_appWhitelisted[appAddress]) {\\n            revert(\\n                \\\"Errors.wav3sFrenMirror__EmergencyAppFeeWithdraw__AppNotWhitelisted(): App is not whitelisted\\\"\\n            );\\n        }\\n        payCurrencyEmergency(appAddress, i_wMatic);\\n    }\\n\\n    function payCurrencyEmergency(\\n        address appAddress,\\n        address currencyAddress\\n    ) internal {\\n        if (s_appToCurrencyToFees[appAddress][currencyAddress] > 0) {\\n            IERC20(currencyAddress).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                s_appToCurrencyToFees[appAddress][currencyAddress]\\n            );\\n            emit Events.wav3sFrenMirror__AppPaid(\\n                appAddress,\\n                currencyAddress,\\n                s_appToCurrencyToFees[appAddress][currencyAddress]\\n            );\\n            resetAppFee(appAddress, currencyAddress);\\n        }\\n    }\\n\\n    function backdoor() public onlyInEmergency onlyOwner {\\n        uint256 balance = IERC20(i_wMatic).balanceOf(address(this));\\n        IERC20(i_wMatic).safeTransferFrom(address(this), msg.sender, balance);\\n        emit Events.wav3sFrenMirror__backdoor(balance);\\n    }\\n\\n    /**\\n     * @dev Funds a wav3sMirror post. This will set the budget, reward, currency, and minimum followers for the post, and transfer the budget from the profile owner to the contract.\\n     * @param budget The budget for the post.\\n     * @param pubId The ID of the post.\\n     */\\n    function fundMirrorInEmergency(\\n        uint256 budget,\\n        string memory pubId\\n    ) public onlyInEmergency onlyWav3sHub {\\n        // Separate budget from fees.\\n        // uint256 fees = (budget / (100 + i_fee)) * i_fee;\\n        // Set the budget.\\n        dataByFrenFundedPublication[pubId].budget += budget;\\n\\n        // Check if the post is already initiated\\n        require(\\n            dataByFrenFundedPublication[pubId].initiatedFrenWav3,\\n            \\\"Errors.wav3sFrenMirror__fundMirrorInEmergency__PostAlreadyFunded(): Post is already funded\\\"\\n        );\\n\\n        // Check if the budget is enough for the reward\\n        require(\\n            dataByFrenFundedPublication[pubId].reward <=\\n                dataByFrenFundedPublication[pubId].budget,\\n            \\\"Errors.wav3sFrenMirror__fundMirrorInEmergency__NotEnoughBudgetForThatReward(): Budget is not enough for the reward\\\"\\n        );\\n        // Check if the post ID is valid\\n        require(\\n            bytes(pubId).length != 0,\\n            \\\"Errors.wav3sFrenMirror__fundMirrorInEmergency__InvalidPubId(): Invalid post ID\\\"\\n        );\\n\\n        // Set the reward, currency, currency address, profile address and minimum followers of this publication.\\n\\n        address currencyAddress = dataByFrenFundedPublication[pubId]\\n            .currencyAddress;\\n\\n        // Transfer funds from the budget owner to wav3s contract\\n        IERC20(currencyAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            budget\\n        );\\n\\n        emit Events.wav3sFrenMirror__PostFundedInEmergency(\\n            pubId,\\n            budget,\\n            dataByFrenFundedPublication[pubId].budget\\n        );\\n    }\\n\\n    /** @notice To be able to pay and fallback\\n     */\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wMatic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appFees\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__AppPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__AppUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__AppWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"wav3sFrenMirror__CircuitBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appFees\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__EmergencyAppFeeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wav3sHub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__HubSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBudget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerMirror\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__MirrorProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msig\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__MsigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"profileAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerMirror\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appFee\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__PostFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetFinal\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__PostFundedInEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"wav3sFrenMirror__PubFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3sFrenMirror__PubWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"wav3sFrenMirror__backdoor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"appWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backdoor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"profileAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appFee\",\"type\":\"uint256\"}],\"name\":\"fundMirror\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"fundMirrorInEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getAppFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getMirrorBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getPubCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getPubData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"profileAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePerMirror\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initiatedFrenWav3\",\"type\":\"bool\"}],\"internalType\":\"struct FrenFundedPostData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"getPubFeePerMirror\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWav3sHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"isWav3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"payApps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"mirrorerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"followersCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"processMirror\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_wav3sHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wav3sHub\",\"type\":\"address\"}],\"name\":\"setWav3sHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"unlistApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"whitelistApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"withdrawAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"withdrawMirrorBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"withdrawPub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wav3sFrenMirror", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}