{"SourceCode": "// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/ERC721LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n    error ApprovalQueryForNonexistentToken();\r\n    error ApproveToCaller();\r\n    error ApprovalToCurrentOwner();\r\n    error BalanceQueryForZeroAddress();\r\n    error MintToZeroAddress();\r\n    error MintZeroQuantity();\r\n    error OwnerQueryForNonexistentToken();\r\n    error TransferCallerNotOwnerNorApproved();\r\n    error TransferFromIncorrectOwner();\r\n    error TransferToNonERC721ReceiverImplementer();\r\n    error TransferToZeroAddress();\r\n    error URIQueryForNonexistentToken();\r\n\r\ncontract ERC721LUXON is Context, ERC165, IERC721, IERC721Metadata, LuxOnSuperOperators {\r\n    string private baseURI = \"\";\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnSuperOperators(operator, luxOnAdmin) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n        bool burned;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint64 balance;\r\n        uint64 numberMinted;\r\n        uint64 numberBurned;\r\n        uint64 aux;\r\n    }\r\n\r\n    uint256 internal _currentIndex;\r\n    uint256 internal _burnCounter;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n    mapping(address => AddressData) private _addressData;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    function _startTokenId() internal pure returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n    unchecked {\r\n        return _currentIndex - _burnCounter - _startTokenId();\r\n    }\r\n    }\r\n\r\n    function _totalMinted() internal view returns (uint256) {\r\n    unchecked {\r\n        return _currentIndex - _startTokenId();\r\n    }\r\n    }\r\n\r\n    function nextTokenId() public view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return _addressData[owner].aux;\r\n    }\r\n\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        _addressData[owner].aux = aux;\r\n    }\r\n\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n    unchecked {\r\n        if (_startTokenId() <= curr && curr < _currentIndex) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (!ownership.burned) {\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n                while (true) {\r\n                    curr--;\r\n                    ownership = _ownerships[curr];\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721LUXON.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    unchecked {\r\n        _addressData[to].balance += uint64(quantity);\r\n        _addressData[to].numberMinted += uint64(quantity);\r\n\r\n        _ownerships[startTokenId].addr = to;\r\n        _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n        uint256 updatedIndex = startTokenId;\r\n        uint256 end = updatedIndex + quantity;\r\n\r\n        if (safe && to.isContract()) {\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n            } while (updatedIndex != end);\r\n            if (_currentIndex != startTokenId) revert();\r\n        } else {\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex++);\r\n            } while (updatedIndex != end);\r\n        }\r\n        _currentIndex = updatedIndex;\r\n    }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n        isApprovedForAll(from, _msgSender()) ||\r\n        getApproved(tokenId) == _msgSender() ||\r\n        isSuperOperator(_msgSender()));\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, from);\r\n\r\n    unchecked {\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n\r\n        TokenOwnership storage currSlot = _ownerships[tokenId];\r\n        currSlot.addr = to;\r\n        currSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n        uint256 _nextTokenId = tokenId + 1;\r\n        TokenOwnership storage nextSlot = _ownerships[_nextTokenId];\r\n        if (nextSlot.addr == address(0)) {\r\n            if (_nextTokenId != _currentIndex) {\r\n                nextSlot.addr = from;\r\n                nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        address from = prevOwnership.addr;\r\n\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isSuperOperator(_msgSender()));\r\n\r\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, from);\r\n\r\n    unchecked {\r\n        AddressData storage addressData = _addressData[from];\r\n        addressData.balance -= 1;\r\n        addressData.numberBurned += 1;\r\n\r\n        TokenOwnership storage currSlot = _ownerships[tokenId];\r\n        currSlot.addr = from;\r\n        currSlot.startTimestamp = uint64(block.timestamp);\r\n        currSlot.burned = true;\r\n\r\n        uint256 _nextTokenId = tokenId + 1;\r\n        TokenOwnership storage nextSlot = _ownerships[_nextTokenId];\r\n        if (nextSlot.addr == address(0)) {\r\n            if (_nextTokenId != _currentIndex) {\r\n                nextSlot.addr = from;\r\n                nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n    unchecked {\r\n        _burnCounter++;\r\n    }\r\n    }\r\n\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal {}\r\n\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal {}\r\n\r\n    function setBaseURI(string memory baseURI_) external onlyOwner {\r\n        baseURI = baseURI_;\r\n    }\r\n\r\n    function _baseURI() internal view returns (string memory) {\r\n        return baseURI;\r\n    }\r\n}\r\n\r\n// File: contracts/LUXON/myPage/character/LCT.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\ncontract LCT is ERC721LUXON {\r\n\r\n    event MintByCharacterName(address indexed mintUser, uint256 indexed tokenId, string indexed name);\r\n    event BurnCharacter(uint256 indexed tokenId, string indexed name);\r\n    event SetCharacterName(uint256 indexed tokenId, string indexed name);\r\n\r\n    struct Character {\r\n        uint256 tokenId;\r\n        string name;\r\n    }\r\n\r\n    constructor(\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) ERC721LUXON(\"Lux-On Character NFT\", \"LCT\", operator, luxOnAdmin) {}\r\n\r\n    mapping(uint256 => string) characterInfo;\r\n\r\n    function mintByCharacterName(address mintUser, uint256 quantity, string[] memory characterName) external onlySuperOperator {\r\n        require(characterName.length == quantity, \"quantity != gacha count\");\r\n        uint256 tokenId = nextTokenId();\r\n        for (uint8 i = 0; i < quantity; i++) {\r\n            emit MintByCharacterName(mintUser, tokenId, characterName[i]);\r\n            characterInfo[tokenId++] = characterName[i];\r\n        }\r\n        _safeMint(mintUser, quantity);\r\n    }\r\n\r\n    function mint(address mintUser, uint256 quantity) external onlySuperOperator {\r\n        _safeMint(mintUser, quantity);\r\n    }\r\n\r\n    function getCharacterInfo(uint256 tokenId) public view returns (string memory) {\r\n        return characterInfo[tokenId];\r\n    }\r\n\r\n    function getCharacterInfos(uint256[] memory tokenIds) public view returns (string[] memory) {\r\n        string[] memory names = new string[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            names[i] = characterInfo[tokenIds[i]];\r\n        }\r\n        return names;\r\n    }\r\n\r\n    function burnCharacter(uint256 tokenId) external onlySuperOperator {\r\n        _burn(tokenId);\r\n        emit BurnCharacter(tokenId, characterInfo[tokenId]);\r\n        delete characterInfo[tokenId];\r\n    }\r\n\r\n    function setCharacterName(Character[] memory _character) external onlySuperOperator {\r\n        for (uint256 i = 0; i < _character.length; i++) {\r\n            characterInfo[_character[i].tokenId] = _character[i].name;\r\n            emit SetCharacterName(_character[i].tokenId, _character[i].name);\r\n        }\r\n    }\r\n}\r\n// File: contracts/Admin/LuxOnAuthority.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAuthority is Ownable {\r\n    mapping (address => bool) blacklist;\r\n\r\n    event Blacklist(address userAddress, uint256 timestamp, bool live);\r\n\r\n    function isBlacklist(address user) public view returns (bool){\r\n        return blacklist[user];\r\n    }\r\n\r\n    function setBlacklist(address[] memory userAddresses, bool _isBlacklist) external onlyOwner {\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            blacklist[userAddresses[i]] = _isBlacklist;\r\n            emit Blacklist(userAddresses[i], block.timestamp, _isBlacklist);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/LUXON/utils/LuxOnBlacklist.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract LuxOnBlacklist is Ownable {\r\n    address private luxOnAuthority;\r\n\r\n    event SetLuxOnAuthority (address indexed luxOnAuthority);\r\n\r\n    constructor(\r\n        address _luxOnAuthority\r\n    ){\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getLuxOnAuthority() external view returns(address) {\r\n        return luxOnAuthority;\r\n    }\r\n\r\n    function setLuxOnAuthority(address _luxOnAuthority) external onlyOwner{\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getIsInBlacklist(address _userAddress) external view returns(bool) {\r\n        return LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress);\r\n    }\r\n\r\n    modifier isBlacklist(address _userAddress) {\r\n        // blacklist\uc5d0 \ub4f1\ub85d\ub41c \uc720\uc800 => true / \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc720\uc800 => false ---> !\ub97c \ubd99\uc5ec\uc11c \ubc18\ub300 \uac12\uc73c\ub85c \uc5d0\ub7ec \ubc1c\uc0dd (true\uba74 \uc5d0\ub7ec \ubc1c\uc0dd)\r\n        require(LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress) == false, \"LuxOnBlacklist: This user is on the blacklist\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/Admin/LuxOnService.sol\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\ncontract LuxOnService is Ownable {\r\n    mapping(address => bool) isInspection;\r\n\r\n    event Inspection(address contractAddress, uint256 timestamp, bool live);\r\n\r\n    function isLive(address contractAddress) public view returns (bool) {\r\n        return !isInspection[contractAddress];\r\n    }\r\n\r\n    function setInspection(address[] memory contractAddresses, bool _isInspection) external onlyOwner {\r\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\r\n            isInspection[contractAddresses[i]] = _isInspection;\r\n            emit Inspection(contractAddresses[i], block.timestamp, _isInspection);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnLive.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnLive is Ownable {\r\n    address private luxOnService;\r\n\r\n    event SetLuxOnService(address indexed luxOnService);\r\n\r\n    constructor(\r\n        address _luxOnService\r\n    ) {\r\n        luxOnService = _luxOnService;\r\n    }\r\n\r\n    function getLuxOnService() public view returns (address) {\r\n        return luxOnService;\r\n    }\r\n\r\n    function setLuxOnService(address _luxOnService) external onlyOwner {\r\n        luxOnService = _luxOnService;\r\n        emit SetLuxOnService(_luxOnService);\r\n    }\r\n\r\n    modifier isLive() {\r\n        require(LuxOnService(luxOnService).isLive(address(this)), \"LuxOnLive: not live\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/Admin/data/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n// File: contracts/LUXON/dao/ExchangeDaoPoint.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeDaoPoint is LuxOnData, LuxOnLive, LuxOnBlacklist {\r\n    event Exchange(address indexed userAddress, uint256 indexed tokenId);\r\n    address constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        address luxonService,\r\n        address luxonAuthority\r\n    ) LuxOnData(dataAddress) LuxOnLive(luxonService) LuxOnBlacklist(luxonAuthority){}\r\n\r\n    function exchangeDaoPoint(uint256[] memory tokenIds) public isLive isBlacklist(msg.sender) {\r\n        address lctAddress = getDataAddress(\"LCT\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            IERC721(lctAddress).transferFrom(msg.sender, burnAddress, tokenIds[i]);\r\n            emit Exchange(msg.sender, tokenIds[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnAuthority\",\"type\":\"address\"}],\"name\":\"SetLuxOnAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"}],\"name\":\"SetLuxOnService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"exchangeDaoPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getIsInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnAuthority\",\"type\":\"address\"}],\"name\":\"setLuxOnAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnService\",\"type\":\"address\"}],\"name\":\"setLuxOnService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeDaoPoint", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c530000000000000000000000008186780f64aa472c16874464d21485f60826c60d00000000000000000000000017cb56b0825a80402a52a67672cb0cfd50b0d483", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://929a46d8568cc920ef2ccb5b4cfd37f27e91d2e51d8ba7398da0c3b68c8f2980"}