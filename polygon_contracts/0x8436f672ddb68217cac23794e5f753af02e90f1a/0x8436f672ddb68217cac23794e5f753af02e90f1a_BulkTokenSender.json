{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BulkTokenSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n}\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract BulkTokenSender is ReentrancyGuard {\\n    address public admin;\\n    mapping(address => bool) public owners;\\n\\n    modifier onlyOwner() {\\n        require(owners[msg.sender] == true, \\\"BA: Unauthorised access\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        admin = _owner;\\n        owners[_owner] = true;\\n    }\\n\\n    event LogTokenBulkSent(\\n        address indexed tokenAddress,\\n        address indexed sender,\\n        uint256 totalAmount\\n    );\\n\\n    receive() external payable {}\\n\\n    function updateOwnerStatus(address _owner, bool _status) external {\\n        require(msg.sender == admin, \\\"BA: Unauthorised access\\\");\\n        owners[_owner] = _status;\\n    }\\n\\n    function bulksendToken(\\n        address _tokenAddress,\\n        address[] calldata _recipients,\\n        uint256[] calldata _values\\n    ) external payable nonReentrant {\\n        if (_tokenAddress == address(0)) {\\n            // If _tokenAddress is the zero address, it's for native (Ether) transfers\\n            require(\\n                msg.value >= calculateTotalValue(_values),\\n                \\\"Insufficient Ether sent\\\"\\n            );\\n            bulkTransferNative(_recipients, _values);\\n        } else {\\n            bulkTransferERC20(_tokenAddress, _recipients, _values);\\n        }\\n    }\\n\\n    function calculateTotalValue(\\n        uint256[] calldata _values\\n    ) internal pure returns (uint256 total) {\\n        for (uint256 i = 0; i < _values.length; ) {\\n            total += _values[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function bulkTransferNative(\\n        address[] calldata _recipients,\\n        uint256[] calldata _values\\n    ) internal {\\n        require(\\n            _recipients.length == _values.length,\\n            \\\"Arrays must have the same length\\\"\\n        );\\n        require(_recipients.length <= 400, \\\"Too many recipients\\\");\\n\\n        uint256 totalAmount = 0;\\n\\n        for (uint256 i = 0; i < _recipients.length; ) {\\n            address payable recipient = payable(_recipients[i]);\\n            uint256 value = _values[i];\\n\\n            require(recipient != address(0), \\\"Invalid recipient address\\\");\\n            require(value > 0, \\\"Value must be greater than zero\\\");\\n\\n            totalAmount += value;\\n\\n            // Perform the transfer\\n            (bool success, ) = recipient.call{value: value}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit LogTokenBulkSent(address(0), msg.sender, totalAmount);\\n    }\\n\\n    function bulkTransferERC20(\\n        address _tokenAddress,\\n        address[] calldata _recipients,\\n        uint256[] calldata _values\\n    ) internal {\\n        require(\\n            _recipients.length == _values.length,\\n            \\\"Arrays must have the same length\\\"\\n        );\\n        require(_recipients.length <= 400, \\\"Too many recipients\\\");\\n\\n        IERC20 token = IERC20(_tokenAddress);\\n\\n        uint256 totalAmount;\\n\\n        for (uint256 i = 0; i < _recipients.length; ) {\\n            address recipient = _recipients[i];\\n            uint256 value = _values[i];\\n\\n            require(value > 0, \\\"Value must be greater than zero\\\");\\n            totalAmount += value;\\n            require(\\n                token.allowance(msg.sender, address(this)) >= value,\\n                \\\"Allowance not sufficient\\\"\\n            );\\n\\n            require(\\n                token.transferFrom(msg.sender, recipient, value),\\n                \\\"Transfer failed\\\"\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit LogTokenBulkSent(_tokenAddress, msg.sender, totalAmount);\\n    }\\n\\n    function withdrawNativeToken() external onlyOwner nonReentrant {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = payable(admin).call{value: balance}(\\\"\\\");\\n        require(success, \\\"BA: Withdraw native token failed\\\");\\n    }\\n\\n    function withdrawERC20(IERC20 token) external onlyOwner nonReentrant {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(admin, balance));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"bulksendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateOwnerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BulkTokenSender", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002e925df8aa7cb146a97afc36ba5f91af5c80a7d4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}