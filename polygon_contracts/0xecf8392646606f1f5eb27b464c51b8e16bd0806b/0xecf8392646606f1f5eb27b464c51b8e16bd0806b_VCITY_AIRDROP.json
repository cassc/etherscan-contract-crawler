{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"airdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// \u7b2c\u4e94\u57ce\u7a7a\u6295\u667a\u80fd\u5408\u7ea6\\r\\ncontract VCITY_AIRDROP {\\r\\n\\r\\n    //\u7a7a\u6295\u6570\u636e\u7ed3\u6784\\r\\n    struct airdrop {\\r\\n        uint256 Total;\\r\\n        string Winner;\\r\\n    }\\r\\n\\r\\n    // \u5408\u7ea6\u521b\u5efa\u8005\\r\\n    address private owner;\\r\\n\\r\\n    // \u5386\u53f2\u7a7a\u6295\u6570\u636e\u67e5\u8be2\\r\\n    mapping(string => airdrop) public Data; \\r\\n     \\r\\n    //\u67e5\u8be2\u6700\u8fd1\u4e00\u6b21\u7a7a\u6295\u6570\u636e\u67e5\u8be2\\r\\n    string public Winner; \\r\\n\\r\\n    //\u53ea\u6709\u5408\u7ea6\u521b\u5efa\u8005\u624d\u53ef\u4ee5\u5f00\u5956\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //\u5f00\u5956\u529f\u80fd\\r\\n    function setRandomNumbers(string memory _date, uint _maxNumber) public onlyOwner {\\r\\n        \\r\\n        //\u6bcf\u671f\u5f00\u5956\u7684\u4eba\u6570\u5fc5\u987b\u5927\u4e8e3\uff0c\u624d\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\\r\\n        require(_maxNumber >= 3, \\\"Max number must be at least 3\\\");\\r\\n\\r\\n        // \u6bcf\u4e2a\u65e5\u671f\u53ea\u80fd\u5f00\u4e00\u6b21\u5956\\r\\n        require(keccak256(bytes(Data[_date].Winner)) == keccak256(bytes(\\\"\\\")), \\\"This date already generated\\\");\\r\\n\\r\\n        uint[] memory randomNumbers = new uint[](5);\\r\\n        string memory str = \\\"\\\";\\r\\n\\r\\n        //\u6bcf\u671f\u968f\u673a\u5f00\u59563\u4e2a\u53f7\u7801\\r\\n        for (uint i = 0; i < 3; i++) {\\r\\n\\r\\n            //\u751f\u6210\u968f\u673a\u53f7\u7801\\r\\n            uint newRandomNumber = (uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, i))) % _maxNumber) + 1;\\r\\n\\r\\n            while (isDuplicate(randomNumbers, newRandomNumber, i)) {\\r\\n                newRandomNumber = (uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, newRandomNumber))) % _maxNumber) + 1;\\r\\n            }\\r\\n\\r\\n            randomNumbers[i] = newRandomNumber;\\r\\n\\r\\n            if (i != 0) {\\r\\n                str = string(abi.encodePacked(str, \\\",\\\"));\\r\\n            }\\r\\n\\r\\n            str = string(abi.encodePacked(str, toString(newRandomNumber)));\\r\\n        }\\r\\n\\r\\n        //\u5c06\u603b\u53c2\u4e0e\u7684\u4eba\u6570\u548c\u83b7\u5956\u53f7\u7801\u52a0\u5165\u5386\u53f2\u6570\u636e\u4e2d\\r\\n        Data[_date].Total=_maxNumber;\\r\\n        Data[_date].Winner = str;  \\r\\n\\r\\n        //\u5b58\u50a8\u6700\u8fd1\u4e00\u671f\u83b7\u5956\u8005\u540d\u5355\\r\\n        Winner = string(abi.encodePacked(unicode\\\"\u65e5\u671f: \\\",_date, unicode\\\", \u53c2\u4e0e\u603b\u4eba\u6570: \\\", toString(_maxNumber), unicode\\\", \u4e2d\u5956\u53f7\u7801: \\\", str));\\r\\n\\r\\n    }\\r\\n\\r\\n    //\u68c0\u6d4b\u53f7\u7801\u662f\u5426\u6709\u91cd\u590d\\r\\n    function isDuplicate(uint[] memory _numbers, uint _newNumber, uint _length) internal pure returns (bool) {\\r\\n        for (uint i = 0; i < _length; i++) {\\r\\n            if (_numbers[i] == _newNumber) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    //\u6570\u5b57\u8f6c\u5b57\u7b26\u4e32\\r\\n    function toString(uint _i) internal pure returns (string memory) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint length;\\r\\n        while (j != 0) {\\r\\n            length++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(length);\\r\\n        uint k = length;\\r\\n        while (_i != 0) {\\r\\n            bstr[--k] = bytes1(uint8(48 + _i % 10));\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Winner\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Winner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"}],\"name\":\"setRandomNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VCITY_AIRDROP", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}