{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/factory/ContributionPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IContributionPool} from \\\"../interface/pjmanager/IContributionPool.sol\\\";\\nimport {ContributionPool} from \\\"../pjmanager/ContributionPool.sol\\\";\\nimport {IQuestryPlatform} from \\\"../interface/platform/IQuestryPlatform.sol\\\";\\n\\n/**\\n * @dev Factory contract for ContributionPool.\\n */\\ncontract ContributionPoolFactory {\\n  event PoolCreated(\\n    address indexed businessOwner,\\n    address pool,\\n    IContributionPool.MutationMode mode,\\n    address indexed contributionUpdater,\\n    address indexed admin\\n  );\\n\\n  IQuestryPlatform public questryPlatform;\\n  mapping(address => IContributionPool[]) public poolsByBusinessOwners;\\n\\n  constructor(IQuestryPlatform _questryPlatform) {\\n    questryPlatform = _questryPlatform;\\n  }\\n\\n  /**\\n   * @dev Creates a new ContributionPool contract.\\n   * msg.sender must be business owner of PJManager.\\n   *\\n   * Emits a {PoolCreated} event\\n   */\\n  function createPool(\\n    IContributionPool.MutationMode _mode,\\n    address _contributionUpdater,\\n    address _admin\\n  ) external returns (IContributionPool pool) {\\n    pool = new ContributionPool(\\n      questryPlatform,\\n      _mode,\\n      _contributionUpdater,\\n      _admin\\n    );\\n    poolsByBusinessOwners[msg.sender].push(pool);\\n    emit PoolCreated(\\n      msg.sender,\\n      address(pool),\\n      _mode,\\n      _contributionUpdater,\\n      _admin\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns ContributionPool contracts which `businessOwner` created.\\n   */\\n  function getPools(address _businessOwner)\\n    external\\n    view\\n    returns (IContributionPool[] memory)\\n  {\\n    return poolsByBusinessOwners[_businessOwner];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/pjmanager/IContributionPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IContributionPool {\\n  event AddContribution(address indexed member, uint120 value);\\n  event BulkAddContribution(address[] members, uint120[] values);\\n  event SubtractContribution(address indexed member, uint120 value);\\n  event BulkSubtractContribution(address[] members, uint120[] values);\\n  event SetContribution(address indexed member, uint120 value);\\n  event BulkSetContribution(address[] members, uint120[] values);\\n\\n  /**\\n   * @dev Restrictions for contribution state mutations.\\n   * Anyone can never subtract boarding members' contributions if mode is AddOnlyAccess.\\n   */\\n  enum MutationMode {\\n    AddOnlyAccess, // Only `addContribution`, `bulkAddContribution` operations allowed.\\n    FullControl // All operations allowed.\\n  }\\n\\n  /**\\n   * @dev Adds `contribution` to `member`.\\n   *\\n   * Emits {AddContribution}\\n   */\\n  function addContribution(address _member, uint120 _value) external;\\n\\n  /**\\n   * @dev Bulk adds `contributions` to `members`.\\n   *\\n   * Emits {BulkAddContribution}\\n   */\\n  function bulkAddContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external;\\n\\n  /**\\n   * @dev Subtracts `contribution` from `member`.\\n   *\\n   * Emits {SubtractContribution}\\n   */\\n  function subtractContribution(address _member, uint120 _value) external;\\n\\n  /**\\n   * @dev Bulk subtracts `contributions` from `members`.\\n   *\\n   * Emits {BulkSubtractContribution}\\n   */\\n  function bulkSubtractContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external;\\n\\n  /**\\n   * @dev Sets `contribution` to `member`.\\n   *\\n   * Emits {SetContribution}\\n   */\\n  function setContribution(address _member, uint120 _value) external;\\n\\n  /**\\n   * @dev Bulk sets `contributions` to `members`.\\n   *\\n   * Emits {BulkSetContribution}\\n   */\\n  function bulkSetContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external;\\n\\n  /**\\n   * @dev Increments the accumulation period for contributions by checking if the `_verifiedSigners`\\n   * have the execution permission.\\n   */\\n  function incrementTerm(address[] memory _verifiedSigners) external;\\n\\n  /**\\n   * @dev Gets contribution of `_member`.\\n   */\\n  function getContribution(address _member) external view returns (uint120);\\n\\n  /**\\n   * @dev Returns the accumulation period for contributions.\\n   */\\n  function getTerm() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pjmanager/ContributionPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {IContributionPool} from \\\"../interface/pjmanager/IContributionPool.sol\\\";\\nimport {LibPJManager} from \\\"../library/LibPJManager.sol\\\";\\nimport {IQuestryPlatform} from \\\"../interface/platform/IQuestryPlatform.sol\\\";\\n\\ncontract ContributionPool is IContributionPool, AccessControl {\\n  using Counters for Counters.Counter;\\n\\n  uint256 public constant DEFAULT_THRESHOLD = 1;\\n  IContributionPool.MutationMode public immutable mode;\\n  uint256 public threshold;\\n  mapping(uint256 => mapping(address => uint120)) public contributions; // term => member => value\\n  Counters.Counter public term;\\n\\n  constructor(\\n    IQuestryPlatform _questryPlatform,\\n    IContributionPool.MutationMode _mode,\\n    address _contributionUpdater,\\n    address _admin\\n  ) {\\n    mode = _mode;\\n    _setThreshold(DEFAULT_THRESHOLD);\\n\\n    _setupRole(\\n      LibPJManager.PJ_PLATFORM_EXCLUSIVE_ROLE,\\n      address(_questryPlatform)\\n    );\\n\\n    _setupRole(\\n      LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE,\\n      _contributionUpdater\\n    );\\n\\n    _setupRole(LibPJManager.POOL_ADMIN_ROLE, _admin);\\n    _setupRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE, _admin);\\n    _setRoleAdmin(\\n      LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE,\\n      LibPJManager.POOL_ADMIN_ROLE\\n    );\\n    _setRoleAdmin(\\n      LibPJManager.POOL_VERIFY_SIGNER_ROLE,\\n      LibPJManager.POOL_ADMIN_ROLE\\n    );\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function addContribution(address _member, uint120 _value)\\n    external\\n    onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE)\\n  {\\n    _addContribution(_member, _value);\\n    emit AddContribution(_member, _value);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function bulkAddContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE) {\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      _addContribution(_members[i], _values[i]);\\n    }\\n    emit BulkAddContribution(_members, _values);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function subtractContribution(address _member, uint120 _value)\\n    external\\n    onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE)\\n  {\\n    require(\\n      mode == IContributionPool.MutationMode.FullControl,\\n      \\\"ContributionPool: operation not allowed\\\"\\n    );\\n    _subtractContribution(_member, _value);\\n    emit SubtractContribution(_member, _value);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function bulkSubtractContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE) {\\n    require(\\n      mode == IContributionPool.MutationMode.FullControl,\\n      \\\"ContributionPool: operation not allowed\\\"\\n    );\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      _subtractContribution(_members[i], _values[i]);\\n    }\\n    emit BulkSubtractContribution(_members, _values);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function setContribution(address _member, uint120 _value)\\n    external\\n    onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE)\\n  {\\n    require(\\n      mode == IContributionPool.MutationMode.FullControl,\\n      \\\"ContributionPool: operation not allowed\\\"\\n    );\\n    _setContribution(_member, _value);\\n    emit SetContribution(_member, _value);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function bulkSetContribution(\\n    address[] calldata _members,\\n    uint120[] calldata _values\\n  ) external onlyRole(LibPJManager.POOL_CONTRIBUTION_UPDATER_ROLE) {\\n    require(\\n      mode == IContributionPool.MutationMode.FullControl,\\n      \\\"ContributionPool: operation not allowed\\\"\\n    );\\n    for (uint256 i = 0; i < _members.length; i++) {\\n      _setContribution(_members[i], _values[i]);\\n    }\\n    emit BulkSetContribution(_members, _values);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function incrementTerm(address[] memory _verifiedSigners)\\n    external\\n    onlyRole(LibPJManager.PJ_PLATFORM_EXCLUSIVE_ROLE)\\n  {\\n    uint8 verifiedCount = 0;\\n    for (uint256 i = 0; i < _verifiedSigners.length; i++) {\\n      if (_isIncrementTermSigner(_verifiedSigners[i])) {\\n        verifiedCount++;\\n      }\\n    }\\n    require(\\n      verifiedCount >= _getThreshold(),\\n      \\\"ContributionPool: insufficient whitelisted signers\\\"\\n    );\\n    term.increment();\\n  }\\n\\n  /**\\n   * @dev Sets the threshold for increment term.\\n   */\\n  function setThreshold(uint256 _threshold)\\n    external\\n    onlyRole(LibPJManager.POOL_ADMIN_ROLE)\\n  {\\n    _setThreshold(_threshold);\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function getContribution(address _member) external view returns (uint120) {\\n    return contributions[term.current()][_member];\\n  }\\n\\n  /// @inheritdoc IContributionPool\\n  function getTerm() external view returns (uint256) {\\n    return term.current();\\n  }\\n\\n  /**\\n   * @dev Returns whether the `_account` is in the increment term whitelist.\\n   */\\n  function isIncrementTermSigner(address _account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _isIncrementTermSigner(_account);\\n  }\\n\\n  /**\\n   * @dev Returns the threshold for increment term.\\n   */\\n  function getThreshold() external view returns (uint256) {\\n    return _getThreshold();\\n  }\\n\\n  function _addContribution(address _member, uint120 _value) private {\\n    contributions[term.current()][_member] += _value;\\n  }\\n\\n  function _subtractContribution(address _member, uint120 _value) private {\\n    contributions[term.current()][_member] -= _value;\\n  }\\n\\n  function _setContribution(address _member, uint120 _value) private {\\n    contributions[term.current()][_member] = _value;\\n  }\\n\\n  function _setThreshold(uint256 _threshold) private {\\n    threshold = _threshold;\\n  }\\n\\n  function _getThreshold() private view returns (uint256) {\\n    return threshold;\\n  }\\n\\n  function _isIncrementTermSigner(address _account)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return\\n      hasRole(LibPJManager.POOL_VERIFY_SIGNER_ROLE, _account) ||\\n      hasRole(LibPJManager.POOL_ADMIN_ROLE, _account);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/platform/IQuestryPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {LibQuestryPlatform} from \\\"../../library/LibQuestryPlatform.sol\\\";\\n\\ninterface IQuestryPlatform {\\n  /**\\n   * @dev Allocates tokens to business owners, boarding members and DAO treasury pool.\\n   */\\n  function allocate(\\n    LibQuestryPlatform.AllocateArgs calldata _args,\\n    bytes[] calldata _AllcatorSigns\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/LibPJManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Library for PJManager. Defines constants, validations and create signatures.\\n */\\nlibrary LibPJManager {\\n  bytes32 public constant PJ_PLATFORM_EXCLUSIVE_ROLE =\\n    keccak256(\\\"PJ_PLATFORM_EXCLUSIVE_ROLE\\\");\\n  bytes32 public constant PJ_BOARD_EXCLUSIVE_ROLE =\\n    keccak256(\\\"PJ_BOARD_EXCLUSIVE_ROLE\\\");\\n  bytes32 public constant PJ_ADMIN_ROLE = keccak256(\\\"PJ_ADMIN_ROLE\\\");\\n  bytes32 public constant PJ_MANAGEMENT_ROLE = keccak256(\\\"PJ_MANAGEMENT_ROLE\\\");\\n  bytes32 public constant PJ_WHITELIST_ROLE = keccak256(\\\"PJ_WHITELIST_ROLE\\\");\\n  bytes32 public constant PJ_VERIFY_SIGNER_ROLE = keccak256(\\\"PJ_VERIFY_SIGNER\\\");\\n\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256(\\\"POOL_ADMIN_ROLE\\\");\\n  bytes32 public constant POOL_CONTRIBUTION_UPDATER_ROLE =\\n    keccak256(\\\"POOL_CONTRIBUTION_UPDATER_ROLE\\\");\\n  bytes32 public constant POOL_VERIFY_SIGNER_ROLE =\\n    keccak256(\\\"POOL_VERIFY_SIGNER_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/library/LibQuestryPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPJManager} from \\\"../interface/pjmanager/IPJManager.sol\\\";\\nimport {IContributionPool} from \\\"../interface/pjmanager/IContributionPool.sol\\\";\\nimport {IBoard} from \\\"../interface/token/IBoard.sol\\\";\\n\\n/**\\n * @dev Library for QuestryPlatform.\\n */\\nlibrary LibQuestryPlatform {\\n  bytes4 public constant NATIVE_PAYMENT_MODE = bytes4(keccak256(\\\"NATIVE\\\"));\\n  bytes4 public constant ERC20_PAYMENT_MODE = bytes4(keccak256(\\\"ERC20\\\"));\\n\\n  bytes4 public constant COMMON_PAYMENT_CATEGORY =\\n    bytes4(keccak256(\\\"COMMON_PAYMENT_CATEGORY\\\"));\\n  bytes4 public constant INVESTMENT_PAYMENT_CATEGORY =\\n    bytes4(keccak256(\\\"INVESTMENT_PAYMENT_CATEGORY\\\"));\\n  bytes4 public constant PROTOCOL_PAYMENT_CATEGORY =\\n    bytes4(keccak256(\\\"PROTOCOL_PAYMENT_CATEGORY\\\"));\\n\\n  // ---- Role ----\\n  bytes32 public constant PLATFORM_ADMIN_ROLE =\\n    keccak256(\\\"PLATFORM_ADMIN_ROLE\\\");\\n  bytes32 public constant PLATFORM_EXECUTOR_ROLE =\\n    keccak256(\\\"PLATFORM_EXECUTOR_ROLE\\\");\\n\\n  // ---- Struct ----\\n\\n  struct FeeRates {\\n    uint32 common;\\n    uint32 investment;\\n    uint32 protocol;\\n  }\\n\\n  struct AllocateArgs {\\n    IPJManager pjManager;\\n    bytes4 paymentMode; // determines to allocate native or ERC20 token\\n    IERC20 paymentToken; // ERC20 token to allocate. Ignored if paymentMode == NATIVE_PAYMENT_MODE (TODO: Check zero-address if paymentMode == NATIVE_PAYMENT_MODE)\\n    CalculateDispatchArgs calculateArgs; // allocation calculation args\\n    IContributionPool[] updateNeededPools; // term update needed pools\\n    uint256 pjnonce;\\n  }\\n\\n  struct ExecutePaymentArgs {\\n    bytes4 paymentMode; // determines to pay with whether native or ERC20 token\\n    IERC20 paymentToken; // ERC20 token to allocate. It must be zero-address if paymentMode == NATIVE_PAYMENT_MODE\\n    bytes4 paymentCategory; // common, investment, or protocol payment\\n    IPJManager pjManager;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 nonce; // nonce for replay attack protection\\n  }\\n\\n  /**\\n   * @dev Result type of calculation functions.\\n   */\\n  struct SharesResult {\\n    uint120[] shares;\\n    uint120 totalShare;\\n  }\\n\\n  /**\\n   * @dev Argments for linear allocation algorithm.\\n   */\\n  struct SharesWithLinearArgs {\\n    IBoard[] boards;\\n    uint120[] coefs;\\n  }\\n\\n  /**\\n   * @dev Arguments for CalculteDispatch\\n   */\\n  struct CalculateDispatchArgs {\\n    bytes4 algorithm; // calculation algorithm for the board.\\n    bytes args; // arguments for the calculation algorithm.\\n  }\\n\\n  // ---- EIP712 ----\\n  bytes32 private constant AllOCATE_TYPEHASH =\\n    keccak256(\\n      \\\"AllocateArgs(address pjManager,bytes4 paymentMode,address paymentToken,CalculateDispatchArgs calculateArgs,address[] updateNeededPools,uint256 pjnonce)CalculateDispatchArgs(bytes4 algorithm,bytes args)\\\"\\n    );\\n\\n  bytes32 private constant CALCURATEDISPATCHARGS_TYPEHASH =\\n    keccak256(\\\"CalculateDispatchArgs(bytes4 algorithm,bytes args)\\\");\\n\\n  bytes32 private constant EXECUTEPAYMENTARGS_TYPEHASH =\\n    keccak256(\\n      \\\"ExecutePaymentArgs(bytes4 paymentMode,address paymentToken,bytes4 paymentCategory,address pjManager,address from,address to,uint256 amount,uint256 nonce)\\\"\\n    );\\n\\n  /**\\n   * @dev Prepares keccak256 hash for Allocate\\n   *\\n   * @param _allocateargs LibQuestryPlatform.AllocateArgs\\n   */\\n  function _hashAllocate(AllocateArgs calldata _allocateargs)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encode(\\n          AllOCATE_TYPEHASH,\\n          _allocateargs.pjManager,\\n          _allocateargs.paymentMode,\\n          _allocateargs.paymentToken,\\n          _hashCalculateDispatchArgs(_allocateargs.calculateArgs),\\n          keccak256(abi.encodePacked(_allocateargs.updateNeededPools)),\\n          _allocateargs.pjnonce\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for CalculateDispatchArgs\\n   *\\n   * @param _calculatedispatchargs LibQuestryPlatform.CalculateDispatchArgs\\n   */\\n  function _hashCalculateDispatchArgs(\\n    CalculateDispatchArgs calldata _calculatedispatchargs\\n  ) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          CALCURATEDISPATCHARGS_TYPEHASH,\\n          _calculatedispatchargs.algorithm,\\n          keccak256(_calculatedispatchargs.args)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for ExecutePaymentArgs\\n   *\\n   * @param _executePaymentArgs LibQuestryPlatform.ExecutePaymentArgs\\n   */\\n  function _hashExecutePaymentArgs(\\n    ExecutePaymentArgs calldata _executePaymentArgs\\n  ) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EXECUTEPAYMENTARGS_TYPEHASH,\\n          _executePaymentArgs.paymentMode,\\n          _executePaymentArgs.paymentToken,\\n          _executePaymentArgs.paymentCategory,\\n          _executePaymentArgs.pjManager,\\n          _executePaymentArgs.from,\\n          _executePaymentArgs.to,\\n          _executePaymentArgs.amount,\\n          _executePaymentArgs.nonce\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev validation check\\n   */\\n  function _checkParameterForAllocation(AllocateArgs calldata _allocateargs)\\n    internal\\n  {\\n    //pjmaneger validation\\n    require(\\n      address(_allocateargs.pjManager) != address(0),\\n      \\\"LibQuestryPlatform: PJManager is Invalid\\\"\\n    );\\n    //paymnet mode validation\\n    require(\\n      bytes4(_allocateargs.paymentMode) != bytes4(0),\\n      \\\"LibQuestryPlatform: PaymentMode is Invalid\\\"\\n    );\\n\\n    //Whitelist check\\n    if (_allocateargs.paymentMode == ERC20_PAYMENT_MODE) {\\n      //paymnet Token Address validation\\n      require(\\n        address(_allocateargs.paymentToken) != address(0),\\n        \\\"LibQuestryPlatform: payment Token Address is Invalid\\\"\\n      );\\n      // Whitelist check\\n      // EM: BuyOrder paymentToken not whitelisted\\n      require(\\n        _allocateargs.pjManager.isWhitelisted(_allocateargs.paymentToken),\\n        \\\"LibQuestryPlatform: Is not PJ Whitelist token\\\"\\n      );\\n    }\\n\\n    /**\\n     * @dev : Calcurator args is validation skip\\n     */\\n\\n    //calcuration pool element check &ContributePool Owner check\\n    require(\\n      _allocateargs.updateNeededPools.length > 0,\\n      \\\"LibQuestryPlatform: contribution pool is zero\\\"\\n    );\\n    //Contributioonpool check\\n    for (uint256 idx = 0; idx < _allocateargs.updateNeededPools.length; idx++) {\\n      require(\\n        address(_allocateargs.updateNeededPools[idx]) != address(0),\\n        \\\"LibQuestryPlatform: contribution pool address is invalid\\\"\\n      );\\n    }\\n    require(\\n      _allocateargs.pjManager.getNonce() == _allocateargs.pjnonce,\\n      \\\"LibQuestryPlatform: message nonce is different from on-chain nonce\\\"\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/pjmanager/IPJManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {LibQuestryPlatform} from \\\"../../library/LibQuestryPlatform.sol\\\";\\nimport {LibPJManager} from \\\"../../library/LibPJManager.sol\\\";\\n\\ninterface IPJManager {\\n  event AddBusinessOwner(address owner, uint120 share);\\n  event RemoveBusinessOwner(address owner);\\n  event UpdateBusinessOwner(address owner, uint120 share);\\n  event RegisterBoard(address board);\\n  event Deposit(address depositer, uint256 netAmount);\\n  event DepositERC20(address token, address depositer, uint256 netAmount);\\n  event AllowERC20(address token);\\n  event DisallowERC20(address token);\\n\\n  /**\\n   * @dev Deposits an amount into the pool.\\n   *\\n   * Emits a {Deposit} or {DepositERC20} event.\\n   */\\n  function deposit(\\n    bytes4 _paymentMode,\\n    IERC20 _paymentToken,\\n    address _from,\\n    uint256 _amount\\n  ) external payable;\\n\\n  /**\\n   * @dev Withdraws for allocation.\\n   */\\n  function withdrawForAllocation(\\n    bytes4 paymentMode,\\n    IERC20 paymentToken,\\n    address receiver,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @dev Sets a new boarding `_member` and generate a unique board ID for the `_board` and `_tokenId` combination.\\n   */\\n  function assignBoardingMember(\\n    address _member,\\n    address _board,\\n    uint256 _tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Resolve unique boardId in the project from `_board` and `_tokenId` pair.\\n   */\\n  function resolveBoardId(address _board, uint256 _tokenId)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev verify signature.\\n   * Returns the signers recovered from signatures and verified their roles.\\n   */\\n  function verifySignature(\\n    LibQuestryPlatform.AllocateArgs calldata _args,\\n    bytes[] calldata _signatures\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Get PJManager signature nonce\\n   */\\n  function getNonce() external view returns (uint256);\\n\\n  /**\\n   * @dev Get PJManager signature verify threshold\\n   */\\n  function getThreshold() external view returns (uint256);\\n\\n  /**\\n   * @dev Increment nonce for signature.\\n   */\\n  function incrementNonce() external;\\n\\n  /**\\n   * @dev Returns the businessOwner.\\n   */\\n  function getBusinessOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns `boardingMembersProportion`.\\n   */\\n  function getBoardingMembersProportion() external view returns (uint32);\\n\\n  /**\\n   * @dev Returns if there are any boarding members in this project.\\n   */\\n  function boardingMembersExist() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the list of board members across all boards in this project.\\n   */\\n  function getBoardingMembers() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns token whitelists.\\n   */\\n  function getTokenWhitelists() external view returns (IERC20[] memory);\\n\\n  /**\\n   * @dev Returns if `_token` is whitelisted or not.\\n   */\\n  function isWhitelisted(IERC20 _token) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the total balance based on the specified `_paymentMode` and `_paymentToken`.\\n   */\\n  function getTotalBalance(bytes4 _paymentMode, IERC20 _paymentToken)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev The denominator for boarding member proportion.\\n   */\\n  function getBoardingMemberProportionDenominator()\\n    external\\n    pure\\n    returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/token/IBoard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IContributionPool} from \\\"contracts/interface/pjmanager/IContributionPool.sol\\\";\\n\\n/**\\n * @title Board interface\\n */\\ninterface IBoard {\\n  /**\\n   * @dev Creates a new token for `to`. Its token ID will be automatically\\n   * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n   * URI autogenerated based on the base URI passed at construction.\\n   *\\n   * See {ERC721-_mint}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `MINTER_ROLE`.\\n   */\\n  function mint(address _to) external;\\n\\n  /**\\n   * @dev Bulk mint new tokens for `tos`.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `MINTER_ROLE`.\\n   */\\n  function bulkMint(address[] calldata _tos) external;\\n\\n  /**\\n   * @dev Burn `_tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `BURNER_ROLE`.\\n   */\\n  function burn(uint256 _tokenId) external;\\n\\n  /**\\n   * @dev Bulk burn `_tokenIds` tokens.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the `BURNER_ROLE`.\\n   */\\n  function bulkBurn(uint256[] calldata _tokenIds) external;\\n\\n  /**\\n   * @dev Return if any boarding member exists or not.\\n   */\\n  function boardingMembersExist() external returns (bool);\\n\\n  /**\\n   * @dev Return all boarding members.\\n   */\\n  function getBoardingMembers() external returns (address[] memory);\\n\\n  /**\\n   * @dev Returns if `_account` has the token, in other words, it is a boarding member.\\n   * Note that only one token can be minted from the same Board contract per account.\\n   */\\n  function isBoardingMember(address _account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns contribution pool associated with the board.\\n   */\\n  function getContributionPool() external view returns (IContributionPool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IQuestryPlatform\",\"name\":\"_questryPlatform\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"businessOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IContributionPool.MutationMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributionUpdater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IContributionPool.MutationMode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_contributionUpdater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"contract IContributionPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_businessOwner\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"contract IContributionPool[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsByBusinessOwners\",\"outputs\":[{\"internalType\":\"contract IContributionPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questryPlatform\",\"outputs\":[{\"internalType\":\"contract IQuestryPlatform\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ContributionPoolFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000f16d56f9f4c1ab982da461a1186bc605b68ef02f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}