{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interest-rate-models/CurvedRateModel.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\n\\n/**\\n * @title 0VIX's JumpRateModel Contract\\n * @author 0VIX\\n */\\ncontract CurvedRateModel is IInterestRateModel {\\n    bool public constant override isInterestRateModel = true;\\n    uint256 public constant timestampsPerYear = 31536000;\\n    /**\\n     * @notice borrow APR at Optimal utilization point (10%)\\n     */\\n    uint256 internal constant borrowAPRAtOptUtil = 0.1e18;\\n    /**\\n     * @notice optimal utilization point (80%)\\n     */\\n    uint256 internal constant optUtil = 0.8e18;\\n    /**\\n     * @notice borrow APR at 100% utilization (100%)\\n     */\\n    uint256 internal constant maxBorrowAPR = 1e18;\\n\\n    /**\\n     * @notice The utilization point at which the curved multiplier is applied\\n     */\\n    uint256 internal constant kink = 0.6e18;\\n\\n    uint256 internal constant paramA = 0.125e18; //  0.1/0.8\\n    uint256 internal constant paramB = 0.875e18; // 1 - (0.1 / 0.8)\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return (borrows * 1e18) / (cash + borrows - reserves);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per timestmp, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return borrowAPR The borrow rate percentage per timestmp as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure override returns (uint256 borrowAPR) {\\n        uint256 util = utilizationRate(cash, borrows, reserves);\\n        //Making utils to the power of 18 while taking decimals out\\n        uint256 util18;\\n        if (util > kink) {\\n            //util^2\\n            uint256 util2 = (util * util) / 1e18;\\n            //util^4\\n            util18 = (util2 * util2) / 1e18;\\n            //util^8\\n            util18 = (util18 * util18) / 1e18;\\n            //util^16\\n            util18 = (util18 * util18) / 1e18;\\n            //util^18\\n            util18 = (util18 * util2) / 1e18;\\n        }\\n        borrowAPR = ((util * paramA) + (util18 * paramB)) / 1e18;\\n        borrowAPR /= timestampsPerYear;\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per timestmp\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return supplyRate The supply rate percentage per timestmp as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) public pure override returns (uint256 supplyRate) {\\n        uint256 oneMinusReserveFactor = uint256(1e18) - reserveFactorMantissa;\\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / 1e18;\\n        supplyRate =\\n            (utilizationRate(cash, borrows, reserves) * rateToPool) /\\n            1e18;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interest-rate-models/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n  * @title 0VIX's IInterestRateModel Interface\\n  * @author 0VIX\\n  */\\ninterface IInterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    function isInterestRateModel() external view returns(bool);\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per timestmp\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per timestmp (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per timestmp\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per timestmp (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAPR\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampsPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CurvedRateModel", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}