{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.10;\r\n\r\ncontract FFINetworkV2 {\r\n\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n    // only people with tokens\r\n    modifier onlybelievers () {\r\n        require(_myTokens() > 0,\"No Token Balance ?\");\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyholder() {\r\n        require(_dividendOf() > 0 || _referralOf()>0 || _communityWalletBalance()>0 || _stakingWalletBalance()>0 || _rewardWalletBalance()>0 || _stakingBonus()>0,\"No Divident Or No Other Income ?\");\r\n        _;\r\n    }\r\n    \r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress],\"Not An Owner ?\");\r\n        _;\r\n    } \r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    //Personalized Logic\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingMatic,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenRePurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingMatic,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 maticEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 maticReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 maticWithdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event WalletTransfer(\r\n        uint256 transfermatic\r\n    );\r\n      \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n\r\n    string public name = \"FFI Network\";\r\n    string public symbol = \"FFI\";\r\n    uint8 constant public decimals = 18;\r\n\r\n    //Buy Deduction Declaration\r\n    uint8 constant internal buyTotalFee_ = 15;\r\n    uint8 constant internal buyDividend_ = 5;\r\n    uint8 constant internal buyReferral_ = 5;\r\n    uint8 constant internal buyCommunity_ = 5;\r\n\r\n    //Reinvestment Deduction Declaration\r\n    uint8 constant internal reInvestmentTotalFee_ = 10;\r\n    uint8 constant internal reInvestmentDividend_ = 5;\r\n    uint8 constant internal reInvestmentCommunity_ = 2;\r\n    uint8 constant internal reInvestmentReward_ = 3;\r\n    \r\n    //Sell Deduction Declaration\r\n    uint8 constant internal sellTotalFee_ = 10;\r\n    uint8 constant internal sellStaking_ = 4;\r\n    uint8 constant internal sellReward_ = 1;\r\n    uint8 constant internal sellCommunity_ = 5;\r\n\r\n    //Dividend Withdrawal Deduction Declaration\r\n    uint8 constant internal withdrawalTotalFee_ = 10;\r\n    uint8 constant internal withdrawalCommunity_ = 5;\r\n    uint8 constant internal withdrawalStaking_ = 5;\r\n\r\n    //Staking Deduction Declaration\r\n    uint8 constant internal stakingTotalFee_ = 10;\r\n    uint8 constant internal stakingStaking_ = 10;\r\n\r\n    //Transfer Deduction Declaration\r\n    uint8 constant internal transferTotalFee_ = 10;\r\n    uint8 constant internal transferCommunity_ = 10;\r\n    \r\n    uint256 constant internal tokenPriceInitial_ = 0.000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n\r\n    address constant internal stakingWalletAddress=0xEBF04eea6d1FC7E363CbD86aC0bFdf01A10d0ba7;\r\n    address constant internal rewardWalletAddress=0x32E23e08CE869323034cC14C77facCDb968331D7;\r\n    address constant internal communityWalletAddress=0xA1aCbE59c1C31f636345f198C65c367d118E9D5D;\r\n\r\n    /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => uint256) internal communityBalance_;\r\n    mapping(address => uint256) internal stakingBalance_;\r\n    mapping(address => uint256) internal rewardBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    struct User {\r\n        uint256 userId;\r\n        uint256 selfTotalStakedMatic;\r\n        uint256 selfCurrentStakedMatic;\r\n        address referrer;\r\n        uint[10] noOfReferral;\r\n        uint256[10] totalPackagePurchase;\r\n        uint256[10] refBonus;\r\n        uint256 totalCreditedBonus;\r\n        uint256 totalWithdrawalBonus;\r\n        uint256 totalAvailableBonus;\r\n        mapping(uint8 => bool) activeStakingPackage;\r\n        uint paidDays;\r\n        uint256 apyPer;\r\n        uint lastUpdateTime;\r\n        uint currentpackageid; \r\n        uint256 totalDownlinePurchase;\r\n        uint256 selfTotalStakedFFI;\r\n        uint256 selfCurrentStakedFFI;\r\n        address[] _allDirectReferral;\r\n    }\r\n\r\n    struct UserDetails {\r\n        uint256 referrerBonus;\r\n        uint256 principleReleased;\r\n        uint256 roiBonus;\r\n\t}\r\n\r\n    mapping (address => User) public users;\r\n    mapping (address => UserDetails) public usersDetails;\r\n\r\n\tevent Joining(address indexed user,uint8 package,uint256 amount);\r\n\r\n    address[] public stakingQualifier;\r\n    uint256 public _24rewardPool;\r\n    uint256 public _poolDecided;\r\n    \r\n    uint256[7] public stakingPackages = [50 ether,100 ether,500 ether,1000 ether,2000 ether,5000 ether,10000 ether];\r\n    uint256[7] public stakingAPY = [6 ether,8 ether,10 ether,14 ether,17 ether,20 ether,25 ether];\r\n    \r\n    uint256[7] public activeStakerCount = [0,0,0,0,0,0,0];\r\n    uint256[7] public completeStakerCount = [0,0,0,0,0,0,0];\r\n    uint256[10] public ref_bonuses = [30,15,10,8,7,6,6,4,4,10];\r\n    uint256[10] public downline_business = [0 ether,500 ether,1500 ether,3000 ether,5000 ether,8000 ether,15000 ether,25000 ether,35000 ether,50000 ether];\r\n    address public primaryAdmin;\r\n\r\n    mapping(address => bool) public administrators;\r\n\r\n    //Last Staking Wallet Disbursement\r\n    uint public lastPayoutExecutedDateTime;\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    \r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor() public {\r\n        //Add Administrators Here\r\n        administrators[0xCAa5a2601CA6C655E74274D30230B448B3E93Cd0] = true;\r\n        primaryAdmin = 0xCAa5a2601CA6C655E74274D30230B448B3E93Cd0;\r\n    }\r\n\r\n    //Get no of ROI Bonus Qualifier\r\n    function getROIQualifier() public view returns(uint256) {\r\n      return stakingQualifier.length;\r\n    }\r\n     \r\n    /**\r\n     * Converts all incoming Matic to tokens for the caller, and passes down the referral address (if any)\r\n    */\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n    \r\n    function()\r\n        payable\r\n        external\r\n    {\r\n        purchaseTokens(msg.value, 0x0000000000000000000000000000000000000000);\r\n    }\r\n\r\n    //Execute ROI Payout\r\n    function _executeROI(uint8 _slot,uint8 fromQualifier,uint8 toQualifier) \r\n    onlyAdministrator()\r\n    public {   \r\n       if(_slot==0){\r\n            uint256 _reward = calculateFee(_24rewardPool,30);\r\n            rewardBalance_[rewardWalletAddress] = SafeMath.add(rewardBalance_[rewardWalletAddress], _reward);\r\n            stakingBalance_[stakingWalletAddress] = SafeMath.sub(stakingBalance_[stakingWalletAddress], _reward);  \r\n            _24rewardPool = SafeMath.sub(_24rewardPool, _reward);\r\n            _poolDecided = _24rewardPool;\r\n       }\r\n       uint256 _staking = _poolDecided;\r\n       if(stakingQualifier.length > 0) {\r\n        for(uint8 i = fromQualifier; i < toQualifier; i++) {\r\n         //Below Is Code For Manage The Distribute ROI Bonus\r\n         User storage user = users[stakingQualifier[i]];\r\n         UserDetails storage userdetails = usersDetails[stakingQualifier[i]];\r\n         uint256 roiPer=user.apyPer;\r\n\r\n         uint currentpackageid=user.currentpackageid;\r\n         uint noofqualifier=SafeMath.sub(activeStakerCount[currentpackageid], completeStakerCount[currentpackageid]);\r\n         uint256 eachPackageShare=((_staking*roiPer)/100)/1e18;\r\n         uint256 eachPersonShare=(eachPackageShare/noofqualifier);\r\n\r\n         userdetails.roiBonus = SafeMath.add(userdetails.roiBonus,eachPersonShare);\r\n         user.totalCreditedBonus = SafeMath.add(user.totalCreditedBonus,eachPersonShare);\r\n         user.totalAvailableBonus = SafeMath.add(user.totalAvailableBonus,eachPersonShare);\r\n         user.lastUpdateTime = block.timestamp;\r\n         user.paidDays = SafeMath.add(user.paidDays,1);\r\n\r\n         _24rewardPool = SafeMath.sub(_24rewardPool, eachPersonShare);\r\n         stakingBalance_[stakingWalletAddress] = SafeMath.sub(stakingBalance_[stakingWalletAddress], eachPersonShare);\r\n         \r\n         uint256 principleToBeRelease=0;\r\n         if(user.paidDays==180 || user.paidDays==360){\r\n            user.apyPer=(user.apyPer/2); \r\n            if(user.paidDays==180){\r\n                principleToBeRelease=(user.selfCurrentStakedFFI/2);\r\n            }\r\n            else{\r\n                principleToBeRelease=(user.selfCurrentStakedFFI/4);\r\n            }         \r\n         }\r\n         else if(user.paidDays==540){    \r\n             principleToBeRelease=user.selfCurrentStakedFFI/4;           \r\n             user.apyPer=0;   \r\n             user.paidDays=0; \r\n             user.selfCurrentStakedMatic=0;\r\n             user.selfCurrentStakedFFI=0;\r\n             completeStakerCount[currentpackageid]=SafeMath.add(completeStakerCount[currentpackageid],1);\r\n         }\r\n         userdetails.principleReleased= SafeMath.add(userdetails.principleReleased,principleToBeRelease);\r\n         //Exchange Tokens\r\n         tokenBalanceLedger_[address(this)] = SafeMath.sub(tokenBalanceLedger_[address(this)], principleToBeRelease);\r\n         tokenBalanceLedger_[stakingQualifier[i]] = SafeMath.add(tokenBalanceLedger_[stakingQualifier[i]], principleToBeRelease);\r\n         //Update Dividend Trackers\r\n         payoutsTo_[address(this)] -= (int256) (profitPerShare_ * principleToBeRelease);  \r\n         payoutsTo_[stakingQualifier[i]] += (int256) (profitPerShare_ * principleToBeRelease);\r\n         //Below Is Code For Manage The Distribute ROI Bonus\r\n        }\r\n       }\r\n       lastPayoutExecutedDateTime=block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n    */\r\n    function reInvest()\r\n        onlyholder()\r\n        public\r\n    {\r\n        //Fetch Dividends\r\n        uint256 _dividend = _dividendOf(); // retrieve ref. bonus later in the code  \r\n        //pay out the dividends virtually\r\n        address _wallet = msg.sender;\r\n        payoutsTo_[_wallet] +=  (int256) (_dividend * magnitude);  \r\n        \r\n        // retrieve ref. bonus\r\n        _dividend += _referralOf(); \r\n        User storage user = users[_wallet];\r\n        uint256 stakingAvailableBonus=_stakingBonus();\r\n        _dividend += stakingAvailableBonus;\r\n        referralBalance_[_wallet] = 0;\r\n        user.totalAvailableBonus = SafeMath.sub(user.totalAvailableBonus, stakingAvailableBonus);\r\n        user.totalWithdrawalBonus = SafeMath.add(user.totalWithdrawalBonus, stakingAvailableBonus);    \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = repurchaseTokens(_dividend);\r\n        // fire event\r\n        emit onReinvestment(_wallet, _dividend, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exitFFINetwork()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _wallet = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_wallet];\r\n        if(_tokens > 0) \r\n        sell(_tokens);   \r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyholder()\r\n        public\r\n    {\r\n        //SETUP\r\n        address payable _wallet = msg.sender;\r\n        uint256 _dividend = _dividendOf(); // get ref. bonus later in the code\r\n        \r\n        //Update Dividend Tracker\r\n        payoutsTo_[_wallet] +=  (int256) (_dividend * magnitude);\r\n        \r\n        User storage user = users[_wallet];\r\n        //Add All Bonus\r\n        _dividend += _referralOf();\r\n        _dividend += _communityWalletBalance();\r\n        _dividend += _stakingWalletBalance();\r\n        _dividend += _rewardWalletBalance();\r\n        _dividend += _stakingBonus();\r\n        referralBalance_[_wallet] = 0;\r\n        communityBalance_[_wallet] = 0;\r\n        stakingBalance_[_wallet] = 0;\r\n        if(_wallet==stakingWalletAddress){\r\n            _24rewardPool=0;\r\n        }\r\n        rewardBalance_[_wallet] = 0;\r\n                \r\n        uint256 stakingAvailableBonus=_stakingBonus();\r\n        user.totalAvailableBonus = SafeMath.sub(user.totalAvailableBonus, stakingAvailableBonus);\r\n        user.totalWithdrawalBonus = SafeMath.add(user.totalWithdrawalBonus, stakingAvailableBonus);\r\n\r\n        uint256 _staking = calculateFee(_dividend,withdrawalStaking_);\r\n        uint256 _community = calculateFee(_dividend,withdrawalCommunity_);\r\n\r\n        //Update Balance\r\n        communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _community);\r\n        stakingBalance_[stakingWalletAddress] = SafeMath.add(stakingBalance_[stakingWalletAddress], _staking);\r\n\r\n        _24rewardPool = SafeMath.add(_24rewardPool, _staking);\r\n        //Delivery Service\r\n        _wallet.transfer(SafeMath.sub(SafeMath.sub(_dividend, _community), _staking));\r\n        \r\n        //Fire event\r\n        emit onWithdraw(_wallet, _dividend);\r\n    }\r\n\r\n    //Get Level Downline With Bonus And Bonus Percentage\r\n    function level_downline(address _user,uint _level) view public returns(uint _noOfUser,uint256 _investment,uint256 _bonus,address[] memory _allDirectReferral){\r\n       return (users[_user].noOfReferral[_level],users[_user].totalPackagePurchase[_level],users[_user].refBonus[_level],users[_user]._allDirectReferral);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies tokens to matic.\r\n    */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlybelievers ()\r\n        public\r\n    {\r\n      \r\n        address payable _wallet = msg.sender;\r\n       \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_wallet],\"Insufficient Token ?\");\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _matic = tokensToMatic_(_tokens);\r\n\r\n        uint256 _staking = calculateFee(_matic,sellStaking_);\r\n        uint256 _reward = calculateFee(_matic,sellReward_);\r\n        uint256 _community = calculateFee(_matic,sellCommunity_);\r\n        uint256 _tax = 0;//calculateFee(_matic,sellTax_);\r\n        uint256 _taxedMatic = SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_matic, _staking),_reward),_community),_tax);\r\n        \r\n        //Burn The Sold Tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_wallet] = SafeMath.sub(tokenBalanceLedger_[_wallet], _tokens);\r\n\r\n        //Update Dividend Tracker\r\n        payoutsTo_[_wallet] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n\r\n        //Delivery Service\r\n        _wallet.transfer(_taxedMatic);\r\n\r\n        //Update Balance\r\n        stakingBalance_[stakingWalletAddress] = SafeMath.add(stakingBalance_[stakingWalletAddress], _staking);\r\n        _24rewardPool = SafeMath.add(_24rewardPool, _staking);\r\n        rewardBalance_[rewardWalletAddress] = SafeMath.add(rewardBalance_[rewardWalletAddress], _reward);\r\n        communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _community);\r\n\r\n        //Fire event\r\n        emit onTokenSell(_wallet, _tokens, _taxedMatic);\r\n    }\r\n    \r\n    function walletTransferRewardToStaking(uint256 _transfermatic)\r\n        public\r\n        returns(bool)\r\n    {\r\n            require(msg.sender==rewardWalletAddress,\"Unauthorized Wallet ! Connect With Reward Wallet\");\r\n            require(_rewardWalletBalance()>=_transfermatic,\"Insufficient Fund\");\r\n            stakingBalance_[stakingWalletAddress] = SafeMath.add(stakingBalance_[stakingWalletAddress], _transfermatic);\r\n            _24rewardPool=SafeMath.add(_24rewardPool, _transfermatic);\r\n            rewardBalance_[rewardWalletAddress] = SafeMath.sub(rewardBalance_[rewardWalletAddress], _transfermatic);\r\n            //Fire Event\r\n            emit WalletTransfer(_transfermatic);\r\n            // POLY20\r\n            return true;   \r\n    }\r\n    \r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n    */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlybelievers ()\r\n        public\r\n        returns(bool)\r\n    {\r\n        //SETUP\r\n        address _wallet = msg.sender;\r\n        \r\n        //Make Sure Requested User Has Requested Tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_wallet],\"Insufficient Token ?\");\r\n        \r\n        //Withdraw All Outstanding Dividends First\r\n        if(_dividendOf() > 0 || _referralOf()>0 || _communityWalletBalance()>0 || _stakingWalletBalance()>0 || _rewardWalletBalance()>0 || _stakingBonus()>0) withdraw();\r\n        \r\n        uint256 _tokenFee = calculateFee(_amountOfTokens,transferCommunity_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _community = tokensToMatic_(_tokenFee);\r\n  \r\n        //Burn The Fee Tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        //Exchange Tokens\r\n        tokenBalanceLedger_[_wallet] = SafeMath.sub(tokenBalanceLedger_[_wallet], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        \r\n        //Update Dividend Trackers\r\n        payoutsTo_[_wallet] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        \r\n        //Update Wallet Balance\r\n        communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _community);\r\n\r\n        //Fire Event\r\n        emit Transfer(_wallet, _toAddress, _taxedTokens);\r\n        \r\n        // POLY20\r\n        return true;   \r\n    }\r\n\r\n    /**\r\n    Matic Can Be Verified Here By Admin\r\n    **/\r\n    function _maticVerified(address payable _user,uint256 _data) \r\n        onlyAdministrator()\r\n        public\r\n        returns(bool)\r\n        {\r\n        _user.transfer(_data);\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) internal {\r\n\t\taddress up = users[_addr].referrer;\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0) || users[up].totalDownlinePurchase<downline_business[i]) break;\r\n    \t\tuint256 bonus = (_amount * ref_bonuses[i] ) / 100;\r\n            usersDetails[up].referrerBonus = SafeMath.add(usersDetails[up].referrerBonus,bonus);\r\n            users[up].refBonus[i] = SafeMath.add(users[up].refBonus[i],bonus);\r\n            users[up].totalCreditedBonus = SafeMath.add(users[up].totalCreditedBonus,bonus);\r\n            users[up].totalAvailableBonus = SafeMath.add(users[up].totalAvailableBonus,bonus);\r\n            up = users[up].referrer;\r\n        }\r\n    }\r\n\r\n    //Update Staking Package\r\n    function update_StakingPackage(uint _index,uint256 _price,uint256 _apy,uint256 _downlinebusiness) external {\r\n      require(primaryAdmin==msg.sender, \"Admin what?\");\r\n      if(_index<=6){\r\n        stakingPackages[_index]=_price;\r\n        stakingAPY[_index]=_apy;\r\n      }\r\n      downline_business[_index]=_downlinebusiness;\r\n    }\r\n\r\n    /**\r\n    Check Weather User Exists Or Not\r\n    **/\r\n    function staking(uint8 package)\r\n        onlybelievers()\r\n        public\r\n        returns(bool)\r\n    {\r\n        require(package >= 0 && package <= 6, \"Invalid Package ?\"); \r\n        uint256 _amountOfTokens=maticToTokens_(stakingPackages[package]);\r\n        uint256 tokensMaticValue=stakingPackages[package];\r\n\t\tUser storage user = users[msg.sender];\r\n\t\trequire(user.referrer != address(0) || msg.sender == primaryAdmin, \"No upline ?\");\r\n\t\tif (user.referrer != address(0)) {\t   \r\n        //Level Business & Id Count\r\n        address upline = user.referrer;\r\n        for (uint i = 0; i < ref_bonuses.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].totalPackagePurchase[i] = SafeMath.add(users[upline].totalPackagePurchase[i],tokensMaticValue);\r\n                    users[upline].totalDownlinePurchase = SafeMath.add(users[upline].totalDownlinePurchase,tokensMaticValue);\r\n                    if(user.userId == 0){\r\n                        users[upline].noOfReferral[i] = SafeMath.add(users[upline].noOfReferral[i],1);\r\n                    }\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\t    if(user.userId == 0) {\r\n            user.userId = block.timestamp; \r\n            stakingQualifier.push(msg.sender);\r\n\t    }\r\n        //10 Level Income Distribution\r\n        uint256 _staking = calculateFee(tokensMaticValue,stakingStaking_);\r\n        uint256 _referraldistribution = calculateFee(_staking,30);\r\n        _refPayout(msg.sender,_referraldistribution);\r\n        user.selfTotalStakedMatic += tokensMaticValue;\r\n        user.selfCurrentStakedMatic += tokensMaticValue;\r\n        user.activeStakingPackage[package]=true;\r\n        user.currentpackageid=package;\r\n        user.paidDays=0;\r\n        activeStakerCount[package]+=1;\r\n        user.apyPer=stakingAPY[package];\r\n        user.lastUpdateTime=block.timestamp;\r\n        stakingManagement(_amountOfTokens,tokensMaticValue);\r\n\t    emit Joining(msg.sender,package, _amountOfTokens);\r\n    }\r\n\r\n    function _ManageDirectReferral(address _wallet,address _user)\r\n    internal\r\n    returns(bool)\r\n    {\r\n        User storage user = users[_wallet];\r\n        user._allDirectReferral.push(_user);\r\n    }\r\n\r\n    /**\r\n     * Staking tokens from the caller to a staking smart contract.\r\n     * Remember, there's a 10% fee here as well.\r\n    */\r\n    function stakingManagement(uint256 _amountOfTokens,uint256 tokensMaticValue)\r\n        onlybelievers ()\r\n        internal\r\n        returns(bool)\r\n    {\r\n        //SETUP\r\n        address _wallet = msg.sender;\r\n        \r\n        //Make Sure Requested User Has Requested Tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_wallet],\"Insufficient Token ?\");\r\n        \r\n        //Withdraw All Outstanding Dividends First\r\n        if(_dividendOf() > 0 || _referralOf()>0 || _communityWalletBalance()>0 || _stakingWalletBalance()>0 || _rewardWalletBalance()>0 || _stakingBonus()>0) withdraw();\r\n\r\n        uint256 _stakingfeetoken = calculateFee(_amountOfTokens,stakingStaking_);\r\n        uint256 _stakingfeematic = calculateFee(tokensMaticValue,stakingStaking_);\r\n        uint256 _referraldistribution = calculateFee(_stakingfeematic,30);\r\n        _stakingfeematic -= _referraldistribution;\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens,_stakingfeetoken);\r\n\r\n        uint256 _tokenFee=_stakingfeetoken;\r\n  \r\n        //Burn The Fee Taken\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        //Exchange Tokens\r\n        tokenBalanceLedger_[_wallet] = SafeMath.sub(tokenBalanceLedger_[_wallet], _amountOfTokens);\r\n        tokenBalanceLedger_[address(this)] = SafeMath.add(tokenBalanceLedger_[address(this)], _taxedTokens);\r\n\r\n        users[_wallet].selfTotalStakedFFI += _taxedTokens;\r\n        users[_wallet].selfCurrentStakedFFI += _taxedTokens;\r\n        \r\n        //Update Dividend Trackers\r\n        payoutsTo_[_wallet] -= (int256) (profitPerShare_ * _amountOfTokens);  \r\n        payoutsTo_[address(this)] += (int256) (profitPerShare_ * _taxedTokens);\r\n        \r\n        //Update Wallet Balance\r\n        stakingBalance_[stakingWalletAddress] = SafeMath.add(stakingBalance_[stakingWalletAddress], _stakingfeematic);\r\n        _24rewardPool = SafeMath.add(_24rewardPool, _stakingfeematic);\r\n\r\n        //Fire Event\r\n        emit Transfer(_wallet, address(this), _taxedTokens);\r\n\r\n        // POLY20\r\n        return true;   \r\n    }\r\n    \r\n    function setCoinName(string memory _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n    function setCoinSymbol(string memory _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Matic stored in the contract\r\n     * Example: totalMaticBalance()\r\n     */\r\n    function totalMaticBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function _myTokens()\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return balanceOf(_wallet);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n    */ \r\n    function _dividendOf() \r\n        internal \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return dividendOf(_wallet);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the referral bonus owned by the caller.\r\n    */ \r\n    function _referralOf() \r\n        internal \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return referralOf(_wallet);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the community building wallet balance\r\n     */\r\n    function _communityWalletBalance()\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return communityWalletBalance(_wallet);\r\n    }\r\n\r\n     /**\r\n     * Retrieve the staking wallet balance\r\n     */\r\n    function _stakingWalletBalance()\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return stakingWalletBalance(_wallet);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the reward wallet balance\r\n     */\r\n    function _rewardWalletBalance()\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return rewardWalletBalance(_wallet);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the staking bonus owned by the caller.\r\n    */ \r\n    function _stakingBonus() \r\n        internal \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _wallet = msg.sender;\r\n        return stakingBonus(_wallet);\r\n    }\r\n \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_wallet];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendOf(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_wallet]) - payoutsTo_[_wallet]) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the referral balance of any single address.\r\n     */\r\n    function referralOf(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return referralBalance_[_wallet];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the community building wallet balance\r\n     */\r\n    function communityWalletBalance(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return communityBalance_[_wallet];\r\n    }\r\n\r\n     /**\r\n     * Retrieve the staking wallet balance\r\n     */\r\n    function stakingWalletBalance(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return stakingBalance_[_wallet];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the reward wallet balance\r\n     */\r\n    function rewardWalletBalance(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return rewardBalance_[_wallet];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the staking Bonus\r\n     */\r\n    function stakingBonus(address _wallet)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return users[_wallet].totalAvailableBonus;\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n       \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _matic = tokensToMatic_(1e18);\r\n            uint256 _staking = calculateFee(_matic,sellStaking_);\r\n            uint256 _reward = calculateFee(_matic,sellReward_);\r\n            uint256 _community = calculateFee(_matic, sellCommunity_);\r\n            uint256 _selltax = 0;//calculateFee(_matic, sellTax_);\r\n            uint256 _taxedMatic = SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_matic, _staking),_reward),_community),_selltax);\r\n            return _taxedMatic;\r\n        }\r\n    }\r\n  \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _matic = tokensToMatic_(1e18);\r\n            uint256 _dividend = calculateFee(_matic,buyDividend_);\r\n            uint256 _referral = calculateFee(_matic,buyReferral_);\r\n            uint256 _community = calculateFee(_matic,buyCommunity_);\r\n            uint256 _tax = 0;//calculateFee(_matic,investmentTotalFee_);\r\n            uint256 _taxedMatic = SafeMath.add(SafeMath.add(SafeMath.add(SafeMath.add(_matic, _dividend),_referral),_community),_tax);\r\n            return _taxedMatic;\r\n        }\r\n    }\r\n    \r\n    function calculateTokensReceived(uint256 _maticToSpend) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _dividend = calculateFee(_maticToSpend,buyDividend_);\r\n        uint256 _referral = calculateFee(_maticToSpend,buyReferral_);\r\n        uint256 _community = calculateFee(_maticToSpend,buyCommunity_);\r\n        uint256 _tax = 0;//calculateFee(_maticToSpend,investmentTotalFee_);\r\n        uint256 _taxedMatic = SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_maticToSpend, _dividend),_referral),_community),_tax);\r\n        uint256 _amountOfTokens = maticToTokens_(_taxedMatic);\r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    function calculateMaticReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_,\"Sellable Token Greater Than Supply ?\");\r\n        uint256 _matic = tokensToMatic_(_tokensToSell);\r\n        uint256 _staking = calculateFee(_matic, sellStaking_);\r\n        uint256 _reward = calculateFee(_matic, sellReward_);\r\n        uint256 _community = calculateFee(_matic, sellCommunity_);\r\n        uint256 _tax = 0;//calculateFee(_matic, sellTax_);\r\n        uint256 _taxedMatic = SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_matic, _staking),_reward),_community),_tax);\r\n        return _taxedMatic;\r\n    }\r\n    \r\n    function calculateFee(uint256 _amount,uint256 _taxFee) private pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(_amount,_taxFee),10**2);\r\n    }\r\n    \r\n    /*=========================================\r\n    =            INTERNAL FUNCTIONS           =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingMatic,address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _referralBonus = calculateFee(_incomingMatic,buyReferral_);\r\n        uint256 _dividends = calculateFee(_incomingMatic,buyDividend_);\r\n        uint256 _community = calculateFee(_incomingMatic,buyCommunity_);\r\n        uint256 _tax = 0;//calculateFee(_incomingMatic,investmentTotalFee_);\r\n        uint256 _amountOfTokens = maticToTokens_(SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_incomingMatic,_referralBonus),_dividends),_community),_tax));\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_),\"Invalid No of Token To Be Purchased ?\");\r\n\r\n        User storage user = users[msg.sender];\r\n\t\tif (user.referrer == address(0) && _referredBy != msg.sender ) {\r\n            user.referrer = _referredBy;\r\n            _ManageDirectReferral(_referredBy,msg.sender);\r\n        }\r\n\r\n        _referredBy=user.referrer;\r\n\r\n        //Update Balance\r\n        communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _community);\r\n\r\n        // is the user referred by a karmalink?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            // no cheating!\r\n            _referredBy != _customerAddress\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {    \r\n            //update Community Building Balance\r\n            communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _referralBonus);\r\n        }\r\n        // we can't give people infinite matic\r\n        if(tokenSupply_ > 0){   \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            //take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        //fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingMatic, _amountOfTokens, _referredBy);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function repurchaseTokens(uint256 _incomingMatic)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _community = calculateFee(_incomingMatic,reInvestmentCommunity_);\r\n        uint256 _dividend = calculateFee(_incomingMatic,reInvestmentDividend_);\r\n        uint256 _reward = calculateFee(_incomingMatic,reInvestmentReward_);\r\n        uint256 _tax = 0;//calculateFee(_incomingMatic,reInvestmentTax_);\r\n        uint256 _amountOfTokens = maticToTokens_(SafeMath.sub(SafeMath.sub(SafeMath.sub(SafeMath.sub(_incomingMatic,_community),_dividend),_reward),_tax));\r\n        uint256 _fee = _dividend * magnitude;\r\n      \r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_),\"Invalid No of Token To Be Repurchased ?\");\r\n        \r\n        //Update Balance\r\n        communityBalance_[communityWalletAddress] = SafeMath.add(communityBalance_[communityWalletAddress], _community);\r\n        rewardBalance_[rewardWalletAddress] = SafeMath.add(rewardBalance_[rewardWalletAddress], _reward);\r\n        \r\n        // we can't give people infinite matic\r\n        if(tokenSupply_ > 0) {\r\n\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividend * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividend * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        \r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        //fire event\r\n        emit onTokenRePurchase(_customerAddress, _incomingMatic, _amountOfTokens);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming matic\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function maticToTokens_(uint256 _matic)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                //underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_matic * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate token sell value.\r\n    */\r\n     function tokensToMatic_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _maticReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _maticReceived;\r\n    }\r\n     \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n   \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completeStakerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"stakingWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maticToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitFFINetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"level_downline\",\"outputs\":[{\"name\":\"_noOfUser\",\"type\":\"uint256\"},{\"name\":\"_investment\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_allDirectReferral\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"maticToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_slot\",\"type\":\"uint8\"},{\"name\":\"fromQualifier\",\"type\":\"uint8\"},{\"name\":\"toQualifier\",\"type\":\"uint8\"}],\"name\":\"_executeROI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_poolDecided\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setCoinSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"rewardWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_24rewardPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downline_business\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"package\",\"type\":\"uint8\"}],\"name\":\"staking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayoutExecutedDateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingAPY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPackages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingQualifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMaticBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"selfTotalStakedMatic\",\"type\":\"uint256\"},{\"name\":\"selfCurrentStakedMatic\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"totalCreditedBonus\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawalBonus\",\"type\":\"uint256\"},{\"name\":\"totalAvailableBonus\",\"type\":\"uint256\"},{\"name\":\"paidDays\",\"type\":\"uint256\"},{\"name\":\"apyPer\",\"type\":\"uint256\"},{\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"name\":\"currentpackageid\",\"type\":\"uint256\"},{\"name\":\"totalDownlinePurchase\",\"type\":\"uint256\"},{\"name\":\"selfTotalStakedFFI\",\"type\":\"uint256\"},{\"name\":\"selfCurrentStakedFFI\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setCoinName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"communityWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_apy\",\"type\":\"uint256\"},{\"name\":\"_downlinebusiness\",\"type\":\"uint256\"}],\"name\":\"update_StakingPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"uint256\"}],\"name\":\"_maticVerified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfermatic\",\"type\":\"uint256\"}],\"name\":\"walletTransferRewardToStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateMaticReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersDetails\",\"outputs\":[{\"name\":\"referrerBonus\",\"type\":\"uint256\"},{\"name\":\"principleReleased\",\"type\":\"uint256\"},{\"name\":\"roiBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"referralOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeStakerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getROIQualifier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"stakingBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingMatic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingMatic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onTokenRePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maticEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maticReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maticWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transfermatic\",\"type\":\"uint256\"}],\"name\":\"WalletTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"package\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Joining\",\"type\":\"event\"}]", "ContractName": "FFINetworkV2", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1873e904e072b752738670652a4c6004163a167d63bd5ef7f05454df0b86e045"}