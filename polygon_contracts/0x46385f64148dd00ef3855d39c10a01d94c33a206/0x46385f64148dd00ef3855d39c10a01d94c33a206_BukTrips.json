{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FactoryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./ISupplierContract.sol\\\";\\nimport \\\"./IBukSupplierDeployer.sol\\\";\\nimport \\\"./IBukSupplierUtilityDeployer.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./ISupplierContractUtility.sol\\\";\\n\\n/**\\n* @title BUK Protocol Factory Contract\\n* @author BUK Technology Inc\\n* @dev Genesis contract for managing all operations of the BUK protocol including ERC1155 token management for room-night NFTs and underlying sub-contracts such as Supplier, Hotel, Treasury, and Marketplace.\\n*/\\ncontract BukTrips is AccessControl, ReentrancyGuard {\\n\\n    /**\\n    * @dev Enum for booking statuses.\\n    * @var BookingStatus.nil         Booking has not yet been initiated.\\n    * @var BookingStatus.booked      Booking has been initiated but not yet confirmed.\\n    * @var BookingStatus.confirmed   Booking has been confirmed.\\n    * @var BookingStatus.cancelled   Booking has been cancelled.\\n    * @var BookingStatus.expired     Booking has expired.\\n    */\\n    enum BookingStatus {nil, booked, confirmed, cancelled, expired}\\n\\n    /**\\n    * @dev Addresses for the Buk wallet, currency, treasury, supplier deployer, and utility deployer.\\n    * @dev address buk_wallet        Address of the Buk wallet.\\n    * @dev address currency          Address of the currency.\\n    * @dev address treasury          Address of the treasury.\\n    * @dev address supplier_deployer Address of the supplier deployer.\\n    * @dev address utility_deployer  Address of the utility deployer.\\n    */\\n    address private bukWallet;\\n    address private currency;\\n    address private treasury;\\n    address public supplierDeployer;\\n    address public utilityDeployer;\\n    /**\\n    * @dev Commission charged on bookings.\\n    */\\n    uint8 public commission = 5;\\n\\n    /**\\n    * @dev Counters.Counter supplierIds   Counter for supplier IDs.\\n    * @dev Counters.Counter bookingIds    Counter for booking IDs.\\n    */\\n    uint256 private _supplierIds;\\n    uint256 private _bookingIds;\\n\\n    /**\\n    * @dev Struct for booking details.\\n    * @var uint256 id                Booking ID.\\n    * @var BookingStatus status      Booking status.\\n    * @var uint256 tokenID           Token ID.\\n    * @var address owner             Address of the booking owner.\\n    * @var uint256 supplierId        Supplier ID.\\n    * @var uint256 checkin          Check-in date.\\n    * @var uint256 checkout          Check-out date.\\n    * @var uint256 total             Total price.\\n    * @var uint256 baseRate          Base rate.\\n    */\\n    struct Booking {\\n        uint256 id;\\n        BookingStatus status;\\n        uint256 tokenID;\\n        address owner;\\n        uint256 supplierId;\\n        uint256 checkin;\\n        uint256 checkout;\\n        uint256 total;\\n        uint256 baseRate;\\n    }\\n    /**\\n    * @dev Struct for supplier details.\\n    * @var uint256 id                Supplier ID.\\n    * @var bool status               Supplier status.\\n    * @var address supplierContract Address of the supplier contract.\\n    * @var address supplierOwner    Address of the supplier owner.\\n    * @var address utility_contract  Address of the utility contract.\\n    */\\n    struct SupplierDetails {\\n        uint256 id;\\n        bool status;\\n        address supplierContract;\\n        address supplierOwner;\\n        address utilityContract;\\n    }\\n\\n    /**\\n    * @dev Constant for the role of admin\\n    */\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n    /**\\n    * @dev mapping(uint256 => Booking) bookingDetails   Mapping of booking IDs to booking details.\\n    */\\n    mapping(uint256 => Booking) public bookingDetails; //bookingID -> Booking Details\\n    /**\\n    * @dev mapping(uint256 => mapping(uint256 => uint256)) timeLocks   Mapping of booking IDs to time locks.\\n    */\\n    mapping(uint256 => mapping(uint256 => uint256)) public timeLocks; //supplierId -> bookingID -> TimeLocks\\n    /**\\n    * @dev mapping(uint256 => SupplierDetails) suppliers   Mapping of supplier IDs to supplier details.\\n    */\\n    mapping(uint256 => SupplierDetails) public suppliers; //supplierID -> Contract Address\\n\\n    /**\\n    * @dev Emitted when the deployers are set.\\n    */\\n    event SetDeployers(address indexed supplierDeployer, address indexed utilityDeployer);\\n    /**\\n    * @dev Emitted when the commission is set.\\n    */\\n    event SetCommission(uint256 indexed commission);\\n    /**\\n    * @dev Event to safe transfer NFT\\n    */\\n    event GrantSupplierFactoryRole(address indexed oldFactory, address indexed newFactory);\\n    /**\\n    * @dev Emitted when nft status is toggled.\\n    */\\n    event ToggleNFT(uint256 indexed supplierId, uint256 indexed nftId);\\n    /**\\n    * @dev Emitted when the supplier details are updated.\\n    */\\n    event UpdateSupplierDetails(uint256 indexed id, bytes32 name, string indexed contractName);\\n    /**\\n    * @dev Emitted when the supplier is registered.\\n    */\\n    event RegisterSupplier(uint256 indexed id, address indexed supplierContract, address indexed utilityContract);\\n    /**\\n    * @dev Emitted when token uri is set.\\n    */\\n    event SetTokenURI(uint256 indexed supplierId, uint256 indexed nftId, string indexed uri);\\n    /**\\n    * @dev Emitted when supplier contract uri is set.\\n    */\\n    event SetContractURI(uint256 indexed supplierId, string indexed uri);\\n    /**\\n    * @dev Emitted when time lock is set for an NFT.\\n    */\\n    event SetTimeLock(uint256 indexed supplierId, uint256 indexed nftId, uint256 indexed time);\\n    /**\\n    * @dev Emitted when treasury is updated.\\n    */\\n    event SetTreasury(address indexed treasuryContract);\\n    /**\\n    * @dev Emitted when single room is booked.\\n    */\\n    event BookRoom(uint256 indexed booking);\\n    /**\\n    * @dev Emitted when multiple rooms are booked together.\\n    */\\n    event BookRooms(uint256[] indexed bookings, uint256 indexed total, uint256 indexed commission);\\n    /**\\n    * @dev Emitted when booking refund is done.\\n    */\\n    event BookingRefund(uint256 indexed total, address indexed owner);\\n    /**\\n    * @dev Emitted when room bookings are confirmed.\\n    */\\n    event ConfirmRooms(uint256[] indexed bookings, bool indexed status);\\n    /**\\n    * @dev Emitted when room bookings are checked out.\\n    */\\n    event CheckoutRooms(uint256[] indexed bookings, bool indexed status);\\n    /**\\n    * @dev Emitted when room bookings are cancelled.\\n    */\\n    event CancelRoom(uint256 indexed booking, bool indexed status);\\n\\n    /**\\n    * @dev Modifier to check the access to toggle NFTs.\\n    */\\n    modifier onlyAdminOwner(uint256 _bookingId) {\\n        require(((hasRole(ADMIN_ROLE, _msgSender())) || (_msgSender()==bookingDetails[_bookingId].owner)), \\\"Caller does not have access\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Constructor to initialize the contract\\n    * @param _treasury Address of the treasury.\\n    * @param _currency Address of the currency.\\n    * @param _bukWallet Address of the Buk wallet.\\n    */\\n    constructor (address _treasury, address _currency, address _bukWallet) {\\n        currency = _currency;\\n        treasury = _treasury;\\n        bukWallet = _bukWallet;\\n        _grantRole(ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n    * @dev Function to set the deployer contracts.\\n    * @param _supplierDeployer Address of the supplier deployer contract.\\n    * @param _utilityDeployer Address of the utility deployer contract.\\n    * @notice Only admin can call this function.\\n    */\\n    function setDeployers(address _supplierDeployer, address _utilityDeployer) external onlyRole(ADMIN_ROLE) {\\n        supplierDeployer = _supplierDeployer;\\n        utilityDeployer = _utilityDeployer;\\n        emit SetDeployers(_supplierDeployer, _utilityDeployer);\\n    }\\n\\n    /**\\n    * @dev Function to update the treasury address.\\n    * @param _treasury Address of the treasury.\\n    */\\n    function setTreasury(address _treasury) external onlyRole(ADMIN_ROLE) {\\n        treasury = _treasury;\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    /**\\n    * @dev Function to update the token uri.\\n    * @param _supplierId Supplier Id.\\n    * @param _tokenId Token Id.\\n    */\\n    function setTokenUri(uint _supplierId, uint _tokenId, string memory _newUri) external onlyRole(ADMIN_ROLE) {\\n        ISupplierContract(suppliers[_supplierId].supplierContract).setURI(_tokenId, _newUri);\\n        emit SetTokenURI(_supplierId,_tokenId,_newUri);\\n    }\\n\\n    /**\\n    * @dev Function to update the contract uri.\\n    * @param _supplierId Supplier Id.\\n    */\\n    function setContractUri(uint _supplierId, string memory _newUri) external onlyRole(ADMIN_ROLE) {\\n        ISupplierContract(suppliers[_supplierId].supplierContract).setContractURI(_newUri);\\n        emit SetContractURI(_supplierId,_newUri);\\n    }\\n\\n    /**\\n    * @dev Function to grant the factory role to a given supplier\\n    * @param _newFactoryContract address: New factory contract of the supplier contract\\n    * @notice This function can only be called by a contract with `ADMIN_ROLE`\\n    */\\n    function grantSupplierFactoryRole(uint256 _supplierId, address _newFactoryContract) external onlyRole(ADMIN_ROLE)  {\\n        ISupplierContract(suppliers[_supplierId].supplierContract).grantFactoryRole(_newFactoryContract);\\n        emit GrantSupplierFactoryRole(address(this), _newFactoryContract);\\n    }\\n\\n    /**\\n    * @dev Function to update the supplier details.\\n    * @param _supplierId ID of the supplier.\\n    * @param _name New name of the supplier.\\n    * @param _contractName New name of the supplier contract.\\n    */\\n    function updateSupplierDetails(uint256 _supplierId, string memory _contractName, bytes32 _name) external onlyRole(ADMIN_ROLE) {\\n        ISupplierContract(suppliers[_supplierId].supplierContract).updateSupplierDetails(_name, _contractName);\\n        emit UpdateSupplierDetails(_supplierId,_name,_contractName);\\n    }\\n\\n    /**\\n    * @dev Function to set the Buk commission percentage.\\n    * @param _commission Commission percentage.\\n    */\\n    function setCommission(uint8 _commission) external onlyRole(ADMIN_ROLE) {\\n        commission = _commission;\\n        emit SetCommission(_commission);\\n    }\\n    \\n    /**\\n    * @dev Function to set the time lock for NFT Transfer.\\n    * @param _supplierId ID of the supplier.\\n    * @param _nftId ID of the NFT.\\n    * @param _timeLockInSeconds Time lock in hours.\\n    */\\n    function setTransferLock(uint256 _supplierId, uint256 _nftId, uint256 _timeLockInSeconds) external onlyRole(ADMIN_ROLE) {\\n        timeLocks[_supplierId][_nftId] = _timeLockInSeconds;\\n        emit SetTimeLock(_supplierId, _nftId, _timeLockInSeconds);\\n    }\\n\\n    /** \\n    * @dev Function to toggle the NFT status.\\n    * @param _id ID of the NFT.\\n    * @param status Status of the NFT.\\n    * @notice Only admin or the owner of the NFT can call this function.\\n    */\\n    function toggleNFTStatus(uint256 _id, bool status) external nonReentrant() onlyAdminOwner(_id) {\\n        require((bookingDetails[_id].tokenID > 0), \\\"NFT does not exist\\\");\\n        require((bookingDetails[_id].checkin > timeLocks[bookingDetails[_id].supplierId][_id]), \\\"Timelock is not expired\\\");\\n        if(timeLocks[bookingDetails[_id].supplierId][_id] >= 1) {\\n            uint256 threshold = bookingDetails[_id].checkin - timeLocks[bookingDetails[_id].supplierId][_id];\\n            threshold = bookingDetails[_id].checkin - timeLocks[bookingDetails[_id].supplierId][_id];\\n            require((block.timestamp > threshold), \\\"Timelock is not expired\\\");\\n        }\\n        ISupplierContract(suppliers[bookingDetails[_id].supplierId].supplierContract).toggleNFTStatus(_id, status);\\n        emit ToggleNFT(bookingDetails[_id].supplierId, _id);\\n    }\\n\\n    /**\\n    * @dev Function to register a supplier.\\n    * @param _contractName Name of the supplier contract.\\n    * @param _name Name of the supplier.\\n    * @param _supplierOwner Address of the supplier owner.\\n    * @param _contractUri URI of the supplier contract.\\n    * @notice Only admin can call this function.\\n    */\\n    function registerSupplier(string memory _contractName, bytes32 _name, address _supplierOwner, string memory _contractUri) external onlyRole(ADMIN_ROLE) returns (uint256, address, address) {\\n        ++_supplierIds;\\n        address utilityContractAddr = IBukSupplierUtilityDeployer(utilityDeployer).deploySupplierUtility(_contractName,_supplierIds,_name, _contractUri);\\n        address supplierContractAddr = IBukSupplierDeployer(supplierDeployer).deploySupplier(_contractName, _supplierIds,_name, _supplierOwner, utilityContractAddr, _contractUri);\\n        ISupplierContractUtility(utilityContractAddr).grantSupplierRole(supplierContractAddr);\\n        suppliers[_supplierIds].id = _supplierIds;\\n        suppliers[_supplierIds].status = true;\\n        suppliers[_supplierIds].supplierContract = supplierContractAddr;\\n        suppliers[_supplierIds].supplierOwner = _supplierOwner;\\n        suppliers[_supplierIds].utilityContract = utilityContractAddr;\\n        emit RegisterSupplier(_supplierIds, supplierContractAddr, utilityContractAddr);\\n        return (_supplierIds, supplierContractAddr, utilityContractAddr);\\n    }\\n\\n    /** \\n    * @dev Function to book rooms.\\n    * @param _supplierId ID of the supplier.\\n    * @param _count Number of rooms to be booked.\\n    * @param _total Total amount to be paid.\\n    * @param _baseRate Base rate of the room.\\n    * @param _checkin Checkin date.\\n    * @param _checkout Checkout date.\\n    * @return ids IDs of the bookings.\\n    * @notice Only registered Suppliers' rooms can be booked.\\n    */\\n    function bookRoom(uint256 _supplierId, uint256 _count, uint256[] memory _total, uint256[] memory _baseRate, uint256 _checkin, uint256 _checkout) external nonReentrant() returns (bool) {\\n        require(suppliers[_supplierId].status, \\\"Supplier not registered\\\");\\n        require(((_total.length == _baseRate.length) && (_total.length == _count) && (_count>0)), \\\"Array sizes mismatch\\\");\\n        uint256[] memory bookings = new uint256[](_count);\\n        uint total = 0;\\n        uint commissionTotal = 0;\\n        for(uint8 i=0; i<_count;++i) {\\n            ++_bookingIds;\\n            bookingDetails[_bookingIds] = Booking(_bookingIds, BookingStatus.booked, 0, _msgSender(), _supplierId, _checkin, _checkout, _total[i], _baseRate[i]);\\n            bookings[i] = _bookingIds;\\n            total+=_total[i];\\n            commissionTotal+= _baseRate[i]*commission/100;\\n            emit BookRoom(_bookingIds);\\n        }\\n        return _bookingPayment(commissionTotal, total, bookings);\\n    }\\n\\n    /** \\n    * @dev Function to refund the amount for the failure scenarios.\\n    * @param _supplierId ID of the supplier.\\n    * @param _ids IDs of the bookings.\\n    * @notice Only registered Suppliers' rooms can be booked.\\n    */\\n    function bookingRefund(uint256 _supplierId, uint256[] memory _ids, address _owner) external onlyRole(ADMIN_ROLE) {\\n        require(suppliers[_supplierId].status, \\\"Supplier not registered\\\");\\n        uint256 len = _ids.length;\\n        require((len>0), \\\"Array is empty\\\");\\n        for(uint8 i=0; i<len; ++i) {\\n            require(bookingDetails[_ids[i]].owner == _owner, \\\"Check the booking owner\\\");\\n            require(bookingDetails[_ids[i]].status == BookingStatus.booked, \\\"Check the Booking status\\\");\\n        }\\n        uint total = 0;\\n        for(uint8 i=0; i<len;++i) {\\n            bookingDetails[_ids[i]].status = BookingStatus.cancelled;\\n            total+= bookingDetails[_ids[i]].total + bookingDetails[_ids[i]].baseRate*commission/100;\\n        }\\n        ITreasury(treasury).cancelUSDCRefund(total, _owner);\\n        emit BookingRefund(total, _owner);\\n    }\\n    \\n    /**\\n    * @dev Function to confirm the room bookings.\\n    * @param _supplierId ID of the supplier.\\n    * @param _ids IDs of the bookings.\\n    * @param _uri URIs of the NFTs.\\n    * @param _status Status of the NFT.\\n    * @notice Only registered Suppliers' rooms can be confirmed.\\n    * @notice Only the owner of the booking can confirm the rooms.\\n    * @notice The number of bookings and URIs should be same.\\n    * @notice The booking status should be booked to confirm it.\\n    * @notice The NFTs are minted to the owner of the booking.\\n    */\\n    function confirmRoom(uint256 _supplierId, uint256[] memory _ids, string[] memory _uri, bool _status) external nonReentrant() {\\n        require(suppliers[_supplierId].status, \\\"Supplier not registered\\\");\\n        uint256 len = _ids.length;\\n        for(uint8 i=0; i<len; ++i) {\\n            require(bookingDetails[_ids[i]].status == BookingStatus.booked, \\\"Check the Booking status\\\");\\n            require(bookingDetails[_ids[i]].owner == _msgSender(), \\\"Only booking owner has access\\\");\\n        }\\n        require((len == _uri.length), \\\"Check Ids and URIs size\\\");\\n        require(((len > 0) && (len < 11)), \\\"Not in max - min booking limit\\\");\\n        ISupplierContract _supplierContract = ISupplierContract(suppliers[_supplierId].supplierContract);\\n        for(uint8 i=0; i<len; ++i) {\\n            bookingDetails[_ids[i]].status = BookingStatus.confirmed;\\n            _supplierContract.mint(_ids[i], bookingDetails[_ids[i]].owner, 1, \\\"\\\", _uri[i], _status);\\n            bookingDetails[_ids[i]].tokenID = _ids[i];\\n        }\\n        emit ConfirmRooms(_ids, true);\\n    }\\n\\n    /**\\n    * @dev Function to checkout the rooms.\\n    * @param _supplierId ID of the supplier.\\n    * @param _ids IDs of the bookings.\\n    * @notice Only registered Suppliers' rooms can be checked out.\\n    * @notice Only the admin can checkout the rooms.\\n    * @notice The booking status should be confirmed to checkout it.\\n    * @notice The Active Booking NFTs are burnt from the owner's account.\\n    * @notice The Utility NFTs are minted to the owner of the booking.\\n    */\\n    function checkout(uint256 _supplierId, uint256[] memory _ids ) external onlyRole(ADMIN_ROLE)  {\\n        require(suppliers[_supplierId].status, \\\"Supplier not registered\\\");\\n        uint256 len = _ids.length;\\n        require(((len > 0) && (len < 11)), \\\"Not in max-min booking limit\\\");\\n        for(uint8 i=0; i<len; ++i) {\\n            require(bookingDetails[_ids[i]].status == BookingStatus.confirmed, \\\"Check the Booking status\\\");\\n        }\\n        for(uint8 i=0; i<len;++i) {\\n            bookingDetails[_ids[i]].status = BookingStatus.expired;\\n            ISupplierContract(suppliers[_supplierId].supplierContract).burn(bookingDetails[_ids[i]].owner, _ids[i], 1, true);\\n        }\\n        emit CheckoutRooms(_ids, true);\\n    }\\n\\n    /** \\n    * @dev Function to cancel the room bookings.\\n    * @param _supplierId ID of the supplier.\\n    * @param _id ID of the booking.\\n    * @param _penalty Penalty amount to be refunded.\\n    * @param _refund Refund amount to be refunded.\\n    * @param _charges Charges amount to be refunded.\\n    * @notice Only registered Suppliers' rooms can be cancelled.\\n    * @notice Only the admin can cancel the rooms.\\n    * @notice The booking status should be confirmed to cancel it.\\n    * @notice The Active Booking NFTs are burnt from the owner's account.\\n    */\\n    function cancelRoom(uint256 _supplierId, uint256 _id, uint256 _penalty, uint256 _refund, uint256 _charges) external onlyRole(ADMIN_ROLE) {\\n        require(suppliers[_supplierId].status, \\\"Supplier not registered\\\");\\n        require((bookingDetails[_id].status == BookingStatus.confirmed), \\\"Not a confirmed Booking\\\");\\n        require(((_penalty+_refund+_charges)<(bookingDetails[_id].total+1)), \\\"Transfer amount exceeds total\\\");\\n        ISupplierContract _supplierContract = ISupplierContract(suppliers[_supplierId].supplierContract);\\n        bookingDetails[_id].status = BookingStatus.cancelled;\\n        ITreasury(treasury).cancelUSDCRefund(_penalty, suppliers[bookingDetails[_id].supplierId].supplierOwner);\\n        ITreasury(treasury).cancelUSDCRefund(_refund, bookingDetails[_id].owner);\\n        ITreasury(treasury).cancelUSDCRefund(_charges, bukWallet);\\n        _supplierContract.burn(bookingDetails[_id].owner, _id, 1, false);\\n        emit CancelRoom(_id, true);\\n    }\\n\\n    /** \\n    * @dev Function to do the booking payment.\\n    * @param _commission Total BUK commission.\\n    * @param _total Total Booking Charge Excluding BUK commission.\\n    * @param _bookings Array of Booking Ids.\\n    */\\n    function _bookingPayment(uint256 _commission, uint256 _total, uint[] memory _bookings) internal returns (bool){\\n        bool collectCommission = IERC20(currency).transferFrom(_msgSender(), bukWallet, _commission);\\n        if(collectCommission) {\\n            bool collectPayment = IERC20(currency).transferFrom(_msgSender(), treasury, _total);\\n            if(collectPayment) {\\n                emit BookRooms(_bookings, _total, _commission);\\n                return true;\\n            } else {\\n                IERC20(currency).transferFrom(bukWallet, _msgSender(), _commission);\\n                IERC20(currency).transferFrom(treasury, _msgSender(), _total);\\n                return false;\\n            }\\n        } else {\\n            IERC20(currency).transferFrom(bukWallet, _msgSender(), _commission);\\n            return false;\\n        }\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IBukSupplierDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ninterface IBukSupplierDeployer {\\n    function deploySupplier(string memory _contractName, uint256 id, bytes32 _name, address _supplierOwner, address _utilityContractAddr, string memory _contractUri) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/IBukSupplierUtilityDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ninterface IBukSupplierUtilityDeployer {\\n    function deploySupplierUtility(string memory _contractName, uint256 id, bytes32 _name, string memory _contractUri) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/ISupplierContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ninterface ISupplierContract {\\n\\n    function updateSupplierDetails(bytes32 name, string memory contractName) external;\\n\\n    function grantFactoryRole(address _factory_contract) external;\\n\\n    function toggleNFTStatus(uint _id, bool status) external;\\n\\n    function uri(uint256 id) external view returns (string memory);\\n\\n    function mint(uint256 _id, address account, uint256 amount, bytes calldata data, string calldata _uri, bool _status) external returns (uint256);\\n\\n    function burn(address account, uint256 id, uint256 amount, bool utility) external;\\n\\n    function setContractURI(string memory _contractUri) external;\\n\\n    function setURI(uint256 _id, string memory _newuri) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ISupplierContractUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ninterface ISupplierContractUtility {\\n\\n    function grantSupplierRole(address _supplierContract) external;\\n\\n    function grantFactoryRole(address _factoryContract) external;\\n\\n    function updateSupplierDetails(bytes32 _name, string memory _contractName) external;\\n\\n    function mint(address account, uint256 _id, uint256 amount, string calldata _newuri, bytes calldata data) external;\\n\\n    function setURI(uint256 _id, string memory _newuri) external;\\n\\n    function setContractURI(string memory _contractUri) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ninterface ITreasury {\\n    function cancelUSDCRefund(uint256 _total, address _account)  external;\\n    function cancelRefund(uint256 _total, address _account, address _currency) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bukWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"booking\",\"type\":\"uint256\"}],\"name\":\"BookRoom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"bookings\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"BookRooms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BookingRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"booking\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CancelRoom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"bookings\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CheckoutRooms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"bookings\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ConfirmRooms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"GrantSupplierFactoryRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplierContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"utilityContract\",\"type\":\"address\"}],\"name\":\"RegisterSupplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"SetCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplierId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplierDeployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"utilityDeployer\",\"type\":\"address\"}],\"name\":\"SetDeployers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplierId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplierId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryContract\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplierId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"ToggleNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"UpdateSupplierDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_total\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_baseRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_checkin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_checkout\",\"type\":\"uint256\"}],\"name\":\"bookRoom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bookingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum BukTrips.BookingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"bookingRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charges\",\"type\":\"uint256\"}],\"name\":\"cancelRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"checkout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_uri\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"confirmRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newFactoryContract\",\"type\":\"address\"}],\"name\":\"grantSupplierFactoryRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_supplierOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"}],\"name\":\"registerSupplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_commission\",\"type\":\"uint8\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supplierDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_utilityDeployer\",\"type\":\"address\"}],\"name\":\"setDeployers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLockInSeconds\",\"type\":\"uint256\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplierDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"suppliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"supplierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplierOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"utilityContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"toggleNFTStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplierId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"updateSupplierDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilityDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BukTrips", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d3e17ea1485a0f118f171fb963e90eb3477cc06a0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000fdeaf92503887768a4031e1f2d75081518e4c537", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}