{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n   */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n   */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n   */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n   */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n    function allowance(address _owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IMasterChef {\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function enterStaking(uint256 _amount) external;\\r\\n\\r\\n    function leaveStaking(uint256 _amount) external;\\r\\n\\r\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external;\\r\\n}\"},\"MasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// This masterchefv2 mock plaxswap\\r\\n// Love by plasa\\r\\n//website https://plaxswap.io\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeBEP20.sol\\\";\\r\\nimport \\\"./IMasterChef.sol\\\";\\r\\n\\r\\n/// @notice The (older) MasterChef contract gives out a constant number of CAKE tokens per block.\\r\\n/// It is the only address with minting rights for CAKE.\\r\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\r\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\r\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\\r\\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    /// @notice Info of each MCV2 user.\\r\\n    /// `amount` LP token amount the user has provided.\\r\\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\r\\n    ///\\r\\n    /// We do some fancy math here. Basically, any point in time, the amount of CAKEs\\r\\n    /// entitled to a user but is pending to be distributed is:\\r\\n    ///\\r\\n    ///   pending reward = (user share * pool.accCakePerShare) - user.rewardDebt\\r\\n    ///\\r\\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here\\u0027s what happens:\\r\\n    ///   1. The pool\\u0027s `accCakePerShare` (and `lastRewardBlock`) gets updated.\\r\\n    ///   2. User receives the pending reward sent to his/her address.\\r\\n    ///   3. User\\u0027s `amount` gets updated. Pool\\u0027s `totalBoostedShare` gets updated.\\r\\n    ///   4. User\\u0027s `rewardDebt` gets updated.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 boostMultiplier;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each MCV2 pool.\\r\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\r\\n    ///     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\r\\n    ///     CAKE rewards each pool gets.\\r\\n    /// `accCakePerShare` Accumulated CAKEs per share, times 1e12.\\r\\n    /// `lastRewardBlock` Last block number that pool update action is executed.\\r\\n    /// `isRegular` The flag to set pool is regular or special. See below:\\r\\n    ///     In MasterChef V2 farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\r\\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\r\\n    ///     the CAKE rewards to all the PancakeSwap products.\\r\\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\r\\n    struct PoolInfo {\\r\\n        uint256 accCakePerShare;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 allocPoint;\\r\\n        uint256 totalBoostedShare;\\r\\n        bool isRegular;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of MCV1 contract.\\r\\n    IMasterChef public immutable MASTER_CHEF;\\r\\n    /// @notice Address of CAKE contract.\\r\\n    IBEP20 public immutable CAKE;\\r\\n\\r\\n    /// @notice The only address can withdraw all the burn CAKE.\\r\\n    address public burnAdmin;\\r\\n    /// @notice The contract handles the share boosts.\\r\\n    address public boostContract;\\r\\n\\r\\n    /// @notice Info of each MCV2 pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    /// @notice Address of the LP token for each MCV2 pool.\\r\\n    IBEP20[] public lpToken;\\r\\n\\r\\n    /// @notice Info of each pool user.\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e UserInfo)) public userInfo;\\r\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\r\\n    mapping(address =\\u003e bool) public whiteList;\\r\\n\\r\\n    /// @notice The pool id of the MCV2 mock token pool in MCV1.\\r\\n    uint256 public immutable MASTER_PID;\\r\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools\\u0027 allocation points.\\r\\n    uint256 public totalRegularAllocPoint;\\r\\n    /// @notice Total special allocation points. Must be the sum of all special pools\\u0027 allocation points.\\r\\n    uint256 public totalSpecialAllocPoint;\\r\\n    ///  @notice 40 cakes per block in MCV1\\r\\n    uint256 public MASTERCHEF_CAKE_PER_BLOCK;\\r\\n    uint256 public constant ACC_CAKE_PRECISION = 1e18;\\r\\n\\r\\n    /// @notice Basic boost factor, none boosted user\\u0027s boost factor\\r\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\r\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\r\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\r\\n    /// @notice total cake rate = toBurn + toRegular + toSpecial\\r\\n    uint256 public constant CAKE_RATE_TOTAL_PRECISION = 1e12;\\r\\n    /// @notice The last block number of CAKE burn action being executed.\\r\\n    /// @notice CAKE distribute % for burn\\r\\n    uint256 public cakeRateToBurn = 643750000000;\\r\\n    /// @notice CAKE distribute % for regular farm pool\\r\\n    uint256 public cakeRateToRegularFarm = 62847222222;\\r\\n    /// @notice CAKE distribute % for special pools\\r\\n    uint256 public cakeRateToSpecialFarm = 293402777778;\\r\\n\\r\\n    uint256 public lastBurnedBlock;\\r\\n\\r\\n    event Init();\\r\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, bool isRegular);\\r\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\r\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accCakePerShare);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event UpdateCakeRate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\\r\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\r\\n    event UpdateWhiteList(address indexed user, bool isValid);\\r\\n    event UpdateBoostContract(address indexed boostContract);\\r\\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\\r\\n\\r\\n    /// @param _MASTER_CHEF The PancakeSwap MCV1 contract address.\\r\\n    /// @param _CAKE The CAKE token contract address.\\r\\n    /// @param _MASTER_PID The pool id of the dummy pool on the MCV1.\\r\\n    /// @param _burnAdmin The address of burn admin.\\r\\n    constructor(\\r\\n        IMasterChef _MASTER_CHEF,\\r\\n        IBEP20 _CAKE,\\r\\n        uint256 _MASTER_PID,\\r\\n        uint256 _MASTERCHEF_CAKE_PER_BLOCK,\\r\\n        address _burnAdmin\\r\\n    ) public {\\r\\n        MASTER_CHEF = _MASTER_CHEF;\\r\\n        CAKE = _CAKE;\\r\\n        MASTER_PID = _MASTER_PID;\\r\\n        MASTERCHEF_CAKE_PER_BLOCK = _MASTERCHEF_CAKE_PER_BLOCK;\\r\\n        burnAdmin = _burnAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if caller is not the boost contract.\\r\\n     */\\r\\n    modifier onlyBoostContract() {\\r\\n        require(boostContract == msg.sender, \\\"Ownable: caller is not the boost contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of CAKE.\\r\\n    /// It will transfer all the `dummyToken` in the tx sender address.\\r\\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\\r\\n    /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\\r\\n    function init(IBEP20 dummyToken) external onlyOwner {\\r\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\r\\n        require(balance != 0, \\\"MasterChefV2: Balance must exceed 0\\\");\\r\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\r\\n        dummyToken.approve(address(MASTER_CHEF), balance);\\r\\n        MASTER_CHEF.deposit(MASTER_PID, balance);\\r\\n        // MCV2 start to earn CAKE reward from current block in MCV1 pool\\r\\n        lastBurnedBlock = block.number;\\r\\n        emit Init();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of MCV2 pools.\\r\\n    function poolLength() public view returns (uint256 pools) {\\r\\n        pools = poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Add a new pool. Can only be called by the owner.\\r\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    /// @param _allocPoint Number of allocation points for the new pool.\\r\\n    /// @param _lpToken Address of the LP BEP-20 token.\\r\\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    /// only for CAKE distributions within PancakeSwap products.\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IBEP20 _lpToken,\\r\\n        bool _isRegular,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        require(_lpToken.balanceOf(address(this)) \\u003e= 0, \\\"None BEP20 tokens\\\");\\r\\n        // stake CAKE token will cause staked token and reward token mixed up,\\r\\n        // may cause staked tokens withdraw as reward token,never do it.\\r\\n        require(_lpToken != CAKE, \\\"CAKE token can\\u0027t be added to farm pools\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        if (_isRegular) {\\r\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\r\\n        } else {\\r\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\r\\n        }\\r\\n        lpToken.push(_lpToken);\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n        allocPoint: _allocPoint,\\r\\n        lastRewardBlock: block.number,\\r\\n        accCakePerShare: 0,\\r\\n        isRegular: _isRegular,\\r\\n        totalBoostedShare: 0\\r\\n        })\\r\\n        );\\r\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the given pool\\u0027s CAKE allocation point. Can only be called by the owner.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _allocPoint New number of allocation points for the pool.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        if (poolInfo[_pid].isRegular) {\\r\\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        } else {\\r\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        }\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        emit SetPool(_pid, _allocPoint);\\r\\n    }\\r\\n\\r\\n    /// @notice View function for checking pending CAKE rewards.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _user Address of the user.\\r\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        UserInfo memory user = userInfo[_pid][_user];\\r\\n        uint256 accCakePerShare = pool.accCakePerShare;\\r\\n        uint256 lpSupply = pool.totalBoostedShare;\\r\\n\\r\\n        if (block.number \\u003e pool.lastRewardBlock \\u0026\\u0026 lpSupply != 0) {\\r\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n\\r\\n            uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\r\\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\\r\\n            );\\r\\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply));\\r\\n        }\\r\\n\\r\\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier(_user, _pid)).div(BOOST_PRECISION);\\r\\n        return boostedAmount.mul(accCakePerShare).div(ACC_CAKE_PRECISION).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    /// @notice Update cake reward for all the active pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid \\u003c length; ++pid) {\\r\\n            PoolInfo memory pool = poolInfo[pid];\\r\\n            if (pool.allocPoint != 0) {\\r\\n                updatePool(pid);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates and returns the `amount` of CAKE per block.\\r\\n    /// @param _isRegular If the pool belongs to regular or special.\\r\\n    function cakePerBlock(bool _isRegular) public view returns (uint256 amount) {\\r\\n        if (_isRegular) {\\r\\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToRegularFarm).div(CAKE_RATE_TOTAL_PRECISION);\\r\\n        } else {\\r\\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToSpecialFarm).div(CAKE_RATE_TOTAL_PRECISION);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates and returns the `amount` of CAKE per block to burn.\\r\\n    function cakePerBlockToBurn() public view returns (uint256 amount) {\\r\\n        amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToBurn).div(CAKE_RATE_TOTAL_PRECISION);\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables for the given pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo[_pid];\\r\\n        if (block.number \\u003e pool.lastRewardBlock) {\\r\\n            uint256 lpSupply = pool.totalBoostedShare;\\r\\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\\r\\n\\r\\n            if (lpSupply \\u003e 0 \\u0026\\u0026 totalAllocPoint \\u003e 0) {\\r\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n                uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\r\\n                    totalAllocPoint\\r\\n                );\\r\\n                pool.accCakePerShare = pool.accCakePerShare.add((cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply)));\\r\\n            }\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            poolInfo[_pid] = pool;\\r\\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accCakePerShare);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit LP tokens to pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _amount Amount of LP tokens to deposit.\\r\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        require(\\r\\n            pool.isRegular || whiteList[msg.sender],\\r\\n            \\\"MasterChefV2: The address is not available to deposit in this pool\\\"\\r\\n        );\\r\\n\\r\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\r\\n\\r\\n        if (user.amount \\u003e 0) {\\r\\n            settlePendingCake(msg.sender, _pid, multiplier);\\r\\n        }\\r\\n\\r\\n        if (_amount \\u003e 0) {\\r\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\r\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n\\r\\n            // Update total boosted share.\\r\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\r\\n            ACC_CAKE_PRECISION\\r\\n        );\\r\\n        poolInfo[_pid] = pool;\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw LP tokens from pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _amount Amount of LP tokens to withdraw.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        require(user.amount \\u003e= _amount, \\\"withdraw: Insufficient\\\");\\r\\n\\r\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\r\\n\\r\\n        settlePendingCake(msg.sender, _pid, multiplier);\\r\\n\\r\\n        if (_amount \\u003e 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\r\\n            ACC_CAKE_PRECISION\\r\\n        );\\r\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\r\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\r\\n        );\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Harvests CAKE from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\\r\\n    function harvestFromMasterChef() public {\\r\\n        MASTER_CHEF.deposit(MASTER_PID, 0);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        uint256 boostedAmount = amount.mul(getBoostMultiplier(msg.sender, _pid)).div(BOOST_PRECISION);\\r\\n        pool.totalBoostedShare = pool.totalBoostedShare \\u003e boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\\r\\n\\r\\n        // Note: transfer can fail or succeed if `amount` is zero.\\r\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    function updateDexTokenPerBlock(uint256 _MASTERCHEF_CAKE_PER_BLOCK) public onlyOwner {\\r\\n        MASTERCHEF_CAKE_PER_BLOCK = _MASTERCHEF_CAKE_PER_BLOCK;\\r\\n    }\\r\\n\\r\\n    /// @notice Send CAKE pending for burn to `burnAdmin`.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function burnCake(bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\r\\n        uint256 pendingCakeToBurn = multiplier.mul(cakePerBlockToBurn());\\r\\n\\r\\n        // SafeTransfer CAKE\\r\\n        _safeTransfer(burnAdmin, pendingCakeToBurn);\\r\\n        lastBurnedBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /// @notice Update the % of CAKE distributions for burn, regular pools and special pools.\\r\\n    /// @param _burnRate The % of CAKE to burn each block.\\r\\n    /// @param _regularFarmRate The % of CAKE to regular pools each block.\\r\\n    /// @param _specialFarmRate The % of CAKE to special pools each block.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function updateCakeRate(\\r\\n        uint256 _burnRate,\\r\\n        uint256 _regularFarmRate,\\r\\n        uint256 _specialFarmRate,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _burnRate \\u003e 0 \\u0026\\u0026 _regularFarmRate \\u003e 0 \\u0026\\u0026 _specialFarmRate \\u003e 0,\\r\\n            \\\"MasterChefV2: Cake rate must be greater than 0\\\"\\r\\n        );\\r\\n        require(\\r\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == CAKE_RATE_TOTAL_PRECISION,\\r\\n            \\\"MasterChefV2: Total rate must be 1e12\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        // burn cake base on old burn cake rate\\r\\n        burnCake(false);\\r\\n\\r\\n        cakeRateToBurn = _burnRate;\\r\\n        cakeRateToRegularFarm = _regularFarmRate;\\r\\n        cakeRateToSpecialFarm = _specialFarmRate;\\r\\n\\r\\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\\r\\n    }\\r\\n\\r\\n    /// @notice Update burn admin address.\\r\\n    /// @param _newAdmin The new burn admin address.\\r\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\r\\n        require(_newAdmin != address(0), \\\"MasterChefV2: Burn admin address must be valid\\\");\\r\\n        require(_newAdmin != burnAdmin, \\\"MasterChefV2: Burn admin address is the same with current address\\\");\\r\\n        address _oldAdmin = burnAdmin;\\r\\n        burnAdmin = _newAdmin;\\r\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\r\\n    }\\r\\n\\r\\n    /// @notice Update whitelisted addresses for special pools.\\r\\n    /// @param _user The address to be updated.\\r\\n    /// @param _isValid The flag for valid or invalid.\\r\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\r\\n        require(_user != address(0), \\\"MasterChefV2: The white list address must be valid\\\");\\r\\n\\r\\n        whiteList[_user] = _isValid;\\r\\n        emit UpdateWhiteList(_user, _isValid);\\r\\n    }\\r\\n\\r\\n    /// @notice Update boost contract address and max boost factor.\\r\\n    /// @param _newBoostContract The new address for handling all the share boosts.\\r\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\r\\n        require(\\r\\n            _newBoostContract != address(0) \\u0026\\u0026 _newBoostContract != boostContract,\\r\\n            \\\"MasterChefV2: New boost contract address must be valid\\\"\\r\\n        );\\r\\n\\r\\n        boostContract = _newBoostContract;\\r\\n        emit UpdateBoostContract(_newBoostContract);\\r\\n    }\\r\\n\\r\\n    /// @notice Update user boost factor.\\r\\n    /// @param _user The user address for boost factor updates.\\r\\n    /// @param _pid The pool id for the boost factor updates.\\r\\n    /// @param _newMultiplier New boost multiplier.\\r\\n    function updateBoostMultiplier(\\r\\n        address _user,\\r\\n        uint256 _pid,\\r\\n        uint256 _newMultiplier\\r\\n    ) external onlyBoostContract nonReentrant {\\r\\n        require(_user != address(0), \\\"MasterChefV2: The user address must be valid\\\");\\r\\n        require(poolInfo[_pid].isRegular, \\\"MasterChefV2: Only regular farm could be boosted\\\");\\r\\n        require(\\r\\n            _newMultiplier \\u003e= BOOST_PRECISION \\u0026\\u0026 _newMultiplier \\u003c= MAX_BOOST_PRECISION,\\r\\n            \\\"MasterChefV2: Invalid new boost multiplier\\\"\\r\\n        );\\r\\n\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\r\\n        settlePendingCake(_user, _pid, prevMultiplier);\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\r\\n            ACC_CAKE_PRECISION\\r\\n        );\\r\\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\\r\\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\\r\\n        );\\r\\n        poolInfo[_pid] = pool;\\r\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\r\\n\\r\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\r\\n    }\\r\\n\\r\\n    /// @notice Get user boost multiplier for specific pool id.\\r\\n    /// @param _user The user address.\\r\\n    /// @param _pid The pool id.\\r\\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\\r\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\r\\n        return multiplier \\u003e BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\r\\n    }\\r\\n\\r\\n    /// @notice Settles, distribute the pending CAKE rewards for given user.\\r\\n    /// @param _user The user address for settling rewards.\\r\\n    /// @param _pid The pool id.\\r\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\r\\n    function settlePendingCake(\\r\\n        address _user,\\r\\n        uint256 _pid,\\r\\n        uint256 _boostMultiplier\\r\\n    ) internal {\\r\\n        UserInfo memory user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\\r\\n        uint256 accCake = boostedAmount.mul(poolInfo[_pid].accCakePerShare).div(ACC_CAKE_PRECISION);\\r\\n        uint256 pending = accCake.sub(user.rewardDebt);\\r\\n        // SafeTransfer CAKE\\r\\n        _safeTransfer(_user, pending);\\r\\n    }\\r\\n\\r\\n    /// @notice Safe Transfer CAKE.\\r\\n    /// @param _to The CAKE receiver address.\\r\\n    /// @param _amount transfer CAKE amounts.\\r\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\r\\n        if (_amount \\u003e 0) {\\r\\n            // Check whether MCV2 has enough CAKE. If not, harvest from MCV1.\\r\\n            if (CAKE.balanceOf(address(this)) \\u003c _amount) {\\r\\n                harvestFromMasterChef();\\r\\n            }\\r\\n            uint256 balance = CAKE.balanceOf(address(this));\\r\\n            if (balance \\u003c _amount) {\\r\\n                _amount = balance;\\r\\n            }\\r\\n            CAKE.safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor () internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IBEP20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance =\\r\\n        token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata =\\r\\n        address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"_MASTER_CHEF\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_CAKE\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MASTER_PID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MASTERCHEF_CAKE_PER_BLOCK\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCakeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_CAKE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAKE\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAKE_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_CAKE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_CHEF\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burnCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFromMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBoostContract\",\"type\":\"address\"}],\"name\":\"updateBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateBurnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateCakeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MASTERCHEF_CAKE_PER_BLOCK\",\"type\":\"uint256\"}],\"name\":\"updateDexTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000641084ecc9ddb557bba1ee3de5fccaf5e88159ed000000000000000000000000328801b0b580eadd83ea841638865ea41dc6fb2500000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000003a660af22ca065f084db20b602cf05a5cecc84bd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a085550c5d86023f36281153afa8e1397c41624494be4908fee2341b9880ae0c"}