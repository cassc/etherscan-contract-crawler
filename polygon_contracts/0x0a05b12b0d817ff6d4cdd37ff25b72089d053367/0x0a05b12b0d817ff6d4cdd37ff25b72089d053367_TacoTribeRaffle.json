{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2023-04-05\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/MarketPlace.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TacoTribeRaffle is Ownable, ReentrancyGuard {\r\n    struct Item {\r\n        address id;\r\n        uint256 itemType; // 1: ERC721, 2: ERC1155, 3: WL spots, 4: Raffle Entry, 255: Other\r\n        string name;\r\n        string imageUrl;\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        uint256 totalSupply;\r\n        uint256 purchased;\r\n        uint[] costIds;\r\n        uint[] costAmounts;\r\n        uint256 numWinners;\r\n        uint256 maxPerWallet;\r\n        bool ended;\r\n        bool active;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    struct Cost {\r\n        uint256 id;\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n        uint256 costType; // 1: ERC1155, 2: ERC20\r\n    }\r\n\r\n    struct Order {\r\n        address id;\r\n        address itemId;\r\n        address user;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct DetailOrder {\r\n        address id;\r\n        address user;\r\n        Item item;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct RaffleResult {\r\n        address id;\r\n        address[] entries;\r\n        address[] winners;\r\n        Item item;\r\n        uint256 timestamp;\r\n        bool isReroll;\r\n        bool isValid;\r\n    }\r\n\r\n    uint256 constant IT_721 = 1;\r\n    uint256 constant IT_1155 = 2;\r\n    uint256 constant IT_WL = 3;\r\n    uint256 constant IT_RAFFLE = 4;\r\n    uint256 constant IT_OTHER = 255;\r\n\r\n    uint256 constant CT_1155 = 1;\r\n    uint256 constant CT_20 = 2;\r\n\r\n\r\n    uint256 randNonce = 0;\r\n    Item[] public items;\r\n    RaffleResult[] public raffleResults;\r\n    address public storageWallet;\r\n    mapping(address => Order[]) userHistory;\r\n    mapping(address => Item) public itemsById;\r\n    mapping(uint256 => Cost) public costs;\r\n    mapping(address => address[]) public purchasedUsers;\r\n    mapping(address => mapping(address => uint256)) public purchaseCount; // itemID => address => count\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    function getId() internal returns(address)\r\n    {\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, ++randNonce)))));\r\n    }\r\n\r\n    function setStorageWallet(address _address) public onlyOwner {\r\n        storageWallet = _address;\r\n    }\r\n\r\n    function _getIndex(address _itemId) internal view returns (uint) {\r\n        uint index;\r\n        for (index = 0; index < items.length; index ++){\r\n            if (items[index].id == _itemId) {\r\n                break;\r\n            }\r\n        }\r\n        require(index < items.length, \"Not found\");\r\n        return index;\r\n    }\r\n\r\n    function setItemProps(address _itemId, string memory _name, string memory _imageUrl) public onlyOwner {\r\n        Item storage item = itemsById[_itemId];\r\n        require(item.id != address(0), \"Not exits\");\r\n        uint index = _getIndex(_itemId);\r\n        bytes memory temp = bytes(_name);\r\n        if (temp.length > 0) {\r\n            item.name = _name;\r\n            items[index].name = _name;\r\n        }\r\n\r\n        temp = bytes(_imageUrl);\r\n        if (temp.length > 0) {\r\n            item.imageUrl = _imageUrl;\r\n            items[index].imageUrl = _imageUrl;\r\n        }\r\n    }\r\n\r\n    function setItemActive(address _itemId, bool _active) public onlyOwner {\r\n        Item storage item = itemsById[_itemId];\r\n        require(item.id != address(0), \"Not exits\");\r\n        uint index = _getIndex(_itemId);\r\n        item.active = _active;\r\n        items[index].active = _active;\r\n    }\r\n\r\n    function setItemEnded(address _itemId, bool _ended) public onlyOwner {\r\n        Item storage item = itemsById[_itemId];\r\n        require(item.id != address(0), \"Not exits\");\r\n        uint index = _getIndex(_itemId);\r\n        item.ended = _ended;\r\n        items[index].ended = _ended;\r\n    }\r\n\r\n    function setItemCost(address _itemId, uint256[] memory _costIds, uint256[] memory _costAmounts) public onlyOwner {\r\n        require(_costIds.length == _costAmounts.length, \"Length error\");\r\n        Item storage item = itemsById[_itemId];\r\n        require(item.id != address(0), \"Not exits\");\r\n        uint index = _getIndex(_itemId);\r\n        item.costIds = _costIds;\r\n        item.costAmounts = _costAmounts;\r\n        items[index].costIds = _costIds;\r\n        items[index].costAmounts = _costAmounts;\r\n    }\r\n\r\n    function createCost(uint256 _costId, uint256 _costType, address _contractAddress, uint256 _tokenId) public onlyOwner {\r\n        costs[_costId] = Cost(_costId, _contractAddress, _tokenId, _costType);\r\n    }\r\n\r\n    function add721TokenItem(string memory _name, string memory _imageUrl, address _contractAddress, uint256 _tokenId, uint256[] memory _costIds, uint256[] memory _costAmounts, bool _active) public onlyOwner {\r\n        require(_costIds.length == _costAmounts.length, \"Array Error\");\r\n        address itemId = getId();\r\n        Item memory newItem = Item(itemId, IT_721, _name, _imageUrl, _contractAddress, _tokenId, 1, 1, 0, _costIds ,_costAmounts, 0, 1, false, _active, block.timestamp);\r\n        itemsById[itemId] = newItem;\r\n        items.push(newItem);\r\n    }\r\n\r\n    function add1155TokenItem(string memory _name, string memory _imageUrl, address _contractAddress, uint256 _tokenId, uint256 _amount, uint256 _totalSupply, uint256[] memory _costIds, uint256[] memory _costAmounts, uint256 _maxPerWallet, bool _active) public onlyOwner {\r\n        require(_costIds.length == _costAmounts.length, \"Array Error\");\r\n        address itemId = getId();\r\n        Item memory newItem = Item(itemId, IT_1155, _name, _imageUrl, _contractAddress, _tokenId, _amount, _totalSupply, 0, _costIds ,_costAmounts, 0, _maxPerWallet, false, _active, block.timestamp);\r\n        itemsById[itemId] = newItem;\r\n        items.push(newItem);\r\n    }\r\n\r\n    function addWLItem(string memory _name, string memory _imageUrl, uint256 _totalSupply, uint256[] memory _costIds, uint256[] memory _costAmounts, uint256 _maxPerWallet, bool _active) public onlyOwner {\r\n        require(_costIds.length == _costAmounts.length, \"Array Error\");\r\n        address itemId = getId();\r\n        Item memory newItem = Item(itemId, IT_WL, _name, _imageUrl, address(0), 0, 0, _totalSupply, 0, _costIds ,_costAmounts, 0, _maxPerWallet, false, _active, block.timestamp);\r\n        itemsById[itemId] = newItem;\r\n        items.push(newItem);\r\n    }\r\n\r\n    function addRaffleEntryItem(string memory _name, string memory _imageUrl, uint256 _totalSupply, uint256[] memory _costIds, uint256[] memory _costAmounts, uint256 _numWinners, uint256 _maxPerWallet, bool _active) public onlyOwner {\r\n        require(_costIds.length == _costAmounts.length, \"Array Error\");\r\n        address itemId = getId();\r\n        Item memory newItem = Item(itemId, IT_RAFFLE, _name, _imageUrl, address(0), 0, 0, _totalSupply, 0, _costIds ,_costAmounts, _numWinners, _maxPerWallet, false, _active, block.timestamp);\r\n        itemsById[itemId] = newItem;\r\n        items.push(newItem);\r\n    }\r\n\r\n    function removeItem(address _itemId) public onlyOwner {\r\n        Item storage item = itemsById[_itemId];\r\n        require(item.id != address(0), \"Not exists\");\r\n        uint index = _getIndex(_itemId);\r\n        items[index] = items[(items.length - 1)];\r\n        items.pop();\r\n\r\n        item.id = address(0);\r\n        item.name = \"\";\r\n        item.imageUrl = \"\";\r\n        item.contractAddress = address(0);\r\n        item.tokenId = 0;\r\n        item.amount = 0;\r\n        item.purchased = 0;\r\n        item.active = false;\r\n    }\r\n\r\n    function getItems(uint cursor, uint limit) public view returns (Item[] memory, uint) {\r\n        uint256 len = limit;\r\n        uint itemsLength = 0;\r\n        for (uint index = 0; index < items.length; index ++) {\r\n            if (isValidItem(items[index].id)) {\r\n                itemsLength++;\r\n            }\r\n        }\r\n\r\n        if (len > itemsLength - cursor) {\r\n            len = itemsLength - cursor;\r\n        }\r\n\r\n        Item[] memory temp = new Item[](len);\r\n        if (itemsLength == 0) {\r\n            return (temp, 0);\r\n        }\r\n\r\n        uint count = 0;\r\n        while(true) {\r\n            if (count >= len) {\r\n                break;\r\n            }\r\n            Item memory item = items[(itemsLength - 1) - (cursor + count)];\r\n            if (isValidItem(item.id)) {\r\n                temp[count] = item;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return (temp, cursor + len);\r\n    }\r\n\r\n\r\n    function beforePurchase(address _itemId) internal view {\r\n        Item memory item = itemsById[_itemId];\r\n        require(isValidItem(_itemId), \"Invalid Item\");\r\n        require(item.purchased < item.totalSupply, \"Already sold out\");\r\n        require(item.maxPerWallet > getPurchaseCount(_itemId, msg.sender), \"Already purchased\");\r\n    }\r\n\r\n    function isValidItem(address _itemId) internal view returns (bool) {\r\n        Item memory item = itemsById[_itemId];\r\n        if(item.id == address(0)) return false;\r\n        if(item.itemType == 0) return false;\r\n        if(item.costIds.length == 0) return false;\r\n        if(item.costAmounts.length == 0) return false;\r\n        if(item.costAmounts.length != item.costIds.length) return false;\r\n        if(!item.active) return false;\r\n        if (item.itemType == IT_721) {\r\n            if(!IERC721(item.contractAddress).isApprovedForAll(storageWallet, address(this))) return false;\r\n        } else if (item.itemType == IT_1155) {\r\n            if(!IERC1155(item.contractAddress).isApprovedForAll(storageWallet, address(this))) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getPurchaseCount(address _itemId, address _user) public view returns (uint256) {\r\n        return purchaseCount[_itemId][_user];\r\n    }\r\n\r\n    function isPurchased(address _itemId, address _user) public view returns (bool) {\r\n        return getPurchaseCount(_itemId, _user) > 0;\r\n    }\r\n\r\n    function purchase(address _itemId, uint256 _amount) public {\r\n        for (uint index = 0; index < _amount; index ++) {\r\n            purchase(_itemId);\r\n        }\r\n    }\r\n\r\n    function purchase(address _itemId) public {\r\n        beforePurchase(_itemId);\r\n        Item storage item = itemsById[_itemId];\r\n        for (uint i=0; i<item.costIds.length; i++) {\r\n            Cost memory cost = costs[item.costIds[i]];\r\n            require(cost.id != 0 && cost.costType != 0, \"Invalid cost\");\r\n            uint256 costAmount = item.costAmounts[i];\r\n            if (costAmount > 0) {\r\n                if (cost.costType == CT_1155) {\r\n                    IERC1155 costContract = IERC1155(cost.contractAddress);\r\n                    require(costContract.isApprovedForAll(msg.sender, address(this)), \"Approve error\");\r\n                    require(costContract.balanceOf(msg.sender, cost.tokenId) >= costAmount, \"Balance error\");\r\n                    costContract.safeTransferFrom(msg.sender, storageWallet, cost.tokenId, costAmount, \"\");\r\n                } else if (cost.costType == CT_20){\r\n                    IERC20 costContract = IERC20(cost.contractAddress);\r\n                    require(costContract.balanceOf(msg.sender) >= costAmount, \"Balance error\");\r\n                    require(costContract.allowance(msg.sender, address(this)) >= costAmount, \"Approve error\");\r\n                    costContract.transferFrom(msg.sender, storageWallet, costAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (item.itemType == IT_721) {\r\n            IERC721(item.contractAddress).safeTransferFrom(storageWallet, msg.sender, item.tokenId);\r\n        } else if (item.itemType == IT_1155) {\r\n            IERC1155(item.contractAddress).safeTransferFrom(storageWallet, msg.sender, item.tokenId, item.amount, \"\");\r\n        }\r\n\r\n        uint index = _getIndex(_itemId);\r\n        items[index].purchased++;\r\n        item.purchased++;\r\n        purchasedUsers[_itemId].push(msg.sender);\r\n        purchaseCount[_itemId][msg.sender]++;\r\n        Order memory order = Order(getId(), _itemId, msg.sender, block.timestamp);\r\n        userHistory[msg.sender].push(order);\r\n    }\r\n\r\n    function getHistory(address _user, uint cursor, uint limit) public view returns (DetailOrder[] memory, uint) {\r\n        uint256 len = limit;\r\n        uint historyLength = userHistory[_user].length;\r\n        if (len > historyLength - cursor) {\r\n            len = historyLength - cursor;\r\n        }\r\n\r\n        DetailOrder[] memory temp = new DetailOrder[](len);\r\n        if (historyLength == 0) {\r\n            return (temp, 0);\r\n        }\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            Order memory order = userHistory[_user][(historyLength - 1) - (cursor + i)];\r\n            temp[i] = DetailOrder(order.id, order.user, itemsById[order.itemId], order.timestamp);\r\n        }\r\n\r\n        return (temp, cursor + len);\r\n    }\r\n\r\n    function getPurchasedUser(address _itemId, uint cursor, uint limit) public view returns (address[] memory, uint) {\r\n        uint256 len = limit;\r\n        uint listLength = purchasedUsers[_itemId].length;\r\n        if (len > listLength - cursor) {\r\n            len = listLength - cursor;\r\n        }\r\n\r\n        address[] memory temp = new address[](len);\r\n        if (listLength == 0) {\r\n            return (temp, 0);\r\n        }\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            temp[i] = purchasedUsers[_itemId][(listLength - 1) - (cursor + i)];\r\n        }\r\n\r\n        return (temp, cursor + len);\r\n    }\r\n\r\n    function pickRaffleWinners(address _itemId, bool _forcePick) public onlyOwner {\r\n        Item memory item = itemsById[_itemId];\r\n        require(item.itemType == IT_RAFFLE, \"Not a raffle\");\r\n        require(getRafflePickCount(_itemId) == 0, \"Raffle error\");\r\n        require(_forcePick || item.totalSupply == item.purchased, \"Still accepting entries\");\r\n        setItemEnded(_itemId, true);\r\n        _pick(item, false);\r\n    }\r\n\r\n    function rerollRaffleWinners(address _itemId) public onlyOwner {\r\n        Item memory item = itemsById[_itemId];\r\n        require(item.itemType == IT_RAFFLE, \"Not a raffle\");\r\n        require(getRafflePickCount(_itemId) > 0, \"Raffle error\");\r\n        _pick(item, true);\r\n    }\r\n\r\n    function _pick(Item memory _item, bool _isReroll) internal {\r\n        address[] memory entries = purchasedUsers[_item.id];\r\n        address[] memory tempWinners = new address[](_item.numWinners);\r\n        RaffleResult memory result;\r\n        result.id = getId();\r\n        result.item = _item;\r\n        result.timestamp = block.timestamp;\r\n        result.entries = entries;\r\n        result.isValid = true;\r\n        result.isReroll = _isReroll;\r\n        entries = _shuffle(entries);\r\n\r\n        if (_isReroll) {\r\n            for (uint index = 0; index < raffleResults.length; index++) {\r\n                if (raffleResults[index].item.id == _item.id) {\r\n                    raffleResults[index].isValid = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint count = 0;\r\n        for (uint index = 0; index < entries.length; index++) {\r\n            bool found = false;\r\n            address entry = entries[index];\r\n            for (uint i=0; i < tempWinners.length; i++) {\r\n                if(tempWinners[i] == entry){\r\n                    found=true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                tempWinners[count] = entry;\r\n                count++;\r\n            }\r\n            if (count >= _item.numWinners) {\r\n                break;\r\n            }\r\n        }\r\n        result.winners = tempWinners;\r\n        raffleResults.push(result);\r\n    }\r\n\r\n    function getRafflePickCount(address _itemId) public view returns (uint) {\r\n        uint count = 0;\r\n        for (uint index = 0; index < raffleResults.length; index++) {\r\n            if (raffleResults[index].item.id == _itemId) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function getRaffleResults(uint cursor, uint limit) public view returns (RaffleResult[] memory, uint) {\r\n        uint256 len = limit;\r\n        if (len > raffleResults.length - cursor) {\r\n            len = raffleResults.length - cursor;\r\n        }\r\n\r\n        RaffleResult[] memory temp = new RaffleResult[](len);\r\n        if (raffleResults.length == 0) {\r\n            return (temp, 0);\r\n        }\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            temp[i] = raffleResults[(raffleResults.length - 1) - (cursor + i)];\r\n        }\r\n\r\n        return (temp, cursor + len);\r\n    }\r\n\r\n    function _shuffle(address[] memory numberArr) internal view returns (address[] memory) {\r\n        for (uint256 i = 0; i < numberArr.length; i++) {\r\n            uint256 n = i + uint256(keccak256(abi.encodePacked(block.timestamp))) % (numberArr.length - i);\r\n            address temp = numberArr[n];\r\n            numberArr[n] = numberArr[i];\r\n            numberArr[i] = temp;\r\n        }\r\n        return numberArr;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"add1155TokenItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"add721TokenItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"addRaffleEntryItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"addWLItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_costType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TacoTribeRaffle.Item\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TacoTribeRaffle.DetailOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TacoTribeRaffle.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPurchaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getPurchasedUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"}],\"name\":\"getRafflePickCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getRaffleResults\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TacoTribeRaffle.Item\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReroll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct TacoTribeRaffle.RaffleResult[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemsById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_forcePick\",\"type\":\"bool\"}],\"name\":\"pickRaffleWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleResults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"costAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TacoTribeRaffle.Item\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReroll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"}],\"name\":\"rerollRaffleWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setItemActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_costIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setItemCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ended\",\"type\":\"bool\"}],\"name\":\"setItemEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"setItemProps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStorageWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TacoTribeRaffle", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://32f45a643e86ed0dade639bc18f310e5e94b9d07caa2005ddaae5a5b7ea376eb"}