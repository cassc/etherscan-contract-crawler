{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NetliOF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\ncontract NetliOF is Ownable {\\n    struct Content {\\n        address creator;\\n        uint256 price;\\n        uint256 date;\\n        string desc;\\n        string freeipfsurl;\\n        string paidipfsurl;\\n        uint256 category;\\n        uint256 contID;\\n    }\\n    struct Category {\\n        uint256 id;\\n        string name;\\n        string descr;\\n    }\\n    struct Purchased {\\n        uint256 contID;\\n        address buyer;\\n        uint256 date;\\n    }\\n    struct Creator {\\n        address creatorAddr;\\n        string name;\\n        string desc;\\n        string profilePicUrl;\\n        string coverPicUrl;\\n        string insta;\\n        string telegram;\\n        string twitter;\\n        string youtube;\\n    }\\n    Content[] _contents;\\n    Category[] _categories;\\n    Purchased[] _purchases;\\n    Creator[] _creators;\\n    mapping (uint256 => Content[]) _contentID;\\n    mapping (uint256 => Category[]) _catID;\\n    mapping (address => Purchased[]) _addrToPurchase;\\n    mapping (address => Content[]) _creatorToContent;\\n    mapping (address => uint256) public _howManyPerCreator;\\n    mapping (address => bool) public _isCreator;\\n    mapping (address => Creator) _addrToInfo;\\n    mapping (address => bool[]) _isHidden;\\n    uint256 public feePercentage = 12;\\n    uint256 public MAX_FEE = 12;\\n\\n\\n    address payable public balanceTwoAddress = payable(0x77d4321478234c729bDA5011722C85465BEd0917);\\n    uint256 catID = 0;\\n    uint256 contID = 0;\\n\\n    function setFeePercentage(uint256 _newFeePercentage) public onlyOwner {\\n        require(_newFeePercentage <= MAX_FEE, \\\"Fee cannot exceed MAX_FEE value!\\\");\\n        feePercentage = _newFeePercentage;\\n    }\\n\\n    function setBalanceTwoAddress(address payable _newBalanceTwoAddress) public onlyOwner {\\n        balanceTwoAddress = _newBalanceTwoAddress;\\n    }\\n    function addCategory (string memory _name, string memory _desc) public onlyOwner {\\n        catID++;\\n        _catID[catID].push(Category(catID, _name, _desc));\\n        _categories.push(Category(catID, _name, _desc));\\n    }\\n    function addContent(uint256 _price, string memory _desc, string memory _url1, string memory _url2, uint256 _cat) public {\\n        require(_isCreator[msg.sender] == true, \\\"You're not allowed to post\\\");\\n        _contentID[contID].push(Content(msg.sender, _price, block.timestamp, _desc, _url1, _url2, _cat, contID));\\n        _contents.push(Content(msg.sender, _price, block.timestamp, _desc, _url1, _url2, _cat, contID));\\n        _creatorToContent[msg.sender].push(Content(msg.sender, _price, block.timestamp, _desc, _url1, _url2, _cat, contID));\\n        contID++;\\n        _howManyPerCreator[msg.sender] += 2;\\n    }\\n    function addCreator(\\n        address _creator, \\n        string memory _name, \\n        string memory _desc, \\n        string memory _url1,\\n        string memory _url2,\\n        string memory _social1,\\n        string memory _social2,\\n        string memory _social3,\\n        string memory _social4) \\n        public {\\n    require(_isCreator[msg.sender] == true, \\\"You're not a Creator\\\");\\n    _addrToInfo[msg.sender] =Creator(_creator, _name, _desc, _url1, _url2, _social1, _social2, _social3, _social4);\\n    _creators.push(Creator(_creator ,_name, _desc, _url1, _url2, _social1, _social2, _social3, _social4));\\n    }\\n    function enableCreator(address _creator) public onlyOwner {\\n        _isCreator[_creator] = true;\\n    }\\n    function removeCreator(address _creator) public onlyOwner {\\n    _isCreator[_creator] = false;\\n    }\\n    function purchase(uint256 _contID) external payable returns (string memory) {\\n        require (msg.value >= _contentID[_contID][0].price, \\\"Insufficient Balance\\\");\\n        uint256 count = 0;\\n        for(uint i = 0; i < _addrToPurchase[msg.sender].length; i++){\\n            if(_contID == _addrToPurchase[msg.sender][i].contID){\\n               count++;\\n            }}\\n            if(count == 0) {\\n                _addrToPurchase[msg.sender].push(Purchased(_contID, msg.sender, block.timestamp));\\n                _pay(_contentID[_contID][0].creator, msg.value);\\n                return \\\"Content Bought succesfully!\\\";\\n            } else {\\n                revert(\\\"You already own this content!\\\");\\n            }\\n        }\\n    function retrieveContents() public view returns (Content[] memory) {\\n        return _contents;\\n    }\\n    function retrieveCategories() public view returns (Category[] memory) {\\n        return _categories;\\n    }\\n    function retrievePurchased() public view returns (Purchased[] memory) {\\n        return _purchases;\\n    }\\n    function retrieveCreators() public view returns(Creator[] memory) {\\n        return _creators;\\n    }\\n    function retrieveCreatorByAddress(address _creator) public view returns(Creator memory) {\\n        return _addrToInfo[_creator];\\n    }\\n    function retrievePurchaseByAddress(address _buyer) public view returns(Purchased[] memory) {\\n        return _addrToPurchase[_buyer];\\n    }\\n    function retrieveContentByID(uint256 _contID) public view returns (Content[] memory) {\\n        return _contentID[_contID];\\n    }\\n    function _pay(address _creator, uint256 _amount) internal {\\n        uint256 balanceOne = _amount * (100 - feePercentage) / 100;\\n        uint256 balanceTwo = _amount  * feePercentage / 100;\\n        ( bool transferOne, ) = payable(_creator).call{value: balanceOne}(\\\"\\\");\\n        ( bool transferTwo, ) = balanceTwoAddress.call{value: balanceTwo}(\\\"\\\");\\n        require(transferOne && transferTwo, \\\"Transfer failed.\\\");\\n    }\\n\\n}    \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_howManyPerCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cat\",\"type\":\"uint256\"}],\"name\":\"addContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_url2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_social1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_social2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_social3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_social4\",\"type\":\"string\"}],\"name\":\"addCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceTwoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"enableCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contID\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"removeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveCategories\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"descr\",\"type\":\"string\"}],\"internalType\":\"struct NetliOF.Category[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contID\",\"type\":\"uint256\"}],\"name\":\"retrieveContentByID\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"freeipfsurl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paidipfsurl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contID\",\"type\":\"uint256\"}],\"internalType\":\"struct NetliOF.Content[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveContents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"freeipfsurl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"paidipfsurl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contID\",\"type\":\"uint256\"}],\"internalType\":\"struct NetliOF.Content[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"retrieveCreatorByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profilePicUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPicUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"insta\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"youtube\",\"type\":\"string\"}],\"internalType\":\"struct NetliOF.Creator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profilePicUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverPicUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"insta\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"youtube\",\"type\":\"string\"}],\"internalType\":\"struct NetliOF.Creator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"retrievePurchaseByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct NetliOF.Purchased[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrievePurchased\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"contID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct NetliOF.Purchased[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newBalanceTwoAddress\",\"type\":\"address\"}],\"name\":\"setBalanceTwoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NetliOF", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}