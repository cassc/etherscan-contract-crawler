{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract Proxy {\r\n    bytes32 private constant IMPLEMENTATION_SLOT =\r\n        bytes32(uint(keccak256(\"eip1967.proxy.implementation\")) - 1);\r\n    bytes32 private constant ADMIN_SLOT =\r\n        bytes32(uint(keccak256(\"eip1967.proxy.admin\")) - 1);\r\n\r\n    constructor() {\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    function _getAdmin() private view returns (address) {\r\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\r\n    }\r\n\r\n    function _setAdmin(address _admin) private {\r\n        require(_admin != address(0), \"admin = zero address\");\r\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = _admin;\r\n    }\r\n\r\n    function _getImplementation() private view returns (address) {\r\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    function _setImplementation(address _implementation) private {\r\n        require(_implementation.code.length > 0, \"implementation is not contract\");\r\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = _implementation;\r\n    }\r\n\r\n    // Admin interface //\r\n    function changeAdmin(address _admin) external ifAdmin {\r\n        _setAdmin(_admin);\r\n    }\r\n\r\n    // 0x3659cfe6\r\n    function upgradeTo(address _implementation) external ifAdmin {\r\n        _setImplementation(_implementation);\r\n    }\r\n\r\n    // 0xf851a440\r\n    function admin() external view returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    // 0x5c60da1b\r\n    function implementation() external view returns (address) {\r\n        return _getImplementation();\r\n    }\r\n\r\n    // User interface //\r\n    function _delegate(address _implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n\r\n            // calldatacopy(t, f, s) - copy s bytes from calldata at position f to mem at position t\r\n            // calldatasize() - size of call data in bytes\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n\r\n            // delegatecall(g, a, in, insize, out, outsize) -\r\n            // - call contract at address a\r\n            // - with input mem[in\u2026(in+insize))\r\n            // - providing g gas\r\n            // - and output area mem[out\u2026(out+outsize))\r\n            // - returning 0 on error (eg. out of gas) and 1 on success\r\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            // returndatacopy(t, f, s) - copy s bytes from returndata at position f to mem at position t\r\n            // returndatasize() - size of the last returndata\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                // revert(p, s) - end execution, revert state changes, return data mem[p\u2026(p+s))\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                // return(p, s) - end execution, return data mem[p\u2026(p+s))\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    function _fallback() private {\r\n        _delegate(_getImplementation());\r\n    }\r\n\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        _fallback();\r\n    }\r\n}\r\n\r\n\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    function getAddressSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xb83d19d8345f6247726fdb2c2a1e273b9d3c57e6", "SwarmSource": "ipfs://4e5fe86d54599e7a9c8ab2106e184b65d1b4c7e583053f496403411bc159458c"}