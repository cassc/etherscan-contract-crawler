{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"ERC20.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC721.sol\\\";\\nimport \\\"ERC721Holder.sol\\\";\\nimport \\\"IERC1155.sol\\\";\\nimport \\\"ERC1155Holder.sol\\\";\\nimport \\\"ERC1155Receiver.sol\\\";\\n\\nimport \\\"IRegistry.sol\\\";\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\\ncontract Registry is IRegistry, ERC721Holder, ERC1155Receiver, ERC1155Holder {\\n    using SafeERC20 for ERC20;\\n\\n    IResolver private resolver;\\n    address private admin;\\n    address payable private beneficiary;\\n    uint256 private lendingID = 1;\\n    uint256 private rentingID = 1;\\n    bool public paused = false;\\n    uint256 public rentFee = 0;\\n    uint256 private constant SECONDS_IN_DAY = 86400;\\n    mapping(bytes32 => Lending) private lendings;\\n    mapping(bytes32 => Renting) private rentings;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ReNFT::not admin\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"ReNFT::paused\\\");\\n        _;\\n    }\\n\\n    constructor(address newResolver, address payable newBeneficiary, address newAdmin) {\\n        ensureIsNotZeroAddr(newResolver);\\n        ensureIsNotZeroAddr(newBeneficiary);\\n        ensureIsNotZeroAddr(newAdmin);\\n        resolver = IResolver(newResolver);\\n        beneficiary = newBeneficiary;\\n        admin = newAdmin;\\n    }\\n\\n    function lend(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendAmount,\\n        uint8[] memory maxRentDuration,\\n        bytes4[] memory dailyRentPrice,\\n        uint8[] memory paymentToken,\\n        bool[] memory willAutoRenew\\n    ) external override notPaused {\\n        bundleCall(\\n            handleLend,\\n            createLendCallData(\\n                nftStandard,\\n                nftAddress,\\n                tokenID,\\n                lendAmount,\\n                maxRentDuration,\\n                dailyRentPrice,\\n                paymentToken,\\n                willAutoRenew\\n            )\\n        );\\n    }\\n\\n    function stopLend(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID\\n    ) external override notPaused {\\n        bundleCall(handleStopLend, createActionCallData(nftStandard, nftAddress, tokenID, _lendingID, new uint256[](0)));\\n    }\\n\\n    function rent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID,\\n        uint8[] memory rentDuration,\\n        uint256[] memory rentAmount\\n    ) external payable override notPaused {\\n        bundleCall(\\n            handleRent, createRentCallData(nftStandard, nftAddress, tokenID, _lendingID, rentDuration, rentAmount)\\n        );\\n    }\\n\\n    function stopRent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID,\\n        uint256[] memory _rentingID\\n    ) external override notPaused {\\n        bundleCall(handleStopRent, createActionCallData(nftStandard, nftAddress, tokenID, _lendingID, _rentingID));\\n    }\\n\\n    function claimRent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID,\\n        uint256[] memory _rentingID\\n    ) external override notPaused {\\n        bundleCall(handleClaimRent, createActionCallData(nftStandard, nftAddress, tokenID, _lendingID, _rentingID));\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function handleLend(IRegistry.CallData memory cd) private {\\n        for (uint256 i = cd.left; i < cd.right; i++) {\\n            ensureIsLendable(cd, i);\\n            bytes32 identifier = keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], lendingID));\\n            IRegistry.Lending storage lending = lendings[identifier];\\n            ensureIsNull(lending);\\n            ensureTokenNotSentinel(uint8(cd.paymentToken[i]));\\n            bool is721 = cd.nftStandard[i] == IRegistry.NFTStandard.E721;\\n            uint16 _lendAmount = uint16(cd.lendAmount[i]);\\n            if (is721) require(_lendAmount == 1, \\\"ReNFT::lendAmount should be equal to 1\\\");\\n            lendings[identifier] = IRegistry.Lending({\\n                nftStandard: cd.nftStandard[i],\\n                lenderAddress: payable(msg.sender),\\n                maxRentDuration: cd.maxRentDuration[i],\\n                dailyRentPrice: cd.dailyRentPrice[i],\\n                lendAmount: _lendAmount,\\n                availableAmount: _lendAmount,\\n                paymentToken: cd.paymentToken[i],\\n                willAutoRenew: cd.willAutoRenew[i]\\n            });\\n            emit IRegistry.Lend(\\n                is721,\\n                msg.sender,\\n                cd.nftAddress[cd.left],\\n                cd.tokenID[i],\\n                lendingID,\\n                cd.maxRentDuration[i],\\n                cd.dailyRentPrice[i],\\n                _lendAmount,\\n                cd.paymentToken[i],\\n                cd.willAutoRenew[i]\\n                );\\n            lendingID++;\\n        }\\n        safeTransfer(\\n            cd,\\n            msg.sender,\\n            address(this),\\n            sliceArr(cd.tokenID, cd.left, cd.right, 0),\\n            sliceArr(cd.lendAmount, cd.left, cd.right, 0)\\n        );\\n    }\\n\\n    function handleStopLend(IRegistry.CallData memory cd) private {\\n        uint256[] memory lentAmounts = new uint256[](cd.right - cd.left);\\n        for (uint256 i = cd.left; i < cd.right; i++) {\\n            bytes32 lendingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.lendingID[i]));\\n            Lending storage lending = lendings[lendingIdentifier];\\n            ensureIsNotNull(lending);\\n            ensureIsStoppable(lending, msg.sender);\\n            require(cd.nftStandard[i] == lending.nftStandard, \\\"ReNFT::invalid nft standard\\\");\\n            require(lending.lendAmount == lending.availableAmount, \\\"ReNFT::actively rented\\\");\\n            lentAmounts[i - cd.left] = lending.lendAmount;\\n            emit IRegistry.StopLend(cd.lendingID[i], uint32(block.timestamp), lending.lendAmount);\\n            delete lendings[lendingIdentifier];\\n        }\\n        safeTransfer(\\n            cd,\\n            address(this),\\n            msg.sender,\\n            sliceArr(cd.tokenID, cd.left, cd.right, 0),\\n            sliceArr(lentAmounts, cd.left, cd.right, cd.left)\\n        );\\n    }\\n\\n    function handleRent(IRegistry.CallData memory cd) private {\\n        for (uint256 i = cd.left; i < cd.right; i++) {\\n            bytes32 lendingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.lendingID[i]));\\n            bytes32 rentingIdentifier = keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], rentingID));\\n            IRegistry.Lending storage lending = lendings[lendingIdentifier];\\n            IRegistry.Renting storage renting = rentings[rentingIdentifier];\\n            ensureIsNotNull(lending);\\n            ensureIsNull(renting);\\n            ensureIsRentable(lending, cd, i, msg.sender);\\n            require(cd.nftStandard[i] == lending.nftStandard, \\\"ReNFT::invalid nft standard\\\");\\n            require(cd.rentAmount[i] <= lending.availableAmount, \\\"ReNFT::invalid rent amount\\\");\\n            uint8 paymentTokenIx = uint8(lending.paymentToken);\\n            ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n            uint256 decimals = paymentToken.decimals();\\n            {\\n                uint256 scale = 10 ** decimals;\\n                uint256 rentPrice = cd.rentAmount[i] * cd.rentDuration[i] * unpackPrice(lending.dailyRentPrice, scale);\\n                require(rentPrice > 0, \\\"ReNFT::rent price is zero\\\");\\n                paymentToken.safeTransferFrom(msg.sender, address(this), rentPrice);\\n            }\\n            rentings[rentingIdentifier] = IRegistry.Renting({\\n                renterAddress: payable(msg.sender),\\n                rentAmount: uint16(cd.rentAmount[i]),\\n                rentDuration: cd.rentDuration[i],\\n                rentedAt: uint32(block.timestamp)\\n            });\\n            lendings[lendingIdentifier].availableAmount -= uint16(cd.rentAmount[i]);\\n            emit IRegistry.Rent(\\n                msg.sender, cd.lendingID[i], rentingID, uint16(cd.rentAmount[i]), cd.rentDuration[i], renting.rentedAt\\n                );\\n            rentingID++;\\n        }\\n    }\\n\\n    function handleStopRent(IRegistry.CallData memory cd) private {\\n        for (uint256 i = cd.left; i < cd.right; i++) {\\n            bytes32 lendingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.lendingID[i]));\\n            bytes32 rentingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.rentingID[i]));\\n            IRegistry.Lending storage lending = lendings[lendingIdentifier];\\n            IRegistry.Renting storage renting = rentings[rentingIdentifier];\\n            ensureIsNotNull(lending);\\n            ensureIsNotNull(renting);\\n            ensureIsReturnable(renting, msg.sender, block.timestamp);\\n            require(cd.nftStandard[i] == lending.nftStandard, \\\"ReNFT::invalid nft standard\\\");\\n            require(renting.rentAmount <= lending.lendAmount, \\\"ReNFT::critical error\\\");\\n            uint256 secondsSinceRentStart = block.timestamp - renting.rentedAt;\\n            distributePayments(lending, renting, secondsSinceRentStart);\\n            manageWillAutoRenew(\\n                lending, renting, cd.nftAddress[cd.left], cd.nftStandard[cd.left], cd.tokenID[i], cd.lendingID[i]\\n            );\\n            emit IRegistry.StopRent(cd.rentingID[i], uint32(block.timestamp));\\n            delete rentings[rentingIdentifier];\\n        }\\n    }\\n\\n    function handleClaimRent(CallData memory cd) private {\\n        for (uint256 i = cd.left; i < cd.right; i++) {\\n            bytes32 lendingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.lendingID[i]));\\n            bytes32 rentingIdentifier =\\n                keccak256(abi.encodePacked(cd.nftAddress[cd.left], cd.tokenID[i], cd.rentingID[i]));\\n            IRegistry.Lending storage lending = lendings[lendingIdentifier];\\n            IRegistry.Renting storage renting = rentings[rentingIdentifier];\\n            ensureIsNotNull(lending);\\n            ensureIsNotNull(renting);\\n            ensureIsClaimable(renting, block.timestamp);\\n            distributeClaimPayment(lending, renting);\\n            manageWillAutoRenew(\\n                lending, renting, cd.nftAddress[cd.left], cd.nftStandard[cd.left], cd.tokenID[i], cd.lendingID[i]\\n            );\\n            emit IRegistry.RentClaimed(cd.rentingID[i], uint32(block.timestamp));\\n            delete rentings[rentingIdentifier];\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function manageWillAutoRenew(\\n        IRegistry.Lending storage lending,\\n        IRegistry.Renting storage renting,\\n        address nftAddress,\\n        IRegistry.NFTStandard nftStandard,\\n        uint256 tokenID,\\n        uint256 lendingID\\n    ) private {\\n        if (lending.willAutoRenew == false) {\\n            // No automatic renewal, stop the lending (or a portion of it) completely!\\n\\n            // We must be careful here, because the lending might be for an ERC1155 token, which means\\n            // that the renting.rentAmount might not be the same as the lending.lendAmount. In this case, we\\n            // must NOT delete the lending, but only decrement the lending.lendAmount by the renting.rentAmount.\\n            // Notice: this is only possible for an ERC1155 tokens!\\n            if (lending.lendAmount > renting.rentAmount) {\\n                // update lending lendAmount to reflect NOT renewing the lending\\n                // Do not update lending.availableAmount, because the assets will not be lent out again\\n                lending.lendAmount -= renting.rentAmount;\\n                // return the assets to the lender\\n                IERC1155(nftAddress).safeTransferFrom(\\n                    address(this), lending.lenderAddress, tokenID, uint256(renting.rentAmount), \\\"\\\"\\n                );\\n            }\\n            // If the lending is for an ERC721 token, then the renting.rentAmount is always the same as the\\n            // lending.lendAmount, and we can delete the lending. If the lending is for an ERC1155 token and\\n            // the renting.rentAmount is the same as the lending.lendAmount, then we can also delete the\\n            // lending.\\n            else if (lending.lendAmount == renting.rentAmount) {\\n                // return the assets to the lender\\n                if (nftStandard == IRegistry.NFTStandard.E721) {\\n                    IERC721(nftAddress).transferFrom(address(this), lending.lenderAddress, tokenID);\\n                } else {\\n                    IERC1155(nftAddress).safeTransferFrom(\\n                        address(this), lending.lenderAddress, tokenID, uint256(renting.rentAmount), \\\"\\\"\\n                    );\\n                }\\n                delete lendings[keccak256(abi.encodePacked(nftAddress, tokenID, lendingID))];\\n            }\\n            // StopLend event but only the amount that was not renewed (or all of it)\\n            emit IRegistry.StopLend(lendingID, uint32(block.timestamp), renting.rentAmount);\\n        } else {\\n            // automatic renewal, make the assets available to be lent out again\\n            lending.availableAmount += renting.rentAmount;\\n        }\\n    }\\n\\n    function bundleCall(function(IRegistry.CallData memory) handler, IRegistry.CallData memory cd) private {\\n        require(cd.nftAddress.length > 0, \\\"ReNFT::no nfts\\\");\\n        while (cd.right != cd.nftAddress.length) {\\n            if (\\n                (cd.nftAddress[cd.left] == cd.nftAddress[cd.right])\\n                    && (cd.nftStandard[cd.right] == IRegistry.NFTStandard.E1155)\\n            ) {\\n                cd.right++;\\n            } else {\\n                handler(cd);\\n                cd.left = cd.right;\\n                cd.right++;\\n            }\\n        }\\n        handler(cd);\\n    }\\n\\n    function takeFee(uint256 rentAmt, ERC20 token) private returns (uint256 fee) {\\n        fee = rentAmt * rentFee;\\n        fee /= 10000;\\n        token.safeTransfer(beneficiary, fee);\\n    }\\n\\n    function distributePayments(\\n        IRegistry.Lending memory lending,\\n        IRegistry.Renting memory renting,\\n        uint256 secondsSinceRentStart\\n    ) private {\\n        uint8 paymentTokenIx = uint8(lending.paymentToken);\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n        uint256 decimals = paymentToken.decimals();\\n        uint256 scale = 10 ** decimals;\\n        uint256 rentPrice = renting.rentAmount * unpackPrice(lending.dailyRentPrice, scale);\\n        uint256 totalRenterPmt = rentPrice * renting.rentDuration;\\n        uint256 sendLenderAmt = (secondsSinceRentStart * rentPrice) / SECONDS_IN_DAY;\\n        require(totalRenterPmt > 0, \\\"ReNFT::total renter payment is zero\\\");\\n        require(sendLenderAmt > 0, \\\"ReNFT::lender payment is zero\\\");\\n        uint256 sendRenterAmt = totalRenterPmt - sendLenderAmt;\\n        if (rentFee != 0) {\\n            uint256 takenFee = takeFee(sendLenderAmt, paymentToken);\\n            sendLenderAmt -= takenFee;\\n        }\\n        paymentToken.safeTransfer(lending.lenderAddress, sendLenderAmt);\\n        if (sendRenterAmt > 0) {\\n            paymentToken.safeTransfer(renting.renterAddress, sendRenterAmt);\\n        }\\n    }\\n\\n    function distributeClaimPayment(IRegistry.Lending memory lending, IRegistry.Renting memory renting) private {\\n        uint8 paymentTokenIx = uint8(lending.paymentToken);\\n        ERC20 paymentToken = ERC20(resolver.getPaymentToken(paymentTokenIx));\\n        uint256 decimals = paymentToken.decimals();\\n        uint256 scale = 10 ** decimals;\\n        uint256 rentPrice = renting.rentAmount * unpackPrice(lending.dailyRentPrice, scale);\\n        uint256 finalAmt = rentPrice * renting.rentDuration;\\n        uint256 takenFee = 0;\\n        if (rentFee != 0) {\\n            takenFee = takeFee(finalAmt, paymentToken);\\n        }\\n        paymentToken.safeTransfer(lending.lenderAddress, finalAmt - takenFee);\\n    }\\n\\n    function safeTransfer(\\n        CallData memory cd,\\n        address from,\\n        address to,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendAmount\\n    ) private {\\n        if (cd.nftStandard[cd.left] == IRegistry.NFTStandard.E721) {\\n            IERC721(cd.nftAddress[cd.left]).transferFrom(from, to, cd.tokenID[cd.left]);\\n        } else {\\n            IERC1155(cd.nftAddress[cd.left]).safeBatchTransferFrom(from, to, tokenID, lendAmount, \\\"\\\");\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function getLending(address nftAddress, uint256 tokenID, uint256 _lendingID)\\n        external\\n        view\\n        returns (uint8, address, uint8, bytes4, uint16, uint16, uint8)\\n    {\\n        bytes32 identifier = keccak256(abi.encodePacked(nftAddress, tokenID, _lendingID));\\n        IRegistry.Lending storage lending = lendings[identifier];\\n        return (\\n            uint8(lending.nftStandard),\\n            lending.lenderAddress,\\n            lending.maxRentDuration,\\n            lending.dailyRentPrice,\\n            lending.lendAmount,\\n            lending.availableAmount,\\n            uint8(lending.paymentToken)\\n        );\\n    }\\n\\n    function getRenting(address nftAddress, uint256 tokenID, uint256 _rentingID)\\n        external\\n        view\\n        returns (address, uint16, uint8, uint32)\\n    {\\n        bytes32 identifier = keccak256(abi.encodePacked(nftAddress, tokenID, _rentingID));\\n        IRegistry.Renting storage renting = rentings[identifier];\\n        return (renting.renterAddress, renting.rentAmount, renting.rentDuration, renting.rentedAt);\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function createLendCallData(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendAmount,\\n        uint8[] memory maxRentDuration,\\n        bytes4[] memory dailyRentPrice,\\n        uint8[] memory paymentToken,\\n        bool[] memory willAutoRenew\\n    ) private pure returns (CallData memory cd) {\\n        cd = CallData({\\n            left: 0,\\n            right: 1,\\n            nftStandard: nftStandard,\\n            nftAddress: nftAddress,\\n            tokenID: tokenID,\\n            lendAmount: lendAmount,\\n            lendingID: new uint256[](0),\\n            rentingID: new uint256[](0),\\n            rentDuration: new uint8[](0),\\n            rentAmount: new uint256[](0),\\n            maxRentDuration: maxRentDuration,\\n            dailyRentPrice: dailyRentPrice,\\n            paymentToken: paymentToken,\\n            willAutoRenew: willAutoRenew\\n        });\\n    }\\n\\n    function createRentCallData(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID,\\n        uint8[] memory rentDuration,\\n        uint256[] memory rentAmount\\n    ) private pure returns (CallData memory cd) {\\n        cd = CallData({\\n            left: 0,\\n            right: 1,\\n            nftStandard: nftStandard,\\n            nftAddress: nftAddress,\\n            tokenID: tokenID,\\n            lendAmount: new uint256[](0),\\n            lendingID: _lendingID,\\n            rentingID: new uint256[](0),\\n            rentDuration: rentDuration,\\n            rentAmount: rentAmount,\\n            maxRentDuration: new uint8[](0),\\n            dailyRentPrice: new bytes4[](0),\\n            paymentToken: new uint8[](0),\\n            willAutoRenew: new bool[](0)\\n        });\\n    }\\n\\n    function createActionCallData(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory _lendingID,\\n        uint256[] memory _rentingID\\n    ) private pure returns (CallData memory cd) {\\n        cd = CallData({\\n            left: 0,\\n            right: 1,\\n            nftStandard: nftStandard,\\n            nftAddress: nftAddress,\\n            tokenID: tokenID,\\n            lendAmount: new uint256[](0),\\n            lendingID: _lendingID,\\n            rentingID: _rentingID,\\n            rentDuration: new uint8[](0),\\n            rentAmount: new uint256[](0),\\n            maxRentDuration: new uint8[](0),\\n            dailyRentPrice: new bytes4[](0),\\n            paymentToken: new uint8[](0),\\n            willAutoRenew: new bool[](0)\\n        });\\n    }\\n\\n    function unpackPrice(bytes4 price, uint256 scale) private pure returns (uint256) {\\n        ensureIsUnpackablePrice(price, scale);\\n        uint16 whole = uint16(bytes2(price));\\n        uint16 decimal = uint16(bytes2(price << 16));\\n        uint256 decimalScale = scale / 10000;\\n        if (whole > 9999) {\\n            whole = 9999;\\n        }\\n        if (decimal > 9999) {\\n            decimal = 9999;\\n        }\\n        uint256 w = whole * scale;\\n        uint256 d = decimal * decimalScale;\\n        uint256 fullPrice = w + d;\\n        return fullPrice;\\n    }\\n\\n    function sliceArr(uint256[] memory arr, uint256 fromIx, uint256 toIx, uint256 arrOffset)\\n        private\\n        pure\\n        returns (uint256[] memory r)\\n    {\\n        r = new uint256[](toIx - fromIx);\\n        for (uint256 i = fromIx; i < toIx; i++) {\\n            r[i - fromIx] = arr[i - arrOffset];\\n        }\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function ensureIsNotZeroAddr(address addr) private pure {\\n        require(addr != address(0), \\\"ReNFT::zero address\\\");\\n    }\\n\\n    function ensureIsZeroAddr(address addr) private pure {\\n        require(addr == address(0), \\\"ReNFT::not a zero address\\\");\\n    }\\n\\n    function ensureIsNull(Lending memory lending) private pure {\\n        ensureIsZeroAddr(lending.lenderAddress);\\n        require(lending.maxRentDuration == 0, \\\"ReNFT::duration not zero\\\");\\n        require(lending.dailyRentPrice == 0, \\\"ReNFT::rent price not zero\\\");\\n    }\\n\\n    function ensureIsNotNull(Lending memory lending) private pure {\\n        ensureIsNotZeroAddr(lending.lenderAddress);\\n        require(lending.maxRentDuration != 0, \\\"ReNFT::duration zero\\\");\\n        require(lending.dailyRentPrice != 0, \\\"ReNFT::rent price is zero\\\");\\n    }\\n\\n    function ensureIsNull(Renting memory renting) private pure {\\n        ensureIsZeroAddr(renting.renterAddress);\\n        require(renting.rentDuration == 0, \\\"ReNFT::duration not zero\\\");\\n        require(renting.rentedAt == 0, \\\"ReNFT::rented at not zero\\\");\\n    }\\n\\n    function ensureIsNotNull(Renting memory renting) private pure {\\n        ensureIsNotZeroAddr(renting.renterAddress);\\n        require(renting.rentDuration != 0, \\\"ReNFT::duration is zero\\\");\\n        require(renting.rentedAt != 0, \\\"ReNFT::rented at is zero\\\");\\n    }\\n\\n    function ensureIsLendable(CallData memory cd, uint256 i) private pure {\\n        require(cd.lendAmount[i] > 0, \\\"ReNFT::lend amount is zero\\\");\\n        require(cd.lendAmount[i] <= type(uint16).max, \\\"ReNFT::not uint16\\\");\\n        require(cd.maxRentDuration[i] > 0, \\\"ReNFT::duration is zero\\\");\\n        require(cd.maxRentDuration[i] <= type(uint8).max, \\\"ReNFT::not uint8\\\");\\n        require(uint32(cd.dailyRentPrice[i]) > 0, \\\"ReNFT::rent price is zero\\\");\\n    }\\n\\n    function ensureIsRentable(Lending memory lending, CallData memory cd, uint256 i, address msgSender) private pure {\\n        require(msgSender != lending.lenderAddress, \\\"ReNFT::cant rent own nft\\\");\\n        require(cd.rentDuration[i] <= type(uint8).max, \\\"ReNFT::not uint8\\\");\\n        require(cd.rentDuration[i] > 0, \\\"ReNFT::duration is zero\\\");\\n        require(cd.rentAmount[i] <= type(uint16).max, \\\"ReNFT::not uint16\\\");\\n        require(cd.rentAmount[i] > 0, \\\"ReNFT::rentAmount is zero\\\");\\n        require(cd.rentDuration[i] <= lending.maxRentDuration, \\\"ReNFT::rent duration exceeds allowed max\\\");\\n    }\\n\\n    function ensureIsReturnable(Renting memory renting, address msgSender, uint256 blockTimestamp) private pure {\\n        require(renting.renterAddress == msgSender, \\\"ReNFT::not renter\\\");\\n        require(!isPastReturnDate(renting, blockTimestamp), \\\"ReNFT::past return date\\\");\\n    }\\n\\n    function ensureIsStoppable(Lending memory lending, address msgSender) private pure {\\n        require(lending.lenderAddress == msgSender, \\\"ReNFT::not lender\\\");\\n    }\\n\\n    function ensureIsUnpackablePrice(bytes4 price, uint256 scale) private pure {\\n        require(uint32(price) > 0, \\\"ReNFT::invalid price\\\");\\n        require(scale >= 10000, \\\"ReNFT::invalid scale\\\");\\n    }\\n\\n    function ensureTokenNotSentinel(uint8 paymentIx) private pure {\\n        require(paymentIx > 0, \\\"ReNFT::token is sentinel\\\");\\n    }\\n\\n    function ensureIsClaimable(IRegistry.Renting memory renting, uint256 blockTimestamp) private pure {\\n        require(isPastReturnDate(renting, blockTimestamp), \\\"ReNFT::return date not passed\\\");\\n    }\\n\\n    function isPastReturnDate(Renting memory renting, uint256 nowTime) private pure returns (bool) {\\n        require(nowTime > renting.rentedAt, \\\"ReNFT::now before rented\\\");\\n        return nowTime - renting.rentedAt > renting.rentDuration * SECONDS_IN_DAY;\\n    }\\n\\n    //      .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.     .-.\\n    // `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `._.'\\n\\n    function setRentFee(uint256 newRentFee) external onlyAdmin {\\n        require(newRentFee < 10000, \\\"ReNFT::fee exceeds 100pct\\\");\\n        rentFee = newRentFee;\\n    }\\n\\n    function setBeneficiary(address payable newBeneficiary) external onlyAdmin {\\n        beneficiary = newBeneficiary;\\n    }\\n\\n    function setPaused(bool newPaused) external onlyAdmin {\\n        paused = newPaused;\\n    }\\n}\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155Receiver.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\nimport \\\"IResolver.sol\\\";\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\\ninterface IRegistry {\\n    event Lend(\\n        bool is721,\\n        address indexed lenderAddress,\\n        address indexed nftAddress,\\n        uint256 indexed tokenID,\\n        uint256 lendingID,\\n        uint8 maxRentDuration,\\n        bytes4 dailyRentPrice,\\n        uint16 lendAmount,\\n        uint8 paymentToken,\\n        bool willAutoRenew\\n    );\\n\\n    event Rent(\\n        address indexed renterAddress,\\n        uint256 indexed lendingID,\\n        uint256 indexed rentingID,\\n        uint16 rentAmount,\\n        uint8 rentDuration,\\n        uint32 rentedAt\\n    );\\n\\n    event StopLend(uint256 indexed lendingID, uint32 stoppedAt, uint16 amount);\\n\\n    event StopRent(uint256 indexed rentingID, uint32 stoppedAt);\\n\\n    event RentClaimed(uint256 indexed rentingID, uint32 collectedAt);\\n\\n    enum NFTStandard {\\n        E721,\\n        E1155\\n    }\\n\\n    struct CallData {\\n        uint256 left;\\n        uint256 right;\\n        IRegistry.NFTStandard[] nftStandard;\\n        address[] nftAddress;\\n        uint256[] tokenID;\\n        uint256[] lendAmount;\\n        uint8[] maxRentDuration;\\n        bytes4[] dailyRentPrice;\\n        uint256[] lendingID;\\n        uint256[] rentingID;\\n        uint8[] rentDuration;\\n        uint256[] rentAmount;\\n        uint8[] paymentToken;\\n        bool[] willAutoRenew;\\n    }\\n\\n    // fits into a single storage slot\\n    // nftStandard       2\\n    // lenderAddress   162\\n    // maxRentDuration 170\\n    // dailyRentPrice  202\\n    // lendAmount      218\\n    // availableAmount 234\\n    // paymentToken    242\\n    // willAutoRenew   250\\n    // leaves a spare byte\\n    struct Lending {\\n        NFTStandard nftStandard;\\n        address payable lenderAddress;\\n        uint8 maxRentDuration;\\n        bytes4 dailyRentPrice;\\n        uint16 lendAmount;\\n        uint16 availableAmount;\\n        uint8 paymentToken;\\n        bool willAutoRenew;\\n    }\\n\\n    // fits into a single storage slot\\n    // renterAddress 160\\n    // rentDuration  168\\n    // rentedAt      216\\n    // rentAmount    232\\n    // leaves 3 spare bytes\\n    struct Renting {\\n        address payable renterAddress;\\n        uint8 rentDuration;\\n        uint32 rentedAt;\\n        uint16 rentAmount;\\n    }\\n\\n    // creates the lending structs and adds them to the enumerable set\\n    function lend(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendAmount,\\n        uint8[] memory maxRentDuration,\\n        bytes4[] memory dailyRentPrice,\\n        uint8[] memory paymentToken,\\n        bool[] memory willAutoRenew\\n    ) external;\\n\\n    function stopLend(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendingID\\n    ) external;\\n\\n    // creates the renting structs and adds them to the enumerable set\\n    function rent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendingID,\\n        uint8[] memory rentDuration,\\n        uint256[] memory rentAmount\\n    ) external payable;\\n\\n    function stopRent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendingID,\\n        uint256[] memory rentingID\\n    ) external;\\n\\n    function claimRent(\\n        IRegistry.NFTStandard[] memory nftStandard,\\n        address[] memory nftAddress,\\n        uint256[] memory tokenID,\\n        uint256[] memory lendingID,\\n        uint256[] memory rentingID\\n    ) external;\\n}\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\"\r\n    },\r\n    \"IResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.7;\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\\ninterface IResolver {\\n    function getPaymentToken(uint8 _pt) external view returns (address);\\n\\n    function setPaymentToken(uint8 _pt, address _v) external;\\n}\\n\\n//              @@@@@@@@@@@@@@@@        ,@@@@@@@@@@@@@@@@\\n//              @@@,,,,,,,,,,@@@        ,@@&,,,,,,,,,,@@@\\n//         @@@@@@@@,,,,,,,,,,@@@@@@@@&  ,@@&,,,,,,,,,,@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@\\n//         @@@**********@@@@@@@@@@@@@&  ,@@@@@@@@**********@@@@@@@@\\n//         @@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@@@@@@&       .@@@**********@@@@@@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@\\n//    @@@**********@@@@@@@@@@@@@&            .@@@@@@@@**********@@@@@@@@\\n//    @@@@@@@@**********@@@@@@@@&            .@@@**********@@@@@@@@@@@@@\\n//    @@@@@@@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&            .@@@//////////@@@@@@@@@@@@@\\n//         @@@//////////@@@@@@@@&       ,@@@@@@@@//////////@@@@@@@@@@@@@\\n//         @@@%%%%%/////(((((@@@&       ,@@@(((((/////%%%%%@@@@@@@@\\n//         @@@@@@@@//////////@@@@@@@@&  ,@@@//////////@@@@@@@@@@@@@\\n//              @@@%%%%%%%%%%@@@@@@@@&  ,@@@%%%%%%%%%%@@@@@@@@@@@@@\\n//              @@@@@@@@@@@@@@@@@@@@@&  ,@@@@@@@@@@@@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n//                   @@@@@@@@@@@@@@@@&        @@@@@@@@@@@@@@@@\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Registry.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newResolver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"is721\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxRentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"dailyRentPrice\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lendAmount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"paymentToken\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"willAutoRenew\",\"type\":\"bool\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rentingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rentAmount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rentDuration\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rentedAt\",\"type\":\"uint32\"}],\"name\":\"Rent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rentingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"collectedAt\",\"type\":\"uint32\"}],\"name\":\"RentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lendingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stoppedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"StopLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rentingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stoppedAt\",\"type\":\"uint32\"}],\"name\":\"StopRent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IRegistry.NFTStandard[]\",\"name\":\"nftStandard\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentingID\",\"type\":\"uint256[]\"}],\"name\":\"claimRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingID\",\"type\":\"uint256\"}],\"name\":\"getLending\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentingID\",\"type\":\"uint256\"}],\"name\":\"getRenting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRegistry.NFTStandard[]\",\"name\":\"nftStandard\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lendAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"maxRentDuration\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"dailyRentPrice\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint8[]\",\"name\":\"paymentToken\",\"type\":\"uint8[]\"},{\"internalType\":\"bool[]\",\"name\":\"willAutoRenew\",\"type\":\"bool[]\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRegistry.NFTStandard[]\",\"name\":\"nftStandard\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"rentDuration\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rentAmount\",\"type\":\"uint256[]\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRentFee\",\"type\":\"uint256\"}],\"name\":\"setRentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRegistry.NFTStandard[]\",\"name\":\"nftStandard\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingID\",\"type\":\"uint256[]\"}],\"name\":\"stopLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRegistry.NFTStandard[]\",\"name\":\"nftStandard\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lendingID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentingID\",\"type\":\"uint256[]\"}],\"name\":\"stopRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Registry", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ddc85bb768a11b0125f4ee71cfea54e54653366000000000000000000000000000000045232fe75a3c7db3e5b03b0ab6166f425000000000000000000000000000000045232fe75a3c7db3e5b03b0ab6166f425", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}