{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/solidity/interface/IApePair.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\r\\n\\r\\ninterface IApePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IApeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IApeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXEligibility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPIPXEligibility {\\r\\n    // Read functions.\\r\\n    function name() external pure returns (string memory);\\r\\n    function finalized() external view returns (bool);\\r\\n    function targetAsset() external pure returns (address);\\r\\n    function checkAllEligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n    function checkEligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool[] memory);\\r\\n    function checkAllIneligible(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n    function checkIsEligible(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    // Write functions.\\r\\n    function __PIPXEligibility_init_bytes(bytes calldata configData) external;\\r\\n    function beforeMintHook(uint256[] calldata tokenIds) external;\\r\\n    function afterMintHook(uint256[] calldata tokenIds) external;\\r\\n    function beforeRedeemHook(uint256[] calldata tokenIds) external;\\r\\n    function afterRedeemHook(uint256[] calldata tokenIds) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXInventoryStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IPIPXVaultFactory.sol\\\";\\r\\n\\r\\ninterface IPIPXInventoryStaking {\\r\\n    function pipxVaultFactory() external view returns (IPIPXVaultFactory);\\r\\n    function vaultXToken(uint256 vaultId) external view returns (address);\\r\\n    function xTokenAddr(address baseToken) external view returns (address);\\r\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\r\\n\\r\\n    function __PIPXInventoryStaking_init(address pipxFactory) external;\\r\\n    \\r\\n    function deployXTokenForVault(uint256 vaultId) external;\\r\\n    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\\r\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external returns (uint256);\\r\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\r\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXSimpleFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPIPXSimpleFeeDistributor {\\r\\n  \\r\\n  struct FeeReceiver {\\r\\n    uint256 allocPoint;\\r\\n    address receiver;\\r\\n    bool isContract;\\r\\n  }\\r\\n\\r\\n  function pipxVaultFactory() external view returns (address);\\r\\n  function lpStaking() external view returns (address);\\r\\n  function inventoryStaking() external view returns (address);\\r\\n  function treasury() external view returns (address);\\r\\n  function allocTotal() external view returns (uint256);\\r\\n  function feeReceiverInfo(uint256 index) external view returns (address, uint256);\\r\\n  // function feeReceiverAddr(uint256 index) external view returns (address);\\r\\n  // function feeReceiverAlloc(uint256 index) external view returns (uint256);\\r\\n\\r\\n  // Write functions.\\r\\n  function __SimpleFeeDistributor__init__(address _lpStaking, address _treasury) external;\\r\\n  function rescueTokens(address token) external;\\r\\n  function distribute(uint256 vaultId) external;\\r\\n  function addReceiver(uint256 _allocPoint, address _receiver, bool _isContract) external;\\r\\n  function initializeVaultReceivers(uint256 _vaultId) external;\\r\\n\\r\\n  function changeReceiverAlloc(uint256 _idx, uint256 _allocPoint) external;\\r\\n  function changeReceiverAddress(uint256 _idx, address _address, bool _isContract) external;\\r\\n  function removeReceiver(uint256 _receiverIdx) external;\\r\\n\\r\\n  // Configuration functions.\\r\\n  function setTreasuryAddress(address _treasury) external;\\r\\n  function setLPStakingAddress(address _lpStaking) external;\\r\\n  function setInventoryStakingAddress(address _inventoryStaking) external;\\r\\n  function setPIPXVaultFactory(address _factory) external;\\r\\n} \"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interface/IPIPXEligibility.sol\\\";\\r\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../interface/IPIPXVaultFactory.sol\\\";\\r\\n\\r\\ninterface IPIPXVault is IERC20Upgradeable {\\r\\n    function manager() external view returns (address);\\r\\n    function assetAddress() external view returns (address);\\r\\n    function vaultFactory() external view returns (IPIPXVaultFactory);\\r\\n    function eligibilityStorage() external view returns (IPIPXEligibility);\\r\\n\\r\\n    function is1155() external view returns (bool);\\r\\n    function allowAllItems() external view returns (bool);\\r\\n    function enableMint() external view returns (bool);\\r\\n    function enableRandomRedeem() external view returns (bool);\\r\\n    function enableTargetRedeem() external view returns (bool);\\r\\n    function enableRandomSwap() external view returns (bool);\\r\\n    function enableTargetSwap() external view returns (bool);\\r\\n\\r\\n    function vaultId() external view returns (uint256);\\r\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\r\\n    function allHoldings() external view returns (uint256[] memory);\\r\\n    function totalHoldings() external view returns (uint256);\\r\\n    function mintFee() external view returns (uint256);\\r\\n    function randomRedeemFee() external view returns (uint256);\\r\\n    function targetRedeemFee() external view returns (uint256);\\r\\n    function randomSwapFee() external view returns (uint256);\\r\\n    function targetSwapFee() external view returns (uint256);\\r\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    event VaultInit(\\r\\n        uint256 indexed vaultId,\\r\\n        address assetAddress,\\r\\n        bool is1155,\\r\\n        bool allowAllItems\\r\\n    );\\r\\n\\r\\n    event ManagerSet(address manager);\\r\\n    event EligibilityDeployed(uint256 moduleIndex, address eligibilityAddr);\\r\\n    // event CustomEligibilityDeployed(address eligibilityAddr);\\r\\n\\r\\n    event EnableMintUpdated(bool enabled);\\r\\n    event EnableRandomRedeemUpdated(bool enabled);\\r\\n    event EnableTargetRedeemUpdated(bool enabled);\\r\\n    event EnableRandomSwapUpdated(bool enabled);\\r\\n    event EnableTargetSwapUpdated(bool enabled);\\r\\n\\r\\n    event Minted(uint256[] nftIds, uint256[] amounts, address to);\\r\\n    event Redeemed(uint256[] nftIds, uint256[] specificIds, address to);\\r\\n    event Swapped(\\r\\n        uint256[] nftIds,\\r\\n        uint256[] amounts,\\r\\n        uint256[] specificIds,\\r\\n        uint256[] redeemedIds,\\r\\n        address to\\r\\n    );\\r\\n\\r\\n    function __PIPXVault_init(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address _assetAddress,\\r\\n        bool _is1155,\\r\\n        bool _allowAllItems\\r\\n    ) external;\\r\\n\\r\\n    function finalizeVault() external;\\r\\n\\r\\n    function setVaultMetadata(\\r\\n        string memory name_, \\r\\n        string memory symbol_\\r\\n    ) external;\\r\\n\\r\\n    function setVaultFeatures(\\r\\n        bool _enableMint,\\r\\n        bool _enableRandomRedeem,\\r\\n        bool _enableTargetRedeem,\\r\\n        bool _enableRandomSwap,\\r\\n        bool _enableTargetSwap\\r\\n    ) external;\\r\\n\\r\\n    function setFees(\\r\\n        uint256 _mintFee,\\r\\n        uint256 _randomRedeemFee,\\r\\n        uint256 _targetRedeemFee,\\r\\n        uint256 _randomSwapFee,\\r\\n        uint256 _targetSwapFee\\r\\n    ) external;\\r\\n    function disableVaultFees() external;\\r\\n\\r\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\r\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\r\\n    // a similar interface.\\r\\n    function deployEligibilityStorage(\\r\\n        uint256 moduleIndex,\\r\\n        bytes calldata initData\\r\\n    ) external returns (address);\\r\\n\\r\\n    // The manager has control over options like fees and features\\r\\n    function setManager(address _manager) external;\\r\\n\\r\\n    function mint(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function mintTo(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\r\\n        external\\r\\n        returns (uint256[] calldata);\\r\\n\\r\\n    function redeemTo(\\r\\n        uint256 amount,\\r\\n        uint256[] calldata specificIds,\\r\\n        address to\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function swap(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        uint256[] calldata specificIds\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function swapTo(\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\r\\n        uint256[] calldata specificIds,\\r\\n        address to\\r\\n    ) external returns (uint256[] calldata);\\r\\n\\r\\n    function allValidNFTs(uint256[] calldata tokenIds)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/IPIPXVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../proxy/IBeacon.sol\\\";\\r\\n\\r\\ninterface IPIPXVaultFactory is IBeacon {\\r\\n  // Read functions.\\r\\n  function numVaults() external view returns (uint256);\\r\\n  function zapContract() external view returns (address);\\r\\n  function feeDistributor() external view returns (address);\\r\\n  function eligibilityManager() external view returns (address);\\r\\n  function vault(uint256 vaultId) external view returns (address);\\r\\n  function allVaults() external view returns (address[] memory);\\r\\n  function vaultsForAsset(address asset) external view returns (address[] memory);\\r\\n  function isLocked(uint256 id) external view returns (bool);\\r\\n  function excludedFromFees(address addr) external view returns (bool);\\r\\n  function factoryMintFee() external view returns (uint64);\\r\\n  function factoryRandomRedeemFee() external view returns (uint64);\\r\\n  function factoryTargetRedeemFee() external view returns (uint64);\\r\\n  function factoryRandomSwapFee() external view returns (uint64);\\r\\n  function factoryTargetSwapFee() external view returns (uint64);\\r\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\\r\\n  event NewZapContract(address oldZap, address newZap);\\r\\n  event FeeExclusion(address feeExcluded, bool excluded);\\r\\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\\r\\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\\r\\n  event UpdateVaultFees(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\r\\n  event DisableVaultFees(uint256 vaultId);\\r\\n  event UpdateFactoryFees(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\r\\n\\r\\n  // Write functions.\\r\\n  function __PIPXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\\r\\n  function createVault(\\r\\n      string calldata name,\\r\\n      string calldata symbol,\\r\\n      address _assetAddress,\\r\\n      bool is1155,\\r\\n      bool allowAllItems\\r\\n  ) external returns (uint256);\\r\\n  function setFeeDistributor(address _feeDistributor) external;\\r\\n  function setEligibilityManager(address _eligibilityManager) external;\\r\\n  function setZapContract(address _zapContract) external;\\r\\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\\r\\n\\r\\n  function setFactoryFees(\\r\\n    uint256 mintFee, \\r\\n    uint256 randomRedeemFee, \\r\\n    uint256 targetRedeemFee,\\r\\n    uint256 randomSwapFee, \\r\\n    uint256 targetSwapFee\\r\\n  ) external; \\r\\n  function setVaultFees(\\r\\n      uint256 vaultId, \\r\\n      uint256 mintFee, \\r\\n      uint256 randomRedeemFee, \\r\\n      uint256 targetRedeemFee,\\r\\n      uint256 randomSwapFee, \\r\\n      uint256 targetSwapFee\\r\\n  ) external;\\r\\n  function disableVaultFees(uint256 vaultId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/interface/ITimelockExcludeList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITimelockExcludeList {\\r\\n    function isExcluded(address addr, uint256 vaultId) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/PIPXInventoryStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interface/IPIPXVaultFactory.sol\\\";\\r\\nimport \\\"./interface/IPIPXVault.sol\\\";\\r\\nimport \\\"./interface/IPIPXInventoryStaking.sol\\\";\\r\\nimport \\\"./token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./token/IERC20Metadata.sol\\\";\\r\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"./util/PausableUpgradeable.sol\\\";\\r\\nimport \\\"./util/Address.sol\\\";\\r\\nimport \\\"./util/Create2.sol\\\";\\r\\nimport \\\"./proxy/UpgradeableBeacon.sol\\\";\\r\\nimport \\\"./proxy/Create2BeaconProxy.sol\\\";\\r\\nimport \\\"./token/XTokenUpgradeable.sol\\\";\\r\\nimport \\\"./interface/ITimelockExcludeList.sol\\\";\\r\\nimport \\\"./interface/IPIPXSimpleFeeDistributor.sol\\\";\\r\\n\\r\\n// Author: 0xKiwi.\\r\\n\\r\\n// Pausing codes for inventory staking are:\\r\\n// 10: Deposit\\r\\n\\r\\ncontract PIPXInventoryStaking is PausableUpgradeable, UpgradeableBeacon, IPIPXInventoryStaking {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    // Small locktime to prevent flash deposits.\\r\\n    uint256 internal constant DEFAULT_LOCKTIME = 2;\\r\\n    bytes internal constant beaconCode = type(Create2BeaconProxy).creationCode;\\r\\n\\r\\n    IPIPXVaultFactory public override pipxVaultFactory;\\r\\n\\r\\n    uint256 public inventoryLockTimeErc20;\\r\\n    ITimelockExcludeList public timelockExcludeList;\\r\\n\\r\\n    event XTokenCreated(uint256 vaultId, address baseToken, address xToken);\\r\\n    event Deposit(uint256 vaultId, uint256 baseTokenAmount, uint256 xTokenAmount, uint256 timelockUntil, address sender);\\r\\n    event Withdraw(uint256 vaultId, uint256 baseTokenAmount, uint256 xTokenAmount, address sender);\\r\\n    event FeesReceived(uint256 vaultId, uint256 amount);\\r\\n\\r\\n    function __PIPXInventoryStaking_init(address _pipxVaultFactory) external virtual override initializer {\\r\\n        __Ownable_init();\\r\\n        pipxVaultFactory = IPIPXVaultFactory(_pipxVaultFactory);\\r\\n        address xTokenImpl = address(new XTokenUpgradeable());\\r\\n        __UpgradeableBeacon__init(xTokenImpl);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner() || msg.sender == pipxVaultFactory.feeDistributor(), \\\"LPStaking: Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setTimelockExcludeList(address addr) external onlyOwner {\\r\\n        timelockExcludeList = ITimelockExcludeList(addr);\\r\\n    }\\r\\n\\r\\n    function setInventoryLockTimeErc20(uint256 time) external onlyOwner {\\r\\n        require(time <= 14 days, \\\"Lock too long\\\");\\r\\n        inventoryLockTimeErc20 = time;\\r\\n    }\\r\\n\\r\\n    function isAddressTimelockExcluded(address addr, uint256 vaultId) public view returns (bool) {\\r\\n        if (address(timelockExcludeList) == address(0)) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return timelockExcludeList.isExcluded(addr, vaultId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deployXTokenForVault(uint256 vaultId) public virtual override {\\r\\n        address baseToken = pipxVaultFactory.vault(vaultId);\\r\\n        address deployedXToken = xTokenAddr(address(baseToken));\\r\\n\\r\\n        if (isContract(deployedXToken)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address xToken = _deployXToken(baseToken);\\r\\n        emit XTokenCreated(vaultId, baseToken, xToken);\\r\\n    }\\r\\n\\r\\n    function receiveRewards(uint256 vaultId, uint256 amount) external virtual override onlyAdmin returns (bool) {\\r\\n        address baseToken = pipxVaultFactory.vault(vaultId);\\r\\n        address deployedXToken = xTokenAddr(address(baseToken));\\r\\n        \\r\\n        // Don't distribute rewards unless there are people to distribute to.\\r\\n        // Also added here if the distribution token is not deployed, just forfeit rewards for now.\\r\\n        if (!isContract(deployedXToken) || XTokenUpgradeable(deployedXToken).totalSupply() == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        // We \\\"pull\\\" to the dividend tokens so the fee distributor only needs to approve this contract.\\r\\n        IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, deployedXToken, amount);\\r\\n        emit FeesReceived(vaultId, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Enter staking. Staking, get minted shares and\\r\\n    // locks base tokens and mints xTokens.\\r\\n    function deposit(uint256 vaultId, uint256 _amount) external virtual override {\\r\\n        onlyOwnerIfPaused(10);\\r\\n\\r\\n        uint256 timelockTime = isAddressTimelockExcluded(msg.sender, vaultId) ? 0 : inventoryLockTimeErc20;\\r\\n\\r\\n        (IERC20Upgradeable baseToken, XTokenUpgradeable xToken, uint256 xTokensMinted) = _timelockMintFor(vaultId, msg.sender, _amount, timelockTime);\\r\\n        // Lock the base token in the xtoken contract\\r\\n        baseToken.safeTransferFrom(msg.sender, address(xToken), _amount);\\r\\n        emit Deposit(vaultId, _amount, xTokensMinted, timelockTime, msg.sender);\\r\\n    }\\r\\n\\r\\n    function timelockMintFor(uint256 vaultId, uint256 amount, address to, uint256 timelockLength) external virtual override returns (uint256) {\\r\\n        onlyOwnerIfPaused(10);\\r\\n        require(msg.sender == pipxVaultFactory.zapContract(), \\\"Not staking zap\\\");\\r\\n        require(pipxVaultFactory.excludedFromFees(msg.sender), \\\"Not fee excluded\\\"); // important for math that staking zap is excluded from fees\\r\\n\\r\\n        (, , uint256 xTokensMinted) = _timelockMintFor(vaultId, to, amount, timelockLength);\\r\\n        emit Deposit(vaultId, amount, xTokensMinted, timelockLength, to);\\r\\n        return xTokensMinted;\\r\\n    }\\r\\n\\r\\n    // Leave the bar. Claim back your tokens.\\r\\n    // Unlocks the staked + gained tokens and burns xTokens.\\r\\n    function withdraw(uint256 vaultId, uint256 _share) external virtual override {\\r\\n        _distributeFees(vaultId);\\r\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(pipxVaultFactory.vault(vaultId));\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable(xTokenAddr(address(baseToken)));\\r\\n\\r\\n        uint256 baseTokensRedeemed = xToken.burnXTokens(msg.sender, _share);\\r\\n        emit Withdraw(vaultId, baseTokensRedeemed, _share, msg.sender);\\r\\n    }\\r\\n\\r\\n   function xTokenShareValue(uint256 vaultId) external view virtual override returns (uint256) {\\r\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(pipxVaultFactory.vault(vaultId));\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable(xTokenAddr(address(baseToken)));\\r\\n        require(address(xToken) != address(0), \\\"XToken not deployed\\\");\\r\\n\\r\\n        uint256 multiplier = 10 ** 18;\\r\\n        return xToken.totalSupply() > 0 \\r\\n            ? multiplier * baseToken.balanceOf(address(xToken)) / xToken.totalSupply() \\r\\n            : multiplier;\\r\\n    }\\r\\n\\r\\n    function timelockUntil(uint256 vaultId, address who) external view returns (uint256) {\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\\r\\n        return xToken.timelockUntil(who);\\r\\n    }\\r\\n\\r\\n    function balanceOf(uint256 vaultId, address who) external view returns (uint256) {\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable(vaultXToken(vaultId));\\r\\n        return xToken.balanceOf(who);\\r\\n    }\\r\\n\\r\\n    // Note: this function does not guarantee the token is deployed, we leave that check to elsewhere to save gas.\\r\\n    function xTokenAddr(address baseToken) public view virtual override returns (address) {\\r\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\r\\n        address tokenAddr = Create2.computeAddress(salt, keccak256(type(Create2BeaconProxy).creationCode));\\r\\n        return tokenAddr;\\r\\n    }\\r\\n    \\r\\n    function vaultXToken(uint256 vaultId) public view virtual override returns (address) {\\r\\n        address baseToken = pipxVaultFactory.vault(vaultId);\\r\\n        address xToken = xTokenAddr(baseToken);\\r\\n        require(isContract(xToken), \\\"XToken not deployed\\\");\\r\\n        return xToken;\\r\\n    } \\r\\n\\r\\n    function _timelockMintFor(uint256 vaultId, address account, uint256 _amount, uint256 timelockLength) internal returns (IERC20Upgradeable, XTokenUpgradeable, uint256) {\\r\\n        deployXTokenForVault(vaultId);\\r\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(pipxVaultFactory.vault(vaultId));\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable((xTokenAddr(address(baseToken))));\\r\\n\\r\\n        _distributeFees(vaultId);\\r\\n\\r\\n        uint256 xTokensMinted = xToken.mintXTokens(account, _amount, timelockLength);\\r\\n        return (baseToken, xToken, xTokensMinted);\\r\\n    }\\r\\n\\r\\n    function _deployXToken(address baseToken) internal returns (address) {\\r\\n        string memory symbol = IERC20Metadata(baseToken).symbol();\\r\\n        symbol = string(abi.encodePacked(\\\"x\\\", symbol));\\r\\n        bytes32 salt = keccak256(abi.encodePacked(baseToken));\\r\\n        address deployedXToken = Create2.deploy(0, salt, beaconCode);\\r\\n        XTokenUpgradeable(deployedXToken).__XToken_init(baseToken, symbol, symbol);\\r\\n        return deployedXToken;\\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size != 0;\\r\\n    }\\r\\n\\r\\n    function _distributeFees(uint256 vaultId) internal {\\r\\n        IPIPXSimpleFeeDistributor(pipxVaultFactory.feeDistributor()).distribute(vaultId);\\r\\n    }\\r\\n\\r\\n    function totalUndistributedFees(uint256 vaultId) public view returns (uint256) {\\r\\n        IPIPXSimpleFeeDistributor feeDistrib = IPIPXSimpleFeeDistributor(pipxVaultFactory.feeDistributor());\\r\\n        (address receiverAddr, uint256 receiverAlloc) = feeDistrib.feeReceiverInfo(1);\\r\\n        require(receiverAddr == address(this), \\\"wrong index\\\");\\r\\n        // TODO: fetch allocationtotal from fee distributor\\r\\n        return IERC20Upgradeable(pipxVaultFactory.vault(vaultId)).balanceOf(pipxVaultFactory.feeDistributor()) * receiverAlloc / 1e18;\\r\\n    }\\r\\n\\r\\n    function adjustedXTokenShareValue(uint256 vaultId) public view returns (uint256) {\\r\\n        IERC20Upgradeable baseToken = IERC20Upgradeable(pipxVaultFactory.vault(vaultId));\\r\\n        XTokenUpgradeable xToken = XTokenUpgradeable(xTokenAddr(address(baseToken)));\\r\\n        require(address(xToken) != address(0), \\\"XToken not deployed\\\");\\r\\n\\r\\n        uint256 multiplier = 10 ** 18;\\r\\n        uint256 adjustedBaseTokenBal = baseToken.balanceOf(address(xToken)) + totalUndistributedFees(vaultId);\\r\\n        return xToken.totalSupply() > 0 \\r\\n            ? multiplier * adjustedBaseTokenBal / xToken.totalSupply() \\r\\n            : multiplier;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/PIPXUnstakingInventoryZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./util/Ownable.sol\\\";\\r\\nimport \\\"./util/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/IPIPXVaultFactory.sol\\\";\\r\\nimport \\\"./PIPXInventoryStaking.sol\\\";\\r\\nimport \\\"./token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./util/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"./interface/IPIPXVault.sol\\\";\\r\\nimport \\\"./interface/IApeRouter01.sol\\\";\\r\\nimport \\\"./token/IWETH.sol\\\";\\r\\nimport \\\"./interface/IApePair.sol\\\";\\r\\n\\r\\ncontract PIPXUnstakingInventoryZap is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    IPIPXVaultFactory public vaultFactory;\\r\\n    PIPXInventoryStaking public inventoryStaking;\\r\\n    IApeRouter01 public apeRouter;\\r\\n    IWETH public weth;\\r\\n\\r\\n    event InventoryUnstaked(\\r\\n        uint256 vaultId,\\r\\n        uint256 xTokensUnstaked,\\r\\n        uint256 numNftsRedeemed,\\r\\n        address unstaker\\r\\n    );\\r\\n\\r\\n    function setVaultFactory(address addr) public onlyOwner {\\r\\n        vaultFactory = IPIPXVaultFactory(addr);\\r\\n    }\\r\\n\\r\\n    function setInventoryStaking(address addr) public onlyOwner {\\r\\n        inventoryStaking = PIPXInventoryStaking(addr);\\r\\n    }\\r\\n\\r\\n    function setSushiRouterAndWeth(address apeRouterAddr) public onlyOwner {\\r\\n        apeRouter = IApeRouter01(apeRouterAddr);\\r\\n        weth = IWETH(apeRouter.WETH());\\r\\n    }\\r\\n\\r\\n    function unstakeInventory(\\r\\n        uint256 vaultId,\\r\\n        uint256 numNfts,\\r\\n        uint256 remainingPortionToUnstake\\r\\n    ) public payable {\\r\\n        require(remainingPortionToUnstake <= 10e17);\\r\\n        address vTokenAddr = vaultFactory.vault(vaultId);\\r\\n        address xTokenAddr = inventoryStaking.xTokenAddr(vTokenAddr);\\r\\n        IERC20Upgradeable vToken = IERC20Upgradeable(vTokenAddr);\\r\\n        IERC20Upgradeable xToken = IERC20Upgradeable(xTokenAddr);\\r\\n\\r\\n        // calculate xTokensToPull to pull\\r\\n        uint256 xTokensToPull;\\r\\n        if (remainingPortionToUnstake == 10e17) {\\r\\n            xTokensToPull = xToken.balanceOf(msg.sender);\\r\\n        } else {\\r\\n            uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId);\\r\\n            uint256 reqXTokens = ((numNfts * 10e17) * 10e17) / shareValue;\\r\\n            // check for rounding error\\r\\n            if ((reqXTokens * shareValue) / 10e17 < numNfts * 10e17) {\\r\\n                reqXTokens += 1;\\r\\n            }\\r\\n\\r\\n            if (xToken.balanceOf(msg.sender) < reqXTokens) {\\r\\n                xTokensToPull = xToken.balanceOf(msg.sender);\\r\\n            } else if (remainingPortionToUnstake == 0) {\\r\\n                xTokensToPull = reqXTokens;\\r\\n            } else {\\r\\n                uint256 remainingXTokens = xToken.balanceOf(msg.sender) -\\r\\n                    reqXTokens;\\r\\n                xTokensToPull =\\r\\n                    reqXTokens +\\r\\n                    ((remainingXTokens * remainingPortionToUnstake) / 10e17);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // pull xTokens then unstake for vTokens\\r\\n        xToken.safeTransferFrom(msg.sender, address(this), xTokensToPull);\\r\\n        if (\\r\\n            xToken.allowance(address(this), address(inventoryStaking)) <\\r\\n            xTokensToPull\\r\\n        ) {\\r\\n            xToken.approve(address(inventoryStaking), type(uint256).max);\\r\\n        }\\r\\n\\r\\n        uint256 initialVTokenBal = vToken.balanceOf(address(this));\\r\\n\\r\\n        inventoryStaking.withdraw(vaultId, xTokensToPull);\\r\\n\\r\\n        uint256 missingVToken;\\r\\n        if (\\r\\n            vToken.balanceOf(address(this)) - initialVTokenBal < numNfts * 10e17\\r\\n        ) {\\r\\n            missingVToken =\\r\\n                (numNfts * 10e17) -\\r\\n                (vToken.balanceOf(address(this)) - initialVTokenBal);\\r\\n        }\\r\\n        require(missingVToken < 100, \\\"not enough vTokens\\\");\\r\\n\\r\\n        if (missingVToken > initialVTokenBal) {\\r\\n            if (\\r\\n                vToken.balanceOf(msg.sender) >= missingVToken &&\\r\\n                vToken.allowance(address(this), vTokenAddr) >= missingVToken\\r\\n            ) {\\r\\n                vToken.safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    missingVToken\\r\\n                );\\r\\n            } else {\\r\\n                address[] memory path = new address[](2);\\r\\n                path[0] = address(weth);\\r\\n                path[1] = vTokenAddr;\\r\\n                apeRouter.swapETHForExactTokens{value: 1000000000}(\\r\\n                    missingVToken,\\r\\n                    path,\\r\\n                    address(this),\\r\\n                    block.timestamp + 10000\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // reedem NFTs with vTokens, if requested\\r\\n        if (numNfts > 0) {\\r\\n            if (vToken.allowance(address(this), vTokenAddr) < numNfts * 10e17) {\\r\\n                vToken.approve(vTokenAddr, type(uint256).max);\\r\\n            }\\r\\n            IPIPXVault(vTokenAddr).redeemTo(\\r\\n                numNfts,\\r\\n                new uint256[](0),\\r\\n                msg.sender\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 vTokenRemainder = vToken.balanceOf(address(this)) -\\r\\n            initialVTokenBal;\\r\\n\\r\\n        // if vToken remainder more than dust then return to sender\\r\\n        if (vTokenRemainder > 100) {\\r\\n            vToken.safeTransfer(msg.sender, vTokenRemainder);\\r\\n        }\\r\\n\\r\\n        emit InventoryUnstaked(vaultId, xTokensToPull, numNfts, msg.sender);\\r\\n    }\\r\\n\\r\\n    function maxNftsUsingXToken(\\r\\n        uint256 vaultId,\\r\\n        address staker,\\r\\n        address slpToken\\r\\n    ) public view returns (uint256 numNfts, bool shortByTinyAmount) {\\r\\n        if (inventoryStaking.timelockUntil(vaultId, staker) > block.timestamp) {\\r\\n            return (0, false);\\r\\n        }\\r\\n        address vTokenAddr = vaultFactory.vault(vaultId);\\r\\n        address xTokenAddr = inventoryStaking.xTokenAddr(vTokenAddr);\\r\\n        IERC20Upgradeable vToken = IERC20Upgradeable(vTokenAddr);\\r\\n        IERC20Upgradeable xToken = IERC20Upgradeable(xTokenAddr);\\r\\n        IERC20Upgradeable lpPair = IERC20Upgradeable(slpToken);\\r\\n\\r\\n        uint256 xTokenBal = xToken.balanceOf(staker);\\r\\n        uint256 shareValue = inventoryStaking.xTokenShareValue(vaultId);\\r\\n        uint256 vTokensA = (xTokenBal * shareValue) / 10e17;\\r\\n        uint256 vTokensB = ((xTokenBal * shareValue) / 10e17) + 99;\\r\\n\\r\\n        uint256 vTokensIntA = vTokensA / 10e17;\\r\\n        uint256 vTokensIntB = vTokensB / 10e17;\\r\\n\\r\\n        if (vTokensIntB > vTokensIntA) {\\r\\n            if (\\r\\n                vToken.balanceOf(msg.sender) >= 99 &&\\r\\n                vToken.allowance(address(this), vTokenAddr) >= 99\\r\\n            ) {\\r\\n                return (vTokensIntB, true);\\r\\n            } else if (lpPair.totalSupply() >= 10000) {\\r\\n                return (vTokensIntB, true);\\r\\n            } else if (vToken.balanceOf(address(this)) >= 99) {\\r\\n                return (vTokensIntB, true);\\r\\n            } else {\\r\\n                return (vTokensIntA, false);\\r\\n            }\\r\\n        } else {\\r\\n            return (vTokensIntA, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function rescue(address token) external onlyOwner {\\r\\n        if (token == address(0)) {\\r\\n            (bool success, ) = payable(msg.sender).call{\\r\\n                value: address(this).balance\\r\\n            }(\\\"\\\");\\r\\n            require(\\r\\n                success,\\r\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n            );\\r\\n        } else {\\r\\n            IERC20Upgradeable(token).safeTransfer(\\r\\n                msg.sender,\\r\\n                IERC20Upgradeable(token).balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/proxy/Create2BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeacon.sol\\\";\\r\\nimport \\\"./Proxy.sol\\\";\\r\\nimport \\\"../util/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\r\\n * Slightly modified to allow using beacon proxies with Create2.\\r\\n *\\r\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\r\\n * conflict with the storage layout of the implementation behind the proxy.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\ncontract Create2BeaconProxy is Proxy {\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n     */\\r\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the proxy with `beacon`.\\r\\n     *\\r\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\r\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\r\\n     * constructor.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\r\\n     */\\r\\n    constructor() payable {\\r\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\r\\n        _setBeacon(msg.sender, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon address.\\r\\n     */\\r\\n    function _beacon() internal view virtual returns (address beacon) {\\r\\n        bytes32 slot = _BEACON_SLOT;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            beacon := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address of the associated beacon.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address) {\\r\\n        return IBeacon(_beacon()).childImplementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the proxy to use a new beacon.\\r\\n     *\\r\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `beacon` must be a contract.\\r\\n     * - The implementation returned by `beacon` must be a contract.\\r\\n     */\\r\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\r\\n        require(\\r\\n            Address.isContract(beacon),\\r\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\r\\n        );\\r\\n        require(\\r\\n            Address.isContract(IBeacon(beacon).childImplementation()),\\r\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\r\\n        );\\r\\n        bytes32 slot = _BEACON_SLOT;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, beacon)\\r\\n        }\\r\\n\\r\\n        if (data.length > 0) {\\r\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/proxy/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function childImplementation() external view returns (address);\\r\\n    function upgradeChildTo(address newImplementation) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback () external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive () external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overriden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual {\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/proxy/UpgradeableBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeacon.sol\\\";\\r\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../util/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\r\\n * implementation contract, which is where they will delegate all function calls.\\r\\n *\\r\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\r\\n */\\r\\ncontract UpgradeableBeacon is IBeacon, OwnableUpgradeable {\\r\\n    address private _childImplementation;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the child implementation returned by the beacon is changed.\\r\\n     */\\r\\n    event Upgraded(address indexed childImplementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\r\\n     * beacon.\\r\\n     */\\r\\n    function __UpgradeableBeacon__init(address childImplementation_) public initializer {\\r\\n        _setChildImplementation(childImplementation_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current child implementation address.\\r\\n     */\\r\\n    function childImplementation() public view virtual override returns (address) {\\r\\n        return _childImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the beacon to a new implementation.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - msg.sender must be the owner of the contract.\\r\\n     * - `newChildImplementation` must be a contract.\\r\\n     */\\r\\n    function upgradeChildTo(address newChildImplementation) public virtual override onlyOwner {\\r\\n        _setChildImplementation(newChildImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the implementation contract address for this beacon\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `newChildImplementation` must be a contract.\\r\\n     */\\r\\n    function _setChildImplementation(address newChildImplementation) private {\\r\\n        require(Address.isContract(newChildImplementation), \\\"UpgradeableBeacon: child implementation is not a contract\\\");\\r\\n        _childImplementation = newChildImplementation;\\r\\n        emit Upgraded(newChildImplementation);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/testing/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"../util/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20Metadata {\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC20_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function _setMetadata(string memory name_, string memory symbol_) internal {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n    uint256[45] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/token/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function deposit() external payable;\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/token/XTokenUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./ERC20Upgradeable.sol\\\";\\r\\nimport \\\"../util/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../util/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n// XTokens let uou come in with some vault tokens, and leave with more! The longer you stay, the more vault tokens you get.\\r\\n//\\r\\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\\r\\ncontract XTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    uint256 internal constant MAX_TIMELOCK = 2592000;\\r\\n    IERC20Upgradeable public baseToken;\\r\\n\\r\\n    mapping(address => uint256) internal timelock;\\r\\n\\r\\n    event Timelocked(address user, uint256 until);\\r\\n\\r\\n    function __XToken_init(address _baseToken, string memory name, string memory symbol) public initializer {\\r\\n        __Ownable_init();\\r\\n        // string memory _name = IPIPXInventoryStaking(msg.sender).pipxVaultFactory().vault();\\r\\n        __ERC20_init(name, symbol);\\r\\n        baseToken = IERC20Upgradeable(_baseToken);\\r\\n    }\\r\\n\\r\\n    // Needs to be called BEFORE new base tokens are deposited.\\r\\n    function mintXTokens(address account, uint256 _amount, uint256 timelockLength) external onlyOwner returns (uint256) {\\r\\n        // Gets the amount of Base Token locked in the contract\\r\\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\\r\\n        // Gets the amount of xTokens in existence\\r\\n        uint256 totalShares = totalSupply();\\r\\n        // If no xTokens exist, mint it 1:1 to the amount put in\\r\\n        if (totalShares == 0 || totalBaseToken == 0) {\\r\\n            _timelockMint(account, _amount, timelockLength);\\r\\n            return _amount;\\r\\n        }\\r\\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\\r\\n        else {\\r\\n            uint256 what = (_amount * totalShares) / totalBaseToken;\\r\\n            _timelockMint(account, what, timelockLength);\\r\\n            return what;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burnXTokens(address who, uint256 _share) external onlyOwner returns (uint256) {\\r\\n        // Gets the amount of xToken in existence\\r\\n        uint256 totalShares = totalSupply();\\r\\n        // Calculates the amount of base tokens the xToken is worth\\r\\n        uint256 what = (_share * baseToken.balanceOf(address(this))) / totalShares;\\r\\n        _burn(who, _share);\\r\\n        baseToken.safeTransfer(who, what);\\r\\n        return what;\\r\\n    }\\r\\n\\r\\n    function timelockAccount(address account, uint256 timelockLength) public onlyOwner virtual {\\r\\n        require(timelockLength < MAX_TIMELOCK, \\\"Too long lock\\\");\\r\\n        uint256 timelockFinish = block.timestamp + timelockLength;\\r\\n        if(timelockFinish > timelock[account]){\\r\\n            timelock[account] = timelockFinish;\\r\\n            emit Timelocked(account, timelockFinish);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _burn(address who, uint256 amount) internal override {\\r\\n        require(block.timestamp > timelock[who], \\\"User locked\\\");\\r\\n        super._burn(who, amount);\\r\\n    }\\r\\n\\r\\n    function timelockUntil(address account) public view returns (uint256) {\\r\\n        return timelock[account];\\r\\n    }\\r\\n\\r\\n    function _timelockMint(address account, uint256 amount, uint256 timelockLength) internal virtual {\\r\\n        timelockAccount(account, timelockLength);\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n    \\r\\n    function _transfer(address from, address to, uint256 value) internal override {\\r\\n        require(block.timestamp > timelock[from], \\\"User locked\\\");\\r\\n        super._transfer(from, to, value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/util/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/util/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal initializer {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\r\\n * `CREATE2` can be used to compute in advance the address where a smart\\r\\n * contract will be deployed, which allows for interesting new mechanisms known\\r\\n * as 'counterfactual interactions'.\\r\\n *\\r\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\r\\n * information.\\r\\n */\\r\\nlibrary Create2 {\\r\\n    /**\\r\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\r\\n     * will be deployed can be known in advance via {computeAddress}.\\r\\n     *\\r\\n     * The bytecode for a contract can be obtained from Solidity with\\r\\n     * `type(contractName).creationCode`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `bytecode` must not be empty.\\r\\n     * - `salt` must have not been used for `bytecode` already.\\r\\n     * - the factory must have a balance of at least `amount`.\\r\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\r\\n     */\\r\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\r\\n        address addr;\\r\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\r\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\r\\n        }\\r\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\r\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\r\\n     */\\r\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\r\\n        return computeAddress(salt, bytecodeHash, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\r\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\r\\n     */\\r\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\r\\n        bytes32 _data = keccak256(\\r\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\r\\n        );\\r\\n        return address(uint160(uint256(_data)));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/util/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../testing/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal initializer {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract PausableUpgradeable is OwnableUpgradeable {\\r\\n\\r\\n    function __Pausable_init() internal initializer {\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    event SetPaused(uint256 lockId, bool paused);\\r\\n    event SetIsGuardian(address addr, bool isGuardian);\\r\\n\\r\\n    mapping(address => bool) public isGuardian;\\r\\n    mapping(uint256 => bool) public isPaused;\\r\\n    // 0 : createVault\\r\\n    // 1 : mint\\r\\n    // 2 : redeem\\r\\n    // 3 : swap\\r\\n    // 4 : flashloan\\r\\n\\r\\n    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\\r\\n        require(!isPaused[lockId] || msg.sender == owner(), \\\"Paused\\\");\\r\\n    }\\r\\n\\r\\n    function unpause(uint256 lockId)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        isPaused[lockId] = false;\\r\\n        emit SetPaused(lockId, false);\\r\\n    }\\r\\n\\r\\n    function pause(uint256 lockId) public virtual {\\r\\n        require(isGuardian[msg.sender], \\\"Can't pause\\\");\\r\\n        isPaused[lockId] = true;\\r\\n        emit SetPaused(lockId, true);\\r\\n    }\\r\\n\\r\\n    function setIsGuardian(address addr, bool _isGuardian) public virtual onlyOwner {\\r\\n        isGuardian[addr] = _isGuardian;\\r\\n        emit SetIsGuardian(addr, _isGuardian);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/solidity/util/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/solidity/util/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../token/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20Upgradeable {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokensUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numNftsRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"}],\"name\":\"InventoryUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apeRouter\",\"outputs\":[{\"internalType\":\"contract IApeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryStaking\",\"outputs\":[{\"internalType\":\"contract PIPXInventoryStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slpToken\",\"type\":\"address\"}],\"name\":\"maxNftsUsingXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numNfts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shortByTinyAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setInventoryStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apeRouterAddr\",\"type\":\"address\"}],\"name\":\"setSushiRouterAndWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numNfts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingPortionToUnstake\",\"type\":\"uint256\"}],\"name\":\"unstakeInventory\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract IPIPXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PIPXUnstakingInventoryZap", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}