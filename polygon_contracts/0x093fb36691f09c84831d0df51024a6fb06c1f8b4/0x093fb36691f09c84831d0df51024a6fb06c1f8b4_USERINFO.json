{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface Token{\r\n    function transferFrom(address,address,uint) external;\r\n    function transfer(address,uint) external;\r\n}\r\nstruct UserInfo { \r\n        address    owner;\r\n        address    recommend;\r\n        address[]  under;\r\n        bool       white;\r\n        uint256    amount;\r\n        uint256[3] team;\r\n        uint256    hasten;\r\n        uint256    releaseAmount;\r\n        uint256    released;\r\n        uint256[2] reward;\r\n        uint256    releasFinish;\r\n        uint256    lastTime;\r\n        uint256    ethAmount;\r\n        uint256    vip;\r\n        uint256[4][]  depositList;\r\n        uint256[2][]  withdrawList;\r\n        uint256[3][]  ethList;\r\n        uint256[3][]  neuList;\r\n        RecommendInfo[]  recommendList;\r\n    }\r\n    struct RecommendInfo { \r\n        address    recommend;\r\n        uint256    amount;\r\n        uint256    what;\r\n        uint256    time;\r\n    }\r\ninterface Neudonate{\r\n    function billing(address usr) external;\r\n    function neuPrice() external view returns(uint price);\r\n    function getUsers() external view returns(address[] memory _users,uint length);\r\n    function getUserInfo(address usr) external view returns(UserInfo memory user);\r\n}\r\n\r\ncontract USERINFO{\r\n\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external  auth { wards[usr] = 1; }\r\n    function deny(address usr) external  auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"USERINFO/not-authorized\");\r\n        _;\r\n    }\r\n    Neudonate                                         public  neudonate = Neudonate(0x150c0560321b1d463c4D9Af8f6CA3965E7c76d94);\r\n    uint                                              public  len = 60;\r\n    uint                                              public  lastTime;\r\n    uint[8]                                           public  airAmount = [10,500,1,10,1,10,2,10];\r\n    mapping (address => UserInfoBuy)                  public  userInfo;\r\n    mapping (address => mapping (uint => bool))       public  isAir;\r\n    address                                           public  NEU = 0xEeE1e6e2eAb894F30aD66cf933AC9369E6958b4A;\r\n    address                                           public  usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n    address                                           public  eth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\r\n    address                                           public  btc = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\r\n\r\n    struct UserInfoBuy { \r\n        uint256    buyAmount;\r\n        uint256[3][]  airList;\r\n    }\r\n    constructor() {\r\n        wards[msg.sender] = 1;\r\n    }\r\n    function global(uint256 what, address usr,uint data) external auth {\r\n        if (what == 1) neudonate = Neudonate(usr);                           \r\n        else if (what == 2) len = data; \r\n        else if (what == 3) lastTime = data; \r\n        else revert(\"USERINFO/setdata-unrecognized-param\");\r\n    }\r\n    function setArry(uint[8] memory data) external auth {\r\n        airAmount = data;\r\n    }\r\n    function buyNeu(uint usdtAmount) public{\r\n        neudonate.billing(msg.sender);\r\n        UserInfoBuy storage user = userInfo[msg.sender];\r\n        require(usdtAmount <= getUserInfo(msg.sender).amount - user.buyAmount,\"USERINFO/1\");\r\n        Token(usdt).transferFrom(msg.sender, address(this), usdtAmount);\r\n        user.buyAmount += usdtAmount;\r\n        uint price = neudonate.neuPrice();\r\n        uint wad = usdtAmount*1E18/price;\r\n        Token(NEU).transfer(msg.sender,wad);\r\n    }\r\n    function airDrop() public{\r\n        require(block.timestamp > lastTime + 86400,\"USERINFO/2\");\r\n        require(!isAir[msg.sender][lastTime],\"USERINFO/3\");\r\n        require(getUserInfo(msg.sender).amount >= 100*1E6,\"USERINFO/4\");\r\n        if(block.timestamp > lastTime + 90000) lastTime += 86400;\r\n        neudonate.billing(msg.sender);\r\n        UserInfoBuy storage user = userInfo[msg.sender];\r\n        uint hash = uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp,isAir[msg.sender][lastTime])))%1E6;\r\n        uint256  qualityid = hash%4;\r\n        uint256 wad;\r\n        if(qualityid == 0) {\r\n            wad = hash%1000;\r\n            if(wad > airAmount[1]) wad = wad/2;\r\n            else if(wad < airAmount[0]) wad = airAmount[0];\r\n            wad = wad*1E18;\r\n            Token(NEU).transfer(msg.sender,wad);\r\n        }\r\n        else if(qualityid == 1) {\r\n            wad = hash%100;\r\n            if(wad > airAmount[3]) wad = wad/2;\r\n            else if(wad < airAmount[2]) wad = airAmount[2];\r\n            wad = wad*1E4;\r\n            Token(btc).transfer(msg.sender,wad);\r\n        }\r\n        else if(qualityid == 2) {\r\n            wad = hash%100;\r\n            if(wad > airAmount[5]) wad = wad/2;\r\n            else if(wad < airAmount[4]) wad = airAmount[4];\r\n            wad = wad*1E15;\r\n            Token(eth).transfer(msg.sender,wad);\r\n        }\r\n        else if(qualityid == 3) {\r\n            wad = hash%100;\r\n            if(wad > airAmount[7]) wad = wad/2;\r\n            else if(wad < airAmount[6]) wad = airAmount[6];\r\n            wad = wad*1E5;\r\n            Token(usdt).transfer(msg.sender,wad);\r\n        }\r\n        uint[3] memory list = [qualityid,wad,block.timestamp];\r\n        user.airList.push(list);\r\n        isAir[msg.sender][lastTime] = true;\r\n    }\r\n    function getUser(address usr) public view returns(UserInfoBuy memory user){\r\n        user =  userInfo[usr];\r\n    }\r\n    function getUserInfo(address usr) public view returns(UserInfo memory user){\r\n        user = neudonate.getUserInfo(usr);\r\n        uint length = user.recommendList.length;\r\n        if(length >len) {\r\n            RecommendInfo[]  memory List = new RecommendInfo[](len);\r\n            uint j=1;\r\n            for(uint i=len;i>0;i--) {\r\n                RecommendInfo memory list;\r\n                list.recommend = user.recommendList[length-j].recommend;\r\n                list.amount = user.recommendList[length-j].amount;\r\n                list.what = user.recommendList[length-j].what;\r\n                list.time = user.recommendList[length-j].time;\r\n                List[i-1] = list;\r\n                j++;\r\n            }\r\n            user.recommendList = List;\r\n        }\r\n    }\r\n    function getUsersForBatch(uint start,uint people) public view returns(UserInfo[] memory user){\r\n       (address[] memory users, uint length) = neudonate.getUsers();\r\n        if(start >= length) start = length -1;\r\n        user = new UserInfo[](people);\r\n        for(uint i =0;i<people;i++){\r\n           address usr = users[start-i];\r\n           user[i] = getUserInfo(usr);\r\n           if(start - i ==0) break;\r\n        }\r\n    }\r\n    function getUnderInfo(address usr) public view returns(UserInfo[] memory users,uint people,uint amounts,uint ethAmounts){\r\n        UserInfo memory user = getUserInfo(usr);\r\n        uint length = user.under.length;\r\n        people = length;\r\n        users = new UserInfo[](length);\r\n        for(uint i=0;i<length;++i) {\r\n            address under = user.under[i];\r\n            users[i] = getUserInfo(under);\r\n            amounts += users[i].amount;\r\n            ethAmounts += users[i].ethAmount;\r\n        }\r\n    }\r\n    function withdraw(address asses, uint256 amount, address ust) public auth {\r\n        Token(asses).transfer(ust, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NEU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyNeu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3][]\",\"name\":\"airList\",\"type\":\"uint256[3][]\"}],\"internalType\":\"struct USERINFO.UserInfoBuy\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"people\",\"type\":\"uint256\"}],\"name\":\"getUsersForBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"under\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"team\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"hasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"reward\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"releasFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4][]\",\"name\":\"depositList\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"withdrawList\",\"type\":\"uint256[2][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"ethList\",\"type\":\"uint256[3][]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"neuList\",\"type\":\"uint256[3][]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recommend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RecommendInfo[]\",\"name\":\"recommendList\",\"type\":\"tuple[]\"}],\"internalType\":\"struct UserInfo[]\",\"name\":\"user\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"global\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isAir\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"len\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neudonate\",\"outputs\":[{\"internalType\":\"contract Neudonate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"name\":\"setArry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USERINFO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5123df0f154bdc41ad3ccb6174e0a8f512ed52acbb39018f489d928616bc9609"}