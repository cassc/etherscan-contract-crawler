{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/V1/interfaces/ISmartWalletChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ISmartWalletChecker {\\n    /**\\n     * @dev Returns if an `account` is a whitelisted smart contract account.\\n     * When new types are added - the whole contract is changed\\n     * The check() method is modifying to be able to use caching\\n     * for individual wallet addresses\\n     *\\n     * Requirements:\\n     *\\n     * - only the voting escrow contract can call this contract.\\n     */\\n    function check(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/V1/interfaces/ISmartWalletWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISmartWalletWhitelist is IERC165 {\\n    /**\\n     * @dev Emitted when a `wallet` is added whitelisted.\\n     */\\n    event WalletApproved(address wallet);\\n\\n    /**\\n     * @dev Emitted when a `wallet` is removed from the whitelist.\\n     */\\n    event WalletRevoked(address wallet);\\n\\n    /**\\n     * @dev Approves a `wallet` as a whitelisted address.\\n     */\\n    function approveWallet(address wallet) external;\\n\\n    /**\\n     * @dev Revokes a `wallet` from being a whitelisted address.\\n     */\\n    function revokeWallet(address wallet) external;\\n\\n    /**\\n     * @dev Returns if a `wallet` is a whitelisted address.\\n     */\\n    function check(address wallet) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/V1/interfaces/IVeContractListener.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface IVeContractListener is IERC165Upgradeable {\\n    /**\\n     * @dev Updates the voting power for `account` when voting power is\\n     * added or changed on the voting escrow contract directly.\\n     *\\n     * Requirements:\\n     *\\n     * - only the voting escrow contract can call this contract.\\n     */\\n    function onVotingPowerUpdated(address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/V1/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVotingEscrow {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        RELOCK\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    /**\\n     * @dev Emitted `provider` withdraws previously deposited `value`\\n     * amount of tokens at timestamp `ts`.\\n     */\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n\\n    /**\\n     * @dev Emitted when tokens of `value` amount are deposited by\\n     * `provider` at `locktime` of `_type` at the transaction time `ts`.\\n     */\\n    event Deposit(\\n        address indexed provider,\\n        address indexed payer,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        DepositType _type,\\n        uint256 ts\\n    );\\n\\n    /**\\n     * @dev Emitted `amount` of `token` is recovered from this contract to\\n     * the owner.\\n     */\\n    event Recovered(address token, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when the total supply is updated from `prevSupply`\\n     * to `supply`.\\n     */\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    /**\\n     * @dev Emitted when a new `listener` is added.\\n     */\\n    event ListenerAdded(address listner);\\n\\n    /**\\n     * @dev Emitted when an existing `listener` is removed.\\n     */\\n    event ListenerRemoved(address listner);\\n\\n    /**\\n     * @dev Emitted when the smart wallet check status is toggled.\\n     */\\n    event SmartWalletCheckerStatusToggled(bool isSmartWalletCheckerOn);\\n\\n    /**\\n     * @dev Emitted when the smart wallet check address is set.\\n     */\\n    event SmartWalletCheckerSet(address checker);\\n\\n    /**\\n     * @dev Emitted when a create lock helper is set.\\n     */\\n    event CreateLockHelperSet(address helper);\\n\\n    /**\\n     * @dev Deposits and locks `_value` amount of tokens for a user `_addr`.\\n     */\\n    function deposit_for(address _addr, uint256 _value) external;\\n\\n    /**\\n     * @dev Creates a lock of `_value` amount of tokens ended at\\n     * `_unlock_time`.\\n     */\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n\\n    /**\\n     * @dev Creates a lock of `_value` amount of tokens for `_beneficiary`\\n     * with lock ending time at `_unlock_time`. The tokens are paid by\\n     * `_payer`, which may or may not be the same with `_beneficiary`.\\n     */\\n    function createLockFor(\\n        address _beneficiary,\\n        address _payer,\\n        uint256 _value,\\n        uint256 _unlock_time\\n    ) external;\\n\\n    /**\\n     * @dev Increases the locked amount by `_value` amount of tokens the\\n     * caller.\\n     */\\n    function increase_amount(uint256 _value) external;\\n\\n    /**\\n     * @dev Increases the locked amount to a new unlock time at\\n     * `_unlock_time` by the caller.\\n     */\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    /**\\n     * @dev Increases the locked amount by `_value` amount and to a\\n     * new unlock time at `_unlock_time` by the caller.\\n     */\\n    function increaseAmountAndUnlockTime(uint256 _value, uint256 _unlock_time)\\n        external;\\n\\n    /**\\n     * @dev Withdraws unlocked tokens to the caller's wallet.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @dev Relocks caller's expired tokens for `_unlock_time`\\n     * amount of time.\\n     */\\n    function relock(uint256 _unlock_time) external;\\n\\n    /**\\n     * @dev Toggles the smart contract checker status.\\n     */\\n    function toggleSmartWalletCheckerStatus() external;\\n\\n    /**\\n     * @dev Adds a `listener` contract that needs to be notified when\\n     * voting power is updated for any token holder.\\n     */\\n    function addListener(address listener) external;\\n\\n    /**\\n     * @dev Removes a listener at `listenerIdx` that is no longer in use.\\n     */\\n    function removeListenerAt(uint256 listenerIdx) external;\\n\\n    /**\\n     * @dev Returns the listerner at the `listenerIdx`-th location.\\n     */\\n    function getListenerAt(uint256 listenerIdx) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of listeners available.\\n     */\\n    function getNumOfListeners() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the last user slope for the account `addr`.\\n     */\\n    function get_last_user_slope(address addr) external view returns (int128);\\n\\n    /**\\n     * @dev Returns the last user bias for the account `addr`.\\n     */\\n    function get_last_user_bias(address addr) external view returns (int128);\\n\\n    /**\\n     * @dev Returns the vesting time in seconds since last check point\\n     * for a given `addr`.\\n     */\\n    function get_last_user_vestingTime(address addr)\\n        external\\n        view\\n        returns (int128);\\n\\n    /**\\n     * @dev Returns the timestamp for checkpoint `_idx` for `_addr`\\n     */\\n    function user_point_history__ts(address _addr, uint256 _idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the timestamp when `_addr`'s lock finishes.\\n     */\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the current voting power for `_msgSender()` at the\\n     * specified timestamp `_t`.\\n     */\\n    function balanceOf(address addr, uint256 _t)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the current voting power for `_msgSender()` at the\\n     * moment when this function is called.\\n     */\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the voting power of `addr` at block height `_block`.\\n     */\\n    function balanceOfAt(address addr, uint256 _block)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the total voting power of the caller at the specified\\n     * timestamp `t`.\\n     */\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total voting power of the caller at the\\n     * current timestamp.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total voting power of the caller at `_block` usually\\n     * in the past.\\n     */\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    /**\\n     * @dev Recovers `tokenAmount` of ERC20 tokens at `tokenAddress` in this\\n     * contract to be distributed to the contract admin.\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/V1/utils/Adminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an admin) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the admin account will be the one that deploys the contract. This\\n * can later be changed with {transferAdminship}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyAdmin`, which can be applied to your functions to restrict their use to\\n * the admin.\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n *\\n * This is a direct copy of OpenZeppelin's Ownable at:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n */\\n\\nabstract contract Adminable is Context {\\n    address private _admin;\\n\\n    event AdminshipTransferred(\\n        address indexed previousAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial admin.\\n     */\\n    constructor() {\\n        _transferAdminship(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        // solhint-disable-next-line reason-string\\n        require(admin() == _msgSender(), \\\"Adminable: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without admin. It will not be possible to call\\n     * `onlyAdmin` functions anymore. Can only be called by the current admin.\\n     *\\n     * NOTE: Renouncing adminship will leave the contract without an admin,\\n     * thereby removing any functionality that is only available to the admin.\\n     */\\n    function renounceAdminship() public virtual onlyAdmin {\\n        _transferAdminship(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers adminship of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdminship(address newAdmin) public virtual onlyAdmin {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            newAdmin != address(0),\\n            \\\"Adminable: new admin is the zero address\\\"\\n        );\\n        _transferAdminship(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Transfers adminship of the contract to a new account (`newAdmin`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferAdminship(address newAdmin) internal virtual {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminshipTransferred(oldAdmin, newAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/V1/VotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IVeContractListener.sol\\\";\\nimport \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport \\\"./interfaces/ISmartWalletChecker.sol\\\";\\nimport \\\"./interfaces/ISmartWalletWhitelist.sol\\\";\\nimport \\\"./utils/Adminable.sol\\\";\\n\\ncontract VotingEscrow is ReentrancyGuard, Adminable, IVotingEscrow {\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- State Variables ---\\n    // Address of the token being locked\\n    IERC20 public immutable token;\\n\\n    // Address of listeners that need to be updated\\n    EnumerableSet.AddressSet private listeners;\\n\\n    // Current supply of vote locked tokens\\n    uint256 public supply;\\n\\n    // Current vote lock epoch\\n    uint256 public epoch;\\n\\n    // veContract token name\\n    string public name;\\n\\n    // veContract token symbol\\n    string public symbol;\\n\\n    // veToken decimals\\n    uint256 public decimals;\\n\\n    // num of listeners\\n    uint256 public numOfListeners;\\n\\n    // Current smart wallet checker\\n    address public smart_wallet_checker;\\n\\n    // One-time create lock helper: airdrop, or others.\\n    address public create_lock_helper;\\n\\n    // Helper already set or not status\\n    bool public helperSet;\\n\\n    // Smart wallet checker on/off status\\n    bool public isSmartWalletCheckerOn;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n\\n    uint256 public constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 public constant MINTIME = 30 * 86400; // 30 days\\n    uint256 public constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    uint256 public constant MULTIPLIER = 10**18;\\n\\n    // Locked balances and end date for each lock\\n    mapping(address => LockedBalance) public locked;\\n    // History of vote weights for each user\\n    mapping(address => mapping(uint256 => Point)) public user_point_history;\\n    // Vote epochs for each user vote weight\\n    mapping(address => uint256) public user_point_epoch;\\n    // Decay slope changes\\n    mapping(uint256 => int128) public slope_changes; // time -> signed slope change\\n    // Global vote weight history for each epoch\\n    mapping(uint256 => Point) public point_history; // epoch -> unsigned point\\n\\n    /**\\n     * @notice Contract constructor\\n     * @param _token `MVDAO` token address\\n     * @param _name Token name\\n     * @param _symbol Token symbol\\n     */\\n    constructor(\\n        address _token,\\n        string memory _name,\\n        string memory _symbol\\n    ) {\\n        require(_token != address(0), \\\"VotingEscrow: invalid address\\\");\\n\\n        name = _name;\\n        symbol = _symbol;\\n        token = IERC20(_token);\\n        decimals = IERC20Metadata(_token).decimals(); // snapshot strategies\\n\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n    }\\n\\n    modifier onlyCreateLockHelper() {\\n        require(\\n            _msgSender() == create_lock_helper,\\n            \\\"VotingEscrow: only helper\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit and lock tokens for a user\\n     * @dev Anyone (even a smart contract) can deposit for someone else, but\\n            cannot extend their locktime and deposit for a brand new user\\n     * @param _addr User's wallet address\\n     * @param _value Amount to add to user's lock\\n     */\\n    function deposit_for(address _addr, uint256 _value)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        LockedBalance memory _locked = locked[_addr];\\n\\n        require(_value > 0, \\\"veC/need-non-zero-value\\\");\\n        require(_locked.amount > 0, \\\"veC/no-existing-lock-found\\\");\\n        require(\\n            _locked.end > block.timestamp,\\n            \\\"veC/cannot-add-to-expired-lock-withdraw\\\"\\n        );\\n\\n        _deposit_for(\\n            _addr,\\n            _addr,\\n            _value,\\n            0,\\n            _locked,\\n            DepositType.DEPOSIT_FOR_TYPE\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` tokens for `_msgSender()` and lock until `_unlock_time`\\n     * @param _value Amount to deposit\\n     * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n     */\\n    function create_lock(uint256 _value, uint256 _unlock_time)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _createLockFor(_msgSender(), _msgSender(), _value, _unlock_time);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` tokens for `_beneficiary` by `_payer` and lock until `_unlock_time`\\n     * @param _beneficiary Account that receives voting power\\n     * @param _payer Account that pays the tokens for the beneficiary\\n     * @param _value Amount to deposit\\n     * @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n     */\\n    function createLockFor(\\n        address _beneficiary,\\n        address _payer,\\n        uint256 _value,\\n        uint256 _unlock_time\\n    ) external override onlyCreateLockHelper nonReentrant {\\n        _createLockFor(_beneficiary, _payer, _value, _unlock_time);\\n    }\\n\\n    /**\\n     * @notice Deposit `_value` additional tokens for `_msgSender()`\\n               without modifying the unlock time\\n     * @param _value Amount of tokens to deposit and add to the lock\\n     */\\n    function increase_amount(uint256 _value) external override nonReentrant {\\n        _increase_amount(_value);\\n    }\\n\\n    /**\\n     * @notice Extend the unlock time for `_msgSender()` to `_unlock_time`\\n     * @param _unlock_time New epoch time for unlocking\\n     */\\n    function increase_unlock_time(uint256 _unlock_time)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _increase_unlock_time(_unlock_time);\\n    }\\n\\n    function increaseAmountAndUnlockTime(uint256 _value, uint256 _unlock_time)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        _increase_amount(_value);\\n        _increase_unlock_time(_unlock_time);\\n    }\\n\\n    /**\\n     * @notice Withdraw all tokens for `_msgSender()`ime`\\n     * @dev Only possible if the lock has expired\\n     */\\n    function withdraw() external override nonReentrant {\\n        LockedBalance memory _locked = locked[_msgSender()];\\n        require(block.timestamp >= _locked.end, \\\"veC/the-lock-did-not-expire\\\");\\n        uint256 value = uint256(int256(_locked.amount));\\n\\n        LockedBalance memory old_locked = LockedBalance({\\n            amount: _locked.amount,\\n            end: _locked.end\\n        });\\n\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[_msgSender()] = _locked;\\n        uint256 supply_before = supply;\\n        supply = supply_before - value;\\n\\n        // old_locked can have either expired <= timestamp or zero end\\n        // _locked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(_msgSender(), old_locked, _locked);\\n\\n        token.safeTransfer(_msgSender(), value);\\n\\n        for (uint256 i = 0; i < numOfListeners; i++) {\\n            address listener = listeners.at(i);\\n            IVeContractListener(listener).onVotingPowerUpdated(_msgSender());\\n        }\\n\\n        emit Withdraw(_msgSender(), value, block.timestamp);\\n        emit Supply(supply_before, supply_before - value);\\n    }\\n\\n    function relock(uint256 _unlock_time) external override nonReentrant {\\n        _relock(_unlock_time);\\n    }\\n\\n    function toggleSmartWalletCheckerStatus() external override onlyAdmin {\\n        isSmartWalletCheckerOn = !isSmartWalletCheckerOn;\\n\\n        emit SmartWalletCheckerStatusToggled(isSmartWalletCheckerOn);\\n    }\\n\\n    function addListener(address listener) external override onlyAdmin {\\n        require(\\n            listener != address(0) &&\\n                listener.supportsInterface(\\n                    type(IVeContractListener).interfaceId\\n                ),\\n            \\\"veC/invalid-listener\\\"\\n        );\\n        listeners.add(listener);\\n        if (listeners.length() > numOfListeners) {\\n            numOfListeners++;\\n        }\\n\\n        emit ListenerAdded(listener);\\n    }\\n\\n    function removeListenerAt(uint256 listenerIdx) external override onlyAdmin {\\n        require(listeners.length() > 0, \\\"veC/no-listener-to-remove\\\");\\n        require(listenerIdx < listeners.length(), \\\"veC/invalid-listener-index\\\");\\n        address listenerToRemove = listeners.at(listenerIdx);\\n        listeners.remove(listenerToRemove);\\n\\n        if (listeners.length() < numOfListeners) {\\n            numOfListeners--;\\n        }\\n\\n        emit ListenerRemoved(listenerToRemove);\\n    }\\n\\n    function getListenerAt(uint256 listenerIdx)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        if (listeners.length() > 0) {\\n            return listeners.at(listenerIdx);\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function getNumOfListeners() external view override returns (uint256) {\\n        return listeners.length();\\n    }\\n\\n    /**\\n     * @notice Get the most recently recorded rate of voting power decrease for `addr`\\n     * @param addr Address of the user wallet\\n     * @return Value of the slope\\n     */\\n    function get_last_user_slope(address addr)\\n        external\\n        view\\n        override\\n        returns (int128)\\n    {\\n        uint256 uepoch = user_point_epoch[addr];\\n        return user_point_history[addr][uepoch].slope;\\n    }\\n\\n    /**\\n     * @notice Get the most recently recorded rate of voting power decrease for `addr`\\n     * @param addr Address of the user wallet\\n     * @return Value of the bias\\n     */\\n    function get_last_user_bias(address addr)\\n        external\\n        view\\n        override\\n        returns (int128)\\n    {\\n        uint256 uepoch = user_point_epoch[addr];\\n        return user_point_history[addr][uepoch].bias;\\n    }\\n\\n    /**\\n     * @notice Get the vesting time for `addr`\\n     * @param addr Address of the user wallet\\n     * @return the vesting time in seconds since last check point\\n     */\\n    function get_last_user_vestingTime(address addr)\\n        external\\n        view\\n        override\\n        returns (int128)\\n    {\\n        uint256 uepoch = user_point_epoch[addr];\\n        int128 bias = user_point_history[addr][uepoch].bias;\\n        int128 slope = user_point_history[addr][uepoch].slope;\\n        return bias / slope;\\n    }\\n\\n    /**\\n     * @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n     * @param _addr User wallet address\\n     * @param _idx User epoch number\\n     * @return Epoch time of the checkpoint\\n     */\\n    function user_point_history__ts(address _addr, uint256 _idx)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n\\n    /**\\n     * @notice Get timestamp when `_addr`'s lock finishes\\n     * @param _addr User wallet\\n     * @return Epoch time of the lock end\\n     */\\n    function locked__end(address _addr)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return locked[_addr].end;\\n    }\\n\\n    /**\\n     * @notice Get the current voting power for `addr` at the specified timestamp\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param addr User wallet address\\n     * @param _t Epoch time to return voting power at\\n     * @return User voting power\\n     */\\n    function balanceOf(address addr, uint256 _t)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _epoch = user_point_epoch[addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory last_point = user_point_history[addr][_epoch];\\n            last_point.bias -=\\n                last_point.slope *\\n                (int128(int256(_t)) - int128(int256(last_point.ts)));\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n            return uint256(int256(last_point.bias));\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current voting power for `addr` at the current timestamp\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param addr User wallet address\\n     * @return User voting power\\n     */\\n    function balanceOf(address addr) public view override returns (uint256) {\\n        return balanceOf(addr, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Measure voting power of `addr` at block height `_block`\\n     * @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n     * @param addr User's wallet address\\n     * @param _block Block to calculate the voting power at\\n     * @return Voting power\\n     */\\n    function balanceOfAt(address addr, uint256 _block)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_block <= block.number);\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = user_point_epoch[addr];\\n\\n        // Will be always enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (user_point_history[addr][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = user_point_history[addr][_min];\\n\\n        uint256 max_epoch = epoch;\\n        uint256 _epoch = find_block_epoch(_block, max_epoch);\\n\\n        Point memory point_0 = point_history[_epoch];\\n        uint256 d_block = 0;\\n        uint256 d_t = 0;\\n\\n        if (_epoch < max_epoch) {\\n            Point memory point_1 = point_history[_epoch + 1];\\n            d_block = point_1.blk - point_0.blk;\\n            d_t = point_1.ts - point_0.ts;\\n        } else {\\n            d_block = block.number - point_0.blk;\\n            d_t = block.timestamp - point_0.ts;\\n        }\\n\\n        uint256 block_time = point_0.ts;\\n        if (d_block != 0) {\\n            block_time += (d_t * (_block - point_0.blk)) / d_block;\\n        }\\n\\n        if (block_time < upoint.ts) {\\n            return 0;\\n        }\\n\\n        upoint.bias -= upoint.slope * (int128(int256(block_time - upoint.ts)));\\n        if (upoint.bias >= 0) {\\n            return uint256(int256(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at the specified timestamp\\n     * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     * @return Total voting power\\n     */\\n    function totalSupply(uint256 t) public view override returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory last_point = point_history[_epoch];\\n        return supply_at(last_point, t);\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at the current timestamp\\n     * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n     * @return Total voting power\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return totalSupply(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at some point in the past\\n     * @param _block Block to calculate the total voting power at\\n     * @return Total voting power at `_block`\\n     */\\n    function totalSupplyAt(uint256 _block)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_block <= block.number, \\\"veC/invalid-input-block-number\\\");\\n        uint256 _epoch = epoch;\\n        uint256 target_epoch = find_block_epoch(_block, _epoch);\\n\\n        Point memory point = point_history[target_epoch];\\n        uint256 dt = 0;\\n\\n        if (target_epoch < _epoch) {\\n            Point memory point_next = point_history[target_epoch + 1];\\n            if (point.blk != point_next.blk) {\\n                dt =\\n                    ((_block - point.blk) * (point_next.ts - point.ts)) /\\n                    (point_next.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt =\\n                    ((_block - point.blk) * (block.timestamp - point.ts)) /\\n                    (block.number - point.blk);\\n            }\\n        }\\n\\n        // Now dt contains info on how far are we beyond point\\n        return supply_at(point, point.ts + dt);\\n    }\\n\\n    /**\\n     * @notice Check if the call is from a whitelisted smart contract, revert if not\\n     * @param _addr Address to be checked\\n     */\\n    function assert_not_contract(address _addr) internal view {\\n        if (isSmartWalletCheckerOn) {\\n            if (_addr != tx.origin) {\\n                address checker = smart_wallet_checker;\\n                if (checker != ZERO_ADDRESS) {\\n                    if (ISmartWalletChecker(checker).check(_addr)) {\\n                        return;\\n                    }\\n                }\\n                revert(\\\"veC/smart-contract-depositors-not-allowed\\\");\\n            }\\n        }\\n    }\\n\\n    // Constant structs not allowed yet, so this will have to do\\n    function EMPTY_POINT_FACTORY() internal pure returns (Point memory) {\\n        return Point({bias: 0, slope: 0, ts: 0, blk: 0});\\n    }\\n\\n    // Constant structs not allowed yet, so this will have to do\\n    function EMPTY_LOCKED_BALANCE_FACTORY()\\n        internal\\n        pure\\n        returns (LockedBalance memory)\\n    {\\n        return LockedBalance({amount: 0, end: 0});\\n    }\\n\\n    function _createLockFor(\\n        address _beneficiary,\\n        address _payer,\\n        uint256 _value,\\n        uint256 _unlock_time\\n    ) private {\\n        assert_not_contract(_beneficiary);\\n        require(\\n            _unlock_time >= block.timestamp + MINTIME,\\n            \\\"veC/voting-lock-can-be-30-days-min\\\"\\n        );\\n\\n        uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n        LockedBalance memory _locked = locked[_beneficiary];\\n\\n        require(_value > 0, \\\"veC/need-non-zero-value\\\");\\n        require(_locked.amount == 0, \\\"veC/withdraw-old-tokens-first\\\");\\n        require(\\n            unlock_time <= block.timestamp + MAXTIME,\\n            \\\"veC/voting-lock-can-be-4-years-max\\\"\\n        );\\n\\n        _deposit_for(\\n            _beneficiary,\\n            _payer,\\n            _value,\\n            unlock_time,\\n            _locked,\\n            DepositType.CREATE_LOCK_TYPE\\n        );\\n    }\\n\\n    function _increase_amount(uint256 _value) private {\\n        assert_not_contract(_msgSender());\\n        LockedBalance memory _locked = locked[_msgSender()];\\n\\n        require(_value > 0, \\\"veC/need-non-zero-value\\\");\\n        require(_locked.amount > 0, \\\"veC/no-existing-lock-found\\\");\\n        require(\\n            _locked.end > block.timestamp,\\n            \\\"veC/cannot-add-to-expired-lock-withdraw\\\"\\n        );\\n\\n        _deposit_for(\\n            _msgSender(),\\n            _msgSender(),\\n            _value,\\n            0,\\n            _locked,\\n            DepositType.INCREASE_LOCK_AMOUNT\\n        );\\n    }\\n\\n    function _increase_unlock_time(uint256 _unlock_time) private {\\n        assert_not_contract(_msgSender());\\n        require(\\n            _unlock_time >= block.timestamp + MINTIME,\\n            \\\"veC/voting-lock-can-be-30-days-min\\\"\\n        );\\n\\n        LockedBalance memory _locked = locked[_msgSender()];\\n        uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, \\\"veC/lock-expired\\\");\\n        require(_locked.amount > 0, \\\"veC/nothing-is-locked\\\");\\n        require(\\n            unlock_time > _locked.end,\\n            \\\"veC/can-only-increase-lock-duration\\\"\\n        );\\n        require(\\n            unlock_time <= block.timestamp + MAXTIME,\\n            \\\"veC/voting-lock-can-be-4-years-max\\\"\\n        );\\n\\n        _deposit_for(\\n            _msgSender(),\\n            _msgSender(),\\n            0,\\n            unlock_time,\\n            _locked,\\n            DepositType.INCREASE_UNLOCK_TIME\\n        );\\n    }\\n\\n    function _relock(uint256 _unlock_time) private {\\n        assert_not_contract(_msgSender());\\n        require(\\n            _unlock_time >= block.timestamp + MINTIME,\\n            \\\"veC/voting-lock-can-be-30-days-min\\\"\\n        );\\n\\n        LockedBalance memory _locked = locked[_msgSender()];\\n        uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(block.timestamp >= _locked.end, \\\"veC/the-lock-did-not-expire\\\");\\n        require(_locked.amount > 0, \\\"veC/nothing-is-locked\\\");\\n        require(\\n            unlock_time <= block.timestamp + MAXTIME,\\n            \\\"veC/voting-lock-can-be-4-years-max\\\"\\n        );\\n\\n        _deposit_for(\\n            _msgSender(),\\n            _msgSender(),\\n            0,\\n            unlock_time,\\n            _locked,\\n            DepositType.RELOCK\\n        );\\n    }\\n\\n    /**\\n     * @notice Record global and per-user data to checkpoint\\n     * @param addr User's wallet address. No user checkpoint if 0x0\\n     * @param old_locked Previous locked amount / end lock time for the user\\n     * @param new_locked New locked amount / end lock time for the user\\n     */\\n    function _checkpoint(\\n        address addr,\\n        LockedBalance memory old_locked,\\n        LockedBalance memory new_locked\\n    ) internal {\\n        Point memory u_old = EMPTY_POINT_FACTORY();\\n        Point memory u_new = EMPTY_POINT_FACTORY();\\n\\n        int128 old_dslope = 0;\\n        int128 new_dslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (addr != ZERO_ADDRESS) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if ((old_locked.end > block.timestamp) && (old_locked.amount > 0)) {\\n                u_old.slope = old_locked.amount / int128(int256(MAXTIME));\\n                u_old.bias =\\n                    u_old.slope *\\n                    (int128(int256(old_locked.end)) -\\n                        int128(int256(block.timestamp)));\\n            }\\n\\n            if ((new_locked.end > block.timestamp) && (new_locked.amount > 0)) {\\n                u_new.slope = new_locked.amount / int128(int256(MAXTIME));\\n                u_new.bias =\\n                    u_new.slope *\\n                    (int128(int256(new_locked.end)) -\\n                        int128(int256(block.timestamp)));\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // old_locked.end can be in the past and in the future\\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            old_dslope = slope_changes[old_locked.end];\\n            if (new_locked.end != 0) {\\n                if (new_locked.end == old_locked.end) {\\n                    new_dslope = old_dslope;\\n                } else {\\n                    new_dslope = slope_changes[new_locked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory last_point = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (_epoch > 0) {\\n            last_point = point_history[_epoch];\\n        }\\n        uint256 last_checkpoint = last_point.ts;\\n\\n        // initial_last_point is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initial_last_point = last_point;\\n        uint256 block_slope = 0; // dblock/dt\\n        if (block.timestamp > last_point.ts) {\\n            block_slope =\\n                (MULTIPLIER * (block.number - last_point.blk)) /\\n                (block.timestamp - last_point.ts);\\n        }\\n\\n        //////////////////////////////////////////////////////////////\\n        // If last point is already recorded in this block, slope=0 //\\n        // But that's ok b/c we know the block in such case         //\\n        //////////////////////////////////////////////////////////////\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 t_i = (last_checkpoint / WEEK) * WEEK;\\n        for (uint256 i = 0; i < 255; i++) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > block.timestamp) {\\n                t_i = block.timestamp;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n            last_point.bias -=\\n                last_point.slope *\\n                (int128(int256(t_i)) - int128(int256(last_checkpoint)));\\n            last_point.slope += d_slope;\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0; // This can happen\\n            }\\n            if (last_point.slope < 0) {\\n                last_point.slope = 0; // This cannot happen - just in case\\n            }\\n            last_checkpoint = t_i;\\n            last_point.ts = t_i;\\n            last_point.blk =\\n                initial_last_point.blk +\\n                (block_slope * (t_i - initial_last_point.ts)) /\\n                MULTIPLIER;\\n            _epoch += 1;\\n            if (t_i == block.timestamp) {\\n                last_point.blk = block.number;\\n                break;\\n            } else {\\n                point_history[_epoch] = last_point;\\n            }\\n        }\\n\\n        epoch = _epoch;\\n        // Now point_history is filled until t=now\\n\\n        if (addr != ZERO_ADDRESS) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            last_point.slope += (u_new.slope - u_old.slope);\\n            last_point.bias += (u_new.bias - u_old.bias);\\n            if (last_point.slope < 0) {\\n                last_point.slope = 0;\\n            }\\n            if (last_point.bias < 0) {\\n                last_point.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        point_history[_epoch] = last_point;\\n\\n        if (addr != ZERO_ADDRESS) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (old_locked.end > block.timestamp) {\\n                // old_dslope was <something> - u_old.slope, so we cancel that\\n                old_dslope += u_old.slope;\\n                if (new_locked.end == old_locked.end) {\\n                    old_dslope -= u_new.slope; // It was a new deposit, not extension\\n                }\\n                slope_changes[old_locked.end] = old_dslope;\\n            }\\n\\n            if (new_locked.end > block.timestamp) {\\n                if (new_locked.end > old_locked.end) {\\n                    new_dslope -= u_new.slope; // old slope disappeared at this point\\n                    slope_changes[new_locked.end] = new_dslope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n\\n            // Now handle user history\\n            // Second function needed for 'stack too deep' issues\\n            _checkpoint_part_two(addr, u_new.bias, u_new.slope);\\n        }\\n    }\\n\\n    /**\\n     * @notice Needed for 'stack too deep' issues in _checkpoint()\\n     * @param addr User's wallet address. No user checkpoint if 0x0\\n     * @param _bias from unew\\n     * @param _slope from unew\\n     */\\n    function _checkpoint_part_two(\\n        address addr,\\n        int128 _bias,\\n        int128 _slope\\n    ) internal {\\n        uint256 user_epoch = user_point_epoch[addr] + 1;\\n\\n        user_point_epoch[addr] = user_epoch;\\n        user_point_history[addr][user_epoch] = Point({\\n            bias: _bias,\\n            slope: _slope,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n    }\\n\\n    /**\\n     * @notice Deposit and lock tokens for a user\\n     * @param _beneficiary User's wallet address\\n     * @param _payer Address that provides the tokens to be locked\\n     * @param _value Amount to deposit\\n     * @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n     * @param locked_balance Previous locked amount / timestamp\\n     */\\n    function _deposit_for(\\n        address _beneficiary,\\n        address _payer,\\n        uint256 _value,\\n        uint256 unlock_time,\\n        LockedBalance memory locked_balance,\\n        DepositType _type\\n    ) internal {\\n        LockedBalance memory _locked = locked_balance;\\n        uint256 supply_before = supply;\\n\\n        supply = supply_before + _value;\\n        LockedBalance memory old_locked = LockedBalance({\\n            amount: _locked.amount,\\n            end: _locked.end\\n        });\\n\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        _locked.amount += int128(int256(_value));\\n        if (unlock_time != 0) {\\n            _locked.end = unlock_time;\\n        }\\n        locked[_beneficiary] = _locked;\\n\\n        // Possibilities:\\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // _locked.end > block.timestamp (always)\\n        _checkpoint(_beneficiary, old_locked, _locked);\\n\\n        if (_value != 0) {\\n            token.safeTransferFrom(_payer, address(this), _value);\\n        }\\n\\n        for (uint256 i = 0; i < numOfListeners; i++) {\\n            address listener = listeners.at(i);\\n            IVeContractListener(listener).onVotingPowerUpdated(_beneficiary);\\n        }\\n\\n        emit Deposit(\\n            _beneficiary,\\n            _payer,\\n            _value,\\n            _locked.end,\\n            _type,\\n            block.timestamp\\n        );\\n        emit Supply(supply_before, supply_before + _value);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply! //\\n    // They measure the weights for the purpose of voting, so they don't represent      //\\n    // real coins.                                                                      //\\n    //////////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Binary search to estimate timestamp for block number\\n     * @param _block Block to find\\n     * @param max_epoch Don't go beyond this epoch\\n     * @return Approximate timestamp for block\\n     */\\n    function find_block_epoch(uint256 _block, uint256 max_epoch)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = max_epoch;\\n\\n        // Will be always enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (point_history[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        return _min;\\n    }\\n\\n    /**\\n     * @notice Calculate total voting power at some point in the past\\n     * @param point The point (bias/slope) to start search from\\n     * @param t Time to calculate the total voting power at\\n     * @return Total voting power at that time\\n     */\\n    function supply_at(Point memory point, uint256 t)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Point memory last_point = Point({\\n            bias: point.bias,\\n            slope: point.slope,\\n            ts: point.ts,\\n            blk: point.blk\\n        });\\n        uint256 t_i = (last_point.ts / WEEK) * WEEK;\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            t_i += WEEK;\\n            int128 d_slope = 0;\\n            if (t_i > t) {\\n                t_i = t;\\n            } else {\\n                d_slope = slope_changes[t_i];\\n            }\\n\\n            last_point.bias -=\\n                last_point.slope *\\n                (int128(int256(t_i)) - int128(int256(last_point.ts)));\\n\\n            if (t_i == t) {\\n                break;\\n            }\\n            last_point.slope += d_slope;\\n            last_point.ts = t_i;\\n        }\\n\\n        if (last_point.bias < 0) {\\n            last_point.bias = 0;\\n        }\\n\\n        return uint256(int256(last_point.bias));\\n    }\\n\\n    /**\\n     * @notice Record global data to checkpoint\\n     */\\n    function checkpoint() external nonReentrant {\\n        _checkpoint(\\n            ZERO_ADDRESS,\\n            EMPTY_LOCKED_BALANCE_FACTORY(),\\n            EMPTY_LOCKED_BALANCE_FACTORY()\\n        );\\n    }\\n\\n    // --- Restricted Functions ---\\n    /**\\n     * @notice Set an external contract to check for approved smart contract wallets\\n     * @param _addr Address of Smart contract checker\\n     */\\n    function set_smart_wallet_checker(address _addr) external onlyAdmin {\\n        require(\\n            _addr != address(0) &&\\n                _addr.supportsInterface(\\n                    type(ISmartWalletWhitelist).interfaceId\\n                ),\\n            \\\"veC/invalid-address\\\"\\n        );\\n\\n        smart_wallet_checker = _addr;\\n\\n        emit SmartWalletCheckerSet(_addr);\\n    }\\n\\n    /**\\n     * @notice Set an external contract to help create locks\\n     * @param _addr Address of smart contract helper.\\n     */\\n    function set_create_lock_helper(address _addr) external onlyAdmin {\\n        require(_addr != address(0), \\\"veC/invalid-address\\\");\\n        require(!helperSet, \\\"veC/helper-set\\\");\\n\\n        create_lock_helper = _addr;\\n        helperSet = true;\\n\\n        emit CreateLockHelperSet(_addr);\\n    }\\n\\n    /**\\n     * @notice Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\\n     * @param tokenAddress Address of the token to recover\\n     * @param tokenAmount The amount of tokens to transfer\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        override\\n        onlyAdmin\\n    {\\n        // Admin cannot withdraw the staking token\\n        require(\\n            tokenAddress != address(token),\\n            \\\"veC/cannot-withdraw-vested-token\\\"\\n        );\\n        // Only the owner address can ever receive the recovery withdrawal\\n        IERC20 erc20Token = IERC20(tokenAddress);\\n        erc20Token.safeTransfer(_msgSender(), tokenAmount);\\n\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"}],\"name\":\"CreateLockHelperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVotingEscrow.DepositType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listner\",\"type\":\"address\"}],\"name\":\"ListenerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listner\",\"type\":\"address\"}],\"name\":\"ListenerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"checker\",\"type\":\"address\"}],\"name\":\"SmartWalletCheckerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSmartWalletCheckerOn\",\"type\":\"bool\"}],\"name\":\"SmartWalletCheckerStatusToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listener\",\"type\":\"address\"}],\"name\":\"addListener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"createLockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create_lock_helper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listenerIdx\",\"type\":\"uint256\"}],\"name\":\"getListenerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfListeners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_bias\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_vestingTime\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helperSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increaseAmountAndUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSmartWalletCheckerOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfListeners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listenerIdx\",\"type\":\"uint256\"}],\"name\":\"removeListenerAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdminship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"set_create_lock_helper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"set_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSmartWalletCheckerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VotingEscrow", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc9fa9771145fbb98d15c8c2cc94b837a56d554c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b7665536c696e6773686f7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077665534c494e4700000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}