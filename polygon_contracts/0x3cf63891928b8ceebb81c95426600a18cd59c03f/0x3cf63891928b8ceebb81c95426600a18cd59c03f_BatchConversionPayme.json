{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/BatchConversionPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IERC20ConversionProxy.sol';\\nimport './interfaces/IEthConversionProxy.sol';\\nimport './BatchNoConversionPayments.sol';\\n\\n/**\\n * @title BatchConversionPayments\\n * @notice This contract makes multiple conversion payments with references, in one transaction:\\n *          - on:\\n *              - ERC20 tokens: using Erc20ConversionProxy and ERC20FeeProxy\\n *              - Native tokens: (e.g. ETH) using EthConversionProxy and EthereumFeeProxy\\n *          - to: multiple addresses\\n *          - fees: conversion proxy fees and additional batch conversion fees are paid to the same address.\\n *         batchPayments is the main function to batch all kinds of payments at once.\\n *         If one transaction of the batch fails, all transactions are reverted.\\n * @dev batchPayments is the main function, but other batch payment functions are \\\"public\\\" in order to do\\n *      gas optimization in some cases.\\n */\\ncontract BatchConversionPayments is BatchNoConversionPayments {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20ConversionProxy public paymentErc20ConversionProxy;\\n  IEthConversionProxy public paymentNativeConversionProxy;\\n\\n  /** payerAuthorized is set to true to workaround the non-payable aspect in batch native conversion */\\n  bool private payerAuthorized = false;\\n\\n  /**\\n   * @dev Used by the batchPayments to handle information for heterogeneous batches, grouped by payment network:\\n   *  - paymentNetworkId: from 0 to 4, cf. `batchPayments()` method\\n   *  - requestDetails all the data required for conversion and no conversion requests to be paid\\n   */\\n  struct MetaDetail {\\n    uint256 paymentNetworkId;\\n    RequestDetail[] requestDetails;\\n  }\\n\\n  /**\\n   * @param _paymentErc20Proxy The ERC20 payment proxy address to use.\\n   * @param _paymentNativeProxy The native payment proxy address to use.\\n   * @param _paymentErc20ConversionProxy The ERC20 Conversion payment proxy address to use.\\n   * @param _paymentNativeConversionFeeProxy The native Conversion payment proxy address to use.\\n   * @param _chainlinkConversionPath The address of the conversion path contract.\\n   * @param _owner Owner of the contract.\\n   */\\n  constructor(\\n    address _paymentErc20Proxy,\\n    address _paymentNativeProxy,\\n    address _paymentErc20ConversionProxy,\\n    address _paymentNativeConversionFeeProxy,\\n    address _chainlinkConversionPath,\\n    address _owner\\n  )\\n    BatchNoConversionPayments(\\n      _paymentErc20Proxy,\\n      _paymentNativeProxy,\\n      _chainlinkConversionPath,\\n      _owner\\n    )\\n  {\\n    paymentErc20ConversionProxy = IERC20ConversionProxy(_paymentErc20ConversionProxy);\\n    paymentNativeConversionProxy = IEthConversionProxy(_paymentNativeConversionFeeProxy);\\n  }\\n\\n  /**\\n   * This contract is non-payable.\\n   * Making a Native payment with conversion requires the contract to accept incoming Native tokens.\\n   * @dev See the end of `paymentNativeConversionProxy.transferWithReferenceAndFee` where the leftover is given back.\\n   */\\n  receive() external payable override {\\n    require(payerAuthorized || msg.value == 0, 'Non-payable');\\n  }\\n\\n  /**\\n   * @notice Batch payments on different payment networks at once.\\n   * @param metaDetails contains paymentNetworkId and requestDetails\\n   * - batchMultiERC20ConversionPayments, paymentNetworkId=0\\n   * - batchERC20Payments, paymentNetworkId=1\\n   * - batchMultiERC20Payments, paymentNetworkId=2\\n   * - batchNativePayments, paymentNetworkId=3\\n   * - batchNativeConversionPayments, paymentNetworkId=4\\n   * If metaDetails use paymentNetworkId = 4, it must be at the end of the list, or the transaction can be reverted.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   For batch native, mock an array of array to apply the limit, e.g: [[]]\\n   *                   Without paths, there is not limitation, neither for the batch native functions.\\n   * @param feeAddress The address where fees should be paid.\\n   * @dev Use pathsToUSD only if you are pretty sure the batch fees will higher than the\\n   *      USD limit batchFeeAmountUSDLimit, because it increase gas consumption.\\n   *      batchPayments only reduces gas consumption when using more than a single payment network.\\n   *      For single payment network payments, it is more efficient to use the suited batch function.\\n   */\\n  function batchPayments(\\n    MetaDetail[] calldata metaDetails,\\n    address[][] calldata pathsToUSD,\\n    address feeAddress\\n  ) external payable {\\n    require(metaDetails.length < 6, 'more than 5 metaDetails');\\n\\n    uint256 batchFeeAmountUSD = 0;\\n    for (uint256 i = 0; i < metaDetails.length; i++) {\\n      MetaDetail calldata metaDetail = metaDetails[i];\\n      if (metaDetail.paymentNetworkId == 0) {\\n        batchFeeAmountUSD += _batchMultiERC20ConversionPayments(\\n          metaDetail.requestDetails,\\n          batchFeeAmountUSD,\\n          pathsToUSD,\\n          feeAddress\\n        );\\n      } else if (metaDetail.paymentNetworkId == 1) {\\n        batchFeeAmountUSD += _batchERC20Payments(\\n          metaDetail.requestDetails,\\n          pathsToUSD,\\n          batchFeeAmountUSD,\\n          payable(feeAddress)\\n        );\\n      } else if (metaDetail.paymentNetworkId == 2) {\\n        batchFeeAmountUSD += _batchMultiERC20Payments(\\n          metaDetail.requestDetails,\\n          pathsToUSD,\\n          batchFeeAmountUSD,\\n          feeAddress\\n        );\\n      } else if (metaDetail.paymentNetworkId == 3) {\\n        if (metaDetails[metaDetails.length - 1].paymentNetworkId == 4) {\\n          // Set to false only if batchNativeConversionPayments is called after this function\\n          transferBackRemainingNativeTokens = false;\\n        }\\n        batchFeeAmountUSD += _batchNativePayments(\\n          metaDetail.requestDetails,\\n          pathsToUSD.length == 0,\\n          batchFeeAmountUSD,\\n          payable(feeAddress)\\n        );\\n        if (metaDetails[metaDetails.length - 1].paymentNetworkId == 4) {\\n          transferBackRemainingNativeTokens = true;\\n        }\\n      } else if (metaDetail.paymentNetworkId == 4) {\\n        batchFeeAmountUSD += _batchNativeConversionPayments(\\n          metaDetail.requestDetails,\\n          pathsToUSD.length == 0,\\n          batchFeeAmountUSD,\\n          payable(feeAddress)\\n        );\\n      } else {\\n        revert('Wrong paymentNetworkId');\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with amounts based on a request\\n   * currency (e.g. fiat), with fees and paymentReferences to multiple accounts, with multiple tokens.\\n   * @param requestDetails List of ERC20 requests denominated in fiat to pay.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param feeAddress The fee recipient.\\n   */\\n  function batchMultiERC20ConversionPayments(\\n    RequestDetail[] calldata requestDetails,\\n    address[][] calldata pathsToUSD,\\n    address feeAddress\\n  ) public returns (uint256) {\\n    return _batchMultiERC20ConversionPayments(requestDetails, 0, pathsToUSD, feeAddress);\\n  }\\n\\n  /**\\n   * @notice Send a batch of Native conversion payments with fees and paymentReferences to multiple accounts.\\n   *         If one payment fails, the whole batch is reverted.\\n   * @param requestDetails List of native requests denominated in fiat to pay.\\n   * @param skipFeeUSDLimit Setting the value to true skips the USD fee limit, and reduces gas consumption.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses NativeConversionProxy (EthereumConversionProxy) to pay an invoice and fees.\\n   *      Please:\\n   *        Note that if there is not enough Native token attached to the function call,\\n   *        the following error is thrown: \\\"revert paymentProxy transferExactEthWithReferenceAndFee failed\\\"\\n   */\\n  function batchNativeConversionPayments(\\n    RequestDetail[] calldata requestDetails,\\n    bool skipFeeUSDLimit,\\n    address payable feeAddress\\n  ) public payable returns (uint256) {\\n    return _batchNativeConversionPayments(requestDetails, skipFeeUSDLimit, 0, feeAddress);\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with amounts based on a request\\n   * currency (e.g. fiat), with fees and paymentReferences to multiple accounts, with multiple tokens.\\n   * @param requestDetails List of ERC20 requests denominated in fiat to pay.\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param feeAddress The fee recipient.\\n   */\\n  function _batchMultiERC20ConversionPayments(\\n    RequestDetail[] calldata requestDetails,\\n    uint256 batchFeeAmountUSD,\\n    address[][] calldata pathsToUSD,\\n    address feeAddress\\n  ) private returns (uint256) {\\n    Token[] memory uTokens = getUTokens(requestDetails);\\n\\n    IERC20 requestedToken;\\n    // For each token: check allowance, transfer funds on the contract and approve the paymentProxy to spend if needed\\n    for (uint256 k = 0; k < uTokens.length && uTokens[k].amountAndFee > 0; k++) {\\n      uTokens[k].batchFeeAmount = (uTokens[k].amountAndFee * batchFee) / feeDenominator;\\n      requestedToken = IERC20(uTokens[k].tokenAddress);\\n      transferToContract(\\n        requestedToken,\\n        uTokens[k].amountAndFee,\\n        uTokens[k].batchFeeAmount,\\n        address(paymentErc20ConversionProxy)\\n      );\\n    }\\n\\n    // Batch pays the requests using Erc20ConversionFeeProxy\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      RequestDetail calldata rD = requestDetails[i];\\n      paymentErc20ConversionProxy.transferFromWithReferenceAndFee(\\n        rD.recipient,\\n        rD.requestAmount,\\n        rD.path,\\n        rD.paymentReference,\\n        rD.feeAmount,\\n        feeAddress,\\n        rD.maxToSpend,\\n        rD.maxRateTimespan\\n      );\\n    }\\n\\n    // Batch sends back to the payer the tokens not spent and pays the batch fee\\n    for (uint256 k = 0; k < uTokens.length && uTokens[k].amountAndFee > 0; k++) {\\n      requestedToken = IERC20(uTokens[k].tokenAddress);\\n\\n      // Batch sends back to the payer the tokens not spent = excessAmount\\n      // excessAmount = maxToSpend - reallySpent, which is equal to the remaining tokens on the contract\\n      uint256 excessAmount = requestedToken.balanceOf(address(this));\\n      if (excessAmount > 0) {\\n        requestedToken.safeTransfer(msg.sender, excessAmount);\\n      }\\n\\n      // Calculate batch fee to pay\\n      uint256 batchFeeToPay = ((uTokens[k].amountAndFee - excessAmount) * batchFee) /\\n        feeDenominator;\\n\\n      (batchFeeToPay, batchFeeAmountUSD) = calculateBatchFeeToPay(\\n        batchFeeToPay,\\n        uTokens[k].tokenAddress,\\n        batchFeeAmountUSD,\\n        pathsToUSD\\n      );\\n\\n      // Payer pays the exact batch fees amount\\n      require(\\n        safeTransferFrom(uTokens[k].tokenAddress, feeAddress, batchFeeToPay),\\n        'Batch fee transferFrom() failed'\\n      );\\n    }\\n    return batchFeeAmountUSD;\\n  }\\n\\n  /**\\n   * @notice Send a batch of Native conversion payments with fees and paymentReferences to multiple accounts.\\n   *         If one payment fails, the whole batch is reverted.\\n   * @param requestDetails List of native requests denominated in fiat to pay.\\n   * @param skipFeeUSDLimit Setting the value to true skips the USD fee limit, and reduces gas consumption.\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses NativeConversionProxy (EthereumConversionProxy) to pay an invoice and fees.\\n   *      Please:\\n   *        Note that if there is not enough Native token attached to the function call,\\n   *        the following error is thrown: \\\"revert paymentProxy transferExactEthWithReferenceAndFee failed\\\"\\n   */\\n  function _batchNativeConversionPayments(\\n    RequestDetail[] calldata requestDetails,\\n    bool skipFeeUSDLimit,\\n    uint256 batchFeeAmountUSD,\\n    address payable feeAddress\\n  ) private returns (uint256) {\\n    uint256 contractBalance = address(this).balance;\\n    payerAuthorized = true;\\n\\n    // Batch contract pays the requests through nativeConversionProxy\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      RequestDetail calldata rD = requestDetails[i];\\n      paymentNativeConversionProxy.transferWithReferenceAndFee{value: address(this).balance}(\\n        payable(rD.recipient),\\n        rD.requestAmount,\\n        rD.path,\\n        rD.paymentReference,\\n        rD.feeAmount,\\n        feeAddress,\\n        rD.maxRateTimespan\\n      );\\n    }\\n\\n    // Batch contract pays batch fee\\n    uint256 batchFeeToPay = (((contractBalance - address(this).balance)) * batchFee) /\\n      feeDenominator;\\n\\n    if (skipFeeUSDLimit == false) {\\n      (batchFeeToPay, batchFeeAmountUSD) = calculateBatchFeeToPay(\\n        batchFeeToPay,\\n        pathsNativeToUSD[0][0],\\n        batchFeeAmountUSD,\\n        pathsNativeToUSD\\n      );\\n    }\\n\\n    require(address(this).balance >= batchFeeToPay, 'Not enough funds for batch conversion fees');\\n    feeAddress.transfer(batchFeeToPay);\\n\\n    // Batch contract transfers the remaining native tokens to the payer\\n    (bool sendBackSuccess, ) = payable(msg.sender).call{value: address(this).balance}('');\\n    require(sendBackSuccess, 'Could not send remaining funds to the payer');\\n    payerAuthorized = false;\\n\\n    return batchFeeAmountUSD;\\n  }\\n\\n  /*\\n   * Admin functions to edit the conversion proxies address and fees.\\n   */\\n\\n  /**\\n   * @param _paymentErc20ConversionProxy The address of the ERC20 Conversion payment proxy to use.\\n   *        Update cautiously, the proxy has to match the invoice proxy.\\n   */\\n  function setPaymentErc20ConversionProxy(address _paymentErc20ConversionProxy) external onlyOwner {\\n    paymentErc20ConversionProxy = IERC20ConversionProxy(_paymentErc20ConversionProxy);\\n  }\\n\\n  /**\\n   * @param _paymentNativeConversionProxy The address of the native Conversion payment proxy to use.\\n   *        Update cautiously, the proxy has to match the invoice proxy.\\n   */\\n  function setPaymentNativeConversionProxy(address _paymentNativeConversionProxy)\\n    external\\n    onlyOwner\\n  {\\n    paymentNativeConversionProxy = IEthConversionProxy(_paymentNativeConversionProxy);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IERC20ConversionProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20ConversionProxy {\\n  // Event to declare a conversion with a reference\\n  event TransferWithConversionAndReference(\\n    uint256 amount,\\n    address currency,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    uint256 maxRateTimespan\\n  );\\n\\n  // Event to declare a transfer with a reference\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  function transferFromWithReferenceAndFee(\\n    address _to,\\n    uint256 _requestAmount,\\n    address[] calldata _path,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress,\\n    uint256 _maxToSpend,\\n    uint256 _maxRateTimespan\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IEthConversionProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IEthConversionProxy\\n * @notice This contract converts from chainlink then swaps ETH (or native token)\\n *         before paying a request thanks to a conversion payment proxy.\\n *         The inheritance from ReentrancyGuard is required to perform\\n *         \\\"transferExactEthWithReferenceAndFee\\\" on the eth-fee-proxy contract\\n */\\ninterface IEthConversionProxy {\\n  // Event to declare a conversion with a reference\\n  event TransferWithConversionAndReference(\\n    uint256 amount,\\n    address currency,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    uint256 maxRateTimespan\\n  );\\n\\n  // Event to declare a transfer with a reference\\n  // This event is emitted by this contract from a delegate call of the payment-proxy\\n  event TransferWithReferenceAndFee(\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  /**\\n   * @notice Performs an ETH transfer with a reference computing the payment amount based on the request amount\\n   * @param _to Transfer recipient of the payement\\n   * @param _requestAmount Request amount\\n   * @param _path Conversion path\\n   * @param _paymentReference Reference of the payment related\\n   * @param _feeAmount The amount of the payment fee\\n   * @param _feeAddress The fee recipient\\n   * @param _maxRateTimespan Max time span with the oldestrate, ignored if zero\\n   */\\n  function transferWithReferenceAndFee(\\n    address _to,\\n    uint256 _requestAmount,\\n    address[] calldata _path,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress,\\n    uint256 _maxRateTimespan\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/contracts/BatchNoConversionPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './lib/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/ERC20FeeProxy.sol';\\nimport './interfaces/EthereumFeeProxy.sol';\\nimport './ChainlinkConversionPath.sol';\\n\\n/**\\n * @title BatchNoConversionPayments\\n * @notice  This contract makes multiple payments with references, in one transaction:\\n *          - on: ERC20 Payment Proxy and Native (ETH) Payment Proxy of the Request Network protocol\\n *          - to: multiple addresses\\n *          - fees: ERC20 and Native (ETH) proxies fees are paid to the same address\\n *                  An additional batch fee is paid to the same address\\n *         If one transaction of the batch fail, every transactions are reverted.\\n * @dev It is a clone of BatchPayment.sol, with three main modifications:\\n *         - function \\\"receive\\\" has one other condition: payerAuthorized\\n *         - fees are now divided by 10_000 instead of 1_000 in previous version\\n *         - batch payment functions have new names and are now public, instead of external\\n */\\ncontract BatchNoConversionPayments is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20FeeProxy public paymentErc20Proxy;\\n  IEthereumFeeProxy public paymentNativeProxy;\\n  ChainlinkConversionPath public chainlinkConversionPath;\\n\\n  /** Used to calculate batch fees: batchFee = 30 represent 0.30% of fee */\\n  uint16 public batchFee;\\n  /** Used to calculate batch fees: divide batchFee by feeDenominator */\\n  uint16 internal feeDenominator = 10000;\\n  /** The amount of the batch fee cannot exceed a predefined amount in USD, e.g:\\n      batchFeeAmountUSDLimit = 150 * 1e8 represents $150 */\\n  uint64 public batchFeeAmountUSDLimit;\\n\\n  /** transferBackRemainingNativeTokens is set to false only if the payer use batchPayments\\n  and call both batchNativePayments and batchNativeConversionPayments */\\n  bool internal transferBackRemainingNativeTokens = true;\\n\\n  address public USDAddress;\\n  address public NativeAddress;\\n  address[][] public pathsNativeToUSD;\\n\\n  /** Contains the address of a token, the sum of the amount and fees paid with it, and the batch fee amount */\\n  struct Token {\\n    address tokenAddress;\\n    uint256 amountAndFee;\\n    uint256 batchFeeAmount;\\n  }\\n\\n  /**\\n   * @dev All the information of a request, except the feeAddress\\n   *   recipient: Recipient address of the payment\\n   *   requestAmount: Request amount, in fiat for conversion payment\\n   *   path: Only for conversion payment: the conversion path\\n   *   paymentReference: Unique reference of the payment\\n   *   feeAmount: The fee amount, denominated in the first currency of `path` for conversion payment\\n   *   maxToSpend: Only for conversion payment:\\n   *               Maximum amount the payer wants to spend, denominated in the last currency of `path`:\\n   *                it includes fee proxy but NOT the batch fees to pay\\n   *   maxRateTimespan: Only for conversion payment:\\n   *                    Max acceptable times span for conversion rates, ignored if zero\\n   */\\n  struct RequestDetail {\\n    address recipient;\\n    uint256 requestAmount;\\n    address[] path;\\n    bytes paymentReference;\\n    uint256 feeAmount;\\n    uint256 maxToSpend;\\n    uint256 maxRateTimespan;\\n  }\\n\\n  /**\\n   * @param _paymentErc20Proxy The address to the ERC20 fee payment proxy to use.\\n   * @param _paymentNativeProxy The address to the Native fee payment proxy to use.\\n   * @param _chainlinkConversionPath The address of the conversion path contract.\\n   * @param _owner Owner of the contract.\\n   */\\n  constructor(\\n    address _paymentErc20Proxy,\\n    address _paymentNativeProxy,\\n    address _chainlinkConversionPath,\\n    address _owner\\n  ) {\\n    paymentErc20Proxy = IERC20FeeProxy(_paymentErc20Proxy);\\n    paymentNativeProxy = IEthereumFeeProxy(_paymentNativeProxy);\\n    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPath);\\n    transferOwnership(_owner);\\n    batchFee = 0;\\n  }\\n\\n  /**\\n   * This contract is non-payable.\\n   * @dev See the end of `paymentNativeProxy.transferWithReferenceAndFee` where the leftover is given back.\\n   */\\n  receive() external payable virtual {\\n    require(msg.value == 0, 'Non-payable');\\n  }\\n\\n  /**\\n   * @notice Send a batch of Native token payments with fees and paymentReferences to multiple accounts.\\n   *         If one payment fails, the whole batch reverts.\\n   * @param requestDetails List of Native tokens requests to pay.\\n   * @param skipFeeUSDLimit Setting the value to true skips the USD fee limit, and reduces gas consumption.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses NativeFeeProxy (EthereumFeeProxy) to pay an invoice and fees with a payment reference.\\n   *      Make sure: msg.value >= sum(_amouts)+sum(_feeAmounts)+sumBatchFeeAmount\\n   */\\n  function batchNativePayments(\\n    RequestDetail[] calldata requestDetails,\\n    bool skipFeeUSDLimit,\\n    address payable feeAddress\\n  ) public payable returns (uint256) {\\n    return _batchNativePayments(requestDetails, skipFeeUSDLimit, 0, payable(feeAddress));\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with fees and paymentReferences to multiple accounts.\\n   * @param requestDetails List of ERC20 requests to pay, with only one ERC20 token.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param feeAddress The fee recipient.\\n   * @dev Uses ERC20FeeProxy to pay an invoice and fees, with a payment reference.\\n   *      Make sure this contract has enough allowance to spend the payer's token.\\n   *      Make sure the payer has enough tokens to pay the amount, the fee, and the batch fee.\\n   */\\n  function batchERC20Payments(\\n    RequestDetail[] calldata requestDetails,\\n    address[][] calldata pathsToUSD,\\n    address feeAddress\\n  ) public returns (uint256) {\\n    return _batchERC20Payments(requestDetails, pathsToUSD, 0, feeAddress);\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with fees and paymentReferences to multiple accounts, with multiple tokens.\\n   * @param requestDetails List of ERC20 requests to pay.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses ERC20FeeProxy to pay an invoice and fees, with a payment reference.\\n   *      Make sure this contract has enough allowance to spend the payer's token.\\n   *      Make sure the payer has enough tokens to pay the amount, the fee, and the batch fee.\\n   */\\n  function batchMultiERC20Payments(\\n    RequestDetail[] calldata requestDetails,\\n    address[][] calldata pathsToUSD,\\n    address feeAddress\\n  ) public returns (uint256) {\\n    return _batchMultiERC20Payments(requestDetails, pathsToUSD, 0, feeAddress);\\n  }\\n\\n  /**\\n   * @notice Send a batch of Native token payments with fees and paymentReferences to multiple accounts.\\n   *         If one payment fails, the whole batch reverts.\\n   * @param requestDetails List of Native tokens requests to pay.\\n   * @param skipFeeUSDLimit Setting the value to true skips the USD fee limit, and reduces gas consumption.\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses NativeFeeProxy (EthereumFeeProxy) to pay an invoice and fees with a payment reference.\\n   *      Make sure: msg.value >= sum(_amouts)+sum(_feeAmounts)+sumBatchFeeAmount\\n   */\\n  function _batchNativePayments(\\n    RequestDetail[] calldata requestDetails,\\n    bool skipFeeUSDLimit,\\n    uint256 batchFeeAmountUSD,\\n    address payable feeAddress\\n  ) internal returns (uint256) {\\n    // amount is used to get the total amount and then used as batch fee amount\\n    uint256 amount = 0;\\n\\n    // Batch contract pays the requests thourgh NativeFeeProxy (EthFeeProxy)\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      RequestDetail calldata rD = requestDetails[i];\\n      require(address(this).balance >= rD.requestAmount + rD.feeAmount, 'Not enough funds');\\n      amount += rD.requestAmount;\\n\\n      paymentNativeProxy.transferWithReferenceAndFee{value: rD.requestAmount + rD.feeAmount}(\\n        payable(rD.recipient),\\n        rD.paymentReference,\\n        rD.feeAmount,\\n        payable(feeAddress)\\n      );\\n    }\\n\\n    // amount is updated into batch fee amount\\n    amount = (amount * batchFee) / feeDenominator;\\n    if (skipFeeUSDLimit == false) {\\n      (amount, batchFeeAmountUSD) = calculateBatchFeeToPay(\\n        amount,\\n        pathsNativeToUSD[0][0],\\n        batchFeeAmountUSD,\\n        pathsNativeToUSD\\n      );\\n    }\\n    // Check that batch contract has enough funds to pay batch fee\\n    require(address(this).balance >= amount, 'Not enough funds for batch fee');\\n    // Batch pays batch fee\\n    feeAddress.transfer(amount);\\n\\n    // Batch contract transfers the remaining Native tokens to the payer\\n    if (transferBackRemainingNativeTokens && address(this).balance > 0) {\\n      (bool sendBackSuccess, ) = payable(msg.sender).call{value: address(this).balance}('');\\n      require(sendBackSuccess, 'Could not send remaining funds to the payer');\\n    }\\n    return batchFeeAmountUSD;\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with fees and paymentReferences to multiple accounts.\\n   * @param requestDetails List of ERC20 requests to pay, with only one ERC20 token.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param feeAddress The fee recipient.\\n   * @dev Uses ERC20FeeProxy to pay an invoice and fees, with a payment reference.\\n   *      Make sure this contract has enough allowance to spend the payer's token.\\n   *      Make sure the payer has enough tokens to pay the amount, the fee, and the batch fee.\\n   */\\n  function _batchERC20Payments(\\n    RequestDetail[] calldata requestDetails,\\n    address[][] calldata pathsToUSD,\\n    uint256 batchFeeAmountUSD,\\n    address feeAddress\\n  ) internal returns (uint256) {\\n    uint256 amountAndFee = 0;\\n    uint256 batchFeeAmount = 0;\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      amountAndFee += requestDetails[i].requestAmount + requestDetails[i].feeAmount;\\n      batchFeeAmount += requestDetails[i].requestAmount;\\n    }\\n    batchFeeAmount = (batchFeeAmount * batchFee) / feeDenominator;\\n\\n    // batchFeeToPay and batchFeeAmountUSD are updated if needed\\n    (batchFeeAmount, batchFeeAmountUSD) = calculateBatchFeeToPay(\\n      batchFeeAmount,\\n      requestDetails[0].path[0],\\n      batchFeeAmountUSD,\\n      pathsToUSD\\n    );\\n\\n    IERC20 requestedToken = IERC20(requestDetails[0].path[0]);\\n\\n    transferToContract(requestedToken, amountAndFee, batchFeeAmount, address(paymentErc20Proxy));\\n\\n    // Payer pays batch fee amount\\n    require(\\n      safeTransferFrom(requestDetails[0].path[0], feeAddress, batchFeeAmount),\\n      'Batch fee transferFrom() failed'\\n    );\\n\\n    // Batch contract pays the requests using Erc20FeeProxy\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      RequestDetail calldata rD = requestDetails[i];\\n      paymentErc20Proxy.transferFromWithReferenceAndFee(\\n        rD.path[0],\\n        rD.recipient,\\n        rD.requestAmount,\\n        rD.paymentReference,\\n        rD.feeAmount,\\n        feeAddress\\n      );\\n    }\\n\\n    return batchFeeAmountUSD;\\n  }\\n\\n  /**\\n   * @notice Send a batch of ERC20 payments with fees and paymentReferences to multiple accounts, with multiple tokens.\\n   * @param requestDetails List of ERC20 requests to pay.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param feeAddress The fee recipient.\\n   * @dev It uses ERC20FeeProxy to pay an invoice and fees, with a payment reference.\\n   *      Make sure this contract has enough allowance to spend the payer's token.\\n   *      Make sure the payer has enough tokens to pay the amount, the fee, and the batch fee.\\n   */\\n  function _batchMultiERC20Payments(\\n    RequestDetail[] calldata requestDetails,\\n    address[][] calldata pathsToUSD,\\n    uint256 batchFeeAmountUSD,\\n    address feeAddress\\n  ) internal returns (uint256) {\\n    Token[] memory uTokens = getUTokens(requestDetails);\\n\\n    // The payer transfers tokens to the batch contract and pays batch fee\\n    for (uint256 i = 0; i < uTokens.length && uTokens[i].amountAndFee > 0; i++) {\\n      uTokens[i].batchFeeAmount = (uTokens[i].batchFeeAmount * batchFee) / feeDenominator;\\n      IERC20 requestedToken = IERC20(uTokens[i].tokenAddress);\\n      transferToContract(\\n        requestedToken,\\n        uTokens[i].amountAndFee,\\n        uTokens[i].batchFeeAmount,\\n        address(paymentErc20Proxy)\\n      );\\n\\n      // Payer pays batch fee amount\\n\\n      uint256 batchFeeToPay = uTokens[i].batchFeeAmount;\\n\\n      (batchFeeToPay, batchFeeAmountUSD) = calculateBatchFeeToPay(\\n        batchFeeToPay,\\n        uTokens[i].tokenAddress,\\n        batchFeeAmountUSD,\\n        pathsToUSD\\n      );\\n\\n      require(\\n        safeTransferFrom(uTokens[i].tokenAddress, feeAddress, batchFeeToPay),\\n        'Batch fee transferFrom() failed'\\n      );\\n    }\\n\\n    // Batch contract pays the requests using Erc20FeeProxy\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      RequestDetail calldata rD = requestDetails[i];\\n      paymentErc20Proxy.transferFromWithReferenceAndFee(\\n        rD.path[0],\\n        rD.recipient,\\n        rD.requestAmount,\\n        rD.paymentReference,\\n        rD.feeAmount,\\n        feeAddress\\n      );\\n    }\\n    return batchFeeAmountUSD;\\n  }\\n\\n  /*\\n   * Helper functions\\n   */\\n\\n  /**\\n   * Top up the contract with enough `requestedToken` to pay `amountAndFee`.\\n   * The contract is NOT topped-up for `batchFeeAmount`.\\n   *\\n   * It also performs a few checks:\\n   * - checks that the batch contract has enough allowance from the payer\\n   * - checks that the payer has enough funds, including batch fees\\n   * - increases the allowance of the contract to use the payment proxy if needed\\n   *\\n   * @param requestedToken The token to pay\\n   * @param amountAndFee The amount and the fee for a token to pay\\n   * @param batchFeeAmount The batch fee amount for a token to pay\\n   * @param paymentProxyAddress The payment proxy address used to pay\\n   */\\n  function transferToContract(\\n    IERC20 requestedToken,\\n    uint256 amountAndFee,\\n    uint256 batchFeeAmount,\\n    address paymentProxyAddress\\n  ) internal {\\n    // Check proxy's allowance from user\\n    require(\\n      requestedToken.allowance(msg.sender, address(this)) >= amountAndFee,\\n      'Insufficient allowance for batch to pay'\\n    );\\n    // Check user's funds to pay amounts, it is an approximation for conversion payment\\n    require(\\n      requestedToken.balanceOf(msg.sender) >= amountAndFee + batchFeeAmount,\\n      'Not enough funds, including fees'\\n    );\\n\\n    // Transfer the amount and fees (no batch fees) required for the token on the batch contract\\n    require(\\n      safeTransferFrom(address(requestedToken), address(this), amountAndFee),\\n      'payment transferFrom() failed'\\n    );\\n\\n    // Batch contract approves Erc20ConversionProxy to spend the token\\n    if (requestedToken.allowance(address(this), paymentProxyAddress) < amountAndFee) {\\n      approvePaymentProxyToSpend(address(requestedToken), paymentProxyAddress);\\n    }\\n  }\\n\\n  /**\\n   * It create a list of unique tokens used and the amounts associated.\\n   * It only considers tokens having: requestAmount + feeAmount > 0.\\n   * Regarding ERC20 no conversion payments:\\n   *   batchFeeAmount is the sum of requestAmount and feeAmount.\\n   *   Out of the function, batch fee rate is applied\\n   * @param requestDetails List of requests to pay.\\n   */\\n  function getUTokens(RequestDetail[] calldata requestDetails)\\n    internal\\n    pure\\n    returns (Token[] memory uTokens)\\n  {\\n    // A list of unique tokens, with the sum of maxToSpend by token\\n    uTokens = new Token[](requestDetails.length);\\n    for (uint256 i = 0; i < requestDetails.length; i++) {\\n      for (uint256 k = 0; k < requestDetails.length; k++) {\\n        RequestDetail calldata rD = requestDetails[i];\\n        // If the token is already in the existing uTokens list\\n        if (uTokens[k].tokenAddress == rD.path[rD.path.length - 1]) {\\n          if (rD.path.length > 1) {\\n            uTokens[k].amountAndFee += rD.maxToSpend;\\n          } else {\\n            // It is not a conversion payment\\n            uTokens[k].amountAndFee += rD.requestAmount + rD.feeAmount;\\n            uTokens[k].batchFeeAmount += rD.requestAmount;\\n          }\\n          break;\\n        }\\n        // If the token is not in the list (amountAndFee = 0)\\n        else if (\\n          uTokens[k].amountAndFee == 0 && (rD.maxToSpend > 0 || rD.requestAmount + rD.feeAmount > 0)\\n        ) {\\n          uTokens[k].tokenAddress = rD.path[rD.path.length - 1];\\n\\n          if (rD.path.length > 1) {\\n            // amountAndFee is used to store _maxToSpend, useful to send enough tokens to this contract\\n            uTokens[k].amountAndFee = rD.maxToSpend;\\n          } else {\\n            // It is not a conversion payment\\n            uTokens[k].amountAndFee = rD.requestAmount + rD.feeAmount;\\n            uTokens[k].batchFeeAmount = rD.requestAmount;\\n          }\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate the batch fee amount to pay, using the USD fee limitation.\\n   * Without pathsToUSD or a wrong one, the fee limitation is not applied.\\n   * @param batchFeeToPay The amount of batch fee to pay\\n   * @param tokenAddress The address of the token\\n   * @param batchFeeAmountUSD The batch fee amount in USD already paid.\\n   * @param pathsToUSD The list of paths into USD for every token, used to limit the batch fees.\\n   *                   Without paths, there is not a fee limitation, and it consumes less gas.\\n   */\\n  function calculateBatchFeeToPay(\\n    uint256 batchFeeToPay,\\n    address tokenAddress,\\n    uint256 batchFeeAmountUSD,\\n    address[][] memory pathsToUSD\\n  ) internal view returns (uint256, uint256) {\\n    // Fees are not limited if there is no pathsToUSD\\n    // Excepted if batchFeeAmountUSD is already >= batchFeeAmountUSDLimit\\n    if (pathsToUSD.length == 0 && batchFeeAmountUSD < batchFeeAmountUSDLimit) {\\n      return (batchFeeToPay, batchFeeAmountUSD);\\n    }\\n\\n    // Apply the fee limit and calculate if needed batchFeeToPay\\n    if (batchFeeAmountUSD < batchFeeAmountUSDLimit) {\\n      for (uint256 i = 0; i < pathsToUSD.length; i++) {\\n        // Check if the pathToUSD is right\\n        if (\\n          pathsToUSD[i][0] == tokenAddress && pathsToUSD[i][pathsToUSD[i].length - 1] == USDAddress\\n        ) {\\n          (uint256 conversionUSD, ) = chainlinkConversionPath.getConversion(\\n            batchFeeToPay,\\n            pathsToUSD[i]\\n          );\\n          // Calculate the batch fee to pay, taking care of the batchFeeAmountUSDLimit\\n          uint256 conversionToPayUSD = conversionUSD;\\n          if (batchFeeAmountUSD + conversionToPayUSD > batchFeeAmountUSDLimit) {\\n            conversionToPayUSD = batchFeeAmountUSDLimit - batchFeeAmountUSD;\\n            batchFeeToPay = (batchFeeToPay * conversionToPayUSD) / conversionUSD;\\n          }\\n          batchFeeAmountUSD += conversionToPayUSD;\\n          // Add only once the fees\\n          break;\\n        }\\n      }\\n    } else {\\n      batchFeeToPay = 0;\\n    }\\n    return (batchFeeToPay, batchFeeAmountUSD);\\n  }\\n\\n  /**\\n   * @notice Authorizes the proxy to spend a new request currency (ERC20).\\n   * @param _erc20Address Address of an ERC20 used as the request currency.\\n   * @param _paymentErc20Proxy Address of the proxy.\\n   */\\n  function approvePaymentProxyToSpend(address _erc20Address, address _paymentErc20Proxy) internal {\\n    IERC20 erc20 = IERC20(_erc20Address);\\n    uint256 max = 2**256 - 1;\\n    erc20.safeApprove(address(_paymentErc20Proxy), max);\\n  }\\n\\n  /**\\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransferFrom(\\n    address _tokenAddress,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    /* solium-disable security/no-inline-assembly */\\n    // check if the address is a contract\\n    assembly {\\n      if iszero(extcodesize(_tokenAddress)) {\\n        revert(0, 0)\\n      }\\n    }\\n\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, ) = _tokenAddress.call(\\n      abi.encodeWithSignature('transferFrom(address,address,uint256)', msg.sender, _to, _amount)\\n    );\\n\\n    assembly {\\n      switch returndatasize()\\n      case 0 {\\n        // Not a standard erc20\\n        result := 1\\n      }\\n      case 32 {\\n        // Standard erc20\\n        returndatacopy(0, 0, 32)\\n        result := mload(0)\\n      }\\n      default {\\n        // Anything else, should revert for safety\\n        revert(0, 0)\\n      }\\n    }\\n\\n    require(success, 'transferFrom() has been reverted');\\n\\n    /* solium-enable security/no-inline-assembly */\\n    return result;\\n  }\\n\\n  /*\\n   * Admin functions to edit the proxies address and fees\\n   */\\n\\n  /**\\n   * @notice Fees added when using Erc20/Native batch functions\\n   * @param _batchFee Between 0 and 200, i.e: batchFee = 30 represent 0.30% of fee\\n   */\\n  function setBatchFee(uint16 _batchFee) external onlyOwner {\\n    // safety to avoid wrong setting\\n    require(_batchFee <= 200, 'The batch fee value is too high: > 2%');\\n    batchFee = _batchFee;\\n  }\\n\\n  /**\\n   * @param _paymentErc20Proxy The address to the Erc20 fee payment proxy to use.\\n   */\\n  function setPaymentErc20Proxy(address _paymentErc20Proxy) external onlyOwner {\\n    paymentErc20Proxy = IERC20FeeProxy(_paymentErc20Proxy);\\n  }\\n\\n  /**\\n   * @param _paymentNativeProxy The address to the Native fee payment proxy to use.\\n   */\\n  function setPaymentNativeProxy(address _paymentNativeProxy) external onlyOwner {\\n    paymentNativeProxy = IEthereumFeeProxy(_paymentNativeProxy);\\n  }\\n\\n  /**\\n   * @notice Update the conversion path contract used to fetch conversions.\\n   * @param _chainlinkConversionPath The address of the conversion path contract.\\n   */\\n  function setChainlinkConversionPath(address _chainlinkConversionPath) external onlyOwner {\\n    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPath);\\n  }\\n\\n  /**\\n   * This function define variables allowing to limit the fees:\\n   * NativeAddress, USDAddress, and pathsNativeToUSD.\\n   * @param _NativeAddress The address representing the Native currency.\\n   * @param _USDAddress The address representing the USD currency.\\n   */\\n  function setNativeAndUSDAddress(address _NativeAddress, address _USDAddress) external onlyOwner {\\n    NativeAddress = _NativeAddress;\\n    USDAddress = _USDAddress;\\n    pathsNativeToUSD = [[NativeAddress, USDAddress]];\\n  }\\n\\n  /**\\n   * @param _batchFeeAmountUSDLimit The limitation of the batch fee amount in USD, e.g:\\n   *                                batchFeeAmountUSDLimit = 150 * 1e8 represents $150\\n   */\\n  function setBatchFeeAmountUSDLimit(uint64 _batchFeeAmountUSDLimit) external onlyOwner {\\n    batchFeeAmountUSDLimit = _batchFeeAmountUSDLimit;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title SafeERC20\\n * @notice Works around implementations of ERC20 with transferFrom not returning success status.\\n */\\nlibrary SafeERC20 {\\n  /**\\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransferFrom(\\n    IERC20 _token,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transferFrom(address,address,uint256)', _from, _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call approve ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeApprove(\\n    IERC20 _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('approve(address,uint256)', _spender, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call transfer ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransfer(\\n    IERC20 _token,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transfer(address,uint256)', _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ERC20FeeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20FeeProxy {\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  function transferFromWithReferenceAndFee(\\n    address _tokenAddress,\\n    address _to,\\n    uint256 _amount,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/EthereumFeeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEthereumFeeProxy {\\n  event TransferWithReferenceAndFee(\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  function transferWithReferenceAndFee(\\n    address payable _to,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address payable _feeAddress\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/contracts/ChainlinkConversionPath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './legacy_openzeppelin/contracts/access/roles/WhitelistAdminRole.sol';\\n\\ninterface ERC20fraction {\\n  function decimals() external view returns (uint8);\\n}\\n\\ninterface AggregatorFraction {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n}\\n\\n/**\\n * @title ChainlinkConversionPath\\n *\\n * @notice ChainlinkConversionPath is a contract computing currency conversion rates based on Chainlink aggretators\\n */\\ncontract ChainlinkConversionPath is WhitelistAdminRole {\\n  uint256 constant PRECISION = 1e18;\\n  uint256 constant NATIVE_TOKEN_DECIMALS = 18;\\n  uint256 constant FIAT_DECIMALS = 8;\\n  address public nativeTokenHash;\\n\\n  /**\\n   * @param _nativeTokenHash hash of the native token\\n   */\\n  constructor(address _nativeTokenHash) {\\n    nativeTokenHash = _nativeTokenHash;\\n  }\\n\\n  // Mapping of Chainlink aggregators (input currency => output currency => contract address)\\n  // input & output currencies are the addresses of the ERC20 contracts OR the sha3(\\\"currency code\\\")\\n  mapping(address => mapping(address => address)) public allAggregators;\\n\\n  // declare a new aggregator\\n  event AggregatorUpdated(address _input, address _output, address _aggregator);\\n\\n  /**\\n   * @notice Update an aggregator\\n   * @param _input address representing the input currency\\n   * @param _output address representing the output currency\\n   * @param _aggregator address of the aggregator contract\\n   */\\n  function updateAggregator(\\n    address _input,\\n    address _output,\\n    address _aggregator\\n  ) external onlyWhitelistAdmin {\\n    allAggregators[_input][_output] = _aggregator;\\n    emit AggregatorUpdated(_input, _output, _aggregator);\\n  }\\n\\n  /**\\n   * @notice Update a list of aggregators\\n   * @param _inputs list of addresses representing the input currencies\\n   * @param _outputs list of addresses representing the output currencies\\n   * @param _aggregators list of addresses of the aggregator contracts\\n   */\\n  function updateAggregatorsList(\\n    address[] calldata _inputs,\\n    address[] calldata _outputs,\\n    address[] calldata _aggregators\\n  ) external onlyWhitelistAdmin {\\n    require(_inputs.length == _outputs.length, 'arrays must have the same length');\\n    require(_inputs.length == _aggregators.length, 'arrays must have the same length');\\n\\n    // For every conversions of the path\\n    for (uint256 i; i < _inputs.length; i++) {\\n      allAggregators[_inputs[i]][_outputs[i]] = _aggregators[i];\\n      emit AggregatorUpdated(_inputs[i], _outputs[i], _aggregators[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Computes the conversion of an amount through a list of intermediate conversions\\n   * @param _amountIn Amount to convert\\n   * @param _path List of addresses representing the currencies for the intermediate conversions\\n   * @return result The result after all the conversions\\n   * @return oldestRateTimestamp The oldest timestamp of the path\\n   */\\n  function getConversion(uint256 _amountIn, address[] calldata _path)\\n    external\\n    view\\n    returns (uint256 result, uint256 oldestRateTimestamp)\\n  {\\n    (uint256 rate, uint256 timestamp, uint256 decimals) = getRate(_path);\\n\\n    // initialize the result\\n    result = (_amountIn * rate) / decimals;\\n\\n    oldestRateTimestamp = timestamp;\\n  }\\n\\n  /**\\n   * @notice Computes the conversion rate from a list of currencies\\n   * @param _path List of addresses representing the currencies for the conversions\\n   * @return rate The rate\\n   * @return oldestRateTimestamp The oldest timestamp of the path\\n   * @return decimals of the conversion rate\\n   */\\n  function getRate(address[] memory _path)\\n    public\\n    view\\n    returns (\\n      uint256 rate,\\n      uint256 oldestRateTimestamp,\\n      uint256 decimals\\n    )\\n  {\\n    // initialize the result with 18 decimals (for more precision)\\n    rate = PRECISION;\\n    decimals = PRECISION;\\n    oldestRateTimestamp = block.timestamp;\\n\\n    // For every conversion of the path\\n    for (uint256 i; i < _path.length - 1; i++) {\\n      (\\n        AggregatorFraction aggregator,\\n        bool reverseAggregator,\\n        uint256 decimalsInput,\\n        uint256 decimalsOutput\\n      ) = getAggregatorAndDecimals(_path[i], _path[i + 1]);\\n\\n      // store the latest timestamp of the path\\n      uint256 currentTimestamp = aggregator.latestTimestamp();\\n      if (currentTimestamp < oldestRateTimestamp) {\\n        oldestRateTimestamp = currentTimestamp;\\n      }\\n\\n      // get the rate of the current step\\n      uint256 currentRate = uint256(aggregator.latestAnswer());\\n      // get the number of decimals of the current rate\\n      uint256 decimalsAggregator = uint256(aggregator.decimals());\\n\\n      // mul with the difference of decimals before the current rate computation (for more precision)\\n      if (decimalsAggregator > decimalsInput) {\\n        rate = rate * (10**(decimalsAggregator - decimalsInput));\\n      }\\n      if (decimalsAggregator < decimalsOutput) {\\n        rate = rate * (10**(decimalsOutput - decimalsAggregator));\\n      }\\n\\n      // Apply the current rate (if path uses an aggregator in the reverse way, div instead of mul)\\n      if (reverseAggregator) {\\n        rate = (rate * (10**decimalsAggregator)) / currentRate;\\n      } else {\\n        rate = (rate * currentRate) / (10**decimalsAggregator);\\n      }\\n\\n      // div with the difference of decimals AFTER the current rate computation (for more precision)\\n      if (decimalsAggregator < decimalsInput) {\\n        rate = rate / (10**(decimalsInput - decimalsAggregator));\\n      }\\n      if (decimalsAggregator > decimalsOutput) {\\n        rate = rate / (10**(decimalsAggregator - decimalsOutput));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets aggregators and decimals of two currencies\\n   * @param _input input Address\\n   * @param _output output Address\\n   * @return aggregator to get the rate between the two currencies\\n   * @return reverseAggregator true if the aggregator returned give the rate from _output to _input\\n   * @return decimalsInput decimals of _input\\n   * @return decimalsOutput decimals of _output\\n   */\\n  function getAggregatorAndDecimals(address _input, address _output)\\n    private\\n    view\\n    returns (\\n      AggregatorFraction aggregator,\\n      bool reverseAggregator,\\n      uint256 decimalsInput,\\n      uint256 decimalsOutput\\n    )\\n  {\\n    // Try to get the right aggregator for the conversion\\n    aggregator = AggregatorFraction(allAggregators[_input][_output]);\\n    reverseAggregator = false;\\n\\n    // if no aggregator found we try to find an aggregator in the reverse way\\n    if (address(aggregator) == address(0x00)) {\\n      aggregator = AggregatorFraction(allAggregators[_output][_input]);\\n      reverseAggregator = true;\\n    }\\n\\n    require(address(aggregator) != address(0x00), 'No aggregator found');\\n\\n    // get the decimals for the two currencies\\n    decimalsInput = getDecimals(_input);\\n    decimalsOutput = getDecimals(_output);\\n  }\\n\\n  /**\\n   * @notice Gets decimals from an address currency\\n   * @param _addr address to check\\n   * @return decimals number of decimals\\n   */\\n  function getDecimals(address _addr) private view returns (uint256 decimals) {\\n    // by default we assume it is fiat\\n    decimals = FIAT_DECIMALS;\\n    // if address is the hash of the ETH currency\\n    if (_addr == nativeTokenHash) {\\n      decimals = NATIVE_TOKEN_DECIMALS;\\n    } else if (isContract(_addr)) {\\n      // otherwise, we get the decimals from the erc20 directly\\n      decimals = ERC20fraction(_addr).decimals();\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if an address is a contract\\n   * @param _addr Address to check\\n   * @return true if the address hosts a contract, false otherwise\\n   */\\n  function isContract(address _addr) private view returns (bool) {\\n    uint32 size;\\n    // solium-disable security/no-inline-assembly\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return (size > 0);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/legacy_openzeppelin/contracts/access/roles/WhitelistAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../Roles.sol';\\n\\n/**\\n * @title WhitelistAdminRole\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n */\\nabstract contract WhitelistAdminRole is Context {\\n  using Roles for Roles.Role;\\n\\n  event WhitelistAdminAdded(address indexed account);\\n  event WhitelistAdminRemoved(address indexed account);\\n\\n  Roles.Role private _whitelistAdmins;\\n\\n  constructor() {\\n    _addWhitelistAdmin(_msgSender());\\n  }\\n\\n  modifier onlyWhitelistAdmin() {\\n    require(\\n      isWhitelistAdmin(_msgSender()),\\n      'WhitelistAdminRole: caller does not have the WhitelistAdmin role'\\n    );\\n    _;\\n  }\\n\\n  function isWhitelistAdmin(address account) public view returns (bool) {\\n    return _whitelistAdmins.has(account);\\n  }\\n\\n  function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n    _addWhitelistAdmin(account);\\n  }\\n\\n  function renounceWhitelistAdmin() public {\\n    _removeWhitelistAdmin(_msgSender());\\n  }\\n\\n  function _addWhitelistAdmin(address account) internal {\\n    _whitelistAdmins.add(account);\\n    emit WhitelistAdminAdded(account);\\n  }\\n\\n  function _removeWhitelistAdmin(address account) internal {\\n    _whitelistAdmins.remove(account);\\n    emit WhitelistAdminRemoved(account);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/legacy_openzeppelin/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping(address => bool) bearer;\\n  }\\n\\n  /**\\n   * @dev Give an account access to this role.\\n   */\\n  function add(Role storage role, address account) internal {\\n    require(!has(role, account), 'Roles: account already has role');\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n   * @dev Remove an account's access to this role.\\n   */\\n  function remove(Role storage role, address account) internal {\\n    require(has(role, account), 'Roles: account does not have role');\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n   * @dev Check if an account has this role.\\n   * @return bool\\n   */\\n  function has(Role storage role, address account) internal view returns (bool) {\\n    require(account != address(0), 'Roles: account is the zero address');\\n    return role.bearer[account];\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentErc20Proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentNativeProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentErc20ConversionProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentNativeConversionFeeProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkConversionPath\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[][]\",\"name\":\"pathsToUSD\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchERC20Payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchFeeAmountUSDLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[][]\",\"name\":\"pathsToUSD\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchMultiERC20ConversionPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[][]\",\"name\":\"pathsToUSD\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchMultiERC20Payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"skipFeeUSDLimit\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchNativeConversionPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"skipFeeUSDLimit\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchNativePayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentNetworkId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"internalType\":\"struct BatchNoConversionPayments.RequestDetail[]\",\"name\":\"requestDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BatchConversionPayments.MetaDetail[]\",\"name\":\"metaDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[][]\",\"name\":\"pathsToUSD\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"batchPayments\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkConversionPath\",\"outputs\":[{\"internalType\":\"contract ChainlinkConversionPath\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathsNativeToUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentErc20ConversionProxy\",\"outputs\":[{\"internalType\":\"contract IERC20ConversionProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentErc20Proxy\",\"outputs\":[{\"internalType\":\"contract IERC20FeeProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentNativeConversionProxy\",\"outputs\":[{\"internalType\":\"contract IEthConversionProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentNativeProxy\",\"outputs\":[{\"internalType\":\"contract IEthereumFeeProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_batchFee\",\"type\":\"uint16\"}],\"name\":\"setBatchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_batchFeeAmountUSDLimit\",\"type\":\"uint64\"}],\"name\":\"setBatchFeeAmountUSDLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkConversionPath\",\"type\":\"address\"}],\"name\":\"setChainlinkConversionPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NativeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDAddress\",\"type\":\"address\"}],\"name\":\"setNativeAndUSDAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentErc20ConversionProxy\",\"type\":\"address\"}],\"name\":\"setPaymentErc20ConversionProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentErc20Proxy\",\"type\":\"address\"}],\"name\":\"setPaymentErc20Proxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentNativeConversionProxy\",\"type\":\"address\"}],\"name\":\"setPaymentNativeConversionProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentNativeProxy\",\"type\":\"address\"}],\"name\":\"setPaymentNativeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BatchConversionPayments", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e64c2d06d19d13061e62e291b2c4e9fe5679b93", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}