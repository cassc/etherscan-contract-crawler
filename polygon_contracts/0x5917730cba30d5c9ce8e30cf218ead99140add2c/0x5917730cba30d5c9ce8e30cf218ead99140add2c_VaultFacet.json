{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/diamondFacets/VaultFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {IVaultFacet} from \\\"../interfaces/internal/IVaultFacet.sol\\\";\\r\\n\\r\\ncontract VaultFacet is IVaultFacet{\\r\\n      bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.vault.diamond.storage\\\");\\r\\n      struct Vault{\\r\\n          bool  lock;    \\r\\n          //1 main  2 loaner  3 debtor  4 follow  5 mirror  6  lender  7 borrower\\r\\n          uint256 vaultType;\\r\\n          //platform 1  otherVault 2\\r\\n          uint256 sourceType;\\r\\n          uint256 time;\\r\\n          address masterToken;\\r\\n          address[] modules;\\r\\n          mapping(address=>bool) moduleStatus; \\r\\n\\r\\n          address[] tokens;\\r\\n          mapping(address=>uint256) tokenTypes; \\r\\n          address[] protocols;\\r\\n          mapping(address=> bool) protocolStatus;   \\r\\n          mapping(bytes32=>Position) positions; \\r\\n          \\r\\n          mapping(uint16=>bytes32[]) positionKey; \\r\\n\\r\\n          mapping(bytes4=>bool) funcWhiteList;\\r\\n          mapping(bytes4=>bool) funcBlackList;       \\r\\n      }\\r\\n\\r\\n      struct  VaultInfo{\\r\\n         mapping(address=>Vault) vaultInfo;\\r\\n      }\\r\\n\\r\\n      function diamondStorage() internal pure returns (VaultInfo storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n      }  \\r\\n    \\r\\n      function setVaultType(address _vault,uint256 _vaultType) external {\\r\\n          VaultInfo storage ds= diamondStorage();\\r\\n          ds.vaultInfo[_vault].vaultType=_vaultType;\\r\\n          emit SetVaultType(_vault,_vaultType);\\r\\n      }\\r\\n\\r\\n      function getVaultType(address _vault) external view returns(uint256){\\r\\n          VaultInfo storage ds= diamondStorage();\\r\\n          return ds.vaultInfo[_vault].vaultType;\\r\\n      }\\r\\n\\r\\n\\r\\n      function setSourceType(address _vault,uint256 _sourceType) external {\\r\\n          VaultInfo storage ds= diamondStorage();\\r\\n          ds.vaultInfo[_vault].sourceType=_sourceType;\\r\\n          emit SetSourceType(_vault,_sourceType);\\r\\n      }\\r\\n\\r\\n      function getSourceType(address _vault) external view returns(uint256){\\r\\n          VaultInfo storage ds= diamondStorage();\\r\\n          return ds.vaultInfo[_vault].sourceType;\\r\\n      }    \\r\\n\\r\\n\\r\\n      function setVaultMasterToken(address _vault,address _masterToken) external{\\r\\n        VaultInfo storage ds= diamondStorage();\\r\\n        ds.vaultInfo[_vault].masterToken=_masterToken;\\r\\n        emit SetVaultMasterToken(_vault,_masterToken);\\r\\n      } \\r\\n\\r\\n      function getVaultMasterToken(address _vault) external view returns(address){\\r\\n        VaultInfo storage ds= diamondStorage();\\r\\n        return ds.vaultInfo[_vault].masterToken;\\r\\n      }\\r\\n      \\r\\n      function setVaultLock(address _vault,bool _lock) external {\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         ds.vaultInfo[_vault].lock=_lock;\\r\\n         emit SetVaultLock(_vault,_lock);\\r\\n      }\\r\\n\\r\\n      function getVaultLock(address _vault) external view returns(bool){\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         return ds.vaultInfo[_vault].lock;\\r\\n      }\\r\\n     \\r\\n      function setVaultTime(address _vault,uint256 _time) external {\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         ds.vaultInfo[_vault].time=_time;\\r\\n         emit SetVaultTime(_vault,_time);\\r\\n      }\\r\\n\\r\\n      function getVaulTime(address _vault) external view returns(uint256){\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         return ds.vaultInfo[_vault].time;\\r\\n      }\\r\\n      //module\\r\\n      \\r\\n      function setVaultModules(address _vault,address[] memory _modules,bool[] memory _status) external {\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         for(uint i;i<_modules.length;i++){\\r\\n             require(_modules[i] != address(0),\\\"invalid address\\\");\\r\\n             //add\\r\\n             if(_status[i] && !ds.vaultInfo[_vault].moduleStatus[_modules[i]]){\\r\\n                 ds.vaultInfo[_vault].moduleStatus[_modules[i]]=true;\\r\\n                 ds.vaultInfo[_vault].modules.push(_modules[i]);\\r\\n             } \\r\\n             //delete\\r\\n             if(!_status[i] && ds.vaultInfo[_vault].moduleStatus[_modules[i]]){\\r\\n                delete ds.vaultInfo[_vault].moduleStatus[_modules[i]];\\r\\n                address[] memory temp=ds.vaultInfo[_vault].modules;\\r\\n                for(uint j;j<temp.length;j++){\\r\\n                     if(temp[j]==_modules[i]){\\r\\n                         ds.vaultInfo[_vault].modules[j]=ds.vaultInfo[_vault].modules[temp.length-1];\\r\\n                         ds.vaultInfo[_vault].modules.pop();\\r\\n                     } \\r\\n                }\\r\\n             }\\r\\n         } \\r\\n         emit SetVaultModules(_vault,_modules,_status);\\r\\n      }\\r\\n\\r\\n      function getVaultAllModules(address _vault) external view returns(address[] memory){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].modules;   \\r\\n      }\\r\\n\\r\\n      function getVaultModuleStatus(address _vault,address _module) external view returns(bool){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].moduleStatus[_module];\\r\\n      }\\r\\n      //asset\\r\\n     \\r\\n      function setVaultTokens(address _vault,address[] memory _tokens,uint256[] memory _types) external {\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         for(uint i;i<_tokens.length;i++){\\r\\n             require(_tokens[i] != address(0),\\\"invalid address\\\");\\r\\n             //add\\r\\n             if(_types[i]!=0 && ds.vaultInfo[_vault].tokenTypes[_tokens[i]]==0){\\r\\n                 ds.vaultInfo[_vault].tokenTypes[_tokens[i]]=_types[i];\\r\\n                 ds.vaultInfo[_vault].tokens.push(_tokens[i]);\\r\\n             } \\r\\n             //delete\\r\\n             if(_types[i]==0 && ds.vaultInfo[_vault].tokenTypes[_tokens[i]]!=0){\\r\\n                delete ds.vaultInfo[_vault].tokenTypes[_tokens[i]];\\r\\n                address[] memory temp=ds.vaultInfo[_vault].tokens;\\r\\n                for(uint j;j<temp.length;j++){\\r\\n                     if(temp[j]==_tokens[i]){\\r\\n                         ds.vaultInfo[_vault].tokens[j]=ds.vaultInfo[_vault].tokens[temp.length-1];\\r\\n                         ds.vaultInfo[_vault].tokens.pop();\\r\\n                     } \\r\\n                }\\r\\n             }\\r\\n         } \\r\\n         emit SetVaultTokens(_vault,_tokens,_types);\\r\\n      }\\r\\n\\r\\n      function getVaultAllTokens(address _vault) external view returns(address[] memory){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].tokens;   \\r\\n      }\\r\\n\\r\\n      function getVaultTokenType(address _vault,address _token) external view returns(uint256){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].tokenTypes[_token];\\r\\n      }\\r\\n      //prtotcol \\r\\n      \\r\\n      function setVaultProtocol(address _vault,address[] memory _protocols,bool[] memory _status) external {\\r\\n         VaultInfo storage ds= diamondStorage();\\r\\n         for(uint i;i<_protocols.length;i++){\\r\\n             require(_protocols[i] != address(0),\\\"invalid address\\\");\\r\\n             //add\\r\\n             if(_status[i] && !ds.vaultInfo[_vault].protocolStatus[_protocols[i]]){\\r\\n                 ds.vaultInfo[_vault].protocolStatus[_protocols[i]]=true;\\r\\n                 ds.vaultInfo[_vault].protocols.push(_protocols[i]);\\r\\n             } \\r\\n             //delete\\r\\n             if(!_status[i] && ds.vaultInfo[_vault].protocolStatus[_protocols[i]]){\\r\\n                delete ds.vaultInfo[_vault].protocolStatus[_protocols[i]];\\r\\n                address[] memory temp=ds.vaultInfo[_vault].protocols;\\r\\n                for(uint j;j<temp.length;j++){\\r\\n                     if(temp[j]==_protocols[i]){\\r\\n                         ds.vaultInfo[_vault].protocols[j]=ds.vaultInfo[_vault].protocols[temp.length-1];\\r\\n                         ds.vaultInfo[_vault].protocols.pop();\\r\\n                     } \\r\\n                }\\r\\n             }\\r\\n         } \\r\\n         emit SetVaultProtocol(_vault,_protocols,_status);\\r\\n      }\\r\\n\\r\\n      function getVaultAllProtocol(address _vault) external view returns(address[] memory){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].protocols;   \\r\\n      }\\r\\n\\r\\n      function getVaultProtocolStatus(address _vault,address  _protocol) external view returns(bool){\\r\\n           VaultInfo storage ds= diamondStorage();\\r\\n           return ds.vaultInfo[_vault].protocolStatus[_protocol];\\r\\n      }\\r\\n      /**\\r\\n        uint16[3] memory _append    \\r\\n           0:positionType\\r\\n           1:debtType   \\r\\n              -normal 0\\r\\n              -debt  1\\r\\n           2:option  \\r\\n              -0  delete\\r\\n              -1  add\\r\\n       */\\r\\n      \\r\\n      function  setVaultPosition(address _vault,address _component,uint16[3] memory _append) external {\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              bytes32 key=getPositionKey(_component,uint256(_append[0]));\\r\\n              uint16 positionType=ds.vaultInfo[_vault].positions[key].positionType;\\r\\n              uint16 ableUse=ds.vaultInfo[_vault].positions[key].ableUse;\\r\\n              //delete position\\r\\n              if(_append[2]==0 && ableUse == 1){\\r\\n                 ds.vaultInfo[_vault].positions[key].ableUse=0;\\r\\n              }\\r\\n              //add position(real add)\\r\\n              if(_append[2]==1 && positionType == 0){\\r\\n                ds.vaultInfo[_vault].positions[key].ableUse=1; \\r\\n                ds.vaultInfo[_vault].positions[key].positionType=_append[0]; \\r\\n                ds.vaultInfo[_vault].positions[key].debtType=_append[1]; \\r\\n                ds.vaultInfo[_vault].positions[key].component=_component; \\r\\n                ds.vaultInfo[_vault].positionKey[_append[0]].push(key);\\r\\n               // uint16[3] memory a1=[uint16(1),uint16(2),uint16(3)];\\r\\n              } \\r\\n              //add postion(edit add)\\r\\n              if(_append[2]==1 && positionType !=0 && ableUse==0){\\r\\n                 ds.vaultInfo[_vault].positions[key].ableUse=1;\\r\\n              }\\r\\n              emit SetVaultPosition(_vault,_component,_append);\\r\\n      }\\r\\n     \\r\\n      function setVaultPositionData(address _vault,address _component,uint256 _positionType,bytes memory _data) external{\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              bytes32 key=getPositionKey(_component,_positionType);\\r\\n              ds.vaultInfo[_vault].positions[key].data=_data;\\r\\n              emit SetVaultPositionData(_vault,_component,_positionType,_data);\\r\\n      }\\r\\n\\r\\n      function setVaultPositionBalance(address _vault,address _component,uint256 _positionType,uint256 _balance) external{\\r\\n            VaultInfo storage ds= diamondStorage();\\r\\n            bytes32 key=getPositionKey(_component,_positionType);\\r\\n            ds.vaultInfo[_vault].positions[key].balance=_balance;\\r\\n            emit SetVaultPositionBalance(_vault,_component,_positionType,_balance);\\r\\n      }\\r\\n\\r\\n      function getVaultAllPosition(address _vault,uint16[] memory _positionTypes) external view returns(Position[] memory positions){\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              uint256 len;\\r\\n              //get length\\r\\n              for(uint256 i;i<_positionTypes.length;i++){\\r\\n                  len+=ds.vaultInfo[_vault].positionKey[_positionTypes[i]].length;\\r\\n              }\\r\\n              //get data\\r\\n              positions=new Position[](len);\\r\\n              len=0;\\r\\n              for(uint i;i<_positionTypes.length;i++){\\r\\n                  uint256 tempLen=ds.vaultInfo[_vault].positionKey[_positionTypes[i]].length;\\r\\n                  for(uint j;j<tempLen;j++){\\r\\n                       bytes32 key=ds.vaultInfo[_vault].positionKey[_positionTypes[i]][j];\\r\\n                       positions[len]=ds.vaultInfo[_vault].positions[key];\\r\\n                       len++;\\r\\n                  }\\r\\n              }\\r\\n      }\\r\\n\\r\\n      function getVaultProtocolPosition(address _vault,uint16 _positionType) external view returns(Position[] memory positions){\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              uint256 len=ds.vaultInfo[_vault].positionKey[_positionType].length;\\r\\n              positions=new Position[](len);\\r\\n              for(uint i;i<len;i++){\\r\\n                 bytes32 key=ds.vaultInfo[_vault].positionKey[_positionType][i];\\r\\n                 positions[i]=ds.vaultInfo[_vault].positions[key];\\r\\n              }      \\r\\n      }\\r\\n\\r\\n      function getVaultPosition(address _vault,address _component, uint256 _positionType) external view returns(Position memory position){\\r\\n             VaultInfo storage ds= diamondStorage();\\r\\n             bytes32 key=getPositionKey(_component,_positionType);\\r\\n             position=ds.vaultInfo[_vault].positions[key];\\r\\n      }\\r\\n\\r\\n      function getPositionKey(address _asset,uint256 _debtType) public pure  returns(bytes32){\\r\\n            return  keccak256(abi.encode(_asset,_debtType));\\r\\n      }  \\r\\n\\r\\n      function setFuncWhiteList(address _vault,bytes4 _func,bool _type) external {\\r\\n              require(_func!= bytes4(0),\\\"VaultFacet:invalid func\\\");\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              if(_type){\\r\\n                 ds.vaultInfo[_vault].funcWhiteList[_func]=true;\\r\\n              }else{\\r\\n                 delete  ds.vaultInfo[_vault].funcWhiteList[_func];\\r\\n              }         \\r\\n              emit SetFuncWhiteList(_vault,_func,_type);\\r\\n      }\\r\\n\\r\\n      function getFuncWhiteList(address _vault,bytes4 _func) external view returns(bool){\\r\\n                VaultInfo storage ds= diamondStorage();\\r\\n                return ds.vaultInfo[_vault].funcWhiteList[_func];\\r\\n      }\\r\\n\\r\\n      function setFuncBlackList(address _vault,bytes4 _func,bool _type) external {\\r\\n              require(_func!= bytes4(0),\\\"VaultFacet:invalid func\\\");\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n              if(_type){\\r\\n                 ds.vaultInfo[_vault].funcBlackList[_func]=true;\\r\\n              }else{\\r\\n                 delete ds.vaultInfo[_vault].funcBlackList[_func];\\r\\n              }      \\r\\n              emit SetFuncBlackList(_vault,_func,_type);\\r\\n      }\\r\\n\\r\\n      function getFuncBlackList(address _vault,bytes4 _func) external view returns(bool){\\r\\n              VaultInfo storage ds= diamondStorage();\\r\\n            return ds.vaultInfo[_vault].funcBlackList[_func];\\r\\n      }\\r\\n} \"\r\n    },\r\n    \"contracts/interfaces/internal/IVaultFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IVaultFacet{\\r\\n      struct Position{  \\r\\n           uint16  positionType;  //1 normal 2 aave asset 3 compound asset 4gmx  asset\\r\\n           uint16  debtType;   // 0 normal    1  debt           \\r\\n           uint16 ableUse;   // 0 unused   1 used\\r\\n           address component; \\r\\n           uint256 balance;\\r\\n           bytes data; \\r\\n      }\\r\\n     event SetVaultType(address _vault,uint256 _vaultType);\\r\\n     event SetSourceType(address _vault,uint256 _sourceType);\\r\\n     event SetVaultMasterToken(address _vault,address _masterToken);\\r\\n     event SetVaultLock(address _vault,bool _lock);\\r\\n     event SetVaultTime(address _vault,uint256 _time);\\r\\n     event SetVaultModules(address _vault,address[]  _modules,bool[]  _status);\\r\\n     event SetVaultTokens(address _vault,address[] _tokens,uint256[]  _types);\\r\\n     event SetVaultProtocol(address _vault,address[]  _protocols,bool[]  _status);\\r\\n     event SetVaultPosition(address _vault,address _component,uint16[3]  _append);\\r\\n     event SetVaultPositionData(address _vault,address _component,uint256 _positionType,bytes  _data);\\r\\n     event SetVaultPositionBalance(address _vault,address _component,uint256 _positionType,uint256 _balance);  \\r\\n    \\r\\n     event SetFuncWhiteList(address _vault,bytes4 _func,bool _type);\\r\\n     event SetFuncBlackList(address _vault,bytes4 _func,bool _type);\\r\\n\\r\\n\\r\\n\\r\\n     function setVaultType(address _vault,uint256 _vaultType) external;\\r\\n     function getVaultType(address _vault) external view returns(uint256);\\r\\n     function setSourceType(address _vault,uint256 _sourceType) external;\\r\\n     function getSourceType(address _vault) external view returns(uint256);\\r\\n     \\r\\n     function setVaultMasterToken(address _vault,address _masterToken) external;\\r\\n     function getVaultMasterToken(address _vault) external view returns(address);\\r\\n     \\r\\n     function setVaultLock(address _vault,bool _lock) external;\\r\\n     function getVaultLock(address _vault) external view returns(bool);\\r\\n     function setVaultTime(address _vault,uint256 _time) external;\\r\\n     function getVaulTime(address _vault) external view returns(uint256);\\r\\n\\r\\n\\r\\n     function setVaultModules(address _vault,address[] memory _modules,bool[] memory _status) external; \\r\\n     function getVaultAllModules(address _vault) external view returns(address[] memory);\\r\\n     function getVaultModuleStatus(address _vault,address _module) external view returns(bool);\\r\\n\\r\\n     function setVaultTokens(address _vault,address[] memory _tokens,uint256[] memory _status) external;\\r\\n     function getVaultAllTokens(address _vault) external view returns(address[] memory);\\r\\n     function getVaultTokenType(address _vault,address _token) external view returns(uint256);\\r\\n\\r\\n     function setVaultProtocol(address _vault,address[] memory _protocols,bool[] memory _status) external;\\r\\n     function getVaultAllProtocol(address _vault) external view returns(address[] memory);\\r\\n     function getVaultProtocolStatus(address _vault,address  _protocol) external view returns(bool);\\r\\n\\r\\n     function setVaultPosition(address _vault,address _component,uint16[3] memory _append) external;\\r\\n     function setVaultPositionData(address _vault,address _component,uint256 _positionType,bytes memory _data) external;\\r\\n     function getVaultAllPosition(address _vault,uint16[] memory _positionTypes) external view returns(Position[] memory positions);\\r\\n     function getVaultProtocolPosition(address _vault,uint16 _positionType) external view returns(Position[] memory positions);\\r\\n     function getVaultPosition(address _vault,address _component, uint256 _positionType) external view returns(Position memory position);\\r\\n    \\r\\n     function setFuncWhiteList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncWhiteList(address _vault,bytes4 _func) external view returns(bool);\\r\\n     function setFuncBlackList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncBlackList(address _vault,bytes4 _func) external view returns(bool);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"SetFuncBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"SetFuncWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sourceType\",\"type\":\"uint256\"}],\"name\":\"SetSourceType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"SetVaultLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_masterToken\",\"type\":\"address\"}],\"name\":\"SetVaultMasterToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"SetVaultModules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[3]\",\"name\":\"_append\",\"type\":\"uint16[3]\"}],\"name\":\"SetVaultPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"SetVaultPositionBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"SetVaultPositionData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"SetVaultProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SetVaultTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_types\",\"type\":\"uint256[]\"}],\"name\":\"SetVaultTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"SetVaultType\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"getFuncBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"getFuncWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtType\",\"type\":\"uint256\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getSourceType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaulTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_positionTypes\",\"type\":\"uint16[]\"}],\"name\":\"getVaultAllPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllProtocol\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultMasterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getVaultModuleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"}],\"name\":\"getVaultPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_positionType\",\"type\":\"uint16\"}],\"name\":\"getVaultProtocolPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"getVaultProtocolStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVaultTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setFuncBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setFuncWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceType\",\"type\":\"uint256\"}],\"name\":\"setSourceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setVaultLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterToken\",\"type\":\"address\"}],\"name\":\"setVaultMasterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setVaultModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint16[3]\",\"name\":\"_append\",\"type\":\"uint16[3]\"}],\"name\":\"setVaultPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"setVaultPositionBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setVaultPositionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setVaultProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setVaultTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_types\",\"type\":\"uint256[]\"}],\"name\":\"setVaultTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"setVaultType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaultFacet", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}