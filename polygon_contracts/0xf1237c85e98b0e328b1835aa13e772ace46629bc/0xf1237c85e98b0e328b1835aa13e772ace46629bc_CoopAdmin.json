{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/token/CoopAdmin.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IToken {\\n    function mintIncrementalCards(uint256 numberOfCards, address recipient) external returns (uint256);\\n    function TraitRegistry() external returns (address);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\ninterface ITraitRegistry {\\n    function getImplementer(uint16 traitID) external returns (address);\\n    function setTrait(uint16 traitID, uint16 tokenId, bool _value) external;\\n    function hasTrait(uint16 traitID, uint16 tokenId) external view returns (bool);\\n}\\n\\ninterface ITraitUint256ValueImplementer {\\n    function setValue(uint16 _tokenId, uint256 _value) external;\\n    function getValue(uint16 _tokenId) external view returns (uint256);\\n}\\n\\ninterface ITraitUint8ValueImplementer {\\n    function setValue(uint16 _tokenId, uint8 _value) external;\\n    function getValue(uint16 _tokenId) external view returns (uint8);\\n}\\n\\ncontract CoopAdmin is Ownable {\\n    uint8 internal constant ACTIVATED_TRAIT_ID = 1;\\n    uint8 internal constant STAKE_TRAIT_ID = 2;\\n    uint8 internal constant FULL_MEMBERSHIP_TRAIT_ID = 6;\\n\\n    uint8 internal constant CALLTYPE_TRANSFER_FROM_OWNER = 0;\\n    uint8 internal constant CALLTYPE_MINT = 1;\\n    uint8 internal constant CALLTYPE_SET_ACTIVE = 2;\\n\\n\\n    IToken token;\\n    ITraitRegistry traitRegistry;\\n    ITraitUint256ValueImplementer stakeImplementer;\\n    ITraitUint8ValueImplementer activatedImplementer;\\n\\n    mapping (address => bool) public allowedMint;\\n\\n    event CoopAdminEvent(uint8 calltype, uint16 tokenId, address owner ,uint8 activated, uint256 stake, bool fullMembership, uint256 timestamp);\\n\\n    constructor(address tokenAddress) Ownable(){\\n        token = IToken(tokenAddress);\\n        traitRegistry = ITraitRegistry(token.TraitRegistry());               \\n        stakeImplementer = ITraitUint256ValueImplementer(traitRegistry.getImplementer(STAKE_TRAIT_ID));\\n        activatedImplementer = ITraitUint8ValueImplementer(traitRegistry.getImplementer(ACTIVATED_TRAIT_ID));\\n    }\\n\\n    function mintMultiple(address to, uint16 numberOfCards) public onlyOwner{\\n        require(numberOfCards <= 100, \\\"CoopAdmin: max 100 cards at a time\\\");\\n        token.mintIncrementalCards(numberOfCards, to);\\n    }\\n\\n    function transferFromOwner(uint16 tokenId, address to, uint256 stake, uint8 activated, bool fullMembership) public onlyOwner {\\n        require(activatedImplementer.getValue(tokenId) == 0, \\\"CoopAdmin: token already activated\\\");\\n        token.safeTransferFrom(owner(), to, tokenId);\\n        activatedImplementer.setValue(tokenId, activated);\\n        stakeImplementer.setValue(tokenId, stake);\\n        traitRegistry.setTrait(FULL_MEMBERSHIP_TRAIT_ID, tokenId, fullMembership); \\n        emit CoopAdminEvent(CALLTYPE_TRANSFER_FROM_OWNER ,tokenId, to, activated, stake, fullMembership, block.timestamp);\\n    }\\n\\n    function mint(address to, uint256 stake, uint8 activated, bool fullMembership ) public allowMint {\\n        require(to != address(0), \\\"CoopAdmin: cannot mint to zero address\\\");\\n        uint256 tokenId = token.mintIncrementalCards(1, to) - 1;\\n        \\n        stakeImplementer.setValue(uint16(tokenId), stake);\\n        activatedImplementer.setValue(uint16(tokenId), activated);\\n        traitRegistry.setTrait(FULL_MEMBERSHIP_TRAIT_ID, uint16(tokenId), fullMembership);\\n        emit CoopAdminEvent(CALLTYPE_MINT, uint16(tokenId), to, activated, stake, fullMembership , block.timestamp);\\n    }\\n\\n    function setActive(uint16 tokenId, uint8 activated, address owner) public onlyOwner {\\n        require(token.ownerOf(tokenId) == owner, \\\"CoopAdmin: Not the expected owner\\\");\\n        activatedImplementer.setValue(tokenId, activated);\\n        emit CoopAdminEvent(CALLTYPE_SET_ACTIVE ,tokenId, owner , activated, stakeImplementer.getValue(tokenId), traitRegistry.hasTrait(FULL_MEMBERSHIP_TRAIT_ID, tokenId) ,block.timestamp);\\n    }\\n\\n    modifier allowMint(){\\n        require(msg.sender == owner() || allowedMint[msg.sender], \\\"CoopAdmin: not allowed to mint\\\");\\n        _;\\n    }\\n\\n    function setAllowedMint(address _address, bool _allowed) public onlyOwner {\\n        allowedMint[_address] = _allowed;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"calltype\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"activated\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fullMembership\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CoopAdminEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"activated\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"fullMembership\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"numberOfCards\",\"type\":\"uint16\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"activated\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"activated\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"fullMembership\",\"type\":\"bool\"}],\"name\":\"transferFromOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoopAdmin", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f64993e02a15a5d1d1c65face6aefdc69eb9f742", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}