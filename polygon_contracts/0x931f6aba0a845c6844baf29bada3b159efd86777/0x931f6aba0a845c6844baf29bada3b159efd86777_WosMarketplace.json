{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20Collateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Collateral is IERC20{\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/ERC721/interfaces/IArtifact.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IArtifact {\\n    function createItem(address owner, uint256 typeId) external returns (uint256);\\n    function getPriceModifier(uint256 typeId) external view returns (uint);\\n    function getTypeCount() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/ERC721/interfaces/IContractType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IContractType {\\n    function getTypeContract() external pure returns (bytes32);\\n    function getTypeNameContract() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721/interfaces/IOilWell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IOilWell {\\n    function create(uint256 price, uint barsAmount, address owner) external returns(uint256);\\n    \\n    function getSupplyAmount(uint256 oilWellId) external view returns (uint256);\\n\\n    function getBarsAmount(uint256 oilWellId) external view returns (uint256);\\n\\n    function distributeFunds(uint256 amount) external returns (bool);\\n\\n    function getMinigCounter(uint256 oilWellId) external view returns (uint256);\\n\\n    function getBarSupply(uint256 wellId, uint256 i) external view returns (uint256);\\n\\n    function claimMyAwardBars(uint256 amount, uint256 wellId, uint256 totalEachBars) external;\\n\\n    function explodeBars(uint256 amount, address to) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ISimpleStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface ISimpleStaking{\\n    function distribute() external;\\n}\"\r\n    },\r\n    \"contracts/Marketplace/CollateralWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../util/CriticalTracer.sol\\\";\\nimport \\\"../ERC20/interfaces/IERC20Collateral.sol\\\";\\nimport \\\"../Security2/Interfaces/IECDSASignature2.sol\\\";\\nimport \\\"../Security2/Security2Base.sol\\\";\\nimport \\\"./DecimalUtils.sol\\\";\\n\\nabstract contract CollateralWrapper is\\n    Security2Base,\\n    DecimalUtils,\\n    CriticalTracer\\n{\\n    using ECDSALib for bytes;\\n    using SafeERC20 for IERC20;\\n    IERC20 private collateral;\\n\\n    event CollateralAddressChanged(address newCollateralAddress);\\n\\n    constructor(\\n        address _collateral,\\n        IECDSASignature2 _signature,\\n        IUAC _uac\\n    ) Security2Base(_signature, _uac) DecimalUtils(_signature, _uac) {\\n        require(_collateral != address(0), \\\"Collateral cannot be zero\\\");\\n        collateral = IERC20(_collateral);\\n        _setDecimalTo(_collateral, 1); //1 USDT\\n    }\\n\\n    function getCollateralAddress() external view returns (address) {\\n        return address(collateral);\\n    }\\n\\n    function _collateralTransfer(\\n        address to,\\n        uint256 amount\\n    ) internal validateBalance(amount) {\\n        require(to != address(0), _ctMsg(\\\"address cannot be zero\\\"));\\n        require(amount > 0, _ctMsg(\\\"amount cannot be zero\\\"));\\n        require(\\n            amount <= _collateralBalanceOf(address(this)),\\n            _ctMsg(\\\"not enough collateral\\\")\\n        );\\n        uac.verifyGameStatus(3);\\n        collateral.safeTransfer(to, amount);\\n    }\\n\\n    function _collateralTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal validateBalanceFrom(amount) {\\n        require(to != address(0), _ctMsg(\\\"address cannot be zero\\\"));\\n        require(from != address(0), _ctMsg(\\\"the from address cannot be zero\\\"));\\n        require(amount > 0, _ctMsg(\\\"amount cannot be zero\\\"));\\n        uac.verifyGameStatus(3);\\n        collateral.safeTransferFrom(from, to, amount);\\n    }\\n\\n    function _collateralBalanceOf(\\n        address account\\n    ) internal view returns (uint256) {\\n        return collateral.balanceOf(account);\\n    }\\n\\n    function extractCollateral(\\n        address to,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        signature.verifyMessage(\\n            abi.encodePacked(to, amount, msg.sender).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        _collateralTransfer(to, amount);\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return getDecimals(1); //1 USDT\\n    }\\n\\n    function raise(uint256 amount) internal view returns (uint256) {\\n        return amount * 10 ** getDecimals(1); //1 USDT\\n    }\\n\\n    modifier validateBalance(uint256 price) {\\n        require(\\n            collateral.balanceOf(address(this)) >= price,\\n            _ctMsg(\\\"there is not enough collateral to transfer\\\")\\n        );\\n        _;\\n    }\\n\\n    modifier validateBalanceFrom(uint256 price) {\\n        require(\\n            collateral.balanceOf(msg.sender) >= price,\\n            _ctMsg(\\\"you dont have enough collateral\\\")\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/DecimalUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"../ERC20/interfaces/IERC20Collateral.sol\\\";\\nimport \\\"../Security2/Security2Base.sol\\\";\\n\\ncontract DecimalUtils {\\n    using ECDSALib for bytes;\\n    mapping(uint => uint8) private decimalsByToken;\\n    IECDSASignature2 private signature;\\n    IUAC private uac;\\n\\n    constructor(IECDSASignature2 _signature, IUAC _uac) {\\n        require(address(_signature) != address(0), \\\"Signature cannot be zero\\\");\\n        require(address(_uac) != address(0), \\\"Uac cannot be zero\\\");\\n        signature = _signature;\\n        uac = _uac;\\n        decimalsByToken[1] = 6; //USDT\\n        decimalsByToken[2] = 6; //BAR\\n        decimalsByToken[3] = 6; //WOS\\n        decimalsByToken[4] = 6; //CRU\\n    }\\n\\n    function setDecimalTo(\\n        address token,\\n        uint key,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        signature.verifyMessage(\\n            abi.encodePacked(token, key, msg.sender).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        _setDecimalTo(token, key);\\n    }\\n\\n    function _setDecimalTo(address token, uint key) internal {\\n        uac.verifyGameStatus(5);\\n        IERC20Collateral erc20Token = IERC20Collateral(token);\\n        uint8 decimals = erc20Token.decimals();\\n        decimalsByToken[key] = decimals;\\n    }\\n\\n    function getDecimals(uint key) internal view returns (uint8) {\\n        uint8 tDecimals = decimalsByToken[key];\\n        return tDecimals > 0 ? tDecimals : 6;\\n    }\\n\\n    function raise(uint256 amount, uint key) internal view returns (uint256) {\\n        return amount * 10 ** getDecimals(key);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/interfaces/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IDistributor {\\n    function distributeFunds(uint256 amount) external returns (uint256);\\n    function newOilWell(uint256 price, uint256 bars, address owner) external returns(uint256);\\n    function getOilWellAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/Marketplace/interfaces/IMarketplaceRates.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IMarketplaceRates {\\n    function getOilWellSalePrice(uint256 bars) external view returns (uint256);\\n\\n    function getArtifactSalePrice(uint256 mod) external view returns (uint256);\\n\\n    function getBarPrice() external view returns (uint256);\\n\\n    function getWosPrice() external view returns (uint256);\\n\\n    function getBarAverage() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/interfaces/IWosMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IWosMarketplace {\\n    function BuyArtifact(\\n        address contractAddress,\\n        uint256 aType,\\n        uint256 amount\\n    ) external;\\n\\n    function BuyOilWellWithOwner(\\n        address owner,\\n        uint256 bars,\\n        uint256 nonce,\\n        bytes32 intent,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external returns (uint256);\\n\\n    function BuyOilWell(\\n        uint256 bars,\\n        uint256 nonce,\\n        bytes32 intent,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/MarketplaceBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"../ERC721/interfaces/IContractType.sol\\\";\\nimport \\\"../ERC721/interfaces/IArtifact.sol\\\";\\n\\nabstract contract MarketplaceBase {\\n    struct Artifact {\\n        address contractAddress;\\n        uint256 available;\\n        uint256 sold;\\n    }\\n\\n    event MarketItemSold(\\n        address indexed contractAddress,\\n        uint256 indexed itemId,\\n        address indexed owner,\\n        uint256 salePrice,\\n        uint256 itemType, //1 = oil well, 2 = artifact\\n        uint256 aType\\n    );\\n\\n    event IntentSuccessful(address indexed owner, bytes32 intent, uint256 id);\\n\\n    //Artifact[] internal artifacts;\\n\\n    mapping(address => Artifact) internal artifacts;\\n    mapping(bytes32 => bool) private intents;\\n\\n    function _registerArtifact(\\n        address contractAddress,\\n        uint256 available\\n    ) internal {\\n        bytes32 typeContract = IContractType(contractAddress).getTypeContract();\\n        require(\\n            typeContract == keccak256(\\\"artifact\\\"),\\n            \\\"the address is not of a valid artifact\\\"\\n        );\\n        require(\\n            contractAddress != address(0),\\n            \\\"the address of the contract cannot be 0\\\"\\n        );\\n        require(available > 0, \\\"at least 1 item available\\\");\\n\\n        artifacts[contractAddress] = Artifact(contractAddress, available, 0);\\n    }\\n\\n    function _deleteArtifact(address contractAddress) internal {\\n        artifacts[contractAddress] = Artifact(address(0), 0, 0);\\n    }\\n\\n    function _registerSale(\\n        address contractAddress,\\n        uint256 itemId,\\n        address owner,\\n        uint256 salePrice,\\n        uint256 itemType,\\n        uint256 aType\\n    ) internal {\\n        emit MarketItemSold(\\n            contractAddress,\\n            itemId,\\n            owner,\\n            salePrice,\\n            itemType,\\n            aType\\n        );\\n    }\\n\\n    function _intent(address owner, bytes32 intent, uint256 id) internal {\\n        require(intents[intent] == false, \\\"This intent has already been logged\\\");\\n        intents[intent] = true;\\n        emit IntentSuccessful(owner, intent, id);\\n    }\\n\\n    function _getArtifacInfo(\\n        address contractAddress\\n    ) internal view returns (Artifact memory) {\\n        return artifacts[contractAddress];\\n    }\\n\\n    function _setAvailability(\\n        uint256 amount,\\n        address contractAddress,\\n        bool decrease,\\n        bool absolute\\n    ) internal verifyArtifact(contractAddress) {\\n        require(amount >= 0, \\\"Amount has to be greater than 0.\\\");\\n\\n        if (absolute) {\\n            artifacts[contractAddress].available = amount;\\n            return;\\n        }\\n\\n        if (decrease) {\\n            require(\\n                artifacts[contractAddress].available >= amount,\\n                \\\"Amount is greater than the quantity available.\\\"\\n            );\\n            artifacts[contractAddress].available -= amount;\\n            return;\\n        }\\n\\n        artifacts[contractAddress].available += amount;\\n    }\\n\\n    modifier verifyArtifact(address contractAddress) {\\n        require(\\n            artifacts[contractAddress].contractAddress != address(0),\\n            \\\"This contract is not registered as a valid artifact\\\"\\n        );\\n        require(\\n            artifacts[contractAddress].contractAddress == contractAddress,\\n            \\\"Registered artifact does not match the contract address\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/Tax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./CollateralWrapper.sol\\\";\\nimport \\\"./../ISimpleStaking.sol\\\";\\n\\ncontract Tax is CollateralWrapper {\\n    using ECDSALib for bytes;\\n\\n    uint256 tax = 5;\\n    uint256 referralTax = 15;\\n    uint256 taxStakingPercent = 20;\\n    uint256 taxDGPercent = 20;\\n    uint256 taxJSPercent = 20;\\n    uint256 taxAggPercent = 20;\\n    uint256 taxOpPercent = 10;\\n    uint256 taxSlPercent = 10;\\n    address private WosStakingAddress;\\n    address private DG;\\n    address private JS;\\n    address private OpWallet;\\n    address private Agregadores;\\n    address private SLWallet;\\n    address private ReferralAddress;\\n\\n    constructor(\\n        address _wosStakingAddress,\\n        address _collateral,\\n        address _aggAddress,\\n        IECDSASignature2 _signature,\\n        IUAC _uac\\n    ) CollateralWrapper(_collateral, _signature, _uac) {\\n        WosStakingAddress = _wosStakingAddress; //Smart Contract\\n        Agregadores = _aggAddress; //Contract\\n        require(\\n            WosStakingAddress != address(0),\\n            \\\"StakingAddress cannot be zero\\\"\\n        );\\n        require(_aggAddress != address(0), \\\"AggAddress cannot be zero\\\");\\n        DG = 0x9Fe30a5c5424BC3E461AD13B4947465e6460113d; //wallet\\n        JS = 0x491f38D5ae8Dc0C1fB7Ad7AB3A122393F758937F; //wallet\\n        OpWallet = 0x8A1078E9C93D98E724b54841fbb60E7Ea28d1654; //wallet\\n        SLWallet = 0xC3353c719b7D987123b248d5Fe4b35cbC05e5fa7; //wallet\\n        //-----------------------------------------------------------------\\n    }\\n\\n    function setStakingAndReferralAddress(\\n        address newStakingAddress,\\n        address newReferralAddress,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        signature.verifyMessage(\\n            abi\\n                .encodePacked(newStakingAddress, newReferralAddress, msg.sender)\\n                .hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        require(\\n            WosStakingAddress != address(0),\\n            \\\"StakingAddress cannot be zero\\\"\\n        );\\n        WosStakingAddress = newStakingAddress;\\n        ReferralAddress = newReferralAddress;\\n    }\\n\\n    function setGlobalFeePercent(\\n        uint256 newTax,\\n        uint256 newReferralTax,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        require(newTax > 0, \\\"Invalid tax amount\\\");\\n        require(newReferralTax > 0, \\\"Invalid referral tax amount\\\");\\n        require(newTax + newReferralTax <= 99, \\\"Invalid tax\\\");\\n        _verifySignatures(newTax, nonce, timestamp, signatures);\\n        tax = newTax;\\n        referralTax = newReferralTax;\\n    }\\n\\n    function setTaxDGPercent(\\n        uint256 newTaxStakingPercent,\\n        uint256 newTaxDGPercent,\\n        uint256 newTaxJSPercent,\\n        uint256 newTaxAggPercent,\\n        uint256 newTaxOpPercent,\\n        uint256 newTaxSlPercent,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        require(\\n            (newTaxDGPercent > 0 && newTaxDGPercent <= 100) &&\\n                (newTaxJSPercent > 0 && newTaxJSPercent <= 100) &&\\n                (newTaxAggPercent > 0 && newTaxAggPercent <= 100) &&\\n                (newTaxOpPercent > 0 && newTaxOpPercent <= 100) &&\\n                (newTaxSlPercent > 0 && newTaxSlPercent <= 100) &&\\n                (newTaxStakingPercent > 0 && newTaxStakingPercent <= 100),\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\n        );\\n        _verifySignatures(newTaxDGPercent, nonce, timestamp, signatures);\\n        taxDGPercent = newTaxDGPercent;\\n        taxJSPercent = newTaxJSPercent;\\n        taxAggPercent = newTaxAggPercent;\\n        taxStakingPercent = newTaxStakingPercent;\\n        taxOpPercent = newTaxOpPercent;\\n        taxSlPercent = newTaxSlPercent;\\n        _totalTaxPercentageVerify();\\n    }\\n\\n    function _verifySignatures(\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) private {\\n        signature.verifyMessage(\\n            abi.encodePacked(amount, msg.sender).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n    }\\n\\n    function _totalTaxPercentageVerify() private view {\\n        uint total = taxStakingPercent +\\n            taxDGPercent +\\n            taxJSPercent +\\n            taxAggPercent +\\n            taxOpPercent +\\n            taxSlPercent;\\n        require(total <= 100, \\\"Total tax percentage cannot exceed 100\\\");\\n    }\\n\\n    function _getPriceWithoutTax(\\n        uint256 price\\n    ) internal view returns (uint256) {\\n        return price - ((tax + referralTax) * price) / 100;\\n    }\\n\\n    function _taxDistribution(uint256 price) internal {\\n        uint256 taxAmount = (tax * price) / 100;\\n        uint256 referralTaxAmount = (referralTax * price) / 100;\\n\\n        uint256 amountStaking = (taxAmount * taxStakingPercent) / 100;\\n        uint256 amountDG = (taxAmount * taxDGPercent) / 100;\\n        uint256 amountJS = (taxAmount * taxJSPercent) / 100;\\n        uint256 amountAgg = (taxAmount * taxAggPercent) / 100;\\n        uint256 amountOp = (taxAmount * taxOpPercent) / 100;\\n        uint256 amountSl = (taxAmount * taxSlPercent) / 100;\\n\\n        _ctSign(\\\"TX_T_STEP_0\\\");\\n        _collateralTransfer(ReferralAddress, referralTaxAmount);\\n\\n        _ctSign(\\\"TX_T_STEP_1\\\");\\n        _collateralTransfer(WosStakingAddress, amountStaking);\\n\\n        _ctSign(\\\"TX_T_STEP_2\\\");\\n        _collateralTransfer(DG, amountDG);\\n\\n        _ctSign(\\\"TX_T_STEP_3\\\");\\n        _collateralTransfer(JS, amountJS);\\n\\n        _ctSign(\\\"TX_T_STEP_4\\\");\\n        _collateralTransfer(Agregadores, amountAgg);\\n\\n        _ctSign(\\\"TX_T_STEP_5\\\");\\n        _collateralTransfer(OpWallet, amountOp);\\n\\n        _ctSign(\\\"TX_T_STEP_6\\\");\\n        _collateralTransfer(SLWallet, amountSl);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace/WosMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../ERC721/interfaces/IArtifact.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\nimport \\\"../ERC721/interfaces/IOilWell.sol\\\";\\nimport \\\"./Tax.sol\\\";\\nimport \\\"../ERC721/interfaces/IContractType.sol\\\";\\nimport \\\"./MarketplaceBase.sol\\\";\\nimport \\\"./interfaces/IMarketplaceRates.sol\\\";\\nimport \\\"./interfaces/IWosMarketplace.sol\\\";\\n\\n/**\\n * @notice\\n * This is the official marketplace of wosgame.net for the purchase of artifacts and wells\\n */\\n\\ncontract WosMarketplace is\\n    IWosMarketplace,\\n    ReentrancyGuard,\\n    MarketplaceBase,\\n    Tax\\n{\\n    using ECDSALib for bytes;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _itemsSold;\\n    Counters.Counter private _oilWellsSold;\\n    IDistributor private distributor;\\n    IMarketplaceRates private mkRates;\\n    address private exchangeAddress;\\n\\n    constructor(\\n        address _exchangeAddress,\\n        address _wosStakingAddress,\\n        address _collateral,\\n        IDistributor _distributorAddress,\\n        IECDSASignature2 _signature,\\n        address _aggAddress,\\n        IUAC _uac,\\n        IMarketplaceRates _mkRates\\n    ) Tax(_wosStakingAddress, _collateral, _aggAddress, _signature, _uac) {\\n        exchangeAddress = _exchangeAddress;\\n        distributor = _distributorAddress;\\n        mkRates = _mkRates;\\n    }\\n\\n    function BuyArtifact(\\n        address contractAddress,\\n        uint256 aType,\\n        uint256 amount\\n    ) external nonReentrant verifyArtifact(contractAddress) {\\n        uac.verifyAll(msg.sender, 1);\\n        require(\\n            artifacts[contractAddress].available > 0,\\n            \\\"There is no availability for this artifact\\\"\\n        );\\n        require(amount > 0, \\\"You must buy at least 1 artifact\\\");\\n        require(amount <= 10, \\\"You can only buy 10 artifacts per transaction\\\");\\n\\n        artifacts[contractAddress].sold += amount;\\n\\n        uint priceModifier = IArtifact(contractAddress).getPriceModifier(aType);\\n        uint256 fPrice = mkRates.getArtifactSalePrice(priceModifier);\\n\\n        for (uint i = 0; i < amount; i++) {\\n            uint256 id = IArtifact(contractAddress).createItem(\\n                msg.sender,\\n                aType\\n            );\\n            _registerSale(contractAddress, id, msg.sender, fPrice, 2, aType);\\n        }\\n\\n        _collateralTransferFrom(msg.sender, address(this), fPrice);\\n        _taxDistribution(fPrice);\\n\\n        uint256 toDistribute = distributor.distributeFunds(\\n            _getPriceWithoutTax(fPrice)\\n        );\\n\\n        if (toDistribute > 0) {\\n            _collateralTransfer(exchangeAddress, toDistribute);\\n        }\\n\\n        _itemsSold.increment();\\n    }\\n\\n    function BuyOilWell(\\n        uint256 bars,\\n        uint256 nonce,\\n        bytes32 intent,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external nonReentrant returns (uint256) {\\n        return\\n            _buyOilWell(msg.sender, bars, nonce, intent, timestamp, signatures);\\n    }\\n\\n    function BuyOilWellWithOwner(\\n        address owner,\\n        uint256 bars,\\n        uint256 nonce,\\n        bytes32 intent,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external nonReentrant returns (uint256) {\\n        require(owner != address(0), \\\"owner cannot be 0\\\");\\n        return _buyOilWell(owner, bars, nonce, intent, timestamp, signatures);\\n    }\\n\\n    function _buyOilWell(\\n        address owner,\\n        uint256 bars,\\n        uint256 nonce,\\n        bytes32 intent,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) private returns (uint256) {\\n        uac.verifyAll(owner, 1);\\n        signature.verifyMessage(\\n            abi.encodePacked(bars).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        address contractAddress = distributor.getOilWellAddress();\\n        uint256 fPrice = mkRates.getOilWellSalePrice(bars);\\n        uint256 priceWithoutTax = _getPriceWithoutTax(fPrice);\\n\\n        uint256 id = distributor.newOilWell(priceWithoutTax, bars, owner);\\n        uint256 supplyAmount = IOilWell(contractAddress).getSupplyAmount(id); //get the amount of CRU of a specific well\\n\\n        _collateralTransferFrom(msg.sender, address(this), fPrice);\\n        _taxDistribution(fPrice);\\n        _collateralTransfer(exchangeAddress, supplyAmount);\\n\\n        _itemsSold.increment();\\n        _oilWellsSold.increment();\\n\\n        _registerSale(contractAddress, id, owner, fPrice, 1, 0);\\n        _intent(owner, intent, id);\\n\\n        return id;\\n    }\\n\\n    function RegisterArtifact(\\n        address contractAddress,\\n        uint256 available,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        uac.verifyGameStatus(1);\\n        signature.verifyMessage(\\n            abi.encodePacked(contractAddress, available).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        _registerArtifact(contractAddress, available);\\n    }\\n\\n    function DeleteArtifact(\\n        address contractAddress,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        uac.verifyGameStatus(1);\\n        signature.verifyMessage(\\n            abi.encodePacked(contractAddress).hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n        _deleteArtifact(contractAddress);\\n    }\\n\\n    function GetArtifactInfo(\\n        address addr\\n    ) external view returns (Artifact memory) {\\n        return _getArtifacInfo(addr);\\n    }\\n\\n    function SetAvailability(\\n        uint256 amount,\\n        address contractAddress,\\n        bool decrease,\\n        bool absolute,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        uac.verifyGameStatus(1);\\n        signature.verifyMessage(\\n            abi\\n                .encodePacked(amount, contractAddress, decrease, absolute)\\n                .hash(),\\n            nonce,\\n            timestamp,\\n            signatures\\n        );\\n\\n        _setAvailability(amount, contractAddress, decrease, absolute);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Security2/Interfaces/IECDSASignature2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IECDSASignature2 {\\n    function verifyMessage(bytes32 messageHash, uint256 nonce, uint256 timestamp, bytes[] memory signatures) external;\\n    function signatureStatus(bytes32 messageHash, uint256 nonce, uint256 timestamp, bytes[] memory signatures) external view returns(uint8);\\n}\"\r\n    },\r\n    \"contracts/Security2/Interfaces/IUAC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\ninterface IUAC {\\n    function verifyUser(address user) external view;\\n    function verifyGameStatus(uint256 _panicLevel) external view;\\n    function verifyAll(address user, uint256 _panicLevel) external view;\\n    function isUserBanned(address user) external view returns (bool);\\n    function getGameStatus() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Security2/libs/ECDSALib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nlibrary ECDSALib {\\n    function hash(bytes memory encodePackedMsg) internal pure returns (bytes32) {\\n        return keccak256(encodePackedMsg);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Security2/Security2Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"./Interfaces/IECDSASignature2.sol\\\";\\nimport \\\"./Interfaces/IUAC.sol\\\";\\nimport \\\"./libs/ECDSALib.sol\\\";\\n\\nabstract contract Security2Base {\\n    IECDSASignature2 internal signature;\\n    IUAC internal uac;\\n\\n    constructor(IECDSASignature2 _signature, IUAC _uac) {\\n        require(address(_signature) != address(0), \\\"Signature cannot be zero\\\");\\n        require(address(_uac) != address(0), \\\"Uac cannot be zero\\\");\\n        signature = _signature;\\n        uac = _uac;\\n    }\\n\\n    function setUAC(\\n        IUAC _uac,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        bytes32 hash = keccak256(abi.encodePacked(address(_uac), msg.sender));\\n        signature.verifyMessage(hash, nonce, timestamp, signatures);\\n        uac = _uac;\\n    }\\n\\n    function setSignatureAuditor(\\n        IECDSASignature2 _signature,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes[] memory signatures\\n    ) external {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(address(_signature), msg.sender)\\n        );\\n        signature.verifyMessage(hash, nonce, timestamp, signatures);\\n        signature = _signature;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/util/CriticalTracer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract CriticalTracer is Ownable {\\n    string private trace;\\n    bool private enabled = false;\\n\\n    function _ctMsg(string memory message) internal view returns (string memory) {\\n        if (!enabled) return message;\\n        return string.concat(message, \\\"; \\\", trace);\\n    }\\n\\n    function _ctSign(string memory sign) internal {\\n        trace = sign;\\n    }\\n\\n    function setTracerStatus(bool enable) onlyOwner public {\\n        enabled = enable;\\n    }\\n\\n    function getTracerStatus() public view returns (bool) {\\n        return enabled;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wosStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IDistributor\",\"name\":\"_distributorAddress\",\"type\":\"address\"},{\"internalType\":\"contract IECDSASignature2\",\"name\":\"_signature\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggAddress\",\"type\":\"address\"},{\"internalType\":\"contract IUAC\",\"name\":\"_uac\",\"type\":\"address\"},{\"internalType\":\"contract IMarketplaceRates\",\"name\":\"_mkRates\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"intent\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"IntentSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aType\",\"type\":\"uint256\"}],\"name\":\"MarketItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bars\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"intent\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"BuyOilWell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bars\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"intent\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"BuyOilWellWithOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"DeleteArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetArtifactInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketplaceBase.Artifact\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"RegisterArtifact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"decrease\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"absolute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"SetAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"extractCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTracerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setDecimalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReferralTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setGlobalFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IECDSASignature2\",\"name\":\"_signature\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setSignatureAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newReferralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setStakingAndReferralAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxStakingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTaxDGPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTaxJSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTaxAggPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTaxOpPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTaxSlPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxDGPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setTracerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUAC\",\"name\":\"_uac\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setUAC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WosMarketplace", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000008267992845fd3745f4ed633105c35bdf97d259e000000000000000000000000d6da8baeb714f101f512535ba259519a2299f96a000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000067c945d5336a968262ea2ee47e9c05f5524c708e000000000000000000000000d0566d6bbaaf33a4eeec3503600cf496f2f1c2d1000000000000000000000000b6e9650446ea0ba0200fc85c17d23b34946c542f000000000000000000000000dce960267ed8a8ec99ce2434a6b9b91f36217d500000000000000000000000003f0f903ddc4048d107b2b4d2926e510131c7f15b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}