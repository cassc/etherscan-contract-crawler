{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oldUsers/MultiPort.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract MultiPort {\\n\\n    address factory;\\n\\n    constructor(address _factoryAddr) {\\n        factory = _factoryAddr;\\n    }\\n\\n    function distribute(address[] calldata members, uint256[] calldata fractions) public {\\n        require(msg.sender == factory, \\\"only Factory can distribute\\\");\\n        uint256 balance = address(this).balance;\\n        uint256 len = members.length;\\n        for(uint256 i; i < len; i++) {\\n            payable(members[i]).transfer(balance * fractions[i]/1000);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"contracts/oldUsers/OldUsers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MultiPort.sol\\\";\\n\\ncontract OldUsers {\\n\\n    MultiPort[] _ports_;\\n\\n    address[] _members_;\\n    mapping(address => uint256) _fractions_;\\n\\n\\n    constructor(address[] memory _members, uint256[] memory _fractions, uint256 numPorts) {\\n        require(\\n            _members.length == _fractions.length, \\n            \\\"_fractions_ and _members_ length difference\\\"\\n        );\\n        uint256 denom;\\n        for(uint256 i; i < _fractions.length; i++) {\\n            denom += _fractions[i];\\n            _fractions_[_members[i]] = _fractions[i];\\n        }\\n        require(denom == 1000, \\\"wrong denominator sum\\\");\\n        _members_ = _members;\\n\\n        for(uint256 i; i < numPorts; i++) {\\n            _ports_.push(newPort());\\n        }\\n    }\\n\\n    function ports() public view returns(address[] memory temp) {\\n        uint256 len = _ports_.length;\\n        temp = new address[](len);\\n\\n        for(uint256 i; i < len; i++) {\\n            temp[i] = address(_ports_[i]);\\n        }\\n    }\\n\\n    function members() public view returns(address[] memory temp) {\\n        uint256 len = _members_.length;\\n        temp = new address[](len);\\n\\n        for(uint256 i; i < len; i++) {\\n            temp[i] = _members_[i];\\n        }\\n    }\\n\\n    function fractions() public view returns(uint256[] memory temp) {\\n        uint256 len = _members_.length;\\n        temp = new uint256[](len);\\n\\n        for(uint256 i; i < len; i++) {\\n            temp[i] = _fractions_[_members_[i]];\\n        }\\n    }\\n\\n    function newPort() private returns(MultiPort mp) {\\n        mp = new MultiPort(address(this));\\n    }\\n\\n    function changeAddr(address newAddr) public {\\n        address oldAddr = msg.sender;\\n        uint256 len = _members_.length;\\n        bool oldAddrExists;\\n        uint256 oldIndex;\\n        \\n        for(uint256 i; i < len; i++) {\\n            if (oldAddr == _members_[i]) {\\n                oldIndex = i;\\n                oldAddrExists = true;\\n                break;\\n            }\\n        }\\n        require(oldAddrExists, \\\"you are not exist in the contract\\\");\\n\\n        _members_[oldIndex] = _members_[len-1];\\n        _members_.pop();\\n        _members_.push(newAddr);\\n\\n        _fractions_[newAddr] = _fractions_[oldAddr];\\n        delete _fractions_[oldAddr];\\n    }\\n\\n    function distribute() public {\\n        uint256 portsLen = _ports_.length;\\n\\n        address[] memory _members = _members_; \\n        uint256 membersLen = _members_.length;\\n        uint256[] memory _fractions = new uint256[](membersLen);\\n\\n        for(uint256 i; i < membersLen; i++) {\\n            _fractions[i] = _fractions_[_members[i]];\\n        }\\n\\n        for(uint256 i; i < portsLen; i++) {\\n            _ports_[i].distribute(_members, _fractions);\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fractions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numPorts\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fractions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"temp\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"temp\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ports\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"temp\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OldUsers", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000090000000000000000000000007c3f1f39de2d87f20351b8633302e2f5e630070b0000000000000000000000005c8d6c154bb6245249b0c942c8779d6ebb85abf9000000000000000000000000f141be0f6c9bee28f3d12bb64f1e5ad0889874360000000000000000000000002d76d3bbc10f5bc44e50e1229de0b0941f92f4e30000000000000000000000009a58b3bf416e4c75355bfaf37ed9444821f8536a0000000000000000000000009b8e439ebacda90884399dcd29123bacbdbe3726000000000000000000000000004ac478c40624ef6a80048b25495ed6750d7ce3000000000000000000000000d6029374697b914e32a5a7c14ddbb37cd8aa658b000000000000000000000000d6137270b517ad7df4733d5c618fc5606d4cc770000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000a6000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000a70000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000091", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}