{"SourceCode": "pragma solidity ^0.8.12;\r\n\r\ninterface tokenInterface {\r\n  function totalSupply () external view returns (uint);\r\n  function balanceOf (address _address) external view returns (uint);\r\n  function mintLimit () external view returns (uint);\r\n  function minted () external view returns (uint);  \r\n  function mintCompleted() external view returns (bool);\r\n  function setMintedOrdinalsPerAddress(address _from) external;\r\n}\r\n\r\ncontract MinereumEvmOrdinals\r\n{\r\n\t\r\naddress public owner;\t\r\nuint public fee = 0;\r\nbool public blockCreation = false;\r\nuint public tokensCount = 0;\r\nstring public site = \"evmordinals.com/\";\r\nuint public symbolBytesLimit = 4;\r\n\r\nstring[] public ordinals;\r\naddress public outerAddress;\r\n\r\nmapping(string => address) tokens;\r\nmapping(string => uint) tokensOrdinals;\r\nmapping(address => string) tokensOrdinalsSymbol;\r\nmapping(address => uint) tokensAddressOrdinal;\r\nmapping(address => uint[]) deployedOrdinals;\r\nmapping(address => address[]) mintedOrdinalsPerAddress;\r\n\r\nconstructor(string memory chain) {\r\n\towner = msg.sender;\r\n\touterAddress = msg.sender;\r\n\tsite = string.concat(site, chain);\r\n\tsite = string.concat(site, \"/search?tick=\");\r\n}\r\n\r\nevent CreateTokenHistory(address indexed _owner, string indexed _symbol, address indexed _address, uint _supply, uint _mintLimit);\r\n\r\nfunction deploy(string memory symbol, uint supply, uint mintLimit) public payable \r\n{\r\n\tsymbol = strUpper(symbol);\r\n\t\r\n\tif (tokens[symbol] != 0x0000000000000000000000000000000000000000)\r\n\t\trevert('Symbol already exists');\r\n\t\r\n\tif (fee > 0)\r\n\t{\r\n\t\tif (!(msg.value == fee)) revert('invalid fee amount');\r\n\t}\r\n\t\r\n\tif (blockCreation) revert('creation blocked, see website for latest info');\r\n\t\r\n\tif (!(bytes(symbol).length == symbolBytesLimit)) revert('');\r\n\t\r\n\tToken token = new Token(site, msg.sender, symbol, supply, mintLimit, address(this));\r\n\t\r\n\tordinals.push(symbol);\r\n\ttokensOrdinals[symbol] = ordinals.length - 1;\r\n\ttokens[symbol] = address(token);\r\n\ttokensAddressOrdinal[address(token)] = ordinals.length - 1;\r\n\ttokensOrdinalsSymbol[address(token)] = symbol;\r\n\t\t\r\n\temit CreateTokenHistory(msg.sender, symbol, address(token), supply, mintLimit);\r\n\ttokensCount++;\t\r\n\t\r\n\tdeployedOrdinals[msg.sender].push(ordinals.length - 1);\r\n}\r\n\r\nfunction strUpper(string memory value) public pure returns (string memory) \r\n{\r\n    bytes memory bytesValue = bytes(value);\r\n    \r\n    bytes memory bytesLower = new bytes(bytesValue.length);\r\n    \r\n    for (uint i = 0; i < bytesValue.length; i++)\r\n    {\r\n        if (( uint8(bytesValue[i]) >= 97) && (uint8(bytesValue[i]) <= 122))\r\n        {\t\t\t\t\r\n            bytesLower[i] = bytes1(uint8(bytesValue[i]) - 32);\r\n        } \r\n        else \r\n        {\r\n            bytesLower[i] = bytesValue[i];\r\n        }\r\n    }\r\n\treturn string(bytesLower);\r\n}\r\n\r\nfunction ordinalsLength() public view returns (uint)\r\n{\r\n    return ordinals.length;\r\n}\r\n\r\nfunction getOrdinalsAt(uint i) public view returns (string memory)\r\n{\r\n\treturn ordinals[i];\r\n}\r\n\r\nfunction getTokenAddress(string memory symbol) public view returns (address)\r\n{\r\n\tsymbol = strUpper(symbol);\r\n\treturn tokens[symbol];\r\n}\r\n\r\nfunction getTokenOrdinal(string memory symbol) public view returns (uint)\r\n{\r\n\tsymbol = strUpper(symbol);\r\n\treturn tokensOrdinals[symbol];\r\n}\r\n\r\nfunction getDeployedOrdinals(address _owner) public view returns (uint[] memory)\r\n{\t\r\n\treturn deployedOrdinals[_owner];\r\n}\r\n\r\nfunction getDeployedOrdinalsLength(address _owner) public view returns (uint)\r\n{\t\r\n\treturn deployedOrdinals[_owner].length;\r\n}\r\n\r\nfunction getTokensAddressOrdinal(address _address) public view returns (uint)\r\n{\r\n\treturn tokensAddressOrdinal[_address];\r\n}\r\n\r\nfunction getTokenDirectTotalSupply(address _address) public view returns (uint)\r\n{\r\n\ttokenInterface ti = tokenInterface(_address);\r\n\treturn ti.totalSupply();\r\n}\r\n\r\nfunction getTokenDirectMintLimit(address _address) public view returns (uint)\r\n{\r\n\ttokenInterface ti = tokenInterface(_address);\r\n\treturn ti.mintLimit();\r\n}\r\n\r\nfunction getTokenDirectTotalMinted(address _address) public view returns (uint)\r\n{\r\n\ttokenInterface ti = tokenInterface(_address);\r\n\treturn ti.minted();\r\n}\r\n\r\nfunction getTokenDirectMintCompleted(address _address) public view returns (bool)\r\n{\r\n\ttokenInterface ti = tokenInterface(_address);\r\n\treturn ti.mintCompleted();\r\n}\r\n\r\nfunction getMintedOrdinalsPerAddressLength(address _address) public view returns (uint)\r\n{\r\n\treturn mintedOrdinalsPerAddress[_address].length;\r\n}\r\n\r\nfunction getMintedOrdinalsPerAddressAt(address _address, uint i) public view returns (address)\r\n{\r\n\treturn mintedOrdinalsPerAddress[_address][i];\r\n}\r\n\r\nfunction ListOrdinals(uint _startingIndex, uint _recordsLength) public view returns (uint[] memory _ordinals, string[] memory _symbols, address[] memory _contractAddress, uint[] memory _supply, uint[] memory _limit, uint[] memory _minted, bool[] memory _mintCompleted)\r\n{\t\r\n\ttokenInterface ti;\r\n\t\r\n\tif (_recordsLength > ordinals.length)\r\n       _recordsLength = ordinals.length;\r\n   \r\n    _ordinals = new uint[](_recordsLength);\r\n\t_symbols = new string[](_recordsLength);\r\n\t_contractAddress = new address[](_recordsLength);\r\n\t_supply =  new uint[](_recordsLength);\r\n\t_limit = new uint[](_recordsLength);\r\n\t_minted = new uint[](_recordsLength);\r\n\t_mintCompleted = new bool[](_recordsLength);\r\n\t\r\n    uint count = 0;\r\n\tfor(uint i = _startingIndex; i < (_startingIndex + _recordsLength) && i < ordinals.length; i++){\r\n        _ordinals[count] = i;\r\n\t\t_symbols[count] = ordinals[i];\r\n\t\t_contractAddress[count] = tokens[ordinals[i]];\r\n\t\tti = tokenInterface(_contractAddress[count]);\r\n\t\t_supply[count] = ti.totalSupply();\r\n\t\t_limit[count] = ti.mintLimit();\r\n\t\t_minted[count] = ti.minted();\r\n\t\t_mintCompleted[count] = ti.mintCompleted();\r\n\t\tcount++;\r\n    }\r\n}\r\n\r\nfunction ListDeployedByOwner(address _address, uint _startingIndex, uint _recordsLength) public view returns (uint[] memory _ordinals, string[] memory _symbols, address[] memory _contractAddress)\r\n{\t\r\n\tif (_recordsLength > deployedOrdinals[_address].length)\r\n       _recordsLength = deployedOrdinals[_address].length;\r\n   \r\n    _ordinals = new uint[](_recordsLength);\r\n\t_symbols = new string[](_recordsLength);\r\n\t_contractAddress = new address[](_recordsLength);\t\r\n\t\r\n    uint count = 0;\r\n\tfor(uint i = _startingIndex; i < (_startingIndex + _recordsLength) && i < deployedOrdinals[_address].length; i++){\r\n\r\n        uint j = deployedOrdinals[_address][i];\r\n        _ordinals[count] = j;\r\n\t\t_symbols[count] = ordinals[j];\r\n\t\t_contractAddress[count] = tokens[ordinals[j]];\r\n\t\tcount++;\r\n    }\r\n}\r\n\r\nfunction ListOrdinalsBalance(address _address, uint _startingIndex, uint _recordsLength) public view returns (string[] memory _symbols, address[] memory _contractAddress, uint[] memory _balances)\r\n{\t\r\n\ttokenInterface ti;\r\n\t\r\n\tif (_recordsLength > ordinals.length)\r\n       _recordsLength = ordinals.length;\r\n   \r\n    _symbols = new string[](_recordsLength);\r\n\t_contractAddress = new address[](_recordsLength);\r\n\t_balances =  new uint[](_recordsLength);\r\n\t\r\n\t\r\n    uint count = 0;\r\n\tfor(uint i = _startingIndex; i < (_startingIndex + _recordsLength) && i < mintedOrdinalsPerAddress[_address].length; i++){\r\n\t\tuint j = tokensAddressOrdinal[mintedOrdinalsPerAddress[_address][i]];\r\n\t\t_symbols[count] = ordinals[j];\r\n\t\t_contractAddress[count] = tokens[ordinals[j]];\r\n\t\tti = tokenInterface(_contractAddress[count]);\r\n\t\t_balances[count] = ti.balanceOf(_address);\r\n\t\tcount++;\r\n    }\r\n}\r\n\r\nfunction setFee(uint value) public\r\n{\r\n\tif(msg.sender == owner)\r\n\t\tfee = value;\r\n\telse\r\n\t\trevert();\r\n}\r\n\r\nfunction setSymbolBytesLimit(uint value) public\r\n{\r\n\tif(msg.sender == owner)\r\n\t\tsymbolBytesLimit = value;\r\n\telse\r\n\t\trevert();\r\n}\r\n\t\r\nfunction setBlockCreation(bool value) public\r\n{\r\n\tif(msg.sender == owner)\r\n\t\tblockCreation = value;\r\n\telse\r\n\t\trevert();\r\n}\r\n\r\nfunction setSite(string memory value) public\r\n{\r\n\tif(msg.sender == owner)\r\n\t\tsite = value;\r\n\telse\r\n\t\trevert();\r\n}\r\n\r\nfunction release() public\r\n{\r\n\taddress payable add = payable(outerAddress);\r\n\tif(!add.send(address(this).balance)) revert();\r\n}\r\n\r\nfunction setOuterAddress(address _address) public\r\n{\r\n\tif(msg.sender == owner)\r\n\t\touterAddress = _address;\r\n\telse\r\n\t\trevert();\r\n}\r\n\r\nfunction setMintedOrdinalsPerAddress(address _from) public\r\n{\r\n    if(bytes(tokensOrdinalsSymbol[msg.sender]).length > 0)\r\n\t{\r\n\t\tmintedOrdinalsPerAddress[_from].push(msg.sender);\r\n\t}\r\n\telse\r\n\t\trevert('Ordinal Not Recognized');\r\n}\r\n\r\n}\r\n\r\ncontract Token {\r\n    string public symbol = \"\";\r\n    string public name = \"\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public _totalSupply = 0;\r\n\tuint256 public _mintLimit = 0;\r\n    uint public _minted = 0;\r\n\taddress public deployer;\r\n\taddress public factory;\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n \r\n    mapping(address => uint256) balances;\r\n \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n \r\n    constructor(string memory csite, address cadr, string memory ctokenSymbol, uint ctokenSupply, uint cmintLimit, address cfactory) {\r\n\t\tdeployer = cadr;\r\n        symbol = ctokenSymbol;\r\n        name = string.concat(csite, ctokenSymbol);\r\n\t\t_totalSupply = ctokenSupply * 1000000000000000000;\r\n\t\t_mintLimit = cmintLimit * 1000000000000000000;\r\n        factory = cfactory;\r\n\t\t\r\n\t\tif (_mintLimit > _totalSupply) revert('invalid supply/mintlimit ratio');\r\n    }\r\n\t\r\n\tfunction mint(uint amount, uint repeat) public\r\n\t{\r\n\t\tfor (uint i = 0; i < repeat; i++)\r\n\t\t{\r\n\t\t\tif (_minted >= _totalSupply) revert('minted exceeds supply');\r\n\t\t\tif ((_minted + amount) > _totalSupply) revert('mint exceeds supply');\r\n\t\t\tif (amount > _mintLimit) revert('amount exceeds mint limit');\r\n\t\t\tbalances[msg.sender] += amount;\t\t\t\t\r\n\t\t\t_minted += amount;\t\t\t\t\t\r\n\t\t\temit Transfer(address(this), msg.sender, amount);\r\n\t\t\ttokenInterface ti = tokenInterface(factory);\r\n\t\t\tti.setMintedOrdinalsPerAddress(msg.sender);\r\n\t\t}\t\t\r\n\t}\r\n   \r\n    function totalSupply() public view returns (uint256) {        \r\n        return _totalSupply;\r\n    }\r\n\t\r\n\tfunction mintLimit() public view returns (uint256) {        \r\n        return _mintLimit;\r\n    }\r\n\t\r\n\tfunction minted() public view returns (uint256) {        \r\n        return _minted;\r\n    }\r\n\t\r\n\tfunction mintCompleted() public view returns (bool)\r\n\t{\r\n\t\treturn (_minted == _totalSupply);\t\r\n\t}\r\n \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )  public returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"CreateTokenHistory\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recordsLength\",\"type\":\"uint256\"}],\"name\":\"ListDeployedByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ordinals\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recordsLength\",\"type\":\"uint256\"}],\"name\":\"ListOrdinals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ordinals\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supply\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minted\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_mintCompleted\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recordsLength\",\"type\":\"uint256\"}],\"name\":\"ListOrdinalsBalance\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"_symbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDeployedOrdinals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDeployedOrdinalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getMintedOrdinalsPerAddressAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMintedOrdinalsPerAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getOrdinalsAt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenDirectMintCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenDirectMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenDirectTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenDirectTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenOrdinal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokensAddressOrdinal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordinals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordinalsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlockCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"setMintedOrdinalsPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOuterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setSite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSymbolBytesLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"site\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"strUpper\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbolBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MinereumEvmOrdinals", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000007706f6c79676f6e00000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be66b6568b44fdd869e84295ecf3a02316ae375ac15eda6a9e2a6aaf82f28f18"}