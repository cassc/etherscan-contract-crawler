{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n   __  __      ____                 __ \r\n  / / / /___  / __/________  ____  / /_\r\n / / / / __ \\/ /_/ ___/ __ \\/ __ \\/ __/\r\n/ /_/ / /_/ / __/ /  / /_/ / / / / /_  \r\n\\____/ .___/_/ /_/   \\____/_/ /_/\\__/  \r\n    /_/                                \r\n\r\n  Transparent Upgradeable Proxy\r\n\r\n  Authors: <dotfx>\r\n  Date: 2023/04/11\r\n  Version: 1.0.0\r\n  Web: https://upfrontdefi.com/\r\n*/\r\n\r\npragma solidity >=0.8.18 <0.9.0;\r\n\r\nlibrary Address {\r\n  function isContract(address _contract) internal view returns (bool) {\r\n    return _contract.code.length > 0;\r\n  }\r\n}\r\n\r\nlibrary StorageSlot {\r\n  function getAddressSlot(bytes32 _slot) internal view returns (address) {\r\n    address addr;\r\n\r\n    assembly {\r\n      addr := sload(_slot)\r\n    }\r\n\r\n    return addr;\r\n  }\r\n\r\n  function setAddressSlot(bytes32 _slot, address _addr) internal {\r\n    assembly {\r\n      sstore(_slot, _addr)\r\n    }\r\n  }\r\n}\r\n\r\ncontract upfrontTransparentUpgradeableProxy {\r\n  bytes32 private constant ADMIN_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1);\r\n  bytes32 private constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1);\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event ImplementationUpgraded(address indexed implementation);\r\n\r\n  modifier isOwner() {\r\n    if (msg.sender == _getOwner()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  constructor() payable {\r\n    _setOwner(msg.sender);\r\n  }\r\n\r\n  receive() external payable virtual { _fallback(); }\r\n  fallback() external payable virtual { _fallback(); }\r\n\r\n  function owner() external view returns (address) {\r\n    return _getOwner();\r\n  }\r\n\r\n  function setOwner(address newOwner) external virtual isOwner {\r\n    require(newOwner != address(0));\r\n\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function getImplementation() external view returns (address) {\r\n    return _getImplementation();\r\n  }\r\n\r\n  function setImplementation(address payable _implementation) external payable isOwner {\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  function _getOwner() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(ADMIN_SLOT);\r\n  }\r\n\r\n  function _setOwner(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n\r\n    address oldOwner = _getOwner();\r\n\r\n    StorageSlot.setAddressSlot(ADMIN_SLOT, newOwner);\r\n\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function _getImplementation() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT);\r\n  }\r\n\r\n  function _setImplementation(address _implementation) internal {\r\n    require(Address.isContract(_implementation), \"Not a contract.\");\r\n\r\n    StorageSlot.setAddressSlot(IMPLEMENTATION_SLOT, _implementation);\r\n\r\n    emit ImplementationUpgraded(_implementation);\r\n  }\r\n\r\n  function _delegate(address _implementation) internal virtual returns (bytes memory) {\r\n    assembly {\r\n      let csize := calldatasize()\r\n\r\n      calldatacopy(0, 0, csize)\r\n\r\n      let result := delegatecall(gas(), _implementation, 0, csize, 0, 0)\r\n      let rsize := returndatasize()\r\n\r\n      returndatacopy(0, 0, rsize)\r\n\r\n      switch result\r\n        case 0 { revert(0, rsize) }\r\n        default { return(0, rsize) }\r\n    }\r\n  }\r\n\r\n  function _fallback() internal virtual {\r\n    _delegate(_getImplementation());\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "upfrontTransparentUpgradeableProxy", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x521fa5d1b39fb2812c4dff58291b7918e7ca187f", "SwarmSource": "ipfs://cecd68c87b9acc8205f8c9f5a1da2082f83007aa40cdd52d69d13d83d5925ef5"}