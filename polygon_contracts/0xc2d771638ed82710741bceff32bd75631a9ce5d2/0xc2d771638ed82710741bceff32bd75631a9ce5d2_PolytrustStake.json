{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\ncontract Polytrust is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    event regLevelEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _time\r\n    );\r\n    event buyLevelEvent(address indexed _user, uint256 _level, uint256 _time);\r\n\r\n    mapping(uint256 => uint256) public LEVEL_PRICE;\r\n    uint256 REFERRER_1_LEVEL_LIMIT;\r\n\r\n    uint256 directpercentage;\r\n    uint256 indirectpercentage;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        uint256 currentLevel;\r\n        uint256 earnedAmount;\r\n        uint256 totalearnedAmount;\r\n        address[] referral;\r\n        address[] allDirect;\r\n        uint256 childCount;\r\n        uint256 upgradeAmount;\r\n        uint256 upgradePending;\r\n        mapping(uint256 => uint256) levelEarningmissed;\r\n    }\r\n\r\n    mapping(address => UserStruct) public users;\r\n\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currUserID;\r\n    uint256 public totalUsers;\r\n    address public ownerWallet;\r\n    uint256 public adminFee;\r\n    address[] public joinedAddress;\r\n    mapping(address => uint256) public userJoinTimestamps;\r\n    uint256 public totalProfit;\r\n    uint256 public totalDays;\r\n\r\n    uint256 public initialRoi;\r\n    uint256 public allRoi;\r\n    uint256 public roiLaunchTime;\r\n    mapping(address => uint256) public userUpgradetime;\r\n    mapping(address => uint256) public roiEndTime;\r\n    mapping(address => uint256) public roiStartTime;\r\n\r\n    function viewUserReferral(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function getmissedvalue(\r\n        address _userAddress,\r\n        uint256 _level\r\n    ) public view returns (uint256) {\r\n        return users[_userAddress].levelEarningmissed[_level];\r\n    }\r\n\r\n    function viewallDirectUserReferral(\r\n        address _user\r\n    ) public view returns (address[] memory) {\r\n        return users[_user].allDirect;\r\n    }\r\n}\r\n\r\ncontract PolytrustStake is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    event regLevelEvent(\r\n        address indexed _user,\r\n        uint256 _amount,\r\n        uint256 _time,\r\n        uint256 _type\r\n    );\r\n    event claimEvent(address indexed _user, uint256 _amount);\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 currentAmount;\r\n        uint256 earnedAmount;\r\n        uint256 totalearnedAmount;\r\n        uint256 activeTimestamp;\r\n        bool isClaim;\r\n        uint256[] joinedTimestamp;\r\n        uint256[] joinedAmount;\r\n    }\r\n    uint256 public totalEarn;\r\n    uint256 public totalDeposit;\r\n    mapping(address => UserStruct) public users;\r\n\r\n    mapping(uint256 => address) public userList;\r\n\r\n    uint256 public currUserID;\r\n    uint256 public totalUsers;\r\n    address public ownerWallet;\r\n    uint256 public adminFee;\r\n    uint256 public totalProfit;\r\n    uint256 public rewardPercent;\r\n    uint256 public minInvestment;\r\n    uint256 public maxInvestment;\r\n\r\n    Polytrust public polytrust;\r\n    PolytrustStake public oldPolytruststake;\r\n    address public migrateOwner;\r\n\r\n    constructor() public {\r\n        ownerWallet = address(0xF24362C2be0E2d397d0fb7D5fb4269A2DBd0b8B2);\r\n        adminFee = 1; // 1%\r\n        polytrust = Polytrust(0x21d8c29C908355989ef392676Af3DF29A71f9bA9);\r\n        minInvestment = 30 * 1e18;\r\n        maxInvestment = 1000 * 1e18;\r\n        rewardPercent = 102;\r\n        oldPolytruststake = PolytrustStake(\r\n            0x99b9024622355aD1f6805Fc09779032af1c119D2\r\n        );\r\n        migrateOwner = address(0x689CB5f6EEA607073bd63aFDa3F289F29291f57A);\r\n    }\r\n\r\n    function oldPolytrustSync(uint256 oldId, uint limit) public {\r\n        require(msg.sender == migrateOwner, \"Access denied\");\r\n        for (uint i = 0; i < limit; i++) {\r\n            UserStruct memory olduser;\r\n            address oldusers = oldPolytruststake.userList(oldId);\r\n\r\n            (\r\n                olduser.isExist,\r\n                olduser.id,\r\n                olduser.currentAmount,\r\n                olduser.earnedAmount,\r\n                olduser.totalearnedAmount,\r\n                olduser.activeTimestamp,\r\n                olduser.isClaim\r\n            ) = oldPolytruststake.users(oldusers);\r\n\r\n            if (olduser.isExist) {\r\n                users[oldusers].isExist = olduser.isExist;\r\n                users[oldusers].id = olduser.id;\r\n                users[oldusers].currentAmount = olduser.currentAmount;\r\n                users[oldusers].earnedAmount = olduser.earnedAmount;\r\n                users[oldusers].totalearnedAmount = olduser.totalearnedAmount;\r\n                users[oldusers].activeTimestamp = olduser.activeTimestamp;\r\n                users[oldusers].isClaim = olduser.isClaim;\r\n                users[oldusers].joinedTimestamp = oldPolytruststake\r\n                    .getUserDeposittime(oldusers);\r\n                users[oldusers].joinedAmount = oldPolytruststake\r\n                    .getUserDepositAmount(oldusers);\r\n                userList[olduser.id] = oldusers;\r\n                oldId++;\r\n            }\r\n        }\r\n        currUserID = oldPolytruststake.currUserID();\r\n        totalUsers = oldPolytruststake.totalUsers();\r\n        totalDeposit = oldPolytruststake.totalDeposit();\r\n        totalEarn = oldPolytruststake.totalEarn();\r\n    }\r\n\r\n    function regUser() public payable noReentrant {\r\n        require(!users[msg.sender].isExist, \"User exist\");\r\n        (bool isExist, , , uint256 currentLevel, , , , , ) = polytrust.users(\r\n            msg.sender\r\n        );\r\n        require(isExist && currentLevel >= 2, \"User not part of polytrust\");\r\n        require(\r\n            msg.value >= minInvestment && msg.value <= maxInvestment,\r\n            \"Amount not valid\"\r\n        );\r\n        currUserID++;\r\n        totalUsers++;\r\n        UserStruct storage user = users[msg.sender];\r\n        user.isExist = true;\r\n        user.id = currUserID;\r\n        user.isClaim = false;\r\n        user.earnedAmount = 0;\r\n        user.currentAmount = msg.value;\r\n        user.activeTimestamp = block.timestamp;\r\n        user.joinedTimestamp.push(block.timestamp);\r\n        user.joinedAmount.push(msg.value);\r\n        userList[currUserID] = msg.sender;\r\n        totalDeposit += msg.value;\r\n        emit regLevelEvent(msg.sender, msg.value, block.timestamp, 1);\r\n    }\r\n\r\n    function reJoin() public payable noReentrant {\r\n        UserStruct storage user = users[msg.sender];\r\n        require(user.isExist, \"User not exist\");\r\n        require(checkUserRejoin(msg.sender), \"User already active\");\r\n        require(\r\n            msg.value >= minInvestment && msg.value <= maxInvestment,\r\n            \"Amount not valid\"\r\n        );\r\n        if (!user.isClaim) {\r\n            uint256 earnedVal = (user.currentAmount * rewardPercent) / 100;\r\n            user.earnedAmount += earnedVal;\r\n            uint256 withdrawFee = (user.earnedAmount * adminFee) / 100;\r\n            uint256 userAmount = user.earnedAmount - withdrawFee;\r\n            payable(msg.sender).transfer(userAmount);\r\n            payable(ownerWallet).transfer(withdrawFee);\r\n            user.totalearnedAmount += user.earnedAmount;\r\n            totalEarn += user.earnedAmount;\r\n            user.earnedAmount = 0;\r\n            user.isClaim = true;\r\n            emit claimEvent(msg.sender, userAmount);\r\n        }\r\n        user.isClaim = false;\r\n        user.currentAmount = msg.value;\r\n        user.activeTimestamp = block.timestamp;\r\n        user.joinedTimestamp.push(block.timestamp);\r\n        user.joinedAmount.push(msg.value);\r\n        totalDeposit += msg.value;\r\n        emit regLevelEvent(msg.sender, msg.value, block.timestamp, 2);\r\n    }\r\n\r\n    function claimReward() public {\r\n        UserStruct storage user = users[msg.sender];\r\n        require(user.isExist, \"User not exist\");\r\n        require(checkUserRejoin(msg.sender), \"User already active\");\r\n        require(!user.isClaim, \"User already Claimed\");\r\n        uint256 earnedVal = (user.currentAmount * rewardPercent) / 100;\r\n        user.earnedAmount += earnedVal;\r\n        uint256 withdrawFee = (user.earnedAmount * adminFee) / 100;\r\n        uint256 userAmount = user.earnedAmount - withdrawFee;\r\n        payable(msg.sender).transfer(userAmount);\r\n        payable(ownerWallet).transfer(withdrawFee);\r\n        user.totalearnedAmount += user.earnedAmount;\r\n        totalEarn += user.earnedAmount;\r\n        user.isClaim = true;\r\n        user.earnedAmount = 0;\r\n        emit claimEvent(msg.sender, userAmount);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == ownerWallet, \"Not an Owner\");\r\n    }\r\n\r\n    function checkUserRejoin(address _user) public view returns (bool) {\r\n        if (block.timestamp - users[_user].activeTimestamp > 86400) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getUserDeposittime(\r\n        address _user\r\n    ) public view returns (uint256[] memory) {\r\n        return users[_user].joinedTimestamp;\r\n    }\r\n\r\n    function getUserDepositAmount(\r\n        address _user\r\n    ) public view returns (uint256[] memory) {\r\n        return users[_user].joinedAmount;\r\n    }\r\n\r\n    function getJoinLength(address _user) public view returns (uint256) {\r\n        return users[_user].joinedAmount.length;\r\n    }\r\n\r\n    function availablePending(address _user) public view returns (uint256) {\r\n        UserStruct storage user = users[_user];\r\n        require(user.isExist, \"User not exist\");\r\n        uint256 earnedVal = 0;\r\n        if (block.timestamp - users[_user].activeTimestamp > 86400) {\r\n            earnedVal = (user.currentAmount * rewardPercent) / 100;\r\n        }\r\n        return earnedVal;\r\n    }\r\n\r\n    function safeWithDraw(uint256 _amount, address payable addr) public {\r\n        require(msg.sender == ownerWallet, \"Not an Owner\");\r\n        addr.transfer(_amount);\r\n    }\r\n\r\n    function updateNewPolytrust(address _polytrustContract) public {\r\n        require(msg.sender == ownerWallet, \"Not an Owner\");\r\n        polytrust = Polytrust(_polytrustContract);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"availablePending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserRejoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getJoinLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDeposittime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"oldPolytrustSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPolytruststake\",\"outputs\":[{\"internalType\":\"contract PolytrustStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polytrust\",\"outputs\":[{\"internalType\":\"contract Polytrust\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reJoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"safeWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polytrustContract\",\"type\":\"address\"}],\"name\":\"updateNewPolytrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalearnedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PolytrustStake", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c730c6719c90db08016a89386edf05f1eb166f06d6e4aba69a7e30e37caa2cbe"}