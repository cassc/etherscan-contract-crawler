{"SourceCode": "// File: @openzeppelin/contracts@4.9/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.9/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(\r\n    uint64 subId\r\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: Games/Common.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBankRoll {\r\n    function getIsGame(address game) external view returns (bool);\r\n\r\n    function getIsValidWager(\r\n        address game,\r\n        address tokenAddress\r\n    ) external view returns (bool);\r\n\r\n    function transferPayout(\r\n        address player,\r\n        uint256 payout,\r\n        address token\r\n    ) external;\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function isPlayerSuspended(\r\n        address player\r\n    ) external view returns (bool, uint256);\r\n}\r\n\r\ninterface IVRFCoordinatorV2 is VRFCoordinatorV2Interface {\r\n    function getFeeConfig()\r\n        external\r\n        view\r\n        returns (\r\n            uint32,\r\n            uint32,\r\n            uint32,\r\n            uint32,\r\n            uint32,\r\n            uint24,\r\n            uint24,\r\n            uint24,\r\n            uint24\r\n        );\r\n}\r\n\r\ncontract Common is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public VRFFees;\r\n    address public ChainLinkVRF;\r\n\r\n    AggregatorV3Interface public LINK_ETH_FEED;\r\n    IVRFCoordinatorV2 public IChainLinkVRF;\r\n    IBankRoll public Bankroll;\r\n\r\n    error NotApprovedBankroll();\r\n    error InvalidValue(uint256 required, uint256 sent);\r\n    error TransferFailed();\r\n    error RefundFailed();\r\n    error NotOwner(address want, address have);\r\n    error ZeroWager();\r\n    error PlayerSuspended(uint256 suspensionTime);\r\n\r\n    /**\r\n     * @dev function to transfer the player wager to bankroll, and charge for VRF fee\r\n     * , reverts if bankroll doesn't approve game or token\r\n     * @param tokenAddress address of the token the wager is made on\r\n     * @param wager total amount wagered\r\n     */\r\n\r\n    function _transferWager(\r\n        address tokenAddress,\r\n        uint256 wager,\r\n        uint256 gasAmount\r\n    ) internal {\r\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\r\n            revert NotApprovedBankroll();\r\n        }\r\n        if (wager == 0) {\r\n            revert ZeroWager();\r\n        }\r\n        (bool suspended, uint256 suspendedTime) = Bankroll.isPlayerSuspended(\r\n            msg.sender\r\n        );\r\n        if (suspended) {\r\n            revert PlayerSuspended(suspendedTime);\r\n        }\r\n        uint256 VRFfee = getVRFFee(gasAmount);\r\n        if (tokenAddress == address(0)) {\r\n            if (msg.value < wager + VRFfee) {\r\n                revert InvalidValue(wager + VRFfee, msg.value);\r\n            }\r\n            _refundExcessValue(msg.value - (VRFfee + wager));\r\n        } else {\r\n            if (msg.value < VRFfee) {\r\n                revert InvalidValue(VRFfee, msg.value);\r\n            }\r\n            require(IERC20(tokenAddress).balanceOf(msg.sender) >= wager, \"Token transfer failed.\");\r\n            IERC20(tokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                wager\r\n            );\r\n            _refundExcessValue(msg.value - VRFfee);\r\n        }\r\n        VRFFees += VRFfee;\r\n    }\r\n\r\n    /**\r\n     * @dev function to transfer the wager held by the game contract to the bankroll\r\n     * @param tokenAddress address of the token to transfer\r\n     * @param amount token amount to transfer\r\n     */\r\n    function _transferToBankroll(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) internal {\r\n        if (tokenAddress == address(0)) {\r\n            (bool success, ) = payable(address(Bankroll)).call{value: amount}(\r\n                \"\"\r\n            );\r\n            if (!success) {\r\n                revert RefundFailed();\r\n            }\r\n        } else {\r\n            IERC20(tokenAddress).safeTransfer(address(Bankroll), amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calculates in form of native token the fee charged by chainlink VRF\r\n     * @return fee amount of fee user has to pay\r\n     */\r\n    function getVRFFee(uint256 gasAmount) public view returns (uint256 fee) {\r\n        (, int256 answer, , , ) = LINK_ETH_FEED.latestRoundData();\r\n        (uint32 fulfillmentFlatFeeLinkPPMTier1, , , , , , , , ) = IChainLinkVRF\r\n            .getFeeConfig();\r\n\r\n        fee =\r\n            tx.gasprice *\r\n            (gasAmount) +\r\n            ((1e12 *\r\n                uint256(fulfillmentFlatFeeLinkPPMTier1) *\r\n                uint256(answer)) / 1e18);\r\n    }\r\n\r\n    /**\r\n     * @dev returns to user the excess fee sent to pay for the VRF\r\n     * @param refund amount to send back to user\r\n     */\r\n    function _refundExcessValue(uint256 refund) internal {\r\n        if (refund == 0) {\r\n            return;\r\n        }\r\n        (bool success, ) = payable(msg.sender).call{value: refund}(\"\");\r\n        if (!success) {\r\n            revert RefundFailed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function to charge user for VRF\r\n     */\r\n    function _payVRFFee(uint256 gasAmount) internal {\r\n        uint256 VRFfee = getVRFFee(gasAmount);\r\n        if (msg.value < VRFfee) {\r\n            revert InvalidValue(VRFfee, msg.value);\r\n        }\r\n        _refundExcessValue(msg.value - VRFfee);\r\n        VRFFees += VRFfee;\r\n    }\r\n\r\n    /**\r\n     * @dev function to transfer VRF fees acumulated in the contract to the Bankroll\r\n     * Can only be called by owner\r\n     */\r\n    function transferFees(address to) external nonReentrant {\r\n        if (msg.sender != Bankroll.getOwner()) {\r\n            revert NotOwner(Bankroll.getOwner(), msg.sender);\r\n        }\r\n        uint256 fee = VRFFees;\r\n        VRFFees = 0;\r\n        (bool success, ) = payable(address(to)).call{value: fee}(\"\");\r\n        if (!success) {\r\n            revert TransferFailed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function to transfer wager to game contract, without charging for VRF\r\n     * @param tokenAddress tokenAddress the wager is made on\r\n     * @param wager wager amount\r\n     */\r\n    function _transferWagerPvPNoVRF(\r\n        address tokenAddress,\r\n        uint256 wager\r\n    ) internal {\r\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\r\n            revert NotApprovedBankroll();\r\n        }\r\n        if (tokenAddress == address(0)) {\r\n            if (!(msg.value == wager)) {\r\n                revert InvalidValue(wager, msg.value);\r\n            }\r\n        } else {\r\n            IERC20(tokenAddress).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                wager\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function to transfer wager to game contract, including charge for VRF\r\n     * @param tokenAddress tokenAddress the wager is made on\r\n     * @param wager wager amount\r\n     */\r\n    function _transferWagerPvP(\r\n        address tokenAddress,\r\n        uint256 wager,\r\n        uint256 gasAmount\r\n    ) internal {\r\n        if (!Bankroll.getIsValidWager(address(this), tokenAddress)) {\r\n            revert NotApprovedBankroll();\r\n        }\r\n\r\n        uint256 VRFfee = getVRFFee(gasAmount);\r\n        if (tokenAddress == address(0)) {\r\n            if (msg.value < wager + VRFfee) {\r\n                revert InvalidValue(wager, msg.value);\r\n            }\r\n\r\n            _refundExcessValue(msg.value - (VRFfee + wager));\r\n        } else {\r\n            if (msg.value < VRFfee) {\r\n                revert InvalidValue(VRFfee, msg.value);\r\n            }\r\n\r\n            IERC20(tokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                wager\r\n            );\r\n            _refundExcessValue(msg.value - VRFfee);\r\n        }\r\n        VRFFees += VRFfee;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers payout from the game contract to the players\r\n     * @param player address of the player to transfer the payout to\r\n     * @param payout amount of payout to transfer\r\n     * @param tokenAddress address of the token that payout will be transfered\r\n     */\r\n    function _transferPayoutPvP(\r\n        address player,\r\n        uint256 payout,\r\n        address tokenAddress\r\n    ) internal {\r\n        if (tokenAddress == address(0)) {\r\n            (bool success, ) = payable(player).call{value: payout}(\"\");\r\n            if (!success) {\r\n                revert TransferFailed();\r\n            }\r\n        } else {\r\n            IERC20(tokenAddress).safeTransfer(player, payout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev transfers house edge from game contract to bankroll\r\n     * @param amount amount to transfer\r\n     * @param tokenAddress address of token to transfer\r\n     */\r\n    function _transferHouseEdgePvP(\r\n        uint256 amount,\r\n        address tokenAddress\r\n    ) internal {\r\n        if (tokenAddress == address(0)) {\r\n            (bool success, ) = payable(address(Bankroll)).call{value: amount}(\r\n                \"\"\r\n            );\r\n            if (!success) {\r\n                revert TransferFailed();\r\n            }\r\n        } else {\r\n            IERC20(tokenAddress).safeTransfer(address(Bankroll), amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function to request bankroll to give payout to player\r\n     * @param player address of the player\r\n     * @param payout amount of payout to give\r\n     * @param tokenAddress address of the token in which to give the payout\r\n     */\r\n    function _transferPayout(\r\n        address player,\r\n        uint256 payout,\r\n        address tokenAddress\r\n    ) internal {\r\n        Bankroll.transferPayout(player, payout, tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev function to send the request for randomness to chainlink\r\n     * @param numWords number of random numbers required\r\n     */\r\n    function _requestRandomWords(\r\n        uint32 numWords\r\n    ) internal returns (uint256 s_requestId) {\r\n        s_requestId = VRFCoordinatorV2Interface(ChainLinkVRF)\r\n            .requestRandomWords(\r\n                0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93,\r\n                962,\r\n                3,\r\n                2500000,\r\n                numWords\r\n            );\r\n    }\r\n}\r\n\r\n// File: Games/CoinFlip/CoinFlip.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title Coin Flip game, players predict if outcome will be heads or tails\r\n */\r\n\r\ncontract CoinFlip is Common {\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor(address _bankroll, address _vrf, address link_eth_feed) {\r\n        Bankroll = IBankRoll(_bankroll);\r\n        IChainLinkVRF = IVRFCoordinatorV2(_vrf);\r\n        LINK_ETH_FEED = AggregatorV3Interface(link_eth_feed);\r\n        ChainLinkVRF = _vrf;\r\n    }\r\n\r\n    struct CoinFlipGame {\r\n        uint256 wager;\r\n        uint256 stopGain;\r\n        uint256 stopLoss;\r\n        uint256 requestID;\r\n        address tokenAddress;\r\n        uint64 blockNumber;\r\n        uint32 numBets;\r\n        bool isHeads;\r\n    }\r\n\r\n    mapping(address => CoinFlipGame) coinFlipGames;\r\n    mapping(uint256 => address) coinIDs;\r\n\r\n    /**\r\n     * @dev event emitted by the VRF callback with the bet results\r\n     * @param playerAddress address of the player that made the bet\r\n     * @param wager wager amount\r\n     * @param payout total payout transfered to the player\r\n     * @param tokenAddress address of token the wager was made and payout, 0 address is considered the native coin\r\n     * @param coinOutcomes results of coinFlip, 1-> Heads, 0 ->Tails\r\n     * @param payouts individual payouts for each bet\r\n     * @param numGames number of games performed\r\n     */\r\n    event CoinFlip_Outcome_Event(\r\n        address indexed playerAddress,\r\n        uint256 wager,\r\n        uint256 payout,\r\n        address tokenAddress,\r\n        uint8[] coinOutcomes,\r\n        uint256[] payouts,\r\n        uint32 numGames\r\n    );\r\n\r\n    /**\r\n     * @dev event emitted when a refund is done in coin flip\r\n     * @param player address of the player reciving the refund\r\n     * @param wager amount of wager that was refunded\r\n     * @param tokenAddress address of token the refund was made in\r\n     */\r\n    event CoinFlip_Refund_Event(\r\n        address indexed player,\r\n        uint256 wager,\r\n        address tokenAddress\r\n    );\r\n\r\n    error WagerAboveLimit(uint256 wager, uint256 maxWager);\r\n    error AwaitingVRF(uint256 requestID);\r\n    error InvalidNumBets(uint256 maxNumBets);\r\n    error NotAwaitingVRF();\r\n    error BlockNumberTooLow(uint256 have, uint256 want);\r\n    error OnlyCoordinatorCanFulfill(address have, address want);\r\n\r\n    /**\r\n     * @dev function to get current request player is await from VRF, returns 0 if none\r\n     * @param player address of the player to get the state\r\n     */\r\n    function CoinFlip_GetState(\r\n        address player\r\n    ) external view returns (CoinFlipGame memory) {\r\n        return (coinFlipGames[player]);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to play Coin Flip, takes the user wager saves bet parameters and makes a request to the VRF\r\n     * @param wager wager amount\r\n     * @param tokenAddress address of token to bet, 0 address is considered the native coin\r\n     * @param numBets number of bets to make, and amount of random numbers to request\r\n     * @param stopGain treshold value at which the bets stop if a certain profit is obtained\r\n     * @param stopLoss treshold value at which the bets stop if a certain loss is obtained\r\n     * @param isHeads if bet selected heads or Tails\r\n     */\r\n    function CoinFlip_Play(\r\n        uint256 wager,\r\n        address tokenAddress,\r\n        bool isHeads,\r\n        uint32 numBets,\r\n        uint256 stopGain,\r\n        uint256 stopLoss\r\n    ) external payable nonReentrant {\r\n        if (coinFlipGames[msg.sender].requestID != 0) {\r\n            revert AwaitingVRF(coinFlipGames[msg.sender].requestID);\r\n        }\r\n        if (!(numBets > 0 && numBets <= 100)) {\r\n            revert InvalidNumBets(100);\r\n        }\r\n\r\n        _kellyWager(wager, tokenAddress);\r\n        _transferWager(tokenAddress, wager * numBets, 1000000);\r\n        uint256 id = _requestRandomWords(numBets);\r\n\r\n        coinFlipGames[msg.sender] = CoinFlipGame(\r\n            wager,\r\n            stopGain,\r\n            stopLoss,\r\n            id,\r\n            tokenAddress,\r\n            uint64(block.number),\r\n            numBets,\r\n            isHeads\r\n        );\r\n        coinIDs[id] = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to refund user in case of VRF request failling\r\n     */\r\n    function CoinFlip_Refund() external nonReentrant {\r\n        CoinFlipGame storage game = coinFlipGames[msg.sender];\r\n        if (game.requestID == 0) {\r\n            revert NotAwaitingVRF();\r\n        }\r\n        if (game.blockNumber + 200 > block.number) {\r\n            revert BlockNumberTooLow(block.number, game.blockNumber + 200);\r\n        }\r\n\r\n        uint256 wager = game.wager * game.numBets;\r\n        address tokenAddress = game.tokenAddress;\r\n\r\n        delete (coinIDs[game.requestID]);\r\n        delete (coinFlipGames[msg.sender]);\r\n\r\n        if (tokenAddress == address(0)) {\r\n            (bool success, ) = payable(msg.sender).call{value: wager}(\"\");\r\n            if (!success) {\r\n                revert TransferFailed();\r\n            }\r\n        } else {\r\n            IERC20(tokenAddress).safeTransfer(msg.sender, wager);\r\n        }\r\n        emit CoinFlip_Refund_Event(msg.sender, wager, tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev function called by Chainlink VRF with random numbers\r\n     * @param requestId id provided when the request was made\r\n     * @param randomWords array of random numbers\r\n     */\r\n    function rawFulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) external {\r\n        if (msg.sender != ChainLinkVRF) {\r\n            revert OnlyCoordinatorCanFulfill(msg.sender, ChainLinkVRF);\r\n        }\r\n        fulfillRandomWords(requestId, randomWords);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) internal {\r\n        address playerAddress = coinIDs[requestId];\r\n        if (playerAddress == address(0)) revert();\r\n        CoinFlipGame storage game = coinFlipGames[playerAddress];\r\n\r\n        int256 totalValue;\r\n        uint256 payout;\r\n        uint32 i;\r\n        uint8[] memory coinFlip = new uint8[](game.numBets);\r\n        uint256[] memory payouts = new uint256[](game.numBets);\r\n\r\n        address tokenAddress = game.tokenAddress;\r\n\r\n        for (i = 0; i < game.numBets; i++) {\r\n            if (totalValue >= int256(game.stopGain)) {\r\n                break;\r\n            }\r\n            if (totalValue <= -int256(game.stopLoss)) {\r\n                break;\r\n            }\r\n\r\n            coinFlip[i] = uint8(randomWords[i] % 2);\r\n\r\n            if (coinFlip[i] == 1 && game.isHeads == true) {\r\n                totalValue += int256((game.wager * 9800) / 10000);\r\n                payout += (game.wager * 19800) / 10000;\r\n                payouts[i] = (game.wager * 19800) / 10000;\r\n                continue;\r\n            }\r\n            if (coinFlip[i] == 0 && game.isHeads == false) {\r\n                totalValue += int256((game.wager * 9800) / 10000);\r\n                payout += (game.wager * 19800) / 10000;\r\n                payouts[i] = (game.wager * 19800) / 10000;\r\n                continue;\r\n            }\r\n\r\n            totalValue -= int256(game.wager);\r\n        }\r\n\r\n        payout += (game.numBets - i) * game.wager;\r\n\r\n        emit CoinFlip_Outcome_Event(\r\n            playerAddress,\r\n            game.wager,\r\n            payout,\r\n            tokenAddress,\r\n            coinFlip,\r\n            payouts,\r\n            i\r\n        );\r\n        _transferToBankroll(tokenAddress, game.wager * game.numBets);\r\n        delete (coinIDs[requestId]);\r\n        delete (coinFlipGames[playerAddress]);\r\n        if (payout != 0) {\r\n            _transferPayout(playerAddress, payout, tokenAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the maximum wager allowed based on the bankroll size\r\n     */\r\n    function _kellyWager(uint256 wager, address tokenAddress) internal view {\r\n        uint256 balance;\r\n        if (tokenAddress == address(0)) {\r\n            balance = address(Bankroll).balance;\r\n        } else {\r\n            balance = IERC20(tokenAddress).balanceOf(address(Bankroll));\r\n        }\r\n        uint256 maxWager = (balance * 1122448) / 100000000;\r\n        if (wager > maxWager) {\r\n            revert WagerAboveLimit(wager, maxWager);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankroll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link_eth_feed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"AwaitingVRF\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"have\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"BlockNumberTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumBets\",\"type\":\"uint256\"}],\"name\":\"InvalidNumBets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedBankroll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAwaitingVRF\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"suspensionTime\",\"type\":\"uint256\"}],\"name\":\"PlayerSuspended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWager\",\"type\":\"uint256\"}],\"name\":\"WagerAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"coinOutcomes\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numGames\",\"type\":\"uint32\"}],\"name\":\"CoinFlip_Outcome_Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CoinFlip_Refund_Event\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bankroll\",\"outputs\":[{\"internalType\":\"contract IBankRoll\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ChainLinkVRF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"CoinFlip_GetState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"numBets\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isHeads\",\"type\":\"bool\"}],\"internalType\":\"struct CoinFlip.CoinFlipGame\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isHeads\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"numBets\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"stopGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLoss\",\"type\":\"uint256\"}],\"name\":\"CoinFlip_Play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CoinFlip_Refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IChainLinkVRF\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_ETH_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRFFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"getVRFFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinFlip", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004874bc911d099547bb84d494dd187de66dc56d95000000000000000000000000ae975071be8f8ee67addbc1a82488f1c248580670000000000000000000000005787befdc0ecd210dfa948264631cd53e68f7802", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f8d5ecc680ea7eb13374dfc5f6fba7b0bd0a0c18c97d5e7bdd19cd018e95644"}