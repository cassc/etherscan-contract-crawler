{"SourceCode": "// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/utils/Initializable.sol@v4.1.0\r\n\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/base/OwnerPausable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\nabstract contract OwnerPausable is Ownable, Pausable {\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IIronSwap.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IIronSwap {\r\n    /// EVENTS\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 tokenSupply\r\n    );\r\n\r\n    event TokenExchange(\r\n        address indexed buyer,\r\n        uint256 soldId,\r\n        uint256 tokensSold,\r\n        uint256 boughtId,\r\n        uint256 tokensBought\r\n    );\r\n\r\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\r\n\r\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\r\n\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[] tokenAmounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 tokenSupply\r\n    );\r\n\r\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\r\n\r\n    event StopRampA(uint256 A, uint256 timestamp);\r\n\r\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\r\n\r\n    event CollectProtocolFee(address token, uint256 amount);\r\n\r\n    event FeeControllerChanged(address newController);\r\n\r\n    event FeeDistributorChanged(address newController);\r\n\r\n    // pool data view functions\r\n    function getLpToken() external view returns (IERC20 lpToken);\r\n\r\n    function getA() external view returns (uint256);\r\n\r\n    function getAPrecise() external view returns (uint256);\r\n\r\n    function getToken(uint8 index) external view returns (IERC20);\r\n\r\n    function getTokens() external view returns (IERC20[] memory);\r\n\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function getTokenBalance(uint8 index) external view returns (uint256);\r\n\r\n    function getTokenBalances() external view returns (uint256[] memory);\r\n\r\n    function getNumberOfTokens() external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\r\n\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex\r\n    ) external view returns (uint256 availableTokenAmount);\r\n\r\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\r\n\r\n    function getAdminBalance(uint8 index) external view returns (uint256);\r\n\r\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\r\n\r\n    // state modifying functions\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function addLiquidity(\r\n        uint256[] calldata amounts,\r\n        uint256 minToMint,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidity(\r\n        uint256 amount,\r\n        uint256[] calldata minAmounts,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory);\r\n\r\n    function removeLiquidityOneToken(\r\n        uint256 tokenAmount,\r\n        uint8 tokenIndex,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function removeLiquidityImbalance(\r\n        uint256[] calldata amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n\r\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\r\n\r\n    function withdrawAdminFee() external;\r\n}\r\n\r\n\r\n// File contracts/tokens/LPToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\ncontract LPToken is Ownable, ERC20Burnable {\r\n    IIronSwap public swap;\r\n\r\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\r\n        swap = IIronSwap(msg.sender);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"zeroMintAmount\");\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\r\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n        swap.updateUserWithdrawFee(to, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IronSwapLib.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n/**\r\n * StableSwap main algorithm\r\n */\r\nlibrary IronSwapLib {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[] token_amounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 token_supply\r\n    );\r\n\r\n    event TokenExchange(\r\n        address indexed buyer,\r\n        uint256 sold_id,\r\n        uint256 tokens_sold,\r\n        uint256 bought_id,\r\n        uint256 tokens_bought\r\n    );\r\n\r\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\r\n\r\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\r\n\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[] token_amounts,\r\n        uint256[] fees,\r\n        uint256 invariant,\r\n        uint256 token_supply\r\n    );\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 1e10;\r\n    // uint256 public constant PRECISION = 1e18;\r\n\r\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\r\n    /// so we add some (small) PRECISION when divide in each iteration\r\n    uint256 public constant A_PRECISION = 100;\r\n    /// @dev max iteration of converge calccuate\r\n    uint256 internal constant MAX_ITERATION = 256;\r\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\r\n\r\n    struct SwapStorage {\r\n        IERC20[] pooledTokens;\r\n        LPToken lpToken;\r\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\r\n        uint256[] tokenMultipliers;\r\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\r\n        uint256[] balances;\r\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\r\n        uint256 fee;\r\n        /// @dev admin fee in ratio of swap fee.\r\n        uint256 adminFee;\r\n        /// @dev observation of A, multiplied with A_PRECISION\r\n        uint256 initialA;\r\n        uint256 futureA;\r\n        uint256 initialATime;\r\n        uint256 futureATime;\r\n        // withdrawal fee control\r\n        uint256 defaultWithdrawFee;\r\n        mapping(address => uint256) depositTimestamp;\r\n        mapping(address => uint256) withdrawFeeMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit coins into the pool\r\n     * @param amounts List of amounts of coins to deposit\r\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\r\n     * @return mintAmount Amount of LP tokens received by depositing\r\n     */\r\n    function addLiquidity(\r\n        SwapStorage storage self,\r\n        uint256[] memory amounts,\r\n        uint256 minMintAmount\r\n    ) external returns (uint256 mintAmount) {\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\r\n        uint256[] memory fees = new uint256[](nCoins);\r\n        uint256 _fee = _feePerToken(self);\r\n\r\n        uint256 tokenSupply = self.lpToken.totalSupply();\r\n        uint256 amp = _getAPrecise(self);\r\n\r\n        uint256 D0 = 0;\r\n        if (tokenSupply > 0) {\r\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\r\n        }\r\n\r\n        uint256[] memory newBalances = self.balances;\r\n\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            if (tokenSupply == 0) {\r\n                require(amounts[i] > 0, \"initialDepositRequireAllTokens\");\r\n            }\r\n            // get real transfer in amount\r\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\r\n        }\r\n\r\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\r\n        assert(D1 > D0); // double check\r\n\r\n        if (tokenSupply == 0) {\r\n            self.balances = newBalances;\r\n            mintAmount = D1;\r\n        } else {\r\n            uint256 diff = 0;\r\n            for (uint256 i = 0; i < nCoins; i++) {\r\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\r\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\r\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\r\n                newBalances[i] -= fees[i];\r\n            }\r\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\r\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\r\n        }\r\n\r\n        require(mintAmount >= minMintAmount, \"> slippage\");\r\n\r\n        self.lpToken.mint(msg.sender, mintAmount);\r\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\r\n    }\r\n\r\n    function swap(\r\n        SwapStorage storage self,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 inAmount,\r\n        uint256 minOutAmount\r\n    ) external returns (uint256) {\r\n        IERC20 inCoin = self.pooledTokens[i];\r\n        uint256[] memory normalizedBalances = _xp(self);\r\n        inAmount = _doTransferIn(inCoin, inAmount);\r\n\r\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\r\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\r\n\r\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\r\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\r\n\r\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\r\n\r\n        require(dy >= minOutAmount, \"> slippage\");\r\n\r\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\r\n\r\n        // update balances\r\n        self.balances[i] += inAmount;\r\n        self.balances[j] -= dy + _adminFee;\r\n\r\n        self.pooledTokens[j].safeTransfer(msg.sender, dy);\r\n        emit TokenExchange(msg.sender, i, inAmount, j, dy);\r\n        return dy;\r\n    }\r\n\r\n    function removeLiquidity(\r\n        SwapStorage storage self,\r\n        uint256 lpAmount,\r\n        uint256[] memory minAmounts\r\n    ) external returns (uint256[] memory amounts) {\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        require(lpAmount <= totalSupply);\r\n        uint256 nCoins = self.pooledTokens.length;\r\n\r\n        uint256[] memory fees = new uint256[](nCoins);\r\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            require(amounts[i] >= minAmounts[i], \"> slippage\");\r\n            self.balances[i] = self.balances[i] - amounts[i];\r\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\r\n        }\r\n\r\n        self.lpToken.burnFrom(msg.sender, lpAmount);\r\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\r\n    }\r\n\r\n    function removeLiquidityOneToken(\r\n        SwapStorage storage self,\r\n        uint256 lpAmount,\r\n        uint256 index,\r\n        uint256 minAmount\r\n    ) external returns (uint256) {\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        require(totalSupply > 0, \"totalSupply = 0\");\r\n        uint256 numTokens = self.pooledTokens.length;\r\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \"> balance\");\r\n        require(lpAmount <= totalSupply, \"> totalSupply\");\r\n        require(index < numTokens, \"tokenNotFound\");\r\n\r\n        uint256 dyFee;\r\n        uint256 dy;\r\n\r\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\r\n\r\n        require(dy >= minAmount, \"> slippage\");\r\n\r\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\r\n        self.lpToken.burnFrom(msg.sender, lpAmount);\r\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\r\n\r\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\r\n\r\n        return dy;\r\n    }\r\n\r\n    function removeLiquidityImbalance(\r\n        SwapStorage storage self,\r\n        uint256[] memory amounts,\r\n        uint256 maxBurnAmount\r\n    ) external returns (uint256 burnAmount) {\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        require(totalSupply != 0, \"totalSupply = 0\");\r\n        uint256 _fee = _feePerToken(self);\r\n        uint256 amp = _getAPrecise(self);\r\n\r\n        uint256[] memory newBalances = self.balances;\r\n        uint256 D0 = _getD(_xp(self), amp);\r\n\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            newBalances[i] -= amounts[i];\r\n        }\r\n\r\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\r\n        uint256[] memory fees = new uint256[](nCoins);\r\n\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\r\n            uint256 diff = _distance(newBalances[i], idealBalance);\r\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\r\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\r\n            newBalances[i] -= fees[i];\r\n        }\r\n\r\n        // recalculate invariant with fee charged balances\r\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\r\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\r\n        assert(burnAmount > 0);\r\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \"attacker\"\r\n        require(burnAmount <= maxBurnAmount, \"> slippage\");\r\n\r\n        self.lpToken.burnFrom(msg.sender, burnAmount);\r\n\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            if (amounts[i] != 0) {\r\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\r\n            }\r\n        }\r\n\r\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\r\n    }\r\n\r\n    /// VIEW FUNCTIONS\r\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\r\n        return _getAPrecise(self);\r\n    }\r\n\r\n    /**\r\n     * Returns portfolio virtual price (for calculating profit)\r\n     * scaled up by 1e18\r\n     */\r\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\r\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\r\n        uint256 tokenSupply = self.lpToken.totalSupply();\r\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\r\n    }\r\n\r\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\r\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\r\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\r\n    }\r\n\r\n    /**\r\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\r\n     * without taking fees into account\r\n     */\r\n    function calculateTokenAmount(\r\n        SwapStorage storage self,\r\n        uint256[] memory amounts,\r\n        bool deposit\r\n    ) external view returns (uint256) {\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        require(amounts.length == nCoins, \"invalidAmountsLength\");\r\n        uint256 amp = _getAPrecise(self);\r\n        uint256 D0 = _getD(_xp(self), amp);\r\n\r\n        uint256[] memory newBalances = self.balances;\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            if (deposit) {\r\n                newBalances[i] += amounts[i];\r\n            } else {\r\n                newBalances[i] -= amounts[i];\r\n            }\r\n        }\r\n\r\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n\r\n        if (totalSupply == 0) {\r\n            return D1; // first depositor take it all\r\n        }\r\n\r\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\r\n        return (diff * self.lpToken.totalSupply()) / D0;\r\n    }\r\n\r\n    function getA(SwapStorage storage self) external view returns (uint256) {\r\n        return _getAPrecise(self) / A_PRECISION;\r\n    }\r\n\r\n    function calculateSwap(\r\n        SwapStorage storage self,\r\n        uint256 inIndex,\r\n        uint256 outIndex,\r\n        uint256 inAmount\r\n    ) external view returns (uint256) {\r\n        uint256[] memory normalizedBalances = _xp(self);\r\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\r\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\r\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\r\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\r\n        return outAmount - _fee;\r\n    }\r\n\r\n    function calculateRemoveLiquidity(\r\n        SwapStorage storage self,\r\n        address account,\r\n        uint256 amount\r\n    ) external view returns (uint256[] memory) {\r\n        return _calculateRemoveLiquidity(self, account, amount);\r\n    }\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        SwapStorage storage self,\r\n        address account,\r\n        uint256 lpAmount,\r\n        uint256 tokenIndex\r\n    ) external view returns (uint256 amount) {\r\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the withdraw fee for `user`. If the user is currently\r\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\r\n     * the starting withdraw fee based on the last deposit's time & amount relative\r\n     * to the new deposit.\r\n     *\r\n     * @param self Swap struct to read from and write to\r\n     * @param user address of the user depositing tokens\r\n     * @param toMint amount of pool tokens to be minted\r\n     */\r\n    function updateUserWithdrawFee(\r\n        SwapStorage storage self,\r\n        address user,\r\n        uint256 toMint\r\n    ) external {\r\n        _updateUserWithdrawFee(self, user, toMint);\r\n    }\r\n\r\n    /// INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * Ramping A up or down, return A with precision of A_PRECISION\r\n     */\r\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\r\n        if (block.timestamp >= self.futureATime) {\r\n            return self.futureA;\r\n        }\r\n\r\n        if (self.futureA > self.initialA) {\r\n            return\r\n                self.initialA +\r\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\r\n                (self.futureATime - self.initialATime);\r\n        }\r\n\r\n        return\r\n            self.initialA -\r\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\r\n            (self.futureATime - self.initialATime);\r\n    }\r\n\r\n    /**\r\n     * normalized balances of each tokens.\r\n     */\r\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            rates[i] = (rates[i] * balances[i]);\r\n        }\r\n\r\n        return rates;\r\n    }\r\n\r\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\r\n        return _xp(self.balances, self.tokenMultipliers);\r\n    }\r\n\r\n    /**\r\n     * Calculate D for *NORMALIZED* balances of each tokens\r\n     * @param xp normalized balances of token\r\n     */\r\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\r\n        uint256 nCoins = xp.length;\r\n        uint256 sum = _sumOf(xp);\r\n        if (sum == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 Dprev = 0;\r\n        uint256 D = sum;\r\n        uint256 Ann = amp * nCoins;\r\n\r\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\r\n            uint256 D_P = D;\r\n            for (uint256 j = 0; j < xp.length; j++) {\r\n                D_P = (D_P * D) / (xp[j] * nCoins);\r\n            }\r\n            Dprev = D;\r\n            D =\r\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\r\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\r\n            if (_distance(D, Dprev) <= 1) {\r\n                return D;\r\n            }\r\n        }\r\n\r\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\r\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\r\n        // function which does not rely on D.\r\n        revert(\"invariantCalculationFailed\");\r\n    }\r\n\r\n    /**\r\n     * calculate new balance of when swap\r\n     * Done by solving quadratic equation iteratively.\r\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n     *  x_1**2 + b*x_1 = c\r\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n     * @param inIndex index of token to swap in\r\n     * @param outIndex index of token to swap out\r\n     * @param inBalance new balance (normalized) of input token if the swap success\r\n     * @return NORMALIZED balance of output token if the swap success\r\n     */\r\n    function _getY(\r\n        SwapStorage storage self,\r\n        uint256 inIndex,\r\n        uint256 outIndex,\r\n        uint256 inBalance,\r\n        uint256[] memory normalizedBalances\r\n    ) internal view returns (uint256) {\r\n        require(inIndex != outIndex, \"sameToken\");\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        require(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\r\n\r\n        uint256 amp = _getAPrecise(self);\r\n        uint256 Ann = amp * nCoins;\r\n        uint256 D = _getD(normalizedBalances, amp);\r\n\r\n        uint256 sum = 0; // sum of new balances except output token\r\n        uint256 c = D;\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            if (i == outIndex) {\r\n                continue;\r\n            }\r\n\r\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\r\n            sum += x;\r\n            c = (c * D) / (x * nCoins);\r\n        }\r\n\r\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\r\n        uint256 b = sum + (D * A_PRECISION) / Ann;\r\n\r\n        uint256 lastY = 0;\r\n        uint256 y = D;\r\n\r\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\r\n            lastY = y;\r\n            y = (y * y + c) / (2 * y + b - D);\r\n            if (_distance(lastY, y) <= 1) {\r\n                return y;\r\n            }\r\n        }\r\n\r\n        revert(\"yCalculationFailed\");\r\n    }\r\n\r\n    function _calculateRemoveLiquidity(\r\n        SwapStorage storage self,\r\n        address account,\r\n        uint256 amount\r\n    ) internal view returns (uint256[] memory) {\r\n        uint256 totalSupply = self.lpToken.totalSupply();\r\n        require(amount <= totalSupply, \"Cannot exceed total supply\");\r\n\r\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) /\r\n            FEE_DENOMINATOR;\r\n\r\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\r\n        }\r\n        return amounts;\r\n    }\r\n\r\n    function _calculateRemoveLiquidityOneToken(\r\n        SwapStorage storage self,\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint256 index\r\n    ) internal view returns (uint256 dy, uint256 fee) {\r\n        require(index < self.pooledTokens.length, \"indexOutOfRange\");\r\n        uint256 amp = _getAPrecise(self);\r\n        uint256[] memory xp = _xp(self);\r\n        uint256 D0 = _getD(xp, amp);\r\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\r\n        uint256 newY = _getYD(self, amp, index, xp, D1);\r\n        uint256[] memory reducedXP = xp;\r\n        uint256 _fee = _feePerToken(self);\r\n\r\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\r\n            uint256 expectedDx = 0;\r\n            if (i == index) {\r\n                expectedDx = (xp[i] * D1) / D0 - newY;\r\n            } else {\r\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\r\n            }\r\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\r\n        }\r\n\r\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\r\n        dy = (dy - 1) / self.tokenMultipliers[index];\r\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\r\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\r\n    }\r\n\r\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\r\n    }\r\n\r\n    function _getYD(\r\n        SwapStorage storage self,\r\n        uint256 A,\r\n        uint256 index,\r\n        uint256[] memory xp,\r\n        uint256 D\r\n    ) internal view returns (uint256) {\r\n        uint256 nCoins = self.pooledTokens.length;\r\n        assert(index < nCoins);\r\n        uint256 Ann = A * nCoins;\r\n        uint256 c = D;\r\n        uint256 s = 0;\r\n        uint256 _x = 0;\r\n        uint256 yPrev = 0;\r\n\r\n        for (uint256 i = 0; i < nCoins; i++) {\r\n            if (i == index) {\r\n                continue;\r\n            }\r\n            _x = xp[i];\r\n            s += _x;\r\n            c = (c * D) / (_x * nCoins);\r\n        }\r\n\r\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\r\n        uint256 b = s + (D * A_PRECISION) / Ann;\r\n        uint256 y = D;\r\n\r\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\r\n            yPrev = y;\r\n            y = (y * y + c) / (2 * y + b - D);\r\n            if (_distance(yPrev, y) <= 1) {\r\n                return y;\r\n            }\r\n        }\r\n        revert(\"invariantCalculationFailed\");\r\n    }\r\n\r\n    function _updateUserWithdrawFee(\r\n        SwapStorage storage self,\r\n        address user,\r\n        uint256 toMint\r\n    ) internal {\r\n        // If token is transferred to address 0 (or burned), don't update the fee.\r\n        if (user == address(0)) {\r\n            return;\r\n        }\r\n        if (self.defaultWithdrawFee == 0) {\r\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\r\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\r\n        } else {\r\n            // Otherwise, calculate appropriate discount based on last deposit amount\r\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\r\n            uint256 currentBalance = self.lpToken.balanceOf(user);\r\n\r\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\r\n            // ((toMint + currentBalance) * defaultWithdrawFee)\r\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\r\n                self.withdrawFeeMultiplier[user] =\r\n                    (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) /\r\n                    ((toMint + currentBalance) * self.defaultWithdrawFee);\r\n            }\r\n        }\r\n        self.depositTimestamp[user] = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the fee that is applied when the given user withdraws.\r\n     * Withdraw fee decays linearly over 4 weeks.\r\n     * @param user address you want to calculate withdraw fee of\r\n     * @return current withdraw fee of the user\r\n     */\r\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\r\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\r\n        if (endTime > block.timestamp) {\r\n            uint256 timeLeftover = endTime - block.timestamp;\r\n            return\r\n                (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) /\r\n                (4 weeks) /\r\n                FEE_DENOMINATOR;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\r\n        uint256 priorBalance = token.balanceOf(address(this));\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        return token.balanceOf(address(this)) - priorBalance;\r\n    }\r\n\r\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\r\n        sum = 0;\r\n        for (uint256 i = 0; i < x.length; i++) {\r\n            sum += x[i];\r\n        }\r\n    }\r\n\r\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x > y ? x - y : y - x;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IronSwap.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IronSwap is OwnerPausable, ReentrancyGuard, Initializable, IIronSwap {\r\n    using IronSwapLib for IronSwapLib.SwapStorage;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// constants\r\n    uint256 public constant MIN_RAMP_TIME = 1 days;\r\n    uint256 public constant MAX_A = 1e6; // max_a with precision\r\n    uint256 public constant MAX_A_CHANGE = 10;\r\n    uint256 public constant MAX_ADMIN_FEE = 1e10; // 100%\r\n    uint256 public constant MAX_SWAP_FEE = 1e8; // 1%\r\n    uint256 public constant MAX_WITHDRAW_FEE = 1e8; // 1%\r\n\r\n    /// STATE VARS\r\n    IronSwapLib.SwapStorage public swapStorage;\r\n    address public feeDistributor;\r\n    address public feeController;\r\n    mapping(address => uint8) public tokenIndexes;\r\n\r\n    modifier deadlineCheck(uint256 _deadline) {\r\n        require(block.timestamp <= _deadline, \"timeout\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFeeControllerOrOwner() {\r\n        require(msg.sender == feeController || msg.sender == owner(), \"!feeControllerOrOwner\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address[] memory _coins,\r\n        uint8[] memory _decimals,\r\n        string memory lpTokenName,\r\n        string memory lpTokenSymbol,\r\n        uint256 _A,\r\n        uint256 _fee,\r\n        uint256 _adminFee,\r\n        uint256 _withdrawFee,\r\n        address _feeDistributor\r\n    ) external onlyOwner initializer {\r\n        require(_coins.length == _decimals.length, \"coinsLength != decimalsLength\");\r\n        require(_feeDistributor != address(0), \"feeDistributor = empty\");\r\n        uint256 numberOfCoins = _coins.length;\r\n        uint256[] memory rates = new uint256[](numberOfCoins);\r\n        IERC20[] memory coins = new IERC20[](numberOfCoins);\r\n        for (uint256 i = 0; i < numberOfCoins; i++) {\r\n            require(_coins[i] != address(0), \"invalidTokenAddress\");\r\n            require(_decimals[i] <= IronSwapLib.POOL_TOKEN_COMMON_DECIMALS, \"invalidDecimals\");\r\n            rates[i] = 10**(IronSwapLib.POOL_TOKEN_COMMON_DECIMALS - _decimals[i]);\r\n            coins[i] = IERC20(_coins[i]);\r\n            tokenIndexes[address(coins[i])] = uint8(i);\r\n        }\r\n\r\n        require(_A < MAX_A, \"> maxA\");\r\n        require(_fee <= MAX_SWAP_FEE, \"> maxSwapFee\");\r\n        require(_adminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\r\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \"> maxWithdrawFee\");\r\n\r\n        swapStorage.lpToken = new LPToken(lpTokenName, lpTokenSymbol);\r\n        swapStorage.balances = new uint256[](numberOfCoins);\r\n        swapStorage.tokenMultipliers = rates;\r\n        swapStorage.pooledTokens = coins;\r\n        swapStorage.initialA = _A * IronSwapLib.A_PRECISION;\r\n        swapStorage.futureA = _A * IronSwapLib.A_PRECISION;\r\n        swapStorage.fee = _fee;\r\n        swapStorage.adminFee = _adminFee;\r\n        swapStorage.defaultWithdrawFee = _withdrawFee;\r\n        feeDistributor = _feeDistributor;\r\n    }\r\n\r\n    /// PUBLIC FUNCTIONS\r\n    function addLiquidity(\r\n        uint256[] memory amounts,\r\n        uint256 minMintAmount,\r\n        uint256 deadline\r\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\r\n        return swapStorage.addLiquidity(amounts, minMintAmount);\r\n    }\r\n\r\n    function swap(\r\n        uint8 fromIndex,\r\n        uint8 toIndex,\r\n        uint256 inAmount,\r\n        uint256 minOutAmount,\r\n        uint256 deadline\r\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\r\n        return swapStorage.swap(fromIndex, toIndex, inAmount, minOutAmount);\r\n    }\r\n\r\n    function removeLiquidity(\r\n        uint256 lpAmount,\r\n        uint256[] memory minAmounts,\r\n        uint256 deadline\r\n    ) external override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\r\n        return swapStorage.removeLiquidity(lpAmount, minAmounts);\r\n    }\r\n\r\n    function removeLiquidityOneToken(\r\n        uint256 lpAmount,\r\n        uint8 index,\r\n        uint256 minAmount,\r\n        uint256 deadline\r\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\r\n        return swapStorage.removeLiquidityOneToken(lpAmount, index, minAmount);\r\n    }\r\n\r\n    function removeLiquidityImbalance(\r\n        uint256[] memory amounts,\r\n        uint256 maxBurnAmount,\r\n        uint256 deadline\r\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\r\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\r\n    }\r\n\r\n    /// VIEW FUNCTIONS\r\n\r\n    function getVirtualPrice() external view override returns (uint256) {\r\n        return swapStorage.getVirtualPrice();\r\n    }\r\n\r\n    function getA() external view override returns (uint256) {\r\n        return swapStorage.getA();\r\n    }\r\n\r\n    function getAPrecise() external view override returns (uint256) {\r\n        return swapStorage.getAPrecise();\r\n    }\r\n\r\n    function getTokens() external view override returns (IERC20[] memory) {\r\n        return swapStorage.pooledTokens;\r\n    }\r\n\r\n    function getToken(uint8 index) external view override returns (IERC20) {\r\n        return swapStorage.pooledTokens[index];\r\n    }\r\n\r\n    function getLpToken() external view override returns (IERC20) {\r\n        return swapStorage.lpToken;\r\n    }\r\n\r\n    function getTokenIndex(address token) external view override returns (uint8 index) {\r\n        index = tokenIndexes[token];\r\n        require(address(swapStorage.pooledTokens[index]) == token, \"tokenNotFound\");\r\n    }\r\n\r\n    function getTokenPrecisionMultipliers() external view returns (uint256[] memory) {\r\n        return swapStorage.tokenMultipliers;\r\n    }\r\n\r\n    function getTokenBalances() external view override returns (uint256[] memory) {\r\n        return swapStorage.balances;\r\n    }\r\n\r\n    function getTokenBalance(uint8 index) external view override returns (uint256) {\r\n        return swapStorage.balances[index];\r\n    }\r\n\r\n    function getNumberOfTokens() external view override returns (uint256) {\r\n        return swapStorage.pooledTokens.length;\r\n    }\r\n\r\n    function getAdminBalances() external view override returns (uint256[] memory adminBalances) {\r\n        uint256 length = swapStorage.pooledTokens.length;\r\n        adminBalances = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            adminBalances[i] = swapStorage.getAdminBalance(i);\r\n        }\r\n    }\r\n\r\n    function getAdminBalance(uint8 index) external view override returns (uint256) {\r\n        return swapStorage.getAdminBalance((index));\r\n    }\r\n\r\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view override returns (uint256) {\r\n        return swapStorage.calculateTokenAmount(amounts, deposit);\r\n    }\r\n\r\n    function calculateSwap(\r\n        uint8 inIndex,\r\n        uint8 outIndex,\r\n        uint256 inAmount\r\n    ) external view override returns (uint256) {\r\n        return swapStorage.calculateSwap(inIndex, outIndex, inAmount);\r\n    }\r\n\r\n    function calculateRemoveLiquidity(address account, uint256 amount)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return swapStorage.calculateRemoveLiquidity(account, amount);\r\n    }\r\n\r\n    function calculateRemoveLiquidityOneToken(\r\n        address account,\r\n        uint256 amount,\r\n        uint8 index\r\n    ) external view override returns (uint256) {\r\n        return swapStorage.calculateRemoveLiquidityOneToken(account, amount, index);\r\n    }\r\n\r\n    function calculateCurrentWithdrawFee(address account) external view override returns (uint256) {\r\n        return swapStorage._calculateCurrentWithdrawFee(account);\r\n    }\r\n\r\n    /// RESTRICTED FUNCTION\r\n    /**\r\n     * @notice Updates the user withdraw fee. This function can only be called by\r\n     * the pool token. Should be used to update the withdraw fee on transfer of pool tokens.\r\n     * Transferring your pool token will reset the 4 weeks period. If the recipient is already\r\n     * holding some pool tokens, the withdraw fee will be discounted in respective amounts.\r\n     * @param recipient address of the recipient of pool token\r\n     * @param transferAmount amount of pool token to transfer\r\n     */\r\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external override {\r\n        require(msg.sender == address(swapStorage.lpToken), \"!lpToken\");\r\n        swapStorage.updateUserWithdrawFee(recipient, transferAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the admin fee\r\n     * @dev adminFee cannot be higher than 100% of the swap fee\r\n     * swap fee cannot be higher than 1% of each swap\r\n     * @param newSwapFee new swap fee to be applied on future transactions\r\n     * @param newAdminFee new admin fee to be applied on future transactions\r\n     * @param newWithdrawFee new initial withdraw fee to be applied on future withdrawal transactions\r\n     */\r\n    function setFee(\r\n        uint256 newSwapFee,\r\n        uint256 newAdminFee,\r\n        uint256 newWithdrawFee\r\n    ) external onlyOwner {\r\n        require(newSwapFee <= MAX_SWAP_FEE, \"> maxSwapFee\");\r\n        require(newAdminFee <= MAX_ADMIN_FEE, \"> maxAdminFee\");\r\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \"> maxWithdrawFee\");\r\n        swapStorage.adminFee = newAdminFee;\r\n        swapStorage.fee = newSwapFee;\r\n        swapStorage.defaultWithdrawFee = newWithdrawFee;\r\n\r\n        emit NewFee(newSwapFee, newAdminFee, newWithdrawFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\r\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\r\n     * the limit range.\r\n     * @param futureA the new A to ramp towards\r\n     * @param futureATime timestamp when the new A should be reached\r\n     */\r\n    function rampA(uint256 futureA, uint256 futureATime) external onlyOwner {\r\n        require(block.timestamp >= swapStorage.initialATime + (1 days), \"< rampDelay\"); // please wait 1 days before start a new ramping\r\n        require(futureATime >= block.timestamp + (MIN_RAMP_TIME), \"< minRampTime\");\r\n        require(0 < futureA && futureA < MAX_A, \"outOfRange\");\r\n\r\n        uint256 initialAPrecise = swapStorage.getAPrecise();\r\n        uint256 futureAPrecise = futureA * IronSwapLib.A_PRECISION;\r\n\r\n        if (futureAPrecise < initialAPrecise) {\r\n            require(futureAPrecise * (MAX_A_CHANGE) >= initialAPrecise, \"> maxChange\");\r\n        } else {\r\n            require(futureAPrecise <= initialAPrecise * (MAX_A_CHANGE), \"> maxChange\");\r\n        }\r\n\r\n        swapStorage.initialA = initialAPrecise;\r\n        swapStorage.futureA = futureAPrecise;\r\n        swapStorage.initialATime = block.timestamp;\r\n        swapStorage.futureATime = futureATime;\r\n\r\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureATime);\r\n    }\r\n\r\n    function stopRampA() external onlyOwner {\r\n        require(swapStorage.futureATime > block.timestamp, \"alreadyStopped\");\r\n        uint256 currentA = swapStorage.getAPrecise();\r\n\r\n        swapStorage.initialA = currentA;\r\n        swapStorage.futureA = currentA;\r\n        swapStorage.initialATime = block.timestamp;\r\n        swapStorage.futureATime = block.timestamp;\r\n\r\n        emit StopRampA(currentA, block.timestamp);\r\n    }\r\n\r\n    function setFeeController(address _feeController) external onlyOwner() {\r\n        require(_feeController != address(0), \"zeroAddress\");\r\n        feeController = _feeController;\r\n        emit FeeControllerChanged(_feeController);\r\n    }\r\n\r\n    function setFeeDistributor(address _feeDistributor) external onlyOwner() {\r\n        require(_feeDistributor != address(0), \"zeroAddress\");\r\n        feeDistributor = _feeDistributor;\r\n        emit FeeDistributorChanged(_feeDistributor);\r\n    }\r\n\r\n    function withdrawAdminFee() external override onlyFeeControllerOrOwner {\r\n        for (uint256 i = 0; i < swapStorage.pooledTokens.length; i++) {\r\n            IERC20 token = swapStorage.pooledTokens[i];\r\n            uint256 balance = token.balanceOf(address(this)) - (swapStorage.balances[i]);\r\n            if (balance != 0) {\r\n                token.safeTransfer(feeDistributor, balance);\r\n                emit CollectProtocolFee(address(token), balance);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A_CHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RAMP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateCurrentWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"inIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"adminBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrecisionMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"name\":\"setFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStorage\",\"outputs\":[{\"internalType\":\"contract LPToken\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultWithdrawFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"updateUserWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IronSwap", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IronSwapLib:7e812ca56574ed578640daedfe2cb3ef93937ee9", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://78d493a37153bd6e6705777f24a49f1bdae6d00c66b40498e0c39a04ee7c63d8"}