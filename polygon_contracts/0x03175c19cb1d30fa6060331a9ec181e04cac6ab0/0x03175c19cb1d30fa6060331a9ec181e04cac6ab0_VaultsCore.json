{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/martijn/code/tenx/titan/contracts/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.6.12;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/core/VaultsCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../libraries/WadRayMath.sol\\\";\\nimport \\\"../interfaces/IVaultsCore.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IVaultsCoreState.sol\\\";\\nimport \\\"../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ncontract VaultsCore is IVaultsCore, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant _MAX_INT = 2**256 - 1;\\n\\n  IAddressProvider public override a;\\n  IWETH public override WETH;\\n  IVaultsCoreState public override state;\\n  IDebtNotifier public override debtNotifier;\\n\\n  modifier onlyManager() {\\n    require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender));\\n    _;\\n  }\\n\\n  modifier onlyVaultOwner(uint256 _vaultId) {\\n    require(a.vaultsData().vaultOwner(_vaultId) == msg.sender);\\n    _;\\n  }\\n\\n  constructor(\\n    IAddressProvider _addresses,\\n    IWETH _IWETH,\\n    IVaultsCoreState _vaultsCoreState\\n  ) public {\\n    require(address(_addresses) != address(0));\\n    require(address(_IWETH) != address(0));\\n    require(address(_vaultsCoreState) != address(0));\\n    a = _addresses;\\n    WETH = _IWETH;\\n    state = _vaultsCoreState;\\n  }\\n\\n  // For a contract to receive ETH, it needs to have a payable fallback function\\n  // https://ethereum.stackexchange.com/a/47415\\n  receive() external payable {\\n    require(msg.sender == address(WETH));\\n  }\\n\\n  /*\\n    Allow smooth upgrading of the vaultscore.\\n    @dev this function approves token transfers to the new vaultscore of\\n    both stablex and all configured collateral types\\n    @param _newVaultsCore address of the new vaultscore\\n  */\\n  function upgrade(address payable _newVaultsCore) public override onlyManager {\\n    require(address(_newVaultsCore) != address(0));\\n    require(a.stablex().approve(_newVaultsCore, _MAX_INT));\\n\\n    for (uint256 i = 1; i <= a.config().numCollateralConfigs(); i++) {\\n      address collateralType = a.config().collateralConfigs(i).collateralType;\\n      IERC20 asset = IERC20(collateralType);\\n      asset.safeApprove(_newVaultsCore, _MAX_INT);\\n    }\\n  }\\n\\n  /*\\n    Allow smooth upgrading of the VaultsCore.\\n    @dev this function transfers both PAR and all configured collateral\\n    types to the new vaultscore.\\n  */\\n  function acceptUpgrade(address payable _oldVaultsCore) public override onlyManager {\\n    IERC20 stableX = IERC20(a.stablex());\\n    stableX.safeTransferFrom(_oldVaultsCore, address(this), stableX.balanceOf(_oldVaultsCore));\\n\\n    for (uint256 i = 1; i <= a.config().numCollateralConfigs(); i++) {\\n      address collateralType = a.config().collateralConfigs(i).collateralType;\\n      IERC20 asset = IERC20(collateralType);\\n      asset.safeTransferFrom(_oldVaultsCore, address(this), asset.balanceOf(_oldVaultsCore));\\n    }\\n  }\\n\\n  /**\\n    Configure the debt notifier.\\n    @param _debtNotifier the new DebtNotifier module address.\\n  **/\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) public override onlyManager {\\n    require(address(_debtNotifier) != address(0));\\n    debtNotifier = _debtNotifier;\\n  }\\n\\n  /**\\n    Deposit an ERC20 token into the vault of the msg.sender as collateral\\n    @dev A new vault is created if no vault exists for the `msg.sender` with the specified collateral type.\\n    this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.\\n    @param _collateralType the address of the collateral type to be deposited\\n    @param _amount the amount of tokens to be deposited in WEI.\\n  **/\\n  function deposit(address _collateralType, uint256 _amount) public override {\\n    require(a.config().collateralIds(_collateralType) != 0);\\n\\n    IERC20 asset = IERC20(_collateralType);\\n    asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    _addCollateralToVault(_collateralType, _amount);\\n  }\\n\\n  /**\\n    Wraps ETH and deposits WETH into the vault of the msg.sender as collateral\\n    @dev A new vault is created if no WETH vault exists\\n  **/\\n  function depositETH() public payable override {\\n    WETH.deposit{ value: msg.value }();\\n    _addCollateralToVault(address(WETH), msg.value);\\n  }\\n\\n  /**\\n    Deposit an ERC20 token into the specified vault as collateral\\n    @dev this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.\\n    @param _vaultId the address of the collateral type to be deposited\\n    @param _amount the amount of tokens to be deposited in WEI.\\n  **/\\n  function depositByVaultId(uint256 _vaultId, uint256 _amount) public override {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n    require(v.collateralType != address(0));\\n\\n    IERC20 asset = IERC20(v.collateralType);\\n    asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    _addCollateralToVaultById(_vaultId, _amount);\\n  }\\n\\n  /**\\n    Wraps ETH and deposits WETH into the specified vault as collateral\\n    @dev this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.\\n    @param _vaultId the address of the collateral type to be deposited\\n  **/\\n  function depositETHByVaultId(uint256 _vaultId) public payable override {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n    require(v.collateralType == address(WETH));\\n\\n    WETH.deposit{ value: msg.value }();\\n\\n    _addCollateralToVaultById(_vaultId, msg.value);\\n  }\\n\\n  /**\\n    Deposit an ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI\\n    @dev see deposit() and borrow()\\n    @param _collateralType the address of the collateral type to be deposited\\n    @param _depositAmount the amount of tokens to be deposited in WEI.\\n    @param _borrowAmount the amount of borrowed StableX tokens in WEI.\\n  **/\\n  function depositAndBorrow(\\n    address _collateralType,\\n    uint256 _depositAmount,\\n    uint256 _borrowAmount\\n  ) public override {\\n    deposit(_collateralType, _depositAmount);\\n    uint256 vaultId = a.vaultsData().vaultId(_collateralType, msg.sender);\\n    borrow(vaultId, _borrowAmount);\\n  }\\n\\n  /**\\n    Wraps ETH and deposits WETH into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI\\n    @dev see depositETH() and borrow()\\n    @param _borrowAmount the amount of borrowed StableX tokens in WEI.\\n  **/\\n  function depositETHAndBorrow(uint256 _borrowAmount) public payable override {\\n    depositETH();\\n    uint256 vaultId = a.vaultsData().vaultId(address(WETH), msg.sender);\\n    borrow(vaultId, _borrowAmount);\\n  }\\n\\n  function _addCollateralToVault(address _collateralType, uint256 _amount) internal {\\n    uint256 vaultId = a.vaultsData().vaultId(_collateralType, msg.sender);\\n    if (vaultId == 0) {\\n      vaultId = a.vaultsData().createVault(_collateralType, msg.sender);\\n    }\\n\\n    _addCollateralToVaultById(vaultId, _amount);\\n  }\\n\\n  function _addCollateralToVaultById(uint256 _vaultId, uint256 _amount) internal {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n\\n    a.vaultsData().setCollateralBalance(_vaultId, v.collateralBalance.add(_amount));\\n\\n    emit Deposited(_vaultId, _amount, msg.sender);\\n  }\\n\\n  /**\\n    Withdraws ERC20 tokens from a vault.\\n    @dev Only the owner of a vault can withdraw collateral from it.\\n    `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.\\n    @param _vaultId the ID of the vault from which to withdraw the collateral.\\n    @param _amount the amount of ERC20 tokens to be withdrawn in WEI.\\n  **/\\n  function withdraw(uint256 _vaultId, uint256 _amount) public override onlyVaultOwner(_vaultId) nonReentrant {\\n    _removeCollateralFromVault(_vaultId, _amount);\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n\\n    IERC20 asset = IERC20(v.collateralType);\\n    asset.safeTransfer(msg.sender, _amount);\\n  }\\n\\n  /**\\n    Withdraws ETH from a WETH vault.\\n    @dev Only the owner of a vault can withdraw collateral from it.\\n    `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.\\n    @param _vaultId the ID of the vault from which to withdraw the collateral.\\n    @param _amount the amount of ETH to be withdrawn in WEI.\\n  **/\\n  function withdrawETH(uint256 _vaultId, uint256 _amount) public override onlyVaultOwner(_vaultId) nonReentrant {\\n    _removeCollateralFromVault(_vaultId, _amount);\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n\\n    require(v.collateralType == address(WETH));\\n\\n    WETH.withdraw(_amount);\\n    msg.sender.transfer(_amount);\\n  }\\n\\n  function _removeCollateralFromVault(uint256 _vaultId, uint256 _amount) internal {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n    require(_amount <= v.collateralBalance);\\n    uint256 newCollateralBalance = v.collateralBalance.sub(_amount);\\n    a.vaultsData().setCollateralBalance(_vaultId, newCollateralBalance);\\n    if (v.baseDebt > 0) {\\n      // Save gas cost when withdrawing from 0 debt vault\\n      state.refreshCollateral(v.collateralType);\\n      uint256 newCollateralValue = a.priceFeed().convertFrom(v.collateralType, newCollateralBalance);\\n      require(\\n        a.liquidationManager().isHealthy(\\n          newCollateralValue,\\n          a.vaultsData().vaultDebt(_vaultId),\\n          a.config().collateralConfigs(a.config().collateralIds(v.collateralType)).minCollateralRatio\\n        )\\n      );\\n    }\\n\\n    emit Withdrawn(_vaultId, _amount, msg.sender);\\n  }\\n\\n  /**\\n    Borrow new PAR tokens from a vault.\\n    @dev Only the owner of a vault can borrow from it.\\n    `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal.\\n     `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.\\n    @param _vaultId the ID of the vault from which to borrow.\\n    @param _amount the amount of borrowed PAR tokens in WEI.\\n  **/\\n  function borrow(uint256 _vaultId, uint256 _amount) public override onlyVaultOwner(_vaultId) nonReentrant {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n\\n    // Make sure current rate is up to date\\n    state.refreshCollateral(v.collateralType);\\n\\n    uint256 originationFeePercentage = a.config().collateralOriginationFee(v.collateralType);\\n    uint256 newDebt = _amount;\\n    if (originationFeePercentage > 0) {\\n      newDebt = newDebt.add(_amount.wadMul(originationFeePercentage));\\n    }\\n\\n    // Increment vault borrow balance\\n    uint256 newBaseDebt = a.ratesManager().calculateBaseDebt(newDebt, cumulativeRates(v.collateralType));\\n\\n    a.vaultsData().setBaseDebt(_vaultId, v.baseDebt.add(newBaseDebt));\\n\\n    uint256 collateralValue = a.priceFeed().convertFrom(v.collateralType, v.collateralBalance);\\n    uint256 newVaultDebt = a.vaultsData().vaultDebt(_vaultId);\\n\\n    require(a.vaultsData().collateralDebt(v.collateralType) <= a.config().collateralDebtLimit(v.collateralType));\\n\\n    bool isHealthy = a.liquidationManager().isHealthy(\\n      collateralValue,\\n      newVaultDebt,\\n      a.config().collateralConfigs(a.config().collateralIds(v.collateralType)).minCollateralRatio\\n    );\\n    require(isHealthy);\\n\\n    a.stablex().mint(msg.sender, _amount);\\n    debtNotifier.debtChanged(_vaultId);\\n    emit Borrowed(_vaultId, _amount, msg.sender);\\n  }\\n\\n  /**\\n    Convenience function to repay all debt of a vault\\n    @dev `repayAll()` will update the outstanding vault debt to the current time.\\n    @param _vaultId the ID of the vault for which to repay the debt.\\n  **/\\n  function repayAll(uint256 _vaultId) public override {\\n    repay(_vaultId, _MAX_INT);\\n  }\\n\\n  /**\\n    Repay an outstanding PAR balance to a vault.\\n    @dev `repay()` will update the outstanding vault debt to the current time.\\n    @param _vaultId the ID of the vault for which to repay the outstanding debt balance.\\n    @param _amount the amount of PAR tokens in WEI to be repaid.\\n  **/\\n  function repay(uint256 _vaultId, uint256 _amount) public override nonReentrant {\\n    address collateralType = a.vaultsData().vaultCollateralType(_vaultId);\\n\\n    // Make sure current rate is up to date\\n    state.refreshCollateral(collateralType);\\n\\n    uint256 currentVaultDebt = a.vaultsData().vaultDebt(_vaultId);\\n    // Decrement vault borrow balance\\n    if (_amount >= currentVaultDebt) {\\n      //full repayment\\n      _amount = currentVaultDebt; //only pay back what's outstanding\\n    }\\n    _reduceVaultDebt(_vaultId, _amount);\\n    a.stablex().burn(msg.sender, _amount);\\n    debtNotifier.debtChanged(_vaultId);\\n    emit Repaid(_vaultId, _amount, msg.sender);\\n  }\\n\\n  /**\\n    Internal helper function to reduce the debt of a vault.\\n    @dev assumes cumulative rates for the vault's collateral type are up to date.\\n    please call `refreshCollateral()` before calling this function.\\n    @param _vaultId the ID of the vault for which to reduce the debt.\\n    @param _amount the amount of debt to be reduced.\\n  **/\\n  function _reduceVaultDebt(uint256 _vaultId, uint256 _amount) internal {\\n    address collateralType = a.vaultsData().vaultCollateralType(_vaultId);\\n\\n    uint256 currentVaultDebt = a.vaultsData().vaultDebt(_vaultId);\\n    uint256 remainder = currentVaultDebt.sub(_amount);\\n    uint256 cumulativeRate = cumulativeRates(collateralType);\\n\\n    if (remainder == 0) {\\n      a.vaultsData().setBaseDebt(_vaultId, 0);\\n    } else {\\n      uint256 newBaseDebt = a.ratesManager().calculateBaseDebt(remainder, cumulativeRate);\\n      a.vaultsData().setBaseDebt(_vaultId, newBaseDebt);\\n    }\\n  }\\n\\n  /**\\n    Liquidate a vault that is below the liquidation treshold by repaying its outstanding debt.\\n    @dev `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus`\\n    to the liquidator. `liquidate()` can be called by anyone.\\n    @param _vaultId the ID of the vault to be liquidated.\\n  **/\\n  function liquidate(uint256 _vaultId) public override {\\n    liquidatePartial(_vaultId, _MAX_INT);\\n  }\\n\\n  /**\\n    Liquidate a vault partially that is below the liquidation treshold by repaying part of its outstanding debt.\\n    @dev `liquidatePartial()` will update the outstanding vault debt to the current time and pay a `liquidationBonus`\\n    to the liquidator. A LiquidationFee will be applied to the borrower during the liquidation.\\n    This means that the change in outstanding debt can be smaller than the repaid amount.\\n    `liquidatePartial()` can be called by anyone.\\n    @param _vaultId the ID of the vault to be liquidated.\\n    @param _amount the amount of debt+liquidationFee to repay.\\n  **/\\n  function liquidatePartial(uint256 _vaultId, uint256 _amount) public override nonReentrant {\\n    IVaultsDataProvider.Vault memory v = a.vaultsData().vaults(_vaultId);\\n\\n    state.refreshCollateral(v.collateralType);\\n\\n    uint256 collateralValue = a.priceFeed().convertFrom(v.collateralType, v.collateralBalance);\\n    uint256 currentVaultDebt = a.vaultsData().vaultDebt(_vaultId);\\n\\n    require(\\n      !a.liquidationManager().isHealthy(\\n        collateralValue,\\n        currentVaultDebt,\\n        a.config().collateralConfigs(a.config().collateralIds(v.collateralType)).liquidationRatio\\n      )\\n    );\\n\\n    uint256 repaymentAfterLiquidationFeeRatio = WadRayMath.wad().sub(\\n      a.config().collateralLiquidationFee(v.collateralType)\\n    );\\n    uint256 maxLiquiditionCost = currentVaultDebt.wadDiv(repaymentAfterLiquidationFeeRatio);\\n\\n    uint256 repayAmount;\\n\\n    if (_amount > maxLiquiditionCost) {\\n      _amount = maxLiquiditionCost;\\n      repayAmount = currentVaultDebt;\\n    } else {\\n      repayAmount = _amount.wadMul(repaymentAfterLiquidationFeeRatio);\\n    }\\n\\n    // collateral value to be received by the liquidator is based on the total amount repaid (including the liquidationFee).\\n    uint256 collateralValueToReceive = _amount.add(a.liquidationManager().liquidationBonus(v.collateralType, _amount));\\n    uint256 insuranceAmount = 0;\\n    if (collateralValueToReceive >= collateralValue) {\\n      // Not enough collateral for debt & liquidation fee\\n      collateralValueToReceive = collateralValue;\\n      uint256 discountedCollateralValue = a.liquidationManager().applyLiquidationDiscount(\\n        v.collateralType,\\n        collateralValue\\n      );\\n\\n      if (currentVaultDebt > discountedCollateralValue) {\\n        // Not enough collateral for debt alone\\n        insuranceAmount = currentVaultDebt.sub(discountedCollateralValue);\\n        require(a.stablex().balanceOf(address(this)) >= insuranceAmount);\\n        a.stablex().burn(address(this), insuranceAmount); // Insurance uses local reserves to pay down debt\\n        emit InsurancePaid(_vaultId, insuranceAmount, msg.sender);\\n      }\\n\\n      repayAmount = currentVaultDebt.sub(insuranceAmount);\\n      _amount = discountedCollateralValue;\\n    }\\n\\n    // reduce the vault debt by repayAmount\\n    _reduceVaultDebt(_vaultId, repayAmount.add(insuranceAmount));\\n    a.stablex().burn(msg.sender, _amount);\\n\\n    // send the claimed collateral to the liquidator\\n    uint256 collateralToReceive = a.priceFeed().convertTo(v.collateralType, collateralValueToReceive);\\n    a.vaultsData().setCollateralBalance(_vaultId, v.collateralBalance.sub(collateralToReceive));\\n    IERC20 asset = IERC20(v.collateralType);\\n    asset.safeTransfer(msg.sender, collateralToReceive);\\n\\n    debtNotifier.debtChanged(_vaultId);\\n\\n    emit Liquidated(_vaultId, repayAmount, collateralToReceive, v.owner, msg.sender);\\n  }\\n\\n  /**\\n    Returns the cumulativeRate of a collateral type. This function exists for\\n    backwards compatibility with the VaultsDataProvider.\\n    @param _collateralType the address of the collateral type.\\n  **/\\n  function cumulativeRates(address _collateralType) public view override returns (uint256) {\\n    return state.cumulativeRates(_collateralType);\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/governance/interfaces/IGovernanceAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"./IGovernorAlpha.sol\\\";\\nimport \\\"./ITimelock.sol\\\";\\nimport \\\"./IVotingEscrow.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IMIMO.sol\\\";\\nimport \\\"../../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IGovernanceAddressProvider {\\n  function setParallelAddressProvider(IAddressProvider _parallel) external;\\n\\n  function setMIMO(IMIMO _mimo) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  function setGovernorAlpha(IGovernorAlpha _governorAlpha) external;\\n\\n  function setTimelock(ITimelock _timelock) external;\\n\\n  function setVotingEscrow(IVotingEscrow _votingEscrow) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function parallel() external view returns (IAddressProvider);\\n\\n  function mimo() external view returns (IMIMO);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function governorAlpha() external view returns (IGovernorAlpha);\\n\\n  function timelock() external view returns (ITimelock);\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/governance/interfaces/IGovernorAlpha.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\ninterface IGovernorAlpha {\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    struct Proposal {\\n        // Unique id for looking up a proposal\\n        uint256 id;\\n\\n        // Creator of the proposal\\n        address proposer;\\n\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint256 eta;\\n\\n        // the ordered list of target addresses for calls to be made\\n        address[] targets;\\n\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint256[] values;\\n\\n        // The ordered list of function signatures to be called\\n        string[] signatures;\\n\\n        // The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n\\n        // The timestamp at which voting begins: holders must delegate their votes prior to this timestamp\\n        uint256 startTime;\\n\\n        // The timestamp at which voting ends: votes must be cast prior to this timestamp\\n        uint endTime;\\n\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n\\n        // Flag marking whether the proposal has been canceled\\n        bool canceled;\\n\\n        // Flag marking whether the proposal has been executed\\n        bool executed;\\n\\n        // Receipts of ballots for the entire set of voters\\n        mapping (address => Receipt) receipts;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n\\n        // Whether or not the voter supports the proposal\\n        bool support;\\n\\n        // The number of votes the voter had, which were cast\\n        uint votes;\\n    }\\n\\n    /// @notice An event emitted when a new proposal is created\\n    event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint startTime, uint endTime, string description);\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal\\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\\n\\n    /// @notice An event emitted when a proposal has been canceled\\n    event ProposalCanceled(uint256 id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\n    event ProposalQueued(uint256 id, uint256 eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\n    event ProposalExecuted(uint256 id);\\n\\n    function propose(address[] memory targets, uint256[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description, uint256 endTime) external returns (uint);\\n\\n    function queue(uint256 proposalId) external;\\n\\n    function execute(uint256 proposalId) external payable;\\n\\n    function cancel(uint256 proposalId) external;\\n\\n    function castVote(uint256 proposalId, bool support) external;\\n\\n    function getActions(uint256 proposalId) external view returns (address[] memory targets, uint256[] memory values, string[] memory signatures, bytes[] memory calldatas);\\n\\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory);\\n\\n    function state(uint proposalId) external view returns (ProposalState);\\n\\n    function quorumVotes() external view returns (uint256);\\n\\n    function proposalThreshold() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/governance/interfaces/ITimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.6.12;\\n\\ninterface ITimelock {\\n  event NewAdmin(address indexed newAdmin);\\n  event NewPendingAdmin(address indexed newPendingAdmin);\\n  event NewDelay(uint256 indexed newDelay);\\n  event CancelTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event ExecuteTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n  event QueueTransaction(\\n    bytes32 indexed txHash,\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 eta\\n  );\\n\\n  function acceptAdmin() external;\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/governance/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotingEscrow {\\n  enum LockAction { CREATE_LOCK, INCREASE_LOCK_AMOUNT, INCREASE_LOCK_TIME }\\n\\n  struct LockedBalance {\\n    uint256 amount;\\n    uint256 end;\\n  }\\n\\n  /** Shared Events */\\n  event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\\n  event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n  event Expired();\\n\\n  function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n  function increaseLockAmount(uint256 _value) external;\\n\\n  function increaseLockLength(uint256 _unlockTime) external;\\n\\n  function withdraw() external;\\n\\n  function expireContract() external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  function balanceOfAt(address _owner, uint256 _blockTime) external view returns (uint256);\\n\\n  function stakingToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAccessController {\\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  function MINTER_ROLE() external view returns (bytes32);\\n\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n  function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"./IAccessController.sol\\\";\\nimport \\\"./IConfigProvider.sol\\\";\\nimport \\\"./ISTABLEX.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"./IRatesManager.sol\\\";\\nimport \\\"./ILiquidationManager.sol\\\";\\nimport \\\"./IVaultsCore.sol\\\";\\nimport \\\"./IVaultsDataProvider.sol\\\";\\nimport \\\"./IFeeDistributor.sol\\\";\\n\\ninterface IAddressProvider {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProvider _config) external;\\n\\n  function setVaultsCore(IVaultsCore _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManager _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProvider);\\n\\n  function core() external view returns (IVaultsCore);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManager);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IConfigProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IConfigProvider {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 liquidationRatio;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n    uint256 liquidationBonus;\\n    uint256 liquidationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 liquidationRatio,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee,\\n    uint256 liquidationBonus,\\n    uint256 liquidationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _liquidationRatio,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee,\\n    uint256 _liquidationBonus,\\n    uint256 _liquidationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralLiquidationRatio(address _collateralType, uint256 _liquidationRatio) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus) external;\\n\\n  function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) external;\\n\\n  function setMinVotingPeriod(uint256 _minVotingPeriod) external;\\n\\n  function setMaxVotingPeriod(uint256 _maxVotingPeriod) external;\\n\\n  function setVotingQuorum(uint256 _votingQuorum) external;\\n\\n  function setProposalThreshold(uint256 _proposalThreshold) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function minVotingPeriod() external view returns (uint256);\\n\\n  function maxVotingPeriod() external view returns (uint256);\\n\\n  function votingQuorum() external view returns (uint256);\\n\\n  function proposalThreshold() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationBonus(address _collateralType) external view returns (uint256);\\n\\n  function collateralLiquidationFee(address _collateralType) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IFeeDistributor {\\n  event PayeeAdded(address indexed account, uint256 shares);\\n  event FeeReleased(uint256 income, uint256 releasedAt);\\n\\n  function release() external;\\n\\n  function changePayees(address[] memory _payees, uint256[] memory _shares) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function lastReleasedAt() external view returns (uint256);\\n\\n  function getPayees() external view returns (address[] memory);\\n\\n  function totalShares() external view returns (uint256);\\n\\n  function shares(address payee) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/ILiquidationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ILiquidationManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  function calculateHealthFactor(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(address _collateralType, uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(address _collateralType, uint256 _amount)\\n    external\\n    view\\n    returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt,\\n    uint256 _minRatio\\n  ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IPriceFeed {\\n  event OracleUpdated(address indexed asset, address oracle, address sender);\\n  event EurOracleUpdated(address oracle, address sender);\\n\\n  function setAssetOracle(address _asset, address _oracle) external;\\n\\n  function setEurOracle(address _oracle) external;\\n\\n  function a() external view returns (IAddressProvider);\\n\\n  function assetOracles(address _asset) external view returns (AggregatorV3Interface);\\n\\n  function eurOracle() external view returns (AggregatorV3Interface);\\n\\n  function getAssetPrice(address _asset) external view returns (uint256);\\n\\n  function convertFrom(address _asset, uint256 _amount) external view returns (uint256);\\n\\n  function convertTo(address _asset, uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IRatesManager {\\n  function a() external view returns (IAddressProvider);\\n\\n  //current annualized borrow rate\\n  function annualizedBorrowRate(uint256 _currentBorrowRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate totalDebt based on baseDebt at time T0\\n  function calculateDebt(uint256 _baseDebt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //uses current cumulative rate to calculate baseDebt at time T0\\n  function calculateBaseDebt(uint256 _debt, uint256 _cumulativeRate) external pure returns (uint256);\\n\\n  //calculate a new cumulative rate\\n  function calculateCumulativeRate(\\n    uint256 _borrowRate,\\n    uint256 _cumulativeRate,\\n    uint256 _timeElapsed\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/ISTABLEX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface ISTABLEX is IERC20 {\\n  function mint(address account, uint256 amount) external;\\n\\n  function burn(address account, uint256 amount) external;\\n\\n  function a() external view returns (IAddressProvider);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IVaultsCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\nimport \\\"../interfaces/IVaultsCoreState.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../liquidityMining/interfaces/IDebtNotifier.sol\\\";\\n\\ninterface IVaultsCore {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function depositETH() external payable;\\n\\n  function depositByVaultId(uint256 _vaultId, uint256 _amount) external;\\n\\n  function depositETHByVaultId(uint256 _vaultId) external payable;\\n\\n  function depositAndBorrow(\\n    address _collateralType,\\n    uint256 _depositAmount,\\n    uint256 _borrowAmount\\n  ) external;\\n\\n  function depositETHAndBorrow(uint256 _borrowAmount) external payable;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawETH(uint256 _vaultId, uint256 _amount) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  function liquidatePartial(uint256 _vaultId, uint256 _amount) external;\\n\\n  function upgrade(address payable _newVaultsCore) external;\\n\\n  function acceptUpgrade(address payable _oldVaultsCore) external;\\n\\n  function setDebtNotifier(IDebtNotifier _debtNotifier) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function WETH() external view returns (IWETH);\\n\\n  function debtNotifier() external view returns (IDebtNotifier);\\n\\n  function state() external view returns (IVaultsCoreState);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IVaultsCoreState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\nimport \\\"./IAddressProvider.sol\\\";\\nimport \\\"../v1/interfaces/IVaultsCoreV1.sol\\\";\\n\\ninterface IVaultsCoreState {\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  function syncState(IVaultsCoreState _stateAddress) external;\\n\\n  function syncStateFromV1(IVaultsCoreV1 _core) external;\\n\\n  //Read only\\n  function a() external view returns (IAddressProvider);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n\\n  function synced() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IVaultsDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IAddressProvider.sol\\\";\\n\\ninterface IVaultsDataProvider {\\n  struct Vault {\\n    // borrowedType support USDX / PAR\\n    address collateralType;\\n    address owner;\\n    uint256 collateralBalance;\\n    uint256 baseDebt;\\n    uint256 createdAt;\\n  }\\n\\n  //Write\\n  function createVault(address _collateralType, address _owner) external returns (uint256);\\n\\n  function setCollateralBalance(uint256 _id, uint256 _balance) external;\\n\\n  function setBaseDebt(uint256 _id, uint256 _newBaseDebt) external;\\n\\n  // Read\\n  function a() external view returns (IAddressProvider);\\n\\n  function baseDebt(address _collateralType) external view returns (uint256);\\n\\n  function vaultCount() external view returns (uint256);\\n\\n  function vaults(uint256 _id) external view returns (Vault memory);\\n\\n  function vaultOwner(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralType(uint256 _id) external view returns (address);\\n\\n  function vaultCollateralBalance(uint256 _id) external view returns (uint256);\\n\\n  function vaultBaseDebt(uint256 _id) external view returns (uint256);\\n\\n  function vaultId(address _collateralType, address _owner) external view returns (uint256);\\n\\n  function vaultExists(uint256 _id) external view returns (bool);\\n\\n  function vaultDebt(uint256 _vaultId) external view returns (uint256);\\n\\n  function debt() external view returns (uint256);\\n\\n  function collateralDebt(address _collateralType) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/libraries/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n  using SafeMath for uint256;\\n\\n  uint256 internal constant _WAD = 1e18;\\n  uint256 internal constant _HALF_WAD = _WAD / 2;\\n\\n  uint256 internal constant _RAY = 1e27;\\n  uint256 internal constant _HALF_RAY = _RAY / 2;\\n\\n  uint256 internal constant _WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return _RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return _WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return _HALF_RAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return _HALF_WAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return _HALF_WAD.add(a.mul(b)).div(_WAD);\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    return halfB.add(a.mul(_WAD)).div(b);\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return _HALF_RAY.add(a.mul(b)).div(_RAY);\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    return halfB.add(a.mul(_RAY)).div(b);\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = _WAD_RAY_RATIO / 2;\\n\\n    return halfRatio.add(a).div(_WAD_RAY_RATIO);\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    return a.mul(_WAD_RAY_RATIO);\\n  }\\n\\n  /**\\n   * @dev calculates x^n, in ray. The code uses the ModExp precompile\\n   * @param x base\\n   * @param n exponent\\n   * @return z = x^n, in ray\\n   */\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : _RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/liquidityMining/interfaces/IDebtNotifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\n\\nimport \\\"../../governance/interfaces/IGovernanceAddressProvider.sol\\\";\\nimport \\\"./ISupplyMiner.sol\\\";\\n\\ninterface IDebtNotifier {\\n\\n  function debtChanged(uint256 _vaultId) external;\\n\\n  function setCollateralSupplyMiner(address collateral, ISupplyMiner supplyMiner) external;\\n\\n  function a() external view returns (IGovernanceAddressProvider);\\n\\n\\tfunction collateralSupplyMinerMapping(address collateral) external view returns (ISupplyMiner);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/liquidityMining/interfaces/IMIMO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMIMO is IERC20 {\\n\\n  function burn(address account, uint256 amount) external;\\n  \\n  function mint(address account, uint256 amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/liquidityMining/interfaces/ISupplyMiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\ninterface ISupplyMiner {\\n\\n  function baseDebtChanged(address user, uint256 newBaseDebt) external;\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/v1/interfaces/IAddressProviderV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"./IConfigProviderV1.sol\\\";\\nimport \\\"./ILiquidationManagerV1.sol\\\";\\nimport \\\"./IVaultsCoreV1.sol\\\";\\nimport \\\"../../interfaces/IVaultsCore.sol\\\";\\nimport \\\"../../interfaces/IAccessController.sol\\\";\\nimport \\\"../../interfaces/ISTABLEX.sol\\\";\\nimport \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../../interfaces/IRatesManager.sol\\\";\\nimport \\\"../../interfaces/IVaultsDataProvider.sol\\\";\\nimport \\\"../../interfaces/IFeeDistributor.sol\\\";\\n\\ninterface IAddressProviderV1 {\\n  function setAccessController(IAccessController _controller) external;\\n\\n  function setConfigProvider(IConfigProviderV1 _config) external;\\n\\n  function setVaultsCore(IVaultsCoreV1 _core) external;\\n\\n  function setStableX(ISTABLEX _stablex) external;\\n\\n  function setRatesManager(IRatesManager _ratesManager) external;\\n\\n  function setPriceFeed(IPriceFeed _priceFeed) external;\\n\\n  function setLiquidationManager(ILiquidationManagerV1 _liquidationManager) external;\\n\\n  function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;\\n\\n  function setFeeDistributor(IFeeDistributor _feeDistributor) external;\\n\\n  function controller() external view returns (IAccessController);\\n\\n  function config() external view returns (IConfigProviderV1);\\n\\n  function core() external view returns (IVaultsCoreV1);\\n\\n  function stablex() external view returns (ISTABLEX);\\n\\n  function ratesManager() external view returns (IRatesManager);\\n\\n  function priceFeed() external view returns (IPriceFeed);\\n\\n  function liquidationManager() external view returns (ILiquidationManagerV1);\\n\\n  function vaultsData() external view returns (IVaultsDataProvider);\\n\\n  function feeDistributor() external view returns (IFeeDistributor);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/v1/interfaces/IConfigProviderV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IConfigProviderV1 {\\n  struct CollateralConfig {\\n    address collateralType;\\n    uint256 debtLimit;\\n    uint256 minCollateralRatio;\\n    uint256 borrowRate;\\n    uint256 originationFee;\\n  }\\n\\n  event CollateralUpdated(\\n    address indexed collateralType,\\n    uint256 debtLimit,\\n    uint256 minCollateralRatio,\\n    uint256 borrowRate,\\n    uint256 originationFee\\n  );\\n  event CollateralRemoved(address indexed collateralType);\\n\\n  function setCollateralConfig(\\n    address _collateralType,\\n    uint256 _debtLimit,\\n    uint256 _minCollateralRatio,\\n    uint256 _borrowRate,\\n    uint256 _originationFee\\n  ) external;\\n\\n  function removeCollateral(address _collateralType) external;\\n\\n  function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;\\n\\n  function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;\\n\\n  function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;\\n\\n  function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;\\n\\n  function setLiquidationBonus(uint256 _bonus) external;\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);\\n\\n  function collateralIds(address _collateralType) external view returns (uint256);\\n\\n  function numCollateralConfigs() external view returns (uint256);\\n\\n  function liquidationBonus() external view returns (uint256);\\n\\n  function collateralDebtLimit(address _collateralType) external view returns (uint256);\\n\\n  function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);\\n\\n  function collateralBorrowRate(address _collateralType) external view returns (uint256);\\n\\n  function collateralOriginationFee(address _collateralType) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/v1/interfaces/ILiquidationManagerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\n\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface ILiquidationManagerV1 {\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function calculateHealthFactor(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (uint256 healthFactor);\\n\\n  function liquidationBonus(uint256 _amount) external view returns (uint256 bonus);\\n\\n  function applyLiquidationDiscount(uint256 _amount) external view returns (uint256 discountedAmount);\\n\\n  function isHealthy(\\n    address _collateralType,\\n    uint256 _collateralValue,\\n    uint256 _vaultDebt\\n  ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/martijn/code/tenx/titan/contracts/v1/interfaces/IVaultsCoreV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma experimental ABIEncoderV2;\\npragma solidity 0.6.12;\\nimport \\\"./IAddressProviderV1.sol\\\";\\n\\ninterface IVaultsCoreV1 {\\n  event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);\\n  event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);\\n  event Liquidated(\\n    uint256 indexed vaultId,\\n    uint256 debtRepaid,\\n    uint256 collateralLiquidated,\\n    address indexed owner,\\n    address indexed sender\\n  );\\n\\n  event CumulativeRateUpdated(address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate); //cumulative interest rate from deployment time T0\\n\\n  event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);\\n\\n  function deposit(address _collateralType, uint256 _amount) external;\\n\\n  function withdraw(uint256 _vaultId, uint256 _amount) external;\\n\\n  function withdrawAll(uint256 _vaultId) external;\\n\\n  function borrow(uint256 _vaultId, uint256 _amount) external;\\n\\n  function repayAll(uint256 _vaultId) external;\\n\\n  function repay(uint256 _vaultId, uint256 _amount) external;\\n\\n  function liquidate(uint256 _vaultId) external;\\n\\n  //Refresh\\n  function initializeRates(address _collateralType) external;\\n\\n  function refresh() external;\\n\\n  function refreshCollateral(address collateralType) external;\\n\\n  //upgrade\\n  function upgrade(address _newVaultsCore) external;\\n\\n  //Read only\\n\\n  function a() external view returns (IAddressProviderV1);\\n\\n  function availableIncome() external view returns (uint256);\\n\\n  function cumulativeRates(address _collateralType) external view returns (uint256);\\n\\n  function lastRefresh(address _collateralType) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_addresses\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_IWETH\",\"type\":\"address\"},{\"internalType\":\"contract IVaultsCoreState\",\"name\":\"_vaultsCoreState\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InsurancePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralLiquidated\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Opened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_oldVaultsCore\",\"type\":\"address\"}],\"name\":\"acceptUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralType\",\"type\":\"address\"}],\"name\":\"cumulativeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtNotifier\",\"outputs\":[{\"internalType\":\"contract IDebtNotifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralType\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositByVaultId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"depositETHAndBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"depositETHByVaultId\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidatePartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtNotifier\",\"name\":\"_debtNotifier\",\"type\":\"address\"}],\"name\":\"setDebtNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract IVaultsCoreState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newVaultsCore\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VaultsCore", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a802ee4bd9f449295adb6d73f65118352420758a0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002d49e60555d0372be23e2b24aeb3e5ea55dcb417", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}