{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function updateRouter(address newRouter) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n    function burnFrom(address sender,uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ILmncRouterV1 {\r\n    function getemitBlock() external view returns (uint256[] memory);\r\n    function getemitPrice() external view returns (uint256[] memory);\r\n    function getRebalancedPrice() external view returns (uint256);\r\n    function swapExactPegForTokens(uint256 amountIn,address to) external returns (bool,uint256[] memory);\r\n    function swapExactTokensForPeg(uint256 amountIn,address to) external returns (bool,uint256[] memory);\r\n    function getAmountTokenFromExactPeg(uint256 amountIn) external view returns (uint256[] memory);\r\n    function getAmountPegFromExactToken(uint256 amountIn) external view returns (uint256[] memory);\r\n}\r\n\r\ncontract permission {\r\n\r\n    address private _owner;\r\n    mapping(address => mapping(string => bytes32)) private _permit;\r\n\r\n    modifier forRole(string memory str) {\r\n        require(checkpermit(msg.sender,str),\"Permit Revert!\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        newpermit(msg.sender,\"owner\");\r\n        newpermit(msg.sender,\"permit\");\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) { return _owner; }\r\n    function newpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }\r\n    function clearpermit(address adr,string memory str) internal { _permit[adr][str] = bytes32(keccak256(abi.encode(\"null\"))); }\r\n    function checkpermit(address adr,string memory str) public view returns (bool) {\r\n        if(_permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }\r\n    }\r\n\r\n    function grantRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { newpermit(adr,role); return true; }\r\n    function revokeRole(address adr,string memory role) public forRole(\"owner\") returns (bool) { clearpermit(adr,role); return true; }\r\n\r\n    function transferOwnership(address adr) public forRole(\"owner\") returns (bool) {\r\n        newpermit(adr,\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = adr;\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public forRole(\"owner\") returns (bool) {\r\n        newpermit(address(0),\"owner\");\r\n        clearpermit(msg.sender,\"owner\");\r\n        _owner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract LMNCProtocolRouter is permission {\r\n\r\n    event Swap(address indexed msgSender,address indexed to,uint256 amountIn,uint256[] data);\r\n    event Rebalance(uint256 changedPrice,uint256 formPrice,uint256 toPrice,uint256 index);\r\n\r\n    uint256[] emitBlock;\r\n    uint256[] emitPrice;\r\n\r\n    uint256 public price;\r\n    uint256 public gap;\r\n    uint256 public rebalanceAt;\r\n    uint256 public denominator;\r\n    uint256 public split;\r\n\r\n    uint256 public buy_price;\r\n    uint256 public stack_gap;\r\n\r\n    address public tokenAddress;\r\n    address public pegAddress;\r\n\r\n    uint256 public voteStartTimer;\r\n    uint256 public voteEndingTimer;\r\n    uint256 public voteTotalAccept;\r\n    uint256 public voteTotalDecide;\r\n\r\n    bool public proporsalCalled = true;\r\n    address public proporsalContract;\r\n    bytes public proporsalData;\r\n    address[] voter;\r\n    uint256[] votePower;\r\n    bool[] votestate;\r\n\r\n    address[] users;\r\n\r\n    struct User {\r\n        uint256 totalBuy;\r\n        uint256 totalSell;\r\n    }\r\n\r\n    mapping(address => User) public user;\r\n    mapping(address => mapping(uint256 => mapping(bytes => bool))) public voted;\r\n\r\n    bool locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor(address token,address peg) {\r\n        tokenAddress = token;\r\n        pegAddress = peg;\r\n        price = 1e4;\r\n        gap = 50 * 1e6;\r\n        split = 3000 * 1e6;\r\n        rebalanceAt = 30;\r\n        denominator = 1000;\r\n        buy_price = price;\r\n    }\r\n\r\n    function getemitBlock() public view returns (uint256[] memory) { return emitBlock; }\r\n    function getemitPrice() public view returns (uint256[] memory) { return emitPrice; }\r\n\r\n    function getUsers() public view returns (address[] memory) {\r\n        return users;\r\n    }\r\n\r\n    function simpleSwap(uint256 amountIn,address to) public forRole(\"permit\") noReentrant returns (bool,uint256[] memory) {\r\n        (bool success,uint256[] memory result) = _swapExactPegForTokens(amountIn,to);\r\n        require(success,\"swapExactPegForTokens Fail!\");\r\n        return (success,result);\r\n    }\r\n\r\n    function swapExactPegForTokens(uint256 amountIn,address to) public forRole(\"permit\") noReentrant returns (bool) {\r\n        do{\r\n            if(amountIn>split){\r\n                amountIn -= split;\r\n                (bool success,) = _swapExactPegForTokens(split,to);\r\n                require(success,\"swapExactPegForTokens Fail!\");\r\n            }else{\r\n                (bool success,) = _swapExactPegForTokens(amountIn,to);\r\n                require(success,\"swapExactPegForTokens Fail!\");\r\n                break;\r\n            }   \r\n        }while(true);\r\n        return (true);\r\n    }\r\n\r\n    function _swapExactPegForTokens(uint256 amountIn,address to) internal returns (bool,uint256[] memory) {\r\n        require(!isVoting(),\"Voting Live!\");\r\n        uint256[] memory result = getAmountTokenFromExactPeg(amountIn);\r\n        uint256 amountOut = result[1];\r\n        IERC20(pegAddress).transferFrom(msg.sender,address(this),amountIn);\r\n        IERC20(tokenAddress).mint(to,amountOut);\r\n        buy_price = result[3];\r\n        stack_gap = result[4];\r\n        rebalanced();\r\n        user[msg.sender].totalBuy += amountIn;\r\n        emit Swap(msg.sender,to,amountIn,result);\r\n        return (true,result);\r\n    }\r\n\r\n    function swapExactTokensForPeg(uint256 amountIn,address to) public noReentrant returns (bool,uint256[] memory) {\r\n        require(!isVoting(),\"Voting Live!\");\r\n        uint256[] memory result = getAmountPegFromExactToken(amountIn);\r\n        uint256 amountOut = result[1];\r\n        IERC20(tokenAddress).burnFrom(msg.sender,amountIn);\r\n        IERC20(pegAddress).transfer(to,amountOut);\r\n        rebalanced();\r\n        user[msg.sender].totalSell += amountOut;\r\n        emit Swap(msg.sender,to,amountIn,result);\r\n        return (true,result);\r\n    }\r\n\r\n    function rebalanced() internal {\r\n        rebalancePrice();\r\n        emitBlock.push(block.timestamp);\r\n        emitPrice.push(buy_price);\r\n    }\r\n\r\n    function getAmountTokenFromExactPeg(uint256 amountIn) public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](5);\r\n        uint256 current_price = buy_price;\r\n        uint256 amount = amountIn;\r\n        uint256 amountOut;\r\n        uint256 stacking = stack_gap;\r\n        uint256 token_decimals = IERC20(tokenAddress).decimals();\r\n        if(stacking>=gap){\r\n            current_price = increasePriceTokenomics(current_price);\r\n            stacking -= gap;\r\n        }\r\n        while(amount>0){\r\n            if(amount>=gap){\r\n                amountOut += gap / current_price * (10**token_decimals);\r\n                amount -= gap;\r\n                current_price = increasePriceTokenomics(current_price);\r\n            }else{\r\n                amountOut += amount / current_price * (10**token_decimals);\r\n                stacking += amount;\r\n                amount = 0;\r\n            }\r\n        }\r\n        result[0] = amountIn;\r\n        result[1] = amountOut;\r\n        result[2] = buy_price;\r\n        result[3] = current_price;\r\n        result[4] = stacking;\r\n        return result;\r\n    }\r\n\r\n    function getAmountPegFromExactToken(uint256 amountIn) public view returns (uint256[] memory) {\r\n        uint256[] memory result = new uint256[](4);\r\n        uint256 pegPerToken = getRebalancedPrice();\r\n        uint8 token_decimals = IERC20(tokenAddress).decimals();\r\n        uint256 amountOut = amountIn * pegPerToken / (10**token_decimals);\r\n        result[0] = amountIn;\r\n        result[1] = amountOut;\r\n        result[2] = buy_price;\r\n        result[3] = pegPerToken;\r\n        return result;\r\n    }\r\n\r\n    function getRebalancedPrice() public view returns (uint256) {\r\n        uint256 pegBalance = IERC20(pegAddress).balanceOf(address(this));\r\n        uint256 totalSupply = IERC20(tokenAddress).totalSupply();\r\n        return getSimmulateBalanced(pegBalance,totalSupply);\r\n    }\r\n\r\n    function getSimmulateBalanced(uint256 pegBalance,uint256 totalSupply) internal view returns (uint256) {\r\n        uint8 token_decimals = IERC20(tokenAddress).decimals();\r\n        if(totalSupply>0){ return (pegBalance * (10**token_decimals)) / totalSupply; }\r\n        return 0;\r\n    }\r\n\r\n    function sync() external returns (bool) {\r\n        require(msg.sender==tokenAddress,\"LmncRouter: Only LmncToken Can Call!\");\r\n        rebalancePrice();\r\n        return true;\r\n    }\r\n\r\n    function rebalancePrice() internal {\r\n        uint256 rebalancing = getRebalancedPrice();\r\n        if(rebalancing>0){\r\n            if(rebalancing>buy_price){\r\n                uint256 changedPrice = rebalancing - buy_price;\r\n                buy_price = rebalancing;\r\n                emit Rebalance(changedPrice,buy_price,rebalancing,0);\r\n            }\r\n            if(buy_price>rebalancing){\r\n                uint256 changedPrice = buy_price - rebalancing;\r\n                uint256 changedMax = rebalancing * rebalanceAt / denominator;\r\n                if(changedPrice > changedMax){\r\n                    buy_price = rebalancing + changedMax;\r\n                    emit Rebalance(changedPrice,buy_price,rebalancing,1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function increasePriceTokenomics(uint256 currentPrice) internal pure returns (uint256) {\r\n        currentPrice = currentPrice * 1001;\r\n        currentPrice = currentPrice / 1000;\r\n        return currentPrice;\r\n    }\r\n\r\n    function getVoter() public view returns (address[] memory,uint256[] memory,bool[] memory) {\r\n        return (voter,votePower,votestate);\r\n    }\r\n\r\n    function voteRequest(address to,bytes memory data) public forRole(\"owner\") returns (bool) {\r\n        require(!isVoting(),\"Voting Live!\");\r\n        voteStartTimer = block.timestamp;\r\n        voteEndingTimer = voteStartTimer + 60 * 7; //7 min\r\n        proporsalContract = to;\r\n        proporsalData = data;\r\n        proporsalCalled = false;\r\n        voter = [address(0)];\r\n        votePower = [0];\r\n        votestate = [false];\r\n        voteTotalAccept = 0;\r\n        voteTotalDecide = 0;\r\n        return true;\r\n    }\r\n\r\n    function vote(uint256 timestamp,bytes memory data,bool accept) public returns (bool) {\r\n        require(!voted[msg.sender][timestamp][data],\"This Address Applied This Proporsal\");\r\n        voted[msg.sender][timestamp][data] = true;\r\n        uint256 power = IERC20(tokenAddress).balanceOf(msg.sender);\r\n        voter.push(msg.sender);\r\n        votePower.push(power);\r\n        votestate.push(accept);\r\n        if(accept){\r\n            voteTotalAccept += power;\r\n        }else{\r\n            voteTotalDecide += power;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function proporsalCall() public forRole(\"owner\") returns (bool) {\r\n        require(proporsalCalled==false,\"Need Excreate Voter\");\r\n        uint256 requireSupply = IERC20(tokenAddress).totalSupply() * 50 / 100;\r\n        bool bypass = voteTotalAccept>requireSupply;\r\n        bool noReject = voteTotalDecide<requireSupply && block.timestamp > voteEndingTimer;\r\n        if(bypass||noReject){\r\n            if(keccak256(proporsalData) == keccak256(abi.encodeWithSignature(\"migrate()\"))){\r\n                IERC20(tokenAddress).updateRouter(proporsalContract);\r\n                IERC20(tokenAddress).approve(proporsalContract,type(uint256).max);\r\n                IERC20(pegAddress).approve(proporsalContract,type(uint256).max);\r\n            }\r\n            (bool success,) = proporsalContract.call(proporsalData);\r\n            require(success,\"call fail!\");\r\n            proporsalCalled = true;\r\n        }else{\r\n            if(block.timestamp < voteEndingTimer){\r\n                revert(\"Can't call proporsal now\");\r\n            }else{\r\n                proporsalCalled = true;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isVoting() public view returns (bool) {\r\n        if(proporsalCalled == false){ return true; }else{ return false; }\r\n    }\r\n\r\n    function withdrawETH(address to,uint256 amount) public forRole(\"owner\") returns (bool) {\r\n        (bool success,) = to.call{ value: amount }(\"\");\r\n        require(success, \"FAIL TO SEND ETH!\");\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"peg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"formPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buy_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"checkpermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountPegFromExactToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountTokenFromExactPeg\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRebalancedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoter\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getemitBlock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getemitPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"grantRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proporsalCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proporsalCalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proporsalContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proporsalData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"revokeRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"simpleSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stack_gap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactPegForTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForPeg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"accept\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteEndingTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"voteRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteStartTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteTotalAccept\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteTotalDecide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LMNCProtocolRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000073d0f83be72535d24a6ea276fcd788ecc33597a5000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1024ffe0818b952d36409ab38630c6d636e3a939a8563899e7ff2148650e48c"}