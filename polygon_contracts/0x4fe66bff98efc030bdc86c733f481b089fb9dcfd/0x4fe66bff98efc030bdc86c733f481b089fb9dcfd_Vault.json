{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/AddArrayLib.sol\\\";\\n\\nimport \\\"./interfaces/ITradeExecutor.sol\\\";\\nimport \\\"./interfaces/IYieldExecutor.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/// @title Polygains Vault (Brahma Vault)\\n/// @author 0xAd1 and Bapireddy\\n/// @notice Minimal vault contract to support trades across different protocols.\\ncontract Vault is IVault, ERC20Permit, ReentrancyGuard {\\n    using AddrArrayLib for AddrArrayLib.Addresses;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    /// @dev minimum balance used to check when executor is removed.\\n    uint256 public constant DUST_LIMIT = 10**18;\\n    /// @dev The max basis points used as normalizing factor.\\n    uint256 public constant MAX_BPS = 10000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice The underlying token the vault accepts.\\n    address public immutable override wantToken;\\n\\n    uint8 private immutable tokenDecimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MUTABLE ACCESS MODFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice boolean for enabling emergency mode to halt new withdrawal/deposits into vault.\\n    bool public emergencyMode;\\n\\n    // // @notice address of batcher used for batching user deposits/withdrawals.\\n    // address public batcher;\\n    /// @notice keeper address to move funds between executors.\\n    address public override keeper;\\n    /// @notice Governance address to add/remove  executors.\\n    address public override governance;\\n    address public pendingGovernance;\\n\\n    /// @notice time check for harvest\\n    uint256 public harvestThreshold = 561600; // 6.5 days\\n    /// @notice timestamp of last harvest\\n    uint256 public lastHarvestedAt;\\n\\n    /// @notice Creates a new Vault that accepts a specific underlying token.\\n    /// @param _wantToken The ERC20 compliant token the vault should accept.\\n    /// @param _name The name of the vault token.\\n    /// @param _symbol The symbol of the vault token.\\n    /// @param _keeper The address of the keeper to move funds between executors.\\n    /// @param _governance The address of the governance to perform governance functions.\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _wantToken,\\n        address _keeper,\\n        address _governance,\\n        uint256 _maxDepositLimit\\n    ) payable ERC20(_name, _symbol) ERC20Permit(_name) {\\n        require(_wantToken != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_keeper != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(_governance != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        tokenDecimals = IERC20Metadata(_wantToken).decimals();\\n        wantToken = _wantToken;\\n        keeper = _keeper;\\n        governance = _governance;\\n        maxDepositLimit = _maxDepositLimit;\\n\\n        require(msg.value >= 1e3, \\\"INSUFFICIENT_MATIC\\\");\\n        deposit(0, _governance);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return tokenDecimals;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       USER DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event VaultDeposit(\\n        address indexed depositor,\\n        address indexed recipient,\\n        uint256 amountIn,\\n        uint256 shares\\n    );\\n    event VaultWithdraw(\\n        address indexed withdrawer,\\n        address indexed recipient,\\n        uint256 amountOut,\\n        uint256 shares\\n    );\\n\\n    /// @notice max number of shares mintable in the vault\\n    uint256 public maxDepositLimit;\\n\\n    /// @notice Initiates a deposit of want tokens to the vault.\\n    /// @param amountIn The amount of erc20 wmatic token to deposit.\\n    /// @param receiver The address to receive vault tokens.\\n    function deposit(uint256 amountIn, address receiver)\\n        public\\n        payable\\n        override\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        nonEmergencyMode();\\n\\n        uint256 _totalVaultFunds = totalVaultFunds();\\n\\n        if (amountIn > 0) {\\n            bool transferSuccess = IERC20(wantToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n            require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n        }\\n\\n        if (msg.value > 0) {\\n            uint256 oldBal = IERC20(wantToken).balanceOf(address(this));\\n            (bool success, ) = payable(wantToken).call{value: msg.value}(\\\"\\\");\\n            require(success, \\\"WRAP_UNSUCCESS\\\");\\n            uint256 newBal = IERC20(wantToken).balanceOf(address(this));\\n\\n            require(newBal - oldBal == msg.value, \\\"WRAP_UNSUCCESSFULL\\\");\\n            amountIn += msg.value;\\n        }\\n\\n        require(amountIn > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        _checkReentrancyOnYieldExecutors();\\n        // calculate the shares based on the amount.\\n        // amount comprises of total funds in vault + last week's yield\\n        // added to disincentivize users from timing deposits and withdraws\\n        // before and after harvest\\n\\n        shares = totalSupply() > 0\\n            ? (totalSupply() * amountIn) / (_totalVaultFunds + lastEpochYield)\\n            : amountIn;\\n        require(shares != 0, \\\"ZERO_SHARES\\\");\\n\\n        _mint(receiver, shares);\\n        require(totalSupply() <= maxDepositLimit, \\\"VAULT_CAP_REACHED\\\");\\n        emit VaultDeposit(msg.sender, receiver, amountIn, shares);\\n    }\\n\\n    /// @notice Initiates a withdrawal of vault tokens to the user.\\n    /// @param sharesIn The amount of vault tokens to withdraw.\\n    /// @param receiver The address to receive the vault tokens.\\n    function withdraw(uint256 sharesIn, address receiver)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amountOut)\\n    {\\n        nonEmergencyMode();\\n        _checkReentrancyOnYieldExecutors();\\n        require(sharesIn > 0, \\\"ZERO_SHARES\\\");\\n        // calculate proportional amount out based on funds in vault and executors\\n        amountOut =\\n            (sharesIn * IERC20(wantToken).balanceOf(address(this))) /\\n            totalSupply();\\n\\n        // YieldExecutors always hold LP tokens only and never wantTokens\\n\\n        uint256 totalYieldEx = totalYieldExecutors();\\n        for (uint256 i = 0; i < totalYieldEx; ++i) {\\n            IYieldExecutor exec = IYieldExecutor(yieldExecutorByIndex(i));\\n            uint256 lpOut = (sharesIn * exec.totalLPTokens()) / totalSupply();\\n\\n            if (lpOut > 0) {\\n                uint256 wantTokenOut = _withdrawFromYieldExecutor(\\n                    address(exec),\\n                    lpOut\\n                );\\n                amountOut += wantTokenOut;\\n            }\\n        }\\n        amountOut -= (pendingFee * sharesIn) / totalSupply();\\n\\n        // burn shares of msg.sender\\n        _burn(msg.sender, sharesIn);\\n        bool transferSuccess = false;\\n        /// charging exitPenalty\\n        if (exitPenalty > 0) {\\n            uint256 fee = (amountOut * exitPenalty) / MAX_BPS;\\n            amountOut = amountOut - fee;\\n        }\\n\\n        transferSuccess = IERC20(wantToken).transfer(receiver, amountOut);\\n        require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n        emit VaultWithdraw(msg.sender, receiver, amountOut, sharesIn);\\n    }\\n\\n    /// @notice Called by keeper after each epoch to manage yeild and allocate capital\\n    /// @param _claimYieldData array of bytes used for claiming yield from YE list in order of aray\\n    /// @param _withdrawData bytes required to withdraw data from tradeExecutor\\n    /// @param _shouldPlaceTrade boolean indicating wether to send this epoch's yield to tradeExecutor or to compound it into the vault\\n    function harvest(\\n        bytes[] calldata _claimYieldData,\\n        bytes calldata _withdrawData,\\n        bool _shouldPlaceTrade\\n    ) external nonReentrant {\\n        onlyKeeper();\\n\\n        require(\\n            block.timestamp - lastHarvestedAt >= harvestThreshold,\\n            \\\"Last harvest within threshold\\\"\\n        );\\n\\n        lastHarvestedAt = block.timestamp;\\n\\n        _checkReentrancyOnYieldExecutors();\\n\\n        uint256 baseYield = 0;\\n        // Iterates over all yield executors and collects this epoch's yield\\n        uint256 totalYieldEx = totalYieldExecutors();\\n        for (uint256 i = 0; i < totalYieldEx; ++i) {\\n            IYieldExecutor exec = IYieldExecutor(yieldExecutorByIndex(i));\\n            baseYield += exec.claimYield(_claimYieldData[i]);\\n        }\\n        uint256 fee = 0;\\n\\n        // Collects last epoch's trading yield\\n        uint256 boostedYield = tradeExecutor.initiateWithdraw(_withdrawData);\\n\\n        // Setting this harvest yield as lastEpochYeild\\n        lastEpochYield = baseYield;\\n\\n        uint256 currentSharePrice = (totalVaultFunds() * 1e18) / totalSupply();\\n\\n        // Fees if new share price is more than last epoch's share price\\n        if (currentSharePrice > prevSharePrice) {\\n            fee =\\n                ((currentSharePrice - prevSharePrice) *\\n                    totalSupply() *\\n                    performanceFee) /\\n                (1e18 * MAX_BPS);\\n        }\\n        pendingFee += fee;\\n        prevSharePrice = currentSharePrice;\\n\\n        if (_shouldPlaceTrade) {\\n            bool transferSuccess = IERC20(wantToken).transfer(\\n                address(tradeExecutor),\\n                lastEpochYield // all the harvested yield is transferred for the trade.\\n            );\\n            require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n        }\\n\\n        emit HarvestedYield(boostedYield, lastEpochYield);\\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the vault holds.\\n    /// @return The total amount of underlying tokens the vault holds.\\n    function totalVaultFunds() public view returns (uint256) {\\n        return\\n            IERC20(wantToken).balanceOf(address(this)) +\\n            totalYieldExecutorFunds() -\\n            pendingFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    EXECUTOR DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice list of yield executors connected to vault.\\n    AddrArrayLib.Addresses private yieldExecutorsList;\\n\\n    /// @notice trade executor for the vault.\\n    ITradeExecutor public tradeExecutor;\\n\\n    /// @notice Emitted after the vault deposits into a executor contract.\\n    /// @param executor The executor that was deposited into.\\n    /// @param underlyingAmount The amount of underlying tokens that were deposited.\\n    event YieldExecutorDeposit(\\n        address indexed executor,\\n        uint256 underlyingAmount\\n    );\\n\\n    /// @notice Emitted after the vault withdraws funds from a executor contract.\\n    /// @param executor The executor that was withdrawn from.\\n    /// @param underlyingAmount The amount of underlying tokens that were withdrawn.\\n    event YieldExecutorWithdrawal(\\n        address indexed executor,\\n        uint256 underlyingAmount\\n    );\\n\\n    /// @notice Deposit given amount of want tokens into valid executor.\\n    /// @param _executor The executor to deposit into.\\n    /// @param _amount The amount of want tokens to deposit.\\n    /// @return lp token minted as lp by yieldExecutor\\n    function _depositIntoYieldExecutor(address _executor, uint256 _amount)\\n        internal\\n        returns (uint256 lp)\\n    {\\n        isActiveYieldExecutor(_executor);\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        bool transferSuccess = IERC20(wantToken).transfer(_executor, _amount);\\n        require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n        lp = IYieldExecutor(_executor).depositIntoProtocol(_amount);\\n        emit YieldExecutorDeposit(_executor, _amount);\\n    }\\n\\n    /// @notice Withdraw given amount of want tokens into valid executor.\\n    /// @param _executor The executor to withdraw tokens from.\\n    /// @param _lpTokens The amount of lp tokens to withdraw.\\n    /// @return amountOut The amount of want tokens received\\n    function _withdrawFromYieldExecutor(address _executor, uint256 _lpTokens)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        isActiveYieldExecutor(_executor);\\n        require(_lpTokens > 0, \\\"ZERO_AMOUNT\\\");\\n        uint256 prevBal = IERC20(wantToken).balanceOf(address(this));\\n        amountOut = IYieldExecutor(_executor).withdrawfromProtocol(_lpTokens);\\n        uint256 newBal = IERC20(wantToken).balanceOf(address(this));\\n        require(newBal - prevBal == amountOut, \\\"UNSUCCESSFULL_WITHDRAW\\\");\\n        emit YieldExecutorWithdrawal(_executor, amountOut);\\n    }\\n\\n    /// @notice Wrapper function for internal withdraw exposed to keeper for manual management\\n    function depositIntoYieldExecutor(address _executor, uint256 _amount)\\n        external\\n        nonReentrant\\n        returns (uint256 lp)\\n    {\\n        onlyKeeper();\\n        lp = _depositIntoYieldExecutor(_executor, _amount);\\n    }\\n\\n    /// @notice Wrapper function for internal withdraw exposed to keeper for manual management\\n    function withdrawFromYieldExecutor(address _executor, uint256 _lpTokens)\\n        external\\n        nonReentrant\\n        returns (uint256 amountOut)\\n    {\\n        onlyKeeper();\\n        amountOut = _withdrawFromYieldExecutor(_executor, _lpTokens);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           FEE CONFIGURATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev holds fees left for vault to claim\\n    uint256 public pendingFee;\\n    /// @dev share price during last harvest\\n    uint256 public prevSharePrice = type(uint256).max;\\n    /// @dev yield generated by YieldExecutor during last epoch\\n    uint256 public lastEpochYield;\\n    /// @dev Perfomance fee for the vault.\\n    uint256 public performanceFee;\\n    /// @notice Fee denominated in MAX_BPS charged during exit.\\n    uint256 public exitPenalty;\\n\\n    /// @notice event emitted when fees are collected\\n    /// @param fees fees collected in last harvest cycle\\n    event FeesCollected(uint256 fees);\\n\\n    /// @param boostedYield Boosted yield generated by trade executor\\n    /// @param lastEpochYield Yield generated by yield executors\\n    event HarvestedYield(uint256 boostedYield, uint256 lastEpochYield);\\n\\n    /// @notice Emitted after perfomance fee updation.\\n    /// @param oldFee The old performance fee on vault.\\n    /// @param newFee The new performance fee on vault.\\n    event UpdatePerformanceFee(uint256 oldFee, uint256 newFee);\\n\\n    /// @notice Updates the performance fee on the vault.\\n    /// @param _fee The new performance fee on the vault.\\n    /// @dev The new fee must be always less than 50% of yield.\\n    function setPerformanceFee(uint256 _fee) external {\\n        onlyGovernance();\\n        require(_fee < MAX_BPS / 2, \\\"FEE_TOO_HIGH\\\");\\n        emit UpdatePerformanceFee(performanceFee, _fee);\\n        performanceFee = _fee;\\n    }\\n\\n    /// @notice Emitted after exit fee updation.\\n    /// @param oldFee The old exit fee on vault.\\n    /// @param newFee The new exit fee on vault.\\n    event UpdateExitPenalty(uint256 oldFee, uint256 newFee);\\n\\n    /// @notice Function to set exit fee on the vault, can only be called by governance\\n    /// @param _fee Address of fee\\n    function setExitPenalty(uint256 _fee) external {\\n        onlyGovernance();\\n        require(_fee < MAX_BPS / 2, \\\"EXIT_FEE_TOO_HIGH\\\");\\n        emit UpdateExitPenalty(exitPenalty, _fee);\\n        exitPenalty = _fee;\\n    }\\n\\n    function collectFee(uint256 feeAmount) external {\\n        onlyGovernance();\\n        pendingFee = pendingFee - feeAmount;\\n        // Send collected fee to governance\\n        bool transferSuccess = ERC20(wantToken).transfer(governance, feeAmount);\\n        require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n        emit FeesCollected(feeAmount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    EXECUTOR ADDITION/REMOVAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when tradeExec is changed\\n    /// @param oldExecutor The address of old trade executor.\\n    /// @param newExecutor The address of new trade executor.\\n    event TradeExecutorChanged(\\n        address indexed oldExecutor,\\n        address indexed newExecutor\\n    );\\n\\n    /// @notice Emitted when executor is added to vault.\\n    /// @param executor The address of added executor.\\n    event YieldExecutorAdded(address indexed executor);\\n\\n    /// @notice Emitted when executor is removed from vault.\\n    /// @param executor The address of removed executor.\\n    event YieldExecutorRemoved(address indexed executor);\\n\\n    function setTradeExecutor(address _tradeExecutor) external {\\n        onlyGovernance();\\n        isValidAddress(_tradeExecutor);\\n        require(\\n            ITradeExecutor(_tradeExecutor).vault() == address(this),\\n            \\\"INVALID_VAULT\\\"\\n        );\\n        require(\\n            IERC20(wantToken).allowance(_tradeExecutor, address(this)) > 0,\\n            \\\"NO_ALLOWANCE\\\"\\n        );\\n        emit TradeExecutorChanged(address(tradeExecutor), _tradeExecutor);\\n        tradeExecutor = ITradeExecutor(_tradeExecutor);\\n    }\\n\\n    /// @notice Adds a trade executor, enabling it to execute trades.\\n    /// @param _yieldExecutor The address of _yieldExecutor contract.\\n    function addYieldExecutor(address _yieldExecutor) external {\\n        onlyGovernance();\\n        isValidAddress(_yieldExecutor);\\n        require(\\n            IYieldExecutor(_yieldExecutor).vault() == address(this),\\n            \\\"INVALID_VAULT\\\"\\n        );\\n        require(\\n            IERC20(wantToken).allowance(_yieldExecutor, address(this)) > 0,\\n            \\\"NO_ALLOWANCE\\\"\\n        );\\n        yieldExecutorsList.pushAddress(_yieldExecutor);\\n        emit YieldExecutorAdded(_yieldExecutor);\\n    }\\n\\n    /// @notice Adds a trade executor, enabling it to execute trades.\\n    /// @param _yieldExecutor The address of _yieldExecutor contract.\\n    /// @dev make sure all funds are withdrawn from executor before removing.\\n    function removeYieldExecutor(address _yieldExecutor) external {\\n        onlyGovernance();\\n        // check if executor attached to vault.\\n        isActiveYieldExecutor(_yieldExecutor);\\n        IYieldExecutor(_yieldExecutor).checkReentrancy();\\n        (uint256 executorFunds, uint256 blockUpdated) = IYieldExecutor(\\n            _yieldExecutor\\n        ).totalFunds();\\n        _areFundsUpdated(blockUpdated);\\n        require(executorFunds < DUST_LIMIT, \\\"FUNDS_TOO_HIGH\\\");\\n        yieldExecutorsList.removeAddress(_yieldExecutor);\\n        emit YieldExecutorRemoved(_yieldExecutor);\\n    }\\n\\n    /// @notice gives the number of yield executors.\\n    /// @return The number of yield executors.\\n    function totalYieldExecutors() public view returns (uint256) {\\n        return yieldExecutorsList.size();\\n    }\\n\\n    /// @notice Returns yield executor at given index.\\n    /// @return The executor address at given valid index.\\n    function yieldExecutorByIndex(uint256 _index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return yieldExecutorsList.getAddressAtIndex(_index);\\n    }\\n\\n    /// @notice Calculates funds held by all executors in want token.\\n    /// @return Sum of all funds held by executors.\\n    function totalYieldExecutorFunds() public view returns (uint256) {\\n        uint256 totalFunds = 0;\\n        uint256 totalYieldEx = totalYieldExecutors();\\n        for (uint256 i = 0; i < totalYieldEx; ++i) {\\n            address executor = yieldExecutorByIndex(i);\\n            (uint256 executorFunds, uint256 blockUpdated) = IYieldExecutor(\\n                executor\\n            ).totalFunds();\\n            _areFundsUpdated(blockUpdated);\\n            totalFunds += executorFunds;\\n        }\\n        return totalFunds;\\n    }\\n\\n    /// @dev This will call a read reentrancy check on yield executors which support it\\n    /// If a YE does not support reentrancy check, it will return nothing\\n    function _checkReentrancyOnYieldExecutors() internal {\\n        uint256 totalYieldEx = totalYieldExecutors();\\n        for (uint256 i = 0; i < totalYieldEx; ++i) {\\n            address executor = yieldExecutorByIndex(i);\\n            IYieldExecutor(executor).checkReentrancy();\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    GOVERNANCE ACTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event DepositCapUpdated(uint256 oldDepositCap, uint256 newDepositCap);\\n\\n    /// @notice Nominates new governance address.\\n    /// @dev  Governance will only be changed if the new governance accepts it. It will be pending till then.\\n    /// @param _governance The address of new governance.\\n    function setGovernance(address _governance) external {\\n        onlyGovernance();\\n        pendingGovernance = _governance;\\n    }\\n\\n    /// @notice Emitted when governance is updated.\\n    /// @param oldGovernance The address of the current governance.\\n    /// @param newGovernance The address of new governance.\\n    event UpdatedGovernance(\\n        address indexed oldGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    /// @notice The nomine of new governance address proposed by `setGovernance` function can accept the governance.\\n    /// @dev  This can only be called by address of pendingGovernance.\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"INVALID_ADDRESS\\\");\\n        emit UpdatedGovernance(governance, pendingGovernance);\\n        governance = pendingGovernance;\\n    }\\n\\n    /// @notice Emitted when keeper is updated.\\n    /// @param oldKeeper The address of the old keeper.\\n    /// @param newKeeper The address of the new keeper.\\n    event UpdatedKeeper(address indexed oldKeeper, address indexed newKeeper);\\n\\n    /// @notice Sets new keeper address.\\n    /// @dev  This can only be called by governance.\\n    /// @param _keeper The address of new keeper.\\n    function setKeeper(address _keeper) external {\\n        onlyGovernance();\\n        emit UpdatedKeeper(keeper, _keeper);\\n        keeper = _keeper;\\n    }\\n\\n    /// @notice Emitted when emergencyMode status is updated.\\n    /// @param emergencyMode boolean indicating state of emergency.\\n    event EmergencyModeStatus(bool emergencyMode);\\n\\n    /// @notice sets emergencyMode.\\n    /// @dev  This can only be called by governance.\\n    /// @param _emergencyMode if true, vault will be in emergency mode.\\n    function setEmergencyMode(bool _emergencyMode) external {\\n        onlyGovernance();\\n        emergencyMode = _emergencyMode;\\n        emit EmergencyModeStatus(_emergencyMode);\\n    }\\n\\n    /// @notice sets deposit limit on vault\\n    /// @dev  This can only be called by governance.\\n    /// @param _maxDepositLimit max totalSupply of vault tokens\\n    function setDepositCapLimit(uint256 _maxDepositLimit) external {\\n        onlyGovernance();\\n        emit DepositCapUpdated(maxDepositLimit, _maxDepositLimit);\\n        maxDepositLimit = _maxDepositLimit;\\n    }\\n\\n    /// @notice event emitted when harvest threshold is updated\\n    /// @return oldThreshold threshold before update\\n    /// @return newThreshold threshold after update\\n    event UpdatedHarvestThreshold(\\n        uint256 indexed oldThreshold,\\n        uint256 indexed newThreshol\\n    );\\n\\n    /// @notice sets harvest threshold\\n    /// @param _newHarvestThreshold new harvest threshold to update\\n    function setHarvestThreshold(uint256 _newHarvestThreshold) external {\\n        onlyGovernance();\\n\\n        emit UpdatedHarvestThreshold(harvestThreshold, _newHarvestThreshold);\\n        harvestThreshold = _newHarvestThreshold;\\n    }\\n\\n    /// @notice Removes invalid tokens from the vault.\\n    /// @dev  This is used as fail safe to remove want tokens from the vault during emergency mode\\n    /// can be called by anyone to send funds to governance.\\n    /// @param _token The address of token to be removed.\\n    function sweep(address _token) public {\\n        isEmergencyMode();\\n        onlyGovernance();\\n        bool transferSuccess = IERC20(_token).transfer(\\n            governance,\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n        require(transferSuccess, \\\"TRANSFER_NOT_SUCCESSFULL\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    ACCESS MODIFERS\\n    //////////////////////////////////////////////////////////////*/\\n    /// @dev Checks if the sender is the governance.\\n    function onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"ONLY_GOV\\\");\\n    }\\n\\n    /// @dev Checks if the sender is the keeper.\\n    function onlyKeeper() internal view {\\n        require(msg.sender == keeper, \\\"ONLY_KEEPER\\\");\\n    }\\n\\n    /// @dev Checks if emergency mode is enabled.\\n    function isEmergencyMode() public view {\\n        require(emergencyMode, \\\"EMERGENCY_MODE\\\");\\n    }\\n\\n    /// @dev Checks if emergency mode is enabled.\\n    function nonEmergencyMode() internal view {\\n        require(!emergencyMode, \\\"EMERGENCY_MODE_ACTIVE\\\");\\n    }\\n\\n    /// @dev Checks if the address is valid.\\n    function isValidAddress(address _addr) internal pure {\\n        require(_addr != address(0), \\\"NULL_ADDRESS\\\");\\n    }\\n\\n    /// @dev Checks if the yieldExecutor is valid.\\n    function isActiveYieldExecutor(address _yieldExecutor)\\n        public\\n        view\\n        override\\n    {\\n        require(yieldExecutorsList.exists(_yieldExecutor), \\\"INVALID_EXECUTOR\\\");\\n    }\\n\\n    /// @dev Checks if funds are updated.\\n    function _areFundsUpdated(uint256 _blockUpdated) internal view {\\n        require(block.number == _blockUpdated, \\\"FUNDS_NOT_UPDATED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITradeExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\ninterface ITradeExecutor {\\n    function vault() external view returns (address);\\n\\n    /// @notice Called to deposit asset into 3rd party protocol\\n    function initiateDeposit(bytes calldata _data) external;\\n\\n    /// @notice Called for the process of removal of asset from 3rd party protocol\\n    function initiateWithdraw(\\n        bytes calldata _data\\n    ) external returns (uint256 amountWithdrawn);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\ninterface IVault {\\n    function keeper() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function wantToken() external view returns (address);\\n\\n    function deposit(\\n        uint256 amountIn,\\n        address receiver\\n    ) external payable returns (uint256 shares);\\n\\n    function withdraw(\\n        uint256 sharesIn,\\n        address receiver\\n    ) external returns (uint256 amountOut);\\n\\n    function isEmergencyMode() external view;\\n\\n    function isActiveYieldExecutor(address) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IYieldExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\ninterface IYieldExecutor {\\n    function vault() external view returns (address);\\n\\n    // /// @notice Called to initiate the process of depositing of asset into 3rd party protocol\\n    // function initiateDeposit(bytes calldata _data) external;\\n\\n    // /// @notice Called to initiate the process of removal of asset from 3rd party protocol\\n    // function initiateWithdraw(bytes calldata _data) external;\\n\\n    function totalFunds()\\n        external\\n        view\\n        returns (\\n            // view\\n            uint256 posValue,\\n            uint256 lastUpdatedBlock\\n        );\\n\\n    /// @dev send want token to executor and then call\\n    function depositIntoProtocol(uint256 amount)\\n        external\\n        returns (uint256 lpTokens);\\n\\n    function withdrawfromProtocol(uint256 lpTokens)\\n        external\\n        returns (uint256 amountReturned);\\n\\n    function lpValueInAsset(uint256 lpTokens) external view returns (uint256);\\n\\n    function assetValueInLpToken(uint256 assets)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalLPTokens() external view returns (uint256);\\n\\n    function maxSlippage() external view returns (uint256);\\n\\n    function claimYield(bytes calldata _data) external returns (uint256 yield);\\n\\n    function checkReentrancy() external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/AddArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary AddrArrayLib {\\n    using AddrArrayLib for Addresses;\\n\\n    struct Addresses {\\n        address[] _items;\\n    }\\n\\n    /**\\n     * @notice push an address to the array\\n     * @dev if the address already exists, it will not be added again\\n     * @param self Storage array containing address type variables\\n     * @param element the element to add in the array\\n     */\\n    function pushAddress(Addresses storage self, address element) internal {\\n        if (!exists(self, element)) {\\n            self._items.push(element);\\n        }\\n    }\\n\\n    /**\\n     * @notice remove an address from the array\\n     * @dev finds the element, swaps it with the last element, and then deletes it;\\n     * @param self Storage array containing address type variables\\n     * @param element the element to remove from the array\\n     */\\n    function removeAddress(Addresses storage self, address element) internal {\\n        for (uint256 i = 0; i < self.size(); i++) {\\n            if (self._items[i] == element) {\\n                self._items[i] = self._items[self.size() - 1];\\n                self._items.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get the address at a specific index from array\\n     * @dev revert if the index is out of bounds\\n     * @param self Storage array containing address type variables\\n     * @param index the index in the array\\n     */\\n    function getAddressAtIndex(\\n        Addresses memory self,\\n        uint256 index\\n    ) internal pure returns (address) {\\n        require(index < size(self), \\\"INVALID_INDEX\\\");\\n        return self._items[index];\\n    }\\n\\n    /**\\n     * @notice get the size of the array\\n     * @param self Storage array containing address type variables\\n     */\\n    function size(Addresses memory self) internal pure returns (uint256) {\\n        return self._items.length;\\n    }\\n\\n    /**\\n     * @notice check if an element exist in the array\\n     * @param self Storage array containing address type variables\\n     * @param element the element to check if it exists in the array\\n     */\\n    function exists(\\n        Addresses memory self,\\n        address element\\n    ) internal pure returns (bool) {\\n        for (uint256 i = 0; i < self.size(); i++) {\\n            if (self._items[i] == element) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice get the array\\n     * @param self Storage array containing address type variables\\n     */\\n    function getAllAddresses(\\n        Addresses memory self\\n    ) internal pure returns (address[] memory) {\\n        return self._items;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@balancer-labs/=lib/balancer-v2-monorepo/../../node_modules/@balancer-labs/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositCap\",\"type\":\"uint256\"}],\"name\":\"DepositCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergencyMode\",\"type\":\"bool\"}],\"name\":\"EmergencyModeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostedYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastEpochYield\",\"type\":\"uint256\"}],\"name\":\"HarvestedYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"TradeExecutorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateExitPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdatePerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"UpdatedGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshol\",\"type\":\"uint256\"}],\"name\":\"UpdatedHarvestThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKeeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"VaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"VaultWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"YieldExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"YieldExecutorDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"YieldExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"YieldExecutorWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldExecutor\",\"type\":\"address\"}],\"name\":\"addYieldExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositIntoYieldExecutor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_claimYieldData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_shouldPlaceTrade\",\"type\":\"bool\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldExecutor\",\"type\":\"address\"}],\"name\":\"isActiveYieldExecutor\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyMode\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldExecutor\",\"type\":\"address\"}],\"name\":\"removeYieldExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositCapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyMode\",\"type\":\"bool\"}],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setExitPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newHarvestThreshold\",\"type\":\"uint256\"}],\"name\":\"setHarvestThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeExecutor\",\"type\":\"address\"}],\"name\":\"setTradeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVaultFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYieldExecutorFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYieldExecutors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeExecutor\",\"outputs\":[{\"internalType\":\"contract ITradeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"withdrawFromYieldExecutor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"yieldExecutorByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000ab3bcd63a3938031c27b122ec2b7f87ec0ba472a000000000000000000000000949226f21809637113700f901c7d9bbaa3fd94b000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000013427261686d6120506f6c794761696e7320563200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a62726168504f4c59563200000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}