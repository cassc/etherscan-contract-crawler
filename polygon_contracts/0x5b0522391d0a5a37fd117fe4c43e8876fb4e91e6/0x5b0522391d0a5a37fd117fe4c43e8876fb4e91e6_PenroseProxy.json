{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PenroseProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Penrose governance killable proxy\\n * @author Penrose\\n * @notice EIP-1967 upgradeable proxy with the ability to kill governance and render the contract immutable\\n */\\ncontract PenroseProxy {\\n    bytes32 constant IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc; // keccak256('eip1967.proxy.implementation')\\n    bytes32 constant GOVERNANCE_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103; // keccak256('eip1967.proxy.admin')\\n    bytes32 constant INITIALIZED_SLOT =\\n        0x834ce84547018237034401a09067277cdcbe7bbf7d7d30f6b382b0a102b7b4a3; // keccak256('eip1967.proxy.initialized')\\n\\n    /**\\n     * @notice Initialize governance (this can only be done once)\\n     * @param _governanceAddress New governance address\\n     */\\n    function initialize(address _governanceAddress) public {\\n        bool initialized;\\n        assembly {\\n            initialized := sload(INITIALIZED_SLOT)\\n            if eq(initialized, 1) {\\n                revert(0, 0)\\n            }\\n            sstore(INITIALIZED_SLOT, 1)\\n            sstore(GOVERNANCE_SLOT, _governanceAddress)\\n        }\\n    }\\n\\n    /**\\n     * @notice Detect whether or not governance is killed\\n     * @return Return true if governance is killed, false if not\\n     * @dev If governance is killed this contract becomes immutable\\n     */\\n    function governanceIsKilled() external view returns (bool) {\\n        return governanceAddress() == address(0);\\n    }\\n\\n    /**\\n     * @notice Kill governance, making this contract immutable\\n     * @dev Only governance can kil governance\\n     */\\n    function killGovernance() external {\\n        require(msg.sender == governanceAddress(), \\\"Only governance\\\");\\n        updateGovernanceAddress(address(0));\\n    }\\n\\n    /**\\n     * @notice Update implementation address\\n     * @param _implementationAddress Address of the new implementation\\n     * @dev Only governance can update implementation\\n     */\\n    function updateImplementationAddress(address _implementationAddress)\\n        external\\n    {\\n        require(msg.sender == governanceAddress(), \\\"Only governance\\\");\\n        assembly {\\n            sstore(IMPLEMENTATION_SLOT, _implementationAddress)\\n        }\\n    }\\n\\n    /**\\n     * @notice Update governance address\\n     * @param _governanceAddress New governance address\\n     * @dev Only governance can update governance\\n     */\\n    function updateGovernanceAddress(address _governanceAddress) public {\\n        require(msg.sender == governanceAddress(), \\\"Only governance\\\");\\n        assembly {\\n            sstore(GOVERNANCE_SLOT, _governanceAddress)\\n        }\\n    }\\n\\n    /**\\n     * @notice Fetch the current implementation address\\n     * @return _implementationAddress Returns the current implementation address\\n     */\\n    function implementationAddress()\\n        external\\n        view\\n        returns (address _implementationAddress)\\n    {\\n        assembly {\\n            _implementationAddress := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    /**\\n     * @notice Fetch current governance address\\n     * @return _governanceAddress Returns current governance address\\n     */\\n    function governanceAddress()\\n        public\\n        view\\n        returns (address _governanceAddress)\\n    {\\n        assembly {\\n            _governanceAddress := sload(GOVERNANCE_SLOT)\\n        }\\n    }\\n\\n    /**\\n     * @notice Delegatecall fallback proxy\\n     */\\n    fallback() external {\\n        assembly {\\n            let contractLogic := sload(IMPLEMENTATION_SLOT)\\n            calldatacopy(0x0, 0x0, calldatasize())\\n            let success := delegatecall(\\n                gas(),\\n                contractLogic,\\n                0x0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let returnDataSize := returndatasize()\\n            returndatacopy(0, 0, returnDataSize)\\n            switch success\\n            case 0 {\\n                revert(0, returnDataSize)\\n            }\\n            default {\\n                return(0, returnDataSize)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"governanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_implementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"updateGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementationAddress\",\"type\":\"address\"}],\"name\":\"updateImplementationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PenroseProxy", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x6595a28b503db98412c9f7556dd88bb3eed9f385", "SwarmSource": ""}