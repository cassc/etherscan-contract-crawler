{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IVaultFactory.sol\\\";\\nimport \\\"./interfaces/IVaultFactoryConfig.sol\\\";\\nimport \\\"./interfaces/ILiquidationRouter.sol\\\";\\n\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\n\\ncontract Vault is Context, Constants {\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    event CollateralAdded(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRemoved(address indexed collateral, uint256 amount, uint256 newTotalAmount);\\n    event CollateralRedeemed(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount,\\n        uint256 stableAmountUsed,\\n        uint256 feePaid\\n    );\\n\\n    event DebtAdded(uint256 amount, uint256 newTotalDebt);\\n    event DebtRepaid(uint256 amount, uint256 newTotalDebt);\\n\\n    modifier onlyFactory() {\\n        require(_msgSender() == factory, \\\"only-factory\\\");\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public immutable stable;\\n    address public immutable factory;\\n    address public vaultOwner;\\n\\n    string public name;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public debt;\\n\\n    modifier onlyVaultOwner() {\\n        require(_msgSender() == vaultOwner, \\\"only-vault-owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _vaultOwner, string memory _name) {\\n        require(_vaultOwner != address(0x0), \\\"vault-owner-is-0\\\");\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        require(_factory != address(0x0), \\\"factory-is-0\\\");\\n\\n        factory = _factory;\\n        vaultOwner = _vaultOwner;\\n        stable = IVaultFactory(factory).stable();\\n        name = _name;\\n    }\\n\\n    function transferVaultOwnership(address _newOwner) external onlyFactory {\\n        vaultOwner = _newOwner;\\n    }\\n\\n    function setName(string memory _name) external onlyVaultOwner {\\n        require(bytes(_name).length > 0, \\\"name-is-empty\\\");\\n        name = _name;\\n    }\\n\\n    function addOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.add(_operator);\\n    }\\n\\n    function removeOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), \\\"operator-is-0\\\");\\n        operators.remove(_operator);\\n    }\\n\\n    function isOperator(address _operator) external view returns (bool) {\\n        return operators.contains(_operator);\\n    }\\n\\n    function operatorsLength() external view returns (uint256) {\\n        return operators.length();\\n    }\\n\\n    function operatorAt(uint256 _index) external view returns (address) {\\n        return operators.at(_index);\\n    }\\n\\n    function containsCollateral(address _collateral) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    function addCollateral(address _collateral, uint256 _amount) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateralSet.add(_collateral);\\n        uint256 _maxTokens = IVaultFactory(factory).MAX_TOKENS_PER_VAULT();\\n        require(collateralSet.length() <= _maxTokens, \\\"max-tokens-reached\\\");\\n\\n        collateral[_collateral] += _amount;\\n\\n        emit CollateralAdded(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function removeCollateral(address _collateral, uint256 _amount, address _to) external onlyFactory {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        uint256 _healthFactor = healthFactor(false);\\n        require(_healthFactor >= DECIMAL_PRECISION, \\\"health-factor-below-1\\\");\\n\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n\\n        emit CollateralRemoved(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    function addBadDebt(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        debt += _amount;\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function borrowable() public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        (_maxBorrowable, _borrowable) = borrowableWithDiff(address(0x0), 0, false, false);\\n    }\\n\\n    function borrow(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, \\\"amount-is-0\\\");\\n\\n        (uint256 _maxBorrowable, uint256 _borrowable) = borrowable();\\n        require(_amount <= _borrowable, \\\"not-enough-borrowable\\\");\\n\\n        debt += _amount;\\n        require(debt <= _maxBorrowable, \\\"max-borrowable-reached\\\");\\n\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    function repay(uint256 _amount) external onlyFactory {\\n        require(_amount <= debt, \\\"amount-exceeds-debt\\\");\\n\\n        debt -= _amount;\\n        emit DebtRepaid(_amount, debt);\\n    }\\n\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) public view returns (uint256 _stableAmountNeeded, uint256 _redemptionFee) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n        uint256 _price = _priceFeed.tokenPrice(_collateral);\\n\\n        uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_collateral)));\\n        _stableAmountNeeded = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n        _stableAmountNeeded = (_stableAmountNeeded > debt) ? debt : _stableAmountNeeded;\\n\\n        uint256 _redemptionRate = IVaultFactoryConfig(factory).redemptionRate();\\n        _redemptionFee = (_stableAmountNeeded * _redemptionRate) / DECIMAL_PRECISION;\\n    }\\n\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external onlyFactory returns (uint256 _debtRepaid, uint256 _feeCollected) {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        require(_collateralAmount > 0, \\\"amount-is-0\\\");\\n        require(collateralSet.contains(_collateral), \\\"collateral-not-added\\\");\\n        require(collateral[_collateral] >= _collateralAmount, \\\"not-enough-collateral\\\");\\n\\n        collateral[_collateral] -= _collateralAmount;\\n        (_debtRepaid, _feeCollected) = calcRedeem(_collateral, _collateralAmount);\\n        debt -= _debtRepaid;\\n\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        IERC20(_collateral).safeTransfer(_msgSender(), _collateralAmount);\\n\\n        emit CollateralRedeemed(_collateral, _collateralAmount, collateral[_collateral], _debtRepaid, _feeCollected);\\n        emit DebtRepaid(_debtRepaid, debt);\\n    }\\n\\n    function healthFactor(bool _useMlr) public view returns (uint256 _healthFactor) {\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n\\n        _healthFactor = (_maxBorrowable * DECIMAL_PRECISION) / debt;\\n    }\\n\\n    function newHealthFactor(uint256 _newDebt, bool _useMlr) public view returns (uint256 _newHealthFactor) {\\n        if (_newDebt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(address(0x0), 0, false, _useMlr);\\n        _newHealthFactor = (_maxBorrowable * DECIMAL_PRECISION) / _newDebt;\\n    }\\n\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        uint256 _newCollateralAmount = collateral[_collateral];\\n        uint256 _borrowableAmount = 0;\\n\\n        if (_collateral != address(0x0)) {\\n            require(IVaultFactory(factory).isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n            if (_isAdd) {\\n                _newCollateralAmount += _diffAmount;\\n            } else {\\n                _newCollateralAmount -= _diffAmount;\\n            }\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(IVaultFactory(factory).priceFeed());\\n\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _c = collateralSet.at(i);\\n            uint256 _collateralAmount = _c == _collateral ? _newCollateralAmount : collateral[_c];\\n            uint256 _price = _priceFeed.tokenPrice(_c);\\n            uint256 _divisor = _useMlr ? _priceFeed.mlr(_c) : _priceFeed.mcr(_c);\\n            uint256 _normalizedCollateralAmount = _collateralAmount * (10 ** (18 - _priceFeed.decimals(_c)));\\n            uint256 _collateralBorrowable = (_normalizedCollateralAmount * _price) / DECIMAL_PRECISION;\\n            _borrowableAmount += (_collateralBorrowable * DECIMAL_PRECISION) / _divisor;\\n        }\\n\\n        return (_borrowableAmount, (_borrowableAmount > debt) ? _borrowableAmount - debt : 0);\\n    }\\n\\n    function liquidate() external onlyFactory returns (uint256 _forgivenDebt) {\\n        require(healthFactor(true) < DECIMAL_PRECISION, \\\"liquidation-factor-above-1\\\");\\n\\n        uint256 _debt = debt;\\n        debt = 0;\\n        ILiquidationRouter router = ILiquidationRouter(IVaultFactory(factory).liquidationRouter());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _collateral = collateralSet.at(i);\\n            uint256 _collateralAmount = collateral[_collateral];\\n            uint256 _actualCollateralBalance = IERC20(_collateral).balanceOf(address(this));\\n            if (_actualCollateralBalance < _collateralAmount) {\\n                _collateralAmount = _actualCollateralBalance;\\n            }\\n            collateral[_collateral] = 0;\\n\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), 0);\\n            IERC20(_collateral).safeApprove(IVaultFactory(factory).liquidationRouter(), type(uint256).max);\\n\\n            router.addSeizedCollateral(_collateral, _collateralAmount);\\n        }\\n        router.addUnderWaterDebt(address(this), _debt);\\n        router.tryLiquidate();\\n        _forgivenDebt = _debt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/linked-address-list.sol\\\";\\nimport \\\"./Vault.sol\\\";\\nimport \\\"./VaultFactoryConfig.sol\\\";\\nimport \\\"./VaultFactoryList.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ITokenPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPriceFeed.sol\\\";\\nimport \\\"./interfaces/IMintableTokenOwner.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\nimport \\\"./interfaces/IVaultDeployer.sol\\\";\\nimport \\\"./interfaces/IVaultBorrowRate.sol\\\";\\n\\ncontract VaultFactory is ReentrancyGuard, VaultFactoryConfig, VaultFactoryList {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event VaultOwnerChanged(address indexed vault, address indexed oldOwner, address indexed newOwner);\\n\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    address public immutable stable;\\n    address public immutable nativeWrapped;\\n\\n    IMintableTokenOwner public immutable mintableTokenOwner;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public totalDebt;\\n\\n    constructor(\\n        address _mintableTokenOwner,\\n        address _nativeWrapped,\\n        address _priceFeed,\\n        address _vaultDeployer,\\n        address _liquidationRouter,\\n        address _borrowRate\\n    ) VaultFactoryConfig(_vaultDeployer, _liquidationRouter) {\\n        require(_mintableTokenOwner != address(0x0), \\\"mintable-token-owner-is-0\\\");\\n\\n        mintableTokenOwner = IMintableTokenOwner(_mintableTokenOwner);\\n        stable = address(mintableTokenOwner.token());\\n\\n        require(stable != address(0x0), \\\"stable-is-0\\\");\\n        require(_nativeWrapped != address(0x0), \\\"nativew-is-0\\\");\\n        require(_priceFeed != address(0x0), \\\"pricefeed-is-0\\\");\\n        require(_borrowRate != address(0x0), \\\"borrow-rate-is-0\\\");\\n\\n        borrowRate = _borrowRate;\\n        nativeWrapped = _nativeWrapped;\\n        priceFeed = _priceFeed;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == nativeWrapped, \\\"only-native-wrapped\\\");\\n    }\\n\\n    modifier onlyVaultOwner(address _vault) {\\n        require(Vault(_vault).vaultOwner() == _msgSender(), \\\"only-vault-owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultOwnerOrOperator(address _vault) {\\n        require(\\n            Vault(_vault).vaultOwner() == _msgSender() || Vault(_vault).isOperator(_msgSender()),\\n            \\\"only-vault-owner-or-operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLiquidationRouter() {\\n        require(liquidationRouter == _msgSender(), \\\"only-liquidation-router\\\");\\n        _;\\n    }\\n\\n    function isCollateralSupported(address _collateral) external view returns (bool) {\\n        return _isCollateralSupported(_collateral);\\n    }\\n\\n    function transferVaultOwnership(address _vault, address _newOwner) external onlyVaultOwner(_vault) {\\n        address _msgSender = _msgSender();\\n        require(_newOwner != address(0x0), \\\"new-owner-is-0\\\");\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n\\n        emit VaultOwnerChanged(_vault, _msgSender, _newOwner);\\n        Vault(_vault).transferVaultOwnership(_newOwner);\\n        _transferVault(_msgSender, _newOwner, _vault);\\n    }\\n\\n    function createVault(string memory _name) public returns (address) {\\n        address _msgSender = _msgSender();\\n        address _vaultAddress = IVaultDeployer(vaultDeployer).deployVault(address(this), _msgSender, _name);\\n        _addVault(_msgSender, _vaultAddress);\\n        emit NewVault(_vaultAddress, _name, _msgSender);\\n\\n        return _vaultAddress;\\n    }\\n\\n    function _isCollateralSupported(address _collateral) internal view returns (bool) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        return (_priceFeed.tokenPriceFeed(_collateral) != address(0x0));\\n    }\\n\\n    function addCollateralNative(address _vault) external payable {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(nativeWrapped), \\\"collateral-not-supported\\\");\\n        uint256 _amount = msg.value;\\n\\n        collateral[nativeWrapped] += _amount;\\n\\n        require(collateral[nativeWrapped] <= collateralCap[nativeWrapped], \\\"collateral-cap-reached\\\");\\n\\n        IWETH(nativeWrapped).deposit{value: _amount}();\\n        IERC20(nativeWrapped).safeTransferFrom(address(this), _vault, _amount);\\n\\n        Vault(_vault).addCollateral(nativeWrapped, _amount);\\n    }\\n\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(nativeWrapped), \\\"collateral-not-supported\\\");\\n\\n        Vault(_vault).removeCollateral(nativeWrapped, _amount, address(this));\\n\\n        collateral[nativeWrapped] -= _amount;\\n\\n        IWETH(nativeWrapped).withdraw(_amount);\\n        payable(_to).transfer(_amount);\\n    }\\n\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n\\n        collateral[_collateral] += _amount;\\n\\n        require(collateral[_collateral] <= collateralCap[_collateral], \\\"collateral-cap-reached\\\");\\n\\n        IERC20(_collateral).safeTransferFrom(_msgSender(), _vault, _amount);\\n        Vault(_vault).addCollateral(_collateral, _amount);\\n    }\\n\\n    function removeCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n\\n        collateral[_collateral] -= _amount;\\n        Vault(_vault).removeCollateral(_collateral, _amount, _to);\\n    }\\n\\n    function borrow(address _vault, uint256 _amount, address _to) external onlyVaultOwnerOrOperator(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_to != address(0x0), \\\"to-is-0\\\");\\n\\n        totalDebt += _amount;\\n        _updateDebtWindow(_amount);\\n        Vault(_vault).borrow(_amount);\\n        uint256 _borrowRate = IVaultBorrowRate(borrowRate).getBorrowRate(_vault);\\n        uint256 _feeAmount = (_amount * _borrowRate) / DECIMAL_PRECISION;\\n\\n        mintableTokenOwner.mint(_to, _amount - _feeAmount);\\n        mintableTokenOwner.mint(borrowFeeRecipient, _feeAmount);\\n    }\\n\\n    function distributeBadDebt(address _vault, uint256 _amount) external nonReentrant onlyLiquidationRouter {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        totalDebt += _amount;\\n        Vault(_vault).addBadDebt(_amount);\\n    }\\n\\n    function closeVault(address _vault) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(Vault(_vault).debt() == 0, \\\"debt-not-0\\\");\\n        require(Vault(_vault).collateralsLength() == 0, \\\"collateral-not-0\\\");\\n\\n        _removeVault(_msgSender(), _vault);\\n    }\\n\\n    function repay(address _vault, uint256 _amount) external {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        totalDebt -= _amount;\\n        Vault(_vault).repay(_amount);\\n\\n        IMintableToken(stable).safeTransferFrom(_msgSender(), address(this), _amount);\\n        IMintableToken(stable).burn(_amount);\\n    }\\n\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external nonReentrant {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        require(_to != address(0x0), \\\"to-is-0\\\");\\n\\n        require(isReedemable(_vault, _collateral), \\\"not-redeemable\\\");\\n\\n        (uint256 _debtRepaid, uint256 _feeCollected) = Vault(_vault).redeem(_collateral, _collateralAmount);\\n\\n        totalDebt -= _debtRepaid;\\n        collateral[_collateral] -= _collateralAmount;\\n\\n        IMintableToken(stable).safeTransferFrom(_msgSender(), address(this), _debtRepaid + _feeCollected);\\n        IMintableToken(stable).burn(_debtRepaid);\\n        IMintableToken(stable).transfer(redemptionFeeRecipient, _feeCollected);\\n\\n        IERC20(_collateral).safeTransfer(_to, _collateralAmount);\\n    }\\n\\n    function liquidate(address _vault) external nonReentrant {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n\\n        address _vaultOwner = Vault(_vault).vaultOwner();\\n        uint256 _forgivenDebt = Vault(_vault).liquidate();\\n\\n        totalDebt -= _forgivenDebt;\\n\\n        _removeVault(_vaultOwner, _vault);\\n    }\\n\\n    function isLiquidatable(address _vault) external view returns (bool) {\\n        require(containsVault(_vault), \\\"vault-not-found\\\");\\n        return Vault(_vault).healthFactor(true) < DECIMAL_PRECISION;\\n    }\\n\\n    /// @notice Collateral with higher MCR can be redeemed first\\n    function isReedemable(address _vault, address _collateral) public view returns (bool) {\\n        require(_isCollateralSupported(_collateral), \\\"collateral-not-supported\\\");\\n        if (!Vault(_vault).containsCollateral(_collateral)) {\\n            return false;\\n        }\\n        uint256 _healthFactor = Vault(_vault).healthFactor(false);\\n        if (_healthFactor >= redemptionHealthFactorLimit) {\\n            return false;\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        uint256 _collateralMcr = _priceFeed.mcr(_collateral);\\n\\n        address[] memory _collaterals = Vault(_vault).collaterals();\\n        uint256 _length = _collaterals.length;\\n\\n        for (uint256 i; i < _length; i++) {\\n            if (_collaterals[i] != _collateral) {\\n                uint256 _mcr = _priceFeed.mcr(_collaterals[i]);\\n                if (_mcr > _collateralMcr) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _updateDebtWindow(uint256 _newDebt) internal {\\n        require(totalDebt <= debtCeiling, \\\"debt-ceiling-reached\\\");\\n\\n        if (block.timestamp > lastDebtWindow + debtWindowSize) {\\n            debtWindowAmount += _newDebt;\\n            lastDebtWindow = block.timestamp;\\n        } else {\\n            debtWindowAmount += _newDebt;\\n        }\\n        require(debtWindowAmount <= maxDebtPerWindow, \\\"debt-window-amount-reached\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract VaultFactoryConfig is Constants, Ownable {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(uint256 oldMaxTokensPerVault, uint256 newMaxTokensPerVault);\\n    event RedemptionRateUpdated(uint256 oldRedemptionRate, uint256 newRedemptionRate);\\n    event BorrowRateUpdated(address oldBorrowRate, address newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(uint256 oldRedemptionHealthFactorLimit, uint256 newRedemptionHealthFactorLimit);\\n    event DebtCeilingUpdated(uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n    event MaxDebtPerWindowUpdated(uint256 oldMaxDebtPerWindow, uint256 newMaxDebtPerWindow);\\n    event DebtWindowSizeUpdated(uint256 oldDebtWindowSize, uint256 newDebtWindowSize);\\n    event CollateralCapacityUpdated(address indexed collateral, uint256 oldCapacity, uint256 newCapacity);\\n    event liquidationRouterUpdated(address indexed liquidationRouter);\\n\\n    address public priceFeed;\\n    address public borrowRate;\\n\\n    uint256 public MAX_TOKENS_PER_VAULT = 5;\\n    uint256 public redemptionRate = PERCENT_05; // 0.5%\\n    \\n    uint256 public redemptionHealthFactorLimit = 1.5 ether; // 2.0 HF\\n\\n    address public borrowFeeRecipient;\\n    address public redemptionFeeRecipient;\\n\\n    mapping(address => uint256) public collateralCap;\\n\\n    uint256 public debtCeiling = type(uint256).max; // max stablecoin debt issued by the protocol\\n\\n    uint256 public maxDebtPerWindow = 2000 ether; // 1M\\n    uint256 public debtWindowSize = 1 hours;\\n    uint256 public lastDebtWindow;\\n    uint256 public debtWindowAmount;\\n\\n    address public vaultDeployer;\\n    address public liquidationRouter;\\n\\n    function setLiquidationRouter(address _liquidationRouter) external onlyOwner {\\n        require(_liquidationRouter != address(0x0), \\\"liquidation-router-is-0\\\");\\n        liquidationRouter = _liquidationRouter;\\n        emit liquidationRouterUpdated(_liquidationRouter);\\n    }\\n\\n    function setCollateralCapacity(address _collateral, uint256 _cap) external onlyOwner {\\n        require(_collateral != address(0x0), \\\"collateral-is-0\\\");\\n        emit CollateralCapacityUpdated(_collateral, collateralCap[_collateral], _cap);\\n        collateralCap[_collateral] = _cap;\\n    }\\n\\n    function setDebtCeiling(uint256 _debtCeiling) external onlyOwner {\\n        emit DebtCeilingUpdated(debtCeiling, _debtCeiling);\\n        debtCeiling = _debtCeiling;\\n    }\\n\\n    function setMaxDebtPerWindow(uint256 _maxDebtPerWindow) external onlyOwner {\\n        emit MaxDebtPerWindowUpdated(maxDebtPerWindow, _maxDebtPerWindow);\\n        maxDebtPerWindow = _maxDebtPerWindow;\\n    }\\n\\n    function setDebtWindowSize(uint256 _debtWindowSize) external onlyOwner {\\n        emit DebtWindowSizeUpdated(debtWindowSize, _debtWindowSize);\\n        debtWindowSize = _debtWindowSize;\\n    }\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external onlyOwner {\\n        require(_maxTokensPerVault > 0, \\\"max-tokens-per-vault-is-0\\\");\\n        emit MaxTokensPerVaultUpdated(MAX_TOKENS_PER_VAULT, _maxTokensPerVault);\\n        MAX_TOKENS_PER_VAULT = _maxTokensPerVault;\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external onlyOwner {\\n        require(_priceFeed != address(0x0), \\\"pricefeed-is-0\\\");\\n        priceFeed = _priceFeed;\\n        emit PriceFeedUpdated(_priceFeed);\\n    }\\n\\n    function setRedemptionRate(uint256 _redemptionRate) external onlyOwner {\\n        require(_redemptionRate <= MAX_REDEMPTION_RATE, \\\"redemption-rate-too-high\\\");\\n        emit RedemptionRateUpdated(redemptionRate, _redemptionRate);\\n        redemptionRate = _redemptionRate;\\n    }\\n\\n    function setBorrowRate(address _borrowRate) external onlyOwner {\\n        require(_borrowRate != address(0), \\\"borrow-rate-is-0\\\");\\n        emit BorrowRateUpdated(borrowRate, _borrowRate);\\n        borrowRate = _borrowRate;\\n    }\\n\\n    function setRedemptionHealthFactorLimit(uint256 _redemptionHealthFactorLimit) external onlyOwner {\\n        emit RedemptionHealthFactorLimitUpdated(redemptionHealthFactorLimit, _redemptionHealthFactorLimit);\\n        redemptionHealthFactorLimit = _redemptionHealthFactorLimit;\\n    }\\n\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external onlyOwner {\\n        require(_borrowFeeRecipient != address(0x0), \\\"borrow-fee-recipient-is-0\\\");\\n        borrowFeeRecipient = _borrowFeeRecipient;\\n    }\\n\\n    function setRedemptionFeeRecipient(address _redemptionFeeRecipient) external onlyOwner {\\n        require(_redemptionFeeRecipient != address(0x0), \\\"redemption-fee-recipient-is-0\\\");\\n        redemptionFeeRecipient = _redemptionFeeRecipient;\\n    }\\n\\n    constructor(address _vaultDeployer, address _liquidationRouter) {\\n        require(_vaultDeployer != address(0x0), \\\"vault-deployer-is-0\\\");\\n        require(_liquidationRouter != address(0x0), \\\"liquidation-factory-is-0\\\");\\n        vaultDeployer = _vaultDeployer;\\n        borrowFeeRecipient = _msgSender();\\n        redemptionFeeRecipient = _msgSender();\\n        lastDebtWindow = block.timestamp;\\n        liquidationRouter = _liquidationRouter;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\nimport \\\"./utils/constants.sol\\\";\\nimport \\\"./utils/linked-address-list.sol\\\";\\n// import openzeppelin context\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract VaultFactoryList is Context {\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    LinkedAddressList.List _vaults;\\n    mapping(address => EnumerableSet.AddressSet) private _vaultsByOwner;\\n\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256) {\\n        return _vaultsByOwner[_owner].length();\\n    }\\n\\n    function vaultsByOwner(address _owner, uint256 _index) external view returns (address) {\\n        return _vaultsByOwner[_owner].at(_index);\\n    }\\n\\n    function _addVault(address _owner, address _vault) internal {\\n        require(_vaults.add(_vault, address(0x0), false), \\\"vault-could-not-be-added\\\");\\n        _vaultsByOwner[_owner].add(_vault);\\n    }\\n\\n    function _transferVault(address _from, address _to, address _vault) internal {\\n        _vaultsByOwner[_from].remove(_vault);\\n        _vaultsByOwner[_to].add(_vault);\\n    }\\n\\n    function _removeVault(address _owner, address _vault) internal {\\n        require(_vaults.remove(_vault), \\\"vault-could-not-be-removed\\\");\\n        _vaultsByOwner[_owner].remove(_vault);\\n    }\\n\\n    /**\\n     * @dev returns the number of vaults for specific token\\n     */\\n    function vaultCount() public view returns (uint256) {\\n        return _vaults._size;\\n    }\\n\\n    /**\\n     * @dev returns the last vault by maximum collaterization ratio\\n     */\\n    function lastVault() public view returns (address) {\\n        return _vaults._last;\\n    }\\n\\n    /**\\n     * @dev returns the first vault by minimal collaterization ratio\\n     */\\n    function firstVault() public view returns (address) {\\n        return _vaults._first;\\n    }\\n\\n    /**\\n     * @dev returns the next vault by collaterization ratio\\n     */\\n    function nextVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].next;\\n    }\\n\\n    /**\\n     * @dev returns the previous vault by collaterization ratio\\n     */\\n    function prevVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].prev;\\n    }\\n\\n    /**\\n     * @dev returns and checks if such vault exists for this token\\n     */\\n    function containsVault(address _vault) public view returns (bool) {\\n        return _vaults._values[_vault].next != address(0x0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidationRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ILiquidationRouter {\\n    function addSeizedCollateral(address _collateral, uint256 _amount) external;\\n\\n    function addUnderWaterDebt(address _vault, uint256 _amount) external;\\n\\n    function removeUnderWaterDebt(uint256 _amount) external;\\n\\n    function underWaterDebt() external view returns (uint256);\\n\\n    function collaterals() external view returns (address[] memory);\\n\\n    function collateral(address _collateral) external view returns (uint256);\\n\\n    function tryLiquidate() external;\\n\\n    function stabilityPool() external view returns (address);\\n    function auctionManager() external view returns (address);\\n    function lastResortLiquidation() external view returns (address);\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function approve(address spender, uint256 amount) external override returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableTokenOwner.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMintableTokenOwner is IOwnable {\\n  function token() external view returns (IMintableToken);\\n\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function transferTokenOwnership(address _newOwner) external;\\n\\n  function addMinter(address _newMinter) external;\\n\\n  function revokeMinter(address _minter) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPriceFeed {\\n  function token() external view returns (address);\\n\\n  function price() external view returns (uint256);\\n\\n  function pricePoint() external view returns (uint256);\\n\\n  function emitPriceSignal() external;\\n\\n  event PriceUpdate(address token, uint256 price, uint256 average);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenPriceFeed.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(address _token, address _priceFeed, uint256 _mcr, uint256 _mlr, uint256 _borrowRate, uint256 _decimals) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultBorrowRate.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVaultBorrowRate {\\n    function getBorrowRate(address _vaultAddress) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVaultDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVaultDeployer {\\n    function deployVault(address _factory, address _vaultOwner, string memory _name) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(address _vault, uint256 _amount, address _to) external;\\n    function addCollateral(address _vault, address _collateral, uint256 _amount) external;\\n    function removeCollateral(address _vault, address _collateral, uint256 _amount, address _to) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(address _vault, address _collateral, uint256 _collateralAmount, address _to) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(address _vault, address _collateral) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(address _collateral) external view returns (bool);\\n    function vaultsByOwnerLength(address _owner) external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactoryConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IVaultFactoryConfig {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(uint256 oldMaxTokensPerVault, uint256 newMaxTokensPerVault);\\n    event RedemptionRateUpdated(uint256 oldRedemptionRate, uint256 newRedemptionRate);\\n    event BorrowRateUpdated(uint256 oldBorrowRate, uint256 newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(uint256 oldRedemptionHealthFactorLimit, uint256 newRedemptionHealthFactorLimit);\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setRedemptionRate(uint256 _redemptionRate) external;\\n    function setBorrowRate(uint256 _borrowRate) external;\\n    function setRedemptionHealthFactorLimit(uint256 _redemptionHealthFactorLimit) external;\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external;\\n    function setRedemptionFeeRecipient(address _redemptionFeeRecipient) external;\\n\\n    function priceFeed() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function redemptionRate() external view returns (uint256);\\n    function borrowRate() external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n    function borrowFeeRecipient() external view returns (address);\\n    function redemptionFeeRecipient() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function approve(address, uint256) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/constants.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Constants {\\n  uint256 public constant DECIMAL_PRECISION = 1e18;\\n  uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n  uint256 public constant MAX_INT = 2**256 - 1;\\n\\n  uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // 1%\\n  uint256 public constant PERCENT10 = PERCENT * 10; // 10%\\n  uint256 public constant PERCENT_05 = PERCENT / 2; // 0.5%\\n\\n  uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // 5%\\n  uint256 public constant MAX_REDEMPTION_RATE = (DECIMAL_PRECISION * 1) / 100; // 1%\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/linked-address-list.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title implements LinkedList structure used to store/operate sorted Troves\\nlibrary LinkedAddressList {\\n  struct EntryLink {\\n    address prev;\\n    address next;\\n  }\\n\\n  struct List {\\n    address _last;\\n    address _first;\\n    uint256 _size;\\n    mapping(address => EntryLink) _values;\\n  }\\n\\n  function add(\\n    List storage _list,\\n    address _element,\\n    address _reference,\\n    bool _before\\n  ) internal returns (bool) {\\n    require(\\n      _reference == address(0x0) || _list._values[_reference].next != address(0x0),\\n      \\\"79d3d _ref neither valid nor 0x\\\"\\n    );\\n    // the lement must not exist in order to be added\\n    EntryLink storage element_values = _list._values[_element];\\n    if (element_values.prev == address(0x0)) {\\n      // the list is empty\\n      if (_list._last == address(0x0)) {\\n        // if it is the first element in the list, it refers to itself to indicate this\\n        element_values.prev = _element;\\n        element_values.next = _element;\\n        // the new element is now officially the first\\n        _list._first = _element;\\n        // the new element is now officially the last\\n        _list._last = _element;\\n      } else {\\n        if (_before && (_reference == address(0x0) || _reference == _list._first)) {\\n          // the element should be added as the first element\\n          address first = _list._first;\\n          _list._values[first].prev = _element;\\n          element_values.prev = _element;\\n          element_values.next = first;\\n          _list._first = _element;\\n        } else if (!_before && (_reference == address(0x0) || _reference == _list._last)) {\\n          // the element should be added as the last element\\n          address last = _list._last;\\n          _list._values[last].next = _element;\\n          element_values.prev = last;\\n          element_values.next = _element;\\n          _list._last = _element;\\n        } else {\\n          // the element should be inserted in between two elements\\n          EntryLink memory ref = _list._values[_reference];\\n          if (_before) {\\n            element_values.prev = ref.prev;\\n            element_values.next = _reference;\\n            _list._values[_reference].prev = _element;\\n            _list._values[ref.prev].next = _element;\\n          } else {\\n            element_values.prev = _reference;\\n            element_values.next = ref.next;\\n            _list._values[_reference].next = _element;\\n            _list._values[ref.next].prev = _element;\\n          }\\n        }\\n      }\\n      _list._size = _list._size + 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function remove(List storage _list, address _element) internal returns (bool) {\\n    EntryLink memory element_values = _list._values[_element];\\n    if (element_values.next != address(0x0)) {\\n      if (_element == _list._last && _element == _list._first) {\\n        // it is the last element in the list\\n        delete _list._last;\\n        delete _list._first;\\n      } else if (_element == _list._first) {\\n        // simplified process for removing the first element\\n        address next = element_values.next;\\n        _list._values[next].prev = next;\\n        _list._first = next;\\n      } else if (_element == _list._last) {\\n        // simplified process for removing the last element\\n        address new_list_last = element_values.prev;\\n        _list._last = new_list_last;\\n        _list._values[new_list_last].next = new_list_last;\\n      } else {\\n        // set the previous and next to point to each other\\n        address next = element_values.next;\\n        address prev = element_values.prev;\\n        _list._values[next].prev = prev;\\n        _list._values[prev].next = next;\\n      }\\n      // in any case, delete the element itself\\n      delete _list._values[_element];\\n      _list._size = _list._size - 1;\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableTokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeWrapped\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowRate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowRate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowRate\",\"type\":\"address\"}],\"name\":\"BorrowRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCapacity\",\"type\":\"uint256\"}],\"name\":\"CollateralCapacityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtWindowSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtWindowSize\",\"type\":\"uint256\"}],\"name\":\"DebtWindowSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDebtPerWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDebtPerWindow\",\"type\":\"uint256\"}],\"name\":\"MaxDebtPerWindowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerVault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerVault\",\"type\":\"uint256\"}],\"name\":\"MaxTokensPerVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionHealthFactorLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionHealthFactorLimit\",\"type\":\"uint256\"}],\"name\":\"RedemptionHealthFactorLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionRate\",\"type\":\"uint256\"}],\"name\":\"RedemptionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"VaultOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidationRouter\",\"type\":\"address\"}],\"name\":\"liquidationRouterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REDEMPTION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_VAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addCollateralNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"closeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"containsVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtWindowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtWindowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeBadDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"isReedemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDebtWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtPerWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableTokenOwner\",\"outputs\":[{\"internalType\":\"contract IMintableTokenOwner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"nextVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionHealthFactorLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeCollateralNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowFeeRecipient\",\"type\":\"address\"}],\"name\":\"setBorrowFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowRate\",\"type\":\"address\"}],\"name\":\"setBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCollateralCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtWindowSize\",\"type\":\"uint256\"}],\"name\":\"setDebtWindowSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidationRouter\",\"type\":\"address\"}],\"name\":\"setLiquidationRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtPerWindow\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtPerWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerVault\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensPerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redemptionFeeRecipient\",\"type\":\"address\"}],\"name\":\"setRedemptionFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionHealthFactorLimit\",\"type\":\"uint256\"}],\"name\":\"setRedemptionHealthFactorLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionRate\",\"type\":\"uint256\"}],\"name\":\"setRedemptionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferVaultOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"vaultsByOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"vaultsByOwnerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VaultFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000b3857f86a95516902c953d530d3e5c29b1518a850000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000fbc5cfeb809c6352bc4ef2ffe842f72a8769e45e000000000000000000000000244dce725005bfffdeee080d10ef40c75f8233f000000000000000000000000000ff66600b35428b8eb76dc622d404c7ac27a99f0000000000000000000000001e7224703e1b289e06f0ff12519685fcf8e9306c", "EVMVersion": "paris", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}