{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/impls/WitnetProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../patterns/Upgradeable.sol\\\";\\r\\n\\r\\n/// @title WitnetProxy: upgradable delegate-proxy contract. \\r\\n/// @author The Witnet Foundation.\\r\\ncontract WitnetProxy {\\r\\n\\r\\n    /// Event emitted every time the implementation gets updated.\\r\\n    event Upgraded(address indexed implementation);  \\r\\n\\r\\n    /// Constructor with no params as to ease eventual support of Singleton pattern (i.e. ERC-2470).\\r\\n    constructor () {}\\r\\n\\r\\n    receive() virtual external payable {}\\r\\n\\r\\n    /// Payable fallback accepts delegating calls to payable functions.  \\r\\n    fallback() external payable { /* solhint-disable no-complex-fallback */\\r\\n        address _implementation = implementation();\\r\\n        assembly { /* solhint-disable avoid-low-level-calls */\\r\\n            // Gas optimized delegate call to 'implementation' contract.\\r\\n            // Note: `msg.data`, `msg.sender` and `msg.value` will be passed over \\r\\n            //       to actual implementation of `msg.sig` within `implementation` contract.\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _implementation, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n            switch result\\r\\n                case 0  { \\r\\n                    // pass back revert message:\\r\\n                    revert(ptr, size) \\r\\n                }\\r\\n                default {\\r\\n                  // pass back same data as returned by 'implementation' contract:\\r\\n                  return(ptr, size) \\r\\n                }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Returns proxy's current implementation address.\\r\\n    function implementation() public view returns (address) {\\r\\n        return __proxySlot().implementation;\\r\\n    }\\r\\n\\r\\n    /// Upgrades the `implementation` address.\\r\\n    /// @param _newImplementation New implementation address.\\r\\n    /// @param _initData Raw data with which new implementation will be initialized.\\r\\n    /// @return Returns whether new implementation would be further upgradable, or not.\\r\\n    function upgradeTo(address _newImplementation, bytes memory _initData)\\r\\n        public returns (bool)\\r\\n    {\\r\\n        // New implementation cannot be null:\\r\\n        require(_newImplementation != address(0), \\\"WitnetProxy: null implementation\\\");\\r\\n\\r\\n        address _oldImplementation = implementation();\\r\\n        if (_oldImplementation != address(0)) {\\r\\n            // New implementation address must differ from current one:\\r\\n            require(_newImplementation != _oldImplementation, \\\"WitnetProxy: nothing to upgrade\\\");\\r\\n\\r\\n            // Assert whether current implementation is intrinsically upgradable:\\r\\n            try Upgradeable(_oldImplementation).isUpgradable() returns (bool _isUpgradable) {\\r\\n                require(_isUpgradable, \\\"WitnetProxy: not upgradable\\\");\\r\\n            } catch {\\r\\n                revert(\\\"WitnetProxy: unable to check upgradability\\\");\\r\\n            }\\r\\n\\r\\n            // Assert whether current implementation allows `msg.sender` to upgrade the proxy:\\r\\n            (bool _wasCalled, bytes memory _result) = _oldImplementation.delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"isUpgradableFrom(address)\\\",\\r\\n                    msg.sender\\r\\n                )\\r\\n            );\\r\\n            require(_wasCalled, \\\"WitnetProxy: not compliant\\\");\\r\\n            require(abi.decode(_result, (bool)), \\\"WitnetProxy: not authorized\\\");\\r\\n            require(\\r\\n                Upgradeable(_oldImplementation).proxiableUUID() == Upgradeable(_newImplementation).proxiableUUID(),\\r\\n                \\\"WitnetProxy: proxiableUUIDs mismatch\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Initialize new implementation within proxy-context storage:\\r\\n        (bool _wasInitialized,) = _newImplementation.delegatecall(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"initialize(bytes)\\\",\\r\\n                _initData\\r\\n            )\\r\\n        );\\r\\n        require(_wasInitialized, \\\"WitnetProxy: unable to initialize\\\");\\r\\n\\r\\n        // If all checks and initialization pass, update implementation address:\\r\\n        __proxySlot().implementation = _newImplementation;\\r\\n        emit Upgraded(_newImplementation);\\r\\n\\r\\n        // Asserts new implementation complies w/ minimal implementation of Upgradeable interface:\\r\\n        try Upgradeable(_newImplementation).isUpgradable() returns (bool _isUpgradable) {\\r\\n            return _isUpgradable;\\r\\n        }\\r\\n        catch {\\r\\n            revert (\\\"WitnetProxy: not compliant\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Complying with EIP-1967, retrieves storage struct containing proxy's current implementation address.\\r\\n    function __proxySlot() private pure returns (Proxiable.ProxiableSlot storage _slot) {\\r\\n        assembly {\\r\\n            // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\r\\n            _slot.slot := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/patterns/Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/* solhint-disable var-name-mixedcase */\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./Proxiable.sol\\\";\\r\\n\\r\\nabstract contract Upgradeable is Initializable, Proxiable {\\r\\n\\r\\n    address internal immutable _BASE;\\r\\n    bytes32 internal immutable _CODEHASH;\\r\\n    bool internal immutable _UPGRADABLE;\\r\\n\\r\\n    modifier onlyDelegateCalls virtual {\\r\\n        require(\\r\\n            address(this) != _BASE,\\r\\n            \\\"Upgradeable: not a delegate call\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// Emitted every time the contract gets upgraded.\\r\\n    /// @param from The address who ordered the upgrading. Namely, the WRB operator in \\\"trustable\\\" implementations.\\r\\n    /// @param baseAddr The address of the new implementation contract.\\r\\n    /// @param baseCodehash The EVM-codehash of the new implementation contract.\\r\\n    /// @param versionTag Ascii-encoded version literal with which the implementation deployer decided to tag it.\\r\\n    event Upgraded(\\r\\n        address indexed from,\\r\\n        address indexed baseAddr,\\r\\n        bytes32 indexed baseCodehash,\\r\\n        string  versionTag\\r\\n    );\\r\\n\\r\\n    constructor (bool _isUpgradable) {\\r\\n        address _base = address(this);\\r\\n        bytes32 _codehash;        \\r\\n        assembly {\\r\\n            _codehash := extcodehash(_base)\\r\\n        }\\r\\n        _BASE = _base;\\r\\n        _CODEHASH = _codehash;\\r\\n        _UPGRADABLE = _isUpgradable;\\r\\n    }\\r\\n\\r\\n    /// @dev Retrieves base contract. Differs from address(this) when called via delegate-proxy pattern.\\r\\n    function base() public view returns (address) {\\r\\n        return _BASE;\\r\\n    }\\r\\n\\r\\n    /// @dev Retrieves the immutable codehash of this contract, even if invoked as delegatecall.\\r\\n    function codehash() public view returns (bytes32) {\\r\\n        return _CODEHASH;\\r\\n    }\\r\\n\\r\\n    /// @dev Determines whether the logic of this contract is potentially upgradable.\\r\\n    function isUpgradable() public view returns (bool) {\\r\\n        return _UPGRADABLE;\\r\\n    }\\r\\n\\r\\n    /// @dev Tells whether provided address could eventually upgrade the contract.\\r\\n    function isUpgradableFrom(address from) virtual external view returns (bool);\\r\\n\\r\\n    /// @notice Re-initialize contract's storage context upon a new upgrade from a proxy.    \\r\\n    /// @dev Must fail when trying to upgrade to same logic contract more than once.\\r\\n    function initialize(bytes memory) virtual external;\\r\\n\\r\\n    /// @dev Retrieves human-redable named version of current implementation.\\r\\n    function version() virtual public view returns (string memory); \\r\\n}\"\r\n    },\r\n    \"/contracts/patterns/Proxiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\nabstract contract Proxiable {\\r\\n    /// @dev Complying with EIP-1822: Universal Upgradeable Proxy Standard (UUPS)\\r\\n    /// @dev See https://eips.ethereum.org/EIPS/eip-1822.\\r\\n    function proxiableUUID() virtual external view returns (bytes32);\\r\\n\\r\\n    struct ProxiableSlot {\\r\\n        address implementation;\\r\\n        address proxy;\\r\\n    }\\r\\n\\r\\n    function __implementation() internal view returns (address) {\\r\\n        return __proxiable().implementation;\\r\\n    }\\r\\n\\r\\n    function __proxy() internal view returns (address) {\\r\\n        return __proxiable().proxy;\\r\\n    }\\r\\n\\r\\n    function __proxiable() internal pure returns (ProxiableSlot storage proxiable) {\\r\\n        assembly {\\r\\n            // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\r\\n            proxiable.slot := 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/patterns/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initData\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WitnetProxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xf56e739c436ea6e65a17dbfac9d7e57062d19422", "SwarmSource": ""}