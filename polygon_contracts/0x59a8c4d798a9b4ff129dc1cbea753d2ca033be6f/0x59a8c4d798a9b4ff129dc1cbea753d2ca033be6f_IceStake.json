{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract IceStake is Ownable {\r\n\r\n\tIERC20 public erctoken;\r\n\taddress private token = 0x2094538E1b112c8ff37D079F107985EA050935A3; /** token **/\r\n\t/** default percentages **/\r\n\tuint256 public REFERRAL_PERCENT = 30;\r\n\tuint256 public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\t/* whale control features. **/\r\n\tuint256 public CUTOFF_STEP = 240 * 60 * 60;\r\n\tuint256 public WITHDRAW_COOLDOWN = 0 * 60 * 60;\r\n\r\n    /** deposits after this timestamp timestamp get additional percentages **/\r\n    uint256 public PERCENTAGE_BONUS_STARTTIME = 0;\r\n\tuint256 public PERCENTAGE_BONUS_PLAN_1 = 0;\r\n    uint256 public PERCENTAGE_BONUS_PLAN_2 = 0;\r\n    uint256 public PERCENTAGE_BONUS_PLAN_3 = 0;\r\n\r\n    /* project statistics **/\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalReInvested;\r\n\tuint256 public totalRefBonus;\r\n\tuint256 public totalInvestorCount;\r\n    uint256 public investGate = 1;\r\n\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n        uint256 mininvest;\r\n\r\n        /** plan statistics **/\r\n        uint256 planTotalInvestorCount;\r\n        uint256 planTotalInvestments;\r\n        uint256 planTotalReInvestorCount;\r\n        uint256 planTotalReInvestments;\r\n        \r\n        bool planActivated;\r\n    }\r\n    \r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t\tbool reinvested;\r\n\t}\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tmapping (uint8 => uint256) checkpoints; /** a checkpoint for each plan **/\r\n\t\tuint256 cutoff;\r\n\t\tuint256 totalInvested;\r\n\t\tuint256 referralsCount;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 reinvested;\r\n\t\tuint256 totalDepositAmount;\r\n\t\taddress referrer;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent ReinvestedDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n    bool public started;\r\n\r\n\tconstructor() {erctoken = IERC20(token);}\r\n\t//config initial plans (days,daily percentage payout, investment minimum)\r\n\tfunction pushPlan(\r\n\tuint256 p1day, uint256 p1per, uint256 p1min,\r\n\tuint256 p2day, uint256 p2per, uint256 p2min,\r\n\tuint256 p3day, uint256 p3per, uint256 p3min)\r\n\tpublic onlyOwner {\r\n\tplans.push(Plan(p1day, p1per, p1min * 1e18, 0, 0, 0, 0, true));\r\n    plans.push(Plan(p2day, p2per, p2min * 1e18, 0, 0, 0, 0, true));\r\n    plans.push(Plan(p3day, p3per, p3min * 1e18, 0, 0, 0, 0, true));\r\n\t}\r\n\t//initialize contract\r\n\tfunction startContract() public onlyOwner{\r\n        require(started == false, \"Contract already started\");\r\n        started = true;\r\n    }\r\n    //Initial staking\r\n\tfunction invest(address referrer, uint8 plan, uint256 amounterc) public {\r\n        require(investGate == 1);\r\n\t\trequire(started, \"Contract not yet started\");\r\n        require(plan < plans.length, \"Invalid Plan.\");\r\n        require(amounterc >= plans[plan].mininvest, \"Less than minimum amount required for the selected Plan.\");\r\n\t\trequire(plans[plan].planActivated, \"Plan selected is disabled\");\r\n        erctoken.transferFrom(msg.sender,address(this),amounterc);\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount+(1);\r\n            }\r\n        }\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 amount = amounterc*(REFERRAL_PERCENT)/(PERCENTS_DIVIDER);\r\n                users[upline].bonus = users[upline].bonus+(amount);\r\n                users[upline].totalBonus = users[upline].totalBonus+(amount);\r\n                totalRefBonus = totalRefBonus+(amount);\r\n                emit RefBonus(upline, msg.sender, amount);\r\n            }\r\n        }\r\n\r\n        /** new user gets current time + CUTOFF_STEP for initial time window **/\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoints[plan] = block.timestamp;\r\n\t\t\tuser.cutoff = block.timestamp+(CUTOFF_STEP);\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n        /** deposit from new invest **/\r\n\t\tuser.deposits.push(Deposit(plan, amounterc, block.timestamp, false));\r\n\r\n\t\tuser.totalInvested = user.totalInvested+(amounterc);\r\n\t\ttotalInvested = totalInvested+(amounterc);\r\n\r\n\t\t/** statistics **/\r\n\t\ttotalInvestorCount = totalInvestorCount+(1);\r\n\t\tplans[plan].planTotalInvestorCount = plans[plan].planTotalInvestorCount+(1);\r\n\t\tplans[plan].planTotalInvestments = plans[plan].planTotalInvestments+(amounterc);\r\n\r\n\t\temit NewDeposit(msg.sender, plan, amounterc);\r\n\t}\r\n    //similar to a compound\r\n\tfunction reinvest(uint8 plan) public {\r\n\t\trequire(investGate == 1);\r\n\t\trequire(started, \"Not started yet\");\r\n        require(plan < plans.length, \"Invalid plan\");\r\n        require(plans[plan].planActivated, \"Plan selected is disabled.\");\r\n\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 totalAmount = getUserDividends(msg.sender, int8(plan));\r\n\r\n\t\tuser.deposits.push(Deposit(plan, totalAmount, block.timestamp, true));\r\n\r\n        user.reinvested = user.reinvested+(totalAmount);\r\n        user.checkpoints[plan] = block.timestamp;\r\n        user.cutoff = block.timestamp+(CUTOFF_STEP);\r\n\r\n        /** statistics **/\r\n\t\ttotalReInvested = totalReInvested+(totalAmount);\r\n\t\tplans[plan].planTotalReInvestments = plans[plan].planTotalReInvestments+(totalAmount);\r\n\t\tplans[plan].planTotalReInvestorCount = plans[plan].planTotalReInvestorCount+(1);\r\n\r\n\t\temit ReinvestedDeposit(msg.sender, plan, totalAmount);\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\tuser.bonus = 0;\r\n\t\t\ttotalAmount = totalAmount+(referralBonus);\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n\t\tuint256 contractBalance = erctoken.balanceOf(address(this));\r\n\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\tuser.bonus = totalAmount-(contractBalance);\r\n\t\t\tuser.totalBonus = user.totalBonus+(user.bonus);\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n        for(uint8 i = 0; i < plans.length; i++){\r\n\r\n            /** user can only withdraw every after 8 hours from last withdrawal. **/\r\n            if(user.checkpoints[i]+(WITHDRAW_COOLDOWN) > block.timestamp){\r\n               revert(\"Withdrawals can only be made every after 8 hours.\");\r\n            }\r\n\r\n            /** global withdraw will reset checkpoints on all plans **/\r\n\t\t    user.checkpoints[i] = block.timestamp;\r\n        }\r\n\r\n        /** global withdraw will also reset CUTOFF **/\r\n        user.cutoff = block.timestamp+(CUTOFF_STEP);\r\n\t\tuser.withdrawn = user.withdrawn+(totalAmount);\r\n\r\n        erctoken.transfer(msg.sender, totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\t\r\n\r\n\tfunction getUserDividends(address userAddress, int8 plan) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tuint256 endPoint = block.timestamp < user.cutoff ? block.timestamp : user.cutoff;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t    if(plan > -1){\r\n\t\t        if(user.deposits[i].plan != uint8(plan)){\r\n\t\t            continue;\r\n\t\t        }\r\n\t\t    }\r\n\t\t\tuint256 finish = user.deposits[i].start+(plans[user.deposits[i].plan].time*(1 days));\r\n\t\t\t/** check if plan is not yet finished. **/\r\n\t\t\tif (user.checkpoints[user.deposits[i].plan] < finish) {\r\n\r\n\t\t\t    uint256 percent = plans[user.deposits[i].plan].percent;\r\n\t\t\t    if(user.deposits[i].start >= PERCENTAGE_BONUS_STARTTIME){\r\n                    if(user.deposits[i].plan == 0){\r\n                        percent = percent+(PERCENTAGE_BONUS_PLAN_1);\r\n                    }else if(user.deposits[i].plan == 1){\r\n                        percent = percent+(PERCENTAGE_BONUS_PLAN_2);\r\n                    }else if(user.deposits[i].plan == 2){\r\n                        percent = percent+(PERCENTAGE_BONUS_PLAN_3);\r\n                    }\r\n\t\t\t    }\r\n\r\n\t\t\t\tuint256 share = user.deposits[i].amount*(percent)/(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoints[user.deposits[i].plan] ? user.deposits[i].start : user.checkpoints[user.deposits[i].plan];\r\n\t\t\t\t/** uint256 to = finish < block.timestamp ? finish : block.timestamp; **/\r\n\t\t\t\tuint256 to = finish < endPoint ? finish : endPoint;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount+(share*(to-(from))/(TIME_STEP));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\tfunction getUserActiveProjectInvestments(address userAddress) public view returns (uint256){\r\n\t    uint256 totalAmount;\r\n\r\n\t\t/** get total active investments in all plans. **/\r\n        for(uint8 i = 0; i < plans.length; i++){\r\n              totalAmount = totalAmount+(getUserActiveInvestments(userAddress, i));  \r\n        }\r\n        \r\n\t    return totalAmount;\r\n\t}\r\n\r\n\tfunction getUserActiveInvestments(address userAddress, uint8 plan) public view returns (uint256){\r\n\t    User storage user = users[userAddress];\r\n\t    uint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t        if(user.deposits[i].plan != uint8(plan)){\r\n\t            continue;\r\n\t        }\r\n\r\n\t\t\tuint256 finish = user.deposits[i].start+(plans[user.deposits[i].plan].time*(1 days));\r\n\t\t\tif (user.checkpoints[uint8(plan)] < finish) {\r\n\t\t\t    /** sum of all unfinished deposits from plan **/\r\n\t\t\t\ttotalAmount = totalAmount+(user.deposits[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\t    return totalAmount;\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent, uint256 minimumInvestment,\r\n\t  uint256 planTotalInvestorCount, uint256 planTotalInvestments , uint256 planTotalReInvestorCount, uint256 planTotalReInvestments, bool planActivated) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tminimumInvestment = plans[plan].mininvest;\r\n\t\tplanTotalInvestorCount = plans[plan].planTotalInvestorCount;\r\n\t\tplanTotalInvestments = plans[plan].planTotalInvestments;\r\n\t\tplanTotalReInvestorCount = plans[plan].planTotalReInvestorCount;\r\n\t\tplanTotalReInvestments = plans[plan].planTotalReInvestments;\r\n\t\tplanActivated = plans[plan].planActivated;\r\n\t}\r\n\t\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn erctoken.balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t    return getUserDividends(userAddress, -1);\r\n\t}\r\n\r\n\tfunction getUserCutoff(address userAddress) public view returns (uint256) {\r\n      return users[userAddress].cutoff;\r\n    }\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress, uint8 plan) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoints[plan];\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n    function getUserTotalReferrals(address userAddress) public view returns (uint256){\r\n        return users[userAddress].referralsCount;\r\n    }\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t    return users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus-(users[userAddress].bonus);\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress)+(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount+(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish, bool reinvested) {\r\n\t    User storage user = users[userAddress];\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start+(plans[user.deposits[index].plan].time*(1 days));\r\n\t\treinvested = user.deposits[index].reinvested;\r\n\t}\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalInvested, uint256 _totalBonus) {\r\n        return (totalInvested, totalRefBonus);\r\n    }\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress));\r\n\t}\r\n\r\n\t/** Get Block Timestamp **/\r\n\tfunction getBlockTimeStamp() public view returns (uint256) {\r\n\t    return block.timestamp;\r\n\t}\r\n\r\n\t/** Get Plans Length **/\r\n\tfunction getPlansLength() public view returns (uint256) {\r\n\t    return plans.length;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    /** Add additional plans in the Plan structure. **/\r\n    function ADD_NEW_PLAN(uint256 time, uint256 percent, uint256 mininvest, bool planActivated) external onlyOwner{\r\n        plans.push(Plan(time, percent, mininvest, 0, 0, 0, 0, planActivated));\r\n    }\r\n    //add bonuses for stakers\r\n    function ADD_PERCENT_STARTTIME(uint256 value) external onlyOwner {\r\n        PERCENTAGE_BONUS_STARTTIME = value;\r\n    }\r\n\r\n    function ADD_PLAN1_BONUS(uint256 value) external onlyOwner{\r\n        PERCENTAGE_BONUS_PLAN_1 = value;\r\n    }\r\n\r\n    function ADD_PLAN2_BONUS(uint256 value) external onlyOwner {\r\n        PERCENTAGE_BONUS_PLAN_2 = value;\r\n    }\r\n\r\n    function ADD_PLAN3_BONUS(uint256 value) external onlyOwner{\r\n        PERCENTAGE_BONUS_PLAN_3 = value;\r\n    }\r\n    //set to 1000 to allow for single decimal place value\r\n    function setPercentDiv(uint256 value) external onlyOwner{\r\n        PERCENTS_DIVIDER = value;\r\n    }\r\n    //set referral bonus rate i.e. 60 = 6%\r\n    function SET_REFERRAL_PERCENT(uint256 value) external onlyOwner{\r\n        REFERRAL_PERCENT = value;\r\n    }\r\n\r\n    function SET_PLAN_PERCENT(uint8 plan, uint256 value) external onlyOwner{\r\n        plans[plan].percent = value;\r\n    }\r\n\r\n    function SET_PLAN_TIME(uint8 plan, uint256 value) external onlyOwner{\r\n        plans[plan].time = value;\r\n    }\r\n\r\n    function SET_PLAN_MIN(uint8 plan, uint256 value) external onlyOwner{\r\n        plans[plan].mininvest = value * 1e18;\r\n    }\r\n\r\n    function SET_PLAN_ACTIVE(uint8 plan, bool value) external onlyOwner{\r\n        plans[plan].planActivated = value;\r\n    }\r\n    //users must claim their pooling amount before xx days\r\n    function SET_CUTOFF_STEP(uint256 value) external onlyOwner{\r\n        CUTOFF_STEP = value * 60 * 60;\r\n    }\r\n    //how many hours before withdrawing again allowed\r\n    function SET_WITHDRAW_COOLDOWN(uint256 value) external onlyOwner{\r\n        WITHDRAW_COOLDOWN = value * 60 * 60;\r\n    }\r\n    //fund the contract\r\n    function adminDepo(uint256 amount) external onlyOwner{\r\n           require(\r\n            erctoken.transferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                amount\r\n            ) == true,\r\n            \"Could not transfer tokens from your address to this contract\"\r\n        );\r\n    }\r\n    //remove funds from the contract\r\n    function adminWithdraw(uint256 amount) external onlyOwner{\r\n        require(\r\n            erctoken.transfer(\r\n                address(msg.sender),\r\n                amount\r\n            ) == true,\r\n            \"Could not transfer tokens from your address to this contract\"\r\n        );\r\n    }\r\n    // 0 for pause 1 for play\r\n    function setInvestGate(uint256 value) external onlyOwner {\r\n        investGate = value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mininvest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"planActivated\",\"type\":\"bool\"}],\"name\":\"ADD_NEW_PLAN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ADD_PERCENT_STARTTIME\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ADD_PLAN1_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ADD_PLAN2_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ADD_PLAN3_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_STARTTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_CUTOFF_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SET_PLAN_ACTIVE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_PLAN_MIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_PLAN_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_PLAN_TIME\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_REFERRAL_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erctoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalInvestorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalInvestments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalReInvestorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalReInvestments\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"planActivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlansLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserActiveInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActiveProjectInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reinvested\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"int8\",\"name\":\"plan\",\"type\":\"int8\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amounterc\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investGate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p1day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p1per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p1min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p3day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p3per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p3min\",\"type\":\"uint256\"}],\"name\":\"pushPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInvestGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercentDiv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IceStake", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b914f4c1335eceb7fa5a184693c1b63e237087aaa9b9a7c82801540b121eb3e3"}