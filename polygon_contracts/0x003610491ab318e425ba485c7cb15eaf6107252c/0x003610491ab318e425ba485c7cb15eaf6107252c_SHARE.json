{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u28f6\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f6\u28f6\u2844\u2800\u2800\u28f6\u28f6\u2846\u2800\u2800\u28f6\u28f6\u2800\u2800\u2800\u2800\u28b0\u28f6\u28f6\u28f6\u28f6\u2880\u2800\u2800\u28e4\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f4\u28f6\u28f6\u28e6\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28bb\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u28ff\u28ff\u2800\u2800\u28fe\u28ff\u2801\u2808\u28ff\u2847\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28f8\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2840\u28ff\u285f\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u2800\u2800\r\n// \u28ff\u28ff\u283f\u283f\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28f7\u28ff\u2800\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u287f\u283f\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u2844\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2808\u28ff\u28f7\u2800\u2800\u2800\u28ff\u28ff\u28b8\u28ff\u28ff\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2880\u28c0\u2800\u2819\u28ff\u28e7\u2800\u2800\u28c0\u28c0\u2800\u283b\u28ff\u2846\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e4\u28fe\u28ff\u2807\u2800\u2800\u28ff\u28ff\u2800\u28ff\u28ff\u2800\u2800\u2800\u28ff\u28ff\u2800\u28ff\u2847\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28e7\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28c6\u2800\u28ff\u28ff\u2800\u2800\u28ff\u28ff\u2840\u2880\u28ff\u28ff\r\n// \u281b\u281b\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u283f\u283f\u281b\u2800\u2800\u2800\u281b\u281b\u2800\u2818\u281b\u2803\u2800\u2800\u281b\u281b\u2800\u281b\u2800\u2808\u281b\u2803\u2800\u2800\u281b\u281b\u281b\u281b\u2803\u2800\u2818\u281b\u281b\u281b\u281b\u2803\u2800\u2800\u2819\u283f\u283f\u281f\u2801\u2800\u2800\u2800\u281b\u283f\u283f\u281b\u2800\r\n// https://formless.xyz/opportunities\r\n//\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title Contract code verification.\r\n/// @author brandon@formless.xyz\r\n/// @notice Code verification library for determining the keccak256\r\n/// hash of the runtime bytecode for deployed contracts.\r\nlibrary CodeVerification {\r\n    enum BuildType {\r\n        WALLET, /* 0 */\r\n        SPLIT, /* 1 */\r\n        PFA_UNIT, /* 2 */\r\n        PFA_COLLECTION /* 3 */\r\n    }\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    /// @notice Returns the keccak256 hash of the runtime bytecode\r\n    /// stored at the supplied `address_`.\r\n    function readCodeHash(address address_) public view returns (bytes32) {\r\n        bytes32 codeHash;\r\n        assembly {\r\n            codeHash := extcodehash(address_)\r\n        }\r\n        return codeHash;\r\n    }\r\n}\r\n\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u28f6\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f6\u28f6\u2844\u2800\u2800\u28f6\u28f6\u2846\u2800\u2800\u28f6\u28f6\u2800\u2800\u2800\u2800\u28b0\u28f6\u28f6\u28f6\u28f6\u2880\u2800\u2800\u28e4\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f4\u28f6\u28f6\u28e6\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28bb\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u28ff\u28ff\u2800\u2800\u28fe\u28ff\u2801\u2808\u28ff\u2847\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28f8\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2840\u28ff\u285f\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u2800\u2800\r\n// \u28ff\u28ff\u283f\u283f\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28f7\u28ff\u2800\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u287f\u283f\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u2844\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2808\u28ff\u28f7\u2800\u2800\u2800\u28ff\u28ff\u28b8\u28ff\u28ff\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2880\u28c0\u2800\u2819\u28ff\u28e7\u2800\u2800\u28c0\u28c0\u2800\u283b\u28ff\u2846\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e4\u28fe\u28ff\u2807\u2800\u2800\u28ff\u28ff\u2800\u28ff\u28ff\u2800\u2800\u2800\u28ff\u28ff\u2800\u28ff\u2847\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28e7\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28c6\u2800\u28ff\u28ff\u2800\u2800\u28ff\u28ff\u2840\u2880\u28ff\u28ff\r\n// \u281b\u281b\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u283f\u283f\u281b\u2800\u2800\u2800\u281b\u281b\u2800\u2818\u281b\u2803\u2800\u2800\u281b\u281b\u2800\u281b\u2800\u2808\u281b\u2803\u2800\u2800\u281b\u281b\u281b\u281b\u2803\u2800\u2818\u281b\u281b\u281b\u281b\u2803\u2800\u2800\u2819\u283f\u283f\u281f\u2801\u2800\u2800\u2800\u281b\u283f\u283f\u281b\u2800\r\n// https://formless.xyz/opportunities\r\n//\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u28f6\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f6\u28f6\u2844\u2800\u2800\u28f6\u28f6\u2846\u2800\u2800\u28f6\u28f6\u2800\u2800\u2800\u2800\u28b0\u28f6\u28f6\u28f6\u28f6\u2880\u2800\u2800\u28e4\u28f6\u28f6\u28e6\u2840\u2800\u2800\u2800\u28f4\u28f6\u28f6\u28e6\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28bb\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2800\u28b8\u28ff\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u28ff\u28ff\u2800\u2800\u28fe\u28ff\u2801\u2808\u28ff\u2847\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u28f8\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28ff\u2840\u28ff\u285f\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u2800\u2800\u2800\r\n// \u28ff\u28ff\u283f\u283f\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28f7\u28ff\u2800\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u287f\u283f\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e6\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u2844\u2800\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2808\u28ff\u28f7\u2800\u2800\u2800\u28ff\u28ff\u28b8\u28ff\u28ff\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u2800\u2800\u2800\u2800\u28b8\u28ff\u2847\u2800\u2800\u2800\u2800\u2880\u28c0\u2800\u2819\u28ff\u28e7\u2800\u2800\u28c0\u28c0\u2800\u283b\u28ff\u2846\r\n// \u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28e4\u28fe\u28ff\u2807\u2800\u2800\u28ff\u28ff\u2800\u28ff\u28ff\u2800\u2800\u2800\u28ff\u28ff\u2800\u28ff\u2847\u2808\u28ff\u2847\u2800\u2800\u28ff\u28ff\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28e7\u28e4\u28e4\u2844\u2800\u28b8\u28ff\u28c6\u2800\u28ff\u28ff\u2800\u2800\u28ff\u28ff\u2840\u2880\u28ff\u28ff\r\n// \u281b\u281b\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u283f\u283f\u281b\u2800\u2800\u2800\u281b\u281b\u2800\u2818\u281b\u2803\u2800\u2800\u281b\u281b\u2800\u281b\u2800\u2808\u281b\u2803\u2800\u2800\u281b\u281b\u281b\u281b\u2803\u2800\u2818\u281b\u281b\u281b\u281b\u2803\u2800\u2800\u2819\u283f\u283f\u281f\u2801\u2800\u2800\u2800\u281b\u283f\u283f\u281b\u2800\r\n// https://formless.xyz/opportunities\r\n//\u2800\r\n\r\n\r\n/// @title Standard pay-for-access (PFA) contract interface for SHARE.\r\n/// @author brandon@formless.xyz\r\ninterface IPFA {\r\n    /// @notice Returns the price per access in wei for content backed\r\n    /// by this contract.\r\n    function pricePerAccess() external view returns (uint256);\r\n\r\n    /// @notice Sets the price per access in wei for content backed\r\n    /// by this contract.\r\n    function setPricePerAccess(uint256 pricePerAccess_) external;\r\n\r\n    /// @notice If called with a value equal to the price per access\r\n    /// of this contract, records a grant timestamp on chain which is\r\n    /// read by decentralized distribution network (DDN) microservices\r\n    /// to decrypt and serve the associated content for the tokenURI.\r\n    function access(uint256 tokenId, address recipient) external payable;\r\n\r\n    /// @notice Returns the timestamp in seconds of the award of a\r\n    /// grant recorded on chain for the access of the content\r\n    /// associated with this PFA.\r\n    function grantTimestamp(address recipient_) external view returns (uint256);\r\n\r\n    /// @notice Returns the time-to-live (TTL) in seconds of an\r\n    /// awarded access grant for this PFA. Access to the associated\r\n    ///content expires at `grant award timestamp + grant TTL`.\r\n    function grantTTL() external view returns (uint256);\r\n\r\n    /// @notice Returns true if this PFA supports licensing, where\r\n    /// licensing is the ability for a separate contract to forward\r\n    /// payment to this PFA in exchange for the ability to perpetually\r\n    /// serve the underlying content on its behalf. For example,\r\n    /// licensing may be used to achieve transaction gated playlisting\r\n    /// of a collection of PFAs.\r\n    function supportsLicensing() external view returns (bool);\r\n\r\n    /// @notice Returns the price per license in wei for content\r\n    /// backed by this contract.\r\n    function pricePerLicense() external view returns (uint256);\r\n\r\n    /// @notice If called with a `recipient` (licensee) contract which\r\n    /// has proof of inclusion of this PFA (licensor) address in its\r\n    /// payout distribution table, records a license timestamp on\r\n    /// chain which is read by decentralized distribution (DDN)\r\n    /// microservices to decrypt and serve the associated content for\r\n    /// the tokenURI to users who have paid to access the licensee\r\n    /// contract.\r\n    /// @dev Proof of inclusion is in the form of source code\r\n    /// verification of the licensee, as well as the assertion of\r\n    /// immutable state of the licensee contract payout distribution\r\n    /// table. Immutable state is verified using knowledge of the\r\n    /// keccak256 hash of the runtime bytecode of the source code\r\n    /// for approved licensees which implement a write-once\r\n    /// distribution address table.\r\n    function license(address recipient) external payable;\r\n\r\n    /// @notice Returns the timestamp in seconds of the award of a\r\n    /// grant recorded on chain for the access of the content\r\n    /// associated with this PFA.\r\n    function licenseTimestamp(address recipient_)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n/// @title SHARE protocol contract.\r\n/// @author brandon@formless.xyz\r\n/// @notice A protocol which works in conjunction with SHARE\r\n/// decentralized distribution network (DDN) microservice endpoints\r\n/// to perform content distribtion on blockchain with creator\r\n/// controlled pay-for-access (PFA) micro-transactions.\r\ncontract SHARE is Ownable, ReentrancyGuard {\r\n    /// @notice Emitted when a successful access grant is awarded\r\n    /// to a recipient address for a given PFA contract.\r\n    event Grant(\r\n        address indexed recipient,\r\n        address indexed contractAddress,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /// @notice Emitted when a successful license grant is awarded\r\n    /// to a recipient (licensee) address for a given PFA (licensor) contract.\r\n    event License(address indexed licensor, address indexed licensee);\r\n\r\n    string public constant VERSION = \"1.0.0\";\r\n    bytes32\r\n        private constant EOA_KECCAK256 = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    uint256 public _transactionFeeNumerator = 1;\r\n    uint256 public _transactionFeeDenominator = 20;\r\n    uint256 public _transactionCount = 0;\r\n    bool public _codeVerificationEnabled = true;\r\n    uint256 private constant UNIT_TOKEN_INDEX = 0;\r\n\r\n    mapping(bytes32 => ApprovedBuild) internal _approvedHashes;\r\n    mapping(address => mapping(address => uint256)) internal _grantTimestamps;\r\n    mapping(address => mapping(address => uint256)) internal _licenseTimestamps;\r\n\r\n    struct ApprovedBuild {\r\n        CodeVerification.BuildType buildType;\r\n        string compilerBinaryTarget;\r\n        string compilerVersion;\r\n        address authorAddress;\r\n        bool exists;\r\n    }\r\n\r\n    constructor() public {\r\n        addApprovedBuild(\r\n            EOA_KECCAK256,\r\n            CodeVerification.BuildType.WALLET,\r\n            \"\",\r\n            \"\",\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /// @notice Used to set the transaction fee for the protocol.\r\n    /// Calculated using provided _numerator / _denominator. Note that\r\n    /// SHARE PFA contracts can (optionally) be accessed _without_\r\n    /// using the SHARE protocol contract if the URI microservice\r\n    /// endpoint is self-hosted, however the use of SHARE provided\r\n    /// DDN endpoints requires an associated payment to the protocol.\r\n    function setTransactionFee(uint256 numerator_, uint256 denominator_)\r\n        public\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        _transactionFeeNumerator = numerator_;\r\n        _transactionFeeDenominator = denominator_;\r\n    }\r\n\r\n    /// @notice Returns the consumer facing gross price to access the\r\n    /// the asset. This price is calculated using `access price` +\r\n    ///`access price` * `transaction fee`.\r\n    function grossPricePerAccess(address contractAddress_, uint256 tokenId_)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenId_ == UNIT_TOKEN_INDEX, \"SHARE004\");\r\n        IPFA asset = IPFA(contractAddress_);\r\n        uint256 pricePerAccess = asset.pricePerAccess();\r\n        // Note that this contract is implemented with Solidity\r\n        // version >=0.8.0 which has built-in overflow checks,\r\n        // therefore using SafeMath is not required.\r\n        uint256 protocolFee = (pricePerAccess * _transactionFeeNumerator) /\r\n            _transactionFeeDenominator;\r\n        return pricePerAccess + protocolFee;\r\n    }\r\n\r\n    /// @notice Returns the licensee facing gross price to license the\r\n    /// the asset. This price is calculated using `license price` +\r\n    ///`license price` * `transaction fee`.\r\n    function grossPricePerLicense(address contractAddress_)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IPFA asset = IPFA(contractAddress_);\r\n        uint256 pricePerLicense = asset.pricePerLicense();\r\n        // Note that this contract is implemented with Solidity\r\n        // version >=0.8.0 which has built-in overflow checks,\r\n        // therefore using SafeMath is not required.\r\n        uint256 protocolFee = (pricePerLicense * _transactionFeeNumerator) /\r\n            _transactionFeeDenominator;\r\n        return pricePerLicense + protocolFee;\r\n    }\r\n\r\n    /// @notice Instantiates the creator contract and calls the\r\n    /// access method. If successful, this transaction produces a\r\n    /// grant awarded to the sender with a corresponding TTL.\r\n    function access(address contractAddress_, uint256 tokenId_)\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        IPFA asset = IPFA(contractAddress_);\r\n        uint256 grossPrice = grossPricePerAccess(contractAddress_, tokenId_);\r\n        require(msg.value == grossPrice, \"SHARE011\");\r\n        asset.access{value: asset.pricePerAccess()}(tokenId_, msg.sender);\r\n        _grantTimestamps[contractAddress_][msg.sender] = block.timestamp;\r\n        emit Grant(msg.sender, contractAddress_, tokenId_);\r\n        _transactionCount++;\r\n    }\r\n\r\n    /// @notice If called with a `licenseeContract_` contract which\r\n    /// has proof of inclusion of the supplied `licensorContract_`\r\n    /// PFA address in its payout distribution table, records a\r\n    /// license timestamp on chain which is read by decentralized\r\n    /// distribution network (DDN) microservices to decrypt and serve\r\n    /// the associated content for the tokenURI to users who have\r\n    /// paid to access the licensee contract.\r\n    function license(address licensorContract_, address licenseeContract_)\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        require(msg.sender == Ownable(licenseeContract_).owner(), \"SHARE016\");\r\n        uint256 grossPrice = grossPricePerLicense(licensorContract_);\r\n        require(msg.value == grossPrice, \"SHARE024\");\r\n        IPFA asset = IPFA(licensorContract_);\r\n        asset.license{value: asset.pricePerLicense()}(licenseeContract_);\r\n        _licenseTimestamps[licensorContract_][licenseeContract_] = block\r\n            .timestamp;\r\n        emit License(licensorContract_, licenseeContract_);\r\n    }\r\n\r\n    /// @notice Returns the timestamp in seconds of the award of a\r\n    /// grant recorded on chain for the access of the content\r\n    /// associated with the supplied PFA and recipient address.\r\n    function grantTimestamp(address contractAddress_, address recipient_)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _grantTimestamps[contractAddress_][recipient_];\r\n    }\r\n\r\n    /// @notice Returns the timestamp in seconds of the award of a\r\n    /// grant recorded on chain for the licensing of the content\r\n    /// associated with the supplied PFA and recipient address.\r\n    function licenseTimestamp(\r\n        address licensorAddress_,\r\n        address licenseeAddress_\r\n    ) public view returns (uint256) {\r\n        return _licenseTimestamps[licensorAddress_][licenseeAddress_];\r\n    }\r\n\r\n    /// @notice Withdraws contract balance.\r\n    function withdraw() public nonReentrant onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Enables or disables protocol source code verification\r\n    /// for contracts interacting with the protocol.\r\n    function setCodeVerificationEnabled(bool enable)\r\n        public\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        _codeVerificationEnabled = enable;\r\n    }\r\n\r\n    /// @notice Adds the keccak256 hash of the runtime bytecode of\r\n    /// an approved source code build for a SHARE protocol\r\n    /// interoperable contract. If source code verification is turned\r\n    /// on, the system will revert upon attempt to send ether to\r\n    /// a contract built from non-approved source code.\r\n    function addApprovedBuild(\r\n        bytes32 codeHash,\r\n        CodeVerification.BuildType buildType_,\r\n        string memory compilerBinaryTarget_,\r\n        string memory compilerVersion_,\r\n        address authorAddress_\r\n    ) public onlyOwner nonReentrant {\r\n        require(\r\n            (buildType_ == CodeVerification.BuildType.WALLET ||\r\n                buildType_ == CodeVerification.BuildType.SPLIT ||\r\n                buildType_ == CodeVerification.BuildType.PFA_UNIT ||\r\n                buildType_ == CodeVerification.BuildType.PFA_COLLECTION),\r\n            \"SHARE017\"\r\n        );\r\n        _approvedHashes[codeHash] = ApprovedBuild(\r\n            buildType_,\r\n            compilerBinaryTarget_,\r\n            compilerVersion_,\r\n            authorAddress_,\r\n            true\r\n        );\r\n    }\r\n\r\n    /// @notice Returns true if the keccak256 hash of the runtime\r\n    /// bytecode stored at the given `address_` corresponds to a build\r\n    /// of approved source code for SHARE protocol interoperability.\r\n    function isApprovedBuild(\r\n        address address_,\r\n        CodeVerification.BuildType buildType_\r\n    ) public view returns (bool) {\r\n        if (!_codeVerificationEnabled) {\r\n            return true;\r\n        } else {\r\n            bytes32 codeHash = CodeVerification.readCodeHash(address_);\r\n            if (_approvedHashes[codeHash].exists) {\r\n                return _approvedHashes[codeHash].buildType == buildType_;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns true if the supplied keccak256\r\n    /// hash corresponds to a build of approved source code for SHARE\r\n    /// protocol interoperability.\r\n    function isApprovedBuildHash(\r\n        bytes32 hash,\r\n        CodeVerification.BuildType buildType_\r\n    ) public view returns (bool) {\r\n        if (!_codeVerificationEnabled) {\r\n            return true;\r\n        } else {\r\n            if (_approvedHashes[hash].exists) {\r\n                return _approvedHashes[hash].buildType == buildType_;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"licensor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"licensee\",\"type\":\"address\"}],\"name\":\"License\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_codeVerificationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"access\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum CodeVerification.BuildType\",\"name\":\"buildType_\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"compilerBinaryTarget_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"compilerVersion_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"authorAddress_\",\"type\":\"address\"}],\"name\":\"addApprovedBuild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"grantTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"grossPricePerAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"grossPricePerLicense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"enum CodeVerification.BuildType\",\"name\":\"buildType_\",\"type\":\"uint8\"}],\"name\":\"isApprovedBuild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"enum CodeVerification.BuildType\",\"name\":\"buildType_\",\"type\":\"uint8\"}],\"name\":\"isApprovedBuildHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licensorContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseeContract_\",\"type\":\"address\"}],\"name\":\"license\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licensorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseeAddress_\",\"type\":\"address\"}],\"name\":\"licenseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCodeVerificationEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator_\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SHARE", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "CodeVerification:9a941989b37f44fb5a6ea22bc18e13b506880e49", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d4bb0c35688589da70d137d2d37a3e5ac54a25f140fc2db1230b00aa1282c93"}