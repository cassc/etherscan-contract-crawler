{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BoredBoxExtras.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { IBoredBoxExtras_Events, IBoredBoxExtras_Functions } from \\\"./interfaces/IBoredBoxExtras.sol\\\";\\n\\nimport { CommonRootERC721 } from \\\"@boredbox-solidity-contracts/common-root-erc721/contracts/CommonRootERC721.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Distribute bonuses to BoredBoxNFT owners\\n/// @author S0AndS0\\n/// @custom:link https://boredbox.io/\\ncontract BoredBoxExtras is ReentrancyGuard, CommonRootERC721, IBoredBoxExtras_Events, IBoredBoxExtras_Functions {\\n    /// @dev See {IBoredBoxExtras_Variables-owner}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    address public owner;\\n\\n    /// @dev See {IBoredBoxExtras_Variables-authorized}\\n    /// @dev See {BoredBoxExtras-onlyAuthorized}\\n    mapping(address => bool) public authorized;\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191            Storage          \u2191 */\\n    /* \u2193  Modifiers and constructor  \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// Require message sender to be instance owner\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// Require message sender to be instance owner or mapped as `true` within `authorized` data-structure\\n    modifier onlyAuthorized() {\\n        require(owner == msg.sender || authorized[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    /// Initialize with basic NFT information and ownership\\n    ///\\n    /// @param owner_ - Instantly set instant owner, defaults to `msg.sender` if `address(0)` is passed\\n    /// @param name_ - Set `cr721__data.name` value\\n    /// @param symbol_ - Set `cr721__data.symbol` value\\n    /// @dev See {CommonRootERC721-newIds}\\n    ///\\n    /// @custom:examples\\n    /// ## Truffle\\n    ///\\n    /// ```javascript\\n    /// const BoredBoxExtras = artifacts.require('BoredBoxExtras');\\n    ///\\n    /// const tx = { from: accounts[0] };\\n    ///\\n    /// const parameters = {\\n    ///   owner: '0x0...6ORED6OX',\\n    ///   name: \\\"BoredBoxExtras\\\",\\n    ///   symbol: \\\"BBE\\\",\\n    /// };\\n    ///\\n    /// deployer.deploy(BoredBoxExtras, ...Object.values(parameters), tx);\\n    /// ```\\n    constructor(\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_\\n    ) CommonRootERC721(name_, symbol_) {\\n        owner = owner_ == address(0) ? msg.sender : owner_;\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191  Modifiers and constructor  \u2191 */\\n    /* \u2193      mutations external     \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// @dev See {ICommonRootERC721_Functions-mint}\\n    /// @dev See {BoredBoxExtras-onlyAuthorized}\\n    /// @dev See {ReentrancyGuard-nonReentrant}\\n    function mint(\\n        address to,\\n        uint256 branchId,\\n        bytes calldata data\\n    ) external payable virtual override onlyAuthorized nonReentrant {\\n        _safeMint(to, branchId, data);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-bulkMint}\\n    /// @dev See {BoredBoxExtras-onlyAuthorized}\\n    /// @dev See {ReentrancyGuard-nonReentrant}\\n    function bulkMint(\\n        address[] calldata recipients,\\n        uint256[] calldata branchIds,\\n        bytes calldata data\\n    ) external payable virtual onlyAuthorized nonReentrant {\\n        _bulkMint(recipients, branchIds, data);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-newIds}\\n    /// @dev See {BoredBoxExtras-onlyAuthorized}\\n    function newIds(string memory uri_root, uint256[] memory quantities) external payable virtual onlyAuthorized {\\n        _newIds(uri_root, quantities);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-graftRootURI}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function graftRootURI(uint256 branchId, string calldata uri_root) external payable virtual onlyOwner {\\n        _graftRootURI(branchId, uri_root);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-interjectRootURI}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function interjectRootURI(uint256 branchId, string calldata uri_root) external payable virtual onlyOwner {\\n        _interjectRootURI(branchId, uri_root);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-setTokenURI}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function setTokenURI(uint256 tokenId, string calldata uri) external payable virtual onlyOwner {\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Extras-setContractURI}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function setContractURI(string calldata uri_root, string calldata uri_path) external payable virtual onlyOwner {\\n        _setContractURI(uri_root, uri_path);\\n    }\\n\\n    /// @dev See {IBoredBoxArcade_Functions-transferOwnership}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function transferOwnership(address newOwner) external payable virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /// @dev See {IBoredBoxArcade_Functions-withdraw}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function withdraw(address payable to, uint256 amount) external payable virtual onlyOwner {\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @dev See {IBoredBoxArcade_Functions-setAuthorized}\\n    /// @dev See {BoredBoxExtras-onlyOwner}\\n    function setAuthorized(address key, bool value) external payable virtual onlyOwner {\\n        authorized[key] = value;\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191      mutations external     \u2191 */\\n    /* \u2193      internal mutations     \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// @dev See {BoredBoxExtras-transferOwnership}\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\n        address oldOwner = owner;\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191       internal mutations    \u2191 */\\n    /* \u2193       internal viewable     \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBoredBoxExtras.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n// prettier-ignore\\nimport {\\n    CR721_BranchData,\\n    CR721_ContractData,\\n    CR721_TokenData,\\n    ICommonRootERC721_Events,\\n    ICommonRootERC721_Extras,\\n    ICommonRootERC721_Functions,\\n    ICommonRootERC721_Inherits,\\n    ICommonRootERC721_Variables,\\n    ICommonRootERC721\\n} from \\\"@boredbox-solidity-contracts/common-root-erc721/contracts/interfaces/ICommonRootERC721.sol\\\";\\n\\n/* Events definitions */\\ninterface IBoredBoxExtras_Events {\\n    /// @dev See {Ownable-OwnershipTransferred}\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\\n/* Function definitions */\\ninterface IBoredBoxExtras_Functions is ICommonRootERC721_Extras {\\n    /// Overwrite instance owner\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { newOwner: '0x0...9042' };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.transferOwnership(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function transferOwnership(address newOwner) external payable;\\n\\n    /// Set full URI URL for `tokenId` without affecting branch data\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   to: '0x0...9023',\\n    ///   amount: await web3.eth.getBalance(instance.address),\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.withdraw(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function withdraw(address payable to, uint256 amount) external payable;\\n\\n    /// Set full URI URL for `tokenId` without affecting branch data\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   key: '0x0...9023',\\n    ///   value: true,\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.setAuthorized(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function setAuthorized(address key, bool value) external payable;\\n}\\n\\n/* Variable definitions */\\ninterface IBoredBoxExtras_Variables {\\n    /// Get instance owner\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// await instance.methods.owner().call();\\n    /// ```\\n    function owner() external view returns (address);\\n\\n    /// Get approval status for `account`\\n    ///\\n    /// @dev See {BoredBoxExtras-onlyAuthorized}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const response = await instance.methods.authorized().call();\\n    ///\\n    /// console.assert(typeof(response) == 'boolean');\\n    /// ```\\n    function authorized(address account) external view returns (bool approved);\\n}\\n\\n/* Inherited definitions */\\ninterface IBoredBoxExtras_Inherits is ICommonRootERC721_Events, ICommonRootERC721_Functions {\\n    /// @dev See {ICommonRootERC721_Events-Transfer}\\n    /// @dev See {ICommonRootERC721_Events-Approval}\\n    /// @dev See {ICommonRootERC721_Events-ApprovalForAll}\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191             Events          \u2191 */\\n    /* \u2193           Functions         \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /// @dev See {ICommonRootERC721_Functions-mint}\\n    /// @dev See {ICommonRootERC721_Functions-setApprovalForAll}\\n    /// @dev See {ICommonRootERC721_Functions-transferFrom}\\n    /// @dev See {ICommonRootERC721_Functions-safeTransferFrom}\\n    /// @dev See {ICommonRootERC721_Functions-safeTransferFrom}\\n    /// @dev See {ICommonRootERC721_Functions-safeBatchTransferFrom}\\n    /// @dev See {ICommonRootERC721_Functions-tokenURI}\\n    /// @dev See {ICommonRootERC721_Functions-getBranchData}\\n    /// @dev See {ICommonRootERC721_Functions-getAllBranches}\\n    /// @dev See {ICommonRootERC721_Functions-getAllTokens}\\n    /// @dev See {ICommonRootERC721_Functions-contractURI}\\n    /// @dev See {ICommonRootERC721_Functions-branchOf}\\n    /// @dev See {ICommonRootERC721_Functions-name}\\n    /// @dev See {ICommonRootERC721_Functions-symbol}\\n    /// @dev See {ICommonRootERC721_Functions-getApproved}\\n    /// @dev See {ICommonRootERC721_Functions-ownerOf}\\n    /// @dev See {ICommonRootERC721_Extras-bulkMint}\\n    /// @dev See {ICommonRootERC721_Extras-setContractURI}\\n    /// @dev See {ICommonRootERC721_Extras-newIds}\\n    /// @dev See {ICommonRootERC721_Extras-graftRootURI}\\n    /// @dev See {ICommonRootERC721_Extras-interjectRootURI}\\n    /// @dev See {ICommonRootERC721_Extras-setTokenURI}\\n}\\n\\n/// For external callers\\n/// @custom:examples\\n/// ## Web3 JS\\n///\\n/// ```javascript\\n/// const Web3 = require('web3');\\n/// const web3 = new Web3('http://localhost:8545');\\n///\\n/// const { abi } = require('./build/contracts/IBoredBoxExtras.json');\\n/// const address = '0xDEADBEEF';\\n///\\n/// const instance = new web3.eth.contract(abi, address);\\n/// ```\\ninterface IBoredBoxExtras is\\n    IBoredBoxExtras_Events,\\n    IBoredBoxExtras_Functions,\\n    IBoredBoxExtras_Inherits,\\n    IBoredBoxExtras_Variables,\\n    ICommonRootERC721_Variables\\n{\\n    /// @dev See {ICommonRootERC721_Variables-balanceOf}\\n    /// @dev See {ICommonRootERC721_Variables-cr721__branches}\\n    /// @dev See {ICommonRootERC721_Variables-cr721__branches}\\n    /// @dev See {ICommonRootERC721_Variables-cr721__tokens}\\n    /// @dev See {ICommonRootERC721_Variables-cr721__branches__last_id}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/common-root-erc721/contracts/interfaces/ICommonRootERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// vim: spell\\npragma solidity 0.8.11;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n/// @custom:property quantity - Current amount remaining\\n/// @custom:property id_first - Pointer to `tokenId`\\n/// @custom:property id_last - Pointer to `tokenId`\\n/// @custom:property uri_root - Pointer to IPFS hash\\nstruct CR721_BranchData {\\n    uint256 quantity;\\n    uint256 id_first;\\n    uint256 id_last;\\n    string uri_root;\\n}\\n\\n/// @custom:property owner - Current token owner\\n/// @custom:property approved - Optional account approved to transfer\\n/// @custom:property branch - ID pointing into `cr721__branches` mapping\\n/// @custom:property uri - Optional URI for token defaults to parsed `CR721_BranchData.uri_root`\\nstruct CR721_TokenData {\\n    address owner;\\n    address approved;\\n    uint256 branch;\\n    string uri;\\n}\\n\\n/// @custom:property name - List on sites such as Open Sea\\n/// @custom:property symbol - List on sites such as Open Sea\\n/// @custom:property uri_root - Pointer to IPFS hash\\n/// @custom:property uri_path - Path and name and extension of file\\nstruct CR721_ContractData {\\n    string name;\\n    string symbol;\\n    string uri_root;\\n    string uri_path;\\n}\\n\\n/* Events definitions */\\ninterface ICommonRootERC721_Events {\\n    /// @dev See {IERC721-Transfer}\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @dev See {IERC721-Approval}\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @dev See {IERC721-ApprovalForAll}\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\\n/* Function definitions */\\ninterface ICommonRootERC721_Functions {\\n    /// Mint next available tokenId for given `branchId`\\n    /// @param to Recipient that will own an new token\\n    /// @param branchId Series to attempt to mint a token from\\n    /// @param data Additional data that may be used to validate request\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   to: `0x0...9001`,\\n    ///   branchId: 1,\\n    ///   data: '0x0',\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...42' };\\n    ///\\n    /// await instance.methods.mint(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function mint(\\n        address to,\\n        uint256 branchId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @dev See {IERC721-setApprovalForAll}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   operator: '0x0...9002',\\n    ///   approved: true,\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...9001' };\\n    ///\\n    /// await instance.methods.setApprovalForAll(...Object.values(parameters)).call(tx);\\n    /// ```\\n    function setApprovalForAll(address operator, bool approved) external payable;\\n\\n    /// @dev See {IERC721-transferFrom}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   from: '0x0...9001',\\n    ///   to: '0x0...9003',\\n    ///   tokenId: 42,\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...9002' };\\n    ///\\n    /// await instance.methods.transferFrom(...Object.values(parameters)).call(tx);\\n    /// ```\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /// @dev See {IERC721-safeTransferFrom}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   from: '0x0...9001',\\n    ///   to: '0x0...9003',\\n    ///   tokenId: 42,\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...9002' };\\n    ///\\n    /// await instance.methods.safeTransferFrom(...Object.values(parameters)).call(tx);\\n    /// ```\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /// @dev See {IERC721-safeTransferFrom}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   from: '0x0...9001',\\n    ///   to: '0x0...9003',\\n    ///   tokenId: 42,\\n    ///   data: '0x0',\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...9002' };\\n    ///\\n    /// await instance.methods.safeTransferFrom(...Object.values(parameters)).call(tx);\\n    /// ```\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// @dev See {IERC721-safeTransferFrom}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   from: '0x0...9001',\\n    ///   to: '0x0...9003',\\n    ///   tokenIds: [42, 1001, 2096],\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...9002' };\\n    ///\\n    /// await instance.methods.safeBatchTransferFrom(...Object.values(parameters)).call(tx);\\n    /// ```\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata tokenIds\\n    ) external payable;\\n\\n    /// Get full IPFS URL for `tokenId`\\n    ///\\n    /// @dev See {IERC721Metadata-tokenURI}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 42 };\\n    ///\\n    /// await instance.methods.tokenURI(...Object.values(parameters)).call();\\n    /// ```\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /// Get all data about specific `branchId`\\n    ///\\n    /// @dev See https://github.com/ethereum/solidity/issues/6337\\n    /// @dev See https://github.com/ethereum/solidity/issues/11826\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 42 };\\n    ///\\n    /// await instance.methods.getBranchData(...Object.values(parameters)).call();\\n    /// ```\\n    function getBranchData(uint256 branchId) external view returns (CR721_BranchData memory);\\n\\n    /// Get full IPFS URL for instance metadata\\n    ///\\n    /// @dev See https://docs.opensea.io/v2.0/docs/contract-level-metadata\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// await instance.methods.contractURI().call();\\n    /// ```\\n    function contractURI() external view returns (string memory);\\n\\n    /// Get `branchId` for `tokenId`\\n    ///\\n    /// @dev See {IERC721Metadata-tokenURI}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 42 };\\n    ///\\n    /// await instance.methods.branchOf(...Object.values(parameters)).call();\\n    /// ```\\n    function branchOf(uint256 tokenId) external view returns (uint256 branchId);\\n\\n    /// Get instance name\\n    ///\\n    /// @dev See {IERC721Metadata-name}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// await instance.methods.name().call();\\n    /// ```\\n    function name() external view returns (string memory);\\n\\n    /// Get instance symbol\\n    ///\\n    /// @dev See {IERC721Metadata-symbol}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// await instance.methods.symbol().call();\\n    /// ```\\n    function symbol() external view returns (string memory);\\n\\n    /// Get address of approved operator for `tokenId`\\n    ///\\n    /// @dev See {IERC721-getApproved}\\n    /// @dev See {ERC721-_tokenApprovals}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 42 };\\n    ///\\n    /// await instance.methods.getApproved().call();\\n    /// ```\\n    function getApproved(uint256) external view returns (address);\\n\\n    /// Get owner of `tokenId`\\n    ///\\n    /// @dev See {IERC721-ownerOf}\\n    /// @dev See {ERC721-_owners}\\n    /// @dev See {CommonRootERC721-cr721__tokens}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 1 };\\n    ///\\n    /// await instance.methods.ownerOf().call();\\n    ///\\n    /// console.assert(typeof(response) == 'boolean');\\n    /// ```\\n    function ownerOf(uint256) external view returns (address);\\n}\\n\\n/* Extra function definitions */\\ninterface ICommonRootERC721_Extras {\\n    /// Mint to list of recipients a set of IDs and amounts\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   recipients: [\\n    ///     `0x0...9002`,\\n    ///     `0x0...9003`,\\n    ///     `0x0...9004`,\\n    ///   ],\\n    ///   branchIds: Array(5).fill().map((_, i) => i + 1),\\n    ///   data: '0x0';\\n    /// };\\n    ///\\n    /// const tx = { from: '0x0...42' };\\n    ///\\n    /// await instance.methods.bulkMint(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function bulkMint(\\n        address[] calldata recipients,\\n        uint256[] calldata branchIds,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /// Set instance URI root and path\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   uri_root: '0xFEEDC0DE',\\n    ///   uri_path: '/CommonRootERC721.json',\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.setContractURI(...Object.values(parameters)).send(tx);\\n    ///\\n    /// {\\n    ///   const expected = `ipfs://${parameters.uri_root}${parameters.uri_path}`;\\n    ///   const got = await instance.methods.contractURI().call();\\n    ///\\n    ///   console.assert(got == expected);\\n    /// }\\n    /// ```\\n    function setContractURI(string calldata uri_root, string calldata uri_path) external payable;\\n\\n    /// Update instance with ranges of token IDs based on listed `quantities`\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   uri_root: '0x8BADF00D',\\n    ///   quantities: Array(5).fill(1000),\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.newIds(...Object.values(parameters)).send(tx);\\n    /// ```\\n    function newIds(string memory uri_root, uint256[] memory quantities) external payable;\\n\\n    /// Insert new URI root without affecting roots before or after `branchId`\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   branchId: 4,\\n    ///   uri_root: '0xCAFEB0BA',\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.graftRootURI(...Object.values(parameters)).send(tx);\\n    ///\\n    /// const branch__before = await instance.methods.cr721__branches(parameters.branchId - 1).call();\\n    /// const branch__after = await instance.methods.cr721__branches(parameters.branchId + 1).call();\\n    ///\\n    /// console.assert(branch__before.uri_root == branch__after.uri_root);\\n    /// ```\\n    function graftRootURI(uint256 branchId, string calldata uri_root) external payable;\\n\\n    /// Insert new URI root and possibly affect roots after `branchId`\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   branchId: 2,\\n    ///   uri_root: '0xDEADBEEF',\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.interjectRootURI(...Object.values(parameters)).send(tx);\\n    ///\\n    /// const branch__before = await instance.methods.cr721__branches(parameters.branchId - 1).call();\\n    /// const branch__after = await instance.methods.cr721__branches(parameters.branchId + 1).call();\\n    ///\\n    /// console.assert(branch__before.uri_root != branch__after.uri_root);\\n    /// ```\\n    function interjectRootURI(uint256 branchId, string calldata uri_root) external payable;\\n\\n    /// Set full URI URL for `tokenId` without affecting branch data\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const tokenId = 42;\\n    ///\\n    /// const parameters = {\\n    ///   tokenId,\\n    ///   uri: `ipfs://0xD0D0CACA/${tokenId}.json`,\\n    /// };\\n    ///\\n    /// const tx = { from: await instance.methods.owner().call() };\\n    ///\\n    /// await instance.methods.setTokenURI(...Object.values(parameters)).send(tx);\\n    ///\\n    /// const branch__before = await instance.methods.cr721__branches(parameters.branchId - 1).call();\\n    /// const branch__after = await instance.methods.cr721__branches(parameters.branchId + 1).call();\\n    ///\\n    /// console.assert(branch__before.uri_root != branch__after.uri_root);\\n    /// ```\\n    function setTokenURI(uint256 tokenId, string calldata uri) external payable;\\n}\\n\\n/* Variable definitions */\\ninterface ICommonRootERC721_Variables {\\n    /// Get number of cr721__tokens owned by `account`\\n    /// @dev See {IERC721-balanceOf}\\n    /// @dev See {ERC721-_balances}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { account: '0x0...9001' };\\n    ///\\n    /// const response = await instance.methods.balanceOf(...Object.values(parameters)).call();\\n    ///\\n    /// console.assert(typeof(response) == 'number');\\n    /// ```\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /// Get approval status of `operator` to act on behalf of `account`\\n    /// @dev See {IERC721-isApprovedForAll}.\\n    /// @dev See {ERC721-isApprovedForAll}.\\n    /// @dev See {ERC721-_operatorApprovals}.\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = {\\n    ///   owner: '0x0...9001',\\n    ///   operator: '0x0...x8BADF00D',\\n    /// };\\n    ///\\n    /// const response = await instance.methods.isApprovedForAll(...Object.values(parameters)).call();\\n    ///\\n    /// console.assert(typeof(response) == 'boolean');\\n    /// ```\\n    function isApprovedForAll(address account, address operator) external view returns (bool approved);\\n\\n    /// Map `branchId` to `CR721_BranchData`\\n    /// @dev Note index starts at one!\\n    /// @dev See {ICommonRootERC721_Functions-getBranchData}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { branchId: 1 };\\n    ///\\n    /// const response = await instance.methods.isApprovedForAll(...Object.values(parameters)).call();\\n    /// ```\\n    function cr721__branches(uint256 branchId)\\n        external\\n        view\\n        returns (\\n            uint256 quantity,\\n            uint256 id_first,\\n            uint256 id_last,\\n            string memory uri_root\\n        );\\n\\n    /// Map `tokenId` to `CR721_TokenData`\\n    /// @dev Note index starts at one!\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const parameters = { tokenId: 1 };\\n    ///\\n    /// await instance.methods.cr721__tokens(...Object.values(parameters)).call();\\n    /// ```\\n    function cr721__tokens(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address approved,\\n            uint256 branch,\\n            string memory uri\\n        );\\n\\n    /// Get last set index for `cr721__branches` mapping\\n    ///\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const response = await instance.methods.cr721__branches__last_id().call();\\n    ///\\n    /// console.assert(typeof(response) == 'number');\\n    /// ```\\n    function cr721__branches__last_id() external view returns (uint256 branchId);\\n\\n    ///\\n    /// @dev See {ICommonRootERC721_Functions-contractURI}\\n    /// @custom:examples\\n    /// ## Web3 JS\\n    ///\\n    /// ```javascript\\n    /// const response = await instance.methods.cr721__data().call();\\n    /// ```\\n    function cr721__data()\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            string memory uri_root,\\n            string memory uri_path\\n        );\\n}\\n\\n/* Inherited definitions */\\ninterface ICommonRootERC721_Inherits {\\n\\n}\\n\\n/// For external callers\\n/// @custom:examples\\n/// ## Web3 JS\\n///\\n/// ```javascript\\n/// const Web3 = require('web3');\\n/// const web3 = new Web3('http://localhost:8545');\\n///\\n/// const { abi } = require('./build/contracts/ICommonRootERC721.json');\\n/// const address = '0xdeadbeef';\\n///\\n/// const instance = new web3.eth.contract(abi, address);\\n/// ```\\ninterface ICommonRootERC721 is ICommonRootERC721_Inherits, ICommonRootERC721_Variables, ICommonRootERC721_Functions {\\n\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/common-root-erc721/contracts/CommonRootERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// vim: spell\\npragma solidity 0.8.11;\\n\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n// prettier-ignore\\nimport {\\n    CR721_BranchData,\\n    CR721_ContractData,\\n    CR721_TokenData,\\n    ICommonRootERC721_Events,\\n    ICommonRootERC721_Functions\\n} from \\\"./interfaces/ICommonRootERC721.sol\\\";\\n\\n/// @title Common URI root for Sets/Series of tokens\\n/// @author S0AndS0\\n/// @custom:link https://boredbox.io/\\ncontract CommonRootERC721 is ERC165, ICommonRootERC721_Events, ICommonRootERC721_Functions {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    /// @dev See {ICommonRootERC721_Variables-balanceOf}\\n    mapping(address => uint256) public balanceOf;\\n\\n    /// @dev See {ICommonRootERC721_Variables-isApprovedForAll}\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /// @dev See {ICommonRootERC721_Variables-cr721__branches}\\n    mapping(uint256 => CR721_BranchData) public cr721__branches;\\n\\n    /// @dev See {ICommonRootERC721_Variables-cr721__tokens}\\n    mapping(uint256 => CR721_TokenData) public cr721__tokens;\\n\\n    /// @dev See {ICommonRootERC721_Variables-cr721__branches__last_id}\\n    uint256 public cr721__branches__last_id;\\n\\n    /// @dev See {ICommonRootERC721_Variables-cr721__data}\\n    CR721_ContractData public cr721__data;\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191            Storage          \u2191 */\\n    /* \u2193  Modifiers and constructor  \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// Require message spender to be token owner or within `isApprovedForAll` data-structure\\n    modifier onlyApprovedOrOwner(address sender, uint256 tokenId) {\\n        require(_isApprovedOrOwner(sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _;\\n    }\\n\\n    /// Initialize with basic NFT information\\n    ///\\n    /// @param name_ - Set `cr721__data.name` value\\n    /// @param symbol_ - Set `cr721__data.symbol` value\\n    /// @dev See {CommonRootERC721-newIds}\\n    ///\\n    /// @custom:examples\\n    /// ## Truffle\\n    ///\\n    /// ```javascript\\n    /// const BoredBoxExtras = artifacts.require('BoredBoxExtras');\\n    ///\\n    /// const tx = { from: accounts[0] };\\n    ///\\n    /// const parameters = {\\n    ///   name: \\\"BoredBoxExtras\\\",\\n    ///   symbol: \\\"BBE\\\",\\n    /// };\\n    ///\\n    /// deployer.deploy(BoredBoxExtras, ...Object.values(parameters), tx);\\n    /// ```\\n    constructor(\\n        string memory name_,\\n        string memory symbol_\\n    ) {\\n        require(bytes(name_).length > 0, \\\"No name\\\");\\n        require(bytes(symbol_).length > 0, \\\"No symbol\\\");\\n\\n        cr721__data.name = name_;\\n        cr721__data.symbol = symbol_;\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191  Modifiers and constructor  \u2191 */\\n    /* \u2193      mutations external     \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// @dev See {ICommonRootERC721_Functions-mint}\\n    function mint(\\n        address to,\\n        uint256 branchId,\\n        bytes calldata data\\n    ) external payable virtual {\\n        _safeMint(to, branchId, data);\\n    }\\n\\n    /// @dev See {IERC721-approve}\\n    function approve(address to, uint256 tokenId) external virtual {\\n        address tokenOwner = cr721__tokens[tokenId].owner;\\n        require(to != tokenOwner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == tokenOwner || isApprovedForAll[tokenOwner][msg.sender],\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /// @dev See {IERC721-setApprovalForAll}\\n    function setApprovalForAll(address operator, bool approved) external payable virtual {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @dev See {IERC721-transferFrom}\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable virtual {\\n        _transfer(msg.sender, from, to, tokenId);\\n    }\\n\\n    /// @dev See {IERC721-safeTransferFrom}\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable virtual {\\n        _safeTransfer(msg.sender, from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @dev See {IERC721-safeTransferFrom}\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external payable virtual {\\n        _safeTransfer(msg.sender, from, to, tokenId, data);\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-safeBatchTransferFrom}\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata tokenIds\\n    ) external payable virtual {\\n        _safeBatchTransferFrom(msg.sender, from, to, tokenIds, \\\"\\\");\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191      mutations external     \u2191 */\\n    /* \u2193            public           \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191            public           \u2191 */\\n    /* \u2193       internal mutations    \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// @dev See {CommonRootERC721-mint}\\n    function _safeMint(\\n        address to,\\n        uint256 branchId,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(branchId <= cr721__branches__last_id, \\\"ID not available yet\\\");\\n\\n        CR721_BranchData storage branch = cr721__branches[branchId];\\n        require(branch.quantity > 0, \\\"Branch quantity exhausted\\\");\\n\\n        uint256 tokenId = (branch.id_last + 1) - branch.quantity;\\n        CR721_TokenData storage token = cr721__tokens[tokenId];\\n        require(token.owner == address(0), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        ++balanceOf[to];\\n\\n        token.owner = to;\\n        token.branch = branchId;\\n\\n        --branch.quantity;\\n\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /// @dev See {CommonRootERC721-bulkMint}\\n    function _bulkMint(\\n        address[] calldata recipients,\\n        uint256[] calldata branchIds,\\n        bytes calldata data\\n    ) internal virtual {\\n        uint256 recipients_length = recipients.length;\\n        require(recipients_length > 0, \\\"No recipients\\\");\\n\\n        uint256 branchIds_length = branchIds.length;\\n        require(branchIds_length > 0, \\\"No branchIds\\\");\\n\\n        for (uint256 index_recipients; index_recipients < recipients_length; ) {\\n            for (uint256 index_branchIds; index_branchIds < branchIds_length; ) {\\n                _safeMint(recipients[index_recipients], branchIds[index_branchIds], data);\\n\\n                unchecked {\\n                    ++index_branchIds;\\n                }\\n            }\\n\\n            unchecked {\\n                ++index_recipients;\\n            }\\n        }\\n    }\\n\\n    /// @dev See {CommonRootERC721-transferFrom}\\n    /// @dev See {CommonRootERC721-_safeTransfer}\\n    function _transfer(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual onlyApprovedOrOwner(sender, tokenId) {\\n        CR721_TokenData storage token = cr721__tokens[tokenId];\\n        require(token.owner == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        /**\\n         * Mostly safe because\\n         *  - token.owner == from\\n         *  - compiler _should_ protect from underflow\\n         */\\n        --balanceOf[from];\\n        unchecked {\\n            ++balanceOf[to];\\n        }\\n\\n        token.owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_isApprovedOrOwner}\\n    /// @dev See {CommonRootERC721-onlyApprovedOrOwner}\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        CR721_TokenData memory token = cr721__tokens[tokenId];\\n        require(token.owner != address(0), \\\"ERC721: operator query for nonexistent token\\\");\\n        return (spender == token.owner || isApprovedForAll[token.owner][spender] || token.approved == spender);\\n    }\\n\\n    /// @dev See {ERC721-_safeTransfer}\\n    /// @dev See {CommonRootERC721-safeTransferFrom}\\n    /// @dev See {CommonRootERC721-_safeBatchTransferFrom}\\n    function _safeTransfer(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual onlyApprovedOrOwner(sender, tokenId) {\\n        _transfer(sender, from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /// @dev See {CommonRootERC721-safeBatchTransferFrom}\\n    function _safeBatchTransferFrom(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata tokenIds,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 length = tokenIds.length;\\n        require(length > 0, \\\"No token IDs provided\\\");\\n        require(length <= balanceOf[from], \\\"Insufficient balance\\\");\\n        for (uint256 i; i < length; ) {\\n            _safeTransfer(sender, from, to, tokenIds[i], data);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev See {ERC721-_approve}\\n    /// @dev See {CommonRootERC721-approve}\\n    /// @dev See {CommonRootERC721-_transfer}\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        CR721_TokenData storage token = cr721__tokens[tokenId];\\n        token.approved = to;\\n        emit Approval(token.owner, to, tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_setApprovalForAll}\\n    /// @dev See {CommonRootERC721-setApprovalForAll}\\n    function _setApprovalForAll(\\n        address tokenOwner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(tokenOwner != operator, \\\"ERC721: approve to caller\\\");\\n        isApprovedForAll[tokenOwner][operator] = approved;\\n        emit ApprovalForAll(tokenOwner, operator, approved);\\n    }\\n\\n    /// @dev See {ERC721-_checkOnERC721Received}\\n    /// @dev See {CommonRootERC721-_safeTransfer}\\n    /// @dev See {CommonRootERC721-_safeMint}\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @dev See {ERC721-_beforeTokenTransfer}\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /// @dev See {ERC721-_afterTokenTransfer}\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /// @dev See {CommonRootERC721-newIds}\\n    function _newIds(string memory uri_root, uint256[] memory quantities) internal virtual {\\n        uint256 length = quantities.length;\\n        require(length > 0, \\\"No quantities\\\");\\n\\n        uint256 branchId = cr721__branches__last_id;\\n        uint256 quantity = quantities[0];\\n\\n        CR721_BranchData memory data = cr721__branches[branchId];\\n        data.quantity = quantity;\\n        data.id_first = data.id_last + 1;\\n        data.id_last += quantity;\\n        data.uri_root = uri_root;\\n\\n        unchecked {\\n            ++branchId;\\n        }\\n        cr721__branches[branchId] = data;\\n\\n        delete data.uri_root;\\n        for (uint256 i = 1; i < length; ) {\\n            quantity = quantities[i];\\n\\n            data.quantity = quantity;\\n            data.id_first = data.id_last + 1;\\n            data.id_last += quantity;\\n\\n            unchecked {\\n                ++i;\\n                ++branchId;\\n            }\\n\\n            cr721__branches[branchId] = data;\\n        }\\n\\n        cr721__branches__last_id += length;\\n    }\\n\\n    /// @dev See {CommonRootERC721-graftRootURI}\\n    function _graftRootURI(uint256 branchId, string calldata uri_root) internal virtual {\\n        uint256 last__branchId = cr721__branches__last_id;\\n        require(branchId <= last__branchId && branchId > 0, \\\"ID out of range\\\");\\n        require(bytes(uri_root).length > 0, \\\"No URI root\\\");\\n\\n        uint256 next__branchId = branchId + 1;\\n        if (next__branchId <= last__branchId) {\\n            CR721_BranchData storage data = cr721__branches[next__branchId];\\n            if (bytes(data.uri_root).length == 0) {\\n                data.uri_root = _getRootURI(branchId);\\n            }\\n        }\\n\\n        cr721__branches[branchId].uri_root = uri_root;\\n    }\\n\\n    /// @dev See {CommonRootERC721-interjectRootURI}\\n    function _interjectRootURI(uint256 branchId, string calldata uri_root) internal virtual {\\n        require(branchId <= cr721__branches__last_id && branchId > 0, \\\"ID out of range\\\");\\n        require(bytes(uri_root).length > 0, \\\"No URI root\\\");\\n\\n        CR721_BranchData storage data = cr721__branches[branchId];\\n        require(bytes(data.uri_root).length == 0, \\\"URI already set\\\");\\n\\n        data.uri_root = uri_root;\\n    }\\n\\n    /// @dev See {CommonRootERC721-setTokenURI}\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal virtual {\\n        require(bytes(uri).length > 0, \\\"No URI\\\");\\n\\n        require(tokenId > 0 && tokenId <= cr721__branches[cr721__branches__last_id].id_last, \\\"ID out of range\\\");\\n\\n        CR721_TokenData storage token = cr721__tokens[tokenId];\\n        require(bytes(token.uri).length == 0, \\\"URI already set\\\");\\n\\n        token.uri = uri;\\n    }\\n\\n    function _setContractURI(string calldata uri_root, string calldata uri_path) internal virtual {\\n        cr721__data.uri_root = uri_root;\\n        cr721__data.uri_path = uri_path;\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191       internal mutations    \u2191 */\\n    /* \u2193       internal viewable     \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// Warning caller _should_ pre-check if `branchId` is in range\\n    /// @dev See {CommonRootERC721-tokenURI}\\n    /// @dev See {CommonRootERC721-_graftRootURI}\\n    function _getRootURI(uint256 branchId) internal view virtual returns (string memory) {\\n        string memory uri_root = cr721__branches[branchId].uri_root;\\n\\n        while (bytes(uri_root).length == 0) {\\n            uri_root = cr721__branches[--branchId].uri_root;\\n        }\\n\\n        return uri_root;\\n    }\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191       internal viewable     \u2191 */\\n    /* \u2193            private          \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n    /* \u2191            private          \u2191 */\\n    /* \u2193           viewable          \u2193 */\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// @dev See {ICommonRootERC721_Functions-branchOf}\\n    function branchOf(uint256 tokenId) external view virtual returns (uint256) {\\n        return cr721__tokens[tokenId].branch;\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-ownerOf}\\n    function ownerOf(uint256 tokenId) external view virtual returns (address) {\\n        return cr721__tokens[tokenId].owner;\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-getApproved}\\n    function getApproved(uint256 tokenId) external view virtual returns (address) {\\n        return cr721__tokens[tokenId].approved;\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-name}\\n    function name() external view virtual returns (string memory) {\\n        return cr721__data.name;\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-symbol}\\n    function symbol() external view virtual returns (string memory) {\\n        return cr721__data.symbol;\\n    }\\n\\n    /// Full IPFS URL for given token ID\\n    /// @dev See {ICommonRootERC721_Functions-tokenURI}\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory) {\\n        CR721_TokenData memory token = cr721__tokens[tokenId];\\n\\n        require(token.branch <= cr721__branches__last_id && token.branch > 0, \\\"ID out of range\\\");\\n\\n        if (bytes(token.uri).length > 0) {\\n            return token.uri;\\n        } else {\\n            return string(abi.encodePacked(\\\"ipfs://\\\", _getRootURI(token.branch), \\\"/\\\", tokenId.toString(), \\\".json\\\"));\\n        }\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-getBranchData}\\n    function getBranchData(uint256 branchId) external view virtual returns (CR721_BranchData memory) {\\n        require(branchId <= cr721__branches__last_id, \\\"ID out of bounds\\\");\\n        return cr721__branches[branchId];\\n    }\\n\\n    /// @dev See {ICommonRootERC721_Functions-contractURI}\\n    function contractURI() external view virtual returns (string memory) {\\n        string memory uri_root = cr721__data.uri_root;\\n        require(bytes(uri_root).length > 0, \\\"Contract URI root undefined\\\");\\n\\n        string memory uri_path = cr721__data.uri_path;\\n        require(bytes(uri_path).length > 0, \\\"Contract URI path undefined\\\");\\n\\n        return string(abi.encodePacked(\\\"ipfs://\\\", uri_root, uri_path));\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"branchOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"branchIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"bulkMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cr721__branches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_last\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cr721__branches__last_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cr721__data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_path\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cr721__tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"branch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"}],\"name\":\"getBranchData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_first\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_last\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"}],\"internalType\":\"struct CR721_BranchData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"}],\"name\":\"graftRootURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"}],\"name\":\"interjectRootURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"newIds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_path\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BoredBoxExtras", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000046814340a0b15ca90e5e7def92b9c5d3654a50e4000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e426f726564426f7845787472617300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034242450000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}