{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/AutomationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Games/Raffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\\\";\\n\\ninterface ICommissionsAddressRouter {\\n    function getAddress() external view returns (address);\\n}\\n\\ninterface ICommissionsRouter {\\n    function receiveFees(uint256, bytes32) external;\\n}\\n\\ncontract Raffle is AutomationCompatibleInterface, VRFV2WrapperConsumerBase {\\n    event TicketPurchase(\\n        address indexed player,\\n        uint256 amountOfTickets,\\n        uint256 totalPrice\\n    );\\n    event RoundFinished(address indexed winner, uint256 prize, uint256 endedAt);\\n    event RoundStart(\\n        uint256 indexed round,\\n        uint256 startedAt,\\n        uint256 duration,\\n        uint256 endsAt\\n    );\\n\\n    enum PlayerStatus {\\n        PENDING,\\n        WIN\\n    }\\n    enum GameStatus {\\n        IN_PROGRESS,\\n        PICKING_WINNER,\\n        FINISHED\\n    }\\n\\n    struct RaffleInfo {\\n        uint256 endTime;\\n        uint256 interval;\\n        uint256 round;\\n        uint256 ticketPrice;\\n        address winner;\\n        uint256 prizePool;\\n        GameStatus status;\\n        address lastRoundWinner;\\n        uint256 lastRoundPrizePool;\\n        uint256 playerCount;\\n        uint256 entryFees;\\n    }\\n    struct RaffleReadData {\\n        uint256 endTime;\\n        uint256 interval;\\n        uint256 round;\\n        uint256 ticketPrice;\\n        address winner;\\n        uint256 prizePool;\\n        string status;\\n        address lastRoundWinner;\\n        uint256 lastRoundPrizePool;\\n        uint256 entryFees;\\n        uint256 playerCount;\\n    }\\n    struct NextRoundInfo {\\n        uint256 interval;\\n        uint256 ticketPrice;\\n        uint256 entryFees;\\n    }\\n\\n    struct Game {\\n        uint256 round;\\n        uint256 tickets;\\n        uint256 buyAmount;\\n        PlayerStatus status;\\n        uint256 earned;\\n        uint256 updatedAt;\\n        uint256 roundEndTime;\\n    }\\n    struct GameReadData {\\n        Game game;\\n        bool roundEnded;\\n    }\\n    ICommissionsAddressRouter commissionsAddressRouter;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private round;\\n    address public admin;\\n    address constant linkAddress = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n    address constant vrfWrapperAddress =\\n        0x4e42f0adEB69203ef7AaA4B7c414e5b1331c14dc;\\n    IERC20 token;\\n\\n    uint256 public PRIZE_PERCENTAGE;\\n    uint256 public NEXT_ROUND_PRIZE_PERCENTAGE;\\n    uint256 public playerHistoryCount;\\n    uint32 constant callbackGasLimit = 2000000;\\n    uint32 constant numWords = 1;\\n    uint16 constant requestConfirmations = 32;\\n\\n    bool public paused;\\n    bool private awaitingRandomness;\\n    NextRoundInfo public nextRoundInfo;\\n    mapping(address => Game[]) players;\\n    mapping(uint256 => RaffleInfo) raffle;\\n    mapping(uint256 => address[]) public playersByRoundId;\\n    struct RandomStatus {\\n        bool fetched;\\n        uint randomIndex;\\n    }\\n    mapping(uint256 => RandomStatus) public randomStatusByRound;\\n    mapping(address => mapping(uint256 => bool)) public uniquePlayersByRound;\\n\\n    constructor(\\n        address _brin,\\n        address _commissionsAddressRouter\\n    ) payable VRFV2WrapperConsumerBase(linkAddress, vrfWrapperAddress) {\\n        token = IERC20(_brin);\\n        admin = msg.sender;\\n        raffle[round.current()] = RaffleInfo(\\n            block.timestamp + 6 hours,\\n            6 hours,\\n            0,\\n            10 ether,\\n            address(0),\\n            0,\\n            GameStatus.IN_PROGRESS,\\n            address(0),\\n            0,\\n            0,\\n            0.002 ether\\n        );\\n        commissionsAddressRouter = ICommissionsAddressRouter(\\n            _commissionsAddressRouter\\n        );\\n        nextRoundInfo = NextRoundInfo(6 hours, 10 ether, 0.002 ether);\\n\\n        PRIZE_PERCENTAGE = 90;\\n        NEXT_ROUND_PRIZE_PERCENTAGE = 90;\\n        playerHistoryCount = 50;\\n        emit RoundStart(0, block.timestamp, 6 hours, block.timestamp + 6 hours);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(admin == msg.sender, \\\"You are not the owner\\\");\\n        _;\\n    }\\n    modifier isActive() {\\n        require(\\n            block.timestamp < raffle[round.current()].endTime,\\n            \\\"You cannot buy tickets at this time\\\"\\n        );\\n        _;\\n    }\\n\\n    function pauseContract() external onlyOwner {\\n        paused = true;\\n    }\\n\\n    function unPauseContract() external onlyOwner {\\n        require(raffle[round.current()].endTime < block.timestamp);\\n        paused = false;\\n        resetLottery();\\n    }\\n\\n    function isPaused() public view returns (bool) {\\n        if (\\n            paused == true && raffle[round.current()].endTime < block.timestamp\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function setTicketPrice(uint256 _price) public onlyOwner {\\n        nextRoundInfo.ticketPrice = _price;\\n    }\\n\\n    //Set interval in seconds\\n    function setRoundInterval(uint256 _interval) public onlyOwner {\\n        nextRoundInfo.interval = _interval;\\n    }\\n\\n    function setEntryFees(uint256 fee) external onlyOwner {\\n        nextRoundInfo.entryFees = fee;\\n    }\\n\\n    function setPrizePercentage(uint256 _percentage) public onlyOwner {\\n        NEXT_ROUND_PRIZE_PERCENTAGE = _percentage;\\n    }\\n\\n    function getLastWinner() public view returns (address) {\\n        return raffle[round.current() - 1].winner;\\n    }\\n\\n    function setPlayerHistoryCount(uint256 count) public onlyOwner {\\n        require(count > 0 && count < 1000, \\\"count must be gt 0 and lt 1000\\\");\\n        playerHistoryCount = count;\\n    }\\n\\n    function checkIntegerETH(uint256 a) internal pure returns (bool) {\\n        return (a % 1 wei == 0);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata\\n    ) external view override returns (bool upkeepNeeded, bytes memory) {\\n        upkeepNeeded =\\n            (!isPaused() &&\\n                !awaitingRandomness &&\\n                block.timestamp >= raffle[round.current()].endTime) ||\\n            randomStatusByRound[round.current()].fetched;\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        if (randomStatusByRound[round.current()].fetched) {\\n            finalizeRound();\\n        } else if (\\n            !isPaused() &&\\n            !awaitingRandomness &&\\n            block.timestamp >= raffle[round.current()].endTime\\n        ) {\\n            pickWinner();\\n        }\\n    }\\n\\n    /**\\n    @dev Call this function to buy tickets, min=1 max=300, msg.value(matic fee) must be equal to entry fees\\n    @param ticketAmount number of tickets to buy\\n    */\\n    function buyTickets(uint256 ticketAmount) public payable isActive {\\n        require(ticketAmount <= 200, \\\"max 200 tickets at a time\\\");\\n        require(ticketAmount >= 1, \\\"ticket amount must be gte 1\\\");\\n        require(\\n            msg.value == raffle[round.current()].entryFees,\\n            \\\"fees required\\\"\\n        );\\n        require(checkIntegerETH(ticketAmount), \\\"Amount must be an integer\\\");\\n        require(!isPaused(), \\\"Game is paused\\\");\\n\\n        uint256 amountTokens = raffle[round.current()].ticketPrice *\\n            ticketAmount;\\n        token.transferFrom(msg.sender, address(this), amountTokens);\\n        raffle[round.current()].prizePool +=\\n            (amountTokens * PRIZE_PERCENTAGE) /\\n            100;\\n        uint256 i;\\n\\n        for (i = 0; i < ticketAmount; i++) {\\n            playersByRoundId[round.current()].push(msg.sender);\\n        }\\n        if (!uniquePlayersByRound[msg.sender][round.current()]) {\\n            raffle[round.current()].playerCount += 1;\\n            uniquePlayersByRound[msg.sender][round.current()] = true;\\n            players[msg.sender].push(\\n                Game(\\n                    round.current(),\\n                    ticketAmount,\\n                    amountTokens,\\n                    PlayerStatus.PENDING,\\n                    0,\\n                    block.timestamp,\\n                    raffle[round.current()].endTime\\n                )\\n            );\\n        } else {\\n            players[msg.sender][players[msg.sender].length - 1]\\n                .tickets += ticketAmount;\\n            players[msg.sender][players[msg.sender].length - 1]\\n                .buyAmount += amountTokens;\\n        }\\n\\n        emit TicketPurchase(msg.sender, ticketAmount, amountTokens);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function calculatePrize() internal view returns (uint) {\\n        return (getBalance() * PRIZE_PERCENTAGE) / 100;\\n    }\\n\\n    function pickWinner() internal {\\n        if (raffle[round.current()].playerCount == 0) {\\n            finishRound(address(0));\\n        } else if (raffle[round.current()].playerCount == 1) {\\n            address winner = playersByRoundId[round.current()][0];\\n            uint playerGamesLength = players[winner].length;\\n\\n            players[winner][playerGamesLength - 1].status = PlayerStatus.WIN;\\n            players[winner][playerGamesLength - 1].earned = getBalance();\\n            players[winner][playerGamesLength - 1].updatedAt = block.timestamp;\\n            token.transfer(winner, getBalance());\\n            finishRound(winner);\\n        } else {\\n            awaitingRandomness = true;\\n            uint256 requestId = requestRandomness(\\n                callbackGasLimit,\\n                requestConfirmations,\\n                numWords\\n            );\\n            raffle[round.current()].status = GameStatus.PICKING_WINNER;\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 randomIndex = randomWords[0] %\\n            playersByRoundId[round.current()].length;\\n        randomStatusByRound[round.current()] = RandomStatus(true, randomIndex);\\n    }\\n\\n    function finalizeRound() internal {\\n        uint randomIndex = randomStatusByRound[round.current()].randomIndex;\\n        address winner = playersByRoundId[round.current()][randomIndex];\\n\\n        uint playerGamesLength = players[winner].length;\\n        players[winner][playerGamesLength - 1].status = PlayerStatus.WIN;\\n        players[winner][playerGamesLength - 1].earned = calculatePrize();\\n        players[winner][playerGamesLength - 1].updatedAt = block.timestamp;\\n\\n        raffle[round.current()].status = GameStatus.FINISHED;\\n        raffle[round.current()].winner = winner;\\n        if (address(winner) != address(0)) {\\n            token.transfer(winner, calculatePrize());\\n            transferFees();\\n        }\\n\\n        finishRound(winner);\\n    }\\n\\n    function forceFinalizeRound() external onlyOwner {\\n        uint randomIndex;\\n        if (randomStatusByRound[round.current()].fetched) {\\n            randomIndex = randomStatusByRound[round.current()].randomIndex;\\n        } else {\\n            if (round.current() == 0) {\\n                randomIndex =\\n                    block.number %\\n                    playersByRoundId[round.current()].length;\\n            } else {\\n                randomIndex = randomStatusByRound[round.current() - 1]\\n                    .randomIndex;\\n            }\\n\\n            randomStatusByRound[round.current()].randomIndex = randomIndex;\\n        }\\n        address winner = playersByRoundId[round.current()][randomIndex];\\n\\n        uint playerGamessLength = players[winner].length;\\n        players[winner][playerGamessLength - 1].status = PlayerStatus.WIN;\\n        players[winner][playerGamessLength - 1].earned = calculatePrize();\\n        players[winner][playerGamessLength - 1].updatedAt = block.timestamp;\\n\\n        raffle[round.current()].status = GameStatus.FINISHED;\\n        raffle[round.current()].winner = winner;\\n        if (winner != address(0)) {\\n            token.transfer(winner, calculatePrize());\\n            transferFees();\\n        }\\n\\n        finishRound(winner);\\n    }\\n\\n    function forceResetLottery() external onlyOwner {\\n        require(\\n            block.timestamp >= raffle[round.current()].endTime,\\n            \\\"round has not finished\\\"\\n        );\\n        address lastRoundWinner = raffle[round.current()].winner;\\n        uint lastRoundPrizePool = raffle[round.current()].prizePool;\\n\\n        round.increment();\\n        raffle[round.current()] = RaffleInfo(\\n            block.timestamp + nextRoundInfo.interval,\\n            nextRoundInfo.interval,\\n            round.current(),\\n            nextRoundInfo.ticketPrice,\\n            address(0),\\n            0,\\n            GameStatus.IN_PROGRESS,\\n            lastRoundWinner,\\n            lastRoundPrizePool,\\n            0,\\n            nextRoundInfo.entryFees\\n        );\\n        PRIZE_PERCENTAGE = NEXT_ROUND_PRIZE_PERCENTAGE;\\n        RaffleInfo memory raffleInfo = raffle[round.current()];\\n        emit RoundStart(\\n            raffleInfo.round,\\n            block.timestamp,\\n            raffleInfo.interval,\\n            raffleInfo.endTime\\n        );\\n    }\\n\\n    function finishRound(address winner) internal {\\n        emit RoundFinished(\\n            winner,\\n            raffle[round.current()].prizePool,\\n            block.timestamp\\n        );\\n\\n        if (!isPaused()) {\\n            resetLottery();\\n        }\\n    }\\n\\n    function resetLottery() internal {\\n        require(\\n            block.timestamp >= raffle[round.current()].endTime,\\n            \\\"round has not finished\\\"\\n        );\\n        address lastRoundWinner = raffle[round.current()].winner;\\n        uint lastRoundPrizePool = raffle[round.current()].prizePool;\\n\\n        round.increment();\\n        raffle[round.current()] = RaffleInfo(\\n            block.timestamp + nextRoundInfo.interval,\\n            nextRoundInfo.interval,\\n            round.current(),\\n            nextRoundInfo.ticketPrice,\\n            address(0),\\n            0,\\n            GameStatus.IN_PROGRESS,\\n            lastRoundWinner,\\n            lastRoundPrizePool,\\n            0,\\n            nextRoundInfo.entryFees\\n        );\\n\\n        PRIZE_PERCENTAGE = NEXT_ROUND_PRIZE_PERCENTAGE;\\n        RaffleInfo memory raffleInfo = raffle[round.current()];\\n        emit RoundStart(\\n            raffleInfo.round,\\n            block.timestamp,\\n            raffleInfo.interval,\\n            raffleInfo.endTime\\n        );\\n        awaitingRandomness = false;\\n    }\\n\\n    /**\\n    @dev Fetch current round info\\n    */\\n    function getCurrentRoundInfo()\\n        external\\n        view\\n        returns (RaffleReadData memory)\\n    {\\n        RaffleInfo memory currentRaffle = raffle[round.current()];\\n        RaffleReadData memory data = RaffleReadData(\\n            currentRaffle.endTime,\\n            currentRaffle.interval,\\n            currentRaffle.round,\\n            currentRaffle.ticketPrice,\\n            currentRaffle.winner,\\n            currentRaffle.prizePool,\\n            getStatusString(),\\n            currentRaffle.lastRoundWinner,\\n            currentRaffle.lastRoundPrizePool,\\n            currentRaffle.entryFees,\\n            currentRaffle.playerCount\\n        );\\n        return data;\\n    }\\n\\n    function getStatusString() internal view returns (string memory) {\\n        if (raffle[round.current()].status == GameStatus.IN_PROGRESS) {\\n            return \\\"in_progress\\\";\\n        } else if (\\n            raffle[round.current()].status == GameStatus.PICKING_WINNER\\n        ) {\\n            return \\\"picking_winner\\\";\\n        } else {\\n            return \\\"finished\\\";\\n        }\\n    }\\n\\n    /**\\n    @dev Get last 50 game history of player\\n    */\\n    function getPlayerHistory() external view returns (GameReadData[] memory) {\\n        Game[] memory myGames = players[msg.sender];\\n        require(myGames.length > 0, \\\"No history\\\");\\n\\n        uint loopEnd;\\n        uint loopStart;\\n        uint returnLength;\\n        if (myGames.length <= playerHistoryCount) {\\n            loopEnd = myGames.length;\\n            loopStart = 0;\\n            returnLength = myGames.length;\\n        } else {\\n            loopEnd = playerHistoryCount;\\n            loopStart = 0;\\n            returnLength = playerHistoryCount;\\n        }\\n        GameReadData[] memory last50Games = new GameReadData[](returnLength);\\n\\n        for (uint i = loopStart; i < loopEnd; i++) {\\n            last50Games[i].game = myGames[i];\\n            if (i + 1 != loopEnd) {\\n                last50Games[i].roundEnded = true;\\n            } else {\\n                if (myGames[i].round < round.current()) {\\n                    last50Games[i].roundEnded = true;\\n                } else {\\n                    last50Games[i].roundEnded = false;\\n                }\\n            }\\n        }\\n        return last50Games;\\n    }\\n\\n    function getPlayerCurrentRoundEntry() external view returns (uint) {\\n        if (\\n            players[msg.sender].length > 0 &&\\n            players[msg.sender][players[msg.sender].length - 1].round ==\\n            round.current()\\n        ) {\\n            return\\n                players[msg.sender][players[msg.sender].length - 1].buyAmount;\\n        }\\n        return 0;\\n    }\\n\\n    function transferFees() internal {\\n        address commissionsAddress = commissionsAddressRouter.getAddress();\\n        token.approve(commissionsAddress, getBalance());\\n        ICommissionsRouter(commissionsAddress).receiveFees(\\n            getBalance(),\\n            bytes32(\\\"TX\\\")\\n        );\\n    }\\n\\n    function getTicketPrice() external view returns (uint256) {\\n        return raffle[round.current()].ticketPrice;\\n    }\\n\\n    function getVRFPrice() external view returns (uint256) {\\n        return VRF_V2_WRAPPER.calculateRequestPrice(callbackGasLimit);\\n    }\\n\\n    function getMaticBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getLinkBalance() external view returns (uint256) {\\n        return LINK.balanceOf(address(this));\\n    }\\n\\n    function withdrawLink(address receiver) external onlyOwner {\\n        LINK.transfer(receiver, LINK.balanceOf(address(this)));\\n    }\\n\\n    function withdrawMATIC(address receiver) external onlyOwner {\\n        (bool sent, bytes memory data) = payable(receiver).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function withdrawBRIN(address receiver) external onlyOwner {\\n        token.transfer(receiver, token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionsAddressRouter\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"RoundFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"RoundStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NEXT_ROUND_PRIZE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIZE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceFinalizeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceResetLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lastRoundWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRoundPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Raffle.RaffleReadData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCurrentRoundEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerHistory\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Raffle.PlayerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Raffle.Game\",\"name\":\"game\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"roundEnded\",\"type\":\"bool\"}],\"internalType\":\"struct Raffle.GameReadData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRFPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerHistoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersByRoundId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomStatusByRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fetched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setEntryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setPlayerHistoryCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setPrizePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setRoundInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniquePlayersByRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawBRIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Raffle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc0b7de316f4e57c677370ccd3a36697d6fc5de200000000000000000000000083e92ce0965ab1b6e4c02fb2746c13daaa1fe69e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}