{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BlindBoxApe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./lib/interface.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Verify.sol\\\";\\n\\ncontract BlindBoxApe is OwnableUpgradeable, Verify {\\n    using SafeMath for uint256;\\n    uint256 public seed;\\n    IERC721Upgradeable public ERC721;\\n    IERC20 public tokenFT;\\n    string public name;\\n    uint256 public salt;\\n    mapping(address => bool) public admin;\\n    // box id => bool\\n    mapping(uint256 => bool) public canceled;\\n    // box id => bool\\n    mapping(uint256 => bool) public deleted;\\n    // box id => bool\\n    mapping(uint256 => bool) public histories;\\n    // box id => uint256\\n    mapping(uint256 => uint256) public totalSell;\\n    // user => (box id => uint256)\\n    mapping(address => mapping(uint256 => uint256)) public userPurchase;\\n    // box id => Box\\n    mapping(uint256 => Box) public boxs;\\n    // box id => token id list\\n    mapping(uint256 => uint256[]) public tokenByIndex;\\n    mapping(uint256 => bool) public soldOut;\\n\\n    struct CreateReq {\\n      string name;\\n      uint256 startTime;\\n      uint256 endTime;\\n      uint256 totalSupply;\\n      uint256 price;\\n      uint256 propsNum;\\n      uint256 weightProp;\\n      uint256[] tokenids;\\n      uint256 tokenNum;\\n      uint256 purchaseLimit;\\n      IERC20 token;\\n    }\\n\\n    struct Box {\\n        string name;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 totalSupply;\\n        uint256 price;\\n        uint256 propsNum;\\n        uint256 weightProp;\\n        uint256[] tokenids;\\n        uint256 tokenNum;\\n        uint256 purchaseLimit;\\n        IERC20 token;\\n    }\\n\\n    event CreateBox(uint256 boxId, Box box);\\n    event Cancel(uint256 boxId, uint256 totalSupply, uint256 unSupply);\\n    event Delete(uint256 boxId, uint256 totalSupply, uint256 unSupply);\\n    event BuyBox(address sender, uint256 boxId);\\n    event BuyBoxes(address sender, uint256 boxId, uint256 quantity);\\n    event UpdateBox(uint256 boxId, Box _box, Box box);\\n\\n    function initialize(string memory _name)\\n        public\\n        initializer\\n    {\\n        name = _name;\\n        __Ownable_init();\\n    }\\n\\n    function createBox(uint256 id, CreateReq memory req) external onlyAdmin {\\n        //require(bytes(req.name).length <= 15, \\\"CreateBox: length of name is too long\\\");\\n        require(req.endTime > req.startTime && req.endTime > block.timestamp, \\\"CreateBox: time error\\\");\\n        require(req.totalSupply > 0, \\\"CreateBox: totalSupply error\\\");\\n        require(req.totalSupply.mul(req.propsNum) <= req.tokenids.length, \\\"CreateBox: token id not enought\\\");\\n        require(req.tokenNum > 0, \\\"CreateBox: tokenNum error\\\");\\n        //require(req.price >= 0, \\\"CreateBox: price error\\\");\\n        require(!histories[id] || (histories[id] && deleted[id]), \\\"CreateBox: duplicate box id\\\");\\n\\n        Box memory box;\\n        box.name = req.name;\\n        box.startTime = req.startTime;\\n        box.endTime = req.endTime;\\n        box.totalSupply = req.totalSupply;\\n        box.price = req.price.mul(1e16);\\n        box.propsNum = req.propsNum;\\n        box.weightProp = req.weightProp;\\n        box.tokenNum = req.tokenNum.mul(1e16);\\n        box.purchaseLimit = req.purchaseLimit;\\n        box.token = req.token;\\n\\n        delete tokenByIndex[id];\\n        tokenByIndex[id] = req.tokenids;\\n\\n        boxs[id] = box;\\n        histories[id] = true;\\n        deleted[id] = false;\\n        emit CreateBox(id, box);\\n    }\\n\\n    function buyBoxes(uint256 _id, uint256 _quantity, bytes memory _data) external payable {\\n        _buyBoxes(_id, _quantity, _data);\\n    }\\n\\n    function buyBox(uint256 _id, bytes memory _data) external payable {\\n        _buyBoxes(_id, 1, _data);\\n        emit BuyBox(msg.sender, _id);\\n    }\\n\\n    function _buyBoxes(uint256 _id, uint256 _quantity, bytes memory _data) internal {\\n        require(_quantity > 0, \\\"BuyBox: the number of buy box must be greater than 0\\\");\\n        bytes32 _hash = keccak256(abi.encodePacked(msg.sender, _id, salt));\\n        require(verify(_hash, _data), \\\"buyBox: Authentication failed\\\");\\n\\n        require(tx.origin == msg.sender, \\\"BuyBox: invalid caller\\\");\\n        require(histories[_id] && !deleted[_id], \\\"BuyBox: box is not exist\\\");\\n        require(!canceled[_id], \\\"BuyBox: box does not to sell\\\");\\n\\n        Box memory box = boxs[_id];\\n        require(block.timestamp > box.startTime && block.timestamp < box.endTime, \\\"BuyBox: no this time\\\");\\n        require(!soldOut[_id], \\\"BuyBox: box is sold out\\\");\\n        require(box.totalSupply >= totalSell[_id].add(_quantity), \\\"BuyBox: insufficient supply\\\");\\n        require(box.purchaseLimit == 0 || box.purchaseLimit >= userPurchase[msg.sender][_id].add(_quantity), \\\"BuyBox: not enought quota\\\");\\n        require(box.price.mul(_quantity) == msg.value, \\\"BuyBox: invalid amount\\\");\\n\\n\\n        for (uint256 j=0; j<_quantity; j++){\\n          seed = seed.add(box.propsNum);\\n\\n          for (uint256 i=0; i<box.propsNum.sub(randomTimes(box.propsNum, box.weightProp)); i++) {\\n            uint256 _tokenID = randomDraw(_id);\\n            ERC721.transferFrom(address(this), msg.sender, _tokenID);\\n          }\\n        }\\n\\n        totalSell[_id] = totalSell[_id].add(_quantity);\\n        userPurchase[msg.sender][_id] = userPurchase[msg.sender][_id].add(_quantity);\\n        if (box.totalSupply <= totalSell[_id]) {\\n          soldOut[_id] = true;\\n        }\\n        emit BuyBoxes(msg.sender, _id, _quantity);\\n    }\\n\\n    function randomTimes(uint256 len, uint256 weight) internal returns(uint256) {\\n      uint256 times;\\n      for (uint256 i=0; i<len; i++) {\\n        if (randomNum(100) >= weight) {\\n          times = times.add(1);\\n        }\\n      }\\n      return times;\\n    }\\n\\n    function randomNum(uint256 range) internal returns(uint256){\\n      seed = seed.add(1);\\n      return uint256(keccak256(abi.encodePacked(seed, block.difficulty, block.gaslimit, block.number, block.timestamp))).mod(range);\\n    }\\n\\n    function randomDraw(uint256 _id) internal returns(uint256) {\\n      uint256 _num = randomNum(tokenByIndex[_id].length);\\n      require(tokenByIndex[_id].length > _num, \\\"random out of range\\\");\\n      require(tokenByIndex[_id].length > 0, \\\"index out of range\\\");\\n\\n      uint256 lastIndex = tokenByIndex[_id].length.sub(1);\\n      uint256 tokenId = tokenByIndex[_id][_num];\\n      if (_num != lastIndex) {\\n        tokenByIndex[_id][_num] = tokenByIndex[_id][lastIndex];\\n      }\\n      tokenByIndex[_id].pop();\\n      return tokenId;\\n    }\\n\\n    function setBoxOpen(uint256 _id, bool _open) external onlyAdmin {\\n        require(!deleted[_id], \\\"SetBoxOpen: box has been deleted\\\");\\n        require(histories[_id], \\\"SetBoxOpen: box is not exist\\\");\\n        Box memory box = boxs[_id];\\n        canceled[_id] = _open;\\n        emit Cancel(_id, box.totalSupply, box.totalSupply.sub(totalSell[_id]));\\n    }\\n\\n    function deleteBox(uint256 _id) external onlyAdmin {\\n        require(!deleted[_id], \\\"DeleteBox: box has been deleted\\\");\\n        require(histories[_id], \\\"DeleteBox: box is not exist\\\");\\n        Box memory box = boxs[_id];\\n        deleted[_id] = true;\\n        delete tokenByIndex[_id];\\n        emit Delete(_id, box.totalSupply, box.totalSupply.sub(totalSell[_id]));\\n    }\\n\\n    function updateBox(uint256 _id, CreateReq memory req) external onlyAdmin {\\n        require(histories[_id], \\\"UpdateBox: box id not found\\\");\\n        //require(bytes(req.name).length <= 15, \\\"UpdateBox: length of name is too long\\\");\\n        require(req.endTime > req.startTime && req.endTime > block.timestamp, \\\"UpdateBox: time error\\\");\\n        require(req.tokenNum > 0, \\\"UpdateBox: tokenNum error\\\");\\n        //require(req.price > 0, \\\"UpdateBox: price error\\\");\\n\\n        Box memory box = boxs[_id];\\n        box.name = req.name;\\n        box.startTime = req.startTime;\\n        box.endTime = req.endTime;\\n        box.price = req.price.mul(1e16);\\n        box.weightProp = req.weightProp;\\n        box.tokenNum = req.tokenNum.mul(1e16);\\n        box.purchaseLimit = req.purchaseLimit;\\n        box.token = req.token;\\n        boxs[_id] = box;\\n    }\\n\\n    function setTokenFT(IERC20 _tokenFT) external onlyAdmin {\\n      tokenFT = _tokenFT;\\n    }\\n\\n    function setToken721(IERC721Upgradeable _erc721) external onlyAdmin {\\n        ERC721 = _erc721;\\n    }\\n\\n    function getAmountFT() external view returns(uint256){\\n      return tokenFT.balanceOf(address(this));\\n    }\\n\\n    function getAmountToken(IERC20 token) external view returns(uint256) {\\n      return token.balanceOf(address(this));\\n    }\\n\\n    function getAvailableToken(uint256 _id) external view returns(uint256[] memory) {\\n      return tokenByIndex[_id];\\n    }\\n\\n    function setAdmin(address user, bool _auth) external onlyOwner {\\n        admin[user] = _auth;\\n    }\\n\\n    function setSalt(uint256 _salt) external onlyOwner {\\n      salt = _salt;\\n    }\\n\\n    function onERC721Received(address, address, uint, bytes calldata) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            admin[msg.sender] || owner() == msg.sender,\\n            \\\"Admin: caller is not the admin\\\"\\n        );\\n        _;\\n    }\\n    \\n    function withdraw(address _to) public onlyOwner {\\n        payable(_to).transfer(address(this).balance);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC721 {\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n\\n    function adminMintTo(address to, uint256 tokenId) external;\\n}\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function adminMint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x >= y, \\\"SafeMath: sub underflow\\\");\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n        z = x - y;\\n        return z;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Verify.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\ncontract Verify is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    address private publicKey;\\n\\n\\n    function verify(bytes32 hashMessage, bytes memory _data)internal view returns (bool) {\\n        bool auth;\\n        bytes32 _r = bytes2bytes32(slice(_data, 0, 32));\\n        bytes32 _s = bytes2bytes32(slice(_data, 32, 32));\\n        bytes1 v = slice(_data, 64, 1)[0];\\n        uint8 _v = uint8(v) + 27;\\n\\n        address addr = ecrecover(hashMessage, _v, _r, _s);\\n        if (publicKey == addr) {\\n            auth = true;\\n        }\\n        return auth;\\n    }\\n\\n    function slice(bytes memory data, uint256 start, uint256 len) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(len);\\n        for (uint256 i = 0; i < len; i++) {\\n            b[i] = data[i + start];\\n        }\\n        return b;\\n    }\\n\\n    function bytes2bytes32(bytes memory _source) internal pure returns (bytes32 result){\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function setPublicKey(address _key) external onlyOwner {\\n        publicKey = _key;\\n    }\\n    \\n    function getPublicKey() external view onlyOwner returns (address){\\n        return publicKey;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RelicsAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./lib/Verify.sol\\\";\\n\\ninterface MintNfter {\\n    function adminMintTo(address to, uint256 tokenId) external;\\n}\\n\\ncontract FreeMintAction is OwnableUpgradeable, Verify {\\n    MintNfter public nftContract;\\n    struct Config {\\n        uint128 nonce;\\n        uint128 price;\\n    }\\n\\n    Config public cfg;\\n\\n    mapping(bytes32 => bool) public claimed;\\n    event Claimed(\\n        address to,\\n        uint256 serverId,\\n        uint256 payerId,\\n        uint256 relicsId,\\n        uint256 tokenId\\n    );\\n\\n    function initialize(MintNfter _impl, Config memory _cfg)\\n        public\\n        initializer\\n    {\\n        nftContract = _impl;\\n        __Ownable_init();\\n        setConfig(_cfg);\\n    }\\n\\n    /// @dev TokenId for mint nft\\n    /// @dev Each mint nft, nonce will add 1\\n    /// @dev mint nft is mint nonce\\n    /// @dev price: 1000 = 1 ether, 1 = 0.001 ether\\n    function setConfig(Config memory _cfg) public onlyOwner {\\n        require(\\n            _cfg.nonce > cfg.nonce,\\n            \\\"_nonce must be greater than origin nonce\\\"\\n        );\\n        cfg.nonce = _cfg.nonce;\\n        cfg.price = _cfg.price;\\n    }\\n\\n    function setNft(MintNfter _impl) external onlyOwner {\\n        nftContract = _impl;\\n    }\\n\\n    /// @notice Entrance of user mint art nft\\n    /// @param _data sign data, keccak256(abi.encodePacked(msg.sender, _serverId, _payerId, _relicsId));\\n    function claim(\\n        uint256 _serverId,\\n        uint256 _payerId,\\n        uint256 _relicsId,\\n        bytes memory _data\\n    ) external payable {\\n        address sender = _msgSender();\\n        bytes32 _hash = keccak256(\\n            abi.encodePacked(sender, _serverId, _payerId, _relicsId)\\n        );\\n        bytes32 _onlyHash = keccak256(\\n            abi.encodePacked(_serverId, _payerId, _relicsId)\\n        );\\n\\n        require(verify(_hash, _data), \\\"Authentication failed\\\");\\n        require(!claimed[_onlyHash], \\\"Already minted\\\");\\n        require(msg.value == cfg.price * 1e15, \\\"Invalid amount\\\");\\n\\n        nftContract.adminMintTo(sender, cfg.nonce);\\n        claimed[_onlyHash] = true;\\n        emit Claimed(sender, _serverId, _payerId, _relicsId, cfg.nonce);\\n        cfg.nonce++;\\n    }\\n\\n    /// @notice Withdraw the balance of the contract\\n    /// @param _to Withdraw the balance of the contract to `_to`\\n    function withdraw(address _to) external onlyOwner {\\n        payable(_to).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract Configurable is OwnableUpgradeable {\\n\\n    mapping (bytes32 => uint256) internal config;\\n    \\n    function getConfig(bytes32 key) public view returns (uint256) {\\n        return config[key];\\n    }\\n    function getConfig(bytes32 key, uint256 index) public view returns (uint256) {\\n        return config[bytes32(uint256(key) ^ index)];\\n    }\\n    function getConfig(bytes32 key, address addr) public view returns (uint256) {\\n        return config[bytes32(uint256(key) ^ uint256(uint160(addr)))];\\n    }\\n\\n    function _setConfig(bytes32 key, uint256 value) internal {\\n        if(config[key] != value)\\n            config[key] = value;\\n    }\\n\\n    function _setConfig(bytes32 key, uint256 index, uint256 value) internal {\\n        _setConfig(bytes32(uint256(key) ^ index), value);\\n    }\\n\\n    function _setConfig(bytes32 key, address addr, uint256 value) internal {\\n        _setConfig(bytes32(uint256(key) ^ uint256(uint160(addr))), value);\\n    }\\n    \\n    function setConfig(bytes32 key, uint256 value) external onlyOwner {\\n        _setConfig(key, value);\\n    }\\n\\n    function setConfig(bytes32 key, uint256 index, uint256 value) external onlyOwner {\\n        _setConfig(bytes32(uint256(key) ^ index), value);\\n    }\\n    \\n    function setConfig(bytes32 key, address addr, uint256 value) public onlyOwner {\\n        _setConfig(bytes32(uint256(key) ^ uint256(uint160(addr))), value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SwapAPE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./lib/Governable.sol\\\";\\nimport \\\"./lib/interface.sol\\\";\\n\\n\\ncontract SwapAPE is Configurable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping(uint256 => uint256) public finished;\\n    mapping(uint256 => uint256) public totalSwapA;\\n    mapping(uint256 => uint256) public totalSwapB;\\n    mapping(address => mapping(uint256 => uint256)) public userTotalSwapA;\\n    mapping(address => mapping(uint256 => uint256)) public userTotalSwapB;\\n    mapping(address => mapping(uint256 => bool)) public canceled;\\n    mapping(uint256 => uint256) public swapTxFee;\\n    uint256 internal constant PoolTypeSell = 0;\\n    uint256 internal constant PoolTypeBuy = 1;\\n    bytes32 internal constant TxFeeRatio            = bytes32(\\\"TxFeeRatio\\\");\\n    bytes32 internal constant MinValueOfBotHolder   = bytes32(\\\"MinValueOfBotHolder\\\");\\n\\n    struct CreateReq {\\n        // tokenA swap to tokenB\\n        string name;\\n        IERC20 tokenA;\\n        IERC20 tokenB;\\n        uint256 totalAmountA;\\n        uint256 totalAmountB;\\n        uint256 poolType;\\n    }\\n\\n    struct Pool {\\n        string name;\\n        address creator;\\n        IERC20 tokenA;\\n        IERC20 tokenB;\\n        uint256 totalAmountA;\\n        uint256 totalAmountB;\\n        uint256 poolType;\\n    }\\n\\n    Pool[] public pools;\\n    event Created(uint indexed index, address indexed sender, Pool pool);\\n    event Cancel(uint256 indexed index, address indexed sender, uint256 amountA, uint256 txFee);\\n    event Swapped(uint256 indexed index, address indexed sender, uint256 amountA, uint256 amountB, uint256 txFee);\\n\\n\\n    function initialize(uint256 txFeeRatio, uint256 minBotHolder) public initializer {\\n        super.__Ownable_init();\\n        config[TxFeeRatio] = txFeeRatio;\\n        config[MinValueOfBotHolder] = minBotHolder;\\n    }\\n\\n    function create(CreateReq memory req) external payable {\\n        // create pool, transfer tokenA to pool\\n        uint256 index = pools.length;\\n        require(tx.origin == msg.sender, \\\"invalid caller\\\");\\n        require(req.totalAmountA != 0 && req.totalAmountB != 0, \\\"invalid total amount\\\");\\n        require(req.poolType == PoolTypeSell || req.poolType == PoolTypeBuy, \\\"invalid poolType\\\");\\n        require(bytes(req.name).length <= 15, \\\"length of name is too long\\\");\\n        // require(req.tokenA != address(0) && req.tokenB != address(0), \\\"invalid token address\\\");\\n        uint tokenABalanceBefore = req.tokenA.balanceOf(address(this));\\n        req.tokenA.transferFrom(msg.sender, address(this), req.totalAmountA);\\n        require(req.tokenA.balanceOf(address(this)).sub(tokenABalanceBefore) == req.totalAmountA,\\\"not support deflationary token\\\");\\n        Pool memory pool;\\n        pool.name = req.name;\\n        pool.creator = msg.sender;\\n        pool.tokenA = req.tokenA;\\n        pool.tokenB = req.tokenB;\\n        pool.totalAmountA = req.totalAmountA;\\n        pool.totalAmountB = req.totalAmountB;\\n        pool.poolType = req.poolType;\\n        pools.push(pool);\\n        emit Created(index, msg.sender, pool);\\n    }\\n\\n    function swap(uint index, uint amountB) external isPoolExist(index) {\\n        address sender = msg.sender;\\n        Pool memory pool = pools[index];\\n        require(tx.origin == msg.sender, \\\"invalid caller\\\");\\n        require(!canceled[msg.sender][index], \\\"Swap: pool has been cancel\\\");\\n        require(pool.totalAmountB > totalSwapB[index], \\\"Swap: amount is zero\\\");\\n\\n        uint256 spillAmountB = 0;\\n        uint256 _amountB = pool.totalAmountB.sub(totalSwapB[index]);\\n        if (_amountB > amountB) {\\n            _amountB = amountB;\\n        } else {\\n            spillAmountB = amountB.sub(_amountB);\\n        }\\n\\n        uint256 amountA = _amountB.mul(pool.totalAmountA).div(pool.totalAmountB);\\n        uint256 _amountA = pool.totalAmountA.sub(totalSwapA[index]);\\n        if (_amountA > amountA) {\\n            _amountA = amountA;\\n        }\\n\\n        totalSwapA[index] = totalSwapA[index].add(_amountA);\\n        totalSwapB[index] = totalSwapB[index].add(_amountB);\\n        userTotalSwapA[sender][index] = userTotalSwapA[sender][index].add(_amountA);\\n        userTotalSwapB[sender][index] = userTotalSwapB[sender][index].add(_amountB);\\n\\n        if (pool.totalAmountB == totalSwapB[index]) {\\n            finished[index] = block.timestamp;\\n        }\\n\\n        if (spillAmountB > 0) {\\n            pool.tokenB.transfer(msg.sender, spillAmountB);\\n        }\\n\\n        pool.tokenB.transferFrom(msg.sender, address(this), amountB);\\n        pool.tokenA.transfer(msg.sender, _amountA);\\n\\n        uint256 fee = _amountB.mul(getTxFeeRatio()).div(10000);\\n        swapTxFee[index] = swapTxFee[index].add(fee);\\n        uint256 _realAmountB = _amountB.sub(fee);\\n        if (_realAmountB > 0) {\\n            pool.tokenB.transfer(pool.creator, _realAmountB);\\n        }\\n        emit Swapped(index, msg.sender, _amountA, _realAmountB, fee);\\n    }\\n\\n    function cancel(uint256 index) external {\\n        require(index < pools.length, \\\"this pool does not exist\\\");\\n        Pool memory pool = pools[index];\\n        require(msg.sender == pool.creator, \\\"Cancel: not creator\\\");\\n        require(!canceled[msg.sender][index], \\\"Cancel: canceled\\\");\\n        canceled[msg.sender][index] = true;\\n\\n        uint256 unSwapAmount = pool.totalAmountA.sub(totalSwapA[index]);\\n        if (unSwapAmount > 0) {\\n            pool.tokenA.transfer(pool.creator, unSwapAmount);\\n        }\\n\\n        emit Cancel(index, msg.sender, unSwapAmount, 0);\\n    }\\n\\n    function getTxFeeRatio() public view returns (uint) {\\n        return config[TxFeeRatio];\\n    }\\n\\n    function getPoolCount() public view returns (uint) {\\n        return pools.length;\\n    }\\n\\n    function setTxFeeRatio(uint256 _txFeeRatio) external onlyOwner {\\n        config[TxFeeRatio] = _txFeeRatio;\\n    }\\n\\n    modifier isPoolExist(uint index) {\\n        require(index < pools.length, \\\"this pool does not exist\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlindBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./lib/interface.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Verify.sol\\\";\\n\\ncontract BlindBox is OwnableUpgradeable, Verify {\\n    using SafeMath for uint256;\\n    uint256 public seed;\\n    IERC721 public ERC721;\\n    IERC20 public tokenFT;\\n    string public name;\\n    uint256 public solt;\\n    mapping(address => bool) public admin;\\n    // box id => bool\\n    mapping(uint256 => bool) public canceled;\\n    // box id => bool\\n    mapping(uint256 => bool) public deleted;\\n    // box id => bool\\n    mapping(uint256 => bool) public histories;\\n    // box id => uint256\\n    mapping(uint256 => uint256) public totalSell;\\n    // user => (box id => uint256)\\n    mapping(address => mapping(uint256 => uint256)) public userPurchase;\\n    // box id => Box\\n    mapping(uint256 => Box) public boxs;\\n    // box id => token id list\\n    mapping(uint256 => uint256[]) public tokenByIndex;\\n    mapping(uint256 => bool) public soldOut;\\n\\n    struct CreateReq {\\n      string name;\\n      uint256 startTime;\\n      uint256 endTime;\\n      uint256 totalSupply;\\n      uint256 price;\\n      uint256 propsNum;\\n      uint256 weightProp;\\n      uint256[] tokenids;\\n      uint256 tokenNum;\\n      uint256 purchaseLimit;\\n      IERC20 token;\\n    }\\n\\n    struct Box {\\n        string name;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 totalSupply;\\n        uint256 price;\\n        uint256 propsNum;\\n        uint256 weightProp;\\n        uint256[] tokenids;\\n        uint256 tokenNum;\\n        uint256 purchaseLimit;\\n        IERC20 token;\\n    }\\n\\n    event CreateBox(uint256 boxId, Box box);\\n    event Cancel(uint256 boxId, uint256 totalSupply, uint256 unSupply);\\n    event Delete(uint256 boxId, uint256 totalSupply, uint256 unSupply);\\n    event BuyBox(address sender, uint256 boxId);\\n    event BuyBoxes(address sender, uint256 boxId, uint256 quantity);\\n    event UpdateBox(uint256 boxId, Box _box, Box box);\\n    event GetNFTByBox(address indexed to, uint256 indexed boxId, uint256 indexed tokenId);\\n\\n    function initialize(string memory _name)\\n        public\\n        initializer\\n    {\\n        name = _name;\\n        __Ownable_init();\\n    }\\n\\n    function createBox(uint256 id, CreateReq memory req) external onlyAdmin {\\n        //require(bytes(req.name).length <= 15, \\\"CreateBox: length of name is too long\\\");\\n        require(req.endTime > req.startTime && req.endTime > block.timestamp, \\\"CreateBox: time error\\\");\\n        require(req.totalSupply > 0, \\\"CreateBox: totalSupply error\\\");\\n        require(req.totalSupply.mul(req.propsNum) <= req.tokenids.length, \\\"CreateBox: token id not enought\\\");\\n        require(req.tokenNum > 0, \\\"CreateBox: tokenNum error\\\");\\n        //require(req.price >= 0, \\\"CreateBox: price error\\\");\\n        require(!histories[id] || (histories[id] && deleted[id]), \\\"CreateBox: duplicate box id\\\");\\n\\n        Box memory box;\\n        box.name = req.name;\\n        box.startTime = req.startTime;\\n        box.endTime = req.endTime;\\n        box.totalSupply = req.totalSupply;\\n        box.price = req.price.mul(1e16);\\n        box.propsNum = req.propsNum;\\n        box.weightProp = req.weightProp;\\n        box.tokenNum = req.tokenNum.mul(1e16);\\n        box.purchaseLimit = req.purchaseLimit;\\n        box.token = req.token;\\n\\n        delete tokenByIndex[id];\\n        tokenByIndex[id] = req.tokenids;\\n\\n        boxs[id] = box;\\n        histories[id] = true;\\n        deleted[id] = false;\\n        emit CreateBox(id, box);\\n    }\\n\\n    function buyBoxes(uint256 _id, uint256 _quantity, bytes memory _data) external payable {\\n        _buyBoxes(_id, _quantity, _data);\\n    }\\n\\n    function buyBox(uint256 _id, bytes memory data) external payable {\\n        _buyBoxes(_id, 1, data);\\n        emit BuyBox(msg.sender, _id);\\n    }\\n\\n    function _buyBoxes(uint256 _id, uint256 _quantity, bytes memory _data) internal {\\n        require(_quantity > 0, \\\"BuyBox: the number of buy box must be greater than 0\\\");\\n        bytes32 _hash = keccak256(abi.encodePacked(msg.sender, _id, solt));\\n        require(verify(_hash, _data), \\\"buyBox: Authentication failed\\\");\\n\\n        require(tx.origin == msg.sender, \\\"BuyBox: invalid caller\\\");\\n        require(histories[_id] && !deleted[_id], \\\"BuyBox: box is not exist\\\");\\n        require(!canceled[_id], \\\"BuyBox: box does not to sell\\\");\\n\\n        Box memory box = boxs[_id];\\n        require(block.timestamp > box.startTime && block.timestamp < box.endTime, \\\"BuyBox: no this time\\\");\\n        require(!soldOut[_id], \\\"BuyBox: box is sold out\\\");\\n        require(box.totalSupply >= totalSell[_id].add(_quantity), \\\"BuyBox: insufficient supply\\\");\\n        require(box.purchaseLimit == 0 || box.purchaseLimit >= userPurchase[msg.sender][_id].add(_quantity), \\\"BuyBox: not enought quota\\\");\\n        require(box.price.mul(_quantity) == msg.value, \\\"BuyBox: invalid amount\\\");\\n\\n        // \u4f7f\u7528ape\u6362\u6210\u4f7f\u7528eth/bnb\\n        // box.token.transferFrom(sender, address(this), box.price);\\n\\n        uint256 ftTimes;\\n        for (uint256 j=0; j<_quantity; j++){\\n          ftTimes = randomTimes(box.propsNum, box.weightProp);\\n          seed = seed.add(box.propsNum);\\n\\n          for (uint256 i=0; i<box.propsNum.sub(ftTimes); i++) {\\n            uint256 _tokenID = randomDraw(_id);\\n            ERC721.adminMintTo(msg.sender, _tokenID);\\n          }\\n\\n          if (ftTimes > 0) {\\n            tokenFT.adminMint(msg.sender, ftTimes.mul(box.tokenNum));\\n          }\\n        }\\n\\n        totalSell[_id] = totalSell[_id].add(_quantity);\\n        userPurchase[msg.sender][_id] = userPurchase[msg.sender][_id].add(_quantity);\\n        if (box.totalSupply <= totalSell[_id]) {\\n          soldOut[_id] = true;\\n        }\\n        emit BuyBoxes(msg.sender, _id, _quantity);\\n    }\\n\\n    function randomTimes(uint256 len, uint256 weight) internal returns(uint256) {\\n      uint256 times;\\n      for (uint256 i=0; i<len; i++) {\\n        if (randomNum(100) >= weight) {\\n          times = times.add(1);\\n        }\\n      }\\n      return times;\\n    }\\n\\n    function randomNum(uint256 range) internal returns(uint256){\\n      seed = seed.add(1);\\n      return uint256(keccak256(abi.encodePacked(seed, block.difficulty, block.gaslimit, block.number, block.timestamp))).mod(range);\\n    }\\n\\n    function randomDraw(uint256 _id) internal returns(uint256) {\\n      uint256 _num = randomNum(tokenByIndex[_id].length);\\n      require(tokenByIndex[_id].length > _num, \\\"random out of range\\\");\\n      require(tokenByIndex[_id].length > 0, \\\"index out of range\\\");\\n\\n      uint256 lastIndex = tokenByIndex[_id].length.sub(1);\\n      uint256 tokenId = tokenByIndex[_id][_num];\\n      if (_num != lastIndex) {\\n        tokenByIndex[_id][_num] = tokenByIndex[_id][lastIndex];\\n      }\\n      tokenByIndex[_id].pop();\\n      return tokenId;\\n    }\\n\\n    function setBoxOpen(uint256 _id, bool _open) external onlyAdmin {\\n        require(!deleted[_id], \\\"SetBoxOpen: box has been deleted\\\");\\n        require(histories[_id], \\\"SetBoxOpen: box is not exist\\\");\\n        Box memory box = boxs[_id];\\n        canceled[_id] = _open;\\n        emit Cancel(_id, box.totalSupply, box.totalSupply.sub(totalSell[_id]));\\n    }\\n\\n    function deleteBox(uint256 _id) external onlyAdmin {\\n        require(!deleted[_id], \\\"DeleteBox: box has been deleted\\\");\\n        require(histories[_id], \\\"DeleteBox: box is not exist\\\");\\n        Box memory box = boxs[_id];\\n        deleted[_id] = true;\\n        delete tokenByIndex[_id];\\n        emit Delete(_id, box.totalSupply, box.totalSupply.sub(totalSell[_id]));\\n    }\\n\\n    function updateBox(uint256 _id, CreateReq memory req) external onlyAdmin {\\n        require(histories[_id], \\\"UpdateBox: box id not found\\\");\\n        //require(bytes(req.name).length <= 15, \\\"UpdateBox: length of name is too long\\\");\\n        require(req.endTime > req.startTime && req.endTime > block.timestamp, \\\"UpdateBox: time error\\\");\\n        require(req.tokenNum > 0, \\\"UpdateBox: tokenNum error\\\");\\n        //require(req.price > 0, \\\"UpdateBox: price error\\\");\\n\\n        Box memory box = boxs[_id];\\n        box.name = req.name;\\n        box.startTime = req.startTime;\\n        box.endTime = req.endTime;\\n        box.price = req.price.mul(1e16);\\n        box.weightProp = req.weightProp;\\n        box.tokenNum = req.tokenNum.mul(1e16);\\n        box.purchaseLimit = req.purchaseLimit;\\n        box.token = req.token;\\n        boxs[_id] = box;\\n    }\\n\\n    function setTokenFT(IERC20 _tokenFT) external onlyAdmin {\\n      tokenFT = _tokenFT;\\n    }\\n\\n    function setToken721(IERC721 _erc721) external onlyAdmin {\\n        ERC721 = _erc721;\\n    }\\n\\n    function getAmountFT() external view returns(uint256){\\n      return tokenFT.balanceOf(address(this));\\n    }\\n\\n    function getAmountToken(IERC20 token) external view returns(uint256) {\\n      return token.balanceOf(address(this));\\n    }\\n\\n    function getAvailableToken(uint256 _id) external view returns(uint256[] memory) {\\n      return tokenByIndex[_id];\\n    }\\n\\n    function setAdmin(address user, bool _auth) external onlyOwner {\\n        admin[user] = _auth;\\n    }\\n\\n    function setSolt(uint256 _solt) external onlyOwner {\\n      solt = _solt;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            admin[msg.sender] || owner() == msg.sender,\\n            \\\"Admin: caller is not the admin\\\"\\n        );\\n        _;\\n    }\\n    \\n    function withdraw(address _to) public onlyOwner {\\n        payable(_to).transfer(address(this).balance);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/mock/NftBridgeMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/SafeMath.sol\\\";\\n\\n// interface for NFT contract, ERC721 and metadata, only funcs needed by NFTBridge\\ninterface INFT {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    // we do not support NFT that charges transfer fees\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    // impl by NFToken contract, mint an NFT with id and uri to user or burn\\n    function bridgeMint(\\n        address to,\\n        uint256 id,\\n        string memory uri\\n    ) external;\\n\\n    function burn(uint256 id) external;\\n}\\n\\ncontract NftBridgeMock {\\n    using SafeMath for uint256;\\n    uint256 counter;\\n    event Sent(address sender, address srcNft, uint256 id, uint64 dstChid, address receiver);\\n    \\n    function sendTo(address _nft,uint256 _id,uint64 _dstChid,address _receiver) external payable{\\n        require(msg.sender == INFT(_nft).ownerOf(_id), \\\"not token owner\\\");\\n        INFT(_nft).tokenURI(_id);\\n        if (_id.mod(2) == 1) {\\n            // deposit\\n            INFT(_nft).transferFrom(msg.sender, address(this), _id);\\n            require(INFT(_nft).ownerOf(_id) == address(this), \\\"transfer NFT failed\\\");\\n        } else {\\n            // burn\\n            INFT(_nft).burn(_id);\\n        }\\n        emit Sent(msg.sender, _nft, _id, _dstChid, _receiver);\\n    }\\n\\n    function totalFee(uint64 _dstChid,address _nft,uint256 _id) external view returns(uint256){\\n        string memory uri_ = INFT(_nft).tokenURI(_id);\\n\\n        return bytes(uri_).length.mul(1e10).add(uint256(_dstChid));\\n    }\\n}\"\r\n    },\r\n    \"contracts/Erc20FT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./lib/Verify.sol\\\";\\n\\ncontract Erc20FT is ERC20Upgradeable, OwnableUpgradeable, Verify {\\n    using SafeMathUpgradeable for uint256;\\n    address[] public users;\\n    uint256 public ratio;\\n    address public team;\\n    uint256 public burnRatio;\\n\\n    mapping(address => bool) public admin;\\n    mapping(address => mapping(bytes32 => uint256)) public records;\\n\\n    string private name_;\\n    string private symbol_;\\n\\n    function initialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __ERC20_init(_name, _symbol);\\n        __Ownable_init();\\n        setNameSymbol(_name, _symbol);\\n    }\\n\\n    function setNameSymbol(string memory _name, string memory _symbol)\\n        public\\n        onlyAdmin\\n    {\\n        name_ = _name;\\n        symbol_ = _symbol;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return name_;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return symbol_;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            if (users[i] == recipient) {\\n                uint256 fee = amount.mul(ratio).div(10000);\\n                amount = amount.sub(fee);\\n                super._transfer(sender, team, fee);\\n            }\\n        }\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    // function mint(address account, uint256 amount) external onlyAdmin {\\n    //     return super._mint(account, amount);\\n    // }\\n\\n    function adminMint(address account, uint256 amount) external onlyAdmin {\\n        return super._mint(account, amount);\\n    }\\n\\n    function mintTo(address account, uint256 amount) external onlyOwner {\\n        require(\\n            super.balanceOf(msg.sender) >= amount,\\n            \\\"ERC20: mintTo amount exceeds balance\\\"\\n        );\\n        return super._mint(account, amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        require(\\n            super.balanceOf(msg.sender) >= amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        super._burn(_msgSender(), amount);\\n    }\\n\\n    function insert(address _user) external onlyOwner {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            if (users[i] == _user) {\\n                return;\\n            }\\n        }\\n        users.push(_user);\\n    }\\n\\n    function setRatio(uint256 _ratio) external onlyOwner {\\n        ratio = _ratio;\\n    }\\n\\n    function setBurnRatio(uint256 _burnratio) external onlyOwner {\\n        burnRatio = _burnratio;\\n    }\\n\\n    function setTeam(address _user) external onlyOwner {\\n        team = _user;\\n    }\\n    /**\\n     * @notice withdraw tokens from the game to the chain (Please use the official channel to withdraw)\\n     * @param _amount withdraw amount(2000 => 20.00).\\n     * @param timestamp ns.\\n     * @param data Signature information.\\n     */\\n    function withdraw(\\n        uint256 _amount,\\n        uint256 timestamp,\\n        bytes memory data\\n    ) external {\\n        uint256 amount = _amount.mul(1e16);\\n        uint256 second = timestamp.div(1e9);\\n        uint256 date = second.div(86400); // 24 * 60 * 60\\n        bytes32 _hash = keccak256(abi.encodePacked(msg.sender, _amount, timestamp));\\n        require(\\n            withdrewRecordStatus[_hash] == WithdrawStatus.NotFound,\\n            \\\"Withdraw: signature has been used\\\"\\n        );\\n        \\n        if(dateAmount[date].add(amount) > withdrawLimit) {\\n            withdrewRecordStatus[_hash] = WithdrawStatus.ExceedDailyLimit;\\n            emit Withdrew(msg.sender, amount, timestamp, WithdrawStatus.ExceedDailyLimit);\\n            return ;\\n        }\\n\\n        if(userDailyAmount[msg.sender][date].add(amount) > userDailyWithdrawLimit) {\\n            withdrewRecordStatus[_hash] = WithdrawStatus.UserDailyLimit;\\n            emit Withdrew(msg.sender, amount, timestamp, WithdrawStatus.UserDailyLimit);\\n            return ;\\n        }\\n        \\n        if(second < block.timestamp && block.timestamp.sub(second) > 300) {\\n            withdrewRecordStatus[_hash] = WithdrawStatus.TimeOut;\\n            emit Withdrew(msg.sender, amount, timestamp, WithdrawStatus.TimeOut);\\n            return ;\\n        }\\n\\n        if(!verify(_hash, data)) {\\n            withdrewRecordStatus[_hash] = WithdrawStatus.AuthFailed;\\n            emit Withdrew(msg.sender, amount, timestamp, WithdrawStatus.AuthFailed);\\n            return ;\\n        }\\n\\n        super._mint(msg.sender, amount);\\n        dateAmount[date] = dateAmount[date].add(amount);\\n        userDailyAmount[msg.sender][date] = userDailyAmount[msg.sender][date].add(amount);\\n        withdrewRecordStatus[_hash] = WithdrawStatus.Successed;\\n        emit Withdrew(msg.sender, amount, timestamp, WithdrawStatus.Successed);\\n    }\\n\\n    function setAdmin(address user, bool _auth) external onlyOwner {\\n        admin[user] = _auth;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            admin[msg.sender] || owner() == msg.sender,\\n            \\\"Admin: caller is not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    struct Supply {\\n        uint256 cap;\\n        uint256 total;\\n    }\\n    mapping(address => Supply) public bridges;\\n    event BridgeSupplyCapUpdated(address bridge, uint256 supplyCap);\\n    /**\\n     * @notice Updates the supply cap for a bridge.\\n     * @param _bridge The bridge address.\\n     * @param _cap The new supply cap.\\n     */\\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external onlyOwner {\\n        // cap == 0 means revoking bridge role\\n        bridges[_bridge].cap = _cap;\\n        emit BridgeSupplyCapUpdated(_bridge, _cap);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external {\\n        Supply storage b = bridges[msg.sender];\\n        require(b.cap > 0, \\\"invalid caller\\\");\\n        require(b.total.add(_amount) <= b.cap, \\\"exceeds bridge supply cap\\\");\\n        b.total = b.total.add(_amount);\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) external  {\\n        Supply storage b = bridges[msg.sender];\\n        require(b.cap > 0, \\\"invalid caller\\\");\\n        require(b.total >= _amount, \\\"exceeds bridge minted amount\\\");\\n        _spendAllowance(_from, _msgSender(), _amount);\\n        _burn(_from, _amount);\\n        b.total = b.total.sub(_amount);\\n    }\\n\\n    mapping(uint256=>uint256) public dateAmount;\\n    uint256 public withdrawLimit;\\n    function setWithdrawLimit(uint256 amount_) public onlyAdmin {\\n        withdrawLimit = amount_;\\n    }\\n\\n    /**\\n     * @notice withdraw status\\n     * NotFound:          0, transaction not found\\n     * Successed:         1, withdraw successed\\n     * ExceedDailyLimit:  2, withdraw money exccesd daily limit\\n     * TimeOut:           3, withdraw timeout\\n     * AuthFailed:        4, withdrawal signature authentication failed\\n     * UserDailyLimit:    5, Exceeding the daily withdrawal amount of the user\\n     */\\n    enum WithdrawStatus{ NotFound, Successed, ExceedDailyLimit, TimeOut, AuthFailed, UserDailyLimit}\\n    mapping (bytes32 => WithdrawStatus) withdrewRecordStatus;\\n   \\n    event Withdrew(address indexed sender,uint256 indexed amount, uint256 indexed timestamp, WithdrawStatus status);\\n    event Deposited(address indexed sender, uint256 indexed amount);\\n    function deposit(uint256 _amount) external{\\n        super._burn(msg.sender, _amount);\\n        emit Deposited(msg.sender, _amount);\\n    }\\n\\n    function withdrewRecord(address _sender, uint256 _amount,uint256 _timestamp)  external view returns (WithdrawStatus) {\\n        return withdrewRecordStatus[keccak256(abi.encodePacked(_sender, _amount, _timestamp))];\\n    }\\n\\n    mapping(address=>mapping(uint256 => uint256)) public userDailyAmount;\\n    uint256 public userDailyWithdrawLimit;\\n    function setUserDailyWithdrawLimit(uint256 _amount) public onlyAdmin {\\n        userDailyWithdrawLimit = _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract Admin is OwnableUpgradeable{\\n    mapping (address => bool) public admins;\\n\\n    event SetAdmin(address admin, bool auth);\\n\\n    modifier onlyAdmin() {\\n        require(\\n            admins[msg.sender] || owner() == msg.sender,\\n            \\\"Admin: caller is not the admin\\\"\\n        );\\n        _;\\n    }\\n\\n    function setAdmin(address _user, bool _auth) external onlyOwner {\\n        admins[_user] = _auth;\\n        emit SetAdmin(_user, _auth);\\n    }\\n}\"\r\n    },\r\n    \"contracts/NftToBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/Admin.sol\\\";\\n\\ninterface nftMinter {\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function adminMintsTo(address[] memory _tos, uint256[] memory _tokenIds) external;\\n}\\n\\ninterface bridger {\\n    function sendTo(address _nft,uint256 _id,uint64 _dstChid,address _receiver) external payable;\\n    function totalFee(uint64 _dstChid,address _nft,uint256 _id) external view returns(uint256);\\n}\\n\\ncontract NftToBridge is Admin {\\n    nftMinter public nftMintAddr;\\n    bridger public bridge;\\n\\n    function initialize(nftMinter _nftMintAddr, bridger _bridge)public initializer\\n    {\\n        nftMintAddr = _nftMintAddr;\\n        bridge = _bridge;\\n        nftMintAddr.setApprovalForAll(address(bridge), true);\\n        __Ownable_init();\\n    }\\n\\n    function setNftMinterAndBridger(nftMinter _nftMintAddr, bridger _bridge)  external onlyAdmin {\\n        nftMintAddr.setApprovalForAll(address(bridge), false);\\n        nftMintAddr = _nftMintAddr;\\n        bridge = _bridge;\\n        nftMintAddr.setApprovalForAll(address(bridge), true);\\n    }\\n\\n    function nftMint(uint256[] memory _tokenIds) external onlyAdmin{\\n        address[] memory tos_ = new address[](_tokenIds.length);\\n        for(uint256 i =0 ;i<_tokenIds.length; i++){\\n            tos_[i] = address(this);\\n        }\\n        nftMintAddr.adminMintsTo(tos_, _tokenIds);\\n    }\\n\\n    function sendTo(uint256[] memory _tokenIds, address _receiver, uint64 _dstChid) external payable onlyAdmin{\\n        uint256 totalfee_ = totalFee(_tokenIds, _dstChid);\\n        require(msg.value >= totalfee_, \\\"invalid amount\\\");\\n        for(uint256 i = 0;i<_tokenIds.length; i++){\\n            bridge.sendTo{value: bridge.totalFee(_dstChid, address(nftMintAddr), _tokenIds[i])}(address(nftMintAddr), _tokenIds[i], _dstChid, _receiver);\\n        }\\n    }\\n\\n    function totalFee(uint256[] memory _tokenIds, uint64 _dstChid)  public view returns (uint256 total_) {\\n        for(uint256 i =0 ; i < _tokenIds.length; i++){\\n            total_ += bridge.totalFee(_dstChid, address(nftMintAddr), _tokenIds[i]);\\n        }\\n        return total_;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/lib/Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ZOSLibAddress {\\n    function isContract(address account) internal view returns (bool x) {\\n        assembly { \\n          let size := extcodesize(account)\\n          x := gt(size, 0)\\n        }\\n    }\\n}\\n\\nabstract contract Proxy{\\n  constructor(){}\\n  fallback () payable external {\\n    _fallback();\\n  }\\n\\n  receive() external payable {\\n    _fallback();\\n  }\\n\\n  function _implementation() internal view virtual returns (address);\\n\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      calldatacopy(0, 0, calldatasize())\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n\\n  function _willFallback() internal virtual {}\\n\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\\n\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  event Upgraded(address indexed implementation);\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\\n\\n  function _implementation() override internal view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  function _setImplementation(address newImplementation) internal {\\n    require(ZOSLibAddress.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n  bytes32 internal constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\\n\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  function admin() external ifAdmin returns (address _adminAddr) {\\n    _adminAddr = _admin();\\n    return _adminAddr;\\n  }\\n\\n  function implementation() external ifAdmin returns (address _imp) {\\n    _imp = _implementation();\\n    return _imp;\\n  }\\n\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  // function _willFallback() override virtual internal {\\n  //   require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n  //   super._willFallback();\\n  // }\\n}\\n\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  constructor(address _logic, bytes memory _data) payable {\\n    assert(IMPLEMENTATION_SLOT == keccak256(\\\"org.zeppelinos.proxy.implementation\\\"));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\\n\\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\\n    assert(ADMIN_SLOT == keccak256(\\\"org.zeppelinos.proxy.admin\\\"));\\n    _setAdmin(_admin);\\n  }\\n\\n  function _willFallback() override virtual internal {\\n    require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n    super._willFallback();\\n  }\\n}\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AdminUpgradeabilityProxy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006cf6384d05ec0c430af3ac46135d4574cceef97d00000000000000000000000066acaf662822dbfd66a5240788ec528b743885e6000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c44cd88b7600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f4d65746120417065732052656c6963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d4152000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x6cf6384d05ec0c430af3ac46135d4574cceef97d", "SwarmSource": "ipfs://b19e98ed56f7105d9dba7a9a58dd948e28cf216e3bcd6e9150295d65848fcd04"}