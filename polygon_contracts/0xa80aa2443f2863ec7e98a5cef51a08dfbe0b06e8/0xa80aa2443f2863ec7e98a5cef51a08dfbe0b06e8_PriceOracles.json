{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\n// interfaces\r\ninterface IUniswapV3PoolState {function slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked);}\r\ninterface IUniswapV3PoolImmutables {function token0() external view returns (address); function token1() external view returns (address);}\r\ninterface IERC20Metadata {function decimals() external view returns (uint8);}\r\n\r\ncontract PriceOracles {\r\n\r\n// simplified version of ownable (to save gas)\r\n    address private _owner;\r\n    constructor() {_owner = msg.sender;}\r\n    modifier onlyOwner() {require(_owner == msg.sender, \"Ownable: caller is not the owner\"); _;}\r\n\r\n    IUniswapV3PoolState public Pool0;\r\n    IUniswapV3PoolState public Pool1;\r\n    IUniswapV3PoolState public Pool2;\r\n    IUniswapV3PoolState public Pool3;\r\n    IUniswapV3PoolState public Pool4;\r\n    IUniswapV3PoolImmutables internal pool0_Immutables;\r\n    IUniswapV3PoolImmutables internal pool1_Immutables;\r\n    IUniswapV3PoolImmutables internal pool2_Immutables;\r\n    IUniswapV3PoolImmutables internal pool3_Immutables;\r\n    IUniswapV3PoolImmutables internal pool4_Immutables;\r\n    bool public Token0_Inverted = false;\r\n    bool public Token1_Inverted = false;\r\n    bool public Token2_Inverted = false;\r\n    bool public Token3_Inverted = false;\r\n    bool public Token4_Inverted = false;\r\n    function setInversion_Token0(bool inv) external onlyOwner {Token0_Inverted = inv;}\r\n    function setInversion_Token1(bool inv) external onlyOwner {Token1_Inverted = inv;}\r\n    function setInversion_Token2(bool inv) external onlyOwner {Token2_Inverted = inv;}\r\n    function setInversion_Token3(bool inv) external onlyOwner {Token3_Inverted = inv;}\r\n    function setInversion_Token4(bool inv) external onlyOwner {Token4_Inverted = inv;}\r\n    function setPool0(address pool) external onlyOwner {Pool0 = IUniswapV3PoolState(pool); pool0_Immutables = IUniswapV3PoolImmutables(pool);}\r\n    function setPool1(address pool) external onlyOwner {Pool1 = IUniswapV3PoolState(pool); pool1_Immutables = IUniswapV3PoolImmutables(pool);}\r\n    function setPool2(address pool) external onlyOwner {Pool2 = IUniswapV3PoolState(pool); pool2_Immutables = IUniswapV3PoolImmutables(pool);}\r\n    function setPool3(address pool) external onlyOwner {Pool3 = IUniswapV3PoolState(pool); pool3_Immutables = IUniswapV3PoolImmutables(pool);}\r\n    function setPool4(address pool) external onlyOwner {Pool4 = IUniswapV3PoolState(pool); pool4_Immutables = IUniswapV3PoolImmutables(pool);}\r\n\r\n    function calculatePrice(uint256 sqrtPrice, uint256 decimals0, uint256 decimals1) internal pure returns(uint256) {\r\n        uint256 price;\r\n        uint256 decimals;\r\n        if (decimals0 <= decimals1) {\r\n            decimals = decimals1 - decimals0;\r\n            if (sqrtPrice >= 3*10**38) {price = ((sqrtPrice / (10**10)) ** 2) / ((62771017353866807638357894232076664161 * (10**decimals)) / 10**18);}  // this ensures the (sqrtPrice ** 2) can't overflow, the long number is the result of 2**192 / 10**20\r\n            else {price = (sqrtPrice ** 2) / (6277101735386680763835789423207666416102 * (10**decimals));}                                              // the long number is the result of 2**192 / 10**18\r\n        }\r\n        else {\r\n            decimals = decimals0 - decimals1;\r\n            if (sqrtPrice >= 3*10**38) {price = ((sqrtPrice / (10**10)) ** 2) / (62771017353866807638 / (10**decimals));}  // this ensures the (sqrtPrice ** 2) can't overflow, the long number is the result of 2**192 / 10**38\r\n            else {price = (sqrtPrice ** 2) / (6277101735386680763835789423207666416102 / (10**decimals));}                 // the long number is the result of 2**192 / 10**18\r\n        }\r\n        return price;\r\n    }\r\n    function calculateInversePrice(uint256 sqrtPrice, uint256 decimals0, uint256 decimals1) internal pure returns(uint256) {\r\n        uint256 price;\r\n        uint256 decimals;\r\n        if (decimals0 <= decimals1) {\r\n            decimals = decimals1 - decimals0;\r\n            if (sqrtPrice >= 3*10**38) {price = 62771017353866807638357894232076664161023554444640345129 / (((sqrtPrice / (10**10)) ** 2) / (10**decimals));}  // this ensures the (sqrtPrice ** 2) can't overflow, the long number is the result of 2**192 / 100\r\n            else {price = 6277101735386680763835789423207666416102355444464034512896000000000000000000 / ((sqrtPrice ** 2) / (10**decimals));}                 // the long number is the result of 2**192 * 10**18\r\n        }\r\n        else {\r\n            decimals = decimals0 - decimals1;\r\n            if (sqrtPrice >= 3*10**38) {price = (62771017353866807638357894232076664161023554444640345129 / (10**decimals)) / ((sqrtPrice / (10**10)) ** 2);}  // this ensures the (sqrtPrice ** 2) can't overflow, the long number is the result of 2**192 / 100\r\n            else {price = (6277101735386680763835789423207666416102355444464034512896 / (10**decimals)) / ((sqrtPrice ** 2) / 10**18);}                        // the long number is the result of 2**192\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function getEQTprice() external view returns(uint256) {\r\n        (uint256 sqrtPrice, , , , , ,) = Pool0.slot0();\r\n        uint256 decimals0 = IERC20Metadata(pool0_Immutables.token0()).decimals();\r\n        uint256 decimals1 = IERC20Metadata(pool0_Immutables.token1()).decimals();\r\n        if(Token0_Inverted){return calculateInversePrice(sqrtPrice, decimals0, decimals1);}\r\n        else {return calculatePrice(sqrtPrice, decimals0, decimals1);}\r\n    }\r\n    function getEQTprice_Token1() external view returns(uint256) {\r\n        (uint256 sqrtPrice, , , , , ,) = Pool1.slot0();\r\n        uint256 decimals0 = IERC20Metadata(pool1_Immutables.token0()).decimals();\r\n        uint256 decimals1 = IERC20Metadata(pool1_Immutables.token1()).decimals();\r\n        if(Token1_Inverted){return calculateInversePrice(sqrtPrice, decimals0, decimals1);}\r\n        else {return calculatePrice(sqrtPrice, decimals0, decimals1);}\r\n    }\r\n    function getEQTprice_Token2() external view returns(uint256) {\r\n        (uint256 sqrtPrice, , , , , ,) = Pool2.slot0();\r\n        uint256 decimals0 = IERC20Metadata(pool2_Immutables.token0()).decimals();\r\n        uint256 decimals1 = IERC20Metadata(pool2_Immutables.token1()).decimals();\r\n        if(Token2_Inverted){return calculateInversePrice(sqrtPrice, decimals0, decimals1);}\r\n        else {return calculatePrice(sqrtPrice, decimals0, decimals1);}\r\n    }\r\n    function getEQTprice_Token3() external view returns(uint256) {\r\n        (uint256 sqrtPrice, , , , , ,) = Pool3.slot0();\r\n        uint256 decimals0 = IERC20Metadata(pool3_Immutables.token0()).decimals();\r\n        uint256 decimals1 = IERC20Metadata(pool3_Immutables.token1()).decimals();\r\n        if(Token3_Inverted){return calculateInversePrice(sqrtPrice, decimals0, decimals1);}\r\n        else {return calculatePrice(sqrtPrice, decimals0, decimals1);}\r\n    }\r\n    function getEQTprice_Token4() external view returns(uint256) {\r\n        (uint256 sqrtPrice, , , , , ,) = Pool4.slot0();\r\n        uint256 decimals0 = IERC20Metadata(pool4_Immutables.token0()).decimals();\r\n        uint256 decimals1 = IERC20Metadata(pool4_Immutables.token1()).decimals();\r\n        if(Token4_Inverted){return calculateInversePrice(sqrtPrice, decimals0, decimals1);}\r\n        else {return calculatePrice(sqrtPrice, decimals0, decimals1);}\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Pool0\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pool1\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pool2\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pool3\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pool4\",\"outputs\":[{\"internalType\":\"contract IUniswapV3PoolState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token0_Inverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1_Inverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2_Inverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3_Inverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4_Inverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEQTprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEQTprice_Token1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEQTprice_Token2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEQTprice_Token3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEQTprice_Token4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inv\",\"type\":\"bool\"}],\"name\":\"setInversion_Token0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inv\",\"type\":\"bool\"}],\"name\":\"setInversion_Token1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inv\",\"type\":\"bool\"}],\"name\":\"setInversion_Token2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inv\",\"type\":\"bool\"}],\"name\":\"setInversion_Token3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inv\",\"type\":\"bool\"}],\"name\":\"setInversion_Token4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceOracles", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4fb916398db038174d8a1bf896b3151d7e8c4c8cba3c84b15fd48527cc34325d"}