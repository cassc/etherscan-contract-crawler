{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@amun/amun-protocol/contracts/interfaces/IIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * @title IIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Issuance module interface.\\n */\\ninterface IIssuanceModule {\\n    function updateIssueFee(ISetToken _setToken, uint256 _newIssueFee) external;\\n    function updateRedeemFee(ISetToken _setToken, uint256 _newRedeemFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newRedeemFee) external;\\n\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not the SetToken locker.\\n    error SetToken__CallerNotLocker(address caller, address locker);\\n    /// @notice Emitted when the caller is not the SetToken manager.\\n    error SetToken__CallerNotManager(address caller, address manager);\\n    /// @notice Emitted when the external position module already exists on the SetToken.\\n    error SetToken__ExternalPositionModuleExists();\\n    /// @notice Emitted when the component already exists on the SetToken.\\n    error SetToken__IsComponent();\\n    /// @notice Emitted when the SetToken is already locked.\\n    error SetToken__IsLocked();\\n    /// @notice Emitted when the SetToken is already unlocked.\\n    error SetToken__IsUnlocked();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetToken__ModuleInvalid(address module);\\n    /// @notice Emitted when the actual state of a module is not as expected.\\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\\n    /// @notice Emitted when the calculated multiplier is equal to zero.\\n    error SetToken__ZeroMultiplier();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and \\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex            \\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n    \\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n    \\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n    \\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n * - 4/14/23: Removed safePower function\\n * - 4/18/23: Upgrade OZ\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PreciseUnitMath {\\n    using SafeCast for int256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an attempt is made to divide by zero.\\n    error PreciseUnitMath__DivisionByZero();\\n    /// @notice Emitted when the inputs provided are invalid for the operation.\\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\\n    /// @notice Emitted when there's an overflow during the inversion operation.\\n    error PreciseUnitMath__InversionOverflow(int256 input);\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISE_UNIT) / b;\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * PRECISE_UNIT_INT) / b;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        a = a * PRECISE_UNIT_INT;\\n        int256 c = a / b;\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\\n\\n        int256 result = a / b;\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * b, PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * PRECISE_UNIT_INT, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b + range && a >= b - range;\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/IssuanceExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\nimport { IIssuanceModule } from \\\"@amun/amun-protocol/contracts/interfaces/IIssuanceModule.sol\\\";\\nimport { PreciseUnitMath } from \\\"@amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\\\";\\n\\nimport { BaseGlobalExtension } from \\\"../lib/BaseGlobalExtension.sol\\\";\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\n\\n/**\\n * @title IssuanceExtension\\n * @author Set Protocol\\n *\\n * Smart contract global extension which provides DelegatedManager owner and methodologist the ability\\n * to accrue and split issuance and redemption fees. Owner may configure the fee split percentages.\\n *\\n * Notes\\n * - the fee split is set on the Delegated Manager contract\\n * - when fees distributed via this contract will be inclusive of all fee types that have already been accrued\\n *\\n * CHANGELOG\\n * - 4/24/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n */\\ncontract IssuanceExtension is BaseGlobalExtension {\\n    using Address for address;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event IssuanceExtensionInitialized(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    event FeesDistributed(\\n        address _setToken,\\n        address indexed _ownerFeeRecipient,\\n        address indexed _methodologist,\\n        uint256 _ownerTake,\\n        uint256 _methodologistTake\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of IssuanceModule\\n    IIssuanceModule public immutable ISSUANCE_MODULE;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IManagerCore _managerCore,\\n        IIssuanceModule _issuanceModule\\n    )\\n        BaseGlobalExtension(_managerCore)\\n    {\\n        ISSUANCE_MODULE = _issuanceModule;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ANYONE CALLABLE: Distributes fees accrued to the DelegatedManager. Calculates fees for\\n     * owner and methodologist, and sends to owner fee recipient and methodologist respectively.\\n     */\\n    function distributeFees(ISetToken _setToken) external {\\n        IDelegatedManager delegatedManager = _manager(_setToken);\\n\\n        uint256 totalFees = _setToken.balanceOf(address(delegatedManager));\\n\\n        address methodologist = delegatedManager.methodologist();\\n        address ownerFeeRecipient = delegatedManager.ownerFeeRecipient();\\n\\n        uint256 ownerTake = totalFees.preciseMul(delegatedManager.ownerFeeSplit());\\n        uint256 methodologistTake = totalFees - ownerTake;\\n\\n        if (ownerTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), ownerFeeRecipient, ownerTake);\\n        }\\n\\n        if (methodologistTake != 0) {\\n            delegatedManager.transferTokens(address(_setToken), methodologist, methodologistTake);\\n        }\\n\\n        emit FeesDistributed(address(_setToken), ownerFeeRecipient, methodologist, ownerTake, methodologistTake);\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the IssuanceModule for\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function initializeModule(\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isInitializedExtension(address(this)))\\n            revert GlobalExtension__ExtensionUninitialized(address(this));\\n\\n        _initializeModule(\\n            _delegatedManager.SET_TOKEN(),\\n            _delegatedManager,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceExtension to the DelegatedManager.\\n     *\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function initializeExtension(\\n        IDelegatedManager _delegatedManager\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n\\n        emit IssuanceExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY OWNER AND VALID MANAGER: Initializes IssuanceExtension to the DelegatedManager and IssuanceModule\\n     * to the SetToken\\n     *\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function initializeModuleAndExtension(\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    ) external onlyOwnerAndValidManager(_delegatedManager) {\\n        if (!_delegatedManager.isPendingExtension(address(this)))\\n            revert GlobalExtension__ExtensionNotPending(address(this));\\n\\n        ISetToken setToken = _delegatedManager.SET_TOKEN();\\n\\n        _initializeExtension(setToken, _delegatedManager);\\n        _initializeModule(\\n            setToken,\\n            _delegatedManager,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n\\n        emit IssuanceExtensionInitialized(address(setToken), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Remove an existing SetToken and DelegatedManager tracked by the IssuanceExtension\\n     */\\n    function removeExtension() external override {\\n        IDelegatedManager delegatedManager = IDelegatedManager(msg.sender);\\n        ISetToken setToken = delegatedManager.SET_TOKEN();\\n\\n        _removeExtension(setToken, delegatedManager);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates issuance fee on IssuanceModule.\\n     *\\n     * @param _setToken     Instance of the SetToken to update issue fee for\\n     * @param _newFee       New issue fee percentage in precise units (1% = 1e16, 100% = 1e18)\\n     */\\n    function updateIssueFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\\"updateIssueFee(address,uint256)\\\", _setToken, _newFee);\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates redemption fee on IssuanceModule.\\n     *\\n     * @param _setToken     Instance of the SetToken to update redeem fee for\\n     * @param _newFee       New redeem fee percentage in precise units (1% = 1e16, 100% = 1e18)\\n     */\\n    function updateRedeemFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\\"updateRedeemFee(address,uint256)\\\", _setToken, _newFee);\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Updates fee recipient on IssuanceModule\\n     *\\n     * @param _setToken         Instance of the SetToken to update fee recipient for\\n     * @param _newFeeRecipient  Address of new fee recipient. This should be the address of the DelegatedManager\\n     */\\n    function updateFeeRecipient(\\n        ISetToken _setToken,\\n        address _newFeeRecipient\\n    ) external onlyOwner(_setToken) {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"updateFeeRecipient(address,address)\\\",\\n            _setToken,\\n            _newFeeRecipient\\n        );\\n        _invokeManager(_manager(_setToken), address(ISSUANCE_MODULE), callData);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Internal function to initialize IssuanceModule on the SetToken associated with the DelegatedManager.\\n     *\\n     * @param _setToken                     Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager             Instance of the DelegatedManager to initialize the TradeModule for\\n     * @param _maxManagerFee                Maximum fee that can be charged on issue and redeem\\n     * @param _managerIssueFee              Fee to charge on issuance\\n     * @param _managerRedeemFee             Fee to charge on redemption\\n     * @param _feeRecipient                 Address to send fees to\\n     * @param _managerIssuanceHook          Instance of the contract with the Pre-Issuance Hook function\\n     */\\n    function _initializeModule(\\n        ISetToken _setToken,\\n        IDelegatedManager _delegatedManager,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        address _managerIssuanceHook\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"initialize(address,uint256,uint256,uint256,address,address)\\\",\\n            _setToken,\\n            _maxManagerFee,\\n            _managerIssueFee,\\n            _managerRedeemFee,\\n            _feeRecipient,\\n            _managerIssuanceHook\\n        );\\n        _invokeManager(_delegatedManager, address(ISSUANCE_MODULE), callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDelegatedManager.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\ninterface IDelegatedManager {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the asset was already added to the allow list.\\n    error DelegatedManager__AssetExists(address asset);\\n    /// @notice Emitted when the asset does not exist on the allow list.\\n    error DelegatedManager__AssetNotAllowed();\\n    /// @notice Emitted when the caller is not the methodologist.\\n    error DelegatedManager__CallerNotMethodologist(address caller, address methodologist);\\n    /// @notice Emitted when an extension tries to call/interact with a SetToken on the DelegatedManager.\\n    error DelegatedManager__CallingSetTokenForbidden();\\n    /// @notice Emitted when the extension was already added to the allow list.\\n    error DelegatedManager__ExtensionExists(address extension);\\n    /// @notice Emitted when the extension is not in the pending state.\\n    error DelegatedManager__ExtensionNotPending(address extension);\\n    /// @notice Emitted when the extension is not in the initialized state on the allow list.\\n    error DelegatedManager__ExtensionUninitialized(address extension);\\n    /// @notice Emitted when there are existing extensions on the DelegatedManager.\\n    error DelegatedManager__ExtensionsExist(uint256 numExtensions);\\n    /// @notice Emitted when the new fee split amount is invalid.\\n    error DelegatedManager__FeeSplitInvalid();\\n    /// @notice Emitted when the operator was already added to the allow list.\\n    error DelegatedManager__OperatorExists(address operator);\\n    /// @notice Emitted when the operator does not exist on the allow list.\\n    error DelegatedManager__OperatorNotAllowed(address operator);\\n    /// @notice Emitted when a zero address is provided.\\n    error DelegatedManager__ZeroAddress();\\n\\n\\n    /* ============ Events ============ */\\n\\n    event MethodologistChanged(\\n        address indexed _newMethodologist\\n    );\\n\\n    event ExtensionAdded(\\n        address indexed _extension\\n    );\\n\\n    event ExtensionRemoved(\\n        address indexed _extension\\n    );\\n\\n    event ExtensionInitialized(\\n        address indexed _extension\\n    );\\n\\n    event OperatorAdded(\\n        address indexed _operator\\n    );\\n\\n    event OperatorRemoved(\\n        address indexed _operator\\n    );\\n\\n    event AllowedAssetAdded(\\n        address indexed _asset\\n    );\\n\\n    event AllowedAssetRemoved(\\n        address indexed _asset\\n    );\\n\\n    event UseAssetAllowlistUpdated(\\n        bool _status\\n    );\\n\\n    event OwnerFeeSplitUpdated(\\n        uint256 _newFeeSplit\\n    );\\n\\n    event OwnerFeeRecipientUpdated(\\n        address indexed _newFeeRecipient\\n    );\\n\\n    /* ============ Functions ============ */\\n    \\n    function interactManager(address _module, bytes calldata _encoded) external;\\n\\n    function initializeExtension() external;\\n\\n    function transferTokens(address _token, address _destination, uint256 _amount) external;\\n\\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external;\\n\\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external;\\n\\n    function setMethodologist(address _newMethodologist) external;\\n\\n    function transferOwnership(address _owner) external;\\n\\n    function SET_TOKEN() external view returns(ISetToken); /* solhint-disable-line func-name-mixedcase */\\n    function owner() external view returns(address);\\n    function methodologist() external view returns(address);\\n    function operatorAllowlist(address _operator) external view returns(bool);\\n    function assetAllowlist(address _asset) external view returns(bool);\\n    function useAssetAllowlist() external view returns(bool);\\n    function isAllowedAsset(address _asset) external view returns(bool);\\n    function isPendingExtension(address _extension) external view returns(bool);\\n    function isInitializedExtension(address _extension) external view returns(bool);\\n    function getExtensions() external view returns(address[] memory);\\n    function getOperators() external view returns(address[] memory);\\n    function getAllowedAssets() external view returns(address[] memory);\\n    function ownerFeeRecipient() external view returns(address);\\n    function ownerFeeSplit() external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IGlobalExtension {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an asset is not approved on the DelegatedManager.\\n    error GlobalExtension__AssetForbidden(address emitter, address asset);\\n    /// @notice Emitted when the caller is not an approved operator.\\n    error GlobalExtension__CallerNotApprovedOperator(address emitter, address caller);\\n    /// @notice Emitted when the caller is not an externally owned account.\\n    error GlobalExtension__CallerNotEOA(address emitter, address msgSender, address txOrigin);\\n    /// @notice Emitted when the caller is not enabled on the ManagerCore.\\n    error GlobalExtension__CallerNotManagerOnCore(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the specified methodologist.\\n    error GlobalExtension__CallerNotMethodologist(\\n        address emitter, \\n        address caller, \\n        address methodologist\\n    );\\n    /// @notice Emitted when the caller is not the specified manager of the SetToken.\\n    error GlobalExtension__CallerNotSetTokenManager(\\n        address emitter, \\n        address caller, \\n        address manager\\n    );\\n    /// @notice Emitted when the caller is not the specified owner.\\n    error GlobalExtension__CallerNotOwner(\\n        address emitter, \\n        address caller, \\n        address owner\\n    );\\n    /// @notice Emitted when the extension is not initialized.\\n    error GlobalExtension__ExtensionUninitialized(address emittingExtension);\\n    /// @notice Emitted when the extension is not pending.\\n    error GlobalExtension__ExtensionNotPending(address emittingExtension);\\n\\n    /* ============ Events ============ */\\n\\n    event ExtensionRemoved(\\n        address indexed _setToken,\\n        address indexed _delegatedManager\\n    );\\n\\n    /* ============ Functions ============ */\\n\\n    function removeExtension() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IManagerCore.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IManagerCore {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not a valid factory.\\n    error ManagerCore__CallerNotFactory(address caller);\\n    /// @notice Emitted when the ManagerCore is already initialized.\\n    error ManagerCore__ContractIsInitialized();\\n    /// @notice Emitted when performing an operation before initialization of the ManagerCore.\\n    error ManagerCore__ContractUninitialized();\\n    /// @notice Emitted when an extension already exists on the ManagerCore.\\n    error ManagerCore__ExtensionExists();\\n    /// @notice Emitted when the provided extension is not valid.\\n    error ManagerCore__ExtensionInvalid();\\n    /// @notice Emitted when the factory already exists on the ManagerCore.\\n    error ManagerCore__FactoryExists();\\n    /// @notice Emitted when the provided factory is not valid.\\n    error ManagerCore__FactoryInvalid();\\n    /// @notice Emitted when the manager already exists on the ManagerCore.\\n    error ManagerCore__ManagerExists();\\n    /// @notice Emitted when the provided manager is not valid.\\n    error ManagerCore__ManagerInvalid();\\n    /// @notice Emitted when a zero address is provided.\\n    error ManagerCore__ZeroAddress();\\n\\n\\n    /* ============ Events ============ */\\n\\n    event ExtensionAdded(address indexed _extension);\\n    event ExtensionRemoved(address indexed _extension);\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event ManagerAdded(address indexed _manager, address indexed _factory);\\n    event ManagerRemoved(address indexed _manager);\\n\\n    /* ============ Functions ============ */\\n\\n    function addManager(address _manager) external;\\n    function isExtension(address _extension) external view returns(bool);\\n    function isFactory(address _factory) external view returns(bool);\\n    function isManager(address _manager) external view returns(bool);\\n    function owner() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/lib/BaseGlobalExtension.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressArrayUtils } from \\\"@amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\\\";\\nimport { ISetToken } from \\\"@amun/amun-protocol/contracts/interfaces/ISetToken.sol\\\";\\n\\nimport { IDelegatedManager } from \\\"../interfaces/IDelegatedManager.sol\\\";\\nimport { IManagerCore } from \\\"../interfaces/IManagerCore.sol\\\";\\nimport { IGlobalExtension } from \\\"../interfaces/IGlobalExtension.sol\\\";\\n\\n/**\\n * @title BaseGlobalExtension\\n * @author Set Protocol\\n *\\n * Abstract class that houses common global extension-related functions. Global extensions must\\n * also have their own initializeExtension function (not included here because interfaces will vary).\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/27/23: Added custom errors\\n * - 10/10/23: Added IGlobalExtension interface\\n */\\nabstract contract BaseGlobalExtension is IGlobalExtension {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the ManagerCore\\n    IManagerCore public immutable MANAGER_CORE;\\n\\n    // Mapping from Set Token to DelegatedManager\\n    mapping(ISetToken => IDelegatedManager) public setManagers;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not the SetToken manager contract owner\\n     */\\n    modifier onlyOwner(ISetToken _setToken) {\\n        _onlyOwner(_setToken);\\n        _;\\n    }\\n    function _onlyOwner(ISetToken _setToken) internal view {\\n        address owner = _manager(_setToken).owner();\\n        if (msg.sender != owner) revert GlobalExtension__CallerNotOwner(address(this), msg.sender, owner);\\n    }\\n\\n    /**\\n     * Throws if the sender is not the SetToken methodologist\\n     */\\n    modifier onlyMethodologist(ISetToken _setToken) {\\n        _onlyMethodologist(_setToken);\\n        _;\\n    }\\n    function _onlyMethodologist(ISetToken _setToken) internal view {\\n        address methodologist = _manager(_setToken).methodologist();\\n        if (msg.sender != methodologist)\\n            revert GlobalExtension__CallerNotMethodologist(address(this), msg.sender, methodologist);\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken operator\\n     */\\n    modifier onlyOperator(ISetToken _setToken) {\\n        _onlyOperator(_setToken);\\n        _;\\n    }\\n    function _onlyOperator(ISetToken _setToken) internal view {\\n        if (!_manager(_setToken).operatorAllowlist(msg.sender))\\n            revert GlobalExtension__CallerNotApprovedOperator(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * Throws if the sender is not the SetToken manager contract owner or\\n     * if the manager is not enabled on the ManagerCore\\n     */\\n    modifier onlyOwnerAndValidManager(IDelegatedManager _delegatedManager) {\\n        _onlyOwnerAndValidManager(_delegatedManager);\\n        _;\\n    }\\n    function _onlyOwnerAndValidManager(IDelegatedManager _delegatedManager) internal view {\\n        address owner = _delegatedManager.owner();\\n        if (msg.sender != owner) revert GlobalExtension__CallerNotOwner(address(this), msg.sender, owner);\\n        if (!MANAGER_CORE.isManager(address(_delegatedManager)))\\n            revert GlobalExtension__CallerNotManagerOnCore(address(this), address(_delegatedManager));\\n    }\\n\\n    /**\\n     * Throws if asset is not allowed to be held by the Set\\n     */\\n    modifier onlyAllowedAsset(ISetToken _setToken, address _asset) {\\n        _onlyAllowedAsset(_setToken, _asset);\\n        _;\\n    }\\n    function _onlyAllowedAsset(ISetToken _setToken, address _asset) internal view {\\n        if (!_manager(_setToken).isAllowedAsset(_asset))\\n            revert GlobalExtension__AssetForbidden(address(this), _asset);\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _managerCore             Address of ManagerCore contract\\n     */\\n    constructor(IManagerCore _managerCore) {\\n        MANAGER_CORE = _managerCore;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY MANAGER: Deletes SetToken/Manager state from extension. Must only be callable by manager!\\n     */\\n    function removeExtension() external virtual;\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Invoke call from manager\\n     *\\n     * @param _delegatedManager      Manager to interact with\\n     * @param _module                Module to interact with\\n     * @param _encoded               Encoded byte data\\n     */\\n    function _invokeManager(IDelegatedManager _delegatedManager, address _module, bytes memory _encoded) internal {\\n        _delegatedManager.interactManager(_module, _encoded);\\n    }\\n\\n    /**\\n     * Internal function to grab manager of passed SetToken from extensions data structure.\\n     *\\n     * @param _setToken         SetToken who's manager is needed\\n     */\\n    function _manager(ISetToken _setToken) internal view returns (IDelegatedManager) {\\n        return setManagers[_setToken];\\n    }\\n\\n    /**\\n     * Internal function to initialize extension to the DelegatedManager.\\n     *\\n     * @param _setToken             Instance of the SetToken corresponding to the DelegatedManager\\n     * @param _delegatedManager     Instance of the DelegatedManager to initialize\\n     */\\n    function _initializeExtension(ISetToken _setToken, IDelegatedManager _delegatedManager) internal {\\n        setManagers[_setToken] = _delegatedManager;\\n\\n        _delegatedManager.initializeExtension();\\n    }\\n\\n    /**\\n     * ONLY MANAGER: Internal function to delete SetToken/Manager state from extension\\n     */\\n    function _removeExtension(ISetToken _setToken, IDelegatedManager _delegatedManager) internal {\\n        address manager = address(_manager(_setToken));\\n        if (msg.sender != manager)\\n            revert GlobalExtension__CallerNotSetTokenManager(address(this), msg.sender, manager);\\n\\n        delete setManagers[_setToken];\\n\\n        emit ExtensionRemoved(address(_setToken), address(_delegatedManager));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IManagerCore\",\"name\":\"_managerCore\",\"type\":\"address\"},{\"internalType\":\"contract IIssuanceModule\",\"name\":\"_issuanceModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"GlobalExtension__AssetForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotApprovedOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txOrigin\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotManagerOnCore\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"methodologist\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotMethodologist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"GlobalExtension__CallerNotSetTokenManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emittingExtension\",\"type\":\"address\"}],\"name\":\"GlobalExtension__ExtensionNotPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emittingExtension\",\"type\":\"address\"}],\"name\":\"GlobalExtension__ExtensionUninitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegatedManager\",\"type\":\"address\"}],\"name\":\"ExtensionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ownerFeeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_methodologist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ownerTake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_methodologistTake\",\"type\":\"uint256\"}],\"name\":\"FeesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_delegatedManager\",\"type\":\"address\"}],\"name\":\"IssuanceExtensionInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ISSUANCE_MODULE\",\"outputs\":[{\"internalType\":\"contract IIssuanceModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_CORE\",\"outputs\":[{\"internalType\":\"contract IManagerCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDelegatedManager\",\"name\":\"_delegatedManager\",\"type\":\"address\"}],\"name\":\"initializeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDelegatedManager\",\"name\":\"_delegatedManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxManagerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managerIssueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managerRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerIssuanceHook\",\"type\":\"address\"}],\"name\":\"initializeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDelegatedManager\",\"name\":\"_delegatedManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxManagerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managerIssueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managerRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managerIssuanceHook\",\"type\":\"address\"}],\"name\":\"initializeModuleAndExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setManagers\",\"outputs\":[{\"internalType\":\"contract IDelegatedManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateIssueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IssuanceExtension", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000075837a807f0170a0b72cbd1228069703c8aea12f000000000000000000000000496adbb46239d7ecc1c949cbb965c52585554396", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}