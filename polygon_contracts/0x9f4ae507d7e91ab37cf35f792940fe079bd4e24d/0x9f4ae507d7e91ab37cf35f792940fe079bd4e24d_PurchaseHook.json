{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/PurchaseHook.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nerror WRONG_PASSWORD();\\nerror NOT_AUTHORIZED();\\n\\ncontract PurchaseHook {\\n    mapping(address => address) public signers;\\n\\n    /** NO OP */\\n    constructor() {}\\n\\n    /**\\n     * Function to set the signer for a lock.\\n     */\\n    function setSigner(address lock, address signer) public {\\n        if (!IPublicLockV12(lock).isLockManager(msg.sender)) {\\n            revert NOT_AUTHORIZED();\\n        }\\n        signers[lock] = signer;\\n    }\\n\\n    /**\\n     * Price is the same for everyone... \\n     * but we fail if signer of data does not match the lock's password.\\n     */\\n    function keyPurchasePrice(\\n        address, /* from */\\n        address recipient,\\n        address, /* referrer */\\n        bytes calldata signature /* data */\\n    ) external view returns (uint256 minKeyPrice) {\\n        if(getSigner(toString(recipient), signature) == signers[msg.sender]) {\\n            return IPublicLockV12(msg.sender).keyPrice();\\n        }\\n        revert WRONG_PASSWORD();\\n    }\\n\\n    /**\\n     * Debug function\\n     */\\n    function getSigner(\\n        string memory message,\\n        bytes calldata signature\\n    ) public pure returns (address recoveredAddress) {\\n        bytes32 hash = keccak256(abi.encodePacked(message));\\n        bytes32 signedMessageHash = ECDSA.toEthSignedMessageHash(hash);\\n        return ECDSA.recover(signedMessageHash, signature);\\n    }\\n\\n    /**\\n     * Helper functions to turn address into string so we can verify \\n     * the signature (address is signed as string on the client)\\n     */\\n    function toString(address account) public pure returns (string memory) {\\n        return toString(abi.encodePacked(account));\\n    }\\n\\n    function toString(uint256 value) public pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes32 value) public pure returns (string memory) {\\n        return toString(abi.encodePacked(value));\\n    }\\n\\n    function toString(bytes memory data) public pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    /**\\n     * No-op but required for the hook to work\\n     */\\n    function onKeyPurchase(\\n        uint256, /* tokenId */\\n        address, /*from*/\\n        address, /*recipient*/\\n        address, /*referrer*/\\n        bytes calldata, /*data*/\\n        uint256, /*minKeyPrice*/\\n        uint256 /*pricePaid*/\\n    ) external {\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NOT_AUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WRONG_PASSWORD\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recoveredAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PurchaseHook", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}