{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    /*constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }*/\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _setupMetaData(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) internal virtual {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\nabstract contract IERC223Reciever {\r\n\r\n    struct ERC223TransferInfo\r\n    {\r\n        address token_contract;\r\n        address sender;\r\n        uint256 value;\r\n        bytes   data;\r\n    }\r\n\r\n    ERC223TransferInfo private tkn;\r\n\r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenReceived(address _from, uint _value, bytes memory _data) public virtual\r\n    {\r\n        /**\r\n         * @dev Note that inside of the token transaction handler the actual sender of token transfer is accessible via the tkn.sender variable\r\n         * (analogue of msg.sender for Ether transfers)\r\n         *\r\n         * tkn.value - is the amount of transferred tokens\r\n         * tkn.data  - is the \"metadata\" of token transfer\r\n         * tkn.token_contract is most likely equal to msg.sender because the token contract typically invokes this function\r\n        */\r\n        tkn.token_contract = msg.sender;\r\n        tkn.sender         = _from;\r\n        tkn.value          = _value;\r\n        tkn.data           = _data;\r\n\r\n        // ACTUAL CODE\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC223 standard token as defined in the EIP.\r\n */\r\ninterface IERC223 is IERC20{\r\n\r\n    /**\r\n     * @dev Transfers `value` tokens from `msg.sender` to `to` address with `data` parameter\r\n     * and returns `true` on success.\r\n     */\r\n    function transfer(address to, uint value, bytes calldata data) external returns (bool success);\r\n\r\n    function saveBatchTransferToMultipleWallets(address sender, address[] memory tos, uint256[] memory amounts, bytes memory data) external;\r\n\r\n    function saveBatchTransferMultipleToMultipleWallets(\r\n        address[] memory senders,\r\n        address[] memory tos,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\n\r\ncontract ERC223 is ERC20, IERC223Reciever, IERC223{\r\n\r\n\r\n\r\n    /**\r\n     * @dev Additional event that is fired on successful transfer and logs transfer metadata,\r\n     *      this event is implemented to keep Transfer event compatible with ERC20.\r\n     */\r\n    event TransferData(bytes data);\r\n\r\n    /**\r\n     * @dev ERC223 tokens must explicitly return \"erc223\" on standard() function call.\r\n     */\r\n    function standard() public pure returns (string memory)\r\n    {\r\n        return \"erc223\";\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _recipient    Receiver address.\r\n     * @param _amount Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _recipient, uint _amount, bytes memory _data)\r\n    public returns (bool success){\r\n        require(msg.sender != address(0), \"ERC223: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC223: transfer to the zero address\");\r\n\r\n        return _transferFrom(msg.sender, _recipient, _amount, _data);\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint _amount, bytes memory _data)\r\n    public returns (bool success){\r\n        require(msg.sender != address(0), \"ERC223: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC223: transfer to the zero address\");\r\n\r\n        return _transferFrom(_sender, _recipient, _amount, _data);\r\n    }\r\n\r\n    function _transferFrom(address _sender, address _recipient, uint _amount, bytes memory _data) internal returns (bool success) {\r\n        if(_sender != msg.sender){\r\n            uint256 currentAllowance = _allowances[_sender][msg.sender];\r\n            require(currentAllowance >= _amount, \"ERC223: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(_sender, msg.sender, currentAllowance - _amount);\r\n            }\r\n        } else {\r\n            require(_balances[_sender] >= _amount, \"ERC223: transfer amount exceeds balance\");\r\n        }\r\n        uint codeLength;\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_recipient)\r\n        }\r\n\r\n        _balances[_sender] = _balances[_sender] - _amount;\r\n        _balances[_recipient] = _balances[_recipient] + _amount;\r\n        if(codeLength>0) {\r\n            IERC223Reciever receiver = IERC223Reciever(_recipient);\r\n            receiver.tokenReceived(_sender, _amount, _data);\r\n        }\r\n        emit Transfer(msg.sender, _recipient, _amount);\r\n        if(_data.length > 0)\r\n            emit TransferData(_data);\r\n\r\n        return true;\r\n    }\r\n\r\n    function saveBatchTransferToMultipleWallets(\r\n        address sender,\r\n        address[] memory tos,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public override{\r\n        require(amounts.length == tos.length, \"ERC721: invalid arguments\");\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            _transferFrom(sender, tos[i], amounts[i], data);\r\n        }\r\n    }\r\n\r\n    function saveBatchTransferMultipleToMultipleWallets(\r\n        address[] memory senders,\r\n        address[] memory tos,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public override{\r\n        require(senders.length == amounts.length && amounts.length == tos.length, \"ERC721: invalid arguments\");\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            _transferFrom(senders[i], tos[i], amounts[i], data);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC223ART is ERC223{\r\n    event AirdropPayout (address user, uint amount, uint8 airDropType);\r\n    event DencentralAirdropPayout (address user, uint amount);\r\n\r\n\r\n    uint internal presaleInphases = (250+4500+885+1775+2100+2350+3430+4430) * 10**23;\r\n    uint public tokenPhase = 0;\r\n    uint[] public tokenPrice = [10 *10**3, 12 *10**3, 32 *10**3, 42 *10**3, 52 *10**3, 64 *10**3, 85 *10**3, 290 *10**3];\r\n    uint[] public tokensInPhase = [250*10**23, 4500*10**23, 885*10**23, 1775*10**23, 2100*10**23, 2350*10**23, 3430*10**23, 4430*10**23];\r\n    uint totalBuyPresale = 0;\r\n    mapping(address => uint) buyed;\r\n    mapping(address => uint) public  decentralPayed;\r\n\r\n    address uni;\r\n    uint totalBuyAddresses = 0;\r\n    uint[] public airdropBank = [1500*10**21, 750*10**21];\r\n    uint8 airdropIndex = 0;\r\n\r\n    struct AirDropValues {\r\n        bool airdropPercent1;\r\n        bool airdropPercent2;\r\n        bool airdrop;\r\n    }\r\n    mapping(address => AirDropValues) public airDropUsers;\r\n\r\n\r\n    function fixPrice (uint phase, uint restTokens, uint input, uint price, uint tokens)\r\n        private view returns (bool enoughTokens, uint newPrice, uint newTokens) {\r\n        uint priceForFullPhase = restTokens*tokenPrice[phase] / 10**6;\r\n        uint computedTokens = input / tokenPrice[phase];\r\n        if(priceForFullPhase >= input){\r\n          return (\r\n              false,\r\n              computedTokens * tokenPrice[phase] + price,\r\n              computedTokens * 10**6 +tokens\r\n          );\r\n        } else {\r\n          if(phase == 7){\r\n            return (\r\n                true,\r\n                priceForFullPhase + price,\r\n                restTokens + tokens\r\n            );\r\n          } else {\r\n            return fixPrice(\r\n              phase + 1,\r\n              tokensInPhase[phase+1],\r\n              input-priceForFullPhase,\r\n              priceForFullPhase+price,\r\n              restTokens+tokens\r\n            );\r\n          }\r\n        }\r\n    }\r\n\r\n\r\n    function beforeBuyToken(uint weiAmount, bool _airdrop, address sender) public view returns(uint tokensAmount, string memory error) {\r\n        if(weiAmount == 0){\r\n            return (0, \"Price cannot be zero\");\r\n        }\r\n        if(_airdrop && airdropBank[1] == 0) {\r\n            return (0, \"Airdrop is over\");\r\n        }\r\n        if(_airdrop && ((airdropBank[0] > 0 && airDropUsers[sender].airdropPercent1) || airDropUsers[sender].airdropPercent2)) {\r\n            return (0, \"You have already used this type of airdrop\");\r\n        }\r\n        (bool enoughTokens, uint newPrice, uint newTokens) = fixPrice(tokenPhase, tokensInPhase[tokenPhase], weiAmount,0,0);\r\n        if(enoughTokens){\r\n            return (0, \"Not enough tokens to sell\");\r\n        }\r\n        if(newPrice == weiAmount){\r\n            return (newTokens, \"\");\r\n        }\r\n        return (0, \"Wrong number of WEI\");\r\n    }\r\n\r\n    function presaleInfo() public view returns (uint _totalBuyPresale, uint _totalBuyAddresses){\r\n        return (totalBuyPresale, totalBuyAddresses);\r\n    }\r\n\r\n\r\n    function getAirDrop(uint want, address sender) private returns (string memory message, uint amount) {\r\n        if(airdropBank[1] == 0){\r\n            return (\"Airdrop is over\", 0);\r\n        }\r\n        if(airdropBank[airdropIndex] > 0) {\r\n            (uint _amount) = sendAirdrop(airdropBank[airdropIndex], want, sender);\r\n            if(_amount < want){\r\n                airdropBank[airdropIndex] = 0;\r\n            } else {\r\n                airdropBank[airdropIndex] -= want;\r\n            }\r\n            if(airdropBank[airdropIndex] == 0) airdropIndex = 1;\r\n            return (\"Success\", _amount);\r\n        }\r\n    }\r\n\r\n    function airDrop() public returns (string memory message, uint amount) {\r\n        if(airDropUsers[msg.sender].airdrop) {\r\n            return (\"You have already used this type of airdrop\", 0);\r\n        }\r\n        (string memory _message, uint _amount) = getAirDrop(100*10**18, msg.sender);\r\n        airDropUsers[msg.sender].airdrop = true;\r\n        emit AirdropPayout(msg.sender, _amount, 0);\r\n        return (_message, _amount);\r\n    }\r\n\r\n    function sendAirdrop(uint bank, uint want, address sender) private returns (uint amount){\r\n        if(bank > want) {\r\n            ERC223(address(this)).transfer(sender, want);\r\n            return (want);\r\n        } else {\r\n            ERC223(address(this)).transfer(sender, bank);\r\n            return (bank);\r\n        }\r\n    }\r\n\r\n    function buyTokens(bool airdrop) public payable {\r\n        (uint tokensAmount, string memory error) = beforeBuyToken(msg.value, airdrop, msg.sender);\r\n        require(tokensAmount > 0, error);\r\n\r\n        payable(uni).transfer(msg.value);\r\n        totalBuyPresale += tokensAmount;\r\n\r\n        if(airdrop){\r\n            if(airdropBank[0] > 0 && !airDropUsers[msg.sender].airdropPercent1){\r\n                airDropUsers[msg.sender].airdropPercent1 = true;\r\n            } else if(airdropBank[1] > 0 && !airDropUsers[msg.sender].airdropPercent2){\r\n                airDropUsers[msg.sender].airdropPercent2 = true;\r\n            }\r\n            uint8 aType = airdropBank[0] > 0 ? 1 : 2;\r\n            (string memory message, uint airDropAmount) = getAirDrop(tokensAmount / (airdropBank[0] > 0 ? 10 : 20), msg.sender);\r\n            require(bytes(message).length == 7, message);\r\n            emit AirdropPayout(msg.sender, airDropAmount, aType);\r\n        }\r\n\r\n\r\n        if(buyed[msg.sender] == 0){\r\n            buyed[msg.sender] = 1;\r\n            totalBuyAddresses++;\r\n        }\r\n        ERC223(address(this)).transfer(msg.sender, tokensAmount);\r\n        do{\r\n            if(tokensInPhase[tokenPhase] > tokensAmount) {\r\n                tokensInPhase[tokenPhase] -= tokensAmount;\r\n                tokensAmount = 0;\r\n            } else {\r\n                tokensAmount -= tokensInPhase[tokenPhase];\r\n                tokensInPhase[tokenPhase] = 0;\r\n                tokenPhase++;\r\n            }\r\n        } while (tokensAmount != 0);\r\n    }\r\n}\r\n\r\n\r\ninterface IFxMintableERC20 is IERC20Metadata {\r\n    function fxManager() external returns (address);\r\n\r\n    function connectedToken() external returns (address);\r\n\r\n    function initialize(\r\n        address fxManager,\r\n        address connectedToken,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        address _uni,\r\n        address selfAddress_\r\n    ) external;\r\n\r\n    function mintToken(address user, uint256 amount) external;\r\n\r\n    function burn(address user, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract FxERC223ART is ERC223ART, IFxMintableERC20 {\r\n    address internal _fxManager;\r\n    address internal _connectedToken;\r\n\r\n    function initialize(\r\n        address fxManager_,\r\n        address connectedToken_,\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        address uni_,\r\n        address selfAddress_\r\n    ) public {\r\n        require(_fxManager == address(0x0) && _connectedToken == address(0x0), \"Token is already initialized\");\r\n        _fxManager = fxManager_;\r\n        _connectedToken = connectedToken_;\r\n\r\n        presaleInphases = (250+4500+885+1775+2100+2350+3430+4430) * 10**23;\r\n        tokenPrice = [10 *10**3, 12 *10**3, 32 *10**3, 42 *10**3, 52 *10**3, 64 *10**3, 85 *10**3, 290 *10**3];\r\n        tokensInPhase = [250*10**23, 4500*10**23, 885*10**23, 1775*10**23, 2100*10**23, 2350*10**23, 3430*10**23, 4430*10**23];\r\n        airdropBank = [1500*10**21, 750*10**21];\r\n\r\n        _mint(selfAddress_, presaleInphases + airdropBank[0] + airdropBank[1]);\r\n        _mint(uni_, (25000+27575)*10**22);\r\n\r\n        uni = uni_;\r\n\r\n        // setup meta data\r\n        _setupMetaData(name_, symbol_, decimals_);\r\n    }\r\n\r\n    // fxManager returns fx manager\r\n    function fxManager() public view returns (address) {\r\n        return _fxManager;\r\n    }\r\n\r\n    // connectedToken returns root token\r\n    function connectedToken() public view returns (address) {\r\n        return _connectedToken;\r\n    }\r\n\r\n    function mintToken(address user, uint256 amount) external {\r\n        require(msg.sender == _fxManager, \"Invalid sender\");\r\n        _mint(user, amount);\r\n    }\r\n\r\n    function burn(address user, uint256 amount) public {\r\n        require(msg.sender == _fxManager, \"Invalid sender\");\r\n        _burn(user, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"airDropType\",\"type\":\"uint8\"}],\"name\":\"AirdropPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DencentralAirdropPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransferData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airDropUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"airdropPercent1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"airdropPercent2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"airdrop\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropBank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_airdrop\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"beforeBuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"airdrop\",\"type\":\"bool\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decentralPayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fxManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"connectedToken_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"uni_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"selfAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBuyPresale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBuyAddresses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"saveBatchTransferMultipleToMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"saveBatchTransferToMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensInPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FxERC223ART", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6558d1cc5800d8278647ee0744e5ee8f59333be46e1f957196807931c33a3c37"}