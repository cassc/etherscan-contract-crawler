{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IController {\\n    \\n   /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\\n    /// @notice Emitted when the caller is not a factory.\\n    error Controller__CallerNotFactory(address caller);\\n    /// @notice Emitted when a factory already exists on the Controller.\\n    error Controller__FactoryExists();\\n    /// @notice Emitted when a factory does not exist on the Controller.\\n    error Controller__FactoryInvalid();\\n    /// @notice Emitted when a fee type already exists on the Controller.\\n    error Controller__FeeTypeExists();\\n    /// @notice Emitted when a fee type does not exist on the Controller.\\n    error Controller__FeeTypeInvalid();\\n    /// @notice Emitted when the Controller is already initialized.\\n    error Controller__IsInitialized();\\n    /// @notice Emitted when a module is already enabled on the Controller.\\n    error Controller__ModuleExists();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error Controller__ModuleInvalid();\\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\\n    error Controller__ResourceExists();\\n    /// @notice Emitted when a resource is not enabled on the Controller.\\n    error Controller__ResourceInvalid();\\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \\n    error Controller__SetExists();\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error Controller__SetInvalid();\\n    /// @notice Emitted when the Controller is not initialized.\\n    error Controller__Uninitialized();\\n    /// @notice Emitted when a zero address is provided.\\n    error Controller__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IIntegrationRegistry {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an adapter already exists on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationExists();\\n    /// @notice Emitted when an adapter does not exist on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationInvalid();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error IntegrationRegistry__ModuleInvalid();\\n    /// @notice Emitted when the modules and adapters length mismatch.\\n    error IntegrationRegistry__ModulesAdaptersLengthMismatch(uint256 numModules, uint256 numAdapters);\\n    /// @notice Emitted when the modules length is zero.\\n    error IntegrationRegistry__ModulesEmpty();\\n    /// @notice Emitted when the modules and names length mismatch.\\n    error IntegrationRegistry__ModulesNamesLengthMismatch(uint256 numModules, uint256 numNames);\\n    /// @notice Emitted when a zero address is provided.\\n    error IntegrationRegistry__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n    \\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid adapter is provided for a specific integration hash.\\n    error Module__AdapterInvalid(address emitter, bytes32 integrationHash);\\n    /// @notice Emitted when the caller is not an initialized module.\\n    error Module__CallerNotInitializedModule(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the set manager.\\n    error Module__CallerNotManager(address emitter, address caller, address setToken);\\n    /// @notice Emitted when a the calling module (msg.sender) is not enabled on the Controller.\\n    error Module__ModuleInvalid(address emitter, address moduleAndCaller);\\n    /// @notice Emitted when an invalid SetToken address is provided.\\n    error Module__SetTokenInvalid(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is both invalid and uninitialized.\\n    error Module__SetTokenInvalidAndUninitialized(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is not a pending module.\\n    error Module__SetTokenNotPending(address emitter, address setToken);\\n\\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of assets ones, asset twos, and oracles mismatch. \\n    error PriceOracle__ArrayLengthsMismatch(uint256 assetsOnesLength, uint256 assetsTwosLength, uint256 oraclesLength);\\n    /// @notice Emitted when the caller is the Controller or the caller is not a set, \\n    ///         module, resource, or factory enabled on the Controller.\\n    error PriceOracle__CallerNotSystemContract(address caller);\\n    /// @notice Emitted when a price is not found direct or inverse, from master, and from adapters.\\n    error PriceOracle__PriceNotFound();\\n    /// @notice Emitted when an asset pair already exists on the PriceOracle.\\n    error PriceOracle__PairExists();\\n    /// @notice Emitted when an asset pair does not exist on the PriceOracle.\\n    error PriceOracle__PairInvalid();\\n    /// @notice Emitted when an adapter already exists on the PriceOracle.\\n    error PriceOracle__AdapterExists();\\n    /// @notice Emitted when an adapter does not exist on the PriceOracle.\\n    error PriceOracle__AdapterInvalid();\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not the SetToken locker.\\n    error SetToken__CallerNotLocker(address caller, address locker);\\n    /// @notice Emitted when the caller is not the SetToken manager.\\n    error SetToken__CallerNotManager(address caller, address manager);\\n    /// @notice Emitted when the external position module already exists on the SetToken.\\n    error SetToken__ExternalPositionModuleExists();\\n    /// @notice Emitted when the component already exists on the SetToken.\\n    error SetToken__IsComponent();\\n    /// @notice Emitted when the SetToken is already locked.\\n    error SetToken__IsLocked();\\n    /// @notice Emitted when the SetToken is already unlocked.\\n    error SetToken__IsUnlocked();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetToken__ModuleInvalid(address module);\\n    /// @notice Emitted when the actual state of a module is not as expected.\\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\\n    /// @notice Emitted when the calculated multiplier is equal to zero.\\n    error SetToken__ZeroMultiplier();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and \\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex            \\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n    \\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n    \\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n    \\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStreamingFeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IStreamingFeeModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the specified fee exceeds the maximum allowable limit.\\n    error StreamingFeeModule__FeeTooHigh(uint256 maxFee);\\n    /// @notice Emitted when a zero address is provided.\\n    error StreamingFeeModule__ZeroAddress();\\n\\n    struct FeeState {\\n        uint256 maxStreamingFeePercentage;\\n        uint256 streamingFeePercentage;\\n        uint256 lastStreamingFeeTimestamp;\\n        address feeRecipient;\\n    }\\n\\n    /* ============ Functions ============ */\\n\\n    function feeStates(ISetToken _setToken) external view returns (FeeState memory);\\n    function getFee(ISetToken _setToken) external view returns (uint256);\\n    function accrueFee(ISetToken _setToken) external;\\n    function updateStreamingFee(ISetToken _setToken, uint256 _newFee) external;\\n    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient) external;\\n    function initialize(ISetToken _setToken, FeeState memory _settings) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary ExplicitERC20 {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a token transfer doesn't match the expected balance.\\n    error ExplicitERC20__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            uint256 transferQuantity = existingBalance + _quantity;\\n            if (newBalance != transferQuantity) revert ExplicitERC20__PostTransferBalanceInvalid(address(this), newBalance, transferQuantity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n * - 4/14/23: Removed safePower function\\n * - 4/18/23: Upgrade OZ\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PreciseUnitMath {\\n    using SafeCast for int256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an attempt is made to divide by zero.\\n    error PreciseUnitMath__DivisionByZero();\\n    /// @notice Emitted when the inputs provided are invalid for the operation.\\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\\n    /// @notice Emitted when there's an overflow during the inversion operation.\\n    error PreciseUnitMath__InversionOverflow(int256 input);\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISE_UNIT) / b;\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * PRECISE_UNIT_INT) / b;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        a = a * PRECISE_UNIT_INT;\\n        int256 c = a / b;\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\\n\\n        int256 result = a / b;\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * b, PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * PRECISE_UNIT_INT, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b + range && a >= b - range;\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Invoke {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a transfer doesn't match the expected balance.\\n    error Invoke__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n            _setToken.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            uint256 expectedBalance = existingBalance - _quantity;\\n            if (newBalance != expectedBalance) {\\n                revert Invoke__PostTransferBalanceInvalid(address(this), newBalance, expectedBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/ModuleBase.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { Position } from \\\"./Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG\\n * - 4/21/21: Delegated modifier logic to internal helpers to reduce contract size\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nabstract contract ModuleBase is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        if (adapter == address(0)) revert Module__AdapterInvalid(address(this), _integrationHash);\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller \\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       if (!isSetManager(_setToken, msg.sender)) revert Module__CallerNotManager(address(this), msg.sender, address(_setToken));\\n       if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n       if (!isSetManager(_setToken, _caller)) revert Module__CallerNotManager(address(this), _caller, address(_setToken));\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        if (_setToken.moduleStates(msg.sender) != ISetToken.ModuleState.INITIALIZED)\\n            revert Module__CallerNotInitializedModule(address(this), msg.sender);\\n\\n        if (!controller.isModule(msg.sender))\\n            revert Module__ModuleInvalid(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        if (!controller.isSet(address(_setToken))) revert Module__SetTokenInvalid(address(this), address(_setToken));\\n        if (!isSetPendingInitialization(_setToken)) revert Module__SetTokenNotPending(address(this), address(_setToken));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG\\n * - Updated editExternalPosition to work when no external position is associated with module\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error Position__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error Position__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n    \\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position. \\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert Position__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert Position__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - _prePositionUnit.preciseMul(_setTokenSupply);\\n        return (_postTotalNotional - airdroppedAmount).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/StreamingFeeModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IStreamingFeeModule } from \\\"../../../interfaces/IStreamingFeeModule.sol\\\";\\nimport { ModuleBase } from \\\"../../lib/ModuleBase.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title StreamingFeeModule\\n * @author Set Protocol\\n *\\n * Smart contract that accrues streaming fees for Set managers. Streaming fees are denominated as percent\\n * per year and realized as Set inflation rewarded to the manager.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract StreamingFeeModule is ReentrancyGuard, IStreamingFeeModule, ModuleBase {\\n    using PreciseUnitMath for uint256;\\n    using PreciseUnitMath for int256;\\n    using SafeCast for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event FeeActualized(address indexed _setToken, uint256 _managerFee, uint256 _protocolFee);\\n    event StreamingFeeUpdated(address indexed _setToken, uint256 _newStreamingFee);\\n    event FeeRecipientUpdated(address indexed _setToken, address _newFeeRecipient);\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 private constant ONE_YEAR_IN_SECONDS = 365.25 days;\\n    uint256 private constant PROTOCOL_STREAMING_FEE_INDEX = 0;\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(ISetToken => FeeState) public streamingFeeStates;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) ModuleBase(_controller) { this; }\\n\\n    /* ============ External Functions ============ */\\n\\n    /*\\n     * Calculates total inflation percentage then mints new Sets to the fee recipient. Position units are\\n     * then adjusted down (in magnitude) in order to ensure full collateralization. Callable by anyone.\\n     *\\n     * @param _setToken       Address of SetToken\\n     */\\n    function accrueFee(ISetToken _setToken) public nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        uint256 managerFee;\\n        uint256 protocolFee;\\n\\n        if (_streamingFeePercentage(_setToken) > 0) {\\n            uint256 inflationFeePercentage = _calculateStreamingFee(_setToken);\\n\\n            // Calculate incentiveFee inflation\\n            uint256 feeQuantity = _calculateStreamingFeeInflation(_setToken, inflationFeePercentage);\\n\\n            // Mint new Sets to manager and protocol\\n            (\\n                managerFee,\\n                protocolFee\\n            ) = _mintManagerAndProtocolFee(_setToken, feeQuantity);\\n\\n            _editPositionMultiplier(_setToken, inflationFeePercentage);\\n        }\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        streamingFeeStates[_setToken].lastStreamingFeeTimestamp = block.timestamp;\\n\\n        emit FeeActualized(address(_setToken), managerFee, protocolFee);\\n    }\\n\\n    /**\\n     * SET MANAGER ONLY. Initialize module with SetToken and set the fee state for the SetToken. Passed\\n     * _settings will have lastStreamingFeeTimestamp over-written.\\n     *\\n     * @param _setToken                 Address of SetToken\\n     * @param _settings                 FeeState struct defining fee parameters\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        FeeState memory _settings\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        if (_settings.feeRecipient == address(0)) revert StreamingFeeModule__ZeroAddress();\\n        if (_settings.maxStreamingFeePercentage >= PreciseUnitMath.preciseUnit()) revert StreamingFeeModule__FeeTooHigh(PreciseUnitMath.preciseUnit());\\n        if (_settings.streamingFeePercentage > _settings.maxStreamingFeePercentage) revert StreamingFeeModule__FeeTooHigh(_settings.maxStreamingFeePercentage);\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        _settings.lastStreamingFeeTimestamp = block.timestamp;\\n\\n        streamingFeeStates[_setToken] = _settings;\\n        _setToken.initializeModule();\\n    }\\n\\n    /**\\n     * Removes this module from the SetToken, via call by the SetToken. Manager's feeState is deleted. Fees\\n     * are not accrued in case reason for removing module is related to fee accrual.\\n     */\\n    function removeModule() external override {\\n        delete streamingFeeStates[ISetToken(msg.sender)];\\n    }\\n\\n    /*\\n     * Set new streaming fee. Fees accrue at current rate then new rate is set.\\n     * Fees are accrued to prevent the manager from unfairly accruing a larger percentage.\\n     *\\n     * @param _setToken       Address of SetToken\\n     * @param _newFee         New streaming fee 18 decimal precision\\n     */\\n    function updateStreamingFee(\\n        ISetToken _setToken,\\n        uint256 _newFee\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        uint256 maxStreamingFeePercentage = _maxStreamingFeePercentage(_setToken);\\n        if (_newFee >= maxStreamingFeePercentage) revert StreamingFeeModule__FeeTooHigh(maxStreamingFeePercentage);\\n        accrueFee(_setToken);\\n\\n        streamingFeeStates[_setToken].streamingFeePercentage = _newFee;\\n\\n        emit StreamingFeeUpdated(address(_setToken), _newFee);\\n    }\\n\\n    /*\\n     * Set new fee recipient.\\n     *\\n     * @param _setToken             Address of SetToken\\n     * @param _newFeeRecipient      New fee recipient\\n     */\\n    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient)\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndInitializedSet(_setToken)\\n    {\\n        if (_newFeeRecipient == address(0)) revert StreamingFeeModule__ZeroAddress();\\n\\n        streamingFeeStates[_setToken].feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientUpdated(address(_setToken), _newFeeRecipient);\\n    }\\n\\n    /*\\n     * Calculates total inflation percentage in order to accrue fees to manager.\\n     *\\n     * @param _setToken       Address of SetToken\\n     * @return  uint256       Percent inflation of supply\\n     */\\n    function getFee(ISetToken _setToken) external view returns (uint256) {\\n        return _calculateStreamingFee(_setToken);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Calculates streaming fee by multiplying streamingFeePercentage by the elapsed amount of time since the last fee\\n     * was collected divided by one year in seconds, since the fee is a yearly fee.\\n     *\\n     * @param  _setToken          Address of Set to have feeState updated\\n     * @return uint256            Streaming fee denominated in percentage of totalSupply\\n     */\\n    function _calculateStreamingFee(ISetToken _setToken) internal view returns(uint256) {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        uint256 timeSinceLastFee = block.timestamp - _lastStreamingFeeTimestamp(_setToken);\\n\\n        // Streaming fee is streaming fee times years since last fee\\n        return timeSinceLastFee * _streamingFeePercentage(_setToken) / ONE_YEAR_IN_SECONDS;\\n    }\\n\\n    /**\\n     * Returns the new incentive fee denominated in the number of SetTokens to mint. The calculation for the fee involves\\n     * implying mint quantity so that the feeRecipient owns the fee percentage of the entire supply of the Set.\\n     *\\n     * The formula to solve for fee is:\\n     * (feeQuantity / feeQuantity) + totalSupply = fee / scaleFactor\\n     *\\n     * The simplified formula utilized below is:\\n     * feeQuantity = fee * totalSupply / (scaleFactor - fee)\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _feePercentage          Fee levied to feeRecipient\\n     * @return  uint256                 New RebalancingSet issue quantity\\n     */\\n    function _calculateStreamingFeeInflation(\\n        ISetToken _setToken,\\n        uint256 _feePercentage\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        // fee * totalSupply\\n        uint256 a = _feePercentage * totalSupply;\\n\\n        // ScaleFactor (10e18) - fee\\n        uint256 b = PreciseUnitMath.preciseUnit() - _feePercentage;\\n\\n        return a / b;\\n    }\\n\\n    /**\\n     * Mints sets to both the manager and the protocol. Protocol takes a percentage fee of the total amount of Sets\\n     * minted to manager.\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _feeQuantity            Amount of Sets to be minted as fees\\n     * @return  uint256                 Amount of Sets accrued to manager as fee\\n     * @return  uint256                 Amount of Sets accrued to protocol as fee\\n     */\\n    function _mintManagerAndProtocolFee(ISetToken _setToken, uint256 _feeQuantity) internal returns (uint256, uint256) {\\n        address protocolFeeRecipient = controller.feeRecipient();\\n        uint256 protocolFee = controller.getModuleFee(address(this), PROTOCOL_STREAMING_FEE_INDEX);\\n\\n        uint256 protocolFeeAmount = _feeQuantity.preciseMul(protocolFee);\\n        uint256 managerFeeAmount = _feeQuantity - protocolFeeAmount;\\n\\n        _setToken.mint(_feeRecipient(_setToken), managerFeeAmount);\\n\\n        if (protocolFeeAmount > 0) {\\n            _setToken.mint(protocolFeeRecipient, protocolFeeAmount);\\n        }\\n\\n        return (managerFeeAmount, protocolFeeAmount);\\n    }\\n\\n    /**\\n     * Calculates new position multiplier according to following formula:\\n     *\\n     * newMultiplier = oldMultiplier * (1-inflationFee)\\n     *\\n     * This reduces position sizes to offset increase in supply due to fee collection.\\n     *\\n     * @param   _setToken               SetToken instance\\n     * @param   _inflationFee           Fee inflation rate\\n     */\\n    function _editPositionMultiplier(ISetToken _setToken, uint256 _inflationFee) internal {\\n        int256 currentMultipler = _setToken.positionMultiplier();\\n        int256 newMultiplier = currentMultipler.preciseMul((PreciseUnitMath.preciseUnit() - _inflationFee).toInt256());\\n\\n        _setToken.editPositionMultiplier(newMultiplier);\\n    }\\n\\n    function _feeRecipient(ISetToken _set) internal view returns (address) {\\n        return streamingFeeStates[_set].feeRecipient;\\n    }\\n\\n    function _lastStreamingFeeTimestamp(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].lastStreamingFeeTimestamp;\\n    }\\n\\n    function _maxStreamingFeePercentage(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].maxStreamingFeePercentage;\\n    }\\n\\n    function _streamingFeePercentage(ISetToken _set) internal view returns (uint256) {\\n        return streamingFeeStates[_set].streamingFeePercentage;\\n    }\\n\\n    function feeStates(ISetToken _setToken) external view returns (FeeState memory) {\\n        return streamingFeeStates[_setToken];\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"integrationHash\",\"type\":\"bytes32\"}],\"name\":\"Module__AdapterInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Module__CallerNotInitializedModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleAndCaller\",\"type\":\"address\"}],\"name\":\"Module__ModuleInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenInvalidAndUninitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenNotPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"StreamingFeeModule__FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StreamingFeeModule__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_managerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"FeeActualized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newStreamingFee\",\"type\":\"uint256\"}],\"name\":\"StreamingFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"accrueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"feeStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStreamingFeeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IStreamingFeeModule.FeeState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStreamingFeeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IStreamingFeeModule.FeeState\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streamingFeeStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStreamingFeeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateStreamingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StreamingFeeModule", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000126eaf2d1c5ba5ea9baeddbf3f3695673558766e", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}