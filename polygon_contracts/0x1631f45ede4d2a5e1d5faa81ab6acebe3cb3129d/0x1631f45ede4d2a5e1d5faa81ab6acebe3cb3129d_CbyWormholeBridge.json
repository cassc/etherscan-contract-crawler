{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Project Ethereum/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @title WormholeRelayer\\r\\n * @author\\r\\n * @notice This project allows developers to build cross-chain applications powered by Wormhole without needing to\\r\\n * write and run their own relaying infrastructure\\r\\n *\\r\\n * We implement the IWormholeRelayer interface that allows users to request a delivery provider to relay a payload (and/or additional VAAs)\\r\\n * to a chain and address of their choice.\\r\\n */\\r\\n\\r\\n/**\\r\\n * @notice VaaKey identifies a wormhole message\\r\\n *\\r\\n * @custom:member chainId Wormhole chain ID of the chain where this VAA was emitted from\\r\\n * @custom:member emitterAddress Address of the emitter of the VAA, in Wormhole bytes32 format\\r\\n * @custom:member sequence Sequence number of the VAA\\r\\n */\\r\\nstruct VaaKey {\\r\\n    uint16 chainId;\\r\\n    bytes32 emitterAddress;\\r\\n    uint64 sequence;\\r\\n}\\r\\n\\r\\ninterface IWormholeRelayerBase {\\r\\n    event SendEvent(uint64 indexed sequence, uint256 deliveryQuote, uint256 paymentForExtraReceiverValue);\\r\\n\\r\\n    function getRegisteredWormholeRelayerContract(uint16 chainId) external view returns (bytes32);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayerSend\\r\\n * @notice The interface to request deliveries\\r\\n */\\r\\ninterface IWormholeRelayerSend is IWormholeRelayerBase {\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendPayloadToEvm` function\\r\\n     * with `refundChain` and `refundAddress` as parameters\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be paid to the delivery provider. In order to receive the refunds, use the `sendVaasToEvm` function\\r\\n     * with `refundChain` and `refundAddress` as parameters\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the default delivery provider\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to `quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit)`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteEVMDeliveryPrice(targetChain, receiverValue, gasLimit, deliveryProviderAddress) + paymentForExtraReceiverValue\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver)\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function sendToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteDeliveryPrice(targetChain, receiverValue, encodedExecutionParameters, deliveryProviderAddress) + paymentForExtraReceiverValue\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     * @return sequence sequence number of published VAA containing delivery instructions\\r\\n     */\\r\\n    function send(\\r\\n        uint16 targetChain,\\r\\n        bytes32 targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        uint16 refundChain,\\r\\n        bytes32 refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\\r\\n     * to relay a payload to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     */\\r\\n    function forwardPayloadToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the same delivery provider (or default, if the same one doesn't support the new target chain)\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to `receiverValue`\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f)]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * Any refunds (from leftover gas) from this forward will be paid to the same refundChain and refundAddress specified for the current delivery.\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     */\\r\\n    function forwardVaasToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        VaaKey[] memory vaaKeys\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with gas limit `gasLimit` and with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteEVMDeliveryPrice(targetChain_f, receiverValue_f, gasLimit_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     */\\r\\n    function forwardToEvm(\\r\\n        uint16 targetChain,\\r\\n        address targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        uint256 gasLimit,\\r\\n        uint16 refundChain,\\r\\n        address refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Performs the same function as a `send`, except:\\r\\n     * 1)  Can only be used during a delivery (i.e. in execution of `receiveWormholeMessages`)\\r\\n     * 2)  Is paid for (along with any other calls to forward) by (any msg.value passed in) + (refund leftover from current delivery)\\r\\n     * 3)  Only executes after `receiveWormholeMessages` is completed (and thus does not return a sequence number)\\r\\n     *\\r\\n     * The refund from the delivery currently in progress will not be sent to the user; it will instead\\r\\n     * be paid to the delivery provider to perform the instruction specified here\\r\\n     *\\r\\n     * Publishes an instruction for the delivery provider at `deliveryProviderAddress`\\r\\n     * to relay a payload and VAAs specified by `vaaKeys` to the address `targetAddress` on chain `targetChain`\\r\\n     * with `msg.value` equal to\\r\\n     * receiverValue + (arbitrary amount that is paid for by paymentForExtraReceiverValue of this chain's wei) in targetChain wei.\\r\\n     *\\r\\n     * Any refunds (from leftover gas) will be sent to `refundAddress` on chain `refundChain`\\r\\n     * `targetAddress` must implement the IWormholeReceiver interface\\r\\n     *\\r\\n     * The following equation must be satisfied (sum_f indicates summing over all forwards requested in `receiveWormholeMessages`):\\r\\n     * (refund amount from current execution of receiveWormholeMessages) + sum_f [msg.value_f]\\r\\n     * >= sum_f [quoteDeliveryPrice(targetChain_f, receiverValue_f, encodedExecutionParameters_f, deliveryProviderAddress_f) + paymentForExtraReceiverValue_f]\\r\\n     *\\r\\n     * The difference between the two sides of the above inequality will be added to `paymentForExtraReceiverValue` of the first forward requested\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param targetAddress address to call on targetChain (that implements IWormholeReceiver), in Wormhole bytes32 format\\r\\n     * @param payload arbitrary bytes to pass in as parameter in call to `targetAddress`\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param paymentForExtraReceiverValue amount (in current chain currency units) to spend on extra receiverValue\\r\\n     *        (in addition to the `receiverValue` specified)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param refundChain The chain to deliver any refund to, in Wormhole Chain ID format\\r\\n     * @param refundAddress The address on `refundChain` to deliver any refund to, in Wormhole bytes32 format\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @param vaaKeys Additional VAAs to pass in as parameter in call to `targetAddress`\\r\\n     * @param consistencyLevel Consistency level with which to publish the delivery instructions - see\\r\\n     *        https://book.wormhole.com/wormhole/3_coreLayerContracts.html?highlight=consistency#consistency-levels\\r\\n     */\\r\\n    function forward(\\r\\n        uint16 targetChain,\\r\\n        bytes32 targetAddress,\\r\\n        bytes memory payload,\\r\\n        uint256 receiverValue,\\r\\n        uint256 paymentForExtraReceiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        uint16 refundChain,\\r\\n        bytes32 refundAddress,\\r\\n        address deliveryProviderAddress,\\r\\n        VaaKey[] memory vaaKeys,\\r\\n        uint8 consistencyLevel\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a previously published delivery instruction to be redelivered\\r\\n     * (e.g. with a different delivery provider)\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteEVMDeliveryPrice(targetChain, newReceiverValue, newGasLimit, newDeliveryProviderAddress)\\r\\n     *\\r\\n     *  @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     *\\r\\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\\r\\n     *        previously published delivery instructions\\r\\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\\r\\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param newGasLimit gas limit with which to call `targetAddress`. Any units of gas unused will be refunded according to the\\r\\n     *        `targetChainRefundPerGasUnused` rate quoted by the delivery provider, to the refund chain and address specified in the original request\\r\\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return sequence sequence number of published VAA containing redelivery instructions\\r\\n     *\\r\\n     * @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     */\\r\\n    function resendToEvm(\\r\\n        VaaKey memory deliveryVaaKey,\\r\\n        uint16 targetChain,\\r\\n        uint256 newReceiverValue,\\r\\n        uint256 newGasLimit,\\r\\n        address newDeliveryProviderAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a previously published delivery instruction to be redelivered\\r\\n     *\\r\\n     *\\r\\n     * This function must be called with `msg.value` equal to\\r\\n     * quoteDeliveryPrice(targetChain, newReceiverValue, newEncodedExecutionParameters, newDeliveryProviderAddress)\\r\\n     *\\r\\n     * @param deliveryVaaKey VaaKey identifying the wormhole message containing the\\r\\n     *        previously published delivery instructions\\r\\n     * @param targetChain The target chain that the original delivery targeted. Must match targetChain from original delivery instructions\\r\\n     * @param newReceiverValue new msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param newEncodedExecutionParameters new encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param newDeliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return sequence sequence number of published VAA containing redelivery instructions\\r\\n     *\\r\\n     *  @notice *** This will only be able to succeed if the following is true **\\r\\n     *         - (For EVM_V1) newGasLimit >= gas limit of the old instruction\\r\\n     *         - newReceiverValue >= receiver value of the old instruction\\r\\n     *         - (For EVM_V1) newDeliveryProvider's `targetChainRefundPerGasUnused` >= old relay provider's `targetChainRefundPerGasUnused`\\r\\n     */\\r\\n    function resend(\\r\\n        VaaKey memory deliveryVaaKey,\\r\\n        uint16 targetChain,\\r\\n        uint256 newReceiverValue,\\r\\n        bytes memory newEncodedExecutionParameters,\\r\\n        address newDeliveryProviderAddress\\r\\n    ) external payable returns (uint64 sequence);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using the default delivery provider\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *         if a refundAddress is specified\\r\\n     */\\r\\n    function quoteEVMDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param gasLimit gas limit with which to call `targetAddress`.\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return targetChainRefundPerGasUnused amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *         if a refundAddress is specified\\r\\n     */\\r\\n    function quoteEVMDeliveryPrice(\\r\\n        uint16 targetChain,\\r\\n        uint256 receiverValue,\\r\\n        uint256 gasLimit,\\r\\n        address deliveryProviderAddress\\r\\n    ) external view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price to request a relay to chain `targetChain`, using delivery provider `deliveryProviderAddress`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param receiverValue msg.value that delivery provider should pass in for call to `targetAddress` (in targetChain currency units)\\r\\n     * @param encodedExecutionParameters encoded information on how to execute delivery that may impact pricing\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` with which to call `targetAddress`\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return nativePriceQuote Price, in units of current chain currency, that the delivery provider charges to perform the relay\\r\\n     * @return encodedExecutionInfo encoded information on how the delivery will be executed\\r\\n     *        e.g. for version EVM_V1, this is a struct that encodes the `gasLimit` and `targetChainRefundPerGasUnused`\\r\\n     *             (which is the amount of target chain currency that will be refunded per unit of gas unused,\\r\\n     *              if a refundAddress is specified)\\r\\n     */\\r\\n    function quoteDeliveryPrice(\\r\\n        uint16 targetChain,\\r\\n        uint256 receiverValue,\\r\\n        bytes memory encodedExecutionParameters,\\r\\n        address deliveryProviderAddress\\r\\n    ) external view returns (uint256 nativePriceQuote, bytes memory encodedExecutionInfo);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the (extra) amount of target chain currency that `targetAddress`\\r\\n     * will be called with, if the `paymentForExtraReceiverValue` field is set to `currentChainAmount`\\r\\n     *\\r\\n     * @param targetChain in Wormhole Chain ID format\\r\\n     * @param currentChainAmount The value that `paymentForExtraReceiverValue` will be set to\\r\\n     * @param deliveryProviderAddress The address of the desired delivery provider's implementation of IDeliveryProvider\\r\\n     * @return targetChainAmount The amount such that if `targetAddress` will be called with `msg.value` equal to\\r\\n     *         receiverValue + targetChainAmount\\r\\n     */\\r\\n    function quoteNativeForChain(uint16 targetChain, uint256 currentChainAmount, address deliveryProviderAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 targetChainAmount);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the current default delivery provider\\r\\n     * @return deliveryProvider The address of (the default delivery provider)'s contract on this source\\r\\n     *   chain. This must be a contract that implements IDeliveryProvider.\\r\\n     */\\r\\n    function getDefaultDeliveryProvider() external view returns (address deliveryProvider);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title IWormholeRelayerDelivery\\r\\n * @notice The interface to execute deliveries. Only relevant for Delivery Providers\\r\\n */\\r\\ninterface IWormholeRelayerDelivery is IWormholeRelayerBase {\\r\\n    enum DeliveryStatus {\\r\\n        SUCCESS,\\r\\n        RECEIVER_FAILURE,\\r\\n        FORWARD_REQUEST_FAILURE,\\r\\n        FORWARD_REQUEST_SUCCESS\\r\\n    }\\r\\n\\r\\n    enum RefundStatus {\\r\\n        REFUND_SENT,\\r\\n        REFUND_FAIL,\\r\\n        CROSS_CHAIN_REFUND_SENT,\\r\\n        CROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED,\\r\\n        CROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @custom:member recipientContract - The target contract address\\r\\n     * @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\\r\\n     *     ChainID format)\\r\\n     * @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\\r\\n     *     corresponding to this delivery request\\r\\n     * @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\\r\\n     *     request\\r\\n     * @custom:member gasUsed - The amount of gas that was used to call your target contract\\r\\n     * @custom:member status:\\r\\n     *   - RECEIVER_FAILURE, if the target contract reverts\\r\\n     *   - SUCCESS, if the target contract doesn't revert and no forwards were requested\\r\\n     *   - FORWARD_REQUEST_FAILURE, if the target contract doesn't revert, forwards were requested,\\r\\n     *       but provided/leftover funds were not sufficient to cover them all\\r\\n     *   - FORWARD_REQUEST_SUCCESS, if the target contract doesn't revert and all forwards are covered\\r\\n     * @custom:member additionalStatusInfo:\\r\\n     *   - If status is SUCCESS or FORWARD_REQUEST_SUCCESS, then this is empty.\\r\\n     *   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\\r\\n     *       return data (i.e. potentially truncated revert reason information).\\r\\n     *   - If status is FORWARD_REQUEST_FAILURE, this is also the revert data - the reason the forward failed.\\r\\n     *     This will be either an encoded Cancelled, DeliveryProviderReverted, or DeliveryProviderPaymentFailed error\\r\\n     * @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\\r\\n     *     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\\r\\n     *     where a cross chain refund is necessary\\r\\n     * @custom:member overridesInfo:\\r\\n     *   - If not an override: empty bytes array\\r\\n     *   - Otherwise: An encoded `DeliveryOverride`\\r\\n     */\\r\\n    event Delivery(\\r\\n        address indexed recipientContract,\\r\\n        uint16 indexed sourceChain,\\r\\n        uint64 indexed sequence,\\r\\n        bytes32 deliveryVaaHash,\\r\\n        DeliveryStatus status,\\r\\n        uint256 gasUsed,\\r\\n        RefundStatus refundStatus,\\r\\n        bytes additionalStatusInfo,\\r\\n        bytes overridesInfo\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice The delivery provider calls `deliver` to relay messages as described by one delivery instruction\\r\\n     *\\r\\n     * The delivery provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\\r\\n     * as well as the signed wormhole message with the delivery instructions (the delivery VAA)\\r\\n     *\\r\\n     * The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\\r\\n     * - the delivery VAA has a valid signature\\r\\n     * - the delivery VAA's emitter is one of these WormholeRelayer contracts\\r\\n     * - the delivery provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\\r\\n     * - the instruction's target chain is this chain\\r\\n     * - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\\r\\n     *\\r\\n     * @param encodedVMs - An array of signed wormhole messages (all from the same source chain\\r\\n     *     transaction)\\r\\n     * @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\\r\\n     *     contract with payload being the encoded delivery instruction container\\r\\n     * @param relayerRefundAddress - The address to which any refunds to the delivery provider\\r\\n     *     should be sent\\r\\n     * @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\\r\\n     *     an encoded DeliveryOverride struct\\r\\n     */\\r\\n    function deliver(\\r\\n        bytes[] memory encodedVMs,\\r\\n        bytes memory encodedDeliveryVAA,\\r\\n        address payable relayerRefundAddress,\\r\\n        bytes memory deliveryOverrides\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\ninterface IWormholeRelayer is IWormholeRelayerDelivery, IWormholeRelayerSend {}\\r\\n\\r\\n/*\\r\\n *  Errors thrown by IWormholeRelayer contract\\r\\n */\\r\\n\\r\\n// Bound chosen by the following formula: `memoryWord * 4 + selectorSize`.\\r\\n// This means that an error identifier plus four fixed size arguments should be available to developers.\\r\\n// In the case of a `require` revert with error message, this should provide 2 memory word's worth of data.\\r\\nuint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;\\r\\n\\r\\n//When msg.value was not equal to `delivery provider's quoted delivery price` + `paymentForExtraReceiverValue`\\r\\nerror InvalidMsgValue(uint256 msgValue, uint256 totalFee);\\r\\n\\r\\nerror RequestedGasLimitTooLow();\\r\\n\\r\\nerror DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId);\\r\\nerror DeliveryProviderCannotReceivePayment();\\r\\n\\r\\n//When calling `forward()` on the WormholeRelayer if no delivery is in progress\\r\\nerror NoDeliveryInProgress();\\r\\n//When calling `delivery()` a second time even though a delivery is already in progress\\r\\nerror ReentrantDelivery(address msgSender, address lockedBy);\\r\\n//When any other contract but the delivery target calls `forward()` on the WormholeRelayer while a\\r\\n//  delivery is in progress\\r\\nerror ForwardRequestFromWrongAddress(address msgSender, address deliveryTarget);\\r\\n\\r\\nerror InvalidPayloadId(uint8 parsed, uint8 expected);\\r\\nerror InvalidPayloadLength(uint256 received, uint256 expected);\\r\\nerror InvalidVaaKeyType(uint8 parsed);\\r\\n\\r\\nerror InvalidDeliveryVaa(string reason);\\r\\n//When the delivery VAA (signed wormhole message with delivery instructions) was not emitted by the\\r\\n//  registered WormholeRelayer contract\\r\\nerror InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);\\r\\nerror VaaKeysLengthDoesNotMatchVaasLength(uint256 keys, uint256 vaas);\\r\\nerror VaaKeysDoNotMatchVaas(uint8 index);\\r\\n//When someone tries to call an external function of the WormholeRelayer that is only intended to be\\r\\n//  called by the WormholeRelayer itself (to allow retroactive reverts for atomicity)\\r\\nerror RequesterNotWormholeRelayer();\\r\\n\\r\\n//When trying to relay a `DeliveryInstruction` to any other chain but the one it was specified for\\r\\nerror TargetChainIsNotThisChain(uint16 targetChain);\\r\\nerror ForwardNotSufficientlyFunded(uint256 amountOfFunds, uint256 amountOfFundsNeeded);\\r\\n//When a `DeliveryOverride` contains a gas limit that's less than the original\\r\\nerror InvalidOverrideGasLimit();\\r\\n//When a `DeliveryOverride` contains a receiver value that's less than the original\\r\\nerror InvalidOverrideReceiverValue();\\r\\n//When a `DeliveryOverride` contains a 'refund per unit of gas unused' that's less than the original\\r\\nerror InvalidOverrideRefundPerGasUnused();\\r\\n\\r\\n//When the delivery provider doesn't pass in sufficient funds (i.e. msg.value does not cover the\\r\\n// maximum possible refund to the user)\\r\\nerror InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);\\r\\n\\r\\n//When a bytes32 field can't be converted into a 20 byte EVM address, because the 12 padding bytes\\r\\n//  are non-zero (duplicated from Utils.sol)\\r\\nerror NotAnEvmAddress(bytes32);\\r\\n\\r\\n/**\\r\\n * @notice Interface for a contract which can receive Wormhole messages.\\r\\n */\\r\\ninterface IWormholeReceiver {\\r\\n    /**\\r\\n     * @notice When a `send` is performed with this contract as the target, this function will be\\r\\n     *     invoked by the WormholeRelayer contract\\r\\n     *\\r\\n     * NOTE: This function should be restricted such that only the Wormhole Relayer contract can call it.\\r\\n     *\\r\\n     * We also recommend that this function:\\r\\n     *   - Stores all received `deliveryHash`s in a mapping `(bytes32 => bool)`, and\\r\\n     *       on every call, checks that deliveryHash has not already been stored in the\\r\\n     *       map (This is to prevent other users maliciously trying to relay the same message)\\r\\n     *   - Checks that `sourceChain` and `sourceAddress` are indeed who\\r\\n     *       you expect to have requested the calling of `send` or `forward` on the source chain\\r\\n     *\\r\\n     * The invocation of this function corresponding to the `send` request will have msg.value equal\\r\\n     *   to the receiverValue specified in the send request.\\r\\n     *\\r\\n     * If the invocation of this function reverts or exceeds the gas limit\\r\\n     *   specified by the send requester, this delivery will result in a `ReceiverFailure`.\\r\\n     *\\r\\n     * @param payload - an arbitrary message which was included in the delivery by the\\r\\n     *     requester.\\r\\n     * @param additionalVaas - Additional VAAs which were requested to be included in this delivery.\\r\\n     *   They are guaranteed to all be included and in the same order as was specified in the\\r\\n     *     delivery request.\\r\\n     * @param sourceAddress - the (wormhole format) address on the sending chain which requested\\r\\n     *     this delivery.\\r\\n     * @param sourceChain - the wormhole chain ID where this delivery was requested.\\r\\n     * @param deliveryHash - the VAA hash of the deliveryVAA.\\r\\n     *\\r\\n     * NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided\\r\\n     *     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract\\r\\n     *     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious.\\r\\n     */\\r\\n    function receiveWormholeMessages(\\r\\n        bytes memory payload,\\r\\n        bytes[] memory additionalVaas,\\r\\n        bytes32 sourceAddress,\\r\\n        uint16 sourceChain,\\r\\n        bytes32 deliveryHash\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     *\\r\\n     * Furthermore, `isContract` will also return true if the target contract within\\r\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\r\\n     * which only has an effect at the end of a transaction.\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```solidity\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n *\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized != type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IVault {\\r\\n    function deposit(uint256 amount) external;\\r\\n    function withdraw(address to, uint256 amount) external; \\r\\n}\\r\\n\\r\\ncontract CbyWormholeBridge is IWormholeReceiver, Ownable, Initializable {\\r\\n    IWormholeRelayer public immutable wormholeRelayer;\\r\\n    IVault public vault;\\r\\n    IERC20 public cby;\\r\\n\\r\\n    mapping(bytes32 => bool) public seenDeliveryVaaHashes;\\r\\n    uint256 constant MIN_GAS_LIMIT = 300_000;\\r\\n    uint256 constant MAX_GAS_LIMIT = 30_000_000;\\r\\n    address public crossChainCounterParty;\\r\\n    uint16 public crossChainId;\\r\\n\\r\\n    event Deposit(address indexed from, uint256 amount);\\r\\n    event Withdraw(address indexed to, uint256 amount);\\r\\n\\r\\n    constructor(address _wormholeRelayer) Ownable() {\\r\\n        wormholeRelayer = IWormholeRelayer(_wormholeRelayer);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _vault, \\r\\n        address _cby, \\r\\n        address _crossChainCounterParty,\\r\\n        uint16 _crossChainId\\r\\n    ) external onlyOwner initializer {\\r\\n        require(_vault != address(0), \\\"Vault cannot be zero\\\");\\r\\n        require(_cby != address(0), \\\"CBY cannot be zero\\\");\\r\\n        require(_crossChainCounterParty != address(0), \\\"CrossChainCounterparty cannot be zero\\\");\\r\\n        require(_crossChainId != 0, \\\"CrossChainId cannot be zero\\\");\\r\\n\\r\\n        vault = IVault(_vault);\\r\\n        cby = IERC20(_cby);\\r\\n        crossChainCounterParty = _crossChainCounterParty;\\r\\n        crossChainId = _crossChainId;\\r\\n    }\\r\\n\\r\\n    function quoteCrossChainCall(uint16 targetChain, uint256 extraGasLimit) public view returns (uint256 cost) {\\r\\n        (cost,) = wormholeRelayer.quoteEVMDeliveryPrice(targetChain, 0, MIN_GAS_LIMIT + extraGasLimit);\\r\\n    }\\r\\n\\r\\n    function sendCrossChainDeposit(\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 extraGasLimit\\r\\n    ) public payable {\\r\\n        require(crossChainId != 0, \\\"CrossChainId not set\\\");\\r\\n        require(crossChainCounterParty != address(0), \\\"CrossChainCounterParty not set\\\");\\r\\n        require(receiver != address(0), \\\"Receiver cannot be zero\\\");\\r\\n        require(amount > 0, \\\"Amount cannot be zero\\\");\\r\\n        require(MIN_GAS_LIMIT + extraGasLimit <= MAX_GAS_LIMIT, \\\"Gas limit too high\\\");\\r\\n\\r\\n        uint256 cost = quoteCrossChainCall(crossChainId, extraGasLimit);\\r\\n\\r\\n        require(msg.value >= cost);\\r\\n        require(cby.transferFrom(msg.sender, address(this), amount));\\r\\n\\r\\n        cby.approve(address(vault), amount);\\r\\n        vault.deposit(amount);\\r\\n\\r\\n        wormholeRelayer.sendPayloadToEvm{value: cost}(\\r\\n            crossChainId,\\r\\n            crossChainCounterParty,\\r\\n            abi.encode(receiver, amount),\\r\\n            0, \\r\\n            MIN_GAS_LIMIT + extraGasLimit,\\r\\n            crossChainId,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        emit Deposit(receiver, amount);\\r\\n    }\\r\\n\\r\\n    function receiveWormholeMessages(\\r\\n        bytes memory payload,\\r\\n        bytes[] memory,\\r\\n        bytes32 sourceAddress,\\r\\n        uint16 sourceChain,\\r\\n        bytes32 deliveryHash\\r\\n    ) public payable override {\\r\\n        require(msg.sender == address(wormholeRelayer), \\\"Only relayer allowed\\\");\\r\\n        require(sourceChain == crossChainId, \\\"Invalid source chain\\\");\\r\\n        require(address(uint160(uint256(sourceAddress))) == crossChainCounterParty, \\\"Invalid source address\\\");\\r\\n\\r\\n        require(!seenDeliveryVaaHashes[deliveryHash], \\\"Message already processed\\\");\\r\\n        seenDeliveryVaaHashes[deliveryHash] = true;\\r\\n\\r\\n        (address receiver, uint256 amount) = abi.decode(payload, (address, uint256));\\r\\n\\r\\n        require(receiver != address(0), \\\"Receiver cannot be zero\\\");\\r\\n        require(amount > 0, \\\"Amount cannot be zero\\\");\\r\\n\\r\\n        vault.withdraw(receiver, amount);\\r\\n\\r\\n        emit Withdraw(receiver, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wormholeRelayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cby\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainCounterParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cby\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossChainCounterParty\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_crossChainId\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"extraGasLimit\",\"type\":\"uint256\"}],\"name\":\"quoteCrossChainCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"sourceAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"sourceChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"deliveryHash\",\"type\":\"bytes32\"}],\"name\":\"receiveWormholeMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"seenDeliveryVaaHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraGasLimit\",\"type\":\"uint256\"}],\"name\":\"sendCrossChainDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormholeRelayer\",\"outputs\":[{\"internalType\":\"contract IWormholeRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CbyWormholeBridge", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000027428dd2d3dd32a4d7f7c497eaaa23130d894911", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}