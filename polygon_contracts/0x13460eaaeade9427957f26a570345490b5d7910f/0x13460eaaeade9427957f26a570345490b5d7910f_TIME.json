{"SourceCode": "// SPDX-License-Identifier: BSD-4-Clause\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (x << 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    unchecked {\r\n      return int64 (x >> 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (int256 (x << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return uint64 (uint128 (x >> 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = x >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    unchecked {\r\n      return int256 (x) << 64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) + y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) - y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) * y >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    unchecked {\r\n      if (x == MIN_64x64) {\r\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n          y <= 0x1000000000000000000000000000000000000000000000000);\r\n        return -y << 63;\r\n      } else {\r\n        bool negativeResult = false;\r\n        if (x < 0) {\r\n          x = -x;\r\n          negativeResult = true;\r\n        }\r\n        if (y < 0) {\r\n          y = -y; // We rely on overflow behavior here\r\n          negativeResult = !negativeResult;\r\n        }\r\n        uint256 absoluteResult = mulu (x, uint256 (y));\r\n        if (negativeResult) {\r\n          require (absoluteResult <=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000);\r\n          return -int256 (absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n          require (absoluteResult <=\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n          return int256 (absoluteResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    unchecked {\r\n      if (y == 0) return 0;\r\n\r\n      require (x >= 0);\r\n\r\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\r\n\r\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      hi <<= 64;\r\n\r\n      require (hi <=\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n      return hi + lo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      int256 result = (int256 (x) << 64) / y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x; // We rely on overflow behavior here\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <= 0x80000000000000000000000000000000);\r\n        return -int128 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (absoluteResult); // We rely on overflow behavior here\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      uint128 result = divuu (x, y);\r\n      require (result <= uint128 (MAX_64x64));\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return -x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return x < 0 ? -x : x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != 0);\r\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      return int128 ((int256 (x) + int256 (y)) >> 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 m = int256 (x) * int256 (y);\r\n      require (m >= 0);\r\n      require (m <\r\n          0x4000000000000000000000000000000000000000000000000000000000000000);\r\n      return int128 (sqrtu (uint256 (m)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      bool negative = x < 0 && y & 1 == 1;\r\n\r\n      uint256 absX = uint128 (x < 0 ? -x : x);\r\n      uint256 absResult;\r\n      absResult = 0x100000000000000000000000000000000;\r\n\r\n      if (absX <= 0x10000000000000000) {\r\n        absX <<= 63;\r\n        while (y != 0) {\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x2 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x4 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x8 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          y >>= 4;\r\n        }\r\n\r\n        absResult >>= 64;\r\n      } else {\r\n        uint256 absXShift = 63;\r\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\r\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\r\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\r\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\r\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\r\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\r\n\r\n        uint256 resultShift = 0;\r\n        while (y != 0) {\r\n          require (absXShift < 64);\r\n\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n            resultShift += absXShift;\r\n            if (absResult > 0x100000000000000000000000000000000) {\r\n              absResult >>= 1;\r\n              resultShift += 1;\r\n            }\r\n          }\r\n          absX = absX * absX >> 127;\r\n          absXShift <<= 1;\r\n          if (absX >= 0x100000000000000000000000000000000) {\r\n              absX >>= 1;\r\n              absXShift += 1;\r\n          }\r\n\r\n          y >>= 1;\r\n        }\r\n\r\n        require (resultShift < 64);\r\n        absResult >>= 64 - resultShift;\r\n      }\r\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      int256 msb = 0;\r\n      int256 xc = x;\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 result = msb - 64 << 64;\r\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\r\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n        ux *= ux;\r\n        uint256 b = ux >> 255;\r\n        ux >>= 127 + b;\r\n        result += bit * int256 (b);\r\n      }\r\n\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      return int128 (int256 (\r\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n\r\n      if (x & 0x8000000000000000 > 0)\r\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (x & 0x4000000000000000 > 0)\r\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (x & 0x2000000000000000 > 0)\r\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (x & 0x1000000000000000 > 0)\r\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (x & 0x800000000000000 > 0)\r\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (x & 0x400000000000000 > 0)\r\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (x & 0x200000000000000 > 0)\r\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (x & 0x100000000000000 > 0)\r\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (x & 0x80000000000000 > 0)\r\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (x & 0x40000000000000 > 0)\r\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (x & 0x20000000000000 > 0)\r\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (x & 0x10000000000000 > 0)\r\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (x & 0x8000000000000 > 0)\r\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (x & 0x4000000000000 > 0)\r\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (x & 0x2000000000000 > 0)\r\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (x & 0x1000000000000 > 0)\r\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (x & 0x800000000000 > 0)\r\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (x & 0x400000000000 > 0)\r\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (x & 0x200000000000 > 0)\r\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (x & 0x100000000000 > 0)\r\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (x & 0x80000000000 > 0)\r\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (x & 0x40000000000 > 0)\r\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (x & 0x20000000000 > 0)\r\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (x & 0x10000000000 > 0)\r\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (x & 0x8000000000 > 0)\r\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (x & 0x4000000000 > 0)\r\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (x & 0x2000000000 > 0)\r\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (x & 0x1000000000 > 0)\r\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (x & 0x800000000 > 0)\r\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (x & 0x400000000 > 0)\r\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (x & 0x200000000 > 0)\r\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (x & 0x100000000 > 0)\r\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (x & 0x80000000 > 0)\r\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (x & 0x40000000 > 0)\r\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (x & 0x20000000 > 0)\r\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (x & 0x10000000 > 0)\r\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (x & 0x8000000 > 0)\r\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (x & 0x4000000 > 0)\r\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (x & 0x2000000 > 0)\r\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (x & 0x1000000 > 0)\r\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (x & 0x800000 > 0)\r\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (x & 0x400000 > 0)\r\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (x & 0x200000 > 0)\r\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (x & 0x100000 > 0)\r\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (x & 0x80000 > 0)\r\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (x & 0x40000 > 0)\r\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (x & 0x20000 > 0)\r\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (x & 0x10000 > 0)\r\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (x & 0x8000 > 0)\r\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (x & 0x4000 > 0)\r\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (x & 0x2000 > 0)\r\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (x & 0x1000 > 0)\r\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (x & 0x800 > 0)\r\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (x & 0x400 > 0)\r\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (x & 0x200 > 0)\r\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (x & 0x100 > 0)\r\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (x & 0x80 > 0)\r\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (x & 0x40 > 0)\r\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (x & 0x20 > 0)\r\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (x & 0x10 > 0)\r\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (x & 0x8 > 0)\r\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (x & 0x4 > 0)\r\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (x & 0x2 > 0)\r\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (x & 0x1 > 0)\r\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n      result >>= uint256 (int256 (63 - (x >> 64)));\r\n      require (result <= uint256 (int256 (MAX_64x64)));\r\n\r\n      return int128 (int256 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      return exp_2 (\r\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      uint256 result;\r\n\r\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        result = (x << 64) / y;\r\n      else {\r\n        uint256 msb = 192;\r\n        uint256 xc = x >> 192;\r\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 hi = result * (y >> 128);\r\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 xh = x >> 192;\r\n        uint256 xl = x << 64;\r\n\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n        lo = hi << 128;\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n\r\n        assert (xh == hi >> 128);\r\n\r\n        result += xl / y;\r\n      }\r\n\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return uint128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    unchecked {\r\n      if (x == 0) return 0;\r\n      else {\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n        if (xx >= 0x8) { r <<= 1; }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return uint128 (r < r1 ? r : r1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract TIME is ERC20 {\r\n\r\n    /* TIME starts at $1 on 2023 Jan 1, grows 1+1=2 every year until 2042 Dec 2, and stablizes at $1000000.013139219573684269 */\r\n\r\n    mapping(address => bool) public isUSD;\r\n    mapping(address => uint256) public Decimails;\r\n    uint256 public constant launchTime = 1672531200; /* 2023 Jan 01 00:00:00 GMT+0000 */\r\n    uint256 public constant stableTime = 2301093147; /* 2042 Dec 2 00:32:27 GMT+0000 */\r\n\r\n    constructor(address usd1, uint256 usd1decimails, address usd2, uint256 usd2decimails, address usd3, uint256 usd3decimails) ERC20 ('TIME', 'TIME') {\r\n        isUSD[usd1] = true;\r\n        Decimails[usd1] = usd1decimails;\r\n        isUSD[usd2] = true;\r\n        Decimails[usd2] = usd2decimails;\r\n        isUSD[usd3] = true;\r\n        Decimails[usd3] = usd3decimails;\r\n    }\r\n\r\n    function convert6To18(uint256 amount, uint256 decimals) public pure returns (uint256) {\r\n        if(decimals == 6) return amount * 1e12;\r\n\r\n        return amount;\r\n    }\r\n\r\n    function convert18To6(uint256 usd, uint256 decimals) public pure returns (uint256) {\r\n        if(decimals == 6) return usd / 1e12;\r\n\r\n        return usd;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        uint256 ticktock;\r\n\r\n        if(block.timestamp <= launchTime) return 1000000000000000000; /* TIME price stablizes at $1 before 2023 Jan 1 */\r\n        if(block.timestamp >= stableTime) return 1000000013139219573684269; /* TIME price stablizes at $1000000.013139219573684269 after 2042 Dec 2 */\r\n        \r\n        ticktock = block.timestamp - launchTime;\r\n\r\n        /**\r\n         * The current price of TIME is always 2X of the price 365 days ago\r\n         *   y = 2.000^(ticktock / 365 days)\r\n         */\r\n        int128 base = ABDKMath64x64.div(ABDKMath64x64.fromUInt(2000), ABDKMath64x64.fromUInt(1000));\r\n        int128 exponential = ABDKMath64x64.div(ABDKMath64x64.fromUInt(ticktock), ABDKMath64x64.fromUInt(365 days));\r\n        \r\n        /**\r\n         * Basic logarithm rule:\r\n         *   x = a^(log_a(x))\r\n         * And deduce it:\r\n         *   x^y = a^(y*log_a(x))\r\n         * When a equals 2\r\n         *   x^y = 2^(y*log_2(x))\r\n         */\r\n        return ABDKMath64x64.mulu(ABDKMath64x64.exp_2(ABDKMath64x64.mul(exponential, ABDKMath64x64.log_2(base))), 1e18);\r\n    }\r\n\r\n    function Buy(address usd, uint256 amount) external returns (bool) {\r\n        require(isUSD[usd], 'USD ERROR');\r\n\r\n        IERC20(usd).transferFrom(msg.sender, address(this), amount);\r\n\r\n        amount = convert6To18(amount, Decimails[usd]);\r\n        uint256 time = amount * 1e18 / getPrice();\r\n        \r\n        _mint(msg.sender, time);\r\n\r\n        return true;\r\n    }\r\n\r\n    function Sell(address usd, uint256 time) external returns (bool) {\r\n        require(isUSD[usd], 'USD ERROR');\r\n\r\n        _burn(msg.sender, time);\r\n\r\n        uint256 _usd = time * getPrice() / 1e18;\r\n        _usd = convert18To6(_usd, Decimails[usd]);\r\n\r\n        IERC20(usd).transfer(msg.sender, _usd);\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usd1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usd1decimails\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usd2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usd2decimails\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usd3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usd3decimails\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Decimails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"convert18To6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"convert6To18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TIME", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000060000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000060000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000006", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5f2f28d484370bcb96c668775aa38a4466b11dfa1757cd9fc55640baa0866fa"}