{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    \r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n     /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title Pololinks\r\n * @dev A smart contract that allows users to invest in a token called USDT and earn referral rewards.\r\n */\r\ncontract PololinksROI {\r\n    address public owner;\r\n    IERC20 private Token;\r\n    address private tokenAddress = 0x63024EbcB59701ae7DDA0aC57B07A98b9f5698b9; // POLO Address \r\n    uint public totalUsers;\r\n\r\n    struct User {\r\n        uint investedAmount;\r\n        uint totalProfit;\r\n        address referredBy;\r\n        uint lastWithdrawTime;\r\n        uint referralEarning;\r\n    }\r\n\r\n    mapping(address => User) public Users;\r\n\r\n    constructor() {\r\n        totalUsers++;\r\n        owner = msg.sender;\r\n        Users[msg.sender].referredBy = address(0x1);\r\n        Token = IERC20(tokenAddress);\r\n    }\r\n\r\n\r\n    function Invest(uint amount, address reffBy) public {\r\n         require(\r\n           amount >= 2000,\r\n            \"Min amount to invest is 2000 POLO\"\r\n        );\r\n\r\n        if(Users[msg.sender].referredBy == address(0)){\r\n            require(Users[reffBy].referredBy != address(0), \"Invalid Referral\");\r\n            require(reffBy != msg.sender, \"Invalid Raferral\");\r\n            Users[msg.sender].investedAmount = amount * 10 ** Token.decimals();\r\n            Users[msg.sender].referredBy = reffBy;\r\n            Users[msg.sender].lastWithdrawTime = block.timestamp;\r\n            totalUsers++;\r\n        }else{\r\n            if(Users[msg.sender].investedAmount>0 && Users[msg.sender].lastWithdrawTime != block.timestamp){\r\n                withdraw();\r\n            }\r\n            Users[msg.sender].investedAmount += amount * 10 ** Token.decimals();\r\n            Users[msg.sender].lastWithdrawTime = block.timestamp;\r\n        }\r\n        Token.transferFrom(msg.sender, address(this), amount * 10 ** Token.decimals()); // transfering tokens to contract\r\n        referralAwardToLevels(amount*10**Token.decimals());\r\n    }\r\n\r\n    function referralAwardToLevels(uint amount) internal {\r\n        address curr = Users[msg.sender].referredBy;\r\n        for(uint i = 1; i <= 10; i++){\r\n            if(curr == address(0) || curr == owner) break;\r\n            uint reward = (amount * getRewardPercentage(uint8(i))) / 100;\r\n            Token.transfer(curr, reward);\r\n            Users[curr].referralEarning += reward;\r\n            curr = Users[curr].referredBy;\r\n        }\r\n    }\r\n    \r\n    \r\n    // change token address\r\n    function changeTokenAddress(address _tokenAddress) public {\r\n        require(msg.sender == owner, \"You are not allowed to change token address\");\r\n        tokenAddress = _tokenAddress;\r\n        Token = IERC20(tokenAddress);\r\n    }\r\n\r\n    \r\n    \r\n    function changeOwnership(address _owner) public {\r\n        require(msg.sender == owner, \"You are not allowed to change ownership\");\r\n        owner = _owner;\r\n        Users[_owner].referredBy = address(0x1);\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function getRewardPercentage(uint8 level) internal pure returns (uint) {\r\n        if (level == 1) return 7;\r\n        if (level == 2) return 3;\r\n        return 0; // Default to 0% for unsupported levels\r\n    }\r\n\r\n    \r\n\r\n    function withdraw() public {\r\n        require(Users[msg.sender].investedAmount > 0, \"Invest First\");\r\n        uint calculateAmount = getCurrentProfit();\r\n        \r\n\r\n        if(Users[msg.sender].totalProfit+calculateAmount >= Users[msg.sender].investedAmount ){\r\n            uint lastWithdraw = (Users[msg.sender].investedAmount * 2) - Users[msg.sender].totalProfit; \r\n            Token.transfer(msg.sender, lastWithdraw);\r\n            Users[msg.sender].investedAmount = 0;\r\n            Users[msg.sender].lastWithdrawTime = 0;\r\n            Users[msg.sender].totalProfit = 0;\r\n        }else {\r\n            require(\r\n            calculateAmount > 0,\r\n            \"You do not have enough balance\"\r\n            );\r\n            Users[msg.sender].totalProfit += calculateAmount;\r\n            Users[msg.sender].lastWithdrawTime = block.timestamp;\r\n            Token.transfer(msg.sender, calculateAmount);\r\n        }\r\n        \r\n    }\r\n\r\n    function getCurrentProfit() view public returns(uint) {\r\n    // Calculate time passed since last withdrawal\r\n        uint currentTime = block.timestamp;\r\n        uint lastWithdrawTime = Users[msg.sender].lastWithdrawTime;\r\n        uint timePassed = currentTime - lastWithdrawTime;\r\n\r\n    // Calculate profit percentage per second (0.00000231481%)\r\n        uint256 RATE_PER_SECOND = 231481; // \r\n        uint256 DECIMALS = 1e13; // Scaling factor\r\n\r\n        uint256 totalProfit = (Users[msg.sender].investedAmount * RATE_PER_SECOND * timePassed) / DECIMALS;\r\n        return totalProfit;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reffBy\",\"type\":\"address\"}],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEarning\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PololinksROI", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e0ce91401ac4011d99d72a974549c1f633a3199e5aed7ad2610843a6408c50b"}