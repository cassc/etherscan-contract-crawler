{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mintStaking(address to, uint256 amount) external;\\n}\\n\\ncontract StakingAndReferral is Ownable {\\n    IERC20 public SRX;\\n\\n    uint public curretLevel;\\n    uint public totalStakedMATIC;\\n    uint public totalMinedSRX;\\n    uint public minStake = 1000000000000000000;\\n    uint public constant perMAtIC = 10000000000000000;\\n    uint[15] public amountSRXPerDay = [160000000000000000, 150000000000000000, 140000000000000000, 130000000000000000, 120000000000000000, 110000000000000000, 100000000000000000, 90000000000000000, 80000000000000000, 70000000000000000, 60000000000000000, 50000000000000000, 40000000000000000, 30000000000000000, 20000000000000000];\\n    //Price for the 0.01 MATIC per sec\\n    uint[15] public amountSRXPerSec01MAtic = [18518518519, 17361111112, 16203703704, 15046296297, 13888888889, 12731481482, 11574074075, 10416666667, 9259259260, 8101851852, 6944444445, 5787037038, 4629629630, 3472222223, 2314814815];\\n    uint[15] public levelBorder = [4000000000000000000000000, 7500000000000000000000000, 10600000000000000000000000, 13500000000000000000000000, 16200000000000000000000000, 18600000000000000000000000, 20700000000000000000000000, 22500000000000000000000000, 24000000000000000000000000, 25100000000000000000000000, 25900000000000000000000000, 26400000000000000000000000, 26700000000000000000000000,26900000000000000000000000, 27000000000000000000000000];\\n\\n    uint public withdrawFeePercent = 1500;\\n    uint public adminFee;\\n    uint public referralFee = 1000;\\n\\n    mapping (address => uint) public stakedMATIC;\\n    mapping (address => uint) public balanceSRX;\\n    mapping (address => uint) public stakedTime;\\n    mapping (address => address) public myReferrer;\\n    mapping (address => uint) public myReferalBalance;\\n    mapping (address => uint) public myReferalBalanceTTH;\\n    mapping (address => uint) public myReferalCount;\\n    address public contractDice;\\n\\n    event Stake(address indexed sender, uint amount);\\n    event WithdrowSRX(address indexed sender, uint amount);\\n    event WithdrowMatic(address indexed sender, uint amount);\\n    event ReferralRewards(address indexed referer, address sender, uint amount);\\n\\n    function stake(address _referer) payable public {\\n        require(msg.value >= minStake, \\\"Min Matic\\\");\\n\\n        if(stakedMATIC[msg.sender] != 0) {\\n            withdrawSRX();\\n        }\\n\\n        if (myReferrer[msg.sender] == address(0) && _referer != address(0)) {\\n           myReferrer[msg.sender] = _referer; \\n           myReferalCount[_referer]++;\\n        }\\n\\n        stakedMATIC[msg.sender] += msg.value;\\n        stakedTime[msg.sender] = block.timestamp;\\n        totalStakedMATIC += msg.value;\\n\\n\\n        \\n        emit Stake(msg.sender, msg.value);\\n    }\\n\\n    function withdrawSRX() public {\\n        uint _profit;\\n        address _referer;\\n        uint _refererProfit;\\n\\n        if(stakedMATIC[msg.sender] == 0) {\\n            _profit = balanceSRX[msg.sender];\\n        } else {\\n            _profit = getProfit(msg.sender) + balanceSRX[msg.sender];\\n        }\\n        \\n        SRX.mintStaking(msg.sender, _profit);\\n        stakedTime[msg.sender] = block.timestamp;\\n        balanceSRX[msg.sender] = 0; \\n        totalMinedSRX += _profit;\\n        \\n        //Referal FEE\\n        if (myReferrer[msg.sender] != address(0)) {\\n            _referer = myReferrer[msg.sender];\\n            _refererProfit = calculate(_profit, referralFee);\\n            myReferalBalance[_referer] += _refererProfit;\\n\\n            emit ReferralRewards(_referer, msg.sender, _refererProfit);\\n        }\\n\\n        nextLevel();\\n        emit WithdrowSRX(msg.sender, _profit);\\n    }\\n\\n    function withdrawMATIC() public {\\n        require(stakedMATIC[msg.sender] != 0);\\n\\n        uint _fee = calculate(stakedMATIC[msg.sender], withdrawFeePercent);\\n        uint _amountMinusFee = stakedMATIC[msg.sender] - _fee; \\n        \\n        totalStakedMATIC -= stakedMATIC[msg.sender];\\n        balanceSRX[msg.sender] += getProfit(msg.sender);\\n        stakedMATIC[msg.sender] = 0; \\n        adminFee += _fee;\\n        payable(msg.sender).transfer(_amountMinusFee);\\n    }\\n\\n    // Counting an percentage by basis points\\n    function calculate(uint256 amount, uint256 bps) private pure returns (uint256) {\\n        require((amount * bps) >= 10000);\\n        return amount * bps / 10000;\\n    }\\n\\n    function getProfit(address _sender) private view returns(uint) {\\n        uint _time = block.timestamp - stakedTime[_sender];\\n        uint _amount =  _time * ( amountSRXPerSec01MAtic[curretLevel] * (stakedMATIC[_sender] / perMAtIC));\\n        return _amount;\\n    }\\n    \\n    function referalProfitWithdraw() public {\\n        uint _profitRef = myReferalBalance[msg.sender];\\n        myReferalBalance[msg.sender] = 0;\\n        SRX.mintStaking(msg.sender, _profitRef);\\n        totalMinedSRX += _profitRef;\\n        nextLevel();\\n    }\\n\\n    function nextLevel() private {\\n        if(curretLevel == 0 && totalMinedSRX > levelBorder[0] && totalMinedSRX < levelBorder[1]) {\\n            curretLevel = 1;\\n            } else {\\n                if(curretLevel != 0 && totalMinedSRX > levelBorder[curretLevel] && totalMinedSRX < levelBorder[curretLevel+1]) {\\n                    curretLevel++;\\n                }\\n        }\\n    }\\n\\n    //Functions for the Dice contract\\n    function getReferalBalanceTTH(address _address) view external returns (uint) {\\n        return myReferalBalanceTTH[_address];\\n    }\\n\\n    function getReferalCount(address _address) view external returns (uint) {\\n        return myReferalCount[_address];\\n    }\\n\\n    function getReferrer(address _address) view external returns (address) {\\n        return myReferrer[_address];\\n    }\\n\\n    function setReferalBalanceTTH(address _address, uint _amount) external {\\n        require(msg.sender == contractDice);\\n        myReferalBalanceTTH[_address] = _amount;\\n    }\\n\\n    function setReferrer(address _referral, address _referrer) external {\\n        require(msg.sender == contractDice);\\n        myReferrer[_referral] = _referrer;\\n    }\\n\\n    function setReferalCount(address _address, uint _count) external {\\n        require(msg.sender == contractDice);\\n        myReferalCount[_address] = _count;\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function setDiceContract(address _address) public onlyOwner{\\n        contractDice = _address;\\n    }\\n\\n    function setSRX(IERC20 _address) public onlyOwner{\\n        SRX = _address;\\n    }\\n\\n    function setMinStake(uint _minStake) public onlyOwner{\\n        minStake = _minStake;\\n    }\\n\\n    function setWithdrawFeePercent(uint _withdrawFeePercent) public onlyOwner{\\n        withdrawFeePercent = _withdrawFeePercent;\\n    }\\n\\n    function setAmountSRXPerSec01MAtic(uint[15] memory _amountSRXPerSec01MAtic) public onlyOwner{\\n       amountSRXPerSec01MAtic = _amountSRXPerSec01MAtic;\\n    }\\n\\n    function setLevelBorder(uint[15] memory _levelBorder) public onlyOwner{\\n       levelBorder = _levelBorder;\\n    }\\n\\n    function setCurretLevel(uint _curretLevel) public onlyOwner {\\n        curretLevel = _curretLevel;\\n    }\\n\\n    function withdrawFromContract(uint amount) public onlyOwner {\\n        payable(msg.sender).transfer(amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrowMatic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrowSRX\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SRX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountSRXPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountSRXPerSec01MAtic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceSRX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curretLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferalBalanceTTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelBorder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferalBalanceTTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perMAtIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referalProfitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[15]\",\"name\":\"_amountSRXPerSec01MAtic\",\"type\":\"uint256[15]\"}],\"name\":\"setAmountSRXPerSec01MAtic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curretLevel\",\"type\":\"uint256\"}],\"name\":\"setCurretLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDiceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[15]\",\"name\":\"_levelBorder\",\"type\":\"uint256[15]\"}],\"name\":\"setLevelBorder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReferalBalanceTTH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setReferalCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSRX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeePercent\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinedSRX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSRX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingAndReferral", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}