{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract MountainMinerMATIC is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    address payable public dev;\r\n    address payable public market;\r\n\r\n    uint256 public ORES_TO_HIRE_1CRAFT = 1728000;\r\n    uint256 public REFERRAL = 30;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public DEV_TAX = 15;\r\n    uint256 public MARKET_TAX = 15;\r\n    uint256 public MARKET_ORES_DIVISOR = 2;\r\n\r\n    uint256 public MIN_DEPOSIT_LIMIT = 1.55 ether;\r\n    uint256 public MAX_WITHDRAW_LIMIT = 1_550 ether;\r\n    uint256[5] public ROI_MAP = [76_408 ether, 152_817 ether, 764_083 ether, 1_528_167 ether, 7_640_265 ether];\r\n\r\n\tuint256 public COMPOUND_BONUS = 5;\r\n\tuint256 public COMPOUND_MAX_TIMES = 10;\r\n    uint256 public COMPOUND_DURATION = 12 * 60 * 60;\r\n\tuint256 public PROOF_OF_LIFE = 48 * 60 * 60;\r\n    uint256 public WITHDRAWAL_TAX = 700;\r\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 10;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalSuttles;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n\r\n    uint256 public marketOres = 144000000000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 shuttles;\r\n        uint256 claimedOres;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 shuttlesCompoundCount;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    constructor(address payable _dev, address payable _market) {\r\n\t\trequire(!isContract(_dev) && !isContract(_market));\r\n        dev = _dev;\r\n        market = _market;\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function startJourney() public onlyOwner{\r\n    \trequire(!contractStarted, \"Already started\");\r\n    \tcontractStarted = true;\r\n    }\r\n\r\n    function buyMoreSpaceShuttles() public {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n        User storage user = users[msg.sender];\r\n        require(block.timestamp.sub(user.lastHatch) >= COMPOUND_DURATION,\"Wait for next compound\");\r\n        compound(true);\r\n    }\r\n\r\n    function compound(bool isCompound) internal {\r\n        \r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 oresUsed = getMyOres(msg.sender);\r\n        uint256 oresForCompound = oresUsed;\r\n\r\n        if(isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, oresForCompound);\r\n            oresForCompound = oresForCompound.add(dailyCompoundBonus);\r\n            uint256 oresUsedValue = calculateOresSell(oresForCompound);\r\n            user.userDeposit = user.userDeposit.add(oresUsedValue);\r\n            totalCompound = totalCompound.add(oresUsedValue);\r\n            if(user.dailyCompoundBonus < COMPOUND_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        } \r\n\r\n        //add compoundCount for monitoring purposes.\r\n        user.shuttlesCompoundCount = user.shuttlesCompoundCount .add(1);\r\n        user.shuttles = user.shuttles.add(oresForCompound.div(ORES_TO_HIRE_1CRAFT));\r\n        totalSuttles = totalSuttles.add(oresForCompound.div(ORES_TO_HIRE_1CRAFT));\r\n        user.claimedOres = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        marketOres = marketOres.add(oresUsed.div(MARKET_ORES_DIVISOR));\r\n    }\r\n\r\n    function sellOres() public{\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 hasOres = getMyOres(msg.sender);\r\n        uint256 oresValue = calculateOresSell(hasOres);\r\n        \r\n        /** \r\n            if user compound < to mandatory compound days**/\r\n        if(user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL){\r\n            //daily compound bonus count will not reset and oresValue will be deducted with x% feedback tax.\r\n            oresValue = oresValue.sub(oresValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        }else{\r\n            //set daily compound bonus count to 0 and oresValue will remain without deductions\r\n             user.dailyCompoundBonus = 0;   \r\n             user.shuttlesCompoundCount = 0;  \r\n        }\r\n        \r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedOres = 0;  \r\n        user.lastHatch = block.timestamp;\r\n        marketOres = marketOres.add(hasOres.div(MARKET_ORES_DIVISOR));\r\n        \r\n        // Antiwhale limit\r\n        if(oresValue > MAX_WITHDRAW_LIMIT){\r\n            buy(msg.sender, address(0), oresValue.sub(MAX_WITHDRAW_LIMIT));\r\n            oresValue = MAX_WITHDRAW_LIMIT;\r\n        }\r\n        if(oresValue > getBalance()) {\r\n            buy(msg.sender, address(0), oresValue.sub(getBalance()));\r\n            oresValue = getBalance();\r\n        }\r\n\r\n        uint256 oresPayout = oresValue.sub(takeFees(oresValue));\r\n        payable(msg.sender).transfer(oresPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(oresPayout);\r\n        totalWithdrawn = totalWithdrawn.add(oresPayout);\r\n    }\r\n\r\n    /** Deposit **/\r\n    function buySpaceShuttles(address ref) public payable{\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n        require(msg.value >= MIN_DEPOSIT_LIMIT, \"Less than min limit\");\r\n        buy(msg.sender, ref, msg.value);\r\n    }\r\n     \r\n    function buy(address _user, address ref, uint256 amount) internal {\r\n        User storage user = users[_user];\r\n        uint256 oresBought = calculateOresBuy(amount, getBalance().sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedOres = user.claimedOres.add(oresBought);\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != _user) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n            }\r\n        }\r\n                \r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                payable(upline).transfer(refRewards);\r\n                users[upline].referralRewards = users[upline].referralRewards.add(refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 oresPayout = takeFees(amount);\r\n        totalStaked = totalStaked.add(amount.sub(oresPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n        compound(false);\r\n\r\n        if(getBalance() < ROI_MAP[0]){\r\n            ORES_TO_HIRE_1CRAFT = 1728000;\r\n        } else if(getBalance() >= ROI_MAP[0] && getBalance() < ROI_MAP[1]){\r\n            ORES_TO_HIRE_1CRAFT = 1584000;\r\n        } else if(getBalance() >= ROI_MAP[1] && getBalance() < ROI_MAP[2]){\r\n            ORES_TO_HIRE_1CRAFT = 1440000;\r\n        } else if(getBalance() >= ROI_MAP[2] && getBalance() < ROI_MAP[3]){\r\n            ORES_TO_HIRE_1CRAFT = 1320000;\r\n        }  else if(getBalance() >= ROI_MAP[3] && getBalance() < ROI_MAP[4]){\r\n            ORES_TO_HIRE_1CRAFT = 1200000;\r\n        }  else if(getBalance() >= ROI_MAP[4]){\r\n            ORES_TO_HIRE_1CRAFT = 1140000;\r\n        }\r\n    }\r\n\r\n    function takeFees(uint256 oresValue) internal returns(uint256){\r\n        uint256 tax = oresValue.mul(DEV_TAX).div(PERCENTS_DIVIDER);\r\n        uint256 marketing = oresValue.mul(MARKET_TAX).div(PERCENTS_DIVIDER);\r\n        payable(dev).transfer(tax);\r\n        payable(market).transfer(marketing);\r\n        return marketing.add(tax);\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(COMPOUND_BONUS); \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _shuttles,\r\n     uint256 _claimedOres, uint256 _lastHatch, address _referrer, uint256 _referrals,\r\n\t uint256 _totalWithdrawn, uint256 _referralRewards, uint256 _dailyCompoundBonus, uint256 _shuttlesCompoundCount, uint256 _lastWithdrawTime) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _shuttles = users[_adr].shuttles;\r\n         _claimedOres = users[_adr].claimedOres;\r\n         _lastHatch = users[_adr].lastHatch;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralRewards = users[_adr].referralRewards;\r\n         _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n         _shuttlesCompoundCount = users[_adr].shuttlesCompoundCount;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n\t}\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return (address(this)).balance;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userOres = users[_adr].claimedOres.add(getOresSinceLastHatch(_adr));\r\n        return calculateOresSell(userOres);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(\r\n                SafeMath.mul(PSN, bs), \r\n                    SafeMath.add(PSNH, \r\n                        SafeMath.div(\r\n                            SafeMath.add(\r\n                                SafeMath.mul(PSN, rs), \r\n                                    SafeMath.mul(PSNH, rt)), \r\n                                        rt)));\r\n    }\r\n\r\n    function calculateOresSell(uint256 ores) public view returns(uint256){\r\n        return calculateTrade(ores, marketOres, getBalance());\r\n    }\r\n\r\n    function calculateOresBuy(uint256 amount,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(amount, contractBalance, marketOres);\r\n    }\r\n\r\n    function calculateOresBuySimple(uint256 amount) public view returns(uint256){\r\n        return calculateOresBuy(amount, getBalance());\r\n    }\r\n\r\n    /** How many shuttles and Ores per day user will recieve based on deposit amount **/\r\n    function getOresYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 oresAmount = calculateOresBuy(amount , getBalance().add(amount).sub(amount));\r\n        uint256 shuttles = oresAmount.div(ORES_TO_HIRE_1CRAFT);\r\n        uint256 day = 1 days;\r\n        uint256 oresPerDay = day.mul(shuttles);\r\n        uint256 earningsPerDay = calculateOresSellForYield(oresPerDay, amount);\r\n        return(shuttles, earningsPerDay);\r\n    }\r\n\r\n    function calculateOresSellForYield(uint256 ores,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(ores,marketOres, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalSuttles, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalSuttles, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyshuttles(address userAddress) public view returns(uint256){\r\n        return users[userAddress].shuttles;\r\n    }\r\n\r\n    function getMyOres(address userAddress) public view returns(uint256){\r\n        return users[userAddress].claimedOres.add(getOresSinceLastHatch(userAddress));\r\n    }\r\n\r\n    function getOresSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(users[adr].lastHatch);\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, PROOF_OF_LIFE);\r\n        uint256 secondsPassed = min(ORES_TO_HIRE_1CRAFT, cutoffTime);\r\n        return secondsPassed.mul(users[adr].shuttles);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function SET_WALLETS(address payable _dev, address payable _market) external onlyOwner{\r\n\t\trequire(!isContract(_dev) && !isContract(_market));\r\n        dev = _dev;\r\n        market = _market;\r\n    }\r\n\r\n    function PRC_MARKET_ORES_DIVISOR(uint256 value) external onlyOwner {\r\n        require(value > 0 && value <= 5);\r\n        MARKET_ORES_DIVISOR = value;\r\n    }\r\n\r\n    function SET_WITHDRAWAL_TAX(uint256 value) external onlyOwner {\r\n        require(value <= 700);\r\n        WITHDRAWAL_TAX = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND(uint256 value) external onlyOwner {\r\n        require(value >= 1 && value <= 30);\r\n        COMPOUND_BONUS = value;\r\n    }\r\n\r\n    function BONUS_DAILY_COMPOUND_MAX_TIMES(uint256 value) external onlyOwner {\r\n        require(value > 5 && value <= 10);\r\n        COMPOUND_MAX_TIMES = value;\r\n    }\r\n\r\n    function BONUS_COMPOUND_DURATION(uint256 value) external onlyOwner {\r\n        require(value <= 24);\r\n        COMPOUND_DURATION = value * 60 * 60;\r\n    }\r\n\r\n    function SET_PROOF_OF_LIFE(uint256 value) external onlyOwner {\r\n        require(value >= 24);\r\n        PROOF_OF_LIFE = value * 60 * 60;\r\n    }\r\n\r\n    function SET_MAX_WITHDRAW_LIMIT(uint256 value) external onlyOwner {\r\n        require(value >= 770 ether);\r\n        MAX_WITHDRAW_LIMIT = value;\r\n    }\r\n\r\n    function SET_MIN_DEPOSIT_LIMIT(uint256 value) external onlyOwner {\r\n        require(value <= 15.5 ether);\r\n        MIN_DEPOSIT_LIMIT = value;\r\n    }\r\n    \r\n    function SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL(uint256 value) external onlyOwner {\r\n        require(value <= 12);\r\n        COMPOUND_FOR_NO_TAX_WITHDRAWAL = value;\r\n    }\r\n\r\n    function UPDATE_ROI_MAP1(uint256 value) external onlyOwner {\r\n        require(value <= 78_408);\r\n        ROI_MAP[0] = value * 1 ether;\r\n    }\r\n\r\n    function UPDATE_ROI_MAP2(uint256 value) external onlyOwner {\r\n        require(value <= 352_817);\r\n        ROI_MAP[1] = value * 1 ether;\r\n    }\r\n\r\n    function UPDATE_ROI_MAP3(uint256 value) external onlyOwner {\r\n        require(value <= 964_083);\r\n        ROI_MAP[2] = value * 1 ether;\r\n    }\r\n\r\n    function UPDATE_ROI_MAP4(uint256 value) external onlyOwner {\r\n        require(value <= 2_028_167);\r\n        ROI_MAP[3] = value * 1 ether;\r\n    }\r\n\r\n    function UPDATE_ROI_MAP5(uint256 value) external onlyOwner {\r\n        require(value <= 8_040_265);\r\n        ROI_MAP[4] = value * 1 ether;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_COMPOUND_DURATION\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BONUS_DAILY_COMPOUND_MAX_TIMES\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_ORES_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORES_TO_HIRE_1CRAFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKET_ORES_DIVISOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_OF_LIFE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ROI_MAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_WITHDRAW_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MIN_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_PROOF_OF_LIFE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"SET_WALLETS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAWAL_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UPDATE_ROI_MAP1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UPDATE_ROI_MAP2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UPDATE_ROI_MAP3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UPDATE_ROI_MAP4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UPDATE_ROI_MAP5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMoreSpaceShuttles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buySpaceShuttles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateOresBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateOresBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ores\",\"type\":\"uint256\"}],\"name\":\"calculateOresSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ores\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateOresSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMyOres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getMyshuttles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getOresSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getOresYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSuttles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shuttles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedOres\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shuttlesCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOres\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOres\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startJourney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSuttles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shuttles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedOres\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shuttlesCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MountainMinerMATIC", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f41d842b9aab018b7c21f30ebd43b3281b87ed29000000000000000000000000a5fcdade0df62689a45b00c42852d78d20eed864", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://790265233541b774bddcaa941cc611c6c6bfa3c777731258987d6a1ef4b67c4e"}