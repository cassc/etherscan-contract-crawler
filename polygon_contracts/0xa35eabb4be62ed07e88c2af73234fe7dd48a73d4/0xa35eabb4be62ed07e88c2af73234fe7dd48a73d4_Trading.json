{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernanceStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernanceStaking {\\n    function stake(uint256 _amount, uint256 _duration) external;\\n    function unstake(uint256 _amount) external;\\n    function claim() external;\\n    function distribute(address _token, uint256 _amount) external;\\n    function whitelistReward(address _rewardToken) external;\\n    function pending(address _user, address _token) external view returns (uint256);\\n    function userStaked(address _user) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPairsContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPairsContract {\\n\\n    struct Asset {\\n        string name;\\n        address chainlinkFeed;\\n        uint256 minLeverage;\\n        uint256 maxLeverage;\\n        uint256 feeMultiplier;\\n        uint256 baseFundingRate;\\n    }\\n\\n    struct OpenInterest {\\n        uint256 longOi;\\n        uint256 shortOi;\\n        uint256 maxOi;\\n    }\\n\\n    function allowedAsset(uint) external view returns (bool);\\n    function idToAsset(uint256 _asset) external view returns (Asset memory);\\n    function idToOi(uint256 _asset, address _tigAsset) external view returns (OpenInterest memory);\\n    function setAssetBaseFundingRate(uint256 _asset, uint256 _baseFundingRate) external;\\n    function modifyLongOi(uint256 _asset, address _tigAsset, bool _onOpen, uint256 _amount) external;\\n    function modifyShortOi(uint256 _asset, address _tigAsset, bool _onOpen, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPermissionedForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/TradingLibrary.sol\\\";\\n\\ninterface IPermissionedForwarder {\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        bytes32 salt;\\n        uint256 deadline;\\n        bytes data;\\n    }\\n\\n    function fundAccount(address _account) external payable;\\n    function fund() external payable;\\n    function withdraw(uint256 _amount) external;\\n    function withdrawAll() external;\\n    function executeWithPrice(ForwardRequest calldata req, bytes calldata signature, PriceData calldata priceData) external returns (bool, bytes memory);\\n    function executeWithoutPrice(ForwardRequest calldata req, bytes calldata signature) external returns (bool, bytes memory);\\n    function setPrivateRelayer(address _relayer, bool _status) external;\\n    function setGas(uint256 _gas) external;\\n    function setAllowedTarget(address _target, bool _status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPosition {\\n\\n    struct Trade {\\n        uint256 margin;\\n        uint256 leverage;\\n        uint256 asset;\\n        bool direction;\\n        uint256 price;\\n        uint256 tpPrice;\\n        uint256 slPrice;\\n        uint256 orderType;\\n        address trader;\\n        uint256 id;\\n        address tigAsset;\\n        int accInterest;\\n    }\\n\\n    struct MintTrade {\\n        address account;\\n        uint256 margin;\\n        uint256 leverage;\\n        uint256 asset;\\n        bool direction;\\n        uint256 price;\\n        uint256 tp;\\n        uint256 sl;\\n        uint256 orderType;\\n        address tigAsset;\\n    }\\n\\n    function trades(uint256) external view returns (Trade memory);\\n    function executeLimitOrder(uint256 _id, uint256 _price, uint256 _newMargin) external;\\n    function modifyMargin(uint256 _id, uint256 _newMargin, uint256 _newLeverage) external;\\n    function addToPosition(uint256 _id, uint256 _newMargin, uint256 _newPrice) external;\\n    function reducePosition(uint256 _id, uint256 _newMargin) external;\\n    function assetOpenPositions(uint256 _asset) external view returns (uint256[] calldata);\\n    function assetOpenPositionsIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\\n    function limitOrders(uint256 _asset) external view returns (uint256[] memory);\\n    function limitOrderIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\\n    function assetOpenPositionsLength(uint256 _asset) external view returns (uint256);\\n    function limitOrdersLength(uint256 _asset) external view returns (uint256);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function mint(MintTrade memory _mintTrade) external;\\n    function burn(uint256 _id) external;\\n    function modifyTp(uint256 _id, uint256 _tpPrice) external;\\n    function modifySl(uint256 _id, uint256 _slPrice) external;\\n    function getCount() external view returns (uint);\\n    function updateFunding(uint256 _asset, address _tigAsset, uint256 _longOi, uint256 _shortOi, uint256 _baseFundingRate, uint256 _vaultFundingPercent) external;\\n    function setAccInterest(uint256 _id) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IReferrals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferrals {\\n    function setReferred(address _referredTrader, address _referrer) external;\\n    function getReferred(address _trader) external view returns (address, uint);\\n    function addRefFees(address _trader, address _tigAsset, uint _fees) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStableVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStableVault {\\n    function deposit(address, uint) external;\\n    function withdraw(address, uint) external returns (uint256);\\n    function allowed(address) external view returns (bool);\\n    function stable() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITrading.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/TradingLibrary.sol\\\";\\n\\ninterface ITrading {\\n\\n    struct TradeInfo {\\n        uint256 margin;\\n        address marginAsset;\\n        address stableVault;\\n        uint256 leverage;\\n        uint256 asset;\\n        bool direction;\\n        uint256 tpPrice;\\n        uint256 slPrice;\\n        address referrer;\\n    }\\n    struct ERC20PermitData {\\n        uint256 deadline;\\n        uint256 amount;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bool usePermit;\\n    }\\n    struct Fees {\\n        uint256 daoFees;\\n        uint256 burnFees;\\n        uint256 refDiscount;\\n        uint256 botFees;\\n    }\\n    struct Delay {\\n        uint256 delay; // Block timestamp where delay ends\\n        bool actionType; // True for open, False for close\\n    }\\n\\n    error LimitNotSet();\\n    error OnlyEOA();\\n    error NotLiquidatable();\\n    error TradingPaused();\\n    error OldPriceData();\\n    error OrderNotFound();\\n    error TooEarlyToCancel();\\n    error BadDeposit();\\n    error BadWithdraw();\\n    error BadStopLoss();\\n    error IsLimit();\\n    error ValueNotEqualToMargin();\\n    error BadLeverage();\\n    error NotMargin();\\n    error NotAllowedInVault();\\n    error NotVault();\\n    error NotOwner();\\n    error NotAllowedPair();\\n    error WaitDelay();\\n    error NotProxy();\\n    error BelowMinPositionSize();\\n    error BadClosePercent();\\n    error NoPrice();\\n    error LiqThreshold();\\n    error CloseToMaxPnL();\\n    error BadSetter();\\n    error BadConstructor();\\n    error NotLimit();\\n    error LimitNotMet();\\n    error NotEnoughGas();\\n\\n    function marketOpen(\\n        TradeInfo calldata _tradeInfo,\\n        ERC20PermitData calldata _permitData,\\n        address _trader,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function marketClose(\\n        uint256 _id,\\n        uint256 _percent,\\n        address _stableVault,\\n        address _outputToken,\\n        address _trader,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function addMargin(\\n        uint256 _id,\\n        address _stableVault,\\n        address _marginAsset,\\n        uint256 _addMargin,\\n        ERC20PermitData calldata _permitData,\\n        address _trader,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function removeMargin(\\n        uint256 _id,\\n        address _stableVault,\\n        address _outputToken,\\n        uint256 _removeMargin,\\n        address _trader,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n     function addToPosition(\\n         uint256 _id,\\n         address _stableVault,\\n         address _marginAsset,\\n         uint256 _addMargin,\\n         ERC20PermitData calldata _permitData,\\n         address _trader,\\n         PriceData calldata _priceData\\n     ) external;\\n\\n    function createLimitOrder(\\n        TradeInfo calldata _tradeInfo,\\n        uint256 _orderType, // 1 limit, 2 momentum\\n        uint256 _price,\\n        ERC20PermitData calldata _permitData,\\n        address _trader\\n    ) external;\\n\\n    function cancelLimitOrder(\\n        uint256 _id,\\n        address _trader\\n    ) external;\\n\\n    function updateTpSl(\\n        bool _type, // true is TP\\n        uint256 _id,\\n        uint256 _limitPrice,\\n        address _trader,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function executeLimitOrder(\\n        uint256 _id, \\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function liquidatePosition(\\n        uint256 _id,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function limitClose(\\n        uint256 _id,\\n        bool _tp,\\n        PriceData calldata _priceData\\n    ) external;\\n\\n    function proxyApprovals(address _account) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITradingExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/TradingLibrary.sol\\\";\\nimport \\\"./IPairsContract.sol\\\";\\n\\ninterface ITradingExtension {\\n\\n    error LimitNotMet();\\n    error LimitNotSet();\\n    error IsLimit();\\n    error GasTooHigh();\\n    error BadConstructor();\\n\\n    function getVerifiedPrice(\\n        uint256 _asset,\\n        PriceData calldata _priceData,\\n        uint8 _withSpreadIsLong\\n    ) external returns(uint256 _price, uint256 _spread);\\n\\n    function validateTrade(uint256 _assetId, uint256 _minLeverage, uint256 _maxLeverage, address _tigAsset, uint256 _margin, uint256 _leverage, uint256 _orderType) external view;\\n\\n    function minPos(address) external view returns(uint);\\n\\n    function paused() external view returns(bool);\\n\\n    function _limitClose(\\n        uint256 _id,\\n        bool _tp,\\n        PriceData calldata _priceData\\n    ) external returns(uint256 _limitPrice, address _tigAsset);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IxTIG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IxTIG is IERC20 {\\n    function vestingPeriod() external view returns (uint256);\\n    function earlyUnlockPenalty() external view returns (uint256);\\n    function epochFeesGenerated(uint256 _epoch) external view returns (uint256);\\n    function epochAllocation(uint256 _epoch) external view returns (uint256);\\n    function epochAllocationClaimed(uint256 _epoch) external view returns (uint256);\\n    function feesGenerated(uint256 _epoch, address _trader) external view returns (uint256);\\n    function tigAssetValue(address _tigAsset) external view returns (uint256);\\n    function createVest(uint256 _from) external;\\n    function claimTig() external;\\n    function earlyClaimTig() external;\\n    function claimFees() external;\\n    function addFees(address _trader, address _tigAsset, uint256 _fees) external;\\n    function addTigRewards(uint256 _epoch, uint256 _amount) external;\\n    function setTigAssetValue(address _tigAsset, uint256 _value) external;\\n    function setCanAddFees(address _address, bool _allowed) external;\\n    function setExtraRewards(address _address) external;\\n    function setVestingPeriod(uint256 _time) external;\\n    function setEarlyUnlockPenalty(uint256 _percent) external;\\n    function whitelistReward(address _rewardToken) external;\\n    function contractPending(address _token) external view returns (uint256);\\n    function extraRewardsPending(address _token) external view returns (uint256);\\n    function pending(address _user, address _token) external view returns (uint256);\\n    function pendingTig(address _user) external view returns (uint256);\\n    function pendingEarlyTig(address _user) external view returns (uint256);\\n    function upcomingXTig(address _user) external view returns (uint256);\\n    function stakedTigBalance() external view returns (uint256);\\n    function userRewardBatches(address _user) external view returns (RewardBatch[] memory);\\n    function unclaimedAllocation(uint256 _epoch) external view returns (uint256);\\n    function currentEpoch() external view returns (uint256);\\n\\n    struct RewardBatch {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    event TigRewardsAdded(address indexed sender, uint256 amount);\\n    event TigVested(address indexed account, uint256 amount);\\n    event TigClaimed(address indexed user, uint256 amount);\\n    event EarlyTigClaimed(address indexed user, uint256 amount, uint256 penalty);\\n    event TokenWhitelisted(address token);\\n    event TokenUnwhitelisted(address token);\\n    event RewardClaimed(address indexed user, uint256 reward);\\n    event VestingPeriodUpdated(uint256 time);\\n    event EarlyUnlockPenaltyUpdated(uint256 percent);\\n    event FeePermissionUpdated(address indexed protocol, bool permission);\\n    event TreasuryUpdated(address indexed treasury);\\n    event SetExtraRewards(address indexed extraRewards);\\n    event FeesAdded(address indexed _trader, address indexed _tigAsset, uint256 _amount, uint256 indexed _value);\\n    event TigAssetValueUpdated(address indexed _tigAsset, uint256 indexed _value);\\n}\\n\"\r\n    },\r\n    \"contracts/Trading.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport \\\"./utils/PermissionedMetaContext.sol\\\";\\nimport \\\"./interfaces/ITrading.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IPairsContract.sol\\\";\\nimport \\\"./interfaces/IReferrals.sol\\\";\\nimport \\\"./interfaces/IPosition.sol\\\";\\nimport \\\"./interfaces/IGovernanceStaking.sol\\\";\\nimport \\\"./interfaces/IStableVault.sol\\\";\\nimport \\\"./interfaces/ITradingExtension.sol\\\";\\nimport \\\"./interfaces/IxTIG.sol\\\";\\nimport \\\"./utils/TradingLibrary.sol\\\";\\n\\ninterface IStable is IERC20 {\\n    function burnFrom(address account, uint256 amount) external;\\n    function mintFor(address account, uint256 amount) external;\\n}\\n\\ninterface ExtendedIERC20 is IERC20 {\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface ERC20Permit is IERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface ILPStaking {\\n    function distribute(address _tigAsset, uint256 _amount) external;\\n}\\n\\ncontract Trading is PermissionedMetaContext, ITrading {\\n\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant DIVISION_CONSTANT = 1e10; // 100%\\n    uint256 private constant LIQPERCENT = 9e9; // 90%\\n\\n    IPairsContract private pairsContract;\\n    IPosition private position;\\n    IGovernanceStaking private staking;\\n    ILPStaking private lpstaking;\\n    ITradingExtension private tradingExtension;\\n    IxTIG private xtig;\\n    IReferrals private referrals;\\n\\n    Fees public openFees = Fees(\\n        0,\\n        0,\\n        0,\\n        0\\n    );\\n    Fees public closeFees = Fees(\\n        0,\\n        0,\\n        0,\\n        0\\n    );\\n\\n    uint256 private limitOrderPriceRange = 1e10; // 100%\\n    uint256 public maxWinPercent;\\n    uint256 public vaultFundingPercent;\\n    uint256 public timeDelay;\\n    uint256 public lpDistribution = 3e9;\\n    uint256 public minSlPnlDif = 1e7; // 0.1%\\n\\n    mapping(uint256 => Delay) private timeDelayPassed; // id => Delay\\n    mapping(address => bool) private allowedVault;\\n    mapping(address => address) public proxyApprovals;\\n    mapping(address => mapping(address => bool)) private tokenApprovals;\\n\\n    // ===== EVENTS =====\\n\\n    event PositionOpened(\\n        TradeInfo tradeInfo,\\n        uint256 orderType,\\n        uint256 price,\\n        uint256 id,\\n        address trader,\\n        uint256 marginAfterFees\\n    );\\n\\n    event PositionClosed(\\n        uint256 id,\\n        uint256 closePrice,\\n        uint256 percent,\\n        uint256 payout,\\n        address trader,\\n        address executor\\n    );\\n\\n    event PositionLiquidated(\\n        uint256 id,\\n        uint256 liqPrice,\\n        address trader,\\n        address executor\\n    );\\n\\n    event LimitOrderExecuted(\\n        uint256 asset,\\n        bool direction,\\n        uint256 openPrice,\\n        uint256 lev,\\n        uint256 margin,\\n        uint256 id,\\n        address trader,\\n        address executor\\n    );\\n\\n    event UpdateTPSL(\\n        uint256 id,\\n        bool isTp,\\n        uint256 price,\\n        address trader\\n    );\\n\\n    event LimitCancelled(\\n        uint256 id,\\n        address trader\\n    );\\n\\n    event MarginModified(\\n        uint256 id,\\n        uint256 newMargin,\\n        uint256 newLeverage,\\n        bool isMarginAdded,\\n        address trader\\n    );\\n\\n    event AddToPosition(\\n        uint256 id,\\n        uint256 newMargin,\\n        uint256 newPrice,\\n        uint256 addMargin,\\n        address trader\\n    );\\n\\n    event FeesDistributed(\\n        address tigAsset,\\n        uint256 daoFees,\\n        uint256 burnFees,\\n        uint256 refFees,\\n        uint256 botFees,\\n        address referrer\\n    );\\n\\n    constructor(\\n        address _position,\\n        address _staking,\\n        address _pairsContract,\\n        address _lpstaking,\\n        address _xtig,\\n        address _referrals\\n    )\\n    {\\n        if (\\n            _position == address(0)\\n            || _staking == address(0)\\n            || _pairsContract == address(0)\\n            || _lpstaking == address(0)\\n            || _xtig == address(0)\\n            || _referrals == address(0)\\n        ) {\\n            revert BadConstructor();\\n        }\\n        position = IPosition(_position);\\n        staking = IGovernanceStaking(_staking);\\n        lpstaking = ILPStaking(_lpstaking);\\n        pairsContract = IPairsContract(_pairsContract);\\n        xtig = IxTIG(_xtig);\\n        referrals = IReferrals(_referrals);\\n    }\\n\\n    // ===== END-USER FUNCTIONS =====\\n\\n    /**\\n     * @param _tradeInfo Trade info\\n     * @param _priceData verifiable off-chain price data\\n     * @param _permitData data and signature needed for token approval\\n     * @param _trader address the trade is initiated for\\n     */\\n    function marketOpen(\\n        TradeInfo memory _tradeInfo,\\n        ERC20PermitData calldata _permitData,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        uint256 _id = _getCount();\\n        _checkDelay(_id, true);\\n        _checkVault(_tradeInfo.stableVault, _tradeInfo.marginAsset);\\n        address _tigAsset = _getStable(_tradeInfo.stableVault);\\n        IPairsContract.Asset memory _asset = _getAsset(_tradeInfo.asset);\\n        _validateTrade(_tradeInfo.asset, _asset.minLeverage, _asset.maxLeverage, _tigAsset, _tradeInfo.margin, _tradeInfo.leverage, 0);\\n        referrals.setReferred(_trader, _tradeInfo.referrer);\\n        _handleDeposit(_tigAsset, _tradeInfo.marginAsset, _tradeInfo.margin, _tradeInfo.stableVault, _permitData, _trader);\\n        uint256 _marginAfterFees = _tradeInfo.margin - _handleOpenFees(_asset.feeMultiplier, _tradeInfo.margin*_tradeInfo.leverage/1e18, _trader, _tigAsset, false);\\n        uint8 _isLong = _tradeInfo.direction ? 1 : 2;\\n        (uint256 _price,) = _getVerifiedPrice(_tradeInfo.asset, _priceData, _isLong);\\n        _tradeInfo.slPrice = _checkSl(_tradeInfo.slPrice, _tradeInfo.direction, _price);\\n        IPosition.MintTrade memory _mintTrade = IPosition.MintTrade(\\n            _trader,\\n            _marginAfterFees,\\n            _tradeInfo.leverage,\\n            _tradeInfo.asset,\\n            _tradeInfo.direction,\\n            _price,\\n            _tradeInfo.tpPrice,\\n            _tradeInfo.slPrice,\\n            0,\\n            _tigAsset\\n        );\\n        {\\n            uint256 _positionSize = _marginAfterFees * _tradeInfo.leverage / 1e18;\\n            _handleModifyOi(_tradeInfo.direction, _tradeInfo.asset, _tigAsset, true, _positionSize);\\n        }\\n        _updateFunding(_tradeInfo.asset, _asset.baseFundingRate, _tigAsset);\\n        _handlePositionMint(_mintTrade);\\n        emit PositionOpened(_tradeInfo, 0, _price, _id, _trader, _marginAfterFees);\\n    }\\n\\n    /**\\n     * @dev initiate closing position\\n     * @param _id id of the position NFT\\n     * @param _percent percent of the position being closed in BP\\n     * @param _priceData verifiable off-chain price data\\n     * @param _stableVault StableVault address\\n     * @param _outputToken Token received upon closing trade\\n     * @param _trader address the trade is initiated for\\n     */\\n    function marketClose(\\n        uint256 _id,\\n        uint256 _percent,\\n        address _stableVault,\\n        address _outputToken,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkDelay(_id, false);\\n        _checkOwner(_id, _trader);\\n        _checkVault(_stableVault, _outputToken);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        if (_trade.orderType != 0) revert(\\\"Cannot close a limit order.\\\");\\n        (uint256 _price,) = _getVerifiedPrice(_trade.asset, _priceData, 0);\\n        _closePosition(_id, _percent, _price, _stableVault, _outputToken, false);\\n    }\\n\\n    /**\\n     * @param _id position id\\n     * @param _addMargin margin amount used to add to the position\\n     * @param _priceData verifiable off-chain price data\\n     * @param _stableVault StableVault address\\n     * @param _marginAsset Token being used to add to the position\\n     * @param _permitData data and signature needed for token approval\\n     * @param _trader address the trade is initiated for\\n     */\\n    function addToPosition(\\n        uint256 _id,\\n        address _stableVault,\\n        address _marginAsset,\\n        uint256 _addMargin,\\n        ERC20PermitData calldata _permitData,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkOwner(_id, _trader);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n        _validateTrade(_trade.asset, _asset.minLeverage, _asset.maxLeverage, _trade.tigAsset, _trade.margin + _addMargin, _trade.leverage, 0);\\n        _checkVault(_stableVault, _marginAsset);\\n        if (_trade.orderType != 0) revert(\\\"Cannot add to a limit order.\\\");\\n        uint256 _fee = _handleOpenFees(_asset.feeMultiplier, _addMargin*_trade.leverage/1e18, _trader, _trade.tigAsset, false);\\n        _handleDeposit(\\n            _trade.tigAsset,\\n            _marginAsset,\\n            _addMargin,\\n            _stableVault,\\n            _permitData,\\n            _trader\\n        );\\n\\n        _checkDelay(_id, true);\\n        uint8 _isLong = _trade.direction ? 1 : 2;\\n        (uint256 _price,) = _getVerifiedPrice(_trade.asset, _priceData, _isLong);\\n        {\\n            (,int256 _payout) = _getPnl(_trade.direction, _priceData.price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\\n            if (maxWinPercent != 0 && _payout >= int256(_trade.margin*(maxWinPercent-DIVISION_CONSTANT)/DIVISION_CONSTANT)) revert(\\\"PnL too close to max.\\\");\\n        }\\n        position.setAccInterest(_id);\\n        uint256 _marginToAdd;\\n        {\\n            _marginToAdd = _addMargin - _fee;\\n            uint256 _positionSize = _marginToAdd * _trade.leverage / 1e18;\\n            _handleModifyOi(_trade.direction, _trade.asset, _trade.tigAsset, true, _positionSize);\\n        }\\n        _updateFunding(_trade.asset, _asset.baseFundingRate, _trade.tigAsset);\\n        uint256 _newMargin = _trade.margin + _marginToAdd;\\n        uint256 _newPrice = _trade.price * _price * _newMargin /  (_trade.margin * _price + _marginToAdd * _trade.price);\\n        position.addToPosition(\\n            _trade.id,\\n            _newMargin,\\n            _newPrice\\n        );\\n        emit AddToPosition(_trade.id, _newMargin, _newPrice, _marginToAdd, _trade.trader);\\n    }\\n\\n    /**\\n     * @param _tradeInfo Trade info\\n     * @param _orderType type of limit order used to open the position\\n     * @param _price limit price\\n     * @param _permitData data and signature needed for token approval\\n     * @param _trader address the trade is initiated for\\n     */\\n    function createLimitOrder(\\n        TradeInfo calldata _tradeInfo,\\n        uint256 _orderType, // 1 limit, 2 stop\\n        uint256 _price,\\n        ERC20PermitData calldata _permitData,\\n        address _trader\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        address _tigAsset = _getStable(_tradeInfo.stableVault);\\n        if (_orderType == 0) revert(\\\"Invalid order type.\\\");\\n        if (_price == 0) revert(\\\"Price cannot be zero.\\\");\\n        IPairsContract.Asset memory _asset = _getAsset(_tradeInfo.asset);\\n        _validateTrade(_tradeInfo.asset, _asset.minLeverage, _asset.maxLeverage, _tigAsset, _tradeInfo.margin, _tradeInfo.leverage, _orderType);\\n        _checkVault(_tradeInfo.stableVault, _tradeInfo.marginAsset);\\n        referrals.setReferred(_tradeInfo.referrer, _trader);\\n        _handleDeposit(_tigAsset, _tradeInfo.marginAsset, _tradeInfo.margin, _tradeInfo.stableVault, _permitData, _trader);\\n        _checkSl(_tradeInfo.slPrice, _tradeInfo.direction, _price);\\n        uint256 _id = _getCount();\\n        _checkDelay(_id, false);\\n        _handlePositionMint(\\n            IPosition.MintTrade(\\n                _trader,\\n                _tradeInfo.margin,\\n                _tradeInfo.leverage,\\n                _tradeInfo.asset,\\n                _tradeInfo.direction,\\n                _price,\\n                _tradeInfo.tpPrice,\\n                _tradeInfo.slPrice,\\n                _orderType,\\n                _tigAsset\\n            )\\n        );\\n        emit PositionOpened(_tradeInfo, _orderType, _price, _id, _trader, _tradeInfo.margin);\\n    }\\n\\n    /**\\n     * @param _id position ID\\n     * @param _trader address the trade is initiated for\\n     */\\n    function cancelLimitOrder(\\n        uint256 _id,\\n        address _trader\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkOwner(_id, _trader);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        if (_trade.orderType == 0) revert(\\\"Not a limit order.\\\");\\n        _handlePositionBurn(_id);\\n        _handleTokenMint(_trade.tigAsset, _trader, _trade.margin);\\n        emit LimitCancelled(_id, _trader);\\n    }\\n\\n    /**\\n     * @param _id position id\\n     * @param _stableVault StableVault address\\n     * @param _marginAsset Token being used to add to the position\\n     * @param _addMargin margin amount being added to the position\\n     * @param _permitData data and signature needed for token approval\\n     * @param _trader address the trade is initiated for\\n     * @param _priceData verifiable off-chain price data\\n     */\\n    function addMargin(\\n        uint256 _id,\\n        address _stableVault,\\n        address _marginAsset,\\n        uint256 _addMargin,\\n        ERC20PermitData calldata _permitData,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkOwner(_id, _trader);\\n        _checkVault(_stableVault, _marginAsset);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        _getVerifiedPrice(_trade.asset, _priceData, 0);\\n        (,int256 _payout) = _getPnl(_trade.direction, _priceData.price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\\n        if (maxWinPercent != 0 && _payout >= int256(_trade.margin*(maxWinPercent-DIVISION_CONSTANT)/DIVISION_CONSTANT)) revert(\\\"PnL too close to max.\\\");\\n        if (_trade.orderType != 0) revert(\\\"Can't add margin to limit order.\\\");\\n        IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n        _handleDeposit(_trade.tigAsset, _marginAsset, _addMargin, _stableVault, _permitData, _trader);\\n        uint256 _newMargin = _trade.margin + _addMargin;\\n        uint256 _newLeverage = _trade.margin * _trade.leverage / _newMargin;\\n        if (_newLeverage < _asset.minLeverage) revert(\\\"New leverage below min leverage.\\\");\\n        position.modifyMargin(_id, _newMargin, _newLeverage);\\n        emit MarginModified(_id, _newMargin, _newLeverage, true, _trader);\\n    }\\n\\n    /**\\n     * @param _id position id\\n     * @param _stableVault StableVault address\\n     * @param _outputToken token the trader will receive\\n     * @param _removeMargin margin amount being removed from the position\\n     * @param _trader address the trade is initiated for\\n     * @param _priceData verifiable off-chain price data\\n     */\\n    function removeMargin(\\n        uint256 _id,\\n        address _stableVault,\\n        address _outputToken,\\n        uint256 _removeMargin,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkOwner(_id, _trader);\\n        _checkVault(_stableVault, _outputToken);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        if (_trade.orderType != 0) revert(\\\"Can't remove margin from limit order.\\\");\\n        (uint256 _assetPrice,) = _getVerifiedPrice(_trade.asset, _priceData, 0);\\n        (,int256 _payout) = _getPnl(_trade.direction, _assetPrice, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\\n        if (maxWinPercent != 0 && _payout >= int256(_trade.margin*(maxWinPercent-DIVISION_CONSTANT)/DIVISION_CONSTANT)) revert(\\\"PnL too close to max.\\\");\\n        IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n        uint256 _newMargin = _trade.margin - _removeMargin;\\n        uint256 _newLeverage = _trade.margin * _trade.leverage / _newMargin;\\n        if (_newLeverage > _asset.maxLeverage) revert(\\\"New leverage above max leverage.\\\");\\n        (,int256 _payoutAfter) = _getPnl(_trade.direction, _assetPrice, _trade.price, _newMargin, _newLeverage, _trade.accInterest);\\n        unchecked {\\n            if (_payoutAfter <= int256(_newMargin*(DIVISION_CONSTANT-LIQPERCENT)/DIVISION_CONSTANT)) revert(\\\"Position would be liquidated.\\\");\\n        }\\n        position.modifyMargin(_trade.id, _newMargin, _newLeverage);\\n        _handleWithdraw(_trade, _stableVault, _outputToken, _removeMargin);\\n        emit MarginModified(_trade.id, _newMargin, _newLeverage, false, _trader);\\n    }\\n\\n    /**\\n     * @param _type true for TP, false for SL\\n     * @param _id position id\\n     * @param _limitPrice TP/SL trigger price\\n     * @param _trader address the trade is initiated for\\n     * @param _priceData verifiable off-chain price data\\n     */\\n    function updateTpSl(\\n        bool _type,\\n        uint256 _id,\\n        uint256 _limitPrice,\\n        address _trader,\\n        PriceData calldata _priceData\\n    )\\n        external onlyTrustedForwarder\\n    {\\n        _validateProxy(_trader);\\n        _checkOwner(_id, _trader);\\n        _checkDelay(_id, false);\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        if (_trade.orderType != 0) revert(\\\"Cannot update limit order TP/SL.\\\");\\n        if (_type) {\\n            position.modifyTp(_id, _limitPrice);\\n        } else {\\n            (uint256 _price,) = _getVerifiedPrice(_trade.asset, _priceData, 0);\\n            _checkSl(_limitPrice, _trade.direction, _price);\\n            position.modifySl(_id, _limitPrice);\\n        }\\n        emit UpdateTPSL(_id, _type, _limitPrice, _trader);\\n    }\\n\\n    /**\\n     * @param _id position id\\n     * @param _priceData verifiable off-chain price data\\n     */\\n    function executeLimitOrder(\\n        uint256 _id,\\n        PriceData calldata _priceData\\n    )\\n        external\\n        notForwarder\\n    {\\n        _checkDelay(_id, true);\\n        if (tradingExtension.paused()) revert TradingPaused();\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n        _trade.margin -= _handleOpenFees(_asset.feeMultiplier, _trade.margin* _trade.leverage/1e18, _trade.trader, _trade.tigAsset, true);\\n        uint8 _isLong = _trade.direction ? 1 : 2;\\n        (uint256 _price,) = _getVerifiedPrice(_trade.asset, _priceData, _isLong);\\n        if (_trade.orderType == 0) revert NotLimit();\\n        if (_price > _trade.price+ _trade.price*limitOrderPriceRange/DIVISION_CONSTANT || _price < _trade.price- _trade.price*limitOrderPriceRange/DIVISION_CONSTANT) revert LimitNotMet();\\n        if (_trade.direction && _trade.orderType == 1) {\\n            if (_trade.price < _price) revert LimitNotMet();\\n        } else if (!_trade.direction && _trade.orderType == 1) {\\n            if (_trade.price > _price) revert LimitNotMet();\\n        } else if (!_trade.direction && _trade.orderType == 2) {\\n            if (_trade.price < _price) revert LimitNotMet();\\n            _trade.price = _price;\\n        } else {\\n            if (_trade.price > _price) revert LimitNotMet();\\n            _trade.price = _price;\\n        }\\n        _handleModifyOi(_trade.direction, _trade.asset, _trade.tigAsset, true, _trade.margin*_trade.leverage/1e18);\\n        if (_trade.direction ? _trade.tpPrice <= _trade.price : _trade.tpPrice >= _trade.price) position.modifyTp(_id, 0);\\n        _updateFunding(_trade.asset, _asset.baseFundingRate, _trade.tigAsset);\\n        position.executeLimitOrder(_id, _trade.price, _trade.margin);\\n        emit LimitOrderExecuted(_trade.asset, _trade.direction, _trade.price, _trade.leverage, _trade.margin, _id, _trade.trader, _msgSender());\\n    }\\n\\n    /**\\n     * @notice liquidate position\\n     * @param _id id of the position NFT\\n     * @param _priceData verifiable off-chain data\\n     */\\n    function liquidatePosition(\\n        uint256 _id,\\n        PriceData calldata _priceData\\n    )\\n        external\\n        notForwarder\\n    {\\n        unchecked {\\n            IPosition.Trade memory _trade = _getTrade(_id);\\n            if (_trade.orderType != 0) revert IsLimit();\\n\\n            (uint256 _price,) = _getVerifiedPrice(_trade.asset, _priceData, 0);\\n            (uint256 _positionSizeAfterPrice, int256 _payout) = _getPnl(_trade.direction, _price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\\n            uint256 _positionSize = _trade.margin*_trade.leverage/1e18;\\n            if (_payout > int256(_trade.margin*(DIVISION_CONSTANT-LIQPERCENT)/DIVISION_CONSTANT)) revert NotLiquidatable();\\n            _handleModifyOi(_trade.direction, _trade.asset, _trade.tigAsset, false, _positionSize);\\n            IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n            _updateFunding(_trade.asset, _asset.baseFundingRate, _trade.tigAsset);\\n            _handleCloseFees(_asset.feeMultiplier, type(uint).max, _trade.tigAsset, _positionSizeAfterPrice, _trade.trader, true);\\n            _handlePositionBurn(_id);\\n            emit PositionLiquidated(_id, _price, _trade.trader, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev close position at a pre-set price\\n     * @param _id id of the position NFT\\n     * @param _tp true if take profit\\n     * @param _priceData verifiable off-chain price data\\n     */\\n    function limitClose(\\n        uint256 _id,\\n        bool _tp,\\n        PriceData calldata _priceData\\n    )\\n        external\\n        notForwarder\\n    {\\n        _checkDelay(_id, false);\\n        (uint256 _limitPrice, address _tigAsset) = tradingExtension._limitClose(_id, _tp, _priceData);\\n        _closePosition(_id, DIVISION_CONSTANT, _limitPrice, address(0), _tigAsset, true);\\n    }\\n\\n    /**\\n     * @notice Trader can approve a proxy wallet address for it to trade on its behalf. Can also provide proxy wallet with gas.\\n     * @param _proxy proxy wallet address\\n     */\\n    function approveProxy(address _proxy) external notForwarder payable {\\n        require(_proxy != address(0), \\\"ZeroAddress\\\");\\n        proxyApprovals[msg.sender] = _proxy;\\n        trustedForwarder.fundAccount{value: msg.value}(msg.sender);\\n    }\\n\\n    // ===== INTERNAL FUNCTIONS =====\\n\\n    /**\\n     * @dev close the initiated position.\\n     * @param _id id of the position NFT\\n     * @param _percent percent of the position being closed\\n     * @param _price pair price\\n     * @param _stableVault StableVault address\\n     * @param _outputToken Token that trader will receive\\n     * @param _isBot false if closed via market order\\n     */\\n    function _closePosition(\\n        uint256 _id,\\n        uint256 _percent,\\n        uint256 _price,\\n        address _stableVault,\\n        address _outputToken,\\n        bool _isBot\\n    )\\n        internal\\n    {\\n        if (_percent > DIVISION_CONSTANT || _percent == 0) revert(\\\"Percent must be between 1-100.\\\");\\n        IPosition.Trade memory _trade = _getTrade(_id);\\n        (uint256 _positionSize, int256 _payout) = _getPnl(_trade.direction, _price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\\n        unchecked {\\n            _handleModifyOi(_trade.direction, _trade.asset, _trade.tigAsset, false, (_trade.margin*_trade.leverage/1e18)*_percent/DIVISION_CONSTANT);\\n        }\\n        position.setAccInterest(_id);\\n        IPairsContract.Asset memory _asset = _getAsset(_trade.asset);\\n        _updateFunding(_trade.asset, _asset.baseFundingRate, _trade.tigAsset);\\n        if (_percent < DIVISION_CONSTANT) {\\n            if ((_trade.margin*_trade.leverage*(DIVISION_CONSTANT-_percent)/DIVISION_CONSTANT)/1e18 < tradingExtension.minPos(_trade.tigAsset)) revert(\\\"Position too small post closing.\\\");\\n            position.reducePosition(_id, _percent);\\n        } else {\\n            _handlePositionBurn(_id);\\n        }\\n        uint256 _toMint;\\n        if (_payout > 0) {\\n            unchecked {\\n                _toMint = _handleCloseFees(_asset.feeMultiplier, uint256(_payout)*_percent/DIVISION_CONSTANT, _trade.tigAsset, _positionSize*_percent/DIVISION_CONSTANT, _trade.trader, _isBot);\\n                uint256 marginToClose = _trade.margin*_percent/DIVISION_CONSTANT;\\n                if (maxWinPercent > 0 && _toMint > marginToClose*maxWinPercent/DIVISION_CONSTANT) {\\n                    _toMint = marginToClose*maxWinPercent/DIVISION_CONSTANT;\\n                }\\n            }\\n            _handleWithdraw(_trade, _stableVault, _outputToken, _toMint);\\n        }\\n        emit PositionClosed(_id, _price, _percent, _toMint, _trade.trader, _isBot ? _msgSender() : _trade.trader);\\n    }\\n\\n    /**\\n     * @dev handle stableVault deposits for different trading functions\\n     * @param _tigAsset tigAsset token address\\n     * @param _marginAsset token being deposited into stableVault\\n     * @param _margin amount being deposited\\n     * @param _stableVault StableVault address\\n     * @param _permitData Data for approval via permit\\n     * @param _trader Trader address to take tokens from\\n     */\\n    function _handleDeposit(address _tigAsset, address _marginAsset, uint256 _margin, address _stableVault, ERC20PermitData calldata _permitData, address _trader) internal {\\n        if (_tigAsset != _marginAsset) {\\n            if (_permitData.usePermit) {\\n                ERC20Permit(_marginAsset).permit(_trader, address(this), _permitData.amount, _permitData.deadline, _permitData.v, _permitData.r, _permitData.s);\\n            }\\n            uint256 _balBefore = _getTokenBalance(_tigAsset, address(this));\\n            uint256 _marginDecMultiplier = 10**(18-ExtendedIERC20(_marginAsset).decimals());\\n            IERC20(_marginAsset).safeTransferFrom(_trader, address(this), _margin/_marginDecMultiplier);\\n            _handleApproval(_marginAsset, _stableVault);\\n            IStableVault(_stableVault).deposit(_marginAsset, _margin/_marginDecMultiplier);\\n            uint256 _balAfter = _getTokenBalance(_tigAsset, address(this));\\n            if (_balAfter != _balBefore + _margin) revert(\\\"Error depositing into vault.\\\");\\n            _handleTokenBurn(_tigAsset, address(this), _balAfter);\\n        } else {\\n            _handleTokenBurn(_tigAsset, _trader, _margin);\\n        }\\n    }\\n\\n    /**\\n     * @dev handle stableVault withdrawals for different trading functions\\n     * @param _trade Position info\\n     * @param _stableVault StableVault address\\n     * @param _outputToken Output token address\\n     * @param _toMint Amount of tigAsset minted to be used for withdrawal\\n     */\\n    function _handleWithdraw(IPosition.Trade memory _trade, address _stableVault, address _outputToken, uint256 _toMint) internal {\\n        _handleTokenMint(_trade.tigAsset, address(this), _toMint);\\n        uint256 _amountToTransfer = _toMint;\\n        if (_outputToken != _trade.tigAsset) {\\n            uint256 _balBefore = _getTokenBalance(_outputToken, address(this));\\n            IStableVault(_stableVault).withdraw(_outputToken, _toMint);\\n            uint256 _decimals = ExtendedIERC20(_outputToken).decimals();\\n            uint256 _balAfter = _getTokenBalance(_outputToken, address(this));\\n            if (_balAfter != _balBefore + _toMint/(10**(18-_decimals))) revert(\\\"Error withdrawing from vault.\\\");\\n            _amountToTransfer = _balAfter - _balBefore;\\n        }\\n        IERC20(_outputToken).safeTransfer(_trade.trader, _amountToTransfer);\\n    }\\n\\n    /**\\n     * @dev handle fees distribution for opening\\n     * @param _feeMultiplier fee multiplier\\n     * @param _positionSize position size\\n     * @param _trader trader address\\n     * @param _tigAsset tigAsset address\\n     * @param _isBot false if opened via market order\\n     * @return _feePaid total fees paid during opening\\n     */\\n    function _handleOpenFees(\\n        uint256 _feeMultiplier,\\n        uint256 _positionSize,\\n        address _trader,\\n        address _tigAsset,\\n        bool _isBot\\n    )\\n        internal\\n        returns (uint256 _feePaid)\\n    {\\n        Fees memory _fees = openFees;\\n        uint256 _referrerFees;\\n        (_fees, _referrerFees) = _feesHandling(_fees, _feeMultiplier, _tigAsset, _positionSize, _trader, _isBot);\\n        _handleApproval(_tigAsset, address(staking));\\n        _handleApproval(_tigAsset, address(lpstaking));\\n        unchecked {\\n            uint256 _lpDistribution = _fees.daoFees * lpDistribution / DIVISION_CONSTANT;\\n            lpstaking.distribute(_tigAsset, _lpDistribution);\\n            staking.distribute(_tigAsset, _fees.daoFees-_lpDistribution);\\n            _feePaid = _fees.daoFees + _fees.burnFees + _fees.botFees + _referrerFees;\\n            xtig.addFees(_trader, _tigAsset, _feePaid);\\n        }\\n    }\\n\\n    /**\\n     * @dev handle fees distribution for closing\\n     * @param _feeMultiplier fee multiplier\\n     * @param _payout payout to trader before fees\\n     * @param _tigAsset margin asset\\n     * @param _positionSize position size\\n     * @param _trader trader address\\n     * @param _isBot false if closed via market order\\n     * @return payout_ payout to trader after fees\\n     */\\n    function _handleCloseFees(\\n        uint256 _feeMultiplier,\\n        uint256 _payout,\\n        address _tigAsset,\\n        uint256 _positionSize,\\n        address _trader,\\n        bool _isBot\\n    )\\n        internal\\n        returns (uint256 payout_)\\n    {\\n        (Fees memory _fees, uint256 _referrerFees) = _feesHandling(closeFees, _feeMultiplier, _tigAsset, _positionSize, _trader, _isBot);\\n        payout_ = _payout - (_fees.daoFees + _fees.refDiscount) - _fees.burnFees - _fees.botFees;\\n        unchecked {\\n            uint256 _lpDistribution = _fees.daoFees * lpDistribution / DIVISION_CONSTANT;\\n            lpstaking.distribute(_tigAsset, _lpDistribution);\\n            staking.distribute(_tigAsset, _fees.daoFees-_lpDistribution);\\n            xtig.addFees(_trader, _tigAsset,\\n                _fees.daoFees\\n                + _referrerFees\\n                + _fees.burnFees\\n                + _fees.botFees\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Handle fee distribution from opening and closing\\n     * @param _fees fees struct from opening/closing\\n     * @param _feeMultiplier fee multiplier\\n     * @param _tigAsset margin asset\\n     * @param _positionSize position size\\n     * @param _trader trader address\\n     * @param _isBot true if called by a function that is executable by bots (limit orders, liquidations)\\n     * @return Updated fees struct for further processing\\n     * @return Fees earned by the referrer\\n     */\\n    function _feesHandling(Fees memory _fees, uint256 _feeMultiplier, address _tigAsset, uint256 _positionSize, address _trader, bool _isBot) internal returns (Fees memory, uint256) {\\n        (address _referrer, uint256 _referrerFees) = referrals.getReferred(_trader);\\n        unchecked {\\n            _fees.daoFees = (_positionSize*_fees.daoFees/DIVISION_CONSTANT)* _feeMultiplier/DIVISION_CONSTANT;\\n            _fees.burnFees = (_positionSize*_fees.burnFees/DIVISION_CONSTANT)* _feeMultiplier/DIVISION_CONSTANT;\\n            _fees.botFees = (_positionSize*_fees.botFees/DIVISION_CONSTANT)* _feeMultiplier/DIVISION_CONSTANT;\\n            _fees.refDiscount = (_positionSize*_fees.refDiscount/DIVISION_CONSTANT)* _feeMultiplier/DIVISION_CONSTANT;\\n            _referrerFees = (_positionSize*_referrerFees/DIVISION_CONSTANT)* _feeMultiplier/DIVISION_CONSTANT;\\n        }\\n        if (_referrer != address(0)) {\\n            _handleTokenMint(_tigAsset, _referrer, _referrerFees);\\n            _fees.daoFees = _fees.daoFees-_fees.refDiscount-_referrerFees;\\n            referrals.addRefFees(_referrer, _tigAsset, _referrerFees);\\n        } else {\\n            _referrerFees = 0;\\n            _fees.refDiscount = 0;\\n        }\\n        if (_isBot) {\\n            _handleTokenMint(_tigAsset, _msgSender(), _fees.botFees);\\n            _fees.daoFees = _fees.daoFees - _fees.botFees;\\n        } else {\\n            _fees.botFees = 0;\\n        }\\n        emit FeesDistributed(_tigAsset, _fees.daoFees, _fees.burnFees, _referrerFees, _fees.botFees, _referrer);\\n        _handleTokenMint(_tigAsset, address(this), _fees.daoFees);\\n        return (_fees, _referrerFees);\\n    }\\n\\n    /**\\n     * @dev Checks if trade parameters are valid\\n     * @param _assetId asset id\\n     * @param _minLeverage minimum leverage\\n     * @param _maxLeverage maximum leverage\\n     * @param _tigAsset margin asset\\n     * @param _margin margin amount\\n     * @param _leverage leverage amount\\n     * @param _orderType order type, 0 is market, 1 is limit buy/sell, 2 is buy/sell stop\\n     */\\n    function _validateTrade(\\n        uint256 _assetId,\\n        uint256 _minLeverage,\\n        uint256 _maxLeverage,\\n        address _tigAsset,\\n        uint256 _margin,\\n        uint256 _leverage,\\n        uint256 _orderType\\n    ) internal view {\\n        tradingExtension.validateTrade(\\n            _assetId,\\n            _minLeverage,\\n            _maxLeverage,\\n            _tigAsset,\\n            _margin,\\n            _leverage,\\n            _orderType\\n        );\\n    }\\n\\n    /**\\n     * @dev Approves a token only once\\n     * @param _token token address\\n     * @param _to spender address\\n     */\\n    function _handleApproval(address _token, address _to) internal {\\n        if (!tokenApprovals[_token][_to]) {\\n            IERC20(_token).approve(_to, type(uint256).max);\\n            tokenApprovals[_token][_to] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes a pair's open interest in pairs contract\\n     * @param _isLong true if long, false if short\\n     * @param _asset asset id\\n     * @param _tigAsset tigAsset used for margin\\n     * @param _onOpen true if opening, false if closing\\n     * @param _size position size\\n     */\\n    function _handleModifyOi(\\n        bool _isLong,\\n        uint256 _asset,\\n        address _tigAsset,\\n        bool _onOpen,\\n        uint256 _size\\n    ) internal {\\n        if (_isLong) {\\n            pairsContract.modifyLongOi(_asset, _tigAsset, _onOpen, _size);\\n        } else {\\n            pairsContract.modifyShortOi(_asset, _tigAsset, _onOpen, _size);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verify price data\\n     * @param _asset asset id\\n     * @param _priceData price data struct\\n     * @param _withSpreadIsLong true if long, false if short\\n     * @return _price price, 18 decimals\\n     * @return _spread spread percent, 10 decimals\\n     */\\n    function _getVerifiedPrice(\\n        uint256 _asset,\\n        PriceData calldata _priceData,\\n        uint8 _withSpreadIsLong\\n    ) internal returns (uint256, uint256) {\\n        return tradingExtension.getVerifiedPrice(_asset, _priceData, _withSpreadIsLong);\\n    }\\n\\n    /**\\n     * @dev Calculate pnl for a position, all integer values 18 decimals\\n     * @param _direction position direction\\n     * @param _currentPrice current price\\n     * @param _openPrice open price\\n     * @param _margin margin\\n     * @param _leverage leverage\\n     * @param _accInterest accumulated interest, negative is interest paid, positive is interest received\\n     * @return _positionSize position size\\n     * @return _payout payout\\n     */\\n    function _getPnl(\\n        bool _direction,\\n        uint256 _currentPrice,\\n        uint256 _openPrice,\\n        uint256 _margin,\\n        uint256 _leverage,\\n        int256 _accInterest\\n    ) internal pure returns (uint256 _positionSize, int256 _payout) {\\n        (_positionSize, _payout) = TradingLibrary.pnl(\\n            _direction,\\n            _currentPrice,\\n            _openPrice,\\n            _margin,\\n            _leverage,\\n            _accInterest\\n        );\\n    }\\n\\n    /**\\n     * @dev update funding rates after open interest changes\\n     * @param _assetId asset id\\n     * @param _baseFundingRate base funding rate\\n     * @param _tigAsset tigAsset used for OI\\n     */\\n    function _updateFunding(uint256 _assetId, uint256 _baseFundingRate, address _tigAsset) internal {\\n        IPairsContract.OpenInterest memory _oi = pairsContract.idToOi(_assetId, _tigAsset);\\n        position.updateFunding(\\n            _assetId,\\n            _tigAsset,\\n            _oi.longOi,\\n            _oi.shortOi,\\n            _baseFundingRate,\\n            vaultFundingPercent\\n        );\\n    }\\n\\n    /**\\n     * @dev check that SL price is valid compared to market price\\n     * @param _sl SL price\\n     * @param _direction long/short\\n     * @param _price market price\\n     */\\n    function _checkSl(uint256 _sl, bool _direction, uint256 _price) internal view returns (uint256) {\\n        if (_direction) {\\n            if (_sl > _price-_price*minSlPnlDif/DIVISION_CONSTANT) {\\n                revert(\\\"SL too close to market price.\\\");\\n            }\\n        } else {\\n            if (_sl < _price+_price*minSlPnlDif/DIVISION_CONSTANT && _sl != 0) {\\n                revert(\\\"SL too close to market price.\\\");\\n            }\\n        }\\n        return _sl;\\n    }\\n\\n    /**\\n     * @dev check that trader address owns the position\\n     * @param _id position id\\n     * @param _trader trader address\\n     */\\n    function _checkOwner(uint256 _id, address _trader) internal view {\\n        if (position.ownerOf(_id) != _trader) revert(\\\"Not position owner.\\\");\\n    }\\n\\n    /**\\n     * @dev Get the upcoming position nft index\\n     */\\n    function _getCount() internal view returns (uint256) {\\n        return position.getCount();\\n    }\\n\\n    /**\\n     * @dev Mint a position\\n     * @param _mintTrade mint trade data\\n     */\\n    function _handlePositionMint(IPosition.MintTrade memory _mintTrade) internal {\\n        position.mint(_mintTrade);\\n    }\\n\\n    /**\\n     * @dev Burn a position\\n     * @param _id position id\\n     */\\n    function _handlePositionBurn(uint256 _id) internal {\\n        position.burn(_id);\\n    }\\n\\n    /**\\n     * @dev Mint tokens for an account\\n     * @param _token token address\\n     * @param _to account address\\n     * @param _amount amount to mint\\n     */\\n    function _handleTokenMint(address _token, address _to, uint256 _amount) internal {\\n        IStable(_token).mintFor(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Burn tokens from an account\\n     * @param _token token address\\n     * @param _from account address\\n     * @param _amount amount to burn\\n     */\\n    function _handleTokenBurn(address _token, address _from, uint256 _amount) internal {\\n        IStable(_token).burnFrom(_from, _amount);\\n    }\\n\\n    /**\\n     * @dev Get the token balance of an account\\n     * @param _token token address\\n     * @param _account account address\\n     */\\n    function _getTokenBalance(address _token, address _account) internal view returns (uint256) {\\n        return IERC20(_token).balanceOf(_account);\\n    }\\n\\n    /**\\n     * @dev Get the trade data from the position contract\\n     * @param _id position id\\n     */\\n    function _getTrade(uint256 _id) internal view returns (IPosition.Trade memory) {\\n        return position.trades(_id);\\n    }\\n\\n    /**\\n     * @dev Get the tigAsset address from a stableVault address, which should have the minter role for the tigAsset\\n     * @param _stableVault stableVault address\\n     */\\n    function _getStable(address _stableVault) internal view returns (address) {\\n        return IStableVault(_stableVault).stable();\\n    }\\n\\n    /**\\n     * @dev Get the pair data from the pairs contract\\n     * @param _asset pair index\\n     */\\n    function _getAsset(uint256 _asset) internal view returns (IPairsContract.Asset memory) {\\n        return pairsContract.idToAsset(_asset);\\n    }\\n\\n    /**\\n     * @notice Check that sufficient time has passed between opening and closing\\n     * @dev This is to prevent profitable opening and closing in the same tx with two different prices in the \\\"valid signature pool\\\".\\n     * @param _id position id\\n     * @param _type true for opening, false for closing\\n     */\\n    function _checkDelay(uint256 _id, bool _type) internal {\\n        unchecked {\\n            Delay memory _delay = timeDelayPassed[_id];\\n            if (_delay.actionType == _type) {\\n                timeDelayPassed[_id].delay = block.timestamp + timeDelay;\\n            } else {\\n                if (block.timestamp < _delay.delay) revert(\\\"Time delay not passed.\\\");\\n                timeDelayPassed[_id].delay = block.timestamp + timeDelay;\\n                timeDelayPassed[_id].actionType = _type;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check that the stableVault input is whitelisted and the margin asset is whitelisted in the vault\\n     * @param _stableVault StableVault address\\n     * @param _token Margin asset token address\\n     */\\n    function _checkVault(address _stableVault, address _token) internal view {\\n        if (!allowedVault[_stableVault]) revert(\\\"Vault not whitelisted.\\\");\\n        if (_token != _getStable(_stableVault) && !IStableVault(_stableVault).allowed(_token)) revert(\\\"Token not approved in vault.\\\");\\n    }\\n\\n    /**\\n     * @dev Check that the trader has approved the proxy address to trade for it\\n     * @param _trader Trader address\\n     */\\n    function _validateProxy(address _trader) internal view {\\n        if (_trader != _msgSender()) {\\n            address _proxy = proxyApprovals[_trader];\\n            if (_proxy != _msgSender()) revert(\\\"Proxy not approved.\\\");\\n        }\\n    }\\n\\n    // ===== GOVERNANCE-ONLY =====\\n\\n    /**\\n     * @dev Sets timestamp delay between opening and closing\\n     * @notice payable to reduce contract size, keep value as 0\\n     * @param _timeDelay delay amount\\n     */\\n    function setTimeDelay(\\n        uint256 _timeDelay\\n    )\\n        external payable\\n        onlyOwner\\n    {\\n        timeDelay = _timeDelay;\\n    }\\n\\n    /**\\n     * @dev Whitelists a stableVault contract address\\n     * @param _stableVault StableVault address\\n     * @param _bool true if allowed\\n     */\\n    function setAllowedVault(\\n        address _stableVault,\\n        bool _bool\\n    )\\n        external payable\\n        onlyOwner\\n    {\\n        allowedVault[_stableVault] = _bool;\\n    }\\n\\n    /**\\n     * @dev Sets max payout % compared to margin, minimum +500% PnL\\n     * @param _maxWinPercent payout %\\n     */\\n    function setMaxWinPercent(\\n        uint256 _maxWinPercent\\n    )\\n        external payable\\n        onlyOwner\\n    {\\n        unchecked {\\n            if (_maxWinPercent != 0 && _maxWinPercent < 6*DIVISION_CONSTANT) revert BadSetter();\\n        }\\n        maxWinPercent = _maxWinPercent;\\n    }\\n\\n    /**\\n     * @dev Sets executable price range for limit orders\\n     * @param _range price range in %\\n     */\\n    function setLimitOrderPriceRange(uint256 _range) external payable onlyOwner {\\n        if (_range > DIVISION_CONSTANT) revert BadSetter();\\n        limitOrderPriceRange = _range;\\n    }\\n\\n    /**\\n     * @dev Sets the percent of fees being distributed to LPs\\n     * @param _percent Percent 1e10 precision\\n     */\\n    function setLPDistribution(uint256 _percent) external payable onlyOwner {\\n        if (_percent > DIVISION_CONSTANT) revert BadSetter();\\n        lpDistribution = _percent;\\n    }\\n\\n    /**\\n     * @dev Sets the min pnl difference to set SL\\n     * @param _percent Percent 1e10 precision\\n     */\\n    function setMinSlPnlDif(uint256 _percent) external payable onlyOwner {\\n        if (_percent > DIVISION_CONSTANT) revert BadSetter();\\n        minSlPnlDif = _percent;\\n    }\\n\\n    /**\\n     * @dev Sets the fees for the trading protocol\\n     * @param _open True if open fees are being set\\n     * @param _daoFees Fees distributed to the DAO\\n     * @param _burnFees Fees which get burned\\n     * @param _refDiscount Discount given to referred traders\\n     * @param _botFees Fees given to bots that execute limit orders\\n     * @param _percent Percent of earned funding fees going to StableVault\\n     */\\n    function setFees(\\n        bool _open,\\n        uint256 _daoFees,\\n        uint256 _burnFees,\\n        uint256 _refDiscount,\\n        uint256 _botFees,\\n        uint256 _percent\\n    ) external payable onlyOwner {\\n        if (_open) {\\n            openFees.daoFees = _daoFees;\\n            openFees.burnFees = _burnFees;\\n            openFees.refDiscount = _refDiscount;\\n            openFees.botFees = _botFees;\\n        } else {\\n            closeFees.daoFees = _daoFees;\\n            closeFees.burnFees = _burnFees;\\n            closeFees.refDiscount = _refDiscount;\\n            closeFees.botFees = _botFees;\\n        }\\n        if (_percent > DIVISION_CONSTANT) revert BadSetter();\\n        vaultFundingPercent = _percent;\\n    }\\n\\n    /**\\n     * @dev Sets the extension contract address for trading\\n     * @param _ext extension contract address\\n     */\\n    function setTradingExtension(\\n        address _ext\\n    ) external payable onlyOwner {\\n        if (_ext == address(0)) revert BadSetter();\\n        tradingExtension = ITradingExtension(_ext);\\n    }\\n\\n    /**\\n     * @dev Sets the LP staking contract\\n     * @param _lpstaking LP staking contract address\\n     */\\n    function setLPStaking(\\n        address _lpstaking\\n    ) external payable onlyOwner {\\n        if (_lpstaking == address(0)) revert BadSetter();\\n        lpstaking = ILPStaking(_lpstaking);\\n    }\\n\\n    /**\\n     * @dev Sets the pairs contract\\n     * @param _pairsContract pairs contract address\\n     */\\n    function setPairsContract(\\n        address _pairsContract\\n    ) external payable onlyOwner {\\n        if (_pairsContract == address(0)) revert BadSetter();\\n        pairsContract = IPairsContract(_pairsContract);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PermissionedMetaContext.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPermissionedForwarder.sol\\\";\\n\\ncontract PermissionedMetaContext is Ownable {\\n\\n    IPermissionedForwarder public trustedForwarder;\\n\\n    modifier onlyTrustedForwarder() {\\n        require(msg.sender == address(trustedForwarder), \\\"!Forwarder\\\");\\n        _;\\n    }\\n\\n    modifier notForwarder() {\\n        require(msg.sender != address(trustedForwarder), \\\"Forwarder not allowed\\\");\\n        _;\\n    }\\n\\n    function setTrustedForwarder(address _forwarder) external onlyOwner {\\n        trustedForwarder = IPermissionedForwarder(_forwarder);\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (msg.sender == address(trustedForwarder)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.sender == address(trustedForwarder)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/TradingLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/IPosition.sol\\\";\\nimport \\\"../interfaces/ITrading.sol\\\";\\n\\nstruct PriceData {\\n    address provider;\\n    bool isClosed;\\n    uint256 asset;\\n    uint256 price;\\n    uint256 spread;\\n    uint256 timestamp;\\n    bytes signature;\\n}\\n\\nlibrary TradingLibrary {\\n\\n    using ECDSA for bytes32;\\n\\n    uint256 constant DIVISION_CONSTANT = 1e10;\\n\\n    /**\\n    * @notice returns position profit or loss\\n    * @param _direction true if long\\n    * @param _currentPrice current price\\n    * @param _price opening price\\n    * @param _leverage position leverage\\n    * @param _margin collateral amount\\n    * @param accInterest funding fees\\n    * @return _positionSize position size\\n    * @return _payout payout trader should get\\n    */\\n    function pnl(bool _direction, uint256 _currentPrice, uint256 _price, uint256 _margin, uint256 _leverage, int256 accInterest) external pure returns (uint256 _positionSize, int256 _payout) {\\n        uint256 _initPositionSize = _margin * _leverage / 1e18;\\n        if (_direction && _currentPrice >= _price) {\\n            _payout = int256(_margin) + int256(_initPositionSize * (1e18 * _currentPrice / _price - 1e18)/1e18) + accInterest;\\n        } else if (_direction && _currentPrice < _price) {\\n            _payout = int256(_margin) - int256(_initPositionSize * (1e18 - 1e18 * _currentPrice / _price)/1e18) + accInterest;\\n        } else if (!_direction && _currentPrice <= _price) {\\n            _payout = int256(_margin) + int256(_initPositionSize * (1e18 - 1e18 * _currentPrice / _price)/1e18) + accInterest;\\n        } else {\\n            _payout = int256(_margin) - int256(_initPositionSize * (1e18 * _currentPrice / _price - 1e18)/1e18) + accInterest;\\n        }\\n        _positionSize = _direction ? _initPositionSize * _currentPrice / _price : _initPositionSize * _price / _currentPrice;\\n    }\\n\\n    /**\\n    * @notice returns position liquidation price\\n    * @param _direction true if long\\n    * @param _tradePrice opening price\\n    * @param _leverage position leverage\\n    * @param _margin collateral amount\\n    * @param _accInterest funding fees\\n    * @param _liqPercent liquidation percent\\n    * @return _liqPrice liquidation price\\n    */\\n    function liqPrice(bool _direction, uint256 _tradePrice, uint256 _leverage, uint256 _margin, int256 _accInterest, uint256 _liqPercent) public pure returns (uint256 _liqPrice) {\\n        if (_direction) {\\n            _liqPrice = uint256(int256(_tradePrice) - int256(_tradePrice) * (int256(_margin) * int256(_liqPercent) / int256(DIVISION_CONSTANT) + _accInterest) * 1e18 / int256(_margin) / int256(_leverage));\\n        } else {\\n            _liqPrice = uint256(int256(_tradePrice) + int256(_tradePrice) * (int256(_margin) * int256(_liqPercent) / int256(DIVISION_CONSTANT) + _accInterest) * 1e18 / int256(_margin) / int256(_leverage));\\n        }\\n    }\\n\\n    /**\\n    * @notice uses liqPrice() and returns position liquidation price\\n    * @param _positions positions contract address\\n    * @param _id position id\\n    * @param _liqPercent liquidation percent\\n    */\\n    function getLiqPrice(address _positions, uint256 _id, uint256 _liqPercent) external view returns (uint256) {\\n        IPosition.Trade memory _trade = IPosition(_positions).trades(_id);\\n        return liqPrice(_trade.direction, _trade.price, _trade.leverage, _trade.margin, _trade.accInterest, _liqPercent);\\n    }\\n\\n    /**\\n    * @notice verifies that price is signed by a whitelisted node\\n    * @param _validSignatureTimer seconds allowed before price is old\\n    * @param _asset position asset\\n    * @param _priceData PriceData object\\n    * @param _isNode mapping of allowed nodes\\n    */\\n    function verifyPrice(\\n        uint256 _validSignatureTimer,\\n        uint256 _asset,\\n        PriceData calldata _priceData,\\n        mapping(address => bool) storage _isNode\\n    )\\n        external view\\n    {\\n        require(block.timestamp <= _priceData.timestamp + _validSignatureTimer, \\\"Price has expired.\\\");\\n        require(block.timestamp >= _priceData.timestamp, \\\"FutSig\\\");\\n        require(!_priceData.isClosed, \\\"Market is closed.\\\");\\n        require(_asset == _priceData.asset, \\\"!Asset\\\");\\n        require(_priceData.price != 0, \\\"NoPrice\\\");\\n        address _provider = (\\n            keccak256(abi.encode(\\n                _priceData.provider,\\n                _priceData.isClosed,\\n                _priceData.asset,\\n                _priceData.price,\\n                _priceData.spread,\\n                _priceData.timestamp\\n            ))\\n        ).toEthSignedMessageHash().recover(_priceData.signature);\\n        require(_provider == _priceData.provider, \\\"BadSig\\\");\\n        require(_isNode[_provider], \\\"!Node\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/TradingLibrary.sol\": {\r\n        \"TradingLibrary\": \"0xaf58aef6ece14f8f7ddcb3109638a19b7098ce70\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairsContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpstaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xtig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrals\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadClosePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadConstructor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLeverage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadStopLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BelowMinPositionSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CloseToMaxPnL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiqThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedInVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OldPriceData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyToCancel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueNotEqualToMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitDelay\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"AddToPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tigAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"botFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"FeesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"LimitCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LimitOrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarginAdded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"MarginModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ITrading.TradeInfo\",\"name\":\"tradeInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginAfterFees\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTp\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"UpdateTPSL\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addMargin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"usePermit\",\"type\":\"bool\"}],\"internalType\":\"struct ITrading.ERC20PermitData\",\"name\":\"_permitData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addMargin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"usePermit\",\"type\":\"bool\"}],\"internalType\":\"struct ITrading.ERC20PermitData\",\"name\":\"_permitData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"addToPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"approveProxy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"botFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct ITrading.TradeInfo\",\"name\":\"_tradeInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"usePermit\",\"type\":\"bool\"}],\"internalType\":\"struct ITrading.ERC20PermitData\",\"name\":\"_permitData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"createLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"executeLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_tp\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"limitClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"liquidatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"marketClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tpPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct ITrading.TradeInfo\",\"name\":\"_tradeInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"usePermit\",\"type\":\"bool\"}],\"internalType\":\"struct ITrading.ERC20PermitData\",\"name\":\"_permitData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"marketOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWinPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSlPnlDif\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daoFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"botFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_removeMargin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableVault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAllowedVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_daoFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_botFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setLPDistribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpstaking\",\"type\":\"address\"}],\"name\":\"setLPStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"setLimitOrderPriceRange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWinPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWinPercent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMinSlPnlDif\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairsContract\",\"type\":\"address\"}],\"name\":\"setPairsContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeDelay\",\"type\":\"uint256\"}],\"name\":\"setTimeDelay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ext\",\"type\":\"address\"}],\"name\":\"setTradingExtension\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"contract IPermissionedForwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"asset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PriceData\",\"name\":\"_priceData\",\"type\":\"tuple\"}],\"name\":\"updateTpSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFundingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Trading", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000b60f2011d30b5b901d55a701c58f63ab34b4c23f000000000000000000000000c6c32ed781450228dfadfa49a430d7868b110f44000000000000000000000000dee683a3a201597dc5d3059e8d4694001ce37832000000000000000000000000399214ee22bf068ff207ada462ec45046468b766000000000000000000000000f941293e521f494ce9a53a6a288f723a6768f35200000000000000000000000072e9df340f7b9ecc88322b3868b4df1ce925744d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}