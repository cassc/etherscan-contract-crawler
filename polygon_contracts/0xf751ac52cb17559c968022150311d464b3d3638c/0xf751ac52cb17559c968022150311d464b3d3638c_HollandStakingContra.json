{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract HollandStakingContract is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum StakingPeriod {\r\n        StakingPeriodInvalid,\r\n        StakingPeriodMonth,\r\n        StakingPeriod2Months,\r\n        StakingPeriodYear,\r\n        StakingPeriod2Years,\r\n        StakingPeriod3Years,\r\n        StakingPeriod4Years,\r\n        StakingPeriod5Years\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        StakingPeriod stakingPeriod;\r\n        uint256 rewardsClaimed;\r\n        uint256 lastRewardsClaimTimestamp;\r\n    }\r\n\r\n    struct Account {\r\n        uint256 indecesBitmap;\r\n        Deposit[] stakingDeposits;\r\n    }\r\n\r\n    uint256 internal constant durationMonth = 30 days;\r\n    uint256 internal constant duration2Months = 60 days;\r\n    uint256 internal constant durationYear = 365 days;\r\n    uint256 internal constant duration2Years = durationYear * 2;\r\n    uint256 internal constant duration3Years = durationYear * 3;\r\n    uint256 internal constant duration4Years = durationYear * 4;\r\n    uint256 internal constant duration5Years = durationYear * 5;\r\n\r\n    uint256 public constant rewardsClamingCooldown = 7 days;\r\n\r\n    uint256 public remainingRewardsAmount;\r\n\r\n    IERC20 public token;\r\n    uint32 public abortStakingPenaltyPercents;\r\n    uint256 public totalPenalty;\r\n    uint32[8] public stakingRewardPercents;\r\n    mapping(address => Account) public accounts;\r\n\r\n    event DepositCreate(\r\n        address account,\r\n        uint256 index,\r\n        uint256 amount,\r\n        StakingPeriod stakingPeriod\r\n    );\r\n    event RewardWithdraw(address account, uint256 index, uint256 reward);\r\n    event DepositWithdraw(address account, uint256 index);\r\n    event AddRewards(uint256 amount);\r\n\r\n    constructor(\r\n        IERC20 token_,\r\n        uint32 abortStakingPenaltyPercents_,\r\n        uint32 stakingMonthRewardPercents_,\r\n        uint32 staking2MonthsRewardPercents_,\r\n        uint32 stakingYearRewardPercents_,\r\n        uint32 staking2YearsRewardPercents_,\r\n        uint32 staking3YearsRewardPercents_,\r\n        uint32 staking4YearsRewardPercents_,\r\n        uint32 staking5YearsRewardPercents_\r\n    ) {\r\n        require(address(token_) != address(0), \"Zero address\");\r\n        token = token_;\r\n        abortStakingPenaltyPercents = abortStakingPenaltyPercents_;\r\n        stakingRewardPercents[uint256(StakingPeriod.StakingPeriodInvalid)] = 0;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriodMonth)\r\n        ] = stakingMonthRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriod2Months)\r\n        ] = staking2MonthsRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriodYear)\r\n        ] = stakingYearRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriod2Years)\r\n        ] = staking2YearsRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriod3Years)\r\n        ] = staking3YearsRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriod4Years)\r\n        ] = staking4YearsRewardPercents_;\r\n        stakingRewardPercents[\r\n            uint256(StakingPeriod.StakingPeriod5Years)\r\n        ] = staking5YearsRewardPercents_;\r\n    }\r\n\r\n    function getDepositIndices(address account)\r\n        external\r\n        view\r\n        returns (uint256 indecesBitmap)\r\n    {\r\n        require(account != address(0), \"Zero address\");\r\n        indecesBitmap = accounts[account].indecesBitmap;\r\n    }\r\n\r\n    function getDepositInfo(address account, uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 startTime,\r\n            StakingPeriod period,\r\n            uint256 lastRewardsClaimTimestamp,\r\n            uint256 rewardsAmount\r\n        )\r\n    {\r\n        require(account != address(0), \"Zero address\");\r\n        require(\r\n            (accounts[account].indecesBitmap & (1 << index)) != 0,\r\n            \"No deposit at this slot\"\r\n        );\r\n        amount = accounts[account].stakingDeposits[index].amount;\r\n        startTime = accounts[account].stakingDeposits[index].startTime;\r\n        period = accounts[account].stakingDeposits[index].stakingPeriod;\r\n        lastRewardsClaimTimestamp = accounts[account]\r\n            .stakingDeposits[index]\r\n            .lastRewardsClaimTimestamp;\r\n        uint256 rewards = calculateRewardsAmount(\r\n            accounts[account].stakingDeposits[index]\r\n        );\r\n        rewardsAmount = rewards > remainingRewardsAmount\r\n            ? remainingRewardsAmount\r\n            : rewards;\r\n    }\r\n\r\n    function addRewards(uint256 amount) external onlyOwner {\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        remainingRewardsAmount += amount;\r\n        emit AddRewards(amount);\r\n    }\r\n\r\n    function withdrawPenalty(uint256 amount) external onlyOwner {\r\n        require(totalPenalty >= amount, \"Insufficient penalty amount\");\r\n        totalPenalty -= amount;\r\n        token.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function createDeposit(uint256 amount, StakingPeriod stakingPeriod)\r\n        external\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            accounts[msg.sender].indecesBitmap != ~uint256(0),\r\n            \"No free slots for deposit\"\r\n        );\r\n        require(\r\n            stakingPeriod > StakingPeriod.StakingPeriodInvalid &&\r\n                stakingPeriod <= StakingPeriod.StakingPeriod5Years,\r\n            \"Invalid staking period\"\r\n        );\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        Deposit memory deposit = Deposit(\r\n            amount,\r\n            block.timestamp,\r\n            stakingPeriod,\r\n            0,\r\n            block.timestamp\r\n        );\r\n\r\n        // try to find free slot in deposits array\r\n        bool slotFound = false;\r\n        for (\r\n            uint256 i = 0;\r\n            i < accounts[msg.sender].stakingDeposits.length;\r\n            i++\r\n        ) {\r\n            // index is contain deposit entry, go next\r\n            if ((accounts[msg.sender].indecesBitmap & (1 << i)) != 0) {\r\n                continue;\r\n            } else {\r\n                slotFound = true;\r\n                accounts[msg.sender].stakingDeposits[i] = deposit;\r\n                // set index flag\r\n                accounts[msg.sender].indecesBitmap |= 1 << i;\r\n                emit DepositCreate(msg.sender, i, amount, stakingPeriod);\r\n                return i;\r\n            }\r\n        }\r\n        if (!slotFound) {\r\n            accounts[msg.sender].stakingDeposits.push(deposit);\r\n            // set index flag\r\n            uint256 index = accounts[msg.sender].stakingDeposits.length - 1;\r\n            accounts[msg.sender].indecesBitmap |= 1 << index;\r\n            slotFound = true;\r\n            emit DepositCreate(msg.sender, index, amount, stakingPeriod);\r\n            return index;\r\n        }\r\n    }\r\n\r\n    function getDurationByStakingPeriod(StakingPeriod period)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (period == StakingPeriod.StakingPeriodMonth) {\r\n            return durationMonth;\r\n        } else if (period == StakingPeriod.StakingPeriod2Months) {\r\n            return duration2Months;\r\n        } else if (period == StakingPeriod.StakingPeriodYear) {\r\n            return durationYear;\r\n        } else if (period == StakingPeriod.StakingPeriod2Years) {\r\n            return duration2Years;\r\n        } else if (period == StakingPeriod.StakingPeriod3Years) {\r\n            return duration3Years;\r\n        } else if (period == StakingPeriod.StakingPeriod4Years) {\r\n            return duration4Years;\r\n        } else if (period == StakingPeriod.StakingPeriod5Years) {\r\n            return duration5Years;\r\n        } else {\r\n            return ~uint256(0);\r\n        }\r\n    }\r\n\r\n    function getReachedStakingPeriod(uint256 stakingDuration)\r\n        internal\r\n        pure\r\n        returns (StakingPeriod)\r\n    {\r\n        if (stakingDuration >= duration5Years) {\r\n            return StakingPeriod.StakingPeriod5Years;\r\n        } else if (stakingDuration >= duration4Years) {\r\n            return StakingPeriod.StakingPeriod4Years;\r\n        } else if (stakingDuration >= duration3Years) {\r\n            return StakingPeriod.StakingPeriod3Years;\r\n        } else if (stakingDuration >= duration2Years) {\r\n            return StakingPeriod.StakingPeriod2Years;\r\n        } else if (stakingDuration >= durationYear) {\r\n            return StakingPeriod.StakingPeriodYear;\r\n        } else if (stakingDuration >= duration2Months) {\r\n            return StakingPeriod.StakingPeriod2Months;\r\n        } else if (stakingDuration >= durationMonth) {\r\n            return StakingPeriod.StakingPeriodMonth;\r\n        } else {\r\n            return StakingPeriod.StakingPeriodInvalid;\r\n        }\r\n    }\r\n\r\n    function calculateRewardsAmount(Deposit memory deposit)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        bool targetPeriodIsReached = (block.timestamp - deposit.startTime) >=\r\n            getDurationByStakingPeriod(deposit.stakingPeriod);\r\n        uint256 stakingDays = (block.timestamp - deposit.startTime) / 1 days;\r\n        StakingPeriod reachedPeriod;\r\n        if (targetPeriodIsReached) {\r\n            reachedPeriod = deposit.stakingPeriod;\r\n        } else {\r\n            reachedPeriod = getReachedStakingPeriod(\r\n                block.timestamp - deposit.startTime\r\n            );\r\n        }\r\n        if (reachedPeriod == StakingPeriod.StakingPeriodInvalid) {\r\n            amount = 0;\r\n        } else {\r\n            amount =\r\n                (deposit.amount *\r\n                    stakingRewardPercents[uint256(reachedPeriod)] *\r\n                    stakingDays) /\r\n                (getDurationByStakingPeriod(reachedPeriod) / 1 days) /\r\n                100;\r\n            amount = amount > deposit.rewardsClaimed\r\n                ? amount - deposit.rewardsClaimed\r\n                : 0;\r\n        }\r\n    }\r\n\r\n    function withdrawRewards(uint256 index) external {\r\n        require(remainingRewardsAmount > 0, \"No more rewards\");\r\n        require(\r\n            (accounts[msg.sender].indecesBitmap & (1 << index)) != 0,\r\n            \"No deposit at this slot\"\r\n        );\r\n        require(\r\n            block.timestamp -\r\n                accounts[msg.sender]\r\n                    .stakingDeposits[index]\r\n                    .lastRewardsClaimTimestamp >=\r\n                rewardsClamingCooldown,\r\n            \"Must wait cooldown since last reward claiming\"\r\n        );\r\n\r\n        uint256 rewardsAmount = calculateRewardsAmount(\r\n            accounts[msg.sender].stakingDeposits[index]\r\n        );\r\n\r\n        require(rewardsAmount > 0, \"No rewards available\");\r\n\r\n        if (rewardsAmount > remainingRewardsAmount) {\r\n            rewardsAmount = remainingRewardsAmount;\r\n        }\r\n\r\n        remainingRewardsAmount -= rewardsAmount;\r\n        accounts[msg.sender]\r\n            .stakingDeposits[index]\r\n            .rewardsClaimed += rewardsAmount;\r\n        accounts[msg.sender]\r\n            .stakingDeposits[index]\r\n            .lastRewardsClaimTimestamp = block.timestamp;\r\n\r\n        token.safeTransfer(msg.sender, rewardsAmount);\r\n        emit RewardWithdraw(msg.sender, index, rewardsAmount);\r\n    }\r\n\r\n    function withdrawDeposit(uint256 index) external {\r\n        require(\r\n            (accounts[msg.sender].indecesBitmap & (1 << index)) != 0,\r\n            \"No deposit at this slot\"\r\n        );\r\n        bool targetPeriodIsReached = (block.timestamp -\r\n            accounts[msg.sender].stakingDeposits[index].startTime) >=\r\n            getDurationByStakingPeriod(\r\n                accounts[msg.sender].stakingDeposits[index].stakingPeriod\r\n            );\r\n        uint256 rewardsAmount = calculateRewardsAmount(\r\n            accounts[msg.sender].stakingDeposits[index]\r\n        );\r\n\r\n        if (rewardsAmount > remainingRewardsAmount) {\r\n            rewardsAmount = remainingRewardsAmount;\r\n        }\r\n\r\n        uint256 amount = accounts[msg.sender].stakingDeposits[index].amount +\r\n            rewardsAmount;\r\n        if (!targetPeriodIsReached && (remainingRewardsAmount != 0)) {\r\n            uint256 penalty = (accounts[msg.sender]\r\n                .stakingDeposits[index]\r\n                .amount * abortStakingPenaltyPercents) / 100;\r\n            amount -= penalty;\r\n            totalPenalty += penalty;\r\n        }\r\n\r\n        remainingRewardsAmount -= rewardsAmount;\r\n\r\n        accounts[msg.sender].indecesBitmap &= ~(1 << index);\r\n        token.safeTransfer(msg.sender, amount);\r\n        emit DepositWithdraw(msg.sender, index);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"abortStakingPenaltyPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakingMonthRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staking2MonthsRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakingYearRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staking2YearsRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staking3YearsRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staking4YearsRewardPercents_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"staking5YearsRewardPercents_\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum HollandStakingContract.StakingPeriod\",\"name\":\"stakingPeriod\",\"type\":\"uint8\"}],\"name\":\"DepositCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DepositWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abortStakingPenaltyPercents\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"indecesBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum HollandStakingContract.StakingPeriod\",\"name\":\"stakingPeriod\",\"type\":\"uint8\"}],\"name\":\"createDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"indecesBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"enum HollandStakingContract.StakingPeriod\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardsClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsClamingCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingRewardPercents\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HollandStakingContract", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000723b17718289a91af252d616de2c77944962d122000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000104000000000000000000000000000000000000000000000000000000000000019a000000000000000000000000000000000000000000000000000000000000028a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://954df93fd8c05ef8bfd5ad8f55cc3f850ea4bb275e7c3c4ded6f9fecdfb3f761"}