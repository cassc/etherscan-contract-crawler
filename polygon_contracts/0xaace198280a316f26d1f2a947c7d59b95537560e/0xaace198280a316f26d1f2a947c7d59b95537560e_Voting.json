{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/hello-world/contracts/Voting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\n// Deployed with the Atlas IDE\\n// https://app.atlaszk.com\\n\\npragma solidity ^0.8.19;\\n\\ncontract Voting {\\n    struct Proposal {\\n        string description;\\n        uint voteCount;\\n    }\\n\\n    address public owner;\\n    Proposal[] public proposals;\\n\\n    mapping(address => bool) public voters;\\n    mapping(address => uint) public votes;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function addProposal(string memory _description) public {\\n        require(msg.sender == owner, \\\"Only owner can add proposal.\\\");\\n        proposals.push(Proposal({\\n            description: _description,\\n            voteCount: 0\\n        }));\\n    }\\n\\n    function authorizeVoter(address _voter) public {\\n        require(msg.sender == owner, \\\"Only owner can authorize voters.\\\");\\n        voters[_voter] = true;\\n    }\\n\\n    function vote(uint _proposalIndex) public {\\n        require(voters[msg.sender], \\\"You must be authorized to vote.\\\");\\n        require(votes[msg.sender] == 0, \\\"You have already voted.\\\");\\n\\n        proposals[_proposalIndex].voteCount += 1;\\n        votes[msg.sender] = _proposalIndex + 1;\\n    }\\n\\n    function getWinner() public view returns (string memory) {\\n        uint winningVoteCount = 0;\\n        uint winningProposalIndex = 0;\\n\\n        for (uint i = 0; i < proposals.length; i++) {\\n            if (proposals[i].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[i].voteCount;\\n                winningProposalIndex = i;\\n            }\\n        }\\n\\n        return proposals[winningProposalIndex].description;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"authorizeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalIndex\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Voting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}