{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @maticnetwork/pos-portal/contracts/common/Initializable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract Initializable {\r\n    bool inited = false;\r\n\r\n    modifier initializer() {\r\n        require(!inited, \"already inited\");\r\n        _;\r\n        inited = true;\r\n    }\r\n}\r\n\r\n// File: @maticnetwork/pos-portal/contracts/common/EIP712Base.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract EIP712Base is Initializable {\r\n    struct EIP712Domain {\r\n        string name;\r\n        string version;\r\n        address verifyingContract;\r\n        bytes32 salt;\r\n    }\r\n\r\n    string constant public ERC712_VERSION = \"1\";\r\n\r\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\r\n        )\r\n    );\r\n    bytes32 internal domainSeperator;\r\n\r\n    // supposed to be called once while initializing.\r\n    // one of the contractsa that inherits this contract follows proxy pattern\r\n    // so it is not possible to do this in a constructor\r\n    function _initializeEIP712(\r\n        string memory name\r\n    )\r\n    internal\r\n    initializer\r\n    {\r\n        _setDomainSeperator(name);\r\n    }\r\n\r\n    function _setDomainSeperator(string memory name) internal {\r\n        domainSeperator = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(ERC712_VERSION)),\r\n                address(this),\r\n                bytes32(getChainId())\r\n            )\r\n        );\r\n    }\r\n\r\n    function getDomainSeperator() public view returns (bytes32) {\r\n        return domainSeperator;\r\n    }\r\n\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Accept message hash and returns hash message in EIP712 compatible form\r\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n     * https://eips.ethereum.org/EIPS/eip-712\r\n     * \"\\\\x19\" makes the encoding deterministic\r\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n     */\r\n    function toTypedMessageHash(bytes32 messageHash)\r\n    internal\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return\r\n        keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n// File: @maticnetwork/pos-portal/contracts/common/NativeMetaTransaction.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract NativeMetaTransaction is EIP712Base {\r\n    using SafeMath for uint256;\r\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n        bytes(\r\n            \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n        )\r\n    );\r\n    event MetaTransactionExecuted(\r\n        address userAddress,\r\n        address payable relayerAddress,\r\n        bytes functionSignature\r\n    );\r\n    mapping(address => uint256) nonces;\r\n\r\n    /*\r\n     * Meta transaction structure.\r\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n     * He should call the desired function directly in that case.\r\n     */\r\n    struct MetaTransaction {\r\n        uint256 nonce;\r\n        address from;\r\n        bytes functionSignature;\r\n    }\r\n\r\n    function executeMetaTransaction(\r\n        address userAddress,\r\n        bytes memory functionSignature,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) public payable returns (bytes memory) {\r\n        MetaTransaction memory metaTx = MetaTransaction({\r\n        nonce: nonces[userAddress],\r\n        from: userAddress,\r\n        functionSignature: functionSignature\r\n        });\r\n\r\n        require(\r\n            verify(userAddress, metaTx, sigR, sigS, sigV),\r\n            \"Signer and signature do not match\"\r\n        );\r\n\r\n        // increase nonce for user (to avoid re-use)\r\n        nonces[userAddress] = nonces[userAddress].add(1);\r\n\r\n        emit MetaTransactionExecuted(\r\n            userAddress,\r\n            payable(msg.sender),\r\n            functionSignature\r\n        );\r\n\r\n        // Append userAddress and relayer address at the end to extract it from calling context\r\n        (bool success, bytes memory returnData) = address(this).call(\r\n            abi.encodePacked(functionSignature, userAddress)\r\n        );\r\n        require(success, \"Function call not successful\");\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function hashMetaTransaction(MetaTransaction memory metaTx)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        return\r\n        keccak256(\r\n            abi.encode(\r\n                META_TRANSACTION_TYPEHASH,\r\n                metaTx.nonce,\r\n                metaTx.from,\r\n                keccak256(metaTx.functionSignature)\r\n            )\r\n        );\r\n    }\r\n\r\n    function getNonce(address user) public view returns (uint256 nonce) {\r\n        nonce = nonces[user];\r\n    }\r\n\r\n    function verify(\r\n        address signer,\r\n        MetaTransaction memory metaTx,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) internal view returns (bool) {\r\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\r\n        return\r\n        signer ==\r\n        ecrecover(\r\n            toTypedMessageHash(hashMetaTransaction(metaTx)),\r\n            sigV,\r\n            sigR,\r\n            sigS\r\n        );\r\n    }\r\n}\r\n\r\n// File: @maticnetwork/pos-portal/contracts/child/ChildToken/IChildToken.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IChildToken {\r\n    event Withdraw(\r\n        address indexed _fromAddress,\r\n        uint256 _amount,\r\n        string _toAddress,\r\n        string _toMemo\r\n    );\r\n\r\n    event Deposit(address indexed _from, uint256 _amount);\r\n\r\n    function deposit(address user, uint256 depositData) external;\r\n\r\n    function withdraw(\r\n        uint256 amount,\r\n        string calldata toAddress,\r\n        string calldata memo\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n            string(\r\n                abi.encodePacked(\r\n                    \"AccessControl: account \",\r\n                    Strings.toHexString(uint160(account), 20),\r\n                    \" is missing role \",\r\n                    Strings.toHexString(uint256(role), 32)\r\n                )\r\n            )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @maticnetwork/pos-portal/contracts/common/AccessControlMixin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract AccessControlMixin is AccessControl {\r\n    string private _revertMsg;\r\n    function _setupContractId(string memory contractId) internal {\r\n        _revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\r\n    }\r\n\r\n    modifier only(bytes32 role) {\r\n        require(\r\n            hasRole(role, _msgSender()),\r\n            _revertMsg\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ENSResolver_Chainlink {\r\n    function addr(\r\n        bytes32 node\r\n    )\r\n    public\r\n    view\r\n    virtual\r\n    returns (\r\n        address\r\n    );\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface PointerInterface {\r\n\r\n    function getAddress()\r\n    external\r\n    view\r\n    returns (\r\n        address\r\n    );\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ChainlinkRequestInterface {\r\n    function oracleRequest(\r\n        address sender,\r\n        uint256 requestPrice,\r\n        bytes32 serviceAgreementID,\r\n        address callbackAddress,\r\n        bytes4 callbackFunctionId,\r\n        uint256 nonce,\r\n        uint256 dataVersion,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function cancelOracleRequest(\r\n        bytes32 requestId,\r\n        uint256 payment,\r\n        bytes4 callbackFunctionId,\r\n        uint256 expiration\r\n    ) external;\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface OracleInterface {\r\n    function fulfillOracleRequest(\r\n        bytes32 requestId,\r\n        uint256 payment,\r\n        address callbackAddress,\r\n        bytes4 callbackFunctionId,\r\n        uint256 expiration,\r\n        bytes32 data\r\n    )\r\n    external\r\n    returns (\r\n        bool\r\n    );\r\n\r\n    function isAuthorizedSender(\r\n        address node\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        bool\r\n    );\r\n\r\n    function withdraw(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function withdrawable()\r\n    external\r\n    view\r\n    returns (\r\n        uint256\r\n    );\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\r\n\r\n    function requestOracleData(\r\n        address sender,\r\n        uint256 payment,\r\n        bytes32 specId,\r\n        address callbackAddress,\r\n        bytes4 callbackFunctionId,\r\n        uint256 nonce,\r\n        uint256 dataVersion,\r\n        bytes calldata data\r\n    )\r\n    external;\r\n\r\n    function fulfillOracleRequest2(\r\n        bytes32 requestId,\r\n        uint256 payment,\r\n        address callbackAddress,\r\n        bytes4 callbackFunctionId,\r\n        uint256 expiration,\r\n        bytes calldata data\r\n    )\r\n    external\r\n    returns (\r\n        bool\r\n    );\r\n\r\n    function ownerTransferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n    function distributeFunds(\r\n        address payable[] calldata receivers,\r\n        uint[] calldata amounts\r\n    )\r\n    external\r\n    payable;\r\n\r\n    function getAuthorizedSenders()\r\n    external\r\n    returns (\r\n        address[] memory\r\n    );\r\n\r\n    function setAuthorizedSenders(\r\n        address[] calldata senders\r\n    ) external;\r\n\r\n    function getForwarder()\r\n    external\r\n    returns (\r\n        address\r\n    );\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        uint256 remaining\r\n    );\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        uint256 balance\r\n    );\r\n\r\n    function decimals()\r\n    external\r\n    view\r\n    returns (\r\n        uint8 decimalPlaces\r\n    );\r\n\r\n    function decreaseApproval(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n    function increaseApproval(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external;\r\n\r\n    function name()\r\n    external\r\n    view\r\n    returns (\r\n        string memory tokenName\r\n    );\r\n\r\n    function symbol()\r\n    external\r\n    view\r\n    returns (\r\n        string memory tokenSymbol\r\n    );\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (\r\n        uint256 totalTokensIssued\r\n    );\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n    external\r\n    returns (\r\n        bool success\r\n    );\r\n\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ENSInterface {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(\r\n        bytes32 indexed node,\r\n        bytes32 indexed label,\r\n        address owner\r\n    );\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(\r\n        bytes32 indexed node,\r\n        address owner\r\n    );\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(\r\n        bytes32 indexed node,\r\n        address resolver\r\n    );\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(\r\n        bytes32 indexed node,\r\n        uint64 ttl\r\n    );\r\n\r\n\r\n    function setSubnodeOwner(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner_\r\n    ) external;\r\n\r\n    function setResolver(\r\n        bytes32 node,\r\n        address resolver_\r\n    ) external;\r\n\r\n    function setOwner(\r\n        bytes32 node,\r\n        address owner_\r\n    ) external;\r\n\r\n    function setTTL(\r\n        bytes32 node,\r\n        uint64 ttl_\r\n    ) external;\r\n\r\n    function owner(\r\n        bytes32 node\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        address\r\n    );\r\n\r\n    function resolver(\r\n        bytes32 node\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        address\r\n    );\r\n\r\n    function ttl(\r\n        bytes32 node\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        uint64\r\n    );\r\n\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev A library for working with mutable byte buffers in Solidity.\r\n*\r\n* Byte buffers are mutable and expandable, and provide a variety of primitives\r\n* for writing to them. At any time you can fetch a bytes object containing the\r\n* current contents of the buffer. The bytes object should not be stored between\r\n* operations, as it may change due to resizing of the buffer.\r\n*/\r\nlibrary BufferChainlink {\r\n    /**\r\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\r\n    *      a capacity. The capacity may be longer than the current value, in\r\n    *      which case it can be extended without the need to allocate more memory.\r\n    */\r\n    struct buffer {\r\n        bytes buf;\r\n        uint capacity;\r\n    }\r\n\r\n    /**\r\n    * @dev Initializes a buffer with an initial capacity.\r\n    * @param buf The buffer to initialize.\r\n    * @param capacity The number of bytes of space to allocate the buffer.\r\n    * @return The buffer, for chaining.\r\n    */\r\n    function init(\r\n        buffer memory buf,\r\n        uint capacity\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        if (capacity % 32 != 0) {\r\n            capacity += 32 - (capacity % 32);\r\n        }\r\n        // Allocate space for the buffer data\r\n        buf.capacity = capacity;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(buf, ptr)\r\n            mstore(ptr, 0)\r\n            mstore(0x40, add(32, add(ptr, capacity)))\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n    * @dev Initializes a new buffer from an existing bytes object.\r\n    *      Changes to the buffer may mutate the original value.\r\n    * @param b The bytes object to initialize the buffer with.\r\n    * @return A new buffer.\r\n    */\r\n    function fromBytes(\r\n        bytes memory b\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        buffer memory buf;\r\n        buf.buf = b;\r\n        buf.capacity = b.length;\r\n        return buf;\r\n    }\r\n\r\n    function resize(\r\n        buffer memory buf,\r\n        uint capacity\r\n    )\r\n    private\r\n    pure\r\n    {\r\n        bytes memory oldbuf = buf.buf;\r\n        init(buf, capacity);\r\n        append(buf, oldbuf);\r\n    }\r\n\r\n    function max(\r\n        uint a,\r\n        uint b\r\n    )\r\n    private\r\n    pure\r\n    returns(\r\n        uint\r\n    )\r\n    {\r\n        if (a > b) {\r\n            return a;\r\n        }\r\n        return b;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets buffer length to 0.\r\n    * @param buf The buffer to truncate.\r\n    * @return The original buffer, for chaining..\r\n    */\r\n    function truncate(\r\n        buffer memory buf\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        assembly {\r\n            let bufptr := mload(buf)\r\n            mstore(bufptr, 0)\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n    * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param off The start offset to write to.\r\n    * @param data The data to append.\r\n    * @param len The number of bytes to copy.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function write(\r\n        buffer memory buf,\r\n        uint off,\r\n        bytes memory data,\r\n        uint len\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        require(len <= data.length);\r\n\r\n        if (off + len > buf.capacity) {\r\n            resize(buf, max(buf.capacity, len + off) * 2);\r\n        }\r\n\r\n        uint dest;\r\n        uint src;\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Start address = buffer address + offset + sizeof(buffer length)\r\n            dest := add(add(bufptr, 32), off)\r\n        // Update buffer length if we're extending it\r\n            if gt(add(len, off), buflen) {\r\n                mstore(bufptr, add(len, off))\r\n            }\r\n            src := add(data, 32)\r\n        }\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n    unchecked {\r\n        uint mask = (256 ** (32 - len)) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @param len The number of bytes to copy.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data,\r\n        uint len\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        return write(buf, buf.buf.length, data, len);\r\n    }\r\n\r\n    /**\r\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function append(\r\n        buffer memory buf,\r\n        bytes memory data\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        return write(buf, buf.buf.length, data, data.length);\r\n    }\r\n\r\n    /**\r\n    * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\r\n    *      capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param off The offset to write the byte at.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function writeUint8(\r\n        buffer memory buf,\r\n        uint off,\r\n        uint8 data\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        if (off >= buf.capacity) {\r\n            resize(buf, buf.capacity * 2);\r\n        }\r\n\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Length of existing buffer data\r\n            let buflen := mload(bufptr)\r\n        // Address = buffer address + sizeof(buffer length) + off\r\n            let dest := add(add(bufptr, off), 32)\r\n            mstore8(dest, data)\r\n        // Update buffer length if we extended it\r\n            if eq(off, buflen) {\r\n                mstore(bufptr, add(buflen, 1))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\r\n    *      capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function appendUint8(\r\n        buffer memory buf,\r\n        uint8 data\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        return writeUint8(buf, buf.buf.length, data);\r\n    }\r\n\r\n    /**\r\n    * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\r\n    *      exceed the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param off The offset to write at.\r\n    * @param data The data to append.\r\n    * @param len The number of bytes to write (left-aligned).\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function write(\r\n        buffer memory buf,\r\n        uint off,\r\n        bytes32 data,\r\n        uint len\r\n    )\r\n    private\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n    unchecked {\r\n        uint mask = (256 ** len) - 1;\r\n        // Right-align data\r\n        data = data >> (8 * (32 - len));\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Address = buffer address + sizeof(buffer length) + off + len\r\n            let dest := add(add(bufptr, off), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n        // Update buffer length if we extended it\r\n            if gt(add(off, len), mload(bufptr)) {\r\n                mstore(bufptr, add(off, len))\r\n            }\r\n        }\r\n    }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n    * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\r\n    *      capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param off The offset to write at.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function writeBytes20(\r\n        buffer memory buf,\r\n        uint off,\r\n        bytes20 data\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        return write(buf, off, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chhaining.\r\n    */\r\n    function appendBytes20(\r\n        buffer memory buf,\r\n        bytes20 data\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        return write(buf, buf.buf.length, bytes32(data), 20);\r\n    }\r\n\r\n    /**\r\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param data The data to append.\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function appendBytes32(\r\n        buffer memory buf,\r\n        bytes32 data\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        buffer memory\r\n    )\r\n    {\r\n        return write(buf, buf.buf.length, data, 32);\r\n    }\r\n\r\n    /**\r\n    * @dev Writes an integer to the buffer. Resizes if doing so would exceed\r\n    *      the capacity of the buffer.\r\n    * @param buf The buffer to append to.\r\n    * @param off The offset to write at.\r\n    * @param data The data to append.\r\n    * @param len The number of bytes to write (right-aligned).\r\n    * @return The original buffer, for chaining.\r\n    */\r\n    function writeInt(\r\n        buffer memory buf,\r\n        uint off,\r\n        uint data,\r\n        uint len\r\n    )\r\n    private\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        if (len + off > buf.capacity) {\r\n            resize(buf, (len + off) * 2);\r\n        }\r\n\r\n        uint mask = (256 ** len) - 1;\r\n        assembly {\r\n        // Memory address of the buffer data\r\n            let bufptr := mload(buf)\r\n        // Address = buffer address + off + sizeof(buffer length) + len\r\n            let dest := add(add(bufptr, off), len)\r\n            mstore(dest, or(and(mload(dest), not(mask)), data))\r\n        // Update buffer length if we extended it\r\n            if gt(add(off, len), mload(bufptr)) {\r\n                mstore(bufptr, add(off, len))\r\n            }\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    /**\r\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\r\n      * exceed the capacity of the buffer.\r\n      * @param buf The buffer to append to.\r\n      * @param data The data to append.\r\n      * @return The original buffer.\r\n      */\r\n    function appendInt(\r\n        buffer memory buf,\r\n        uint data,\r\n        uint len\r\n    )\r\n    internal\r\n    pure\r\n    returns(\r\n        buffer memory\r\n    )\r\n    {\r\n        return writeInt(buf, buf.buf.length, data, len);\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\r\n\r\n\r\npragma solidity >= 0.4.19;\r\n\r\n\r\nlibrary CBORChainlink {\r\n    using BufferChainlink for BufferChainlink.buffer;\r\n\r\n    uint8 private constant MAJOR_TYPE_INT = 0;\r\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\r\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\r\n    uint8 private constant MAJOR_TYPE_STRING = 3;\r\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\r\n    uint8 private constant MAJOR_TYPE_MAP = 5;\r\n    uint8 private constant MAJOR_TYPE_TAG = 6;\r\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\r\n\r\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\r\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\r\n\r\n    function encodeType(\r\n        BufferChainlink.buffer memory buf,\r\n        uint8 major,\r\n        uint value\r\n    )\r\n    private\r\n    pure\r\n    {\r\n        if(value <= 23) {\r\n            buf.appendUint8(uint8((major << 5) | value));\r\n        } else if(value <= 0xFF) {\r\n            buf.appendUint8(uint8((major << 5) | 24));\r\n            buf.appendInt(value, 1);\r\n        } else if(value <= 0xFFFF) {\r\n            buf.appendUint8(uint8((major << 5) | 25));\r\n            buf.appendInt(value, 2);\r\n        } else if(value <= 0xFFFFFFFF) {\r\n            buf.appendUint8(uint8((major << 5) | 26));\r\n            buf.appendInt(value, 4);\r\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\r\n            buf.appendUint8(uint8((major << 5) | 27));\r\n            buf.appendInt(value, 8);\r\n        }\r\n    }\r\n\r\n    function encodeIndefiniteLengthType(\r\n        BufferChainlink.buffer memory buf,\r\n        uint8 major\r\n    )\r\n    private\r\n    pure\r\n    {\r\n        buf.appendUint8(uint8((major << 5) | 31));\r\n    }\r\n\r\n    function encodeUInt(\r\n        BufferChainlink.buffer memory buf,\r\n        uint value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeType(buf, MAJOR_TYPE_INT, value);\r\n    }\r\n\r\n    function encodeInt(\r\n        BufferChainlink.buffer memory buf,\r\n        int value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        if(value < -0x10000000000000000) {\r\n            encodeSignedBigNum(buf, value);\r\n        } else if(value > 0xFFFFFFFFFFFFFFFF) {\r\n            encodeBigNum(buf, value);\r\n        } else if(value >= 0) {\r\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\r\n        } else {\r\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\r\n        }\r\n    }\r\n\r\n    function encodeBytes(\r\n        BufferChainlink.buffer memory buf,\r\n        bytes memory value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\r\n        buf.append(value);\r\n    }\r\n\r\n    function encodeBigNum(\r\n        BufferChainlink.buffer memory buf,\r\n        int value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\r\n        encodeBytes(buf, abi.encode(uint(value)));\r\n    }\r\n\r\n    function encodeSignedBigNum(\r\n        BufferChainlink.buffer memory buf,\r\n        int input\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\r\n        encodeBytes(buf, abi.encode(uint(-1 - input)));\r\n    }\r\n\r\n    function encodeString(\r\n        BufferChainlink.buffer memory buf,\r\n        string memory value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\r\n        buf.append(bytes(value));\r\n    }\r\n\r\n    function startArray(\r\n        BufferChainlink.buffer memory buf\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\r\n    }\r\n\r\n    function startMap(\r\n        BufferChainlink.buffer memory buf\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\r\n    }\r\n\r\n    function endSequence(\r\n        BufferChainlink.buffer memory buf\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/Chainlink.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title Library for common Chainlink functions\r\n * @dev Uses imported CBOR library for encoding to buffer\r\n */\r\nlibrary Chainlink {\r\n    uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\r\n\r\n    using CBORChainlink for BufferChainlink.buffer;\r\n\r\n    struct Request {\r\n        bytes32 id;\r\n        address callbackAddress;\r\n        bytes4 callbackFunctionId;\r\n        uint256 nonce;\r\n        BufferChainlink.buffer buf;\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes a Chainlink request\r\n     * @dev Sets the ID, callback address, and callback function signature on the request\r\n     * @param self The uninitialized request\r\n     * @param jobId The Job Specification ID\r\n     * @param callbackAddr The callback address\r\n     * @param callbackFunc The callback function signature\r\n     * @return The initialized request\r\n     */\r\n    function initialize(\r\n        Request memory self,\r\n        bytes32 jobId,\r\n        address callbackAddr,\r\n        bytes4 callbackFunc\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        Chainlink.Request memory\r\n    )\r\n    {\r\n        BufferChainlink.init(self.buf, defaultBufferSize);\r\n        self.id = jobId;\r\n        self.callbackAddress = callbackAddr;\r\n        self.callbackFunctionId = callbackFunc;\r\n        return self;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the data for the buffer without encoding CBOR on-chain\r\n     * @dev CBOR can be closed with curly-brackets {} or they can be left off\r\n     * @param self The initialized request\r\n     * @param data The CBOR data\r\n     */\r\n    function setBuffer(\r\n        Request memory self,\r\n        bytes memory data\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        BufferChainlink.init(self.buf, data.length);\r\n        BufferChainlink.append(self.buf, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a string value to the request with a given key name\r\n     * @param self The initialized request\r\n     * @param key The name of the key\r\n     * @param value The string value to add\r\n     */\r\n    function add(\r\n        Request memory self,\r\n        string memory key,\r\n        string memory value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        self.buf.encodeString(key);\r\n        self.buf.encodeString(value);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a bytes value to the request with a given key name\r\n     * @param self The initialized request\r\n     * @param key The name of the key\r\n     * @param value The bytes value to add\r\n     */\r\n    function addBytes(\r\n        Request memory self,\r\n        string memory key,\r\n        bytes memory value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        self.buf.encodeString(key);\r\n        self.buf.encodeBytes(value);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a int256 value to the request with a given key name\r\n     * @param self The initialized request\r\n     * @param key The name of the key\r\n     * @param value The int256 value to add\r\n     */\r\n    function addInt(\r\n        Request memory self,\r\n        string memory key,\r\n        int256 value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        self.buf.encodeString(key);\r\n        self.buf.encodeInt(value);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a uint256 value to the request with a given key name\r\n     * @param self The initialized request\r\n     * @param key The name of the key\r\n     * @param value The uint256 value to add\r\n     */\r\n    function addUint(\r\n        Request memory self,\r\n        string memory key,\r\n        uint256 value\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        self.buf.encodeString(key);\r\n        self.buf.encodeUInt(value);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds an array of strings to the request with a given key name\r\n     * @param self The initialized request\r\n     * @param key The name of the key\r\n     * @param values The array of string values to add\r\n     */\r\n    function addStringArray(\r\n        Request memory self,\r\n        string memory key,\r\n        string[] memory values\r\n    )\r\n    internal\r\n    pure\r\n    {\r\n        self.buf.encodeString(key);\r\n        self.buf.startArray();\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            self.buf.encodeString(values[i]);\r\n        }\r\n        self.buf.endSequence();\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/ChainlinkClient.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The ChainlinkClient contract\r\n * @notice Contract writers can inherit this contract in order to create requests for the\r\n * Chainlink network\r\n */\r\ncontract ChainlinkClient {\r\n    using Chainlink for Chainlink.Request;\r\n\r\n    uint256 constant internal LINK_DIVISIBILITY = 10**18;\r\n    uint256 constant private AMOUNT_OVERRIDE = 0;\r\n    address constant private SENDER_OVERRIDE = address(0);\r\n    uint256 constant private ORACLE_ARGS_VERSION = 1;\r\n    uint256 constant private OPERATOR_ARGS_VERSION = 2;\r\n    bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\r\n    bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\r\n    address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\r\n\r\n    ENSInterface private ens;\r\n    bytes32 private ensNode;\r\n    LinkTokenInterface private link;\r\n    OperatorInterface private oracle;\r\n    uint256 private requestCount = 1;\r\n    mapping(bytes32 => address) private pendingRequests;\r\n\r\n    event ChainlinkRequested(\r\n        bytes32 indexed id\r\n    );\r\n    event ChainlinkFulfilled(\r\n        bytes32 indexed id\r\n    );\r\n    event ChainlinkCancelled(\r\n        bytes32 indexed id\r\n    );\r\n\r\n    /**\r\n     * @notice Creates a request that can hold additional parameters\r\n     * @param specId The Job Specification ID that the request will be created for\r\n     * @param callbackAddress The callback address that the response will be sent to\r\n     * @param callbackFunctionSignature The callback function signature to use for the callback address\r\n     * @return A Chainlink Request struct in memory\r\n     */\r\n    function buildChainlinkRequest(\r\n        bytes32 specId,\r\n        address callbackAddress,\r\n        bytes4 callbackFunctionSignature\r\n    )\r\n    internal\r\n    pure\r\n    returns (\r\n        Chainlink.Request memory\r\n    )\r\n    {\r\n        Chainlink.Request memory req;\r\n        return req.initialize(specId, callbackAddress, callbackFunctionSignature);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a Chainlink request to the stored oracle address\r\n     * @dev Calls `chainlinkRequestTo` with the stored oracle address\r\n     * @param req The initialized Chainlink Request\r\n     * @param payment The amount of LINK to send for the request\r\n     * @return requestId The request ID\r\n     */\r\n    function sendChainlinkRequest(\r\n        Chainlink.Request memory req,\r\n        uint256 payment\r\n    )\r\n    internal\r\n    returns (\r\n        bytes32\r\n    )\r\n    {\r\n        return sendChainlinkRequestTo(address(oracle), req, payment);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a Chainlink request to the specified oracle address\r\n     * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n     * send LINK which creates a request on the target oracle contract.\r\n     * Emits ChainlinkRequested event.\r\n     * @param oracleAddress The address of the oracle for the request\r\n     * @param req The initialized Chainlink Request\r\n     * @param payment The amount of LINK to send for the request\r\n     * @return requestId The request ID\r\n     */\r\n    function sendChainlinkRequestTo(\r\n        address oracleAddress,\r\n        Chainlink.Request memory req,\r\n        uint256 payment\r\n    )\r\n    internal\r\n    returns (\r\n        bytes32 requestId\r\n    )\r\n    {\r\n        return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a Chainlink request to the stored oracle address\r\n     * @dev This function supports multi-word response\r\n     * @dev Calls `requestOracleDataFrom` with the stored oracle address\r\n     * @param req The initialized Chainlink Request\r\n     * @param payment The amount of LINK to send for the request\r\n     * @return requestId The request ID\r\n     */\r\n    function requestOracleData(\r\n        Chainlink.Request memory req,\r\n        uint256 payment\r\n    )\r\n    internal\r\n    returns (\r\n        bytes32\r\n    )\r\n    {\r\n        return requestOracleDataFrom(address(oracle), req, payment);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a Chainlink request to the specified oracle address\r\n     * @dev This function supports multi-word response\r\n     * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\r\n     * send LINK which creates a request on the target oracle contract.\r\n     * Emits ChainlinkRequested event.\r\n     * @param oracleAddress The address of the oracle for the request\r\n     * @param req The initialized Chainlink Request\r\n     * @param payment The amount of LINK to send for the request\r\n     * @return requestId The request ID\r\n     */\r\n    function requestOracleDataFrom(\r\n        address oracleAddress,\r\n        Chainlink.Request memory req,\r\n        uint256 payment\r\n    )\r\n    internal\r\n    returns (\r\n        bytes32 requestId\r\n    )\r\n    {\r\n        return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\r\n    }\r\n\r\n    /**\r\n     * @notice Make a request to an oracle\r\n     * @param oracleAddress The address of the oracle for the request\r\n     * @param req The initialized Chainlink Request\r\n     * @param payment The amount of LINK to send for the request\r\n     * @param argsVersion The version of data support (single word, multi word)\r\n     * @return requestId The request ID\r\n     */\r\n    function rawRequest(\r\n        address oracleAddress,\r\n        Chainlink.Request memory req,\r\n        uint256 payment,\r\n        uint256 argsVersion,\r\n        bytes4 funcSelector\r\n    )\r\n    private\r\n    returns (\r\n        bytes32 requestId\r\n    )\r\n    {\r\n        requestId = keccak256(abi.encodePacked(this, requestCount));\r\n        req.nonce = requestCount;\r\n        pendingRequests[requestId] = oracleAddress;\r\n        emit ChainlinkRequested(requestId);\r\n        bytes memory encodedData = abi.encodeWithSelector(\r\n            funcSelector,\r\n            SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\r\n            AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\r\n            req.id,\r\n            req.callbackAddress,\r\n            req.callbackFunctionId,\r\n            req.nonce,\r\n            argsVersion,\r\n            req.buf.buf);\r\n        require(link.transferAndCall(oracleAddress, payment, encodedData), \"unable to transferAndCall to oracle\");\r\n        requestCount += 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows a request to be cancelled if it has not been fulfilled\r\n     * @dev Requires keeping track of the expiration value emitted from the oracle contract.\r\n     * Deletes the request from the `pendingRequests` mapping.\r\n     * Emits ChainlinkCancelled event.\r\n     * @param requestId The request ID\r\n     * @param payment The amount of LINK sent for the request\r\n     * @param callbackFunc The callback function specified for the request\r\n     * @param expiration The time of the expiration for the request\r\n     */\r\n    function cancelChainlinkRequest(\r\n        bytes32 requestId,\r\n        uint256 payment,\r\n        bytes4 callbackFunc,\r\n        uint256 expiration\r\n    )\r\n    internal\r\n    {\r\n        OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\r\n        delete pendingRequests[requestId];\r\n        emit ChainlinkCancelled(requestId);\r\n        requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the stored oracle address\r\n     * @param oracleAddress The address of the oracle contract\r\n     */\r\n    function setChainlinkOracle(\r\n        address oracleAddress\r\n    )\r\n    internal\r\n    {\r\n        oracle = OperatorInterface(oracleAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the LINK token address\r\n     * @param linkAddress The address of the LINK token contract\r\n     */\r\n    function setChainlinkToken(\r\n        address linkAddress\r\n    )\r\n    internal\r\n    {\r\n        link = LinkTokenInterface(linkAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the Chainlink token address for the public\r\n     * network as given by the Pointer contract\r\n     */\r\n    function setPublicChainlinkToken()\r\n    internal\r\n    {\r\n        setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the stored address of the LINK token\r\n     * @return The address of the LINK token\r\n     */\r\n    function chainlinkTokenAddress()\r\n    internal\r\n    view\r\n    returns (\r\n        address\r\n    )\r\n    {\r\n        return address(link);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the stored address of the oracle contract\r\n     * @return The address of the oracle contract\r\n     */\r\n    function chainlinkOracleAddress()\r\n    internal\r\n    view\r\n    returns (\r\n        address\r\n    )\r\n    {\r\n        return address(oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows for a request which was created on another contract to be fulfilled\r\n     * on this contract\r\n     * @param oracleAddress The address of the oracle contract that will fulfill the request\r\n     * @param requestId The request ID used for the response\r\n     */\r\n    function addChainlinkExternalRequest(\r\n        address oracleAddress,\r\n        bytes32 requestId\r\n    )\r\n    internal\r\n    notPendingRequest(requestId)\r\n    {\r\n        pendingRequests[requestId] = oracleAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\r\n     * @dev Accounts for subnodes having different resolvers\r\n     * @param ensAddress The address of the ENS contract\r\n     * @param node The ENS node hash\r\n     */\r\n    function useChainlinkWithENS(\r\n        address ensAddress,\r\n        bytes32 node\r\n    )\r\n    internal\r\n    {\r\n        ens = ENSInterface(ensAddress);\r\n        ensNode = node;\r\n        bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\r\n        ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\r\n        setChainlinkToken(resolver.addr(linkSubnode));\r\n        updateChainlinkOracleWithENS();\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the stored oracle contract with the address resolved by ENS\r\n     * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\r\n     */\r\n    function updateChainlinkOracleWithENS()\r\n    internal\r\n    {\r\n        bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\r\n        ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\r\n        setChainlinkOracle(resolver.addr(oracleSubnode));\r\n    }\r\n\r\n    /**\r\n     * @notice Ensures that the fulfillment is valid for this contract\r\n     * @dev Use if the contract developer prefers methods instead of modifiers for validation\r\n     * @param requestId The request ID for fulfillment\r\n     */\r\n    function validateChainlinkCallback(\r\n        bytes32 requestId\r\n    )\r\n    internal\r\n    recordChainlinkFulfillment(requestId)\r\n        // solhint-disable-next-line no-empty-blocks\r\n    {}\r\n\r\n    /**\r\n     * @dev Reverts if the sender is not the oracle of the request.\r\n     * Emits ChainlinkFulfilled event.\r\n     * @param requestId The request ID for fulfillment\r\n     */\r\n    modifier recordChainlinkFulfillment(\r\n        bytes32 requestId\r\n    )\r\n    {\r\n        require(msg.sender == pendingRequests[requestId],\r\n            \"Source must be the oracle of the request\");\r\n        delete pendingRequests[requestId];\r\n        emit ChainlinkFulfilled(requestId);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the request is already pending\r\n     * @param requestId The request ID for fulfillment\r\n     */\r\n    modifier notPendingRequest(\r\n        bytes32 requestId\r\n    )\r\n    {\r\n        require(pendingRequests[requestId] == address(0), \"Request is already pending\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: wTFC.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n//import \"@maticnetwork/pos-portal/contracts/common/NativeMetaTransaction.sol\";\r\n\r\n\r\nabstract contract ProofOfReserve is ChainlinkClient, AccessControlMixin {\r\n    using Chainlink for Chainlink.Request;\r\n\r\n    address internal _linkAddress;\r\n    address internal _oracle;\r\n    string internal _jobId;\r\n    string internal _stellarUrl;\r\n    string internal _apiPath = \"balances.0.balance\";\r\n    uint256 internal _fee;\r\n\r\n    uint256 internal _snapshotLocked;\r\n    uint256 internal _snapshotSupply;\r\n    uint256 internal _snapshotTimestamp;\r\n    uint256 public _lastRequestTimestamp;\r\n    bool internal _isWithdrawEnabled = true;\r\n    bool public _hasSupplyChanged = true;\r\n\r\n    /**\r\n     * @notice gets the number of locked tokens from Stellar side\r\n     * @dev Create a Chainlink request to retrieve number of locked tokens from Stellar API,\r\n     * find the target data, then multiply by 1000000000000000000 (to remove decimal places from data).\r\n     * @return ChainLink request ID\r\n     */\r\n    function requestLockedTokenData()\r\n    external\r\n    returns (bytes32)\r\n    {\r\n        require(_hasSupplyChanged && (block.timestamp >= _lastRequestTimestamp + 1 hours) , \"Chainlink API requests are disabled!\");\r\n\r\n        Chainlink.Request memory request = buildChainlinkRequest(\r\n            _stringToBytes32(_jobId),\r\n            address(this),\r\n            this.fulfill.selector\r\n        );\r\n        // Set the URL to perform the GET request on\r\n        request.add(\"get\", _stellarUrl);\r\n        request.add(\"path\", _apiPath);\r\n\r\n        // Multiply the result by 1000000000000000000 to remove decimals\r\n        int256 timesAmount = 10**18;\r\n        request.addInt(\"times\", timesAmount);\r\n\r\n        _lastRequestTimestamp = block.timestamp;\r\n        _hasSupplyChanged = false;\r\n\r\n        // Sends the request\r\n        return sendChainlinkRequestTo(_oracle, request, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice receives the Chainlink response and disables withdraw if there are insufficient amount of tokens\r\n     * @dev receives the Chainlink response, checks if tokens locked on\r\n     * Stellar side is less or equal to the  Polygon side. If not disable withdraw.\r\n     * @param _requestId Chainlink request ID\r\n     * @param _lockedToken number of locked tokens\r\n     */\r\n    function fulfill(bytes32 _requestId, uint256 _lockedToken)\r\n    public\r\n    virtual\r\n    recordChainlinkFulfillment(_requestId)\r\n    {}\r\n\r\n    /**\r\n     * @notice converts a string to bytes32 form\r\n     * @dev Helper function for converting jobId string to bytes32 form,\r\n     * which is required for the buildChainlinkRequest function\r\n     * @param _source string that gets converted\r\n     * @return result bytes32 form of _source string\r\n     */\r\n    function _stringToBytes32(string memory _source)\r\n    internal\r\n    pure\r\n    returns (bytes32 result)\r\n    {\r\n        bytes memory tempEmptyStringTest = bytes(_source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(_source, 32))\r\n        }\r\n    }\r\n}\r\n\r\n/// @title ERC20 Contract implementation for bridging funds between the Stellar and Polygon platform\r\ncontract ChildERC20 is\r\nIChildToken,\r\nNativeMetaTransaction,\r\nProofOfReserve,\r\nERC20\r\n{\r\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\r\n\r\n    constructor(\r\n\r\n    ) ERC20(\"Wrapped TFC\", \"wTFC\") {\r\n        _setupContractId(\"ChildERC20\");\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(DEPOSITOR_ROLE, address(0x2AcA9bf605527067E7DE91aC177a40dfa2893A49));\r\n        _setDomainSeperator(\"Wrapped TFC\");\r\n\r\n\r\n\r\n        _oracle = address(0x0a31078cD57d23bf9e8e8F1BA78356ca2090569E);\r\n        _jobId = \"12b86114fa9e46bab3ca436f88e1a912\";\r\n        _fee = 10000000000000000;\r\n        _linkAddress = address(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\r\n        _stellarUrl = \"https://horizon.stellar.org/accounts/GCONBBL4PK77ZOLBTPOSZVI36HBIGJHYMXG2U2KSDGG4432YR6JAPRNG\";\r\n\r\n        setChainlinkToken(_linkAddress);\r\n        setChainlinkOracle(_oracle);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice called before withdraw\r\n     * @dev Should check if withdraw is enabled\r\n     */\r\n    modifier isWithdrawEnabled() {\r\n        require(_isWithdrawEnabled, \"Withdraw is disabled!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice called before withdrawing link tokens\r\n     * @dev Checks Smart Contract link token balance, compares it to specified amount\r\n     * @param amount amount of tokens to be withdrawn\r\n     */\r\n    modifier sufficientLinkTokenBalance(uint256 amount) {\r\n        require(\r\n            IERC20(_linkAddress).balanceOf(address(this)) >= amount,\r\n            \"Insufficient LINK token balance on contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice called when token is deposited on root chain\r\n     * @dev Should be callable only by ChildChainManager\r\n     * Should handle deposit by minting the required amount for user\r\n     * Make sure minting is done only by this function\r\n     * @param user user address for whom deposit is being done\r\n     * @param amount uint256 amount\r\n     */\r\n    function deposit(address user, uint256 amount)\r\n    external\r\n    override\r\n    only(DEPOSITOR_ROLE)\r\n    {\r\n        _hasSupplyChanged = true;\r\n        _mint(user, amount);\r\n        emit Deposit(user, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice called when user wants to withdraw tokens back to root chain\r\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\r\n     * @param amount amount of tokens to withdraw\r\n     * @param toAddress address where the tokens will get withdrawn to\r\n     * @param memo transaction memo\r\n     */\r\n    function withdraw(\r\n        uint256 amount,\r\n        string calldata toAddress,\r\n        string calldata memo\r\n    ) external override isWithdrawEnabled {\r\n        _hasSupplyChanged = true;\r\n        _burn(_msgSender(), amount);\r\n        emit Withdraw(_msgSender(), amount, toAddress, memo);\r\n    }\r\n\r\n    /**\r\n     * @notice called when admin want to change isWithdrawEnabled\r\n     * @dev Should be callable only by DEFAULT_ADMIN_ROLE\r\n     * @param withdrawEnabled is withdraw enabled\r\n     */\r\n    function setIsWithdrawEnabled(bool withdrawEnabled)\r\n    external\r\n    only(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        _isWithdrawEnabled = withdrawEnabled;\r\n    }\r\n\r\n    /**\r\n     * @notice called when updating parameters for creating Chainlink requests\r\n     * @dev admin can update the link token address, oracle address, job ID, Stellar\r\n     * account URL and fee amount\r\n     * @param link_ link token address\r\n     * @param oracle_ oracle address\r\n     * @param jobId_ job ID\r\n     * @param stellarUrl_ Stellar account URL\r\n     * @param fee_ Chainlink request payment fee\r\n     * @param apiPath_ JSON path of response\r\n     */\r\n    function setChainlinkParameters(\r\n        address link_,\r\n        address oracle_,\r\n        string calldata jobId_,\r\n        string calldata stellarUrl_,\r\n        uint256 fee_,\r\n        string calldata apiPath_\r\n    ) public only(DEFAULT_ADMIN_ROLE) {\r\n        _oracle = oracle_;\r\n        _jobId = jobId_;\r\n        _fee = fee_;\r\n        _linkAddress = link_;\r\n        _stellarUrl = stellarUrl_;\r\n        _apiPath = apiPath_;\r\n        setChainlinkToken(_linkAddress);\r\n        setChainlinkOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice receives the Chainlink response and disables withdraw if there are insufficient amount of tokens\r\n     * @dev receives the Chainlink response, checks if tokens locked on\r\n     * Stellar side is less or equal to the  Polygon side. If not disable withdraw.\r\n     */\r\n    function fulfill(bytes32 _requestId, uint256 _lockedToken) public override {\r\n        ProofOfReserve.fulfill(_requestId, _lockedToken);\r\n        _snapshotLocked = _lockedToken;\r\n        _snapshotSupply = totalSupply();\r\n        _snapshotTimestamp = block.timestamp;\r\n        _isWithdrawEnabled =\r\n        _isWithdrawEnabled &&\r\n        _snapshotLocked >= _snapshotSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice withdraws LINK tokens from the Smart Contract\r\n     * @dev first checks, if SC has specified amount of tokens,\r\n     * then gives the recipient address approval to transfer tokens\r\n     * and finally transfers the tokens\r\n     * @param to_ recipient address\r\n     * @param amount_ amount of LINK tokens to be withdrawn\r\n     */\r\n    function withdrawLinkTokens(address to_, uint256 amount_)\r\n    external\r\n    only(DEFAULT_ADMIN_ROLE)\r\n    sufficientLinkTokenBalance(amount_)\r\n    {\r\n        IERC20(_linkAddress).approve(to_, amount_);\r\n        IERC20(_linkAddress).transfer(to_, amount_);\r\n    }\r\n\r\n    function lastStellarBalanceSnapShot() public view virtual returns (uint256) {\r\n        return _snapshotLocked;\r\n    }\r\n\r\n    function lastWrappedBalanceSnapShot() public view virtual returns (uint256) {\r\n        return _snapshotSupply;\r\n    }\r\n\r\n\r\n    function getNextRoundTimestamp() public view virtual returns (uint256) {\r\n        return _lastRequestTimestamp + 1 hours;\r\n    }\r\n\r\n    function getLastBlockTimestamp() public view virtual returns (uint256) {\r\n        return block.timestamp; \r\n    }\r\n\r\n    function canRunNextCheckRound() public view virtual returns (bool) {\r\n        return _hasSupplyChanged && (block.timestamp >= _lastRequestTimestamp + 1 hours);\r\n    }\r\n\r\n    function withdrawalsEnabled() public view virtual returns (bool) {\r\n        return _isWithdrawEnabled;\r\n    }\r\n\r\n    function setSupplyChanged(bool hasSupplyChanged_) public only(DEFAULT_ADMIN_ROLE) {\r\n        _hasSupplyChanged = hasSupplyChanged_;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_toAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_toMemo\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasSupplyChanged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRequestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRunNextCheckRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_lockedToken\",\"type\":\"uint256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextRoundTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStellarBalanceSnapShot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWrappedBalanceSnapShot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestLockedTokenData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"jobId_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stellarUrl_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"apiPath_\",\"type\":\"string\"}],\"name\":\"setChainlinkParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawEnabled\",\"type\":\"bool\"}],\"name\":\"setIsWithdrawEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hasSupplyChanged_\",\"type\":\"bool\"}],\"name\":\"setSupplyChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawLinkTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChildERC20", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c451bf34275bf5ad7c4153099510a97e8cb8d0a25fbaf9c88f3b8e1a299d174"}