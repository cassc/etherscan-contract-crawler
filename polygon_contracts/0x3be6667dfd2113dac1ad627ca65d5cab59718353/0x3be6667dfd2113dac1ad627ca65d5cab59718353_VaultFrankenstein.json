{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MATIC/VaultFrankenstein.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.10;\\n\\n\\ninterface IERC20Simplified {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\ninterface IERC20MetadataS {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\ncontract ERC20Simplified is Context, IERC20Simplified, IERC20MetadataS {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n}\\n\\n\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n\\ninterface IStrategy {\\n    function WMATIC() external view returns (address);\\n    function router() external view returns (address);\\n    function lpToken() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function farm() external view returns (address);\\n    function pid() external view returns (uint256);\\n    function hasPid() external view returns (bool);\\n    function getTotalCapitalInternal() external view returns (uint256);\\n    function getTotalCapital() external view returns (uint256);\\n    function getAmountLPFromFarm() external view returns (uint256);\\n    function getPendingYel(address) external view returns (uint256);\\n    function claimYel(address) external;\\n    function setRouter(address) external;\\n    function requestWithdraw(address, uint256) external;\\n    function withdrawUSDTFee(address) external;\\n    function emergencyWithdraw(address) external;\\n    function autoCompound() external;\\n    function deposit() external payable returns (uint256);\\n    function depositAsMigrate() external;\\n    function migrate(uint256) external;\\n    function updateTWAP() external;\\n    function token1TWAP() external view returns (uint256);\\n    function token0TWAP() external view returns (uint256);\\n    function token1Price() external view returns (uint256);\\n    function token0Price() external view returns (uint256);\\n}\\n\\ncontract VaultFrankenstein is ERC20Simplified, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    mapping(address => uint256) private requestBlock;\\n    mapping(uint256 => bool) public nameExist;\\n    mapping(uint256 => address) public strategies;\\n    mapping(address => bool) public strategyExist;\\n\\n    uint256 public constant REQUIRED_NUMBER_OF_BLOCKS = 10;\\n    uint256 public NUMBER_OF_BLOCKS_BTW_TX = 2;\\n    uint256 public lastExecutableBlockByOwner;\\n    uint256 public lastExecutableBlockAfterDeposit;\\n    uint256 public depositLimitMIN;\\n    uint256 public defaultStrategyID = 0;\\n    uint256 public depositLimit;\\n    address public governance;\\n\\n    // string messages\\n    string DIFFERENCE_BLOCK_ERROR = \\\"Difference of blocks is less than REQUIRED_NUMBER_OF_BLOCKS\\\";\\n    string NO_STRATEGY_ERROR = \\\"There is no strategy\\\";\\n    string STRATEGY_DOES_NOT_EXIST = \\\"The Name of strategy with this ID does not exist\\\";\\n\\n    uint256[] private names;\\n    \\n    event DepositToVault(uint256 amount);\\n    event RequestYelFromStrategies();\\n    event PartialMigrate(uint256 amount);\\n    event Migrate(uint256 amount);\\n\\n    constructor() ERC20Simplified(\\\"EQ Shares Frankenstein\\\", \\\"EQSF\\\") {\\n        depositLimit = 1000 * 10 ** 18;\\n        depositLimitMIN = 1 * 10 ** 17; // 0.1\\n        governance = 0x4e5b3043FEB9f939448e2F791a66C4EA65A315a8;\\n    }\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    modifier onlyOwnerOrGovernance() {\\n        require(\\n            owner() == _msgSender() || governance == _msgSender(),\\n            \\\"The sender is not the owner or governance\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(governance == _msgSender(), \\\"The sender is not governance\\\");\\n        _;\\n    }\\n\\n    modifier whenNotBlocked() {\\n        uint256 currentBlock = block.number;\\n        if(requestBlock[msg.sender] == 0) {\\n            _;\\n            requestBlock[msg.sender] = currentBlock;\\n        } else {\\n            if(_isNotBlockedByTime()) {\\n                _;\\n                requestBlock[msg.sender] = currentBlock;\\n            } else {\\n                revert(DIFFERENCE_BLOCK_ERROR);\\n            }\\n        }\\n    }\\n\\n    modifier notBlocked() {\\n        _checkBlockedByTime();\\n        _executableAfterUpdate();\\n        _;\\n    }\\n\\n    modifier executableAfterUpdate() {\\n        _executableAfterUpdate();\\n        _;\\n    }\\n\\n    function deposit() public payable notBlocked {\\n        require(\\n            block.number - lastExecutableBlockAfterDeposit > NUMBER_OF_BLOCKS_BTW_TX,\\n            \\\"NUMBER_OF_BLOCKS_BTW_TX blocks is required between deposit\\\"\\n        );\\n        require(msg.value >= depositLimitMIN, \\\"Funds should be >= than depositLimitMIN\\\");\\n        autoCompound();\\n        _checkDeposit(getTotalCapital(), msg.value);\\n        require(names.length != 0, NO_STRATEGY_ERROR);\\n        uint256 shares;\\n        uint256 totalCapitalInternal = getTotalCapitalInternal();\\n        uint256 depositorCapitalValue = IStrategy(currentStrategy()).deposit{value: msg.value}();\\n        if (totalCapitalInternal == 0 || totalSupply() == 0) {\\n            shares = depositorCapitalValue;\\n        } else {\\n            uint256 BSCperShare = totalCapitalInternal * (10**12) / totalSupply();\\n            shares = depositorCapitalValue * (10**12) / BSCperShare;\\n        }\\n        _mint(msg.sender, shares);\\n        lastExecutableBlockAfterDeposit = block.number;\\n        emit DepositToVault(depositorCapitalValue);\\n    }\\n\\n    function requestWithdraw(uint256 _shares) public whenNotBlocked {\\n        require(names.length != 0, NO_STRATEGY_ERROR);\\n        require(totalSupply() != 0, \\\"Total share value is zero\\\");\\n        require(_shares > 0, \\\"Amount of shares can not be a zero value\\\");\\n        autoCompound();\\n        uint256 percent = _shares * 100 * 10**12 / totalSupply();\\n        require(_shares <= totalSupply(), \\\"Percent can not be more than 100\\\");\\n        _burn(msg.sender, _shares);\\n        _requestYelFromStrategies(msg.sender, percent);\\n        emit RequestYelFromStrategies();\\n    }\\n\\n    function claimYel() public notBlocked {\\n        autoCompound();\\n        uint256 _YELamount = 0;\\n        uint256 _YELamountTotal = 0;\\n        for (uint256 i; i < names.length; i++) {\\n            _YELamount = IStrategy(strategies[names[i]]).getPendingYel(msg.sender);\\n            if(_YELamount > 0) {\\n                IStrategy(strategies[names[i]]).claimYel(msg.sender);\\n                _YELamountTotal += _YELamount;\\n            }\\n        }\\n        require(_YELamountTotal > 0, \\\"You don't have any pending YEL\\\");\\n    }\\n\\n    function setDefaultStrategy(uint256 _nameID) public onlyOwnerOrGovernance {\\n        _checkParameters(_nameID);\\n        defaultStrategyID = _nameID;\\n    }\\n\\n    function getPendingYel(address _address) public view returns (uint256 _YELamount) {\\n        for (uint256 i; i < names.length; i++) {\\n            _YELamount += IStrategy(strategies[names[i]]).getPendingYel(_address);\\n        }\\n    }\\n\\n    function getRemainingBlocks(address _address) public view returns (uint256) {\\n        // just double check if the user uses the contract at the first time\\n        if (requestBlock[_address] == 0) {\\n            return 0;\\n        }\\n        uint256 amountFromLast = block.number - requestBlock[_address];\\n        if (amountFromLast >= REQUIRED_NUMBER_OF_BLOCKS)\\n            return 0;\\n        else\\n            return REQUIRED_NUMBER_OF_BLOCKS - amountFromLast;\\n    }\\n\\n    function nameIDs() public view returns (uint256[] memory) {\\n        return names;\\n    }\\n\\n    function nameIDLength() public view returns(uint256) {\\n        return names.length;\\n    }\\n\\n    function currentStrategy() public view returns (address) {\\n        require(names.length > 0, \\\"This vault does not have any strategies\\\");\\n        return strategies[defaultStrategyID];\\n    }\\n\\n    function strategyInfo(uint256 _nameID) public view returns (\\n        address _router,\\n        address _lpToken,\\n        address _token1,\\n        address _token0,\\n        address _farm,\\n        string memory _pid,\\n        uint256 _totalLP,\\n        uint256 _totalCapital,\\n        uint256 _totalCapitalInternal) {\\n        require(nameExist[_nameID], STRATEGY_DOES_NOT_EXIST);\\n        _router = IStrategy(strategies[_nameID]).router();\\n        _lpToken = IStrategy(strategies[_nameID]).lpToken();\\n        _token1 = IStrategy(strategies[_nameID]).token1();\\n        _token0 = IStrategy(strategies[_nameID]).token0();\\n        _farm = IStrategy(strategies[_nameID]).farm();\\n        if(IStrategy(strategies[_nameID]).hasPid()) {\\n            _pid = Strings.toString(IStrategy(strategies[_nameID]).pid());\\n        } else {\\n            _pid = \\\"No pid\\\";\\n        }\\n        _totalCapital = IStrategy(strategies[_nameID]).getTotalCapital();\\n        _totalCapitalInternal = IStrategy(strategies[_nameID]).getTotalCapitalInternal();\\n        _totalLP = IStrategy(strategies[_nameID]).getAmountLPFromFarm();\\n    }\\n\\n    function strategyInfo2(uint256 _nameID) public view returns (\\n        uint256 _token1TWAP,\\n        uint256 _token0TWAP,\\n        uint256 _token1Price,\\n        uint256 _token0Price) {\\n        require(nameExist[_nameID], STRATEGY_DOES_NOT_EXIST);\\n        address _strategy = strategies[_nameID];\\n        _token1TWAP = IStrategy(_strategy).token1TWAP();\\n        _token0TWAP = IStrategy(_strategy).token0TWAP();\\n        _token1Price = IStrategy(_strategy).token1Price();\\n        _token0Price = IStrategy(_strategy).token0Price();\\n    }\\n\\n    function autoCompound() public executableAfterUpdate {\\n        require(names.length != 0, NO_STRATEGY_ERROR);\\n        for (uint256 i = 0; i < names.length; i++) {\\n            IStrategy(strategies[names[i]]).autoCompound();\\n        }\\n    }\\n\\n\\n    function getTotalCapital() public view returns (uint256 totalCapital) {\\n        require(names.length != 0, NO_STRATEGY_ERROR);\\n        for (uint256 i = 0; i < names.length; i++) {\\n            totalCapital += IStrategy(strategies[names[i]]).getTotalCapital();\\n        }\\n    }\\n\\n    function getTotalCapitalInternal() public view returns (uint256 totalCapital) {\\n        require(names.length != 0, NO_STRATEGY_ERROR);\\n        for (uint256 i = 0; i < names.length; i++) {\\n            totalCapital += IStrategy(strategies[names[i]]).getTotalCapitalInternal();\\n        }\\n    }\\n\\n    function withdrawFee() onlyOwner public {\\n        for(uint256 i = 0; i < names.length; i++) {\\n            IStrategy(strategies[names[i]]).withdrawUSDTFee(msg.sender);\\n        }\\n    }\\n\\n    function setNumberOfBlocksBtwTX(uint256 _amount) onlyOwner public {\\n        NUMBER_OF_BLOCKS_BTW_TX = _amount;\\n    }\\n\\n    function updateTWAP() onlyOwner public {\\n        for(uint256 i = 0; i < names.length; i++) {\\n            IStrategy(strategies[names[i]]).updateTWAP();\\n        }\\n        lastExecutableBlockByOwner = block.number;\\n    }\\n\\n    function emergencyWithdraw() public onlyGovernance {\\n        for (uint256 i; i < names.length; i++) {\\n            IStrategy(strategies[names[i]]).emergencyWithdraw(msg.sender);\\n        }\\n    }\\n\\n    function setGovernance(address _governance) external onlyOwner {\\n        require(\\n            _governance != address(0),\\n            \\\"Government can not be a zero address\\\"\\n        );\\n        governance = _governance;\\n    }\\n\\n    function setDepositLimit(uint256 _amount) external onlyOwnerOrGovernance {\\n        depositLimit = _amount;\\n    }\\n\\n    function addStrategy(address _newStrategy, uint256 _nameID) public onlyOwnerOrGovernance {\\n        require(_newStrategy != address(0), \\\"The strategy can not be a zero address\\\");\\n        require(strategies[_nameID] == address(0), \\\"This strategy is not empty\\\");\\n        require(!strategyExist[_newStrategy], \\\"This strategy already exists\\\");\\n        if (!nameExist[_nameID]) {\\n            names.push(_nameID);\\n            nameExist[_nameID] = true;\\n            strategyExist[_newStrategy] = true;\\n        }\\n        strategies[_nameID] = _newStrategy;\\n        if(currentStrategy() == address(0))\\n            defaultStrategyID = _nameID;\\n    }\\n\\n    function removeStrategy(uint256 _nameID) public onlyOwnerOrGovernance {\\n        _checkParameters(_nameID);\\n        require(\\n            strategies[_nameID] != currentStrategy(),\\n            \\\"Can not remove the current strategy\\\"\\n        );\\n        require(IStrategy(strategies[_nameID]).getTotalCapitalInternal() == 0,\\n            \\\"Total capital internal is not zero\\\"\\n        );\\n        require(IStrategy(strategies[_nameID]).getTotalCapital() == 0,\\n            \\\"Total capital is not zero\\\"\\n        );\\n\\n        // continue removing strategy\\n        nameExist[_nameID] = false;\\n        strategyExist[strategies[_nameID]] = false;\\n        strategies[_nameID] = address(0);\\n        if(names.length != 1) {\\n            for(uint256 i = 0; i < names.length; i++){\\n                if(names[i] == _nameID) {\\n                    if(i != names.length-1) {\\n                        names[i] = names[names.length-1];\\n                    }\\n                    names.pop();\\n                }\\n            }\\n        } else {\\n            names.pop();\\n        }\\n    }\\n\\n    function setRouterForStrategy(address _newRouter, uint256 _nameID) public onlyOwnerOrGovernance {\\n        _checkParameters(_nameID);\\n        require(_newRouter != address(0), \\\"Router can not be a zero address\\\");\\n        IStrategy(strategies[_nameID]).setRouter(_newRouter);\\n    }\\n\\n    function migrate(\\n        uint256 _nameIdFrom,\\n        uint256 _amountInPercent,\\n        uint256 _nameIdTo) public onlyOwnerOrGovernance {\\n        _migrate(_nameIdFrom, _amountInPercent, _nameIdTo);\\n    }\\n\\n    function withdrawSuddenTokens(address _token) public onlyOwner {\\n        IERC20(_token).transfer(payable(msg.sender), IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function _executableAfterUpdate() internal view {\\n        require(\\n            block.number - lastExecutableBlockByOwner > NUMBER_OF_BLOCKS_BTW_TX,\\n            \\\"NUMBER_OF_BLOCKS_BTW_TX blocks is required\\\"\\n        );\\n    }\\n\\n    function _checkParameters(uint256 _nameID) internal view {\\n        require(names.length > 1, \\\"Not enough strategies\\\");\\n        require(nameExist[_nameID], STRATEGY_DOES_NOT_EXIST);\\n    }\\n\\n    function _isNotBlockedByTime() internal view returns (bool) {\\n        return block.number - requestBlock[msg.sender] >= REQUIRED_NUMBER_OF_BLOCKS;\\n    }\\n\\n    function _checkBlockedByTime() internal view {\\n        require(_isNotBlockedByTime(), DIFFERENCE_BLOCK_ERROR);\\n    }\\n\\n    function _migrate(uint256 _nameIdFrom, uint256 _amountInPercent, uint256 _nameIdTo) internal {\\n        // TODO: return error if totalCapital on strategy 0 \\n        _checkParameters(_nameIdFrom);\\n        require(nameExist[_nameIdTo], \\\"The _nameIdTo value does not exist\\\");\\n        require(\\n            _amountInPercent > 0 && _amountInPercent <= 100,\\n            \\\"The _amountInPercent value sould be more than 0 and less than 100\\\"\\n        );\\n        autoCompound();\\n        address WMATIC = IStrategy(strategies[_nameIdFrom]).WMATIC();\\n        // take wrapped Tokens from old strategy\\n        IStrategy(strategies[_nameIdFrom]).migrate(_amountInPercent);\\n        uint256 _balance = IERC20(WMATIC).balanceOf(address(this));\\n        if(_balance > 0){\\n            // put wrapped Tokens to new strategy\\n            IERC20(WMATIC).safeTransfer(strategies[_nameIdTo], _balance);\\n            IStrategy(strategies[_nameIdTo]).depositAsMigrate();\\n        }\\n        emit PartialMigrate(_amountInPercent);\\n    }\\n\\n    function _requestYelFromStrategies(address _receiver, uint256 _percent) internal {\\n        for (uint256 i; i < names.length; i++) {\\n            IStrategy(strategies[names[i]]).requestWithdraw(_receiver, _percent);\\n        }\\n    }\\n\\n    function _checkDeposit(uint256 _totalCapital, uint256 _depositValue) internal view {\\n        require(_totalCapital + _depositValue <= depositLimit, \\\"Deposit is limited by contract\\\");\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PartialMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RequestYelFromStrategies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_OF_BLOCKS_BTW_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRED_NUMBER_OF_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultStrategyID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPendingYel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_YELamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRemainingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCapitalInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCapital\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecutableBlockAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecutableBlockByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameIdFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nameIdTo\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameIDLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"setDefaultStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNumberOfBlocksBtwTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"setRouterForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"strategyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCapital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCapitalInternal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameID\",\"type\":\"uint256\"}],\"name\":\"strategyInfo2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_token1TWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0TWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token0Price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTWAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawSuddenTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VaultFrankenstein", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}