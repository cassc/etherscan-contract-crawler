{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IAToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IAToken is IERC20 {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPool.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport { DataTypes } from \\\"./lib/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n  \\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IProtocolDataProvider.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { ILendingPoolAddressesProvider } from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IProtocolDataProvider {\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n  function getAllATokens() external view returns (TokenData[] memory);\\n  function getReserveConfigurationData(address asset) external view returns (uint256 decimals, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus, uint256 reserveFactor, bool usageAsCollateralEnabled, bool borrowingEnabled, bool stableBorrowRateEnabled, bool isActive, bool isFrozen);\\n  function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\n  function getUserReserveData(address asset, address user) external view returns (uint256 currentATokenBalance, uint256 currentStableDebt, uint256 currentVariableDebt, uint256 principalStableDebt, uint256 scaledVariableDebt, uint256 stableBorrowRate, uint256 liquidityRate, uint40 stableRateLastUpdated, bool usageAsCollateralEnabled);\\n  function getReserveTokensAddresses(address asset) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/IVariableDebtToken.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IERC20 {}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/aave-v2/lib/DataTypes.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2021 Set Labs Inc.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n  http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n  SPDX-License-Identifier: Apache-2.0\\n*/\\npragma solidity 0.8.21;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveLeverageModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IAaveLeverageModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid aToken (collateral) address is provided.\\n    error AaveLeverageModule__ATokenInvalid(address aToken);\\n    /// @notice Emitted when the borrow balance (notionalSendQuantity) is zero.\\n    error AaveLeverageModule__BorrowBalanceZero();\\n    /// @notice Emitted when borrowing is disabled for a given asset.\\n    error AaveLeverageModule__BorrowDisabled(address asset);\\n    /// @notice Emitted when borrowing is already enabled for a given asset.\\n    error AaveLeverageModule__BorrowIsEnabled();\\n    /// @notice Emitted when the collateral asset and borrow asset are the same.\\n    error AaveLeverageModule__CollateralAndBorrowMustDiffer(address collateralAsset, address borrowAsset);\\n    /// @notice Emitted when the collateral is already enabled.\\n    error AaveLeverageModule__CollateralIsEnabled();\\n    /// @notice Emitted when usage of a given collateral is disabled.\\n    error AaveLeverageModule__CollateralUsageDisabled(address asset);\\n    /// @notice Emitted when a component's debt value is not negative.\\n    error AaveLeverageModule__ComponentDebtNotNegative(int256 component);\\n    /// @notice Emitted when the drift is greater than or equal to the max trade drift.\\n    error AaveLeverageModule__DexDataMismatch(uint256 drift, uint256 maxDrift);\\n    /// @notice Emitted when the slippage exceeds allowed values.\\n    error AaveLeverageModule__ExcessiveSlippage(uint256 receiveQuantity, uint256 minReceiveQuantity);\\n    /// @notice Emitted when the issuance module is uninitialized on the SetToken.\\n    error AaveLeverageModule__IssuanceUninitialized(address module);\\n    /// @notice Emitted when protocol borrowing is disabled.\\n    error AaveLeverageModule__ProtocolBorrowingDisabled();\\n    /// @notice Emitted when the reserve is frozen.\\n    error AaveLeverageModule__ReserveFrozen();\\n    /// @notice Emitted when the reserve is inactive.\\n    error AaveLeverageModule__ReserveInactive();\\n    /// @notice Emitted when the provided SetToken is forbidden.\\n    error AaveLeverageModule__SetTokenForbidden(address setToken);\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error AaveLeverageModule__SetTokenInvalid();\\n    /// @notice Emitted when a token mapping already exists.\\n    error AaveLeverageModule__TokenMappingExists();\\n    /// @notice Emitted when variable debt remains.\\n    error AaveLeverageModule__VariableDebtRemains(uint256 remaining);\\n    /// @notice Emitted when an invalid variable debt token is provided.\\n    error AaveLeverageModule__VariableDebtTokenInvalid(address variableDebtToken);\\n    /// @notice Emitted when a provided quantity is zero.\\n    error AaveLeverageModule__ZeroQuantity();\\n\\n    /* ============ Functions ============ */\\n\\n    function sync(ISetToken _setToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IController {\\n    \\n   /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\\n    /// @notice Emitted when the caller is not a factory.\\n    error Controller__CallerNotFactory(address caller);\\n    /// @notice Emitted when a factory already exists on the Controller.\\n    error Controller__FactoryExists();\\n    /// @notice Emitted when a factory does not exist on the Controller.\\n    error Controller__FactoryInvalid();\\n    /// @notice Emitted when a fee type already exists on the Controller.\\n    error Controller__FeeTypeExists();\\n    /// @notice Emitted when a fee type does not exist on the Controller.\\n    error Controller__FeeTypeInvalid();\\n    /// @notice Emitted when the Controller is already initialized.\\n    error Controller__IsInitialized();\\n    /// @notice Emitted when a module is already enabled on the Controller.\\n    error Controller__ModuleExists();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error Controller__ModuleInvalid();\\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\\n    error Controller__ResourceExists();\\n    /// @notice Emitted when a resource is not enabled on the Controller.\\n    error Controller__ResourceInvalid();\\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \\n    error Controller__SetExists();\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error Controller__SetInvalid();\\n    /// @notice Emitted when the Controller is not initialized.\\n    error Controller__Uninitialized();\\n    /// @notice Emitted when a zero address is provided.\\n    error Controller__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDebtIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * @title IDebtIssuanceModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Debt Issuance module interface.\\n */\\ninterface IDebtIssuanceModule {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the fee recipient remains unchanged.\\n    error DebtIssuanceModule__FeeRecipientUnchanged(address emitter);\\n    /// @notice Emitted when the specified fee exceeds the maximum allowable limit.\\n    error DebtIssuanceModule__FeeTooHigh(address emitter, uint256 maxFee);\\n    /// @notice Emitted when the fee remains unchanged.\\n    error DebtIssuanceModule__FeeUnchanged(address emitter);\\n    /// @notice Emitted when a module hook already exists.\\n    error DebtIssuanceModule__ModuleHookExists(address emitter);\\n    /// @notice Emitted when an invalid module hook is provided.\\n    error DebtIssuanceModule__ModuleHookInvalid(address emitter, address module);\\n    /// @notice Emitted when module hooks exist for a given number of modules.\\n    error DebtIssuanceModule__ModuleHooksExist(address emitter, uint256 numModules);\\n    /// @notice Emitted when a zero address is provided.\\n    error DebtIssuanceModule__ZeroAddress(address emitter);\\n    /// @notice Emitted when the provided quantity is zero.\\n    error DebtIssuanceModule__ZeroQuantity(address emitter);\\n\\n    \\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by another module to register itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be updated.\\n     */\\n    function registerToIssuanceModule(ISetToken _setToken) external;\\n\\n    /**\\n     * Called by another module to unregister itself on debt issuance module. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function unregisterFromIssuanceModule(ISetToken _setToken) external;\\n\\n    function getRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function getRequiredComponentRedemptionUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\\n    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IExchangeAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IExchangeAdapter {\\n    function getSpender() external view returns(address);\\n    function getTradeCalldata(\\n        address _fromToken,\\n        address _toToken,\\n        address _toAddress,\\n        uint256 _fromQuantity,\\n        uint256 _minToQuantity,\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory);\\n    function isDynamicDataAdapter() external view returns(bool);\\n    function getTradeMetadata(\\n        bytes memory _data\\n    )\\n        external\\n        view\\n        returns (bytes4 signature, address fromToken, address toToken, uint256 inputAmount, uint256 minAmountOut);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IIntegrationRegistry.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IIntegrationRegistry {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an adapter already exists on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationExists();\\n    /// @notice Emitted when an adapter does not exist on the IntegrationRegistry.\\n    error IntegrationRegistry__IntegrationInvalid();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error IntegrationRegistry__ModuleInvalid();\\n    /// @notice Emitted when the modules and adapters length mismatch.\\n    error IntegrationRegistry__ModulesAdaptersLengthMismatch(uint256 numModules, uint256 numAdapters);\\n    /// @notice Emitted when the modules length is zero.\\n    error IntegrationRegistry__ModulesEmpty();\\n    /// @notice Emitted when the modules and names length mismatch.\\n    error IntegrationRegistry__ModulesNamesLengthMismatch(uint256 numModules, uint256 numNames);\\n    /// @notice Emitted when a zero address is provided.\\n    error IntegrationRegistry__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n    \\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IModule\\n * @author Set Protocol\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    \\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an invalid adapter is provided for a specific integration hash.\\n    error Module__AdapterInvalid(address emitter, bytes32 integrationHash);\\n    /// @notice Emitted when the caller is not an initialized module.\\n    error Module__CallerNotInitializedModule(address emitter, address caller);\\n    /// @notice Emitted when the caller is not the set manager.\\n    error Module__CallerNotManager(address emitter, address caller, address setToken);\\n    /// @notice Emitted when a the calling module (msg.sender) is not enabled on the Controller.\\n    error Module__ModuleInvalid(address emitter, address moduleAndCaller);\\n    /// @notice Emitted when an invalid SetToken address is provided.\\n    error Module__SetTokenInvalid(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is both invalid and uninitialized.\\n    error Module__SetTokenInvalidAndUninitialized(address emitter, address setToken);\\n    /// @notice Emitted when a SetToken is not a pending module.\\n    error Module__SetTokenNotPending(address emitter, address setToken);\\n\\n    /* ============ Functions ============ */\\n\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IModuleIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\n/**\\n * CHANGELOG\\n *      - Added a module level issue hook that can be used to set state ahead of component level\\n *        issue hooks\\n */\\ninterface IModuleIssuanceHook {\\n\\n    function moduleIssueHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n    function moduleRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity) external;\\n    \\n    function componentIssueHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n\\n    function componentRedeemHook(\\n        ISetToken _setToken,\\n        uint256 _setTokenQuantity,\\n        IERC20 _component,\\n        bool _isEquity\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title IPriceOracle\\n * @author Set Protocol\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the number of assets ones, asset twos, and oracles mismatch. \\n    error PriceOracle__ArrayLengthsMismatch(uint256 assetsOnesLength, uint256 assetsTwosLength, uint256 oraclesLength);\\n    /// @notice Emitted when the caller is the Controller or the caller is not a set, \\n    ///         module, resource, or factory enabled on the Controller.\\n    error PriceOracle__CallerNotSystemContract(address caller);\\n    /// @notice Emitted when a price is not found direct or inverse, from master, and from adapters.\\n    error PriceOracle__PriceNotFound();\\n    /// @notice Emitted when an asset pair already exists on the PriceOracle.\\n    error PriceOracle__PairExists();\\n    /// @notice Emitted when an asset pair does not exist on the PriceOracle.\\n    error PriceOracle__PairInvalid();\\n    /// @notice Emitted when an adapter already exists on the PriceOracle.\\n    error PriceOracle__AdapterExists();\\n    /// @notice Emitted when an adapter does not exist on the PriceOracle.\\n    error PriceOracle__AdapterInvalid();\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n   /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the caller is not the SetToken locker.\\n    error SetToken__CallerNotLocker(address caller, address locker);\\n    /// @notice Emitted when the caller is not the SetToken manager.\\n    error SetToken__CallerNotManager(address caller, address manager);\\n    /// @notice Emitted when the external position module already exists on the SetToken.\\n    error SetToken__ExternalPositionModuleExists();\\n    /// @notice Emitted when the component already exists on the SetToken.\\n    error SetToken__IsComponent();\\n    /// @notice Emitted when the SetToken is already locked.\\n    error SetToken__IsLocked();\\n    /// @notice Emitted when the SetToken is already unlocked.\\n    error SetToken__IsUnlocked();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error SetToken__ModuleInvalid(address module);\\n    /// @notice Emitted when the actual state of a module is not as expected.\\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\\n    /// @notice Emitted when the calculated multiplier is equal to zero.\\n    error SetToken__ZeroMultiplier();\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and \\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex            \\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n    \\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n    \\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n    \\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISetValuer.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ExplicitERC20.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n * @author Set Protocol\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary ExplicitERC20 {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a token transfer doesn't match the expected balance.\\n    error ExplicitERC20__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            uint256 transferQuantity = existingBalance + _quantity;\\n            if (newBalance != transferQuantity) revert ExplicitERC20__PostTransferBalanceInvalid(address(this), newBalance, transferQuantity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n * - 4/14/23: Removed safePower function\\n * - 4/18/23: Upgrade OZ\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PreciseUnitMath {\\n    using SafeCast for int256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when an attempt is made to divide by zero.\\n    error PreciseUnitMath__DivisionByZero();\\n    /// @notice Emitted when the inputs provided are invalid for the operation.\\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\\n    /// @notice Emitted when there's an overflow during the inversion operation.\\n    error PreciseUnitMath__InversionOverflow(int256 input);\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISE_UNIT) / b;\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * PRECISE_UNIT_INT) / b;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n\\n        a = a * PRECISE_UNIT_INT;\\n        int256 c = a / b;\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\\n\\n        int256 result = a / b;\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * b, PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a * PRECISE_UNIT_INT, b);\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b + range && a >= b - range;\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint256) {\\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\\n        return -a;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/integration/lib/AaveV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title AaveV2\\n * @author Set Protocol\\n * \\n * Collection of helper functions for interacting with AaveV2 integrations.\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary AaveV2 {\\n    /* ============ External ============ */\\n    \\n    /**\\n     * Get deposit calldata from SetToken\\n     *\\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     * @param _onBehalfOf           The address that will receive the aTokens, same as msg.sender if the user\\n     *                              wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *                              is a different wallet\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Deposit calldata\\n     */\\n    function getDepositCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _onBehalfOf,\\n        uint16 _referralCode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"deposit(address,uint256,address,uint16)\\\", \\n            _asset, \\n            _amountNotional, \\n            _onBehalfOf,\\n            _referralCode\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke deposit on LendingPool from SetToken\\n     * \\n     * Deposits an `_amountNotional` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. SetToken deposits 100 USDC and gets in return 100 aUSDC\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to deposit\\n     * @param _amountNotional       The amount to be deposited\\n     */\\n    function invokeDeposit(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional        \\n    )\\n        external\\n    {\\n        ( , , bytes memory depositCalldata) = getDepositCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional, \\n            address(_setToken), \\n            0\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, depositCalldata);\\n    }\\n    \\n    /**\\n     * Get withdraw calldata from SetToken\\n     * \\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to withdraw\\n     * @param _amountNotional       The underlying amount to be withdrawn\\n     *                              Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     * @param _receiver             Address that will receive the underlying, same as msg.sender if the user\\n     *                              wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *                              different wallet\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Withdraw calldata\\n     */\\n    function getWithdrawCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        address _receiver        \\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _receiver\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke withdraw on LendingPool from SetToken\\n     * \\n     * Withdraws an `_amountNotional` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * - E.g. SetToken has 100 aUSDC, and receives 100 USDC, burning the 100 aUSDC\\n     *     \\n     * @param _setToken         Address of the SetToken\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset to withdraw\\n     * @param _amountNotional   The underlying amount to be withdrawn\\n     *                          Note: Passing type(uint256).max will withdraw the entire aToken balance\\n     *\\n     * @return uint256          The final amount withdrawn\\n     */\\n    function invokeWithdraw(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional        \\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory withdrawCalldata) = getWithdrawCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional, \\n            address(_setToken)\\n        );\\n        \\n        return abi.decode(_setToken.invoke(address(_lendingPool), 0, withdrawCalldata), (uint256));\\n    }\\n    \\n    /**\\n     * Get borrow calldata from SetToken\\n     *\\n     * Allows users to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that \\n     * the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     *\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param _referralCode         Code used to register the integrator originating the operation, for potential rewards.\\n     *                              0 if the action is executed directly by the user, without any middle-man\\n     * @param _onBehalfOf           Address of the user who will receive the debt. Should be the address of the borrower itself\\n     *                              calling the function if he wants to borrow against his own collateral, or the address of the\\n     *                              credit delegator if he has been given credit delegation allowance\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Borrow calldata\\n     */\\n    function getBorrowCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"borrow(address,uint256,uint256,uint16,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _interestRateMode,\\n            _referralCode,\\n            _onBehalfOf\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Invoke borrow on LendingPool from SetToken\\n     *\\n     * Allows SetToken to borrow a specific `_amountNotional` of the reserve underlying `_asset`, provided that \\n     * the SetToken already deposited enough collateral, or it was given enough allowance by a credit delegator\\n     * on the corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset to borrow\\n     * @param _amountNotional       The amount to be borrowed\\n     * @param _interestRateMode     The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     */\\n    function invokeBorrow(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory borrowCalldata) = getBorrowCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            0, \\n            address(_setToken)\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, borrowCalldata);\\n    }\\n\\n    /**\\n     * Get repay calldata from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param _onBehalfOf           Address of the user who will get his debt reduced/removed. Should be the address of the\\n     *                              user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     *                              other borrower whose debt should be removed\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                Repay calldata\\n     */\\n    function getRepayCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset, \\n        uint256 _amountNotional,\\n        uint256 _interestRateMode,        \\n        address _onBehalfOf\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"repay(address,uint256,uint256,address)\\\", \\n            _asset, \\n            _amountNotional, \\n            _interestRateMode,            \\n            _onBehalfOf\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke repay on LendingPool from SetToken\\n     *\\n     * Repays a borrowed `_amountNotional` on a specific `_asset` reserve, burning the equivalent debt tokens owned\\n     * - E.g. SetToken repays 100 USDC, burning 100 variable/stable debt tokens\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the borrowed underlying asset previously borrowed\\n     * @param _amountNotional       The amount to repay\\n     *                              Note: Passing type(uint256).max will repay the whole debt for `_asset` on the specific `_interestRateMode`\\n     * @param _interestRateMode     The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     *\\n     * @return uint256              The final amount repaid\\n     */\\n    function invokeRepay(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _amountNotional,\\n        uint256 _interestRateMode\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        ( , , bytes memory repayCalldata) = getRepayCalldata(\\n            _lendingPool,\\n            _asset,\\n            _amountNotional,\\n            _interestRateMode,\\n            address(_setToken)\\n        );\\n        \\n        return abi.decode(_setToken.invoke(address(_lendingPool), 0, repayCalldata), (uint256));\\n    }\\n\\n    /**\\n     * Get setUserUseReserveAsCollateral calldata from SetToken\\n     * \\n     * Allows borrower to enable/disable a specific deposited asset as collateral\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Call value\\n     * @return bytes                SetUserUseReserveAsCollateral calldata\\n     */\\n    function getSetUserUseReserveAsCollateralCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"setUserUseReserveAsCollateral(address,bool)\\\", \\n            _asset,\\n            _useAsCollateral\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke an asset to be used as collateral on Aave from SetToken\\n     *\\n     * Allows SetToken to enable/disable a specific deposited asset as collateral\\n     * @param _setToken             Address of the SetToken\\n     * @param _lendingPool          Address of the LendingPool contract\\n     * @param _asset                The address of the underlying asset deposited\\n     * @param _useAsCollateral      true` if the user wants to use the deposit as collateral, `false` otherwise\\n     */\\n    function invokeSetUserUseReserveAsCollateral(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        bool _useAsCollateral\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSetUserUseReserveAsCollateralCalldata(\\n            _lendingPool,\\n            _asset,\\n            _useAsCollateral\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, callData);\\n    }\\n    \\n    /**\\n     * Get swapBorrowRate calldata from SetToken\\n     *\\n     * Allows a borrower to toggle his debt between stable and variable mode\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     *\\n     * @return address          Target contract address\\n     * @return uint256          Call value\\n     * @return bytes            SwapBorrowRate calldata\\n     */\\n    function getSwapBorrowRateModeCalldata(\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        public\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\n            \\\"swapBorrowRateMode(address,uint256)\\\", \\n            _asset,\\n            _rateMode\\n        );\\n        \\n        return (address(_lendingPool), 0, callData);\\n    }\\n\\n    /**\\n     * Invoke to swap borrow rate of SetToken\\n     * \\n     * Allows SetToken to toggle it's debt between stable and variable mode\\n     * @param _setToken         Address of the SetToken\\n     * @param _lendingPool      Address of the LendingPool contract\\n     * @param _asset            The address of the underlying asset borrowed\\n     * @param _rateMode         The rate mode that the user wants to swap to\\n     */\\n    function invokeSwapBorrowRateMode(\\n        ISetToken _setToken,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        uint256 _rateMode\\n    )\\n        external\\n    {\\n        ( , , bytes memory callData) = getSwapBorrowRateModeCalldata(\\n            _lendingPool,\\n            _asset,\\n            _rateMode\\n        );\\n        \\n        _setToken.invoke(address(_lendingPool), 0, callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/Invoke.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\n\\n/**\\n * @title Invoke\\n * @author Set Protocol\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n *\\n * CHANGELOG\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Invoke {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the balance after a transfer doesn't match the expected balance.\\n    error Invoke__PostTransferBalanceInvalid(address emitter, uint256 newBalance, uint256 expectedBalance);\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n            _setToken.invoke(_token, 0, callData);\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            uint256 expectedBalance = existingBalance - _quantity;\\n            if (newBalance != expectedBalance) {\\n                revert Invoke__PostTransferBalanceInvalid(address(this), newBalance, expectedBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/ModuleBaseV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { PositionV2 } from \\\"./PositionV2.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"./ResourceIdentifier.sol\\\";\\n\\n/**\\n * @title ModuleBaseV2\\n * @author Set Protocol\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG\\n * - Uses PositionV2 linkable library.\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nabstract contract ModuleBaseV2 is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using PositionV2 for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of Controller contract\\n     */\\n    constructor(IController _controller) {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        if (adapter == address(0)) revert Module__AdapterInvalid(address(this), _integrationHash);\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller \\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       if (!isSetManager(_setToken, msg.sender)) revert Module__CallerNotManager(address(this), msg.sender, address(_setToken));\\n       if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n       if (!isSetManager(_setToken, _caller)) revert Module__CallerNotManager(address(this), _caller, address(_setToken));\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        if (!isSetValidAndInitialized(_setToken)) revert Module__SetTokenInvalidAndUninitialized(address(this), address(_setToken));\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        if (_setToken.moduleStates(msg.sender) != ISetToken.ModuleState.INITIALIZED)\\n            revert Module__CallerNotInitializedModule(address(this), msg.sender);\\n\\n        if (!controller.isModule(msg.sender))\\n            revert Module__ModuleInvalid(address(this), msg.sender);\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        if (!controller.isSet(address(_setToken))) revert Module__SetTokenInvalid(address(this), address(_setToken));\\n        if (!isSetPendingInitialization(_setToken)) revert Module__SetTokenNotPending(address(this), address(_setToken));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/lib/Position.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title Position\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG\\n * - Updated editExternalPosition to work when no external position is associated with module\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error Position__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error Position__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n    \\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position. \\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert Position__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert Position__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - _prePositionUnit.preciseMul(_setTokenSupply);\\n        return (_postTotalNotional - airdroppedAmount).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/PositionV2.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ISetToken } from \\\"../../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title PositionV2\\n * @author Set Protocol\\n *\\n * Collection of helper functions for handling and updating SetToken Positions.\\n *\\n * CHANGELOG\\n * - `Position` library has all internal functions which are inlined to the module contract during compilation.\\n * Inlining functions increases bytecode size of the module contract. This library contains the same functions\\n * as `Position` library but all the functions have public/external access modifier. Thus, making this version\\n * linkable which helps in reducing bytecode size of the module contract.\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\nlibrary PositionV2 {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when unexpected data is passed where zero data is expected.\\n    error PositionV2__DataNotNull(address emitter, bytes passed);\\n    /// @notice Emitted when the first module in positions isn't the expected module, \\n    ///         indicating potential unexpected external positions.\\n    error PositionV2__UnexpectedModuleInFirstPosition(address emitter, address moduleInPosition);\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) public view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) public view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) external view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component's external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of\\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) public {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position.\\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        external\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            if (_data.length != 0) revert PositionV2__DataNotNull(address(this), _data);\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    if (positionModules[0] != _module) revert PositionV2__UnexpectedModuleInFirstPosition(address(this), positionModules[0]);\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) external pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) external pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) external view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component);\\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        external\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional - (_prePositionUnit.preciseMul(_setTokenSupply));\\n        return (_postTotalNotional - (airdroppedAmount)).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/lib/ResourceIdentifier.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n * @author Set Protocol\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n *\\n * CHANGELOG\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\"\r\n    },\r\n    \"contracts/protocol/modules/v1/AaveLeverageModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { AaveV2 } from \\\"../../integration/lib/AaveV2.sol\\\";\\nimport { IAToken } from \\\"../../../interfaces/external/aave-v2/IAToken.sol\\\";\\nimport { IAaveLeverageModule } from \\\"../../../interfaces/IAaveLeverageModule.sol\\\";\\nimport { IController } from \\\"../../../interfaces/IController.sol\\\";\\nimport { IDebtIssuanceModule } from \\\"../../../interfaces/IDebtIssuanceModule.sol\\\";\\nimport { IExchangeAdapter } from \\\"../../../interfaces/IExchangeAdapter.sol\\\";\\nimport { ILendingPool } from \\\"../../../interfaces/external/aave-v2/ILendingPool.sol\\\";\\nimport { ILendingPoolAddressesProvider } from \\\"../../../interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol\\\";\\nimport { IModuleIssuanceHook } from \\\"../../../interfaces/IModuleIssuanceHook.sol\\\";\\nimport { IProtocolDataProvider } from \\\"../../../interfaces/external/aave-v2/IProtocolDataProvider.sol\\\";\\nimport { ISetToken } from \\\"../../../interfaces/ISetToken.sol\\\";\\nimport { IVariableDebtToken } from \\\"../../../interfaces/external/aave-v2/IVariableDebtToken.sol\\\";\\n\\nimport { ModuleBaseV2 } from \\\"../../lib/ModuleBaseV2.sol\\\";\\nimport { PreciseUnitMath } from \\\"../../../lib/PreciseUnitMath.sol\\\";\\nimport { AddressArrayUtils } from \\\"../../../lib/AddressArrayUtils.sol\\\";\\nimport { Invoke } from \\\"../../../protocol/lib/Invoke.sol\\\";\\nimport { Position } from \\\"../../../protocol/lib/Position.sol\\\";\\n\\n/**\\n * @title AaveLeverageModule\\n * @author Set Protocol\\n * @notice Smart contract that enables leverage trading using Aave as the lending protocol.\\n * @dev Do not use this module in conjunction with other debt modules that allow Aave debt positions as it could lead to double counting of\\n * debt when borrowed assets are the same.\\n *\\n * CHANGELOG\\n * - 11/16/22: Add 1Inch integration to rebalance logic\\n * - 4/21/23: Removed OZ SafeMath utils\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract AaveLeverageModule is ReentrancyGuard, ModuleBaseV2, Ownable2Step, IAaveLeverageModule, IModuleIssuanceHook {\\n    using AaveV2 for ISetToken;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n\\n    /* ============ Structs ============ */\\n\\n    struct ActionInfo {\\n        ISetToken setToken;                      // SetToken instance\\n        ILendingPool lendingPool;                // Lending pool instance, we grab this everytime since it's best practice not to store\\n        IExchangeAdapter exchangeAdapter;        // Exchange adapter instance\\n        uint256 setTotalSupply;                  // Total supply of SetToken\\n        uint256 notionalSendQuantity;            // Total notional quantity sent to exchange\\n        uint256 minNotionalReceiveQuantity;      // Min total notional received from exchange\\n        IERC20 collateralAsset;                  // Address of collateral asset\\n        IERC20 borrowAsset;                      // Address of borrow asset\\n        uint256 preTradeReceiveTokenBalance;     // Balance of pre-trade receive token balance\\n    }\\n\\n    struct EnabledAssets {\\n        address[] collateralAssets;             // Array of enabled underlying collateral assets for a SetToken\\n        address[] borrowAssets;                 // Array of enabled underlying borrow assets for a SetToken\\n    }\\n\\n    struct ReserveTokens {\\n        IAToken aToken;                         // Reserve's aToken instance\\n        IVariableDebtToken variableDebtToken;   // Reserve's variable debt token instance\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @dev Emitted on lever()\\n     * @param _setToken             Instance of the SetToken being levered\\n     * @param _borrowAsset          Asset being borrowed for leverage\\n     * @param _collateralAsset      Collateral asset being levered\\n     * @param _exchangeAdapter      Exchange adapter used for trading\\n     * @param _totalBorrowAmount    Total amount of `_borrowAsset` borrowed\\n     * @param _totalReceiveAmount   Total amount of `_collateralAsset` received by selling `_borrowAsset`\\n     * @param _protocolFee          Protocol fee charged\\n     */\\n    event LeverageIncreased(\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _borrowAsset,\\n        IERC20 indexed _collateralAsset,\\n        IExchangeAdapter _exchangeAdapter,\\n        uint256 _totalBorrowAmount,\\n        uint256 _totalReceiveAmount,\\n        uint256 _protocolFee\\n    );\\n\\n    /**\\n     * @dev Emitted on delever() and deleverToZeroBorrowBalance()\\n     * @param _setToken             Instance of the SetToken being delevered\\n     * @param _collateralAsset      Asset sold to decrease leverage\\n     * @param _repayAsset           Asset being bought to repay to Aave\\n     * @param _exchangeAdapter      Exchange adapter used for trading\\n     * @param _totalRedeemAmount    Total amount of `_collateralAsset` being sold\\n     * @param _totalRepayAmount     Total amount of `_repayAsset` being repaid\\n     * @param _protocolFee          Protocol fee charged\\n     */\\n    event LeverageDecreased(\\n        ISetToken indexed _setToken,\\n        IERC20 indexed _collateralAsset,\\n        IERC20 indexed _repayAsset,\\n        IExchangeAdapter _exchangeAdapter,\\n        uint256 _totalRedeemAmount,\\n        uint256 _totalRepayAmount,\\n        uint256 _protocolFee\\n    );\\n\\n    /**\\n     * @dev Emitted on addCollateralAssets() and removeCollateralAssets()\\n     * @param _setToken Instance of SetToken whose collateral assets is updated\\n     * @param _added    true if assets are added false if removed\\n     * @param _assets   Array of collateral assets being added/removed\\n     */\\n    event CollateralAssetsUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added,\\n        IERC20[] _assets\\n    );\\n\\n    /**\\n     * @dev Emitted on addBorrowAssets() and removeBorrowAssets()\\n     * @param _setToken Instance of SetToken whose borrow assets is updated\\n     * @param _added    true if assets are added false if removed\\n     * @param _assets   Array of borrow assets being added/removed\\n     */\\n    event BorrowAssetsUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added,\\n        IERC20[] _assets\\n    );\\n\\n    /**\\n     * @dev Emitted when `underlyingToReserveTokensMappings` is updated\\n     * @param _underlying           Address of the underlying asset\\n     * @param _aToken               Updated aave reserve aToken\\n     * @param _variableDebtToken    Updated aave reserve variable debt token\\n     */\\n    event ReserveTokensUpdated(\\n        IERC20 indexed _underlying,\\n        IAToken indexed _aToken,\\n        IVariableDebtToken indexed _variableDebtToken\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAllowedSetToken()\\n     * @param _setToken SetToken being whose allowance to initialize this module is being updated\\n     * @param _added    true if added false if removed\\n     */\\n    event SetTokenStatusUpdated(\\n        ISetToken indexed _setToken,\\n        bool indexed _added\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAnySetAllowed()\\n     * @param _anySetAllowed    true if any set is allowed to initialize this module, false otherwise\\n     */\\n    event AnySetAllowedUpdated(\\n        bool indexed _anySetAllowed\\n    );\\n\\n    /**\\n     * @dev Emitted on updateAllowedDynamicExchangeAdapterDrift()\\n     * @param _allowedDynamicExchangeAdapterDrift   Percentage, expressed in million, of updated max drift allowed\\n     */\\n    event AllowedDynamicExchangeAdapterDriftUpdated(\\n        uint256 _allowedDynamicExchangeAdapterDrift\\n    );\\n\\n    /**\\n     * @dev Emitted on updateEmergencyRepayer()\\n     * @param _emergencyRepayer   Address of the emergency repayer\\n     */\\n    event EmergencyRepayerUpdated(\\n        address indexed _emergencyRepayer\\n    );\\n\\n    /* ============ Constants ============ */\\n\\n    // This module only supports borrowing in variable rate mode from Aave which is represented by 2\\n    uint256 constant internal BORROW_RATE_MODE = 2;\\n\\n    // String identifying the DebtIssuanceModule in the IntegrationRegistry. Note: Governance must add DefaultIssuanceModule as\\n    // the string as the integration name\\n    string constant internal DEFAULT_ISSUANCE_MODULE_NAME = \\\"DefaultIssuanceModule\\\";\\n\\n    // 0 index stores protocol fee % on the controller, charged in the _executeTrade function\\n    uint256 constant internal PROTOCOL_TRADE_FEE_INDEX = 0;\\n\\n    // Initial value of allowed input amount drift for dynamic adapter, equal to 0.01% (expressed in millions)\\n    uint256 constant internal INITIAL_ALLOWED_DYNAMIC_EXCHANGE_ADAPTER_DRIFT = 100;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Propotional maximum difference between amount to swap fixed in swap data of dynamic adapter and amount calculated based on quantity units * total supply. Expressed in millions\\n    uint256 internal allowedDynamicExchangeAdapterDrift;\\n\\n    // Amount that is pending to be transferred to the emergency repayer    \\n    uint256 public emergencyRepayment;\\n\\n    // Mapping to efficiently fetch reserve token addresses. Tracking Aave reserve token addresses and updating them\\n    // upon requirement is more efficient than fetching them each time from Aave.\\n    // Note: For an underlying asset to be enabled as collateral/borrow asset on SetToken, it must be added to this mapping first.\\n    mapping(IERC20 => ReserveTokens) public underlyingToReserveTokens;\\n\\n    // Used to fetch reserves and user data from AaveV2\\n    IProtocolDataProvider public immutable PROTOCOL_DATA_PROVIDER;\\n\\n    // Used to fetch lendingPool address. This contract is immutable and its address will never change.\\n    ILendingPoolAddressesProvider public immutable LENDING_POOL_ADDRESSES_PROVIDER;\\n\\n    // Mapping to efficiently check if collateral asset is enabled in SetToken\\n    mapping(ISetToken => mapping(IERC20 => bool)) public collateralAssetEnabled;\\n\\n    // Mapping to efficiently check if a borrow asset is enabled in SetToken\\n    mapping(ISetToken => mapping(IERC20 => bool)) public borrowAssetEnabled;\\n\\n    // Internal mapping of enabled collateral and borrow tokens for syncing positions\\n    mapping(ISetToken => EnabledAssets) internal enabledAssets;\\n\\n    // Mapping of SetToken to boolean indicating if SetToken is on allow list. Updateable by governance\\n    mapping(ISetToken => bool) public allowedSetTokens;\\n\\n    // Boolean that returns if any SetToken can initialize this module. If false, then subject to allow list. Updateable by governance.\\n    bool public anySetAllowed;\\n\\n    // Address of the emergency repayer (if any)\\n    address public emergencyRepayer;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @dev Instantiate addresses. Underlying to reserve tokens mapping is created.\\n     * @param _controller                       Address of Controller contract\\n     * @param _lendingPoolAddressesProvider     Address of Aave LendingPoolAddressProvider\\n     */\\n    constructor(\\n        IController _controller,\\n        ILendingPoolAddressesProvider _lendingPoolAddressesProvider\\n    )\\n        ModuleBaseV2(_controller)\\n    {\\n        LENDING_POOL_ADDRESSES_PROVIDER = _lendingPoolAddressesProvider;\\n        IProtocolDataProvider _protocolDataProvider = IProtocolDataProvider(\\n            // Use the raw input vs bytes32() conversion. This is to ensure the input is an uint and not a string.\\n            _lendingPoolAddressesProvider.getAddress(0x0100000000000000000000000000000000000000000000000000000000000000)\\n        );\\n        PROTOCOL_DATA_PROVIDER = _protocolDataProvider;\\n\\n        IProtocolDataProvider.TokenData[] memory reserveTokens = _protocolDataProvider.getAllReservesTokens();\\n        uint256 reserveTokensLength = reserveTokens.length;\\n        for(uint256 i; i < reserveTokensLength; ) {\\n            (address aToken, , address variableDebtToken) = _protocolDataProvider.getReserveTokensAddresses(reserveTokens[i].tokenAddress);\\n            underlyingToReserveTokens[IERC20(reserveTokens[i].tokenAddress)] = ReserveTokens(IAToken(aToken), IVariableDebtToken(variableDebtToken));\\n            unchecked { ++i; }\\n        }\\n        allowedDynamicExchangeAdapterDrift = INITIAL_ALLOWED_DYNAMIC_EXCHANGE_ADAPTER_DRIFT;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @dev MANAGER ONLY: Increases leverage for a given collateral position using an enabled borrow asset.\\n     * Borrows _borrowAsset from Aave. Performs a DEX trade, exchanging the _borrowAsset for _collateralAsset.\\n     * Deposits _collateralAsset to Aave and mints corresponding aToken.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * @param _setToken                     Instance of the SetToken\\n     * @param _borrowAsset                  Address of underlying asset being borrowed for leverage\\n     * @param _collateralAsset              Address of underlying collateral asset\\n     * @param _borrowQuantityUnits          Borrow quantity of asset in position units\\n     * @param _minReceiveQuantityUnits      Min receive quantity of collateral asset to receive post-trade in position units\\n     * @param _tradeAdapterName             Name of trade adapter\\n     * @param _tradeData                    Arbitrary data for trade\\n     */\\n    function lever(\\n        ISetToken _setToken,\\n        IERC20 _borrowAsset,\\n        IERC20 _collateralAsset,\\n        uint256 _borrowQuantityUnits,\\n        uint256 _minReceiveQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // For levering up, send quantity is derived from borrow asset and receive quantity is derived from\\n        // collateral asset\\n        ActionInfo memory leverInfo = _createAndValidateActionInfo(\\n            _setToken,\\n            _borrowAsset,\\n            _collateralAsset,\\n            _borrowQuantityUnits,\\n            _minReceiveQuantityUnits,\\n            _tradeAdapterName,\\n            true,\\n            _tradeData\\n        );\\n\\n        _borrow(leverInfo.setToken, leverInfo.lendingPool, leverInfo.borrowAsset, leverInfo.notionalSendQuantity);\\n\\n        uint256 postTradeReceiveQuantity = _executeTrade(leverInfo, _borrowAsset, _collateralAsset, _tradeData);\\n\\n        uint256 protocolFee = _accrueProtocolFee(_setToken, _collateralAsset, postTradeReceiveQuantity);\\n\\n        uint256 postTradeCollateralQuantity = postTradeReceiveQuantity - protocolFee;\\n\\n        _deposit(leverInfo.setToken, leverInfo.lendingPool, _collateralAsset, postTradeCollateralQuantity);\\n\\n        _updateLeverPositions(leverInfo, _borrowAsset);\\n\\n        emit LeverageIncreased(\\n            _setToken,\\n            _borrowAsset,\\n            _collateralAsset,\\n            leverInfo.exchangeAdapter,\\n            leverInfo.notionalSendQuantity,\\n            postTradeCollateralQuantity,\\n            protocolFee\\n        );\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Decrease leverage for a given collateral position using an enabled borrow asset.\\n     * Withdraws _collateralAsset from Aave. Performs a DEX trade, exchanging the _collateralAsset for _repayAsset.\\n     * Repays _repayAsset to Aave and burns corresponding debt tokens.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * @param _setToken                 Instance of the SetToken\\n     * @param _collateralAsset          Address of underlying collateral asset being withdrawn\\n     * @param _repayAsset               Address of underlying borrowed asset being repaid\\n     * @param _redeemQuantityUnits      Quantity of collateral asset to delever in position units\\n     * @param _minRepayQuantityUnits    Minimum amount of repay asset to receive post trade in position units\\n     * @param _tradeAdapterName         Name of trade adapter\\n     * @param _tradeData                Arbitrary data for trade\\n     */\\n    function delever(\\n        ISetToken _setToken,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        uint256 _minRepayQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Note: for delevering, send quantity is derived from collateral asset and receive quantity is derived from\\n        // repay asset\\n        ActionInfo memory deleverInfo = _createAndValidateActionInfo(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            _redeemQuantityUnits,\\n            _minRepayQuantityUnits,\\n            _tradeAdapterName,\\n            false,\\n            _tradeData\\n        );\\n\\n        _withdraw(deleverInfo.setToken, deleverInfo.lendingPool, _collateralAsset, deleverInfo.notionalSendQuantity);\\n\\n        uint256 postTradeReceiveQuantity = _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\\n\\n        uint256 protocolFee = _accrueProtocolFee(_setToken, _repayAsset, postTradeReceiveQuantity);\\n\\n        uint256 repayQuantity = postTradeReceiveQuantity - protocolFee;\\n\\n        _repayBorrow(deleverInfo.setToken, deleverInfo.lendingPool, _repayAsset, repayQuantity);\\n\\n        _updateDeleverPositions(deleverInfo, _repayAsset);\\n\\n        emit LeverageDecreased(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            deleverInfo.exchangeAdapter,\\n            deleverInfo.notionalSendQuantity,\\n            repayQuantity,\\n            protocolFee\\n        );\\n    }\\n\\n    /** @dev MANAGER ONLY: Pays down the borrow asset to 0 selling off a given amount of collateral asset.\\n     * Withdraws _collateralAsset from Aave. Performs a DEX trade, exchanging the _collateralAsset for _repayAsset.\\n     * Minimum receive amount for the DEX trade is set to the current variable debt balance of the borrow asset.\\n     * Repays received _repayAsset to Aave which burns corresponding debt tokens. Any extra received borrow asset is .\\n     * updated as equity. No protocol fee is charged.\\n     * Note: Both collateral and borrow assets need to be enabled, and they must not be the same asset.\\n     * The function reverts if not enough collateral asset is redeemed to buy the required minimum amount of _repayAsset.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _collateralAsset      Address of underlying collateral asset being redeemed\\n     * @param _repayAsset           Address of underlying asset being repaid\\n     * @param _redeemQuantityUnits  Quantity of collateral asset to delever in position units\\n     * @param _tradeAdapterName     Name of trade adapter\\n     * @param _tradeData            Arbitrary data for trade\\n     * @return uint256              Notional repay quantity\\n     */\\n    function deleverToZeroBorrowBalance(\\n        ISetToken _setToken,\\n        IERC20 _collateralAsset,\\n        IERC20 _repayAsset,\\n        uint256 _redeemQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bytes memory _tradeData\\n    )\\n        external\\n        nonReentrant\\n        onlyManagerAndValidSet(_setToken)\\n        returns (uint256)\\n    {\\n        uint256 setTotalSupply = _setToken.totalSupply();\\n        uint256 notionalRedeemQuantity = _redeemQuantityUnits.preciseMul(setTotalSupply);\\n\\n        if (!borrowAssetEnabled[_setToken][_repayAsset]) revert AaveLeverageModule__BorrowDisabled(address(_repayAsset));\\n        uint256 notionalRepayQuantity = underlyingToReserveTokens[_repayAsset].variableDebtToken.balanceOf(address(_setToken));\\n        if (notionalRepayQuantity == 0) revert AaveLeverageModule__BorrowBalanceZero();\\n\\n        ActionInfo memory deleverInfo = _createAndValidateActionInfoNotional(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            notionalRedeemQuantity,\\n            notionalRepayQuantity,\\n            _tradeAdapterName,\\n            false,\\n            setTotalSupply,\\n            _tradeData\\n        );\\n\\n        \\n        _withdraw(deleverInfo.setToken, deleverInfo.lendingPool, _collateralAsset, deleverInfo.notionalSendQuantity);\\n\\n        _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\\n\\n        _repayBorrow(deleverInfo.setToken, deleverInfo.lendingPool, _repayAsset, notionalRepayQuantity);\\n\\n        _updateDeleverPositions(deleverInfo, _repayAsset);\\n\\n        emit LeverageDecreased(\\n            _setToken,\\n            _collateralAsset,\\n            _repayAsset,\\n            deleverInfo.exchangeAdapter,\\n            deleverInfo.notionalSendQuantity,\\n            notionalRepayQuantity,\\n            0   // No protocol fee\\n        );\\n\\n        return notionalRepayQuantity;\\n    }\\n\\n    /**\\n     * @dev CALLABLE BY ANYBODY: Sync Set positions with ALL enabled Aave collateral and borrow positions.\\n     * For collateral assets, update aToken default position. For borrow assets, update external borrow position.\\n     * - Collateral assets may come out of sync when interest is accrued or a position is liquidated\\n     * - Borrow assets may come out of sync when interest is accrued or position is liquidated and borrow is repaid\\n     * Note: In Aave, both collateral and borrow interest is accrued in each block by increasing the balance of\\n     * aTokens and debtTokens for each user, and 1 aToken = 1 variableDebtToken = 1 underlying.\\n     * @param _setToken               Instance of the SetToken\\n     */\\n    function sync(ISetToken _setToken) public nonReentrant onlyValidAndInitializedSet(_setToken) {\\n        uint256 setTotalSupply = _setToken.totalSupply();\\n\\n        // Only sync positions when Set supply is not 0. Without this check, if sync is called by someone before the\\n        // first issuance, then editDefaultPosition would remove the default positions from the SetToken\\n        if (setTotalSupply > 0) {\\n            address[] memory collateralAssets = enabledAssets[_setToken].collateralAssets;\\n            uint256 collateralAssetsLength = collateralAssets.length;\\n            for(uint256 i; i < collateralAssetsLength; ) {\\n                IAToken aToken = underlyingToReserveTokens[IERC20(collateralAssets[i])].aToken;\\n\\n                uint256 previousPositionUnit = _setToken.getDefaultPositionRealUnit(address(aToken)).toUint256();\\n                uint256 newPositionUnit = _getCollateralPosition(_setToken, aToken, setTotalSupply);\\n\\n                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\\n                if (previousPositionUnit != newPositionUnit) {\\n                  _updateCollateralPosition(_setToken, aToken, newPositionUnit);\\n                }\\n                unchecked { ++i; }\\n            }\\n\\n            address[] memory borrowAssets = enabledAssets[_setToken].borrowAssets;\\n            uint256 borrowAssetsLength = borrowAssets.length;\\n            for(uint256 i; i < borrowAssetsLength; ) {\\n                IERC20 borrowAsset = IERC20(borrowAssets[i]);\\n\\n                int256 previousPositionUnit = _setToken.getExternalPositionRealUnit(address(borrowAsset), address(this));\\n                int256 newPositionUnit = _getBorrowPosition(_setToken, borrowAsset, setTotalSupply);\\n\\n                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\\n                if (newPositionUnit != previousPositionUnit) {\\n                    _updateBorrowPosition(_setToken, borrowAsset, newPositionUnit);\\n                }\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Initializes this module to the SetToken. Either the SetToken needs to be on the allowed list\\n     * or anySetAllowed needs to be true. Only callable by the SetToken's manager.\\n     * Note: Managers can enable collateral and borrow assets that don't exist as positions on the SetToken\\n     * @param _setToken             Instance of the SetToken to initialize\\n     * @param _collateralAssets     Underlying tokens to be enabled as collateral in the SetToken\\n     * @param _borrowAssets         Underlying tokens to be enabled as borrow in the SetToken\\n     */\\n    function initialize(\\n        ISetToken _setToken,\\n        IERC20[] memory _collateralAssets,\\n        IERC20[] memory _borrowAssets\\n    )\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        if (!anySetAllowed) { \\n            if (!allowedSetTokens[_setToken]) revert AaveLeverageModule__SetTokenForbidden(address(_setToken));\\n        }\\n\\n        // Initialize module before trying register\\n        _setToken.initializeModule();\\n\\n        // Get debt issuance module registered to this module and require that it is initialized\\n        address defaultIssuanceModule = getAndValidateAdapter(DEFAULT_ISSUANCE_MODULE_NAME);\\n        if (!_setToken.isInitializedModule(defaultIssuanceModule)) revert AaveLeverageModule__IssuanceUninitialized(defaultIssuanceModule);\\n\\n        // Try if register exists on any of the modules including the debt issuance module\\n        address[] memory modules = _setToken.getModules();\\n        uint256 modulesLength = modules.length;\\n        for(uint256 i; i < modulesLength; ) {\\n            try IDebtIssuanceModule(modules[i]).registerToIssuanceModule(_setToken) { this; } catch { this; }\\n            unchecked { ++i; }\\n        }\\n\\n        // _collateralAssets and _borrowAssets arrays are validated in their respective internal functions\\n        _addCollateralAssets(_setToken, _collateralAssets);\\n        _addBorrowAssets(_setToken, _borrowAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Removes this module from the SetToken, via call by the SetToken. Any deposited collateral assets\\n     * are disabled to be used as collateral on Aave. Aave Settings and manager enabled assets state is deleted.\\n     * Note: Function will revert is there is any debt remaining on Aave\\n     */\\n    function removeModule() external override onlyValidAndInitializedSet(ISetToken(msg.sender)) {\\n        ISetToken setToken = ISetToken(msg.sender);\\n\\n        // Sync Aave and SetToken positions prior to any removal action\\n        sync(setToken);\\n\\n        address[] memory borrowAssets = enabledAssets[setToken].borrowAssets;\\n        uint256 borrowAssetsLength = borrowAssets.length;\\n        for(uint256 i; i < borrowAssetsLength; ) {\\n            IERC20 borrowAsset = IERC20(borrowAssets[i]);\\n            uint256 balanceOfVariableDebtToken = underlyingToReserveTokens[borrowAsset].variableDebtToken.balanceOf(address(setToken));\\n            if (balanceOfVariableDebtToken != 0) revert AaveLeverageModule__VariableDebtRemains(balanceOfVariableDebtToken);\\n\\n            delete borrowAssetEnabled[setToken][borrowAsset];\\n            unchecked { ++i; }\\n        }\\n\\n        address[] memory collateralAssets = enabledAssets[setToken].collateralAssets;\\n        uint256 collateralAssetsLength = collateralAssets.length;\\n        for(uint256 i; i < collateralAssetsLength; ) {\\n            IERC20 collateralAsset = IERC20(collateralAssets[i]);\\n            _updateUseReserveAsCollateral(setToken, collateralAsset, false);\\n\\n            delete collateralAssetEnabled[setToken][collateralAsset];\\n            unchecked { ++i; }\\n        }\\n\\n        delete enabledAssets[setToken];\\n\\n        // Try if unregister exists on any of the modules\\n        address[] memory modules = setToken.getModules();\\n        uint256 modulesLength = modules.length;\\n        for(uint256 i; i < modulesLength; ) {\\n            try IDebtIssuanceModule(modules[i]).unregisterFromIssuanceModule(setToken) { this; } catch { this; }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add registration of this module on the debt issuance module for the SetToken.\\n     * Note: if the debt issuance module is not added to SetToken before this module is initialized, then this function\\n     * needs to be called if the debt issuance module is later added and initialized to prevent state inconsistencies\\n     * @param _setToken             Instance of the SetToken\\n     * @param _debtIssuanceModule   Debt issuance module address to register\\n     */\\n    function registerToModule(ISetToken _setToken, IDebtIssuanceModule _debtIssuanceModule) external onlyManagerAndValidSet(_setToken) {\\n        if (!_setToken.isInitializedModule(address(_debtIssuanceModule))) revert AaveLeverageModule__IssuanceUninitialized(address(_debtIssuanceModule));\\n\\n        _debtIssuanceModule.registerToIssuanceModule(_setToken);\\n    }\\n\\n    /**\\n     * @dev CALLABLE BY ANYBODY: Updates `underlyingToReserveTokens` mappings. Reverts if mapping already exists\\n     * or the passed _underlying asset does not have a valid reserve on Aave.\\n     * Note: Call this function when Aave adds a new reserve.\\n     * @param _underlying               Address of underlying asset\\n     */\\n    function addUnderlyingToReserveTokensMapping(IERC20 _underlying) external {\\n        address underlyingAToken = address(underlyingToReserveTokens[_underlying].aToken);\\n        if (underlyingAToken != address(0)) revert AaveLeverageModule__TokenMappingExists();\\n\\n        // An active reserve is an alias for a valid reserve on Aave.\\n        (,,,,,,,, bool isActive,) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_underlying));\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n\\n        (address aToken, , address variableDebtToken) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_underlying));\\n        underlyingToReserveTokens[_underlying].aToken = IAToken(aToken);\\n        underlyingToReserveTokens[_underlying].variableDebtToken = IVariableDebtToken(variableDebtToken);\\n\\n        emit ReserveTokensUpdated(_underlying, IAToken(aToken), IVariableDebtToken(variableDebtToken));\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add collateral assets. aTokens corresponding to collateral assets are tracked for syncing positions.\\n     * Note: Reverts with \\\"Collateral already enabled\\\" if there are duplicate assets in the passed _newCollateralAssets array.\\n     *\\n     * NOTE: ALL ADDED COLLATERAL ASSETS CAN BE ADDED AS A POSITION ON THE SET TOKEN WITHOUT MANAGER'S EXPLICIT PERMISSION.\\n     * UNWANTED EXTRA POSITIONS CAN BREAK EXTERNAL LOGIC, INCREASE COST OF MINT/REDEEM OF SET TOKEN, AMONG OTHER POTENTIAL UNINTENDED CONSEQUENCES.\\n     * SO, PLEASE ADD ONLY THOSE COLLATERAL ASSETS WHOSE CORRESPONDING aTOKENS ARE NEEDED AS DEFAULT POSITIONS ON THE SET TOKEN.\\n     *\\n     * @param _setToken             Instance of the SetToken\\n     * @param _newCollateralAssets  Addresses of new collateral underlying assets\\n     */\\n    function addCollateralAssets(ISetToken _setToken, IERC20[] memory _newCollateralAssets) external onlyManagerAndValidSet(_setToken) {\\n        _addCollateralAssets(_setToken, _newCollateralAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Remove collateral assets. Disable deposited assets to be used as collateral on Aave market.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _collateralAssets     Addresses of collateral underlying assets to remove\\n     */\\n    function removeCollateralAssets(ISetToken _setToken, IERC20[] memory _collateralAssets) external onlyManagerAndValidSet(_setToken) {\\n        uint256 collateralAssetsLength = _collateralAssets.length;\\n        for(uint256 i; i < collateralAssetsLength; ) {\\n            IERC20 collateralAsset = _collateralAssets[i];\\n            if(!collateralAssetEnabled[_setToken][collateralAsset]) revert AaveLeverageModule__CollateralUsageDisabled(address(collateralAsset));\\n\\n            _updateUseReserveAsCollateral(_setToken, collateralAsset, false);\\n\\n            delete collateralAssetEnabled[_setToken][collateralAsset];\\n            enabledAssets[_setToken].collateralAssets.removeStorage(address(collateralAsset));\\n            unchecked { ++i; }\\n        }\\n        emit CollateralAssetsUpdated(_setToken, false, _collateralAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Add borrow assets. Debt tokens corresponding to borrow assets are tracked for syncing positions.\\n     * Note: Reverts with \\\"Borrow already enabled\\\" if there are duplicate assets in the passed _newBorrowAssets array.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _newBorrowAssets      Addresses of borrow underlying assets to add\\n     */\\n    function addBorrowAssets(ISetToken _setToken, IERC20[] memory _newBorrowAssets) external onlyManagerAndValidSet(_setToken) {\\n        _addBorrowAssets(_setToken, _newBorrowAssets);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Remove borrow assets.\\n     * Note: If there is a borrow balance, borrow asset cannot be removed\\n     * @param _setToken             Instance of the SetToken\\n     * @param _borrowAssets         Addresses of borrow underlying assets to remove\\n     */\\n    function removeBorrowAssets(ISetToken _setToken, IERC20[] memory _borrowAssets) external onlyManagerAndValidSet(_setToken) {\\n        uint256 borrowAssetsLength = _borrowAssets.length;\\n        for(uint256 i; i < borrowAssetsLength; ) {\\n            IERC20 borrowAsset = _borrowAssets[i];\\n\\n            if (!borrowAssetEnabled[_setToken][borrowAsset]) revert AaveLeverageModule__BorrowDisabled(address(borrowAsset));\\n            uint256 balanceOfVariableDebtToken = underlyingToReserveTokens[borrowAsset].variableDebtToken.balanceOf(address(_setToken));\\n            if (balanceOfVariableDebtToken != 0) revert AaveLeverageModule__VariableDebtRemains(balanceOfVariableDebtToken);\\n\\n            delete borrowAssetEnabled[_setToken][borrowAsset];\\n            enabledAssets[_setToken].borrowAssets.removeStorage(address(borrowAsset));\\n            unchecked { ++i; }\\n        }\\n        emit BorrowAssetsUpdated(_setToken, false, _borrowAssets);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Enable/disable ability of a SetToken to initialize this module. Only callable by governance.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _status               Bool indicating if _setToken is allowed to initialize this module\\n     */\\n    function updateAllowedSetToken(ISetToken _setToken, bool _status) external onlyOwner {\\n        if (!controller.isSet(address(_setToken)) && !allowedSetTokens[_setToken]) revert AaveLeverageModule__SetTokenInvalid();\\n        allowedSetTokens[_setToken] = _status;\\n        emit SetTokenStatusUpdated(_setToken, _status);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Toggle whether ANY SetToken is allowed to initialize this module. Only callable by governance.\\n     * @param _anySetAllowed             Bool indicating if ANY SetToken is allowed to initialize this module\\n     */\\n    function updateAnySetAllowed(bool _anySetAllowed) external onlyOwner {\\n        anySetAllowed = _anySetAllowed;\\n        emit AnySetAllowedUpdated(_anySetAllowed);\\n    }\\n\\n    /**\\n     * @dev GOVERNANCE ONLY: Updates maximum drift of dynamic exchange adapter. Only callable by governance.\\n     * @param _allowedDynamicExchangeAdapterDrift             Percentage, expressed in million, of max drift allowed\\n     */\\n    function updateAllowedDynamicExchangeAdapterDrift(uint256 _allowedDynamicExchangeAdapterDrift) external onlyOwner {\\n        allowedDynamicExchangeAdapterDrift = _allowedDynamicExchangeAdapterDrift;\\n        emit AllowedDynamicExchangeAdapterDriftUpdated(_allowedDynamicExchangeAdapterDrift);\\n    }\\n\\n    function updateEmergencyRepayer(address _emergencyRepayer) external onlyOwner {\\n        emergencyRepayer = _emergencyRepayer;\\n        emit EmergencyRepayerUpdated(_emergencyRepayer);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to issuance to sync positions on SetToken. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     */\\n    function moduleIssueHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external override onlyModule(_setToken) {\\n        sync(_setToken);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to redemption to sync positions on SetToken. For redemption, always use current borrowed\\n     * balance after interest accrual. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     */\\n    function moduleRedeemHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external override onlyModule(_setToken) {\\n        sync(_setToken);\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to looping through each component on issuance. Invokes borrow in order for\\n     * module to return debt to issuer. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _setTokenQuantity     Quantity of SetToken\\n     * @param _component            Address of component\\n     */\\n    function componentIssueHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool _isEquity) external override onlyModule(_setToken) {\\n        // Check hook not being called for an equity position. If hook is called with equity position and outstanding borrow position\\n        // exists the loan would be taken out twice potentially leading to liquidation\\n        if (!_isEquity) {\\n            int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n\\n            if (componentDebt >= 0) revert AaveLeverageModule__ComponentDebtNotNegative(componentDebt);\\n\\n            uint256 notionalDebt = (componentDebt * -1).toUint256().preciseMul(_setTokenQuantity);\\n            _borrow(_setToken, ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()), _component, notionalDebt);\\n        }\\n    }\\n\\n    /**\\n     * @dev MODULE ONLY: Hook called prior to looping through each component on redemption. Invokes repay after\\n     * the issuance module transfers debt from the issuer. Only callable by valid module.\\n     * @param _setToken             Instance of the SetToken\\n     * @param _setTokenQuantity     Quantity of SetToken\\n     * @param _component            Address of component\\n     */\\n    function componentRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool _isEquity) external override onlyModule(_setToken) {\\n        // Check hook not being called for an equity position. If hook is called with equity position and outstanding borrow position\\n        // exists the loan would be paid down twice, decollateralizing the Set\\n        if (!_isEquity) {\\n            int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\\n\\n            if (componentDebt >= 0) revert AaveLeverageModule__ComponentDebtNotNegative(componentDebt);\\n\\n            uint256 notionalDebt = (componentDebt * -1).toUint256().preciseMulCeil(_setTokenQuantity);\\n            _repayBorrow(_setToken, ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()), _component, notionalDebt);\\n        }\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * @dev Get enabled assets for SetToken. Returns an array of collateral and borrow assets.\\n     * @return Underlying collateral assets that are enabled\\n     * @return Underlying borrowed assets that are enabled\\n     */\\n    function getEnabledAssets(ISetToken _setToken) external view returns(address[] memory, address[] memory) {\\n        return (\\n            enabledAssets[_setToken].collateralAssets,\\n            enabledAssets[_setToken].borrowAssets\\n        );\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n    /**\\n     * @dev Invoke deposit from SetToken using AaveV2 library. Mints aTokens for SetToken.\\n     */\\n    function _deposit(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeApprove(address(_asset), address(_lendingPool), _notionalQuantity);\\n        _setToken.invokeDeposit(_lendingPool, address(_asset), _notionalQuantity);\\n    }\\n\\n    /**\\n     * @dev Invoke withdraw from SetToken using AaveV2 library. Burns aTokens and returns underlying to SetToken.\\n     */\\n    function _withdraw(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        try _setToken.invokeWithdraw(_lendingPool, address(_asset), _notionalQuantity) {} // solhint-disable-line no-empty-blocks\\n        catch Error(string memory reason) {\\n            if (keccak256(abi.encodePacked(reason)) == keccak256(\\\"6\\\")) {\\n                _asset.transferFrom(emergencyRepayer, address(_setToken), _notionalQuantity);\\n                _deposit(_setToken, _lendingPool, _asset, _notionalQuantity);\\n                _setToken.invokeWithdraw(_lendingPool, address(_asset), _notionalQuantity);\\n                emergencyRepayment += _notionalQuantity;\\n            } else {\\n                revert(reason);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Invoke repay from SetToken using AaveV2 library. Burns DebtTokens for SetToken.\\n     */\\n    function _repayBorrow(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeApprove(address(_asset), address(_lendingPool), _notionalQuantity);\\n        _setToken.invokeRepay(_lendingPool, address(_asset), _notionalQuantity, BORROW_RATE_MODE);\\n        if (emergencyRepayment > 0) {\\n            _withdraw(_setToken, _lendingPool, IERC20(enabledAssets[_setToken].collateralAssets[0]), emergencyRepayment);\\n            _setToken.invokeTransfer(enabledAssets[_setToken].collateralAssets[0], emergencyRepayer, emergencyRepayment);\\n            delete emergencyRepayment;\\n        }\\n    }\\n\\n    /**\\n     * @dev Invoke borrow from the SetToken using AaveV2 library. Mints DebtTokens for SetToken.\\n     */\\n    function _borrow(ISetToken _setToken, ILendingPool _lendingPool, IERC20 _asset, uint256 _notionalQuantity) internal {\\n        _setToken.invokeBorrow(_lendingPool, address(_asset), _notionalQuantity, BORROW_RATE_MODE);\\n    }\\n\\n    /**\\n     * @dev Invokes approvals, gets trade call data from exchange adapter and invokes trade from SetToken\\n     * @return uint256     The quantity of tokens received post-trade\\n     */\\n    function _executeTrade(\\n        ActionInfo memory _actionInfo,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        bytes memory _data\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        ISetToken setToken = _actionInfo.setToken;\\n        uint256 notionalSendQuantity = _actionInfo.notionalSendQuantity;\\n\\n        setToken.invokeApprove(\\n            address(_sendToken),\\n            _actionInfo.exchangeAdapter.getSpender(),\\n            notionalSendQuantity\\n        );\\n\\n        (\\n            address targetExchange,\\n            uint256 callValue,\\n            bytes memory methodData\\n        ) = _actionInfo.exchangeAdapter.getTradeCalldata(\\n            address(_sendToken),\\n            address(_receiveToken),\\n            address(setToken),\\n            notionalSendQuantity,\\n            _actionInfo.minNotionalReceiveQuantity,\\n            _data\\n        );\\n        setToken.invoke(targetExchange, callValue, methodData);\\n\\n        uint256 receiveTokenQuantity = _receiveToken.balanceOf(address(setToken)) - _actionInfo.preTradeReceiveTokenBalance;\\n        if (receiveTokenQuantity < _actionInfo.minNotionalReceiveQuantity)\\n            revert AaveLeverageModule__ExcessiveSlippage(receiveTokenQuantity, _actionInfo.minNotionalReceiveQuantity);\\n\\n        return receiveTokenQuantity;\\n    }\\n\\n    /**\\n     * @dev Calculates protocol fee on module and pays protocol fee from SetToken\\n     * @return uint256          Total protocol fee paid\\n     */\\n    function _accrueProtocolFee(ISetToken _setToken, IERC20 _receiveToken, uint256 _exchangedQuantity) internal returns(uint256) {\\n        uint256 protocolFeeTotal = getModuleFee(PROTOCOL_TRADE_FEE_INDEX, _exchangedQuantity);\\n\\n        payProtocolFeeFromSetToken(_setToken, address(_receiveToken), protocolFeeTotal);\\n\\n        return protocolFeeTotal;\\n    }\\n\\n    /**\\n     * @dev Updates the collateral (aToken held) and borrow position (variableDebtToken held) of the SetToken\\n     */\\n    function _updateLeverPositions(ActionInfo memory _actionInfo, IERC20 _borrowAsset) internal {\\n        IAToken aToken = underlyingToReserveTokens[_actionInfo.collateralAsset].aToken;\\n        _updateCollateralPosition(\\n            _actionInfo.setToken,\\n            aToken,\\n            _getCollateralPosition(\\n                _actionInfo.setToken,\\n                aToken,\\n                _actionInfo.setTotalSupply\\n            )\\n        );\\n\\n        _updateBorrowPosition(\\n            _actionInfo.setToken,\\n            _borrowAsset,\\n            _getBorrowPosition(\\n                _actionInfo.setToken,\\n                _borrowAsset,\\n                _actionInfo.setTotalSupply\\n            )\\n        );\\n    }\\n\\n\\n    /**\\n     * @dev Updates positions as per _updateLeverPositions and updates Default position for borrow asset in case Set is\\n     * delevered all the way to zero any remaining borrow asset after the debt is paid can be added as a position.\\n     */\\n    function _updateDeleverPositions(ActionInfo memory _actionInfo, IERC20 _repayAsset) internal {\\n        // if amount of tokens traded for exceeds debt, update default position first to save gas on editing borrow position\\n        uint256 repayAssetBalance = _repayAsset.balanceOf(address(_actionInfo.setToken));\\n        if (repayAssetBalance != _actionInfo.preTradeReceiveTokenBalance) {\\n            _actionInfo.setToken.calculateAndEditDefaultPosition(\\n                address(_repayAsset),\\n                _actionInfo.setTotalSupply,\\n                _actionInfo.preTradeReceiveTokenBalance\\n            );\\n        }\\n\\n        _updateLeverPositions(_actionInfo, _repayAsset);\\n    }\\n\\n    /**\\n     * @dev Updates default position unit for given aToken on SetToken\\n     */\\n    function _updateCollateralPosition(ISetToken _setToken, IAToken _aToken, uint256 _newPositionUnit) internal {\\n        _setToken.editDefaultPosition(address(_aToken), _newPositionUnit);\\n    }\\n\\n    /**\\n     * @dev Updates external position unit for given borrow asset on SetToken\\n     */\\n    function _updateBorrowPosition(ISetToken _setToken, IERC20 _underlyingAsset, int256 _newPositionUnit) internal {\\n        _setToken.editExternalPosition(address(_underlyingAsset), address(this), _newPositionUnit, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Construct the ActionInfo struct for lever and delever\\n     * @return ActionInfo       Instance of constructed ActionInfo struct\\n     */\\n    function _createAndValidateActionInfo(\\n        ISetToken _setToken,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        uint256 _sendQuantityUnits,\\n        uint256 _minReceiveQuantityUnits,\\n        string memory _tradeAdapterName,\\n        bool _isLever,\\n        bytes memory _tradeData\\n    )\\n        internal\\n        view\\n        returns(ActionInfo memory)\\n    {\\n        uint256 totalSupply = _setToken.totalSupply();\\n\\n        return _createAndValidateActionInfoNotional(\\n            _setToken,\\n            _sendToken,\\n            _receiveToken,\\n            _sendQuantityUnits.preciseMul(totalSupply),\\n            _minReceiveQuantityUnits.preciseMul(totalSupply),\\n            _tradeAdapterName,\\n            _isLever,\\n            totalSupply,\\n            _tradeData\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns amount, that was fixed in trade data\\n     *\\n     * @return uint256 new token amount\\n     */\\n    function _getExchangeAdapterInputAmount(uint256 _notionalSendQuantity, IExchangeAdapter _tradeAdapter, bytes memory _tradeData, uint256 _tradeMaxDrift) public view returns (uint256) {\\n        (,,,uint256 dexAdapterSendQuantity,) = _tradeAdapter.getTradeMetadata(_tradeData);\\n        uint256 drift = (Math.max(dexAdapterSendQuantity, _notionalSendQuantity) - Math.min(dexAdapterSendQuantity, _notionalSendQuantity)) * 100000 / _notionalSendQuantity;\\n        if (drift >= _tradeMaxDrift) revert AaveLeverageModule__DexDataMismatch(drift, _tradeMaxDrift);\\n        return dexAdapterSendQuantity;\\n    }\\n\\n    /**\\n     * @dev returns information, whether given exchange adapter is a dynamic variant\\n     */\\n    function _isDynamicDataAdapter(IExchangeAdapter _adapter) public view returns (bool) {\\n        try _adapter.isDynamicDataAdapter() returns (bool _isDynamic) {\\n            return _isDynamic;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Construct the ActionInfo struct for lever and delever accepting notional units\\n     * @return ActionInfo       Instance of constructed ActionInfo struct\\n     */\\n    function _createAndValidateActionInfoNotional(\\n        ISetToken _setToken,\\n        IERC20 _sendToken,\\n        IERC20 _receiveToken,\\n        uint256 _notionalSendQuantity,\\n        uint256 _minNotionalReceiveQuantity,\\n        string memory _tradeAdapterName,\\n        bool _isLever,\\n        uint256 _setTotalSupply,\\n        bytes memory _tradeData\\n    )\\n        internal\\n        view\\n        returns(ActionInfo memory)\\n    {\\n        IExchangeAdapter tradeAdapter = IExchangeAdapter(getAndValidateAdapter(_tradeAdapterName));\\n        if(_isDynamicDataAdapter(tradeAdapter)) {\\n            _notionalSendQuantity = _getExchangeAdapterInputAmount(_notionalSendQuantity, tradeAdapter, _tradeData, allowedDynamicExchangeAdapterDrift);\\n        }\\n        ActionInfo memory actionInfo = ActionInfo ({\\n            exchangeAdapter: tradeAdapter,\\n            lendingPool: ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()),\\n            setToken: _setToken,\\n            collateralAsset: _isLever ? _receiveToken : _sendToken,\\n            borrowAsset: _isLever ? _sendToken : _receiveToken,\\n            setTotalSupply: _setTotalSupply,\\n            notionalSendQuantity: _notionalSendQuantity,\\n            minNotionalReceiveQuantity: _minNotionalReceiveQuantity,\\n            preTradeReceiveTokenBalance: IERC20(_receiveToken).balanceOf(address(_setToken))\\n        });\\n\\n        _validateCommon(actionInfo);\\n\\n        return actionInfo;\\n    }\\n\\n    /**\\n     * @dev Add collateral assets to SetToken. Updates the collateralAssetsEnabled and enabledAssets mappings.\\n     * Emits CollateralAssetsUpdated event.\\n     */\\n    function _addCollateralAssets(ISetToken _setToken, IERC20[] memory _newCollateralAssets) internal {\\n        uint256 newcollateralAssetsLength = _newCollateralAssets.length;\\n        for(uint256 i; i < newcollateralAssetsLength; ) {\\n            IERC20 collateralAsset = _newCollateralAssets[i];\\n\\n            _validateNewCollateralAsset(_setToken, collateralAsset);\\n            _updateUseReserveAsCollateral(_setToken, collateralAsset, true);\\n\\n            collateralAssetEnabled[_setToken][collateralAsset] = true;\\n            enabledAssets[_setToken].collateralAssets.push(address(collateralAsset));\\n            unchecked { ++i; }\\n        }\\n        emit CollateralAssetsUpdated(_setToken, true, _newCollateralAssets);\\n    }\\n\\n    /**\\n     * @dev Add borrow assets to SetToken. Updates the borrowAssetsEnabled and enabledAssets mappings.\\n     * Emits BorrowAssetsUpdated event.\\n     */\\n    function _addBorrowAssets(ISetToken _setToken, IERC20[] memory _newBorrowAssets) internal {\\n        uint256 newborrowAssetsLength = _newBorrowAssets.length;\\n        for(uint256 i; i < newborrowAssetsLength; ) {\\n            IERC20 borrowAsset = _newBorrowAssets[i];\\n\\n            _validateNewBorrowAsset(_setToken, borrowAsset);\\n\\n            borrowAssetEnabled[_setToken][borrowAsset] = true;\\n            enabledAssets[_setToken].borrowAssets.push(address(borrowAsset));\\n            unchecked { ++i; }\\n        }\\n        emit BorrowAssetsUpdated(_setToken, true, _newBorrowAssets);\\n    }\\n\\n    /**\\n     * @dev Updates SetToken's ability to use an asset as collateral on Aave\\n     */\\n    function _updateUseReserveAsCollateral(ISetToken _setToken, IERC20 _asset, bool _useAsCollateral) internal {\\n        /*\\n        Note: Aave ENABLES an asset to be used as collateral by `to` address in an `aToken.transfer(to, amount)` call provided\\n            1. msg.sender (from address) isn't the same as `to` address\\n            2. `to` address had zero aToken balance before the transfer\\n            3. transfer `amount` is greater than 0\\n\\n        Note: Aave DISABLES an asset to be used as collateral by `msg.sender`in an `aToken.transfer(to, amount)` call provided\\n            1. msg.sender (from address) isn't the same as `to` address\\n            2. msg.sender has zero balance after the transfer\\n\\n        Different states of the SetToken and what this function does in those states:\\n\\n            Case 1: Manager adds collateral asset to SetToken before first issuance\\n                - Since aToken.balanceOf(setToken) == 0, we do not call `setToken.invokeUserUseReserveAsCollateral` because Aave\\n                requires aToken balance to be greater than 0 before enabling/disabling the underlying asset to be used as collateral\\n                on Aave markets.\\n\\n            Case 2: First issuance of the SetToken\\n                - SetToken was initialized with aToken as default position\\n                - DebtIssuanceModule reads the default position and transfers corresponding aToken from the issuer to the SetToken\\n                - Aave enables aToken to be used as collateral by the SetToken\\n                - Manager calls lever() and the aToken is used as collateral to borrow other assets\\n\\n            Case 3: Manager removes collateral asset from the SetToken\\n                - Disable asset to be used as collateral on SetToken by calling `setToken.invokeSetUserUseReserveAsCollateral` with\\n                useAsCollateral equals false\\n                - Note: If health factor goes below 1 by removing the collateral asset, then Aave reverts on the above call, thus whole\\n                transaction reverts, and manager can't remove corresponding collateral asset\\n\\n            Case 4: Manager adds collateral asset after removing it\\n                - If aToken.balanceOf(setToken) > 0, we call `setToken.invokeUserUseReserveAsCollateral` and the corresponding aToken\\n                is re-enabled as collateral on Aave\\n\\n            Case 5: On redemption/delever/liquidated and aToken balance becomes zero\\n                - Aave disables aToken to be used as collateral by SetToken\\n\\n        Values of variables in below if condition and corresponding action taken:\\n\\n        ---------------------------------------------------------------------------------------------------------------------\\n        | usageAsCollateralEnabled |  _useAsCollateral |   aToken.balanceOf()  |     Action                                 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   true            |      X                |   Skip invoke. Save gas.                   |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   false           |   greater than 0      |   Invoke and set to false.                 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   true                   |   false           |   = 0                 |   Impossible case. Aave disables usage as  |\\n        |                          |                   |                       |   collateral when aToken balance becomes 0 |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   false           |     X                 |   Skip invoke. Save gas.                   |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   true            |   greater than 0      |   Invoke and set to true.                  |\\n        |--------------------------|-------------------|-----------------------|--------------------------------------------|\\n        |   false                  |   true            |   = 0                 |   Don't invoke. Will revert.               |\\n        ---------------------------------------------------------------------------------------------------------------------\\n        */\\n        (,,,,,,,,bool usageAsCollateralEnabled) = PROTOCOL_DATA_PROVIDER.getUserReserveData(address(_asset), address(_setToken));\\n        if (\\n            usageAsCollateralEnabled != _useAsCollateral\\n            && underlyingToReserveTokens[_asset].aToken.balanceOf(address(_setToken)) > 0\\n        ) {\\n            _setToken.invokeSetUserUseReserveAsCollateral(\\n                ILendingPool(LENDING_POOL_ADDRESSES_PROVIDER.getLendingPool()),\\n                address(_asset),\\n                _useAsCollateral\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Validate common requirements for lever and delever\\n     */\\n    function _validateCommon(ActionInfo memory _actionInfo) internal view {\\n        if (!collateralAssetEnabled[_actionInfo.setToken][_actionInfo.collateralAsset]) revert AaveLeverageModule__CollateralUsageDisabled(address(_actionInfo.collateralAsset));\\n        if (!borrowAssetEnabled[_actionInfo.setToken][_actionInfo.borrowAsset]) revert AaveLeverageModule__BorrowDisabled(address(_actionInfo.borrowAsset));\\n        if (_actionInfo.collateralAsset == _actionInfo.borrowAsset) revert AaveLeverageModule__CollateralAndBorrowMustDiffer(address(_actionInfo.collateralAsset), address(_actionInfo.borrowAsset));\\n        if (_actionInfo.notionalSendQuantity == 0) revert AaveLeverageModule__ZeroQuantity();\\n    }\\n\\n    /**\\n     * @dev Validates if a new asset can be added as collateral asset for given SetToken\\n     */\\n    function _validateNewCollateralAsset(ISetToken _setToken, IERC20 _asset) internal view {\\n        if (collateralAssetEnabled[_setToken][_asset]) revert AaveLeverageModule__CollateralIsEnabled();\\n\\n        (address aToken, , ) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_asset));\\n        address reserveTokenAToken = address(underlyingToReserveTokens[_asset].aToken);\\n        if (reserveTokenAToken != aToken) revert AaveLeverageModule__ATokenInvalid(reserveTokenAToken);\\n\\n        ( , , , , , bool usageAsCollateralEnabled, , , bool isActive, bool isFrozen) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_asset));\\n        // An active reserve is an alias for a valid reserve on Aave.\\n        // We are checking for the availability of the reserve directly on Aave rather than checking our internal `underlyingToReserveTokens` mappings,\\n        // because our mappings can be out-of-date if a new reserve is added to Aave\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n        // A frozen reserve doesn't allow any new deposit, borrow or rate swap but allows repayments, liquidations and withdrawals\\n        if (isFrozen) revert AaveLeverageModule__ReserveFrozen();\\n        if (!usageAsCollateralEnabled) revert AaveLeverageModule__CollateralUsageDisabled(address(_asset));\\n    }\\n\\n    /**\\n     * @dev Validates if a new asset can be added as borrow asset for given SetToken\\n     */\\n    function _validateNewBorrowAsset(ISetToken _setToken, IERC20 _asset) internal view {\\n        if (borrowAssetEnabled[_setToken][_asset]) revert AaveLeverageModule__BorrowIsEnabled();\\n\\n        ( , , address variableDebtToken) = PROTOCOL_DATA_PROVIDER.getReserveTokensAddresses(address(_asset));\\n        address reserveTokenVariableDebtToken = address(underlyingToReserveTokens[_asset].variableDebtToken);\\n        if (reserveTokenVariableDebtToken != variableDebtToken) revert AaveLeverageModule__VariableDebtTokenInvalid(reserveTokenVariableDebtToken);\\n\\n        (, , , , , , bool borrowingEnabled, , bool isActive, bool isFrozen) = PROTOCOL_DATA_PROVIDER.getReserveConfigurationData(address(_asset));\\n        if (!isActive) revert AaveLeverageModule__ReserveInactive();\\n        if (isFrozen) revert AaveLeverageModule__ReserveFrozen();\\n        if (!borrowingEnabled) revert AaveLeverageModule__ProtocolBorrowingDisabled();\\n    }\\n\\n    /**\\n     * @dev Reads aToken balance and calculates default position unit for given collateral aToken and SetToken\\n     *\\n     * @return uint256       default collateral position unit\\n     */\\n    function _getCollateralPosition(ISetToken _setToken, IAToken _aToken, uint256 _setTotalSupply) internal view returns (uint256) {\\n        uint256 collateralNotionalBalance = _aToken.balanceOf(address(_setToken));\\n        return collateralNotionalBalance.preciseDiv(_setTotalSupply);\\n    }\\n\\n    /**\\n     * @dev Reads variableDebtToken balance and calculates external position unit for given borrow asset and SetToken\\n     *\\n     * @return int256       external borrow position unit\\n     */\\n    function _getBorrowPosition(ISetToken _setToken, IERC20 _borrowAsset, uint256 _setTotalSupply) internal view returns (int256) {\\n        uint256 borrowNotionalBalance = underlyingToReserveTokens[_borrowAsset].variableDebtToken.balanceOf(address(_setToken));\\n        return borrowNotionalBalance.preciseDivCeil(_setTotalSupply).toInt256() * -1;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/protocol/integration/lib/AaveV2.sol\": {\r\n        \"AaveV2\": \"0x79c689ff3a05956e7afd770852d4ccdc087fe27a\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"_lendingPoolAddressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__ATokenInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__BorrowBalanceZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__BorrowDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__BorrowIsEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__CollateralAndBorrowMustDiffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__CollateralIsEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__CollateralUsageDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"component\",\"type\":\"int256\"}],\"name\":\"AaveLeverageModule__ComponentDebtNotNegative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drift\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDrift\",\"type\":\"uint256\"}],\"name\":\"AaveLeverageModule__DexDataMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveQuantity\",\"type\":\"uint256\"}],\"name\":\"AaveLeverageModule__ExcessiveSlippage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__IssuanceUninitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__ProtocolBorrowingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__ReserveFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__ReserveInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__SetTokenForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__SetTokenInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__TokenMappingExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"AaveLeverageModule__VariableDebtRemains\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"}],\"name\":\"AaveLeverageModule__VariableDebtTokenInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AaveLeverageModule__ZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressArrayUtils__ArrayItemNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedBalance\",\"type\":\"uint256\"}],\"name\":\"Invoke__PostTransferBalanceInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"integrationHash\",\"type\":\"bytes32\"}],\"name\":\"Module__AdapterInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Module__CallerNotInitializedModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__CallerNotManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleAndCaller\",\"type\":\"address\"}],\"name\":\"Module__ModuleInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenInvalidAndUninitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"Module__SetTokenNotPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"passed\",\"type\":\"bytes\"}],\"name\":\"Position__DataNotNull\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moduleInPosition\",\"type\":\"address\"}],\"name\":\"Position__UnexpectedModuleInFirstPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreciseUnitMath__DivisionByZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allowedDynamicExchangeAdapterDrift\",\"type\":\"uint256\"}],\"name\":\"AllowedDynamicExchangeAdapterDriftUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_anySetAllowed\",\"type\":\"bool\"}],\"name\":\"AnySetAllowedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_added\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"BorrowAssetsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_added\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"CollateralAssetsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_emergencyRepayer\",\"type\":\"address\"}],\"name\":\"EmergencyRepayerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_repayAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IExchangeAdapter\",\"name\":\"_exchangeAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRedeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRepayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"LeverageDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IExchangeAdapter\",\"name\":\"_exchangeAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBorrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalReceiveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"LeverageIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IAToken\",\"name\":\"_aToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IVariableDebtToken\",\"name\":\"_variableDebtToken\",\"type\":\"address\"}],\"name\":\"ReserveTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_added\",\"type\":\"bool\"}],\"name\":\"SetTokenStatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LENDING_POOL_ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_DATA_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notionalSendQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract IExchangeAdapter\",\"name\":\"_tradeAdapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_tradeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tradeMaxDrift\",\"type\":\"uint256\"}],\"name\":\"_getExchangeAdapterInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExchangeAdapter\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"_isDynamicDataAdapter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_newBorrowAssets\",\"type\":\"address[]\"}],\"name\":\"addBorrowAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_newCollateralAssets\",\"type\":\"address[]\"}],\"name\":\"addCollateralAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"addUnderlyingToReserveTokensMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSetTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anySetAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowAssetEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralAssetEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_setTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEquity\",\"type\":\"bool\"}],\"name\":\"componentIssueHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_setTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEquity\",\"type\":\"bool\"}],\"name\":\"componentRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_repayAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemQuantityUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRepayQuantityUnits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tradeAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_tradeData\",\"type\":\"bytes\"}],\"name\":\"delever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_repayAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemQuantityUnits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tradeAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_tradeData\",\"type\":\"bytes\"}],\"name\":\"deleverToZeroBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRepayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"getEnabledAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_borrowAssets\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowQuantityUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceiveQuantityUnits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tradeAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_tradeData\",\"type\":\"bytes\"}],\"name\":\"lever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moduleIssueHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moduleRedeemHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IDebtIssuanceModule\",\"name\":\"_debtIssuanceModule\",\"type\":\"address\"}],\"name\":\"registerToModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_borrowAssets\",\"type\":\"address[]\"}],\"name\":\"removeBorrowAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"}],\"name\":\"removeCollateralAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyingToReserveTokens\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"contract IVariableDebtToken\",\"name\":\"variableDebtToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedDynamicExchangeAdapterDrift\",\"type\":\"uint256\"}],\"name\":\"updateAllowedDynamicExchangeAdapterDrift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAllowedSetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_anySetAllowed\",\"type\":\"bool\"}],\"name\":\"updateAnySetAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyRepayer\",\"type\":\"address\"}],\"name\":\"updateEmergencyRepayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AaveLeverageModule", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000126eaf2d1c5ba5ea9baeddbf3f3695673558766e000000000000000000000000d05e3e715d945b59290df0ae8ef85c1bdb684744", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}