{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AeraVaultV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./dependencies/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/ERC165Checker.sol\\\";\\nimport \\\"./interfaces/IBManagedPoolFactory.sol\\\";\\nimport \\\"./interfaces/IBManagedPoolController.sol\\\";\\nimport \\\"./interfaces/IBMerkleOrchard.sol\\\";\\nimport \\\"./interfaces/IBVault.sol\\\";\\nimport \\\"./interfaces/IBManagedPool.sol\\\";\\nimport \\\"./interfaces/IAeraVaultV1.sol\\\";\\nimport \\\"./interfaces/IWithdrawalValidator.sol\\\";\\n\\n/// @title Risk-managed treasury vault.\\n/// @notice Managed n-asset vault that supports withdrawals\\n///         in line with a pre-defined validator contract.\\n/// @dev Vault owner is the asset owner.\\ncontract AeraVaultV1 is IAeraVaultV1, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// STORAGE ///\\n\\n    uint256 internal constant ONE = 10**18;\\n\\n    /// @notice Minimum period for weight change duration.\\n    uint256 private constant MINIMUM_WEIGHT_CHANGE_DURATION = 4 hours;\\n\\n    /// @notice Maximum absolute change in swap fee.\\n    uint256 private constant MAXIMUM_SWAP_FEE_PERCENT_CHANGE = 0.005e18;\\n\\n    /// @dev Address to represent unset guardian in events.\\n    address private constant UNSET_GUARDIAN_ADDRESS = address(0);\\n\\n    /// @notice Largest possible notice period for vault termination (2 months).\\n    uint256 private constant MAX_NOTICE_PERIOD = 60 days;\\n\\n    /// @notice Cooldown period for updating swap fee (1 minute).\\n    uint256 private constant SWAP_FEE_COOLDOWN_PERIOD = 1 minutes;\\n\\n    /// @notice Largest possible weight change ratio per one second.\\n    /// @dev It's the increment/decrement factor per one second.\\n    ///      increment/decrement factor per n seconds: Fn = f * n\\n    ///      Weight growth range for n seconds: [1 / Fn - 1, Fn - 1]\\n    ///      E.g. increment/decrement factor per 2000 seconds is 2\\n    ///      Weight growth range for 2000 seconds is [-50%, 100%]\\n    uint256 private constant MAX_WEIGHT_CHANGE_RATIO = 10**15;\\n\\n    /// @notice Largest management fee earned proportion per one second.\\n    /// @dev 0.0000001% per second, i.e. 3.1536% per year.\\n    ///      0.0000001% * (365 * 24 * 60 * 60) = 3.1536%\\n    uint256 private constant MAX_MANAGEMENT_FEE = 10**9;\\n\\n    /// @notice Balancer Vault.\\n    IBVault public immutable bVault;\\n\\n    /// @notice Balancer Managed Pool.\\n    IBManagedPool public immutable pool;\\n\\n    /// @notice Balancer Managed Pool Controller.\\n    IBManagedPoolController public immutable poolController;\\n\\n    /// @notice Balancer Merkle Orchard.\\n    IBMerkleOrchard public immutable merkleOrchard;\\n\\n    /// @notice Pool ID of Balancer pool on Vault.\\n    bytes32 public immutable poolId;\\n\\n    /// @notice Notice period for vault termination (in seconds).\\n    uint256 public immutable noticePeriod;\\n\\n    /// @notice Verifies withdraw limits.\\n    IWithdrawalValidator public immutable validator;\\n\\n    /// @notice Management fee earned proportion per second.\\n    /// @dev 10**18 is 100%\\n    uint256 public immutable managementFee;\\n\\n    /// STORAGE SLOT START ///\\n\\n    /// @notice Describes vault purpose and modelling assumptions for differentiating between vaults\\n    /// @dev string cannot be immutable bytecode but only set in constructor\\n    // slither-disable-next-line immutable-states\\n    string public description;\\n\\n    /// @notice Indicates that the Vault has been initialized\\n    bool public initialized;\\n\\n    /// @notice Indicates that the Vault has been finalized\\n    bool public finalized;\\n\\n    /// @notice Controls vault parameters.\\n    address public guardian;\\n\\n    /// @notice Pending account to accept ownership of vault.\\n    address public pendingOwner;\\n\\n    /// @notice Timestamp when notice elapses or 0 if not yet set\\n    uint256 public noticeTimeoutAt;\\n\\n    /// @notice Last timestamp where guardian fee index was locked.\\n    uint256 public lastFeeCheckpoint = type(uint256).max;\\n\\n    /// @notice Fee earned amount for each guardian\\n    mapping(address => uint256[]) public guardiansFee;\\n\\n    /// @notice Total guardian fee earned amount\\n    uint256[] public guardiansFeeTotal;\\n\\n    /// @notice Last timestamp where swap fee was updated.\\n    uint256 public lastSwapFeeCheckpoint;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the vault is created.\\n    /// @param factory Balancer Managed Pool factory address.\\n    /// @param name Name of Pool Token.\\n    /// @param symbol Symbol of Pool Token.\\n    /// @param tokens Token addresses.\\n    /// @param weights Token weights.\\n    /// @param swapFeePercentage Pool swap fee.\\n    /// @param guardian Vault guardian address.\\n    /// @param validator Withdrawal validator contract address.\\n    /// @param noticePeriod Notice period (in seconds).\\n    /// @param managementFee Management fee earned proportion per second.\\n    /// @param merkleOrchard Merkle Orchard address.\\n    /// @param description Vault description.\\n    event Created(\\n        address indexed factory,\\n        string name,\\n        string symbol,\\n        IERC20[] tokens,\\n        uint256[] weights,\\n        uint256 swapFeePercentage,\\n        address indexed guardian,\\n        address indexed validator,\\n        uint256 noticePeriod,\\n        uint256 managementFee,\\n        address merkleOrchard,\\n        string description\\n    );\\n\\n    /// @notice Emitted when tokens are deposited.\\n    /// @param requestedAmounts Requested amounts to deposit.\\n    /// @param amounts Deposited amounts.\\n    /// @param weights Token weights following deposit.\\n    event Deposit(\\n        uint256[] requestedAmounts,\\n        uint256[] amounts,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param requestedAmounts Requested amounts to withdraw.\\n    /// @param amounts Withdrawn amounts.\\n    /// @param allowances Token withdrawal allowances.\\n    /// @param weights Token weights following withdrawal.\\n    event Withdraw(\\n        uint256[] requestedAmounts,\\n        uint256[] amounts,\\n        uint256[] allowances,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when management fees are withdrawn.\\n    /// @param guardian Guardian address.\\n    /// @param amounts Withdrawn amounts.\\n    event DistributeGuardianFees(address indexed guardian, uint256[] amounts);\\n\\n    /// @notice Emitted when guardian is changed.\\n    /// @param previousGuardian Previous guardian address.\\n    /// @param guardian New guardian address.\\n    event GuardianChanged(\\n        address indexed previousGuardian,\\n        address indexed guardian\\n    );\\n\\n    /// @notice Emitted when updateWeightsGradually is called.\\n    /// @param startTime Start timestamp of updates.\\n    /// @param endTime End timestamp of updates.\\n    /// @param weights Target weights of tokens.\\n    event UpdateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] weights\\n    );\\n\\n    /// @notice Emitted when cancelWeightUpdates is called.\\n    /// @param weights Current weights of tokens.\\n    event CancelWeightUpdates(uint256[] weights);\\n\\n    /// @notice Emitted when swap is enabled/disabled.\\n    /// @param swapEnabled New state of swap.\\n    event SetSwapEnabled(bool swapEnabled);\\n\\n    /// @notice Emitted when enableTradingWithWeights is called.\\n    /// @param time timestamp of updates.\\n    /// @param weights Target weights of tokens.\\n    event EnabledTradingWithWeights(uint256 time, uint256[] weights);\\n\\n    /// @notice Emitted when swap fee is updated.\\n    /// @param swapFee New swap fee.\\n    event SetSwapFee(uint256 swapFee);\\n\\n    /// @notice Emitted when initiateFinalization is called.\\n    /// @param noticeTimeoutAt Timestamp for notice timeout.\\n    event FinalizationInitiated(uint256 noticeTimeoutAt);\\n\\n    /// @notice Emitted when vault is finalized.\\n    /// @param caller Address of finalizer.\\n    /// @param amounts Returned token amounts.\\n    event Finalized(address indexed caller, uint256[] amounts);\\n\\n    /// @notice Emitted when transferOwnership is called.\\n    /// @param currentOwner Address of current owner.\\n    /// @param pendingOwner Address of pending owner.\\n    event OwnershipTransferOffered(\\n        address indexed currentOwner,\\n        address indexed pendingOwner\\n    );\\n\\n    /// @notice Emitted when cancelOwnershipTransfer is called.\\n    /// @param currentOwner Address of current owner.\\n    /// @param canceledOwner Address of canceled owner.\\n    event OwnershipTransferCanceled(\\n        address indexed currentOwner,\\n        address indexed canceledOwner\\n    );\\n\\n    /// ERRORS ///\\n\\n    error Aera__ValueLengthIsNotSame(uint256 numTokens, uint256 numValues);\\n    error Aera__DifferentTokensInPosition(\\n        address actual,\\n        address sortedToken,\\n        uint256 index\\n    );\\n    error Aera__ValidatorIsNotMatched(\\n        uint256 numTokens,\\n        uint256 numAllowances\\n    );\\n    error Aera__ValidatorIsNotValid(address validator);\\n    error Aera__ManagementFeeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__NoticePeriodIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__NoticeTimeoutNotElapsed(uint256 noticeTimeoutAt);\\n    error Aera__GuardianIsZeroAddress();\\n    error Aera__GuardianIsOwner(address newGuardian);\\n    error Aera__CallerIsNotGuardian();\\n    error Aera__SwapFeePercentageChangeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__DescriptionIsEmpty();\\n    error Aera__CallerIsNotOwnerOrGuardian();\\n    error Aera__WeightChangeEndBeforeStart();\\n    error Aera__WeightChangeStartTimeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightChangeEndTimeIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightChangeDurationIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__WeightChangeRatioIsAboveMax(\\n        address token,\\n        uint256 actual,\\n        uint256 max\\n    );\\n    error Aera__WeightIsAboveMax(uint256 actual, uint256 max);\\n    error Aera__WeightIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__AmountIsBelowMin(uint256 actual, uint256 min);\\n    error Aera__AmountExceedAvailable(\\n        address token,\\n        uint256 amount,\\n        uint256 available\\n    );\\n    error Aera__NoAvailableFeeForCaller(address caller);\\n    error Aera__BalanceChangedInCurrentBlock();\\n    error Aera__CannotSweepPoolToken();\\n    error Aera__PoolSwapIsAlreadyEnabled();\\n    error Aera__CannotSetSwapFeeBeforeCooldown();\\n    error Aera__FinalizationNotInitiated();\\n    error Aera__VaultNotInitialized();\\n    error Aera__VaultIsAlreadyInitialized();\\n    error Aera__VaultIsFinalizing();\\n    error Aera__VaultIsAlreadyFinalized();\\n    error Aera__VaultIsNotRenounceable();\\n    error Aera__OwnerIsZeroAddress();\\n    error Aera__NotPendingOwner();\\n    error Aera__NoPendingOwnershipTransfer();\\n\\n    /// MODIFIERS ///\\n\\n    /// @dev Throws if called by any account other than the guardian.\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert Aera__CallerIsNotGuardian();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner or guardian.\\n    modifier onlyOwnerOrGuardian() {\\n        if (msg.sender != owner() && msg.sender != guardian) {\\n            revert Aera__CallerIsNotOwnerOrGuardian();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before vault is initialized.\\n    modifier whenInitialized() {\\n        if (!initialized) {\\n            revert Aera__VaultNotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Throws if called before finalization is initiated.\\n    modifier whenNotFinalizing() {\\n        if (noticeTimeoutAt != 0) {\\n            revert Aera__VaultIsFinalizing();\\n        }\\n        _;\\n    }\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Initialize the contract by deploying new Balancer pool using the provided factory.\\n    /// @dev Tokens should be unique. Validator should conform to interface.\\n    ///      These are checked by Balancer in internal transactions:\\n    ///       If tokens are sorted in ascending order.\\n    ///       If swapFeePercentage is greater than minimum and less than maximum.\\n    ///       If total sum of weights is one.\\n    /// @param vaultParams Struct vault parameter.\\n    constructor(NewVaultParams memory vaultParams) {\\n        uint256 numTokens = vaultParams.tokens.length;\\n\\n        if (numTokens != vaultParams.weights.length) {\\n            revert Aera__ValueLengthIsNotSame(\\n                numTokens,\\n                vaultParams.weights.length\\n            );\\n        }\\n        if (\\n            !ERC165Checker.supportsInterface(\\n                vaultParams.validator,\\n                type(IWithdrawalValidator).interfaceId\\n            )\\n        ) {\\n            revert Aera__ValidatorIsNotValid(vaultParams.validator);\\n        }\\n        // Use new block to avoid stack too deep issue\\n        {\\n            uint256 numAllowances = IWithdrawalValidator(vaultParams.validator)\\n                .allowance()\\n                .length;\\n            if (numTokens != numAllowances) {\\n                revert Aera__ValidatorIsNotMatched(numTokens, numAllowances);\\n            }\\n        }\\n        if (vaultParams.managementFee > MAX_MANAGEMENT_FEE) {\\n            revert Aera__ManagementFeeIsAboveMax(\\n                vaultParams.managementFee,\\n                MAX_MANAGEMENT_FEE\\n            );\\n        }\\n        if (vaultParams.noticePeriod > MAX_NOTICE_PERIOD) {\\n            revert Aera__NoticePeriodIsAboveMax(\\n                vaultParams.noticePeriod,\\n                MAX_NOTICE_PERIOD\\n            );\\n        }\\n\\n        if (bytes(vaultParams.description).length == 0) {\\n            revert Aera__DescriptionIsEmpty();\\n        }\\n        checkGuardianAddress(vaultParams.guardian);\\n\\n        address[] memory assetManagers = new address[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            assetManagers[i] = address(this);\\n        }\\n\\n        // Deploys a new ManagedPool from ManagedPoolFactory\\n        // create(\\n        //     ManagedPool.NewPoolParams memory poolParams,\\n        //     BasePoolController.BasePoolRights calldata basePoolRights,\\n        //     ManagedPoolController.ManagedPoolRights calldata managedPoolRights,\\n        //     uint256 minWeightChangeDuration,\\n        // )\\n        //\\n        // - poolParams.mustAllowlistLPs should be true to prevent other accounts\\n        //   to use joinPool\\n        // - minWeightChangeDuration should be zero so that weights can be updated immediately\\n        //   in deposit, withdraw, cancelWeightUpdates and enableTradingWithWeights.\\n        pool = IBManagedPool(\\n            IBManagedPoolFactory(vaultParams.factory).create(\\n                IBManagedPoolFactory.NewPoolParams({\\n                    vault: IBVault(address(0)),\\n                    name: vaultParams.name,\\n                    symbol: vaultParams.symbol,\\n                    tokens: vaultParams.tokens,\\n                    normalizedWeights: vaultParams.weights,\\n                    assetManagers: assetManagers,\\n                    swapFeePercentage: vaultParams.swapFeePercentage,\\n                    pauseWindowDuration: 0,\\n                    bufferPeriodDuration: 0,\\n                    owner: address(this),\\n                    swapEnabledOnStart: false,\\n                    mustAllowlistLPs: true,\\n                    managementSwapFeePercentage: 0\\n                }),\\n                IBManagedPoolFactory.BasePoolRights({\\n                    canTransferOwnership: false,\\n                    canChangeSwapFee: true,\\n                    canUpdateMetadata: false\\n                }),\\n                IBManagedPoolFactory.ManagedPoolRights({\\n                    canChangeWeights: true,\\n                    canDisableSwaps: true,\\n                    canSetMustAllowlistLPs: false,\\n                    canSetCircuitBreakers: false,\\n                    canChangeTokens: false\\n                }),\\n                0\\n            )\\n        );\\n\\n        // slither-disable-next-line reentrancy-benign\\n        bVault = pool.getVault();\\n        poolController = IBManagedPoolController(pool.getOwner());\\n        merkleOrchard = IBMerkleOrchard(vaultParams.merkleOrchard);\\n        poolId = pool.getPoolId();\\n        guardian = vaultParams.guardian;\\n        validator = IWithdrawalValidator(vaultParams.validator);\\n        noticePeriod = vaultParams.noticePeriod;\\n        description = vaultParams.description;\\n        managementFee = vaultParams.managementFee;\\n        guardiansFee[guardian] = new uint256[](numTokens);\\n        guardiansFeeTotal = new uint256[](numTokens);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Created(\\n            vaultParams.factory,\\n            vaultParams.name,\\n            vaultParams.symbol,\\n            vaultParams.tokens,\\n            vaultParams.weights,\\n            vaultParams.swapFeePercentage,\\n            vaultParams.guardian,\\n            vaultParams.validator,\\n            vaultParams.noticePeriod,\\n            vaultParams.managementFee,\\n            vaultParams.merkleOrchard,\\n            vaultParams.description\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit GuardianChanged(UNSET_GUARDIAN_ADDRESS, vaultParams.guardian);\\n    }\\n\\n    /// PROTOCOL API ///\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initialDeposit(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (initialized) {\\n            revert Aera__VaultIsAlreadyInitialized();\\n        }\\n\\n        initialized = true;\\n        lastFeeCheckpoint = block.timestamp;\\n\\n        IERC20[] memory tokens = getTokens();\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory balances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            balances[i] = depositToken(tokens[i], amounts[i]);\\n        }\\n\\n        bytes memory initUserData = abi.encode(IBVault.JoinKind.INIT, amounts);\\n\\n        IBVault.JoinPoolRequest memory joinPoolRequest = IBVault\\n            .JoinPoolRequest({\\n                assets: tokens,\\n                maxAmountsIn: balances,\\n                userData: initUserData,\\n                fromInternalBalance: false\\n            });\\n        bVault.joinPool(poolId, address(this), address(this), joinPoolRequest);\\n\\n        setSwapEnabled(true);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function deposit(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        depositTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line incorrect-equality\\n    function depositIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        (, , uint256 lastChangeBlock) = getTokensData();\\n\\n        if (lastChangeBlock == block.number) {\\n            revert Aera__BalanceChangedInCurrentBlock();\\n        }\\n\\n        depositTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function withdraw(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        withdrawTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line incorrect-equality\\n    function withdrawIfBalanceUnchanged(TokenValue[] calldata tokenWithAmount)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        (, , uint256 lastChangeBlock) = getTokensData();\\n\\n        if (lastChangeBlock == block.number) {\\n            revert Aera__BalanceChangedInCurrentBlock();\\n        }\\n\\n        withdrawTokens(tokenWithAmount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function initiateFinalization()\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        lockGuardianFees();\\n        // slither-disable-next-line reentrancy-no-eth\\n        noticeTimeoutAt = block.timestamp + noticePeriod;\\n        setSwapEnabled(false);\\n        emit FinalizationInitiated(noticeTimeoutAt);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line timestamp\\n    function finalize()\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        whenInitialized\\n    {\\n        if (finalized) {\\n            revert Aera__VaultIsAlreadyFinalized();\\n        }\\n        if (noticeTimeoutAt == 0) {\\n            revert Aera__FinalizationNotInitiated();\\n        }\\n        if (noticeTimeoutAt > block.timestamp) {\\n            revert Aera__NoticeTimeoutNotElapsed(noticeTimeoutAt);\\n        }\\n\\n        finalized = true;\\n\\n        uint256[] memory amounts = returnFunds();\\n        emit Finalized(owner(), amounts);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // slither-disable-next-line timestamp\\n    function setGuardian(address newGuardian)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n    {\\n        checkGuardianAddress(newGuardian);\\n\\n        if (initialized && noticeTimeoutAt == 0) {\\n            lockGuardianFees();\\n        }\\n\\n        if (guardiansFee[newGuardian].length == 0) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            guardiansFee[newGuardian] = new uint256[](getTokens().length);\\n        }\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit GuardianChanged(guardian, newGuardian);\\n\\n        // slither-disable-next-line missing-zero-check\\n        guardian = newGuardian;\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // prettier-ignore\\n    function sweep(address token, uint256 amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (token == address(pool)) {\\n            revert Aera__CannotSweepPoolToken();\\n        }\\n        IERC20(token).safeTransfer(owner(), amount);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function enableTradingRiskingArbitrage()\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        setSwapEnabled(true);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function enableTradingWithWeights(TokenValue[] calldata tokenWithWeight)\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        if (pool.getSwapEnabled()) {\\n            revert Aera__PoolSwapIsAlreadyEnabled();\\n        }\\n\\n        IERC20[] memory tokens = getTokens();\\n\\n        uint256[] memory weights = getValuesFromTokenWithValues(\\n            tokenWithWeight,\\n            tokens\\n        );\\n\\n        poolController.updateWeightsGradually(\\n            block.timestamp,\\n            block.timestamp,\\n            weights\\n        );\\n        poolController.setSwapEnabled(true);\\n        // slither-disable-next-line reentrancy-events\\n        emit EnabledTradingWithWeights(block.timestamp, weights);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function disableTrading()\\n        external\\n        override\\n        onlyOwnerOrGuardian\\n        whenInitialized\\n    {\\n        setSwapEnabled(false);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    // prettier-ignore\\n    function claimRewards(\\n        IBMerkleOrchard.Claim[] calldata claims,\\n        IERC20[] calldata tokens\\n    )\\n        external\\n        override\\n        onlyOwner\\n        whenInitialized\\n    {\\n        merkleOrchard.claimDistributions(owner(), claims, tokens);\\n    }\\n\\n    /// GUARDIAN API ///\\n\\n    /// @inheritdoc IGuardianAPI\\n    // slither-disable-next-line timestamp\\n    function updateWeightsGradually(\\n        TokenValue[] calldata tokenWithWeight,\\n        uint256 startTime,\\n        uint256 endTime\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        // These are to protect against the following vulnerability\\n        // https://forum.balancer.fi/t/vulnerability-disclosure/3179\\n        if (startTime > type(uint32).max) {\\n            revert Aera__WeightChangeStartTimeIsAboveMax(\\n                startTime,\\n                type(uint32).max\\n            );\\n        }\\n        if (endTime > type(uint32).max) {\\n            revert Aera__WeightChangeEndTimeIsAboveMax(\\n                endTime,\\n                type(uint32).max\\n            );\\n        }\\n\\n        startTime = Math.max(block.timestamp, startTime);\\n        if (startTime > endTime) {\\n            revert Aera__WeightChangeEndBeforeStart();\\n        }\\n        if (startTime + MINIMUM_WEIGHT_CHANGE_DURATION > endTime) {\\n            revert Aera__WeightChangeDurationIsBelowMin(\\n                endTime - startTime,\\n                MINIMUM_WEIGHT_CHANGE_DURATION\\n            );\\n        }\\n\\n        // Check if weight change ratio is exceeded\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        IERC20[] memory tokens = getTokens();\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory targetWeights = getValuesFromTokenWithValues(\\n            tokenWithWeight,\\n            tokens\\n        );\\n        uint256 duration = endTime - startTime;\\n        uint256 maximumRatio = MAX_WEIGHT_CHANGE_RATIO * duration;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 changeRatio = getWeightChangeRatio(\\n                weights[i],\\n                targetWeights[i]\\n            );\\n\\n            if (changeRatio > maximumRatio) {\\n                revert Aera__WeightChangeRatioIsAboveMax(\\n                    address(tokens[i]),\\n                    changeRatio,\\n                    maximumRatio\\n                );\\n            }\\n        }\\n\\n        poolController.updateWeightsGradually(\\n            startTime,\\n            endTime,\\n            targetWeights\\n        );\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit UpdateWeightsGradually(startTime, endTime, targetWeights);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    function cancelWeightUpdates()\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256 numWeights = weights.length;\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numWeights; i++) {\\n            weightSum += weights[i];\\n        }\\n\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit CancelWeightUpdates(weights);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    // slither-disable-next-line timestamp\\n    function setSwapFee(uint256 newSwapFee)\\n        external\\n        override\\n        nonReentrant\\n        onlyGuardian\\n    {\\n        if (\\n            block.timestamp < lastSwapFeeCheckpoint + SWAP_FEE_COOLDOWN_PERIOD\\n        ) {\\n            revert Aera__CannotSetSwapFeeBeforeCooldown();\\n        }\\n        lastSwapFeeCheckpoint = block.timestamp;\\n\\n        uint256 oldSwapFee = pool.getSwapFeePercentage();\\n\\n        uint256 absoluteDelta = (newSwapFee > oldSwapFee)\\n            ? newSwapFee - oldSwapFee\\n            : oldSwapFee - newSwapFee;\\n        if (absoluteDelta > MAXIMUM_SWAP_FEE_PERCENT_CHANGE) {\\n            revert Aera__SwapFeePercentageChangeIsAboveMax(\\n                absoluteDelta,\\n                MAXIMUM_SWAP_FEE_PERCENT_CHANGE\\n            );\\n        }\\n\\n        poolController.setSwapFeePercentage(newSwapFee);\\n        // slither-disable-next-line reentrancy-events\\n        emit SetSwapFee(newSwapFee);\\n    }\\n\\n    /// @inheritdoc IGuardianAPI\\n    function claimGuardianFees()\\n        external\\n        override\\n        nonReentrant\\n        whenInitialized\\n        whenNotFinalizing\\n    {\\n        if (msg.sender == guardian) {\\n            lockGuardianFees();\\n        }\\n\\n        if (guardiansFee[msg.sender].length == 0) {\\n            revert Aera__NoAvailableFeeForCaller(msg.sender);\\n        }\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory fees = guardiansFee[msg.sender];\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            // slither-disable-next-line reentrancy-no-eth\\n            guardiansFeeTotal[i] -= fees[i];\\n            guardiansFee[msg.sender][i] = 0;\\n            tokens[i].safeTransfer(msg.sender, fees[i]);\\n        }\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        if (msg.sender != guardian) {\\n            delete guardiansFee[msg.sender];\\n        }\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit DistributeGuardianFees(msg.sender, fees);\\n    }\\n\\n    /// MULTI ASSET VAULT INTERFACE ///\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function holding(uint256 index) external view override returns (uint256) {\\n        uint256[] memory amounts = getHoldings();\\n        return amounts[index];\\n    }\\n\\n    /// @inheritdoc IMultiAssetVault\\n    function getHoldings()\\n        public\\n        view\\n        override\\n        returns (uint256[] memory amounts)\\n    {\\n        (, amounts, ) = getTokensData();\\n    }\\n\\n    /// USER API ///\\n\\n    /// @inheritdoc IUserAPI\\n    // prettier-ignore\\n    function isSwapEnabled()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return pool.getSwapEnabled();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    // prettier-ignore\\n    function getSwapFee()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return pool.getSwapFeePercentage();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokensData()\\n        public\\n        view\\n        override\\n        returns (\\n            IERC20[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        return bVault.getPoolTokens(poolId);\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getTokens()\\n        public\\n        view\\n        override\\n        returns (IERC20[] memory tokens)\\n    {\\n        (tokens, , ) = getTokensData();\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function getNormalizedWeights()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return pool.getNormalizedWeights();\\n    }\\n\\n    /// @notice Disable ownership renounceable\\n    function renounceOwnership() public override onlyOwner {\\n        revert Aera__VaultIsNotRenounceable();\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function transferOwnership(address newOwner)\\n        public\\n        override(IProtocolAPI, Ownable)\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            revert Aera__OwnerIsZeroAddress();\\n        }\\n        pendingOwner = newOwner;\\n        emit OwnershipTransferOffered(owner(), newOwner);\\n    }\\n\\n    /// @inheritdoc IProtocolAPI\\n    function cancelOwnershipTransfer() external override onlyOwner {\\n        if (pendingOwner == address(0)) {\\n            revert Aera__NoPendingOwnershipTransfer();\\n        }\\n        emit OwnershipTransferCanceled(owner(), pendingOwner);\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @inheritdoc IUserAPI\\n    function acceptOwnership() external override {\\n        if (msg.sender != pendingOwner) {\\n            revert Aera__NotPendingOwner();\\n        }\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n    }\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Deposit amount of tokens.\\n    /// @dev Will only be called by deposit() and depositIfBalanceUnchanged()\\n    ///      It calls updateWeights() function which cancels\\n    ///      current active weights change schedule.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function depositTokens(TokenValue[] calldata tokenWithAmount) internal {\\n        lockGuardianFees();\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n        uint256 numTokens = tokens.length;\\n\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256[] memory newBalances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                newBalances[i] = depositToken(tokens[i], amounts[i]);\\n            }\\n        }\\n\\n        /// Set managed balance of pool as amounts\\n        /// i.e. Deposit amounts of tokens to pool from Aera Vault\\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.UPDATE);\\n        /// Decrease managed balance and increase cash balance of pool\\n        /// i.e. Move amounts from managed balance to cash balance\\n        updatePoolBalance(newBalances, IBVault.PoolBalanceOpKind.DEPOSIT);\\n\\n        uint256[] memory newHoldings = getHoldings();\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                weights[i] = (weights[i] * newHoldings[i]) / holdings[i];\\n                newBalances[i] = newHoldings[i] - holdings[i];\\n            }\\n\\n            weightSum += weights[i];\\n        }\\n\\n        /// It cancels current active weights change schedule\\n        /// and update weights with newWeights\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Deposit(amounts, newBalances, pool.getNormalizedWeights());\\n    }\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev Will only be called by withdraw() and withdrawIfBalanceUnchanged()\\n    ///      It calls updateWeights() function which cancels\\n    ///      current active weights change schedule.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdrawTokens(TokenValue[] calldata tokenWithAmount) internal {\\n        lockGuardianFees();\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n        uint256 numTokens = tokens.length;\\n\\n        uint256[] memory allowances = validator.allowance();\\n        uint256[] memory weights = pool.getNormalizedWeights();\\n        uint256[] memory balances = new uint256[](numTokens);\\n        uint256[] memory amounts = getValuesFromTokenWithValues(\\n            tokenWithAmount,\\n            tokens\\n        );\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] > holdings[i] || amounts[i] > allowances[i]) {\\n                revert Aera__AmountExceedAvailable(\\n                    address(tokens[i]),\\n                    amounts[i],\\n                    Math.min(holdings[i], allowances[i])\\n                );\\n            }\\n\\n            if (amounts[i] != 0) {\\n                balances[i] = tokens[i].balanceOf(address(this));\\n            }\\n        }\\n\\n        withdrawFromPool(amounts);\\n\\n        uint256 weightSum;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (amounts[i] != 0) {\\n                balances[i] = tokens[i].balanceOf(address(this)) - balances[i];\\n                tokens[i].safeTransfer(owner(), balances[i]);\\n\\n                uint256 newBalance = holdings[i] - amounts[i];\\n                weights[i] = (weights[i] * newBalance) / holdings[i];\\n            }\\n\\n            weightSum += weights[i];\\n        }\\n\\n        /// It cancels current active weights change schedule\\n        /// and update weights with newWeights\\n        updateWeights(weights, weightSum);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Withdraw(\\n            amounts,\\n            balances,\\n            allowances,\\n            pool.getNormalizedWeights()\\n        );\\n    }\\n\\n    /// @notice Withdraw tokens from Balancer Pool to Aera Vault\\n    /// @dev Will only be called by withdrawTokens(), returnFunds()\\n    ///      and lockGuardianFees()\\n    function withdrawFromPool(uint256[] memory amounts) internal {\\n        uint256[] memory managed = new uint256[](amounts.length);\\n\\n        /// Decrease cash balance and increase managed balance of pool\\n        /// i.e. Move amounts from cash balance to managed balance\\n        /// and withdraw token amounts from pool to Aera Vault\\n        updatePoolBalance(amounts, IBVault.PoolBalanceOpKind.WITHDRAW);\\n        /// Adjust managed balance of pool as the zero array\\n        updatePoolBalance(managed, IBVault.PoolBalanceOpKind.UPDATE);\\n    }\\n\\n    /// @notice Calculate guardian fees and lock the tokens in Vault.\\n    /// @dev Will only be called by claimGuardianFees(), setGuardian(),\\n    ///      initiateFinalization(), deposit() and withdraw().\\n    // slither-disable-next-line timestamp\\n    function lockGuardianFees() internal {\\n        if (managementFee == 0) {\\n            return;\\n        }\\n        if (block.timestamp <= lastFeeCheckpoint) {\\n            return;\\n        }\\n\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        uint256[] memory newFees = new uint256[](numTokens);\\n        uint256[] memory balances = new uint256[](numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            balances[i] = tokens[i].balanceOf(address(this));\\n            newFees[i] =\\n                (holdings[i] *\\n                    (block.timestamp - lastFeeCheckpoint) *\\n                    managementFee) /\\n                ONE;\\n        }\\n\\n        lastFeeCheckpoint = block.timestamp;\\n\\n        withdrawFromPool(newFees);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            newFees[i] = tokens[i].balanceOf(address(this)) - balances[i];\\n            // slither-disable-next-line reentrancy-benign\\n            guardiansFee[guardian][i] += newFees[i];\\n            guardiansFeeTotal[i] += newFees[i];\\n        }\\n    }\\n\\n    /// @notice Calculate change ratio for weight upgrade.\\n    /// @dev Will only be called by updateWeightsGradually().\\n    /// @param weight Current weight.\\n    /// @param targetWeight Target weight.\\n    /// @return Change ratio(>1) from current weight to target weight.\\n    function getWeightChangeRatio(uint256 weight, uint256 targetWeight)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            weight > targetWeight\\n                ? (ONE * weight) / targetWeight\\n                : (ONE * targetWeight) / weight;\\n    }\\n\\n    /// @notice Return an array of values from given tokenWithValues.\\n    /// @dev Will only be called by enableTradingWithWeights(), updateWeightsGradually().\\n    ///      initialDeposit(), depositTokens() and withdrawTokens().\\n    ///      The values could be amounts or weights.\\n    /// @param tokenWithValues Tokens with values.\\n    /// @param tokens Array of pool tokens.\\n    /// @return Array of values.\\n    function getValuesFromTokenWithValues(\\n        TokenValue[] calldata tokenWithValues,\\n        IERC20[] memory tokens\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = tokens.length;\\n\\n        if (numTokens != tokenWithValues.length) {\\n            revert Aera__ValueLengthIsNotSame(\\n                numTokens,\\n                tokenWithValues.length\\n            );\\n        }\\n\\n        uint256[] memory values = new uint256[](numTokens);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (address(tokenWithValues[i].token) != address(tokens[i])) {\\n                revert Aera__DifferentTokensInPosition(\\n                    address(tokenWithValues[i].token),\\n                    address(tokens[i]),\\n                    i\\n                );\\n            }\\n            values[i] = tokenWithValues[i].value;\\n        }\\n\\n        return values;\\n    }\\n\\n    /// @dev PoolBalanceOpKind has three kinds\\n    /// Withdrawal - decrease the Pool's cash, but increase its managed balance,\\n    ///              leaving the total balance unchanged.\\n    /// Deposit - increase the Pool's cash, but decrease its managed balance,\\n    ///           leaving the total balance unchanged.\\n    /// Update - don't affect the Pool's cash balance, but change the managed balance,\\n    ///          so it does alter the total. The external amount can be either\\n    ///          increased or decreased by this call (i.e., reporting a gain or a loss).\\n    function updatePoolBalance(\\n        uint256[] memory amounts,\\n        IBVault.PoolBalanceOpKind kind\\n    ) internal {\\n        uint256 numAmounts = amounts.length;\\n        IBVault.PoolBalanceOp[] memory ops = new IBVault.PoolBalanceOp[](\\n            numAmounts\\n        );\\n        IERC20[] memory tokens = getTokens();\\n\\n        bytes32 balancerPoolId = poolId;\\n        for (uint256 i = 0; i < numAmounts; i++) {\\n            ops[i].kind = kind;\\n            ops[i].poolId = balancerPoolId;\\n            ops[i].token = tokens[i];\\n            ops[i].amount = amounts[i];\\n        }\\n\\n        bVault.managePoolBalance(ops);\\n    }\\n\\n    /// @notice Update weights of tokens in the pool.\\n    /// @dev Will only be called by deposit(), withdraw() and cancelWeightUpdates().\\n    function updateWeights(uint256[] memory weights, uint256 weightSum)\\n        internal\\n    {\\n        uint256 numWeights = weights.length;\\n        uint256[] memory newWeights = new uint256[](numWeights);\\n\\n        uint256 adjustedSum;\\n        for (uint256 i = 0; i < numWeights; i++) {\\n            newWeights[i] = (weights[i] * ONE) / weightSum;\\n            adjustedSum += newWeights[i];\\n        }\\n\\n        newWeights[0] = newWeights[0] + ONE - adjustedSum;\\n\\n        poolController.updateWeightsGradually(\\n            block.timestamp,\\n            block.timestamp,\\n            newWeights\\n        );\\n    }\\n\\n    /// @notice Deposit token to the pool.\\n    /// @dev Will only be called by deposit().\\n    /// @param token Address of the token to deposit.\\n    /// @param amount Amount to deposit.\\n    /// @return Actual deposited amount excluding fee on transfer.\\n    // slither-disable-next-line timestamp\\n    function depositToken(IERC20 token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        // slither-disable-next-line calls-loop\\n        uint256 balance = token.balanceOf(address(this));\\n        token.safeTransferFrom(owner(), address(this), amount);\\n        // slither-disable-next-line calls-loop\\n        balance = token.balanceOf(address(this)) - balance;\\n\\n        // slither-disable-next-line calls-loop\\n        uint256 allowance = token.allowance(address(this), address(bVault));\\n        if (allowance > 0) {\\n            token.safeDecreaseAllowance(address(bVault), allowance);\\n        }\\n        token.safeIncreaseAllowance(address(bVault), balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Return all funds to owner.\\n    /// @dev Will only be called by finalize().\\n    /// @return amounts Exact returned amount of tokens.\\n    function returnFunds() internal returns (uint256[] memory amounts) {\\n        IERC20[] memory tokens;\\n        uint256[] memory holdings;\\n        (tokens, holdings, ) = getTokensData();\\n\\n        uint256 numTokens = tokens.length;\\n        amounts = new uint256[](numTokens);\\n\\n        withdrawFromPool(holdings);\\n\\n        uint256 amount;\\n        IERC20 token;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            token = tokens[i];\\n            amount = token.balanceOf(address(this)) - guardiansFeeTotal[i];\\n            token.safeTransfer(owner(), amount);\\n            amounts[i] = amount;\\n        }\\n    }\\n\\n    /// @notice Enable or disable swap.\\n    /// @dev Will only be called by enableTradingRiskingArbitrage(), enableTradingWithWeights()\\n    ///      and disableTrading().\\n    /// @param swapEnabled Swap status.\\n    function setSwapEnabled(bool swapEnabled) internal {\\n        poolController.setSwapEnabled(swapEnabled);\\n        // slither-disable-next-line reentrancy-events\\n        emit SetSwapEnabled(swapEnabled);\\n    }\\n\\n    /// @notice Check if the address can be a guardian.\\n    /// @dev Will only be called by constructor and setGuardian()\\n    /// @param newGuardian Address to check.\\n    function checkGuardianAddress(address newGuardian) internal {\\n        if (newGuardian == address(0)) {\\n            revert Aera__GuardianIsZeroAddress();\\n        }\\n        if (newGuardian == owner()) {\\n            revert Aera__GuardianIsOwner(newGuardian);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IBManagedPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IBManagedPoolFactory {\\n    struct NewPoolParams {\\n        IBVault vault;\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        uint256[] normalizedWeights;\\n        address[] assetManagers;\\n        uint256 swapFeePercentage;\\n        uint256 pauseWindowDuration;\\n        uint256 bufferPeriodDuration;\\n        address owner;\\n        bool swapEnabledOnStart;\\n        bool mustAllowlistLPs;\\n        uint256 managementSwapFeePercentage;\\n    }\\n\\n    struct BasePoolRights {\\n        bool canTransferOwnership;\\n        bool canChangeSwapFee;\\n        bool canUpdateMetadata;\\n    }\\n\\n    struct ManagedPoolRights {\\n        bool canChangeWeights;\\n        bool canDisableSwaps;\\n        bool canSetMustAllowlistLPs;\\n        bool canSetCircuitBreakers;\\n        bool canChangeTokens;\\n    }\\n\\n    function create(\\n        NewPoolParams memory poolParams,\\n        BasePoolRights memory basePoolRights,\\n        ManagedPoolRights memory managedPoolRights,\\n        uint256 minWeightChangeDuration\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"interfaces/IBManagedPoolController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.11;\\n\\ninterface IBManagedPoolController {\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory endWeights\\n    ) external;\\n\\n    function setSwapEnabled(bool swapEnabled) external;\\n\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IBMerkleOrchard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBMerkleOrchard {\\n    struct Claim {\\n        uint256 distributionId;\\n        uint256 balance;\\n        address distributor;\\n        uint256 tokenIndex;\\n        bytes32[] merkleProof;\\n    }\\n\\n    function claimDistributions(\\n        address claimer,\\n        Claim[] memory claims,\\n        IERC20[] memory tokens\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\ninterface IBVault {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum PoolBalanceChangeKind {\\n        JOIN,\\n        EXIT\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20 assetIn;\\n        IERC20 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IERC20[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    enum PoolBalanceOpKind {\\n        WITHDRAW,\\n        DEPOSIT,\\n        UPDATE\\n    }\\n\\n    function setPaused(bool paused) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IBManagedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IBManagedPool {\\n    function getSwapEnabled() external view returns (bool);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (IBVault);\\n\\n    function getOwner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"interfaces/IAeraVaultV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./IUserAPI.sol\\\";\\nimport \\\"./IGuardianAPI.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\nimport \\\"./IMultiAssetVault.sol\\\";\\n\\n/// @title Interface for v1 vault.\\n// solhint-disable-next-line no-empty-blocks\\ninterface IAeraVaultV1 is\\n    IUserAPI,\\n    IGuardianAPI,\\n    IProtocolAPI,\\n    IMultiAssetVault\\n{\\n    // Use struct parameter to avoid stack too deep error.\\n    // factory: Balancer Managed Pool Factory address.\\n    // name: Name of Pool Token.\\n    // symbol: Symbol of Pool Token.\\n    // tokens: Token addresses.\\n    // weights: Token weights.\\n    // swapFeePercentage: Pool swap fee.\\n    // guardian: Vault guardian address.\\n    // validator: Withdrawal validator contract address.\\n    // noticePeriod: Notice period (in seconds).\\n    // managementFee: Management fee earned proportion per second.\\n    // merkleOrchard: Balancer Merkle Orchard address.\\n    // description: Simple vault text description.\\n    struct NewVaultParams {\\n        address factory;\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        uint256[] weights;\\n        uint256 swapFeePercentage;\\n        address guardian;\\n        address validator;\\n        uint32 noticePeriod;\\n        uint256 managementFee;\\n        address merkleOrchard;\\n        string description;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IWithdrawalValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @title Withdrawal validation logic.\\n/// @notice Represents the withdrawal conditions for a vault.\\n/// @dev Should be extended by vault owner or guardian, deployed and attached\\n///      to a vault instance. Withdrawal validator needs to respond to\\n///      shortfall conditions and provide an accurate allowance.\\ninterface IWithdrawalValidator {\\n    /// @notice Determine how much of each token could be withdrawn under\\n    ///         current conditions.\\n    /// @return token0Amount, token1Amount The quantity of each token that\\n    ///         can be withdrawn from the vault.\\n    /// @dev Token quantity value should be interpreted with the same\\n    ///      decimals as the token ERC20 balance.\\n    function allowance() external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"dependencies/openzeppelin/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/IUserAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\n\\n/// @title Vault public interface.\\n/// @notice Interface for vault arbitrageurs and other observers.\\ninterface IUserAPI {\\n    /// @notice Check if vault trading is enabled.\\n    /// @return If public swap is turned on, returns true, otherwise false.\\n    function isSwapEnabled() external view returns (bool);\\n\\n    /// @notice Get swap fee.\\n    /// @return Swap fee from underlying Balancer pool.\\n    function getSwapFee() external view returns (uint256);\\n\\n    /// @notice Get Pool ID.\\n    /// @return Pool ID of Balancer pool on Vault.\\n    function poolId() external view returns (bytes32);\\n\\n    /// @notice Get Token Data of Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    /// @return balances Balances of tokens of Balancer pool.\\n    /// @return lastChangeBlock Last updated Blocknumber.\\n    function getTokensData()\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /// @notice Get IERC20 Tokens Balancer Pool.\\n    /// @return tokens IERC20 tokens of Balancer pool.\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    /// @notice Get token weights.\\n    /// @return Normalized weights of tokens on Balancer pool.\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    /// @notice Accept ownership\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IGuardianAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"../dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./IProtocolAPI.sol\\\";\\n\\n/// @title Interface for vault guardian.\\n/// @notice Supports parameter submission.\\ninterface IGuardianAPI {\\n    /// @notice Initiate weight move to target in given update window.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If target weight length and token length match.\\n    ///       If total sum of target weights is one.\\n    ///       If target weight is greater than minimum.\\n    /// @param tokenWithWeight Tokens with target weights.\\n    /// @param startTime Timestamp at which weight movement should start.\\n    /// @param endTime Timestamp at which the weights should reach target values.\\n    function updateWeightsGradually(\\n        IProtocolAPI.TokenValue[] memory tokenWithWeight,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external;\\n\\n    /// @notice Cancel the active weight update schedule.\\n    /// @dev Keep calculated weights from the schedule at the time.\\n    function cancelWeightUpdates() external;\\n\\n    /// @notice Change swap fee.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If new swap fee is less than maximum.\\n    ///       If new swap fee is greater than minimum.\\n    function setSwapFee(uint256 newSwapFee) external;\\n\\n    /// @notice Claim guardian fee.\\n    /// @dev This function shouldn't be called too frequently.\\n    function claimGuardianFees() external;\\n\\n    /* This function is defined in IProtocolAPI.sol\\n    /// @notice Disable swap.\\n    function disableTrading() external;\\n    */\\n}\\n\"\r\n    },\r\n    \"interfaces/IProtocolAPI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBMerkleOrchard.sol\\\";\\n\\n/// @title Interface for protocol that owns treasury.\\ninterface IProtocolAPI {\\n    // Use struct parameter to prevent human error.\\n    // token: Token address.\\n    // value: Amount of weight of token.\\n    struct TokenValue {\\n        IERC20 token;\\n        uint256 value;\\n    }\\n\\n    /// @notice Initialize Vault with first deposit.\\n    /// @dev Initial deposit must be performed before\\n    ///      calling withdraw() or deposit() functions.\\n    ///      It enables trading, so weights and balances should be in line\\n    ///      with market spot prices, otherwise there is a significant risk\\n    ///      of arbitrage.\\n    ///      This is checked by Balancer in internal transactions:\\n    ///       If token amount is not zero when join pool.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function initialDeposit(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    /// @param tokenWithAmount Deposit tokens with amount.\\n    function deposit(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Deposit tokens into vault.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    ///      It reverts if balances were updated in the current block.\\n    /// @param tokenWithAmount Deposit token with amount.\\n    function depositIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\\n        external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdraw(TokenValue[] memory tokenWithAmount) external;\\n\\n    /// @notice Withdraw tokens up to requested amounts.\\n    /// @dev It calls updateWeights() function\\n    ///      which cancels current active weights change schedule.\\n    ///      It reverts if balances were updated in the current block.\\n    /// @param tokenWithAmount Requested tokens with amount.\\n    function withdrawIfBalanceUnchanged(TokenValue[] memory tokenWithAmount)\\n        external;\\n\\n    /// @notice Initiate vault destruction and return all funds to treasury owner.\\n    function initiateFinalization() external;\\n\\n    /// @notice Destroy vault and returns all funds to treasury owner.\\n    function finalize() external;\\n\\n    /// @notice Change guardian.\\n    function setGuardian(address newGuardian) external;\\n\\n    /// @notice Withdraw any tokens accidentally sent to vault.\\n    function sweep(address token, uint256 amount) external;\\n\\n    /// @notice Enable swap with current weights.\\n    function enableTradingRiskingArbitrage() external;\\n\\n    /// @notice Enable swap with updating weights.\\n    /// @dev These are checked by Balancer in internal transactions:\\n    ///       If weight length and token length match.\\n    ///       If total sum of weights is one.\\n    ///       If weight is greater than minimum.\\n    /// @param tokenWithWeight Tokens with new weights.\\n    function enableTradingWithWeights(TokenValue[] memory tokenWithWeight)\\n        external;\\n\\n    /// @notice Disable swap.\\n    function disableTrading() external;\\n\\n    /// @notice Claim Balancer rewards.\\n    /// @dev It calls claimDistributions() function of Balancer MerkleOrchard.\\n    ///      Once this function is called, the tokens will be transferred to\\n    ///      the Vault and it can be distributed via sweep function.\\n    /// @param claims An array of claims provided as a claim struct.\\n    ///        See https://docs.balancer.fi/products/merkle-orchard/claiming-tokens#claiming-from-the-contract-directly.\\n    /// @param tokens An array consisting of tokens to be claimed.\\n    function claimRewards(\\n        IBMerkleOrchard.Claim[] memory claims,\\n        IERC20[] memory tokens\\n    ) external;\\n\\n    /// @notice Offer ownership to another address\\n    /// @dev It disables immediate transfer of ownership\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Cancel current pending ownership transfer\\n    function cancelOwnershipTransfer() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IMultiAssetVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @title Multi-asset vault interface.\\ninterface IMultiAssetVault {\\n    /// @notice Balance of token with given index.\\n    /// @return Token balance in underlying pool.\\n    function holding(uint256 index) external view returns (uint256);\\n\\n    /// @notice Underlying token balances.\\n    /// @return Token balances in underlying pool\\n    function getHoldings() external view returns (uint256[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"balancer-labs/=dependencies/balancer-labs/\",\r\n      \"ds-test/=dependencies/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=dependencies/forge-std/src/\",\r\n      \"openzeppelin/=dependencies/openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"noticePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merkleOrchard\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IAeraVaultV1.NewVaultParams\",\"name\":\"vaultParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"Aera__AmountExceedAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__AmountIsBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__BalanceChangedInCurrentBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CallerIsNotGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CallerIsNotOwnerOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CannotSetSwapFeeBeforeCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__CannotSweepPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__DescriptionIsEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sortedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Aera__DifferentTokensInPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__FinalizationNotInitiated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"Aera__GuardianIsOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__GuardianIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__ManagementFeeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Aera__NoAvailableFeeForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__NoPendingOwnershipTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__NoticePeriodIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint256\"}],\"name\":\"Aera__NoticeTimeoutNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__OwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__PoolSwapIsAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__SwapFeePercentageChangeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAllowances\",\"type\":\"uint256\"}],\"name\":\"Aera__ValidatorIsNotMatched\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Aera__ValidatorIsNotValid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numValues\",\"type\":\"uint256\"}],\"name\":\"Aera__ValueLengthIsNotSame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsFinalizing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultIsNotRenounceable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__VaultNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeDurationIsBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Aera__WeightChangeEndBeforeStart\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeEndTimeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeRatioIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightChangeStartTimeIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightIsAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"Aera__WeightIsBelowMin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"CancelWeightUpdates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noticePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"merkleOrchard\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestedAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"DistributeGuardianFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"EnabledTradingWithWeights\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noticeTimeoutAt\",\"type\":\"uint256\"}],\"name\":\"FinalizationInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceledOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"SetSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"SetSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"UpdateWeightsGradually\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"requestedAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bVault\",\"outputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWeightUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGuardianFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"distributionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IBMerkleOrchard.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"depositIfBalanceUnchanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingRiskingArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithWeight\",\"type\":\"tuple[]\"}],\"name\":\"enableTradingWithWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensData\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardiansFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"guardiansFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"holding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateFinalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapFeeCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleOrchard\",\"outputs\":[{\"internalType\":\"contract IBMerkleOrchard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTimeoutAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IBManagedPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolController\",\"outputs\":[{\"internalType\":\"contract IBManagedPoolController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithWeight\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IWithdrawalValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolAPI.TokenValue[]\",\"name\":\"tokenWithAmount\",\"type\":\"tuple[]\"}],\"name\":\"withdrawIfBalanceUnchanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AeraVaultV1", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000008f0831b55553381ab981b8f535b80d1f9bf822000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000ba1a7ced3090d6235d454bfe52e53b215ab234210000000000000000000000003154eb27b58dfa3800ef439edfccbd5ca1a7e959000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e00000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002c4165726120555344432d57455448204d616e6167656420506f6f6c202d2031352520566f6c20546172676574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144145524120555344432d57455448203135566f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009da6d3cfe87000000000000000000000000000000000000000000000000000004064976a8dd000000000000000000000000000000000000000000000000000000000000000000164d6f6f6e77656c6c2041657261205631205661756c7400000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c7769ca1d93204af7932f8df8edeba896b51163fa496d3684769995520a09a2"}