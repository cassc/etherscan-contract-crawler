{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/IBEP20.sol\r\n\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts/Context.sol\r\n\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n// File: contracts/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n// File: contracts/RebaseToken.sol\r\n\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n//imports\r\n\r\n\r\n\r\n\r\nabstract contract RebaseToken is Context, IBEP20 {\r\n\tusing SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _indexSupply;\r\n    uint256 private _indexSupplyCheckpoint;\r\n    uint256 private _divisor;\r\n    uint256 private _currentEpoch;\r\n\r\n    string private constant _name   = \"Optimus V3\";\r\n    string private constant _symbol = \"OPT3\";\r\n\r\n    mapping(address => uint256) public count;\r\n    mapping(address => uint256) public countingStarted;\r\n    mapping(address => uint256) public cooldownEnd;\r\n    mapping(address => bool)    public whitelisted;\r\n    uint256 internal limit;\r\n    uint256 internal toLength;\r\n    bool    internal useLimiter;\r\n    \r\n    constructor() {\r\n        useLimiter = true;\r\n        limit      = 5;\r\n        toLength   = 5 days;\r\n    }\r\n\r\n    modifier limiter(address atAddress) {\r\n        require(!inCooldown(atAddress), \"Try again later\");\r\n        _;\r\n    }\r\n\r\n    function iterate(address atAddress) private {\r\n        if(count[atAddress] == 0) {\r\n            countingStarted[atAddress] = currentEpoch();\r\n        }\r\n        else if(currentEpoch() > countingStarted[atAddress]) {\r\n            count[atAddress] = 0;\r\n            countingStarted[atAddress] = currentEpoch();\r\n        }\r\n\r\n        count[atAddress]++;\r\n\r\n        if(count[atAddress] >= limit) {\r\n            setCooldown(atAddress, toLength);\r\n            count[atAddress] = 0;\r\n        }\r\n    }\r\n\r\n    function setCooldown(address atAddress, uint256 length) private {\r\n        cooldownEnd[atAddress] = block.timestamp.add(length);\r\n    }\r\n\r\n    function inCooldown(address atAddress) public view returns (bool) {\r\n        return block.timestamp < cooldownEnd[atAddress];\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply.div(divisor());\r\n    }\r\n\r\n    function indexSupply() public view returns (uint256) {\r\n        return _indexSupply;\r\n    }\r\n\r\n    function indexSupplyCheckpoint() public view returns (uint256) {\r\n        return _indexSupplyCheckpoint;\r\n    }\r\n\r\n    function divisor() public view returns (uint256) {\r\n        return _divisor;\r\n    }\r\n\r\n    function currentEpoch() public view returns (uint256) {\r\n        return _currentEpoch;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account].div(divisor());\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender].div(divisor());\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount.mul(divisor()));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount.mul(divisor()));\r\n        _transfer(from, to, amount.mul(divisor()));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount.mul(divisor()));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender).mul(divisor()) + addedValue.mul(divisor()));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender); //no conversion required\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance.mul(divisor()) - subtractedValue.mul(divisor()));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _setIndexSupply(uint256 toSupply) internal virtual {\r\n        _indexSupply = toSupply;\r\n    }\r\n\r\n    function _setIndexSupplyCheckpoint(uint toSupply) internal virtual {\r\n        _indexSupplyCheckpoint = toSupply;\r\n    }\r\n\r\n    function _setDivisor(uint256 toDivisor) internal virtual {\r\n        _divisor = toDivisor;\r\n    }\r\n\r\n    function _setCurrentEpoch() internal virtual {\r\n        _currentEpoch++;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual limiter(tx.origin) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount.div(divisor()));\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        //implement cooldown //////////////////////////\r\n        address sender = tx.origin;\r\n\r\n        if(useLimiter) {\r\n            if(!whitelisted[sender]) {\r\n                iterate(sender);\r\n            }\r\n        }\r\n        ///////////////////////////////////////////////\r\n\r\n        emit Transfer(from, to, amount.div(divisor()));\r\n\r\n        _afterTokenTransfer(from, to, amount.div(divisor()));\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount.div(divisor()));\r\n\r\n        _totalSupply         += amount;\r\n        _balances[account]   += amount;\r\n        emit Transfer(address(0), account, amount.div(divisor()));\r\n\r\n        _afterTokenTransfer(address(0), account, amount.div(divisor()));\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount.div(divisor()));\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount.div(divisor()));\r\n\r\n        _afterTokenTransfer(account, address(0), amount.div(divisor()));\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount.div(divisor()));\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender).mul(divisor());\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount); // no conversion required\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n\r\n    }\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n\r\n    }\r\n}\r\n// File: contracts/Rebaser.sol\r\n\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\ncontract Rebaser is RebaseToken {\r\n\tusing SafeMath for uint256;\r\n    \r\n    //config\r\n    uint256 public constant BIG_INT    = ~uint128(0);\r\n    uint256 public constant MAX_SUPPLY = BIG_INT * 10 ** 18;\r\n    uint256 public constant PRE_SUPPLY = 21000000 ether;\r\n    address public constant burnAddress= 0x000000000000000000000000000000000000dEaD;\r\n\r\n    //rebases\r\n    uint256 public rewardYield           = 10; //<-------------------- 1 percent\r\n    uint256 public rewardYieldDenominator= 1000;\r\n    uint256 public rebaseFrequency       = 1 days; //<---------------- rebase will be due every 1 days\r\n    uint256 public nextRebase;\r\n\r\n    //state\r\n    bool public autosync;\r\n    bool public autocomp;\r\n    bool public locked;\r\n\r\n    //addresses\r\n    address public admin;\r\n    address public pairAddress;\r\n\r\n    //rebase gaurd\r\n    mapping(address => bool) private authAddresses;\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Not authorized.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuth() {\r\n        require(isAuth(msg.sender), \"Not authorized, only auth\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admin                = msg.sender; //<---------------------------------- set admin\r\n        authAddresses[admin] = true; //<---------------------------------------- add admin auth\r\n        autosync             = true; //<---------------------------------------- will autosync pool (do not disable)\r\n        autocomp             = true; //<---------------------------------------- will autocompound rewards\r\n        nextRebase           = block.timestamp + rebaseFrequency; //<----------- set first rebase\r\n\r\n        _setIndexSupply(1 ether); //<--------------------------------- initialize index supply\r\n        _setIndexSupplyCheckpoint(1 ether); //<----------------------- initialize index supply checkpoint\r\n        _setDivisor(BIG_INT); //<------------------------------------- initialize divisor\r\n        _mint(msg.sender, PRE_SUPPLY.mul(divisor())); //<------------- mint initial supply\r\n    }\r\n\r\n    function rebase() private {\r\n        //stop reentry\r\n        locked = true;\r\n\r\n        //calc supply delta\r\n        uint256 supply;\r\n        if(autocomp) {\r\n            supply = indexSupply();\r\n        }\r\n        else {\r\n            supply = indexSupplyCheckpoint();\r\n        }\r\n        uint256 supplyDelta = supply.mul(rewardYield).div(rewardYieldDenominator);\r\n\r\n        //exec rebase\r\n        coreRebase(supplyDelta);\r\n\r\n        //unlock\r\n        locked = false;\r\n    }\r\n\r\n    function coreRebase(uint256 supplyDelta) private {\r\n        uint256 old_supply = indexSupply();\r\n        uint256 new_supply;\r\n\r\n        if(old_supply < MAX_SUPPLY) {\r\n            new_supply = old_supply.add(supplyDelta);\r\n        } else {\r\n            new_supply = MAX_SUPPLY;\r\n        }\r\n\r\n        _setIndexSupply(new_supply);\r\n        _setDivisor(MAX_SUPPLY.div(new_supply));\r\n\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n        _setCurrentEpoch();\r\n    }\r\n\r\n    function sync() private {\r\n        IUniswapV2Pair(pairAddress).skim(burnAddress);\r\n        IUniswapV2Pair(pairAddress).sync();\r\n    }\r\n\r\n    function rebaseDue() public view returns (bool) {\r\n        return nextRebase <= block.timestamp;\r\n    }\r\n\r\n    function isLocked() public view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    function isAdmin(address atAddress) private view returns (bool) {\r\n        return atAddress == admin;\r\n    }\r\n\r\n    function isAuth(address atAddress) public view returns (bool) {\r\n        return authAddresses[atAddress];\r\n    }\r\n\r\n    function setPairAddress(address toAddress) external onlyAdmin {\r\n        pairAddress = toAddress;\r\n    }\r\n\r\n    function setAutosync(bool toState) external onlyAdmin {\r\n        autosync = toState;\r\n    }\r\n\r\n    function setAutocomp(bool toState) external onlyAdmin {\r\n        autocomp = toState;\r\n\r\n        if(toState == false) {\r\n            _setIndexSupplyCheckpoint(indexSupply());\r\n        }\r\n    }\r\n    \r\n    function setRewardYield(uint256 toAmount) external onlyAdmin {\r\n        rewardYield = toAmount;\r\n    }\r\n\r\n    function adminRebase() external onlyAdmin {\r\n        rebase();\r\n    }\r\n\r\n    function adminRebaseTimes(uint256 howmany) external onlyAdmin {\r\n        for (uint256 i = 0; i < howmany; i++) {\r\n            rebase();\r\n        } \r\n    }\r\n\r\n    function setAuth(address atAddress, bool toValue) external onlyAdmin {\r\n        authAddresses[atAddress] = toValue;\r\n    }\r\n\r\n    function setLimiter(bool toValue) external onlyAdmin {\r\n        useLimiter = toValue;\r\n    }\r\n\r\n    function setLimit(uint256 toAmount) external onlyAdmin {\r\n        limit = toAmount;\r\n    }\r\n\r\n    function setLength(uint256 toSeconds) external onlyAdmin {\r\n        toLength = toSeconds;\r\n    }\r\n\r\n    function setWhitelisted(address atAddress, bool toValue) external onlyAuth {\r\n        whitelisted[atAddress] = toValue;\r\n    }\r\n\r\n    function manualRebase() external onlyAuth {\r\n        if(rebaseDue() && !isLocked()) {\r\n            rebase();\r\n        }\r\n\r\n        if(autosync) {\r\n            sync();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIG_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howmany\",\"type\":\"uint256\"}],\"name\":\"adminRebaseTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocomp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autosync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cooldownEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countingStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAddress\",\"type\":\"address\"}],\"name\":\"inCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexSupplyCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAddress\",\"type\":\"address\"}],\"name\":\"isAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseDue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toValue\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toState\",\"type\":\"bool\"}],\"name\":\"setAutocomp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toState\",\"type\":\"bool\"}],\"name\":\"setAutosync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toSeconds\",\"type\":\"uint256\"}],\"name\":\"setLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toValue\",\"type\":\"bool\"}],\"name\":\"setLimiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toValue\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Rebaser", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39995b59077717470330252e04f903150cf719353d1653fffd719240101345c8"}