{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/StakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror UnsuccessfulFetchOfTokenBalance();\\n\\ncontract StakingRewards is Ownable {\\n\\tIERC20 public immutable stakingToken;\\n\\tIERC20 public immutable rewardsToken;\\n\\n\\t// Duration of rewards to be paid out (in seconds)\\n\\tuint256 public duration;\\n\\t// Timestamp of when the rewards finish\\n\\tuint256 public finishAt;\\n\\t// Minimum of last updated time and reward finish time\\n\\tuint256 public updatedAt;\\n\\t// Reward to be paid out per second\\n\\tuint256 public rewardRate;\\n\\t// Sum of (reward rate * dt * 1e18 / total supply)\\n\\tuint256 public rewardPerTokenStored;\\n\\t// User address => rewardPerTokenStored\\n\\tmapping(address => uint256) public userRewardPerTokenPaid;\\n\\t// User address => rewards to be claimed\\n\\tmapping(address => uint256) public rewards;\\n\\n\\t// Total staked\\n\\tuint256 public totalSupply;\\n\\t// User address => staked amount\\n\\tmapping(address => uint256) public balanceOf;\\n\\n\\tevent RewardAdded(uint256 reward);\\n\\tevent Staked(address indexed user, uint256 amount);\\n\\tevent Withdrawn(address indexed user, uint256 amount);\\n\\tevent RewardPaid(address indexed user, uint256 reward);\\n\\tevent RewardsDurationUpdated(uint256 newDuration);\\n\\tevent Recovered(address token, uint256 amount);\\n\\n\\tconstructor(address _stakingToken, address _rewardToken, uint256 _duration) {\\n\\t\\tstakingToken = IERC20(_stakingToken);\\n\\t\\trewardsToken = IERC20(_rewardToken);\\n\\t\\tsetRewardsDuration(_duration);\\n\\t}\\n\\n\\tmodifier updateReward(address _account) {\\n\\t\\trewardPerTokenStored = rewardPerToken();\\n\\t\\tupdatedAt = lastTimeRewardApplicable();\\n\\n\\t\\tif (_account != address(0)) {\\n\\t\\t\\trewards[_account] = earned(_account);\\n\\t\\t\\tuserRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction lastTimeRewardApplicable() public view returns (uint256) {\\n\\t\\treturn _min(finishAt, block.timestamp);\\n\\t}\\n\\n\\tfunction rewardPerToken() public view returns (uint256) {\\n\\t\\tif (totalSupply == 0) {\\n\\t\\t\\treturn rewardPerTokenStored;\\n\\t\\t}\\n\\n\\t\\treturn rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalSupply;\\n\\t}\\n\\n\\tfunction stake(uint256 _amount) external updateReward(msg.sender) {\\n\\t\\trequire(_amount > 0, \\\"Cannot stake 0\\\");\\n\\t\\tuint256 balance = getTokenBalance(address(stakingToken));\\n\\t\\tstakingToken.transferFrom(msg.sender, address(this), _amount);\\n\\t\\tuint256 transferredAmount = getTokenBalance(address(stakingToken)) - balance;\\n\\t\\tbalanceOf[msg.sender] += transferredAmount;\\n\\t\\ttotalSupply += transferredAmount;\\n\\t\\temit Staked(msg.sender, transferredAmount);\\n\\t}\\n\\n\\tfunction withdraw(uint256 _amount) public updateReward(msg.sender) {\\n\\t\\trequire(_amount > 0, \\\"Cannot withdraw 0\\\");\\n\\t\\trequire(balanceOf[msg.sender] >= _amount, \\\"Withdraw exceeds balance\\\");\\n\\t\\tbalanceOf[msg.sender] -= _amount;\\n\\t\\ttotalSupply -= _amount;\\n\\t\\tstakingToken.transfer(msg.sender, _amount);\\n\\t\\temit Withdrawn(msg.sender, _amount);\\n\\t}\\n\\n\\tfunction getRewardForDuration() external view returns (uint256) {\\n\\t\\treturn rewardRate * duration;\\n\\t}\\n\\n\\tfunction earned(address _account) public view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t((balanceOf[_account] * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) + rewards[_account];\\n\\t}\\n\\n\\tfunction getReward() public updateReward(msg.sender) {\\n\\t\\tuint256 reward = rewards[msg.sender];\\n\\t\\tif (reward > 0) {\\n\\t\\t\\trewards[msg.sender] = 0;\\n\\t\\t\\trewardsToken.transfer(msg.sender, reward);\\n\\t\\t\\temit RewardPaid(msg.sender, reward);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setRewardsDuration(uint256 _duration) public onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp > finishAt,\\n\\t\\t\\t\\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n\\t\\t);\\n\\t\\tduration = _duration;\\n\\t\\temit RewardsDurationUpdated(_duration);\\n\\t}\\n\\n\\tfunction notifyRewardAmount(uint256 _amount) external onlyOwner updateReward(address(0)) {\\n\\t\\tif (block.timestamp >= finishAt) {\\n\\t\\t\\trewardRate = _amount / duration;\\n\\t\\t} else {\\n\\t\\t\\tuint256 remainingRewards = (finishAt - block.timestamp) * rewardRate;\\n\\t\\t\\trewardRate = (_amount + remainingRewards) / duration;\\n\\t\\t}\\n\\n\\t\\trequire(rewardRate > 0, \\\"reward rate = 0\\\");\\n\\t\\trequire(rewardRate * duration <= rewardsToken.balanceOf(address(this)), \\\"Provided reward too high\\\");\\n\\n\\t\\tfinishAt = block.timestamp + duration;\\n\\t\\tupdatedAt = block.timestamp;\\n\\t\\temit RewardAdded(_amount);\\n\\t}\\n\\n\\tfunction exit() external {\\n\\t\\twithdraw(balanceOf[msg.sender]);\\n\\t\\tgetReward();\\n\\t}\\n\\n\\t// Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\trequire(tokenAddress != address(stakingToken), \\\"Cannot withdraw the staking token\\\");\\n\\t\\tIERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\tfunction getTokenBalance(address token) internal view returns (uint256) {\\n\\t\\t(bool success, bytes memory encodedBalance) = token.staticcall(\\n\\t\\t\\tabi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\\n\\t\\t);\\n\\n\\t\\tif (success && encodedBalance.length >= 32) {\\n\\t\\t\\treturn abi.decode(encodedBalance, (uint256));\\n\\t\\t}\\n\\t\\trevert UnsuccessfulFetchOfTokenBalance();\\n\\t}\\n\\n\\tfunction _min(uint256 x, uint256 y) private pure returns (uint256) {\\n\\t\\treturn x <= y ? x : y;\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnsuccessfulFetchOfTokenBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b045c743e15655679d1dd4c02cf25167d7afa7b4000000000000000000000000b045c743e15655679d1dd4c02cf25167d7afa7b4000000000000000000000000000000000000000000000000000000000007ff80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}