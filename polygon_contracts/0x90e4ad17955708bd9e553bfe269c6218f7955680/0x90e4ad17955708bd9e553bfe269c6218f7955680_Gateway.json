{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/factory/IdFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"../proxy/IdentityProxy.sol\\\";\\nimport \\\"./IIdFactory.sol\\\";\\nimport \\\"../interface/IERC734.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract IdFactory is IIdFactory, Ownable {\\n\\n    mapping(address => bool) private _tokenFactories;\\n\\n    // address of the _implementationAuthority contract making the link to the implementation contract\\n    address private immutable _implementationAuthority;\\n\\n    // as it is not possible to deploy 2 times the same contract address, this mapping allows us to check which\\n    // salt is taken and which is not\\n    mapping(string => bool) private _saltTaken;\\n\\n    // ONCHAINID of the wallet owner\\n    mapping(address => address) private _userIdentity;\\n\\n    // wallets currently linked to an ONCHAINID\\n    mapping(address => address[]) private _wallets;\\n\\n    // ONCHAINID of the token\\n    mapping(address => address) private _tokenIdentity;\\n\\n    // token linked to an ONCHAINID\\n    mapping(address => address) private _tokenAddress;\\n\\n\\n    // setting\\n    constructor (address implementationAuthority) {\\n        require(implementationAuthority != address(0), \\\"invalid argument - zero address\\\");\\n        _implementationAuthority = implementationAuthority;\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-addTokenFactory}.\\n     */\\n    function addTokenFactory(address _factory) external override onlyOwner {\\n        require(_factory != address(0), \\\"invalid argument - zero address\\\");\\n        require(!isTokenFactory(_factory), \\\"already a factory\\\");\\n        _tokenFactories[_factory] = true;\\n        emit TokenFactoryAdded(_factory);\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-removeTokenFactory}.\\n     */\\n    function removeTokenFactory(address _factory) external override onlyOwner {\\n        require(_factory != address(0), \\\"invalid argument - zero address\\\");\\n        require(isTokenFactory(_factory), \\\"not a factory\\\");\\n        _tokenFactories[_factory] = false;\\n        emit TokenFactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-createIdentity}.\\n     */\\n    function createIdentity(\\n        address _wallet,\\n        string memory _salt)\\n    external onlyOwner override returns (address) {\\n        require(_wallet != address(0), \\\"invalid argument - zero address\\\");\\n        require(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n        string memory oidSalt = string.concat(\\\"OID\\\",_salt);\\n        require (!_saltTaken[oidSalt], \\\"salt already taken\\\");\\n        require (_userIdentity[_wallet] == address(0), \\\"wallet already linked to an identity\\\");\\n        address identity = _deployIdentity(oidSalt, _implementationAuthority, _wallet);\\n        _saltTaken[oidSalt] = true;\\n        _userIdentity[_wallet] = identity;\\n        _wallets[identity].push(_wallet);\\n        emit WalletLinked(_wallet, identity);\\n        return identity;\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-createIdentityWithManagementKeys}.\\n     */\\n    function createIdentityWithManagementKeys(\\n        address _wallet,\\n        string memory _salt,\\n        bytes32[] memory _managementKeys\\n    ) external onlyOwner override returns (address) {\\n        require(_wallet != address(0), \\\"invalid argument - zero address\\\");\\n        require(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n        string memory oidSalt = string.concat(\\\"OID\\\",_salt);\\n        require (!_saltTaken[oidSalt], \\\"salt already taken\\\");\\n        require (_userIdentity[_wallet] == address(0), \\\"wallet already linked to an identity\\\");\\n        require(_managementKeys.length > 0, \\\"invalid argument - empty list of keys\\\");\\n\\n        address identity = _deployIdentity(oidSalt, _implementationAuthority, address(this));\\n\\n        for (uint i = 0; i < _managementKeys.length; i++) {\\n            require(\\n                _managementKeys[i] != keccak256(abi.encode(_wallet))\\n                , \\\"invalid argument - wallet is also listed in management keys\\\");\\n            IERC734(identity).addKey(\\n                _managementKeys[i],\\n                1,\\n                1\\n            );\\n        }\\n\\n        IERC734(identity).removeKey(\\n            keccak256(abi.encode(address(this))),\\n            1\\n        );\\n\\n        _saltTaken[oidSalt] = true;\\n        _userIdentity[_wallet] = identity;\\n        _wallets[identity].push(_wallet);\\n        emit WalletLinked(_wallet, identity);\\n\\n        return identity;\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-createTokenIdentity}.\\n     */\\n    function createTokenIdentity(\\n        address _token,\\n        address _tokenOwner,\\n        string memory _salt)\\n    external override returns (address) {\\n        require(isTokenFactory(msg.sender) || msg.sender == owner(), \\\"only Factory or owner can call\\\");\\n        require(_token != address(0), \\\"invalid argument - zero address\\\");\\n        require(_tokenOwner != address(0), \\\"invalid argument - zero address\\\");\\n        require(keccak256(abi.encode(_salt)) != keccak256(abi.encode(\\\"\\\")), \\\"invalid argument - empty string\\\");\\n        string memory tokenIdSalt = string.concat(\\\"Token\\\",_salt);\\n        require(!_saltTaken[tokenIdSalt], \\\"salt already taken\\\");\\n        require(_tokenIdentity[_token] == address(0), \\\"token already linked to an identity\\\");\\n        address identity = _deployIdentity(tokenIdSalt, _implementationAuthority, _tokenOwner);\\n        _saltTaken[tokenIdSalt] = true;\\n        _tokenIdentity[_token] = identity;\\n        _tokenAddress[identity] = _token;\\n        emit TokenLinked(_token, identity);\\n        return identity;\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-linkWallet}.\\n     */\\n    function linkWallet(address _newWallet) external override {\\n        require(_newWallet != address(0), \\\"invalid argument - zero address\\\");\\n        require(_userIdentity[msg.sender] != address(0), \\\"wallet not linked to an identity contract\\\");\\n        require(_userIdentity[_newWallet] == address(0), \\\"new wallet already linked\\\");\\n        require(_tokenIdentity[_newWallet] == address(0), \\\"invalid argument - token address\\\");\\n        address identity = _userIdentity[msg.sender];\\n        require(_wallets[identity].length < 101, \\\"max amount of wallets per ID exceeded\\\");\\n        _userIdentity[_newWallet] = identity;\\n        _wallets[identity].push(_newWallet);\\n        emit WalletLinked(_newWallet, identity);\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-unlinkWallet}.\\n     */\\n    function unlinkWallet(address _oldWallet) external override {\\n        require(_oldWallet != address(0), \\\"invalid argument - zero address\\\");\\n        require(_oldWallet != msg.sender, \\\"cannot be called on sender address\\\");\\n        require(_userIdentity[msg.sender] == _userIdentity[_oldWallet], \\\"only a linked wallet can unlink\\\");\\n        address _identity = _userIdentity[_oldWallet];\\n        delete _userIdentity[_oldWallet];\\n        uint256 length = _wallets[_identity].length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_wallets[_identity][i] == _oldWallet) {\\n                _wallets[_identity][i] = _wallets[_identity][length - 1];\\n                _wallets[_identity].pop();\\n                break;\\n            }\\n        }\\n        emit WalletUnlinked(_oldWallet, _identity);\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-getIdentity}.\\n     */\\n    function getIdentity(address _wallet) external override view returns (address) {\\n        if(_tokenIdentity[_wallet] != address(0)) {\\n            return _tokenIdentity[_wallet];\\n        }\\n        else {\\n            return _userIdentity[_wallet];\\n        }\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-isSaltTaken}.\\n     */\\n    function isSaltTaken(string calldata _salt) external override view returns (bool) {\\n        return _saltTaken[_salt];\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-getWallets}.\\n     */\\n    function getWallets(address _identity) external override view returns (address[] memory) {\\n        return _wallets[_identity];\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-getToken}.\\n     */\\n    function getToken(address _identity) external override view returns (address) {\\n        return _tokenAddress[_identity];\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-isTokenFactory}.\\n     */\\n    function isTokenFactory(address _factory) public override view returns(bool) {\\n        return _tokenFactories[_factory];\\n    }\\n\\n    /**\\n     *  @dev See {IdFactory-implementationAuthority}.\\n     */\\n    function implementationAuthority() public override view returns (address) {\\n        return _implementationAuthority;\\n    }\\n\\n    // deploy function with create2 opcode call\\n    // returns the address of the contract created\\n    function _deploy(string memory salt, bytes memory bytecode) private returns (address) {\\n        bytes32 saltBytes = bytes32(keccak256(abi.encodePacked(salt)));\\n        address addr;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let encoded_data := add(0x20, bytecode) // load initialization code.\\n            let encoded_size := mload(bytecode)     // load init code's length.\\n            addr := create2(0, encoded_data, encoded_size, saltBytes)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n        emit Deployed(addr);\\n        return addr;\\n    }\\n\\n    // function used to deploy an identity using CREATE2\\n    function _deployIdentity\\n    (\\n        string memory _salt,\\n        address implementationAuthority,\\n        address _wallet\\n    ) private returns (address){\\n        bytes memory _code = type(IdentityProxy).creationCode;\\n        bytes memory _constructData = abi.encode(implementationAuthority, _wallet);\\n        bytes memory bytecode = abi.encodePacked(_code, _constructData);\\n        return _deploy(_salt, bytecode);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/factory/IIdFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IIdFactory {\\n\\n    /// events\\n\\n    // event emitted whenever a single contract is deployed by the factory\\n    event Deployed(address indexed _addr);\\n\\n    // event emitted when a wallet is linked to an ONCHAINID contract\\n    event WalletLinked(address indexed wallet, address indexed identity);\\n\\n    // event emitted when a token is linked to an ONCHAINID contract\\n    event TokenLinked(address indexed token, address indexed identity);\\n\\n    // event emitted when a wallet is unlinked from an ONCHAINID contract\\n    event WalletUnlinked(address indexed wallet, address indexed identity);\\n\\n    // event emitted when an address is registered on the factory as a Token\\n    // factory address, granting this address the privilege to issue\\n    // Onchain identities for tokens\\n    event TokenFactoryAdded(address indexed factory);\\n\\n    // event emitted when a previously recorded token factory address is removed\\n    event TokenFactoryRemoved(address indexed factory);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev function used to create a new Identity proxy from the factory\\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n     *  @param _salt the salt used by create2 to issue the contract\\n     *  requires a new salt for each deployment\\n     *  _wallet cannot be linked to another ONCHAINID\\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n     *  of the function, including calls to oracles for multichain\\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\\n     */\\n    function createIdentity(address _wallet, string memory _salt) external returns (address);\\n\\n    /**\\n     *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\\n     * MANAGEMENT keys.\\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\\n     *  @param _salt the salt used by create2 to issue the contract\\n     *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\\n     *  requires a new salt for each deployment\\n     *  _wallet cannot be linked to another ONCHAINID\\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\\n     *  of the function, including calls to oracles for multichain\\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\\n     */\\n    function createIdentityWithManagementKeys(\\n        address _wallet,\\n        string memory _salt,\\n        bytes32[] memory _managementKeys\\n    ) external returns (address);\\n\\n    /**\\n     *  @dev function used to create a new Token Identity proxy from the factory\\n     *  @param _token the address of the token contract\\n     *  @param _tokenOwner the owner address of the token\\n     *  @param _salt the salt used by create2 to issue the contract\\n     *  requires a new salt for each deployment\\n     *  _token cannot be linked to another ONCHAINID\\n     *  only Token factory or owner can call (owner should only use its privilege\\n     *  for tokens not issued by a Token factory onchain\\n     */\\n    function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\\n\\n    /**\\n     *  @dev function used to link a new wallet to an existing identity\\n     *  @param _newWallet the address of the wallet to link\\n     *  requires msg.sender to be linked to an existing onchainid\\n     *  the _newWallet will be linked to the same OID contract as msg.sender\\n     *  _newWallet cannot be linked to an OID yet\\n     *  _newWallet cannot be address 0\\n     *  cannot link more than 100 wallets to an OID, for gas consumption reason\\n     */\\n    function linkWallet(address _newWallet) external;\\n\\n    /**\\n     *  @dev function used to unlink a wallet from an existing identity\\n     *  @param _oldWallet the address of the wallet to unlink\\n     *  requires msg.sender to be linked to the same onchainid as _oldWallet\\n     *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\\n     *  _oldWallet cannot be address 0\\n     */\\n    function unlinkWallet(address _oldWallet) external;\\n\\n    /**\\n     *  @dev function used to register an address as a token factory\\n     *  @param _factory the address of the token factory\\n     *  can be called only by Owner\\n     *  _factory cannot be registered yet\\n     *  once the factory has been registered it can deploy token identities\\n     */\\n    function addTokenFactory(address _factory) external;\\n\\n    /**\\n     *  @dev function used to unregister an address previously registered as a token factory\\n     *  @param _factory the address of the token factory\\n     *  can be called only by Owner\\n     *  _factory has to be registered previously\\n     *  once the factory has been unregistered it cannot deploy token identities anymore\\n     */\\n    function removeTokenFactory(address _factory) external;\\n\\n    /**\\n     *  @dev getter for OID contract corresponding to a wallet/token\\n     *  @param _wallet the wallet/token address\\n     */\\n    function getIdentity(address _wallet) external view returns (address);\\n\\n    /**\\n     *  @dev getter to fetch the array of wallets linked to an OID contract\\n     *  @param _identity the address of the OID contract\\n     *  returns an array of addresses linked to the OID\\n     */\\n    function getWallets(address _identity) external view returns (address[] memory);\\n\\n    /**\\n     *  @dev getter to fetch the token address linked to an OID contract\\n     *  @param _identity the address of the OID contract\\n     *  returns the address linked to the OID\\n     */\\n    function getToken(address _identity) external view returns (address);\\n\\n    /**\\n     *  @dev getter to know if an address is registered as token factory or not\\n     *  @param _factory the address of the factory\\n     *  returns true if the address corresponds to a registered factory\\n     */\\n    function isTokenFactory(address _factory) external view returns(bool);\\n\\n    /**\\n     *  @dev getter to know if a salt is taken for the create2 deployment\\n     *  @param _salt the salt used for deployment\\n     */\\n    function isSaltTaken(string calldata _salt) external view returns (bool);\\n\\n    /**\\n     * @dev getter for the implementation authority used by this factory.\\n     */\\n    function implementationAuthority() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/gateway/Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../factory/IdFactory.sol\\\";\\n\\nusing ECDSA for bytes32;\\n\\n/// A required parameter was set to the Zero address.\\nerror ZeroAddress();\\n/// The maximum number of signers was reached at deployment.\\nerror TooManySigners();\\n/// The signed attempted to add was already approved.\\nerror SignerAlreadyApproved(address signer);\\n/// The signed attempted to remove was not approved.\\nerror SignerAlreadyNotApproved(address signer);\\n/// A requested ONCHAINID deployment was requested without a valid signature while the Gateway requires one.\\nerror UnsignedDeployment();\\n/// A requested ONCHAINID deployment was requested and signer by a non approved signer.\\nerror UnapprovedSigner(address signer);\\n/// A requested ONCHAINID deployment was requested with a signature revoked.\\nerror RevokedSignature(bytes signature);\\n/// A requested ONCHAINID deployment was requested with a signature that expired.\\nerror ExpiredSignature(bytes signature);\\n/// Attempted to revoke a signature that was already revoked.\\nerror SignatureAlreadyRevoked(bytes signature);\\n/// Attempted to approve a signature that was not revoked.\\nerror SignatureNotRevoked(bytes signature);\\n\\ncontract Gateway is Ownable {\\n    IdFactory public idFactory;\\n    mapping(address => bool) public approvedSigners;\\n    mapping(bytes => bool) public revokedSignatures;\\n\\n    event SignerApproved(address indexed signer);\\n    event SignerRevoked(address indexed signer);\\n    event SignatureRevoked(bytes indexed signature);\\n    event SignatureApproved(bytes indexed signature);\\n\\n    /**\\n     *  @dev Constructor for the ONCHAINID Factory Gateway.\\n     *  @param idFactoryAddress the address of the factory to operate (the Gateway must be owner of the Factory).\\n     */\\n    constructor(address idFactoryAddress, address[] memory signersToApprove) Ownable() {\\n        if (idFactoryAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (signersToApprove.length > 10) {\\n            revert TooManySigners();\\n        }\\n\\n        for (uint i = 0; i < signersToApprove.length; i++) {\\n            approvedSigners[signersToApprove[i]] = true;\\n        }\\n\\n        idFactory = IdFactory(idFactoryAddress);\\n    }\\n\\n    /**\\n     *  @dev Approve a signer to sign ONCHAINID deployments. If the Gateway is setup to require signature, only\\n     *  deployments requested with a valid signature from an approved signer will be accepted.\\n     *  If the gateway does not require a signature,\\n     *  @param signer the signer address to approve.\\n     */\\n    function approveSigner(address signer) external onlyOwner {\\n        if (signer == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (approvedSigners[signer]) {\\n            revert SignerAlreadyApproved(signer);\\n        }\\n\\n        approvedSigners[signer] = true;\\n\\n        emit SignerApproved(signer);\\n    }\\n\\n    /**\\n     *  @dev Revoke a signer to sign ONCHAINID deployments.\\n     *  @param signer the signer address to revoke.\\n     */\\n    function revokeSigner(address signer) external onlyOwner {\\n        if (signer == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (!approvedSigners[signer]) {\\n            revert SignerAlreadyNotApproved(signer);\\n        }\\n\\n        delete approvedSigners[signer];\\n\\n        emit SignerRevoked(signer);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n     *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt.\\n     *  @param identityOwner the address to set as a management key.\\n     *  @param salt to use for the deployment.\\n     *  @param signatureExpiry the block timestamp where the signature will expire.\\n     *  @param signature the approval containing the salt and the identityOwner address.\\n     */\\n    function deployIdentityWithSalt(\\n        address identityOwner,\\n        string memory salt,\\n        uint256 signatureExpiry,\\n        bytes calldata signature\\n    ) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (signatureExpiry != 0 && signatureExpiry < block.timestamp) {\\n            revert ExpiredSignature(signature);\\n        }\\n\\n        address signer = ECDSA.recover(\\n            keccak256(\\n                abi.encode(\\n                    \\\"Authorize ONCHAINID deployment\\\",\\n                    identityOwner,\\n                    salt,\\n                    signatureExpiry\\n                )\\n            ).toEthSignedMessageHash(),\\n            signature\\n        );\\n\\n        if (!approvedSigners[signer]) {\\n            revert UnapprovedSigner(signer);\\n        }\\n\\n        if (revokedSignatures[signature]) {\\n            revert RevokedSignature(signature);\\n        }\\n\\n        return idFactory.createIdentity(identityOwner, salt);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory. The operation must be signed by\\n     *  an approved public key. This method allow to deploy an ONCHAINID using a custom salt and a custom list of\\n     *  management keys. Note that the identity Owner address won't be added as a management keys, if this is desired,\\n     *  the key hash must be listed in the managementKeys array.\\n     *  @param identityOwner the address to set as a management key.\\n     *  @param salt to use for the deployment.\\n     *  @param managementKeys the list of management keys to add to the ONCHAINID.\\n     *  @param signatureExpiry the block timestamp where the signature will expire.\\n     *  @param signature the approval containing the salt and the identityOwner address.\\n     */\\n    function deployIdentityWithSaltAndManagementKeys(\\n        address identityOwner,\\n        string memory salt,\\n        bytes32[] calldata managementKeys,\\n        uint256 signatureExpiry,\\n        bytes calldata signature\\n    ) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        if (signatureExpiry != 0 && signatureExpiry < block.timestamp) {\\n            revert ExpiredSignature(signature);\\n        }\\n\\n        address signer = ECDSA.recover(\\n            keccak256(\\n                abi.encode(\\n                    \\\"Authorize ONCHAINID deployment\\\",\\n                    identityOwner,\\n                    salt,\\n                    managementKeys,\\n                    signatureExpiry\\n                )\\n            ).toEthSignedMessageHash(),\\n            signature\\n        );\\n\\n        if (!approvedSigners[signer]) {\\n            revert UnapprovedSigner(signer);\\n        }\\n\\n        if (revokedSignatures[signature]) {\\n            revert RevokedSignature(signature);\\n        }\\n\\n        return idFactory.createIdentityWithManagementKeys(identityOwner, salt, managementKeys);\\n    }\\n\\n    /**\\n     *  @dev Deploy an ONCHAINID using a factory using the identityOwner address as salt.\\n     *  @param identityOwner the address to set as a management key.\\n     */\\n    function deployIdentityForWallet(address identityOwner) external returns (address) {\\n        if (identityOwner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        return idFactory.createIdentity(identityOwner, Strings.toHexString(identityOwner));\\n    }\\n\\n    /**\\n     *  @dev Revoke a signature, if the signature is used to deploy an ONCHAINID, the deployment would be rejected.\\n     *  @param signature the signature to revoke.\\n     */\\n    function revokeSignature(bytes calldata signature) external onlyOwner {\\n        if (revokedSignatures[signature]) {\\n            revert SignatureAlreadyRevoked(signature);\\n        }\\n\\n        revokedSignatures[signature] = true;\\n\\n        emit SignatureRevoked(signature);\\n    }\\n\\n    /**\\n     *  @dev Remove a signature from the revoke list.\\n     *  @param signature the signature to approve.\\n     */\\n    function approveSignature(bytes calldata signature) external onlyOwner {\\n        if (!revokedSignatures[signature]) {\\n            revert SignatureNotRevoked(signature);\\n        }\\n\\n        delete revokedSignatures[signature];\\n\\n        emit SignatureApproved(signature);\\n    }\\n\\n    /**\\n     *  @dev Transfer the ownership of the factory to a new owner.\\n     *  @param newOwner the new owner of the factory.\\n     */\\n    function transferFactoryOwnership(address newOwner) external onlyOwner {\\n        idFactory.transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     *  @dev Call a function on the factory. Only the owner of the Gateway can call this method.\\n     *  @param data the data to call on the factory.\\n     */\\n    function callFactory(bytes memory data) external onlyOwner {\\n        (bool success,) = address(idFactory).call(data);\\n        require(success, \\\"Gateway: call to factory failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/interface/IERC734.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/interface/IImplementationAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IImplementationAuthority {\\n\\n    // event emitted when the implementation contract is updated\\n    event UpdatedImplementation(address newAddress);\\n\\n    /**\\n     * @dev updates the address used as implementation by the proxies linked\\n     * to this ImplementationAuthority contract\\n     * @param _newImplementation the address of the new implementation contract\\n     * only Owner can call\\n     */\\n    function updateImplementation(address _newImplementation) external;\\n\\n    /**\\n     * @dev returns the address of the implementation\\n     */\\n    function getImplementation() external view returns(address);\\n}\\n\"\r\n    },\r\n    \"contracts/onchainid/proxy/IdentityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interface/IImplementationAuthority.sol\\\";\\n\\ncontract IdentityProxy {\\n\\n    /**\\n     *  @dev constructor of the proxy Identity contract\\n     *  @param _implementationAuthority the implementation Authority contract address\\n     *  @param initialManagementKey the management key at deployment\\n     *  the proxy is going to use the logic deployed on the implementation contract\\n     *  deployed at an address listed in the ImplementationAuthority contract\\n     */\\n    constructor(address _implementationAuthority, address initialManagementKey) {\\n        require(_implementationAuthority != address(0), \\\"invalid argument - zero address\\\");\\n        require(initialManagementKey != address(0), \\\"invalid argument - zero address\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, _implementationAuthority)\\n        }\\n\\n        address logic = IImplementationAuthority(_implementationAuthority).getImplementation();\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = logic.delegatecall(abi.encodeWithSignature(\\\"initialize(address)\\\", initialManagementKey));\\n        require(success, \\\"Initialization failed.\\\");\\n    }\\n\\n    /**\\n     *  @dev fallback proxy function used for any transaction call that is made using\\n     *  the Identity contract ABI and called on the proxy contract\\n     *  The proxy will update its local storage depending on the behaviour requested\\n     *  by the implementation contract given by the Implementation Authority\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external payable {\\n        address logic = IImplementationAuthority(implementationAuthority()).getImplementation();\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        calldatacopy(0x0, 0x0, calldatasize())\\n        let success := delegatecall(sub(gas(), 10000), logic, 0x0, calldatasize(), 0, 0)\\n        let retSz := returndatasize()\\n        returndatacopy(0, 0, retSz)\\n        switch success\\n            case 0 {\\n                revert(0, retSz)\\n            }\\n            default {\\n                return(0, retSz)\\n            }\\n        }\\n    }\\n\\n    function implementationAuthority() public view returns(address) {\\n        address implemAuth;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            implemAuth := sload(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7)\\n        }\\n        return implemAuth;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"idFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signersToApprove\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"RevokedSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureNotRevoked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAlreadyNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UnapprovedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SignatureRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"approveSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"approveSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSigners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"}],\"name\":\"deployIdentityForWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deployIdentityWithSalt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identityOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"managementKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"deployIdentityWithSaltAndManagementKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idFactory\",\"outputs\":[{\"internalType\":\"contract IdFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"revokedSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferFactoryOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gateway", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ce5ac9611c84c71917f857467decb7e9c30ca7600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}