{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\n/**\\n * @title Vesting\\n * @author Enjinstarter\\n */\\ncontract Vesting is Pausable, IVesting {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingSchedule {\\n        uint256 cliffDurationDays; // Cliff duration in days with respect to the start of vesting schedule\\n        uint256 percentReleaseAtScheduleStart; // Percentage of grant amount to be released in wei at start of vesting schedule\\n        uint256 percentReleaseForEachInterval; // Percentage of grant amount to be released in wei for each interval after cliff duration\\n        uint256 intervalDays; // Vesting interval in days\\n        uint256 gapDays; // Gap between intervals in days\\n        uint256 numberOfIntervals; // Number of intervals\\n        ReleaseMethod releaseMethod;\\n    }\\n\\n    struct VestingGrant {\\n        uint256 grantAmount; // Total number of tokens granted\\n        bool isRevocable; // true if vesting grant is revocable (a gift), false if irrevocable (purchased)\\n        bool isRevoked; // true if vesting grant has been revoked\\n        bool isActive; // true if vesting grant is active\\n    }\\n\\n    uint256 public constant BATCH_MAX_NUM = 100;\\n    uint256 public constant TOKEN_MAX_DECIMALS = 18;\\n    uint256 public constant PERCENT_100_WEI = 100 ether;\\n    uint256 public constant SECONDS_IN_DAY = 86400;\\n\\n    address public governanceAccount;\\n    address public vestingAdmin;\\n    address public tokenAddress;\\n    uint256 public tokenDecimals;\\n    uint256 public totalGrantAmount;\\n    uint256 public totalReleasedAmount;\\n    uint256 public scheduleStartTimestamp;\\n    bool public allowAccumulate;\\n\\n    VestingSchedule private _vestingSchedule;\\n    mapping(address => VestingGrant) private _vestingGrants;\\n    mapping(address => uint256) private _released;\\n\\n    constructor(\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        uint256 cliffDurationDays,\\n        uint256 percentReleaseAtScheduleStart,\\n        uint256 percentReleaseForEachInterval,\\n        uint256 intervalDays,\\n        uint256 gapDays,\\n        uint256 numberOfIntervals,\\n        ReleaseMethod releaseMethod,\\n        bool allowAccumulate_\\n    ) {\\n        require(tokenAddress_ != address(0), \\\"Vesting: zero token address\\\");\\n        require(\\n            tokenDecimals_ <= TOKEN_MAX_DECIMALS,\\n            \\\"Vesting: token decimals exceed 18\\\"\\n        );\\n        require(\\n            percentReleaseAtScheduleStart <= PERCENT_100_WEI,\\n            \\\"Vesting: percent release at grant start > 100%\\\"\\n        );\\n        require(\\n            percentReleaseForEachInterval <= PERCENT_100_WEI,\\n            \\\"Vesting: percent release for each interval > 100%\\\"\\n        );\\n        require(\\n            intervalDays.add(gapDays) > 0,\\n            \\\"Vesting: zero interval and gap\\\"\\n        );\\n        require(\\n            percentReleaseAtScheduleStart.add(\\n                percentReleaseForEachInterval.mul(numberOfIntervals)\\n            ) <= PERCENT_100_WEI,\\n            \\\"Vesting: total percent release > 100%\\\"\\n        );\\n\\n        governanceAccount = msg.sender;\\n        vestingAdmin = msg.sender;\\n\\n        tokenAddress = tokenAddress_;\\n        tokenDecimals = tokenDecimals_;\\n\\n        _vestingSchedule.cliffDurationDays = cliffDurationDays;\\n        _vestingSchedule\\n            .percentReleaseAtScheduleStart = percentReleaseAtScheduleStart;\\n        _vestingSchedule\\n            .percentReleaseForEachInterval = percentReleaseForEachInterval;\\n        _vestingSchedule.intervalDays = intervalDays;\\n        _vestingSchedule.gapDays = gapDays;\\n        _vestingSchedule.numberOfIntervals = numberOfIntervals;\\n        _vestingSchedule.releaseMethod = releaseMethod;\\n\\n        allowAccumulate = allowAccumulate_;\\n    }\\n\\n    modifier onlyBy(address account) {\\n        require(msg.sender == account, \\\"Vesting: sender unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev isRevocable will be ignored if grant already added but amount allowed to accumulate.\\n     */\\n    function addVestingGrant(\\n        address account,\\n        uint256 grantAmount,\\n        bool isRevocable\\n    ) external override onlyBy(vestingAdmin) {\\n        _addVestingGrant(account, grantAmount, isRevocable);\\n    }\\n\\n    function revokeVestingGrant(address account)\\n        external\\n        override\\n        onlyBy(vestingAdmin)\\n    {\\n        _revokeVestingGrant(account);\\n    }\\n\\n    function release() external override whenNotPaused {\\n        uint256 releasableAmount = releasableAmountFor(msg.sender);\\n\\n        _release(msg.sender, releasableAmount);\\n    }\\n\\n    function transferUnusedTokens()\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        uint256 balanceInDecimals = IERC20(tokenAddress).balanceOf(\\n            address(this)\\n        );\\n        uint256 balanceInWei = scaleDecimalsToWei(\\n            balanceInDecimals,\\n            tokenDecimals\\n        );\\n\\n        uint256 unusedAmount = balanceInWei.add(totalReleasedAmount).sub(\\n            totalGrantAmount\\n        );\\n        require(unusedAmount > 0, \\\"Vesting: nothing to transfer\\\");\\n\\n        uint256 transferAmount = scaleWeiToDecimals(\\n            unusedAmount,\\n            tokenDecimals\\n        );\\n        IERC20(tokenAddress).safeTransfer(governanceAccount, transferAmount);\\n    }\\n\\n    function addVestingGrantsBatch(\\n        address[] memory accounts,\\n        uint256[] memory grantAmounts,\\n        bool[] memory isRevocables\\n    ) external override onlyBy(vestingAdmin) {\\n        require(accounts.length > 0, \\\"Vesting: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"Vesting: exceed max\\\");\\n        require(\\n            grantAmounts.length == accounts.length,\\n            \\\"Vesting: grant amounts length different\\\"\\n        );\\n        require(\\n            isRevocables.length == accounts.length,\\n            \\\"Vesting: is revocables length different\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addVestingGrant(accounts[i], grantAmounts[i], isRevocables[i]);\\n        }\\n    }\\n\\n    function revokeVestingGrantsBatch(address[] memory accounts)\\n        external\\n        override\\n        onlyBy(vestingAdmin)\\n    {\\n        require(accounts.length > 0, \\\"Vesting: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"Vesting: exceed max\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _revokeVestingGrant(accounts[i]);\\n        }\\n    }\\n\\n    function setScheduleStartTimestamp(uint256 scheduleStartTimestamp_)\\n        external\\n        override\\n        onlyBy(vestingAdmin)\\n    {\\n        require(\\n            scheduleStartTimestamp_ > block.timestamp,\\n            \\\"Vesting: start before current timestamp\\\"\\n        );\\n\\n        uint256 oldScheduleStartTimestamp = scheduleStartTimestamp;\\n        require(\\n            oldScheduleStartTimestamp == 0 ||\\n                block.timestamp < oldScheduleStartTimestamp,\\n            \\\"Vesting: already started\\\"\\n        );\\n\\n        scheduleStartTimestamp = scheduleStartTimestamp_;\\n\\n        emit ScheduleStartTimestampSet(\\n            msg.sender,\\n            scheduleStartTimestamp_,\\n            oldScheduleStartTimestamp\\n        );\\n    }\\n\\n    function setGovernanceAccount(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        governanceAccount = account;\\n    }\\n\\n    function setVestingAdmin(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        vestingAdmin = account;\\n    }\\n\\n    function pause() external onlyBy(vestingAdmin) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyBy(vestingAdmin) {\\n        _unpause();\\n    }\\n\\n    function getVestingSchedule()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 cliffDurationDays,\\n            uint256 percentReleaseAtScheduleStart,\\n            uint256 percentReleaseForEachInterval,\\n            uint256 intervalDays,\\n            uint256 gapDays,\\n            uint256 numberOfIntervals,\\n            ReleaseMethod releaseMethod\\n        )\\n    {\\n        VestingSchedule memory vestingSchedule = _vestingSchedule;\\n        cliffDurationDays = vestingSchedule.cliffDurationDays;\\n        percentReleaseAtScheduleStart = vestingSchedule\\n            .percentReleaseAtScheduleStart;\\n        percentReleaseForEachInterval = vestingSchedule\\n            .percentReleaseForEachInterval;\\n        intervalDays = vestingSchedule.intervalDays;\\n        gapDays = vestingSchedule.gapDays;\\n        numberOfIntervals = vestingSchedule.numberOfIntervals;\\n        releaseMethod = vestingSchedule.releaseMethod;\\n    }\\n\\n    function vestingGrantFor(address account)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 grantAmount,\\n            bool isRevocable,\\n            bool isRevoked,\\n            bool isActive\\n        )\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        grantAmount = vestingGrant.grantAmount;\\n        isRevocable = vestingGrant.isRevocable;\\n        isRevoked = vestingGrant.isRevoked;\\n        isActive = vestingGrant.isActive;\\n    }\\n\\n    function revoked(address account)\\n        public\\n        view\\n        override\\n        returns (bool isRevoked)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        isRevoked = _vestingGrants[account].isRevoked;\\n    }\\n\\n    function releasedAmountFor(address account)\\n        public\\n        view\\n        override\\n        returns (uint256 releasedAmount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        releasedAmount = _released[account];\\n    }\\n\\n    function releasableAmountFor(address account)\\n        public\\n        view\\n        override\\n        returns (uint256 releasableAmount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        uint256 startTimestamp = scheduleStartTimestamp;\\n        require(startTimestamp > 0, \\\"Vesting: undefined start time\\\");\\n        require(block.timestamp >= startTimestamp, \\\"Vesting: not started\\\");\\n\\n        require(!revoked(account), \\\"Vesting: revoked\\\");\\n\\n        uint256 vestedAmount = vestedAmountFor(account);\\n        releasableAmount = scaleDecimalsToWei(\\n            scaleWeiToDecimals(vestedAmount, tokenDecimals),\\n            tokenDecimals\\n        ).sub(releasedAmountFor(account));\\n    }\\n\\n    function vestedAmountFor(address account)\\n        public\\n        view\\n        override\\n        returns (uint256 vestedAmount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"Vesting: inactive\\\");\\n\\n        uint256 startTimestamp = scheduleStartTimestamp;\\n\\n        if (startTimestamp == 0) {\\n            return 0;\\n        }\\n\\n        if (block.timestamp < startTimestamp) {\\n            return 0;\\n        }\\n\\n        if (revoked(account)) {\\n            return releasedAmountFor(account);\\n        }\\n\\n        VestingSchedule memory vestingSchedule = _vestingSchedule;\\n\\n        vestedAmount = 0;\\n\\n        if (vestingSchedule.percentReleaseAtScheduleStart > 0) {\\n            vestedAmount = vestingGrant\\n                .grantAmount\\n                .mul(vestingSchedule.percentReleaseAtScheduleStart)\\n                .div(PERCENT_100_WEI);\\n        }\\n\\n        uint256 cliffEndTimestamp = startTimestamp.add(\\n            vestingSchedule.cliffDurationDays.mul(SECONDS_IN_DAY)\\n        );\\n        if (block.timestamp < cliffEndTimestamp) {\\n            return vestedAmount;\\n        }\\n\\n        uint256 intervalSeconds = vestingSchedule.intervalDays.mul(\\n            SECONDS_IN_DAY\\n        );\\n        uint256 gapSeconds = vestingSchedule.gapDays.mul(SECONDS_IN_DAY);\\n        uint256 scheduleEndTimestamp = vestingSchedule.numberOfIntervals > 0\\n            ? cliffEndTimestamp\\n                .add(intervalSeconds.mul(vestingSchedule.numberOfIntervals))\\n                .add(gapSeconds.mul(vestingSchedule.numberOfIntervals.sub(1)))\\n            : cliffEndTimestamp;\\n        if (block.timestamp >= scheduleEndTimestamp) {\\n            vestedAmount = vestingGrant.grantAmount;\\n            return vestedAmount;\\n        }\\n\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply\\n        // slither-disable-next-line divide-before-multiply\\n        uint256 intervalNumber = block.timestamp.sub(cliffEndTimestamp).div(\\n            intervalSeconds.add(gapSeconds)\\n        );\\n        require(\\n            intervalNumber < vestingSchedule.numberOfIntervals,\\n            \\\"Vesting: unexpected interval number\\\"\\n        );\\n\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply\\n        // slither-disable-next-line divide-before-multiply\\n        uint256 totalPercentage = vestingSchedule\\n            .percentReleaseForEachInterval\\n            .mul(intervalNumber);\\n        if (vestingSchedule.releaseMethod == ReleaseMethod.IntervalEnd) {\\n            // solhint-disable-previous-line no-empty-blocks\\n        } else if (\\n            vestingSchedule.releaseMethod == ReleaseMethod.LinearlyPerSecond\\n        ) {\\n            // https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply\\n            // slither-disable-next-line divide-before-multiply\\n            uint256 secondsInInterval = block.timestamp.sub(\\n                cliffEndTimestamp.add(\\n                    intervalSeconds.add(gapSeconds).mul(intervalNumber)\\n                )\\n            );\\n            totalPercentage = secondsInInterval >= intervalSeconds\\n                ? totalPercentage.add(\\n                    vestingSchedule.percentReleaseForEachInterval\\n                )\\n                : totalPercentage.add(\\n                    vestingSchedule\\n                        .percentReleaseForEachInterval\\n                        .mul(secondsInInterval)\\n                        .div(intervalSeconds)\\n                );\\n        } else {\\n            require(false, \\\"Vesting: unexpected release method\\\");\\n        }\\n\\n        uint256 maxPercentage = PERCENT_100_WEI.sub(\\n            vestingSchedule.percentReleaseAtScheduleStart\\n        );\\n        if (totalPercentage > maxPercentage) {\\n            totalPercentage = maxPercentage;\\n        }\\n\\n        vestedAmount = vestedAmount.add(\\n            vestingGrant.grantAmount.mul(totalPercentage).div(PERCENT_100_WEI)\\n        );\\n    }\\n\\n    function unvestedAmountFor(address account)\\n        external\\n        view\\n        override\\n        returns (uint256 unvestedAmount)\\n    {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"Vesting: inactive\\\");\\n\\n        if (revoked(account)) {\\n            unvestedAmount = 0;\\n        } else {\\n            unvestedAmount = vestingGrant.grantAmount.sub(\\n                vestedAmountFor(account)\\n            );\\n        }\\n    }\\n\\n    function scaleWeiToDecimals(uint256 weiAmount, uint256 decimals)\\n        public\\n        pure\\n        returns (uint256 decimalsAmount)\\n    {\\n        require(decimals <= TOKEN_MAX_DECIMALS, \\\"Vesting: decimals exceed 18\\\");\\n\\n        if (decimals < TOKEN_MAX_DECIMALS && weiAmount > 0) {\\n            uint256 decimalsDiff = uint256(TOKEN_MAX_DECIMALS).sub(decimals);\\n            decimalsAmount = weiAmount.div(10**decimalsDiff);\\n        } else {\\n            decimalsAmount = weiAmount;\\n        }\\n    }\\n\\n    function scaleDecimalsToWei(uint256 decimalsAmount, uint256 decimals)\\n        public\\n        pure\\n        returns (uint256 weiAmount)\\n    {\\n        require(decimals <= TOKEN_MAX_DECIMALS, \\\"Vesting: decimals exceed 18\\\");\\n\\n        if (decimals < TOKEN_MAX_DECIMALS && decimalsAmount > 0) {\\n            uint256 decimalsDiff = uint256(TOKEN_MAX_DECIMALS).sub(decimals);\\n            weiAmount = decimalsAmount.mul(10**decimalsDiff);\\n        } else {\\n            weiAmount = decimalsAmount;\\n        }\\n    }\\n\\n    function _addVestingGrant(\\n        address account,\\n        uint256 grantAmount,\\n        bool isRevocable\\n    ) private {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n        require(grantAmount > 0, \\\"Vesting: zero grant amount\\\");\\n\\n        uint256 startTimestamp = scheduleStartTimestamp;\\n        require(\\n            startTimestamp == 0 || block.timestamp < startTimestamp,\\n            \\\"Vesting: already started\\\"\\n        );\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(\\n            allowAccumulate || !vestingGrant.isActive,\\n            \\\"Vesting: already added\\\"\\n        );\\n        require(!revoked(account), \\\"Vesting: already revoked\\\");\\n\\n        totalGrantAmount = totalGrantAmount.add(grantAmount);\\n        uint256 balanceInDecimals = IERC20(tokenAddress).balanceOf(\\n            address(this)\\n        );\\n        require(balanceInDecimals > 0, \\\"Vesting: zero balance\\\");\\n        uint256 balanceInWei = scaleDecimalsToWei(\\n            balanceInDecimals,\\n            tokenDecimals\\n        );\\n        require(\\n            totalGrantAmount <= balanceInWei,\\n            \\\"Vesting: total grant amount exceed balance\\\"\\n        );\\n\\n        if (vestingGrant.isActive) {\\n            _vestingGrants[account].grantAmount = vestingGrant.grantAmount.add(\\n                grantAmount\\n            );\\n            // _vestingGrants[account].isRevocable = isRevocable;\\n        } else {\\n            _vestingGrants[account] = VestingGrant({\\n                grantAmount: grantAmount,\\n                isRevocable: isRevocable,\\n                isRevoked: false,\\n                isActive: true\\n            });\\n        }\\n\\n        emit VestingGrantAdded(account, grantAmount, isRevocable);\\n    }\\n\\n    function _revokeVestingGrant(address account) private {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"Vesting: inactive\\\");\\n        require(vestingGrant.isRevocable, \\\"Vesting: not revocable\\\");\\n        require(!revoked(account), \\\"Vesting: already revoked\\\");\\n\\n        uint256 releasedAmount = releasedAmountFor(account);\\n        uint256 remainderAmount = vestingGrant.grantAmount.sub(releasedAmount);\\n        totalGrantAmount = totalGrantAmount.sub(remainderAmount);\\n        _vestingGrants[account].isRevoked = true;\\n\\n        emit VestingGrantRevoked(\\n            account,\\n            remainderAmount,\\n            vestingGrant.grantAmount,\\n            releasedAmount\\n        );\\n    }\\n\\n    function _release(address account, uint256 amount) private {\\n        require(account != address(0), \\\"Vesting: zero account\\\");\\n        require(amount > 0, \\\"Vesting: zero amount\\\");\\n\\n        uint256 transferDecimalsAmount = scaleWeiToDecimals(\\n            amount,\\n            tokenDecimals\\n        );\\n        uint256 transferWeiAmount = scaleDecimalsToWei(\\n            transferDecimalsAmount,\\n            tokenDecimals\\n        );\\n\\n        _released[account] = _released[account].add(transferWeiAmount);\\n        totalReleasedAmount = totalReleasedAmount.add(transferWeiAmount);\\n\\n        emit TokensReleased(account, transferWeiAmount);\\n\\n        IERC20(tokenAddress).safeTransfer(account, transferDecimalsAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title IVesting\\n * @author Enjinstarter\\n */\\ninterface IVesting {\\n    enum ReleaseMethod {\\n        IntervalEnd, // 0: at end of each interval\\n        LinearlyPerSecond //  1: linearly per second across interval\\n    }\\n\\n    function addVestingGrant(\\n        address account,\\n        uint256 grantAmount,\\n        bool isRevocable\\n    ) external;\\n\\n    function revokeVestingGrant(address account) external;\\n\\n    function release() external;\\n\\n    function transferUnusedTokens() external;\\n\\n    function addVestingGrantsBatch(\\n        address[] memory accounts,\\n        uint256[] memory grantAmounts,\\n        bool[] memory isRevocables\\n    ) external;\\n\\n    function revokeVestingGrantsBatch(address[] memory accounts) external;\\n\\n    function setScheduleStartTimestamp(uint256 scheduleStartTimestamp_)\\n        external;\\n\\n    function setGovernanceAccount(address account) external;\\n\\n    function setVestingAdmin(address account) external;\\n\\n    function getVestingSchedule()\\n        external\\n        view\\n        returns (\\n            uint256 cliffDurationDays,\\n            uint256 percentReleaseAtGrantStart,\\n            uint256 percentReleaseAtIntervalStart,\\n            uint256 intervalDays,\\n            uint256 gapDays,\\n            uint256 numberOfIntervals,\\n            ReleaseMethod releaseMethod\\n        );\\n\\n    function vestingGrantFor(address account)\\n        external\\n        view\\n        returns (\\n            uint256 grantAmount,\\n            bool isRevocable,\\n            bool isRevoked,\\n            bool isActive\\n        );\\n\\n    function revoked(address account) external view returns (bool isRevoked);\\n\\n    function releasedAmountFor(address account)\\n        external\\n        view\\n        returns (uint256 releasedAmount);\\n\\n    function releasableAmountFor(address account)\\n        external\\n        view\\n        returns (uint256 unreleasedAmount);\\n\\n    function vestedAmountFor(address account)\\n        external\\n        view\\n        returns (uint256 vestedAmount);\\n\\n    function unvestedAmountFor(address account)\\n        external\\n        view\\n        returns (uint256 unvestedAmount);\\n\\n    event VestingGrantAdded(\\n        address indexed account,\\n        uint256 indexed grantAmount,\\n        bool isRevocable\\n    );\\n    event VestingGrantRevoked(\\n        address indexed account,\\n        uint256 remainderAmount,\\n        uint256 grantAmount,\\n        uint256 releasedAmount\\n    );\\n    event TokensReleased(address indexed account, uint256 amount);\\n    event ScheduleStartTimestampSet(\\n        address indexed account,\\n        uint256 newScheduleStartTimestamp,\\n        uint256 oldScheduleStartTimestamp\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleaseAtScheduleStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleaseForEachInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gapDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIntervals\",\"type\":\"uint256\"},{\"internalType\":\"enum IVesting.ReleaseMethod\",\"name\":\"releaseMethod\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowAccumulate_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScheduleStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldScheduleStartTimestamp\",\"type\":\"uint256\"}],\"name\":\"ScheduleStartTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"VestingGrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainderAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"VestingGrantRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_MAX_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_100_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"addVestingGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"grantAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isRevocables\",\"type\":\"bool[]\"}],\"name\":\"addVestingGrantsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAccumulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliffDurationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleaseAtScheduleStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentReleaseForEachInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gapDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfIntervals\",\"type\":\"uint256\"},{\"internalType\":\"enum IVesting.ReleaseMethod\",\"name\":\"releaseMethod\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeVestingGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"revokeVestingGrantsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimalsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"scaleDecimalsToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"scaleWeiToDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimalsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGovernanceAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleStartTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setScheduleStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setVestingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUnusedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unvestedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingGrantFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f1428850f92b87e629c6f3a3b75bffbc496f7ba600000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}