{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ConveyorRouterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ConveyorErrors.sol\\\";\\nimport {IERC20} from \\\"../lib/interfaces/token/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"../lib/libraries/token/SafeERC20.sol\\\";\\nimport {ConveyorMath} from \\\"./lib/ConveyorMath.sol\\\";\\nimport {ConveyorSwapCallbacks} from \\\"./callbacks/ConveyorSwapCallbacks.sol\\\";\\nimport {IConveyorRouterV1} from \\\"./interfaces/IConveyorRouterV1.sol\\\";\\n\\ninterface IConveyorMulticall {\\n    function executeMulticall(ConveyorRouterV1.SwapAggregatorMulticall calldata genericMulticall) external;\\n}\\n\\n/// @title ConveyorRouterV1\\n/// @author 0xKitsune, 0xOsiris, Conveyor Labs\\n/// @notice Multicall contract for token Swaps.\\ncontract ConveyorRouterV1 is IConveyorRouterV1 {\\n    using SafeERC20 for IERC20;\\n\\n    address public CONVEYOR_MULTICALL;\\n    address public immutable WETH;\\n\\n    address owner;\\n    address tempOwner;\\n\\n    uint128 internal constant AFFILIATE_PERCENT = 5534023222112865000;\\n    uint128 internal constant REFERRAL_PERCENT = 5534023222112865000;\\n\\n    /**\\n     * @notice Event that is emitted when ETH is withdrawn from the contract\\n     *\\n     */\\n    event Withdraw(address indexed receiver, uint256 amount);\\n\\n    ///@notice Modifier function to only allow the owner of the contract to call specific functions\\n    ///@dev Functions with onlyOwner: withdraw\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert MsgSenderIsNotOwner();\\n        }\\n\\n        _;\\n    }\\n\\n    ///@notice Mapping from uint16 to affiliate address.\\n    mapping(uint16 => address) public affiliates;\\n    ///@notice Mapping from uint16 to referrer address.\\n    mapping(uint16 => address) public referrers;\\n\\n    ///@notice Mapping from affiliate address to affiliate index.\\n    mapping(address => uint16) public affiliateIndex;\\n    ///@notice Mapping from referrer address to referrer index.\\n    mapping(address => uint16) public referrerIndex;\\n\\n    ///@notice Current Nonce for affiliate addresses.\\n    uint16 public affiliateNonce;\\n    ///@notice Current Nonce for referrer addresses.\\n    uint16 public referrerNonce;\\n\\n    ///@dev Deploys the ConveyorMulticall contract.\\n    ///@param _weth Address of Wrapped Native Asset.\\n    constructor(address _weth) payable {\\n        require(_weth != address(0), \\\"WETH address is zero\\\");\\n        CONVEYOR_MULTICALL = address(new ConveyorMulticall());\\n        WETH = _weth;\\n        owner = tx.origin;\\n    }\\n\\n    ///@notice Struct for token to token swap data.\\n    struct TokenToTokenSwapData {\\n        address tokenIn;\\n        address tokenOut;\\n        uint112 amountIn;\\n        uint112 amountOutMin;\\n        uint16 affiliate;\\n        uint16 referrer;\\n    }\\n\\n    ///@notice Struct for token to ETH swap data.\\n    struct TokenToEthSwapData {\\n        address tokenIn;\\n        uint112 amountIn;\\n        uint112 amountOutMin;\\n        uint16 affiliate;\\n        uint16 referrer;\\n    }\\n\\n    ///@notice Struct for ETH to token swap data.\\n    struct EthToTokenSwapData {\\n        address tokenOut;\\n        uint112 amountOutMin;\\n        uint112 protocolFee;\\n        uint16 affiliate;\\n        uint16 referrer;\\n    }\\n\\n    /// @notice Gas optimized Multicall struct\\n    struct SwapAggregatorMulticall {\\n        address tokenInDestination;\\n        Call[] calls;\\n    }\\n\\n    /// @notice Call struct for token Swaps.\\n    /// @param target Address to call.\\n    /// @param callData Data to call.\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    /// @notice Swap tokens for tokens.\\n    /// @param swapData The swap data for the transaction.\\n    /// @param genericMulticall Multicall to be executed.\\n    function swapExactTokenForToken(\\n        TokenToTokenSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata genericMulticall\\n    ) public payable {\\n        ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n        IERC20(swapData.tokenIn).transferFrom(msg.sender, genericMulticall.tokenInDestination, swapData.amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(swapData.tokenOut).balanceOf(msg.sender);\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + swapData.amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(genericMulticall);\\n\\n        uint256 balanceAfter = IERC20(swapData.tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Check if tokenOut balance of msg.sender is sufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, swapData.amountOutMin);\\n        }\\n        if (swapData.affiliate & 0xFFFF != 0x0) {\\n            address affiliate = affiliates[swapData.affiliate >> 0x1];\\n            if (affiliate == address(0)) {\\n                revert AffiliateDoesNotExist();\\n            }\\n            _safeTransferETH(affiliate, ConveyorMath.mul64U(AFFILIATE_PERCENT, msg.value));\\n        }\\n        ///@dev First bit of referrer is used to check if referrer exists\\n        if (swapData.referrer & 0xFFFF != 0x0) {\\n            address referrer = referrers[swapData.referrer >> 0x1];\\n            if (referrer == address(0)) {\\n                revert ReferrerDoesNotExist();\\n            }\\n            _safeTransferETH(referrer, ConveyorMath.mul64U(REFERRAL_PERCENT, msg.value));\\n        }\\n    }\\n\\n    /// @notice Swap ETH for tokens.\\n    /// @param swapData The swap data for the transaction.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactEthForToken(\\n        EthToTokenSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        if (swapData.protocolFee > msg.value) {\\n            revert InsufficientMsgValue();\\n        }\\n\\n        ///@notice Cache the amountIn to save gas.\\n        uint256 amountIn = msg.value - swapData.protocolFee;\\n\\n        ///@notice Deposit the msg.value-protocolFee into WETH.\\n        _depositEth(amountIn, WETH);\\n\\n        ///@notice Transfer WETH from WETH to tokenInDestination address.\\n        IERC20(WETH).transfer(swapAggregatorMulticall.tokenInDestination, amountIn);\\n\\n        ///@notice Get tokenOut balance of msg.sender.\\n        uint256 balanceBefore = IERC20(swapData.tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Calculate tokenOut amount required.\\n        uint256 tokenOutAmountRequired = balanceBefore + swapData.amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(swapAggregatorMulticall);\\n\\n        ///@notice Get tokenOut balance of msg.sender after multicall execution.\\n        uint256 balanceAfter = IERC20(swapData.tokenOut).balanceOf(msg.sender);\\n\\n        ///@notice Revert if tokenOut balance of msg.sender is insufficient.\\n        if (balanceAfter < tokenOutAmountRequired) {\\n            revert InsufficientOutputAmount(tokenOutAmountRequired - balanceAfter, swapData.amountOutMin);\\n        }\\n        if (swapData.affiliate & 0xFFFF != 0x0) {\\n            address affiliate = affiliates[swapData.affiliate >> 0x1];\\n            if (affiliate == address(0)) {\\n                revert AffiliateDoesNotExist();\\n            }\\n            _safeTransferETH(affiliate, ConveyorMath.mul64U(AFFILIATE_PERCENT, swapData.protocolFee));\\n        }\\n        ///@dev First bit of referrer is used to check if referrer exists\\n        if (swapData.referrer & 0xFFFF != 0x0) {\\n            address referrer = referrers[swapData.referrer >> 0x1];\\n            if (referrer == address(0)) {\\n                revert ReferrerDoesNotExist();\\n            }\\n            _safeTransferETH(referrer, ConveyorMath.mul64U(REFERRAL_PERCENT, swapData.protocolFee));\\n        }\\n    }\\n\\n    /// @notice Swap tokens for ETH.\\n    /// @param swapData The swap data for the transaction.\\n    /// @param swapAggregatorMulticall Multicall to be executed.\\n    function swapExactTokenForEth(\\n        TokenToEthSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) public payable {\\n        ///@dev Ignore if the tokenInDestination is address(0).\\n        if (swapAggregatorMulticall.tokenInDestination != address(0)) {\\n            ///@notice Transfer tokenIn from msg.sender to tokenInDestination address.\\n            IERC20(swapData.tokenIn).transferFrom(\\n                msg.sender, swapAggregatorMulticall.tokenInDestination, swapData.amountIn\\n            );\\n        }\\n        ///@notice Get ETH balance of msg.sender.\\n        uint256 balanceBefore = msg.sender.balance;\\n\\n        ///@notice Calculate amountOutRequired.\\n        uint256 amountOutRequired = balanceBefore + swapData.amountOutMin;\\n\\n        ///@notice Execute Multicall.\\n        IConveyorMulticall(CONVEYOR_MULTICALL).executeMulticall(swapAggregatorMulticall);\\n\\n        ///@notice Get WETH balance of this contract.\\n        uint256 balanceWeth = IERC20(WETH).balanceOf(address(this));\\n\\n        ///@notice Withdraw WETH from this contract.\\n        _withdrawEth(balanceWeth, WETH);\\n\\n        ///@notice Transfer ETH to msg.sender.\\n        _safeTransferETH(msg.sender, balanceWeth);\\n\\n        ///@notice Revert if Eth balance of the caller is insufficient.\\n        if (msg.sender.balance < amountOutRequired) {\\n            revert InsufficientOutputAmount(amountOutRequired - msg.sender.balance, swapData.amountOutMin);\\n        }\\n        if (swapData.affiliate & 0xFFFF != 0x0) {\\n            address affiliate = affiliates[swapData.affiliate >> 0x1];\\n            if (affiliate == address(0)) {\\n                revert AffiliateDoesNotExist();\\n            }\\n            _safeTransferETH(affiliate, ConveyorMath.mul64U(AFFILIATE_PERCENT, msg.value));\\n        }\\n        ///@dev First bit of referrer is used to check if referrer exists\\n        if (swapData.referrer & 0xFFFF != 0x0) {\\n            address referrer = referrers[swapData.referrer >> 0x1];\\n            if (referrer == address(0)) {\\n                revert ReferrerDoesNotExist();\\n            }\\n            _safeTransferETH(referrer, ConveyorMath.mul64U(REFERRAL_PERCENT, msg.value));\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a optimized token to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForToken(\\n        TokenToTokenSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactTokenForToken(swapData, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a ETH to token swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactEthForToken(\\n        EthToTokenSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactEthForToken(swapData, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    /// @notice Quotes the amount of gas used for a token to ETH swap.\\n    /// @dev This function should be used off chain through a static call.\\n    function quoteSwapExactTokenForEth(\\n        TokenToEthSwapData calldata swapData,\\n        SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed) {\\n        assembly {\\n            mstore(0x60, gas())\\n        }\\n        swapExactTokenForEth(swapData, swapAggregatorMulticall);\\n        assembly {\\n            gasConsumed := sub(mload(0x60), gas())\\n        }\\n    }\\n\\n    ///@notice Helper function to transfer ETH.\\n    function _safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        if (!success) {\\n            revert ETHTransferFailed();\\n        }\\n    }\\n\\n    /// @notice Helper function to Withdraw ETH from WETH.\\n    function _withdrawEth(uint256 amount, address weth) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0, shl(224, 0x2e1a7d4d) /* keccak256(\\\"withdraw(uint256)\\\") */ )\\n            mstore(4, amount)\\n            if iszero(\\n                call(\\n                    gas(), /* gas */\\n                    weth, /* to */\\n                    0, /* value */\\n                    0, /* in */\\n                    68, /* in size */\\n                    0, /* out */\\n                    0 /* out size */\\n                )\\n            ) { revert(\\\"Native Token Withdraw failed\\\", amount) }\\n        }\\n    }\\n\\n    /// @notice Helper function to Deposit ETH into WETH.\\n    function _depositEth(uint256 amount, address weth) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0, shl(224, 0xd0e30db0)) /* keccak256(\\\"deposit()\\\") */\\n            if iszero(\\n                call(\\n                    gas(), /* gas */\\n                    weth, /* to */\\n                    amount, /* value */\\n                    0, /* in */\\n                    0, /* in size */\\n                    0, /* out */\\n                    0 /* out size */\\n                )\\n            ) { revert(\\\"Native token deposit failed\\\", amount) }\\n        }\\n    }\\n\\n    /// @notice Withdraw ETH from this contract.\\n    function withdraw() external onlyOwner {\\n        _safeTransferETH(msg.sender, address(this).balance);\\n        emit Withdraw(msg.sender, address(this).balance);\\n    }\\n\\n    ///@notice Function to confirm ownership transfer of the contract.\\n    function confirmTransferOwnership() external {\\n        if (msg.sender != tempOwner) {\\n            revert UnauthorizedCaller();\\n        }\\n\\n        ///@notice Cleanup tempOwner storage.\\n        tempOwner = address(0);\\n        owner = msg.sender;\\n    }\\n\\n    ///@notice Function to transfer ownership of the contract.\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        tempOwner = newOwner;\\n    }\\n\\n    ///@notice Function to upgrade the ConveyorMulticall contract.\\n    function upgradeMulticall(bytes memory bytecode, bytes32 salt) external payable onlyOwner returns (address) {\\n        assembly {\\n            let addr := create2(callvalue(), add(bytecode, 0x20), mload(bytecode), salt)\\n\\n            if iszero(extcodesize(addr)) { revert(0, 0) }\\n\\n            sstore(CONVEYOR_MULTICALL.slot, addr)\\n        }\\n\\n        return CONVEYOR_MULTICALL;\\n    }\\n\\n    ///@notice Function to set affiliate address.\\n    function initializeAffiliate(address affiliateAddress) external onlyOwner {\\n        uint16 tempAffiliateNonce = affiliateNonce;\\n        affiliates[tempAffiliateNonce] = affiliateAddress;\\n        affiliateIndex[affiliateAddress] = tempAffiliateNonce;\\n        unchecked {\\n            tempAffiliateNonce++;\\n            require(tempAffiliateNonce < type(uint16).max >> 0x1, \\\"Affiliate nonce overflow\\\");\\n            affiliateNonce = tempAffiliateNonce;\\n        }\\n    }\\n\\n    ///@notice Function to set referrer mapping.\\n    function initializeReferrer() external payable {\\n        if (referrerIndex[msg.sender] != 0) {\\n            revert ReferrerAlreadyInitialized();\\n        }\\n        uint16 tempReferrerNonce = referrerNonce;\\n        referrers[tempReferrerNonce] = msg.sender;\\n        referrerIndex[msg.sender] = uint16(tempReferrerNonce);\\n\\n        unchecked {\\n            tempReferrerNonce++;\\n            require(tempReferrerNonce < type(uint16).max >> 0x1, \\\"Referrer nonce overflow\\\");\\n            referrerNonce = tempReferrerNonce;\\n        }\\n    }\\n\\n    /// @notice Fallback receiver function.\\n    receive() external payable {}\\n}\\n\\n/// @title ConveyorMulticall\\n/// @author 0xOsiris, 0xKitsune, Conveyor Labs\\n/// @notice Optimized multicall execution contract.\\ncontract ConveyorMulticall is IConveyorMulticall, ConveyorSwapCallbacks {\\n    using SafeERC20 for IERC20;\\n\\n    constructor() {}\\n\\n    function executeMulticall(ConveyorRouterV1.SwapAggregatorMulticall calldata multicall) external {\\n        for (uint256 i = 0; i < multicall.calls.length;) {\\n            address target = multicall.calls[i].target;\\n            bytes calldata callData = multicall.calls[i].callData;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let freeMemoryPointer := mload(0x40)\\n                calldatacopy(freeMemoryPointer, callData.offset, callData.length)\\n                if iszero(call(gas(), target, 0, freeMemoryPointer, callData.length, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ConveyorErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nerror InsufficientWalletBalance(address account, uint256 balance, uint256 balanceNeeded);\\nerror OrderDoesNotExist(bytes32 orderId);\\nerror OrderQuantityIsZero();\\nerror InsufficientOrderInputValue();\\nerror IncongruentInputTokenInOrderGroup(address token, address expectedToken);\\nerror TokenInIsTokenOut();\\nerror IncongruentOutputTokenInOrderGroup(address token, address expectedToken);\\nerror InsufficientOutputAmount(uint256 amountOut, uint256 expectedAmountOut);\\nerror InsufficientInputAmount(uint256 amountIn, uint256 expectedAmountIn);\\nerror InsufficientLiquidity();\\nerror InsufficientAllowanceForOrderPlacement(address token, uint256 approvedQuantity, uint256 approvedQuantityNeeded);\\nerror InsufficientAllowanceForOrderUpdate(address token, uint256 approvedQuantity, uint256 approvedQuantityNeeded);\\nerror InvalidOrderGroupSequence();\\nerror IncongruentFeeInInOrderGroup();\\nerror IncongruentFeeOutInOrderGroup();\\nerror IncongruentTaxedTokenInOrderGroup();\\nerror IncongruentStoplossStatusInOrderGroup();\\nerror IncongruentBuySellStatusInOrderGroup();\\nerror NonEOAStoplossExecution();\\nerror MsgSenderIsNotTxOrigin();\\nerror MsgSenderIsNotLimitOrderRouter();\\nerror MsgSenderIsNotLimitOrderExecutor();\\nerror MsgSenderIsNotSandboxRouter();\\nerror MsgSenderIsNotOwner();\\nerror MsgSenderIsNotOrderOwner();\\nerror MsgSenderIsNotOrderBook();\\nerror MsgSenderIsNotLimitOrderBook();\\nerror MsgSenderIsNotTempOwner();\\nerror Reentrancy();\\nerror ETHTransferFailed();\\nerror InvalidAddress();\\nerror UnauthorizedUniswapV3CallbackCaller();\\nerror DuplicateOrderIdsInOrderGroup();\\nerror InvalidCalldata();\\nerror InsufficientMsgValue();\\nerror UnauthorizedCaller();\\nerror AmountInIsZero();\\n///@notice Returns the index of the call that failed within the SandboxRouter.Call[] array\\nerror SandboxCallFailed(uint256 callIndex);\\nerror InvalidTransferAddressArray();\\nerror AddressIsZero();\\nerror IdenticalTokenAddresses();\\nerror InvalidInputTokenForOrderPlacement();\\nerror SandboxFillAmountNotSatisfied(bytes32 orderId, uint256 amountFilled, uint256 fillAmountRequired);\\nerror OrderNotEligibleForRefresh(bytes32 orderId);\\nerror SandboxAmountOutRequiredNotSatisfied(bytes32 orderId, uint256 amountOut, uint256 amountOutRequired);\\nerror AmountOutRequiredIsZero(bytes32 orderId);\\nerror FillAmountSpecifiedGreaterThanAmountRemaining(\\n    uint256 fillAmountSpecified, uint256 amountInRemaining, bytes32 orderId\\n);\\nerror ConveyorFeesNotPaid(uint256 expectedFees, uint256 feesPaid, uint256 unpaidFeesRemaining);\\nerror InsufficientFillAmountSpecified(uint128 fillAmountSpecified, uint128 amountInRemaining);\\nerror InsufficientExecutionCredit(uint256 msgValue, uint256 minExecutionCredit);\\nerror WithdrawAmountExceedsExecutionCredit(uint256 amount, uint256 executionCredit);\\nerror MsgValueIsNotCumulativeExecutionCredit(uint256 msgValue, uint256 cumulativeExecutionCredit);\\nerror ExecutorNotCheckedIn();\\nerror InvalidToAddressBits();\\nerror V2SwapFailed();\\nerror V3SwapFailed();\\nerror CallFailed();\\nerror InvalidReferral();\\nerror InvalidReferralFee();\\nerror AffiliateDoesNotExist();\\nerror ReferrerDoesNotExist();\\nerror ReferrerAlreadyInitialized();\\n\"\r\n    },\r\n    \"lib/interfaces/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n     \\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/token/IERC20.sol\\\";\\nimport \\\"../../interfaces/token/draft-IERC20Permit.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/lib/ConveyorMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/libraries/Uniswap/FullMath.sol\\\";\\n\\nlibrary ConveyorMath {\\n    /// @notice maximum uint128 64.64 fixed point number\\n    uint128 private constant MAX_64x64 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 private constant MAX_UINT64 = 0xFFFFFFFFFFFFFFFF;\\n\\n    /// @notice minimum int128 64.64 fixed point number\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /// @notice maximum uint256 128.128 fixed point number\\n    uint256 private constant MAX_128x128 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice helper function to transform uint256 number to uint128 64.64 fixed point representation\\n    /// @param x unsigned 256 bit unsigned integer number\\n    /// @return unsigned 64.64 unsigned fixed point number\\n    function fromUInt256(uint256 x) internal pure returns (uint128) {\\n        unchecked {\\n            require(x <= MAX_UINT64);\\n            return uint128(x << 64);\\n        }\\n    }\\n\\n    /// @notice helper function to transform 64.64 fixed point uint128 to uint64 integer number\\n    /// @param x unsigned 64.64 fixed point number\\n    /// @return unsigned uint64 integer representation\\n    function toUInt64(uint128 x) internal pure returns (uint64) {\\n        unchecked {\\n            return uint64(x >> 64);\\n        }\\n    }\\n\\n    /// @notice helper function to transform uint128 to 128.128 fixed point representation\\n    /// @param x uint128 unsigned integer\\n    /// @return unsigned 128.128 unsigned fixed point number\\n    function fromUInt128(uint128 x) internal pure returns (uint256) {\\n        unchecked {\\n            require(x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            return uint256(x) << 128;\\n        }\\n    }\\n\\n    /// @notice helper to convert 128x128 fixed point number to 64.64 fixed point number\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @return unsigned 64.64 unsigned fixed point number\\n    function from128x128(uint256 x) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 answer = x >> 64;\\n            require(answer >= 0x0 && answer <= MAX_64x64);\\n            return uint128(answer);\\n        }\\n    }\\n\\n    /// @notice helper to convert 64.64 unsigned fixed point number to 128.128 fixed point number\\n    /// @param x 64.64 unsigned fixed point number\\n    /// @return unsigned 128.128 unsignned fixed point number\\n    function to128x128(uint128 x) internal pure returns (uint256) {\\n        unchecked {\\n            return uint256(x) << 64;\\n        }\\n    }\\n\\n    /// @notice helper to add two unsigned 64.64 fixed point numbers\\n    /// @param x 64.64 unsigned fixed point number\\n    /// @param y 64.64 unsigned fixed point number\\n    /// @return unsigned 64.64 unsigned fixed point number\\n    function add64x64(uint128 x, uint128 y) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 answer = uint256(x) + y;\\n            require(answer <= MAX_64x64);\\n            return uint128(answer);\\n        }\\n    }\\n\\n    /// @notice helper to add two signed 64.64 fixed point numbers\\n    /// @param x 64.64 signed fixed point number\\n    /// @param y 64.64 signed fixed point number\\n    /// @return signed 64.64 unsigned fixed point number\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= type(int128).max);\\n            return int128(result);\\n        }\\n    }\\n\\n    /// @notice helper to add two unsigened 128.128 fixed point numbers\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @param y 128.128 unsigned fixed point number\\n    /// @return unsigned 128.128 unsigned fixed point number\\n    function add128x128(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 answer = x + y;\\n\\n        return answer;\\n    }\\n\\n    /// @notice helper to add unsigned 128.128 fixed point number with unsigned 64.64 fixed point number\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @param y 64.64 unsigned fixed point number\\n    /// @return unsigned 128.128 unsigned fixed point number\\n    function add128x64(uint256 x, uint128 y) internal pure returns (uint256) {\\n        uint256 answer = x + (uint256(y) << 64);\\n\\n        return answer;\\n    }\\n\\n    /// @notice helper function to multiply two unsigned 64.64 fixed point numbers\\n    /// @param x 64.64 unsigned fixed point number\\n    /// @param y 64.64 unsigned fixed point number\\n    /// @return unsigned\\n    function mul64x64(uint128 x, uint128 y) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 answer = (uint256(x) * y) >> 64;\\n            require(answer <= MAX_64x64);\\n            return uint128(answer);\\n        }\\n    }\\n\\n    /// @notice helper function to multiply a 128.128 fixed point number by a 64.64 fixed point number\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @param y 64.64 unsigned fixed point number\\n    /// @return unsigned\\n    function mul128x64(uint256 x, uint128 y) internal pure returns (uint256) {\\n        if (x == 0 || y == 0) {\\n            return 0;\\n        }\\n        uint256 answer = (uint256(y) * x) >> 64;\\n\\n        return answer;\\n    }\\n\\n    /// @notice helper function to multiply unsigned 64.64 fixed point number by a unsigned integer\\n    /// @param x 64.64 unsigned fixed point number\\n    /// @param y uint256 unsigned integer\\n    /// @return unsigned\\n    function mul64U(uint128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0 || x == 0) {\\n                return 0;\\n            }\\n\\n            uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(x) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= MAX_128x128 - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /// @notice helper function to multiply unsigned 128.128 fixed point number by a unsigned integer\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @param y uint256 unsigned integer\\n    /// @return unsigned\\n    function mul128U(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0 || x == 0) {\\n            return 0;\\n        }\\n\\n        return (x * y) >> 128;\\n    }\\n\\n    ///@notice helper to get the absolute value of a signed integer.\\n    ///@param x a signed integer.\\n    ///@return signed 256 bit integer representing the absolute value of x.\\n    function abs(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice helper function to divide two unsigned 64.64 fixed point numbers\\n    /// @param x 64.64 unsigned fixed point number\\n    /// @param y 64.64 unsigned fixed point number\\n    /// @return unsigned uint128 64.64 unsigned integer\\n    function div64x64(uint128 x, uint128 y) internal pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 answer = (uint256(x) << 64) / y;\\n\\n            require(answer <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(answer);\\n        }\\n    }\\n\\n    /// @notice helper function to divide two unsigned 128.128 fixed point numbers\\n    /// @param x 128.128 unsigned fixed point number\\n    /// @param y 128.128 unsigned fixed point number\\n    /// @return unsigned uint128 128.128 unsigned integer\\n    function div128x128(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 xDec = x & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            uint256 xInt = x >> 128;\\n\\n            uint256 hi = xInt * (MAX_128x128 / y);\\n            uint256 lo = (xDec * (MAX_128x128 / y)) >> 128;\\n\\n            require(hi <= MAX_128x128 - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /// @notice helper function to divide two unsigned integers\\n    /// @param x uint256 unsigned integer number\\n    /// @param y uint256 unsigned integer number\\n    /// @return unsigned uint128 64.64 unsigned integer\\n    function divUU(uint256 x, uint256 y) internal pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 answer = divuu(x, y);\\n            require(answer <= uint128(MAX_64x64), \\\"overflow\\\");\\n\\n            return answer;\\n        }\\n    }\\n\\n    /// @param x uint256 unsigned integer\\n    /// @param y uint256 unsigned integer\\n    /// @return unsigned 64.64 fixed point number\\n    function divuu(uint256 x, uint256 y) internal pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 answer;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                answer = (x << 64) / y;\\n            } else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                answer = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(answer <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \\\"overflow in divuu\\\");\\n\\n                uint256 hi = answer * (y >> 128);\\n                uint256 lo = answer * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                answer += xl / y;\\n            }\\n\\n            require(answer <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \\\"overflow in divuu last\\\");\\n            return uint128(answer);\\n        }\\n    }\\n\\n    function fromX64ToX16(uint128 x) internal pure returns (uint32) {\\n        uint16 decimals = uint16(uint64(x & 0xFFFFFFFFFFFFFFFF) >> 48);\\n        uint16 integers = uint16(uint64(x >> 64) >> 48);\\n        uint32 result = (uint32(integers) << 16) + decimals;\\n        return result;\\n    }\\n\\n    /// @notice helper to calculate binary exponent of 64.64 unsigned fixed point number\\n    /// @param x unsigned 64.64 fixed point number\\n    /// @return unsigend 64.64 fixed point number\\n    function exp_2(uint128 x) private pure returns (uint128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            uint256 answer = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0) {\\n                answer = (answer * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                answer = (answer * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                answer = (answer * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                answer = (answer * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                answer = (answer * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                answer = (answer * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                answer = (answer * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                answer = (answer * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                answer = (answer * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                answer = (answer * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                answer = (answer * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                answer = (answer * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                answer = (answer * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                answer = (answer * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                answer = (answer * 0x1000162E525EE054754457D5995292026) >> 128;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                answer = (answer * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                answer = (answer * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                answer = (answer * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                answer = (answer * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                answer = (answer * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                answer = (answer * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                answer = (answer * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                answer = (answer * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                answer = (answer * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                answer = (answer * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                answer = (answer * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                answer = (answer * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                answer = (answer * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                answer = (answer * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                answer = (answer * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                answer = (answer * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                answer = (answer * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                answer = (answer * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                answer = (answer * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                answer = (answer * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                answer = (answer * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                answer = (answer * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                answer = (answer * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                answer = (answer * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                answer = (answer * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            }\\n            if (x & 0x800000 > 0) {\\n                answer = (answer * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            }\\n            if (x & 0x400000 > 0) {\\n                answer = (answer * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            }\\n            if (x & 0x200000 > 0) {\\n                answer = (answer * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            }\\n            if (x & 0x100000 > 0) {\\n                answer = (answer * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            }\\n            if (x & 0x80000 > 0) {\\n                answer = (answer * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            }\\n            if (x & 0x40000 > 0) {\\n                answer = (answer * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            }\\n            if (x & 0x20000 > 0) {\\n                answer = (answer * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            }\\n            if (x & 0x10000 > 0) {\\n                answer = (answer * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            }\\n            if (x & 0x8000 > 0) {\\n                answer = (answer * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            }\\n            if (x & 0x4000 > 0) {\\n                answer = (answer * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            }\\n            if (x & 0x2000 > 0) {\\n                answer = (answer * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            }\\n            if (x & 0x1000 > 0) {\\n                answer = (answer * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            }\\n            if (x & 0x800 > 0) {\\n                answer = (answer * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            }\\n            if (x & 0x400 > 0) {\\n                answer = (answer * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            }\\n            if (x & 0x200 > 0) {\\n                answer = (answer * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            }\\n            if (x & 0x100 > 0) {\\n                answer = (answer * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            }\\n            if (x & 0x80 > 0) {\\n                answer = (answer * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            }\\n            if (x & 0x40 > 0) {\\n                answer = (answer * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            }\\n            if (x & 0x20 > 0) {\\n                answer = (answer * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            }\\n            if (x & 0x10 > 0) {\\n                answer = (answer * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            }\\n            if (x & 0x8 > 0) {\\n                answer = (answer * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            }\\n            if (x & 0x4 > 0) {\\n                answer = (answer * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            }\\n            if (x & 0x2 > 0) {\\n                answer = (answer * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            }\\n            if (x & 0x1 > 0) {\\n                answer = (answer * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n            }\\n\\n            answer >>= uint256(63 - (x >> 64));\\n            require(answer <= uint256(MAX_64x64));\\n\\n            return uint128(uint256(answer));\\n        }\\n    }\\n\\n    /// @notice helper to compute the natural exponent of a 64.64 fixed point number\\n    /// @param x 64.64 fixed point number\\n    /// @return unsigned 64.64 fixed point number\\n    function exp(uint128 x) internal pure returns (uint128) {\\n        unchecked {\\n            require(x < 0x400000000000000000, \\\"Exponential overflow\\\"); // Overflow\\n\\n            return exp_2(uint128((uint256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n        }\\n    }\\n\\n    /// @notice helper to compute the square root of an unsigned uint256 integer\\n    /// @param x unsigned uint256 integer\\n    /// @return unsigned 64.64 unsigned fixed point number\\n    function sqrtu(uint256 x) internal pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) {\\n                return 0;\\n            } else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x8) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/ConveyorSwapCallbacks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport {AlgebraCallback} from \\\"./AlgebraCallback.sol\\\";\\nimport {UniswapV2Callback} from \\\"./UniswapV2Callback.sol\\\";\\nimport {UniswapV3Callback} from \\\"./UniswapV3Callback.sol\\\";\\nimport {ApeSwapCallback} from \\\"./ApeSwapCallback.sol\\\";\\nimport {MeerkatCallback} from \\\"./MeerkatCallback.sol\\\";\\nimport {KyberSwapV3Callback} from \\\"./KyberSwapV3Callback.sol\\\";\\nimport {WaultSwapCallback} from \\\"./WaultSwapCallback.sol\\\";\\nimport {JetSwapCallback} from \\\"./JetSwapCallback.sol\\\";\\nimport {ElkSwapCallback} from \\\"./ElkSwapCallback.sol\\\";\\nimport {DystopiaCallback} from \\\"./DystopiaCallback.sol\\\";\\nimport {UniFiCallback} from \\\"./UniFiCallback.sol\\\";\\nimport {VerseCallback} from \\\"./VerseCallback.sol\\\";\\n\\ncontract ConveyorSwapCallbacks is\\n    AlgebraCallback,\\n    ApeSwapCallback,\\n    UniswapV2Callback,\\n    UniswapV3Callback,\\n    MeerkatCallback,\\n    KyberSwapV3Callback,\\n    WaultSwapCallback,\\n    JetSwapCallback,\\n    ElkSwapCallback,\\n    DystopiaCallback,\\n    UniFiCallback\\n{}\\n\"\r\n    },\r\n    \"src/interfaces/IConveyorRouterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"../ConveyorRouterV1.sol\\\";\\n\\ninterface IConveyorRouterV1 {\\n    function swapExactTokenForToken(\\n        ConveyorRouterV1.TokenToTokenSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata genericMulticall\\n    ) external payable;\\n\\n    function swapExactEthForToken(\\n        ConveyorRouterV1.EthToTokenSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable;\\n\\n    function swapExactTokenForEth(\\n        ConveyorRouterV1.TokenToEthSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable;\\n\\n    function initializeAffiliate(address affiliateAddress) external;\\n    function initializeReferrer() external payable;\\n\\n    function upgradeMulticall(bytes memory bytecode, bytes32 salt) external payable returns (address);\\n\\n    function quoteSwapExactTokenForToken(\\n        ConveyorRouterV1.TokenToTokenSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed);\\n\\n    function quoteSwapExactTokenForEth(\\n        ConveyorRouterV1.TokenToEthSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed);\\n\\n    function quoteSwapExactEthForToken(\\n        ConveyorRouterV1.EthToTokenSwapData calldata swapData,\\n        ConveyorRouterV1.SwapAggregatorMulticall calldata swapAggregatorMulticall\\n    ) external payable returns (uint256 gasConsumed);\\n\\n    function withdraw() external;\\n\\n    function CONVEYOR_MULTICALL() external view returns (address);\\n    function affiliates(uint16) external view returns (address);\\n    function referrers(uint16) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/interfaces/token/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\"\r\n    },\r\n    \"lib/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"lib/libraries/Uniswap/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/callbacks/AlgebraCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\n\\ncontract AlgebraCallback {\\n    ///@notice Algebra callback function called during a swap on a algebra liqudity pool.\\n    ///@param amount0Delta - The change in token0 reserves from the swap.\\n    ///@param amount1Delta - The change in token1 reserves from the swap.\\n    ///@param data - The data packed into the swap.\\n    function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, address _sender) = abi.decode(data, (bool, address, address));\\n\\n        ///@notice Set amountIn to the amountInDelta depending on boolean zeroForOne.\\n        uint256 amountIn = _zeroForOne ? uint256(amount0Delta) : uint256(amount1Delta);\\n\\n        if (!(_sender == address(this))) {\\n            ///@notice Transfer the amountIn of tokenIn to the liquidity pool from the sender.\\n            IERC20(_tokenIn).transferFrom(_sender, msg.sender, amountIn);\\n        } else {\\n            IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/UniswapV2Callback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract UniswapV2Callback {\\n    /// @notice Uniswap v2 swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function uniswapV2Call(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/UniswapV3Callback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\n\\ncontract UniswapV3Callback {\\n    ///@notice Uniswap V3 callback function called during a swap on a v3 liqudity pool.\\n    ///@param amount0Delta - The change in token0 reserves from the swap.\\n    ///@param amount1Delta - The change in token1 reserves from the swap.\\n    ///@param data - The data packed into the swap.\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, address _sender) = abi.decode(data, (bool, address, address));\\n\\n        ///@notice Set amountIn to the amountInDelta depending on boolean zeroForOne.\\n        uint256 amountIn = _zeroForOne ? uint256(amount0Delta) : uint256(amount1Delta);\\n\\n        if (!(_sender == address(this))) {\\n            ///@notice Transfer the amountIn of tokenIn to the liquidity pool from the sender.\\n            IERC20(_tokenIn).transferFrom(_sender, msg.sender, amountIn);\\n        } else {\\n            IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/ApeSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract ApeSwapCallback {\\n    /// @notice Ape swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function apeCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/MeerkatCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract MeerkatCallback {\\n    /// @notice Meerkat swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function MeerkatCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/KyberSwapV3Callback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\n\\ncontract KyberSwapV3Callback {\\n    ///@notice KyberSwap callback function called during a swap on a v3 liqudity pool.\\n    ///@param amount0Delta - The change in token0 reserves from the swap.\\n    ///@param amount1Delta - The change in token1 reserves from the swap.\\n    ///@param data - The data packed into the swap.\\n    function swapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, address _sender) = abi.decode(data, (bool, address, address));\\n\\n        ///@notice Set amountIn to the amountInDelta depending on boolean zeroForOne.\\n        uint256 amountIn = _zeroForOne ? uint256(amount0Delta) : uint256(amount1Delta);\\n\\n        if (!(_sender == address(this))) {\\n            ///@notice Transfer the amountIn of tokenIn to the liquidity pool from the sender.\\n            IERC20(_tokenIn).transferFrom(_sender, msg.sender, amountIn);\\n        } else {\\n            IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/WaultSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract WaultSwapCallback {\\n    /// @notice Wault swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function waultSwapCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/JetSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract JetSwapCallback {\\n    /// @notice  JetSwap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function jetswapCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/ElkSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract ElkSwapCallback {\\n    /// @notice ElkSwap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function elkCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/DystopiaCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract DystopiaCallback {\\n    /// @notice Dystopia swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function hook(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/UniFiCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract UniFiCallback {\\n    /// @notice UniFi swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function unifiCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/callbacks/VerseCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../lib/interfaces/token/IERC20.sol\\\";\\nimport \\\"../../lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\\\";\\nimport \\\"../lib/OracleLibraryV2.sol\\\";\\n\\ncontract VerseCallback {\\n    /// @notice Verse swap callback\\n    /// @param amount0 - The change in token0 reserves from the swap.\\n    /// @param amount1 - The change in token1 reserves from the swap.\\n    /// @param data - The data packed into the swap.\\n    function swapsCall(address, uint256 amount0, uint256 amount1, bytes calldata data) external {\\n        ///@notice Decode all of the swap data.\\n        (bool _zeroForOne, address _tokenIn, uint24 _swapFee) = abi.decode(data, (bool, address, uint24));\\n\\n        uint256 amountOut = _zeroForOne ? amount1 : amount0;\\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(msg.sender).getReserves();\\n\\n        uint256 amountIn = OracleLibraryV2.getAmountIn(\\n            amountOut, _zeroForOne ? reserve0 : reserve1, _zeroForOne ? reserve1 : reserve0, _swapFee\\n        );\\n        IERC20(_tokenIn).transfer(msg.sender, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/interfaces/uniswap-v2/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: PLACEHOLDER\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"src/lib/OracleLibraryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nlibrary OracleLibraryV2 {\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut, uint24 swapFee)\\n        internal\\n        pure\\n        returns (uint256 amountIn)\\n    {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn * amountOut * 100000;\\n        uint256 denominator = (reserveOut - amountOut) * (100000 - swapFee);\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"create3-factory/=lib/create3-factory/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"interfaces/=lib/interfaces/\",\r\n      \"libraries/=lib/libraries/\",\r\n      \"solmate/=lib/create3-factory/lib/solmate/src/\",\r\n      \"utils/=lib/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AffiliateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmountOut\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferrerAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferrerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONVEYOR_MULTICALL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateNonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliateAddress\",\"type\":\"address\"}],\"name\":\"initializeAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeReferrer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"protocolFee\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.EthToTokenSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactEthForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountIn\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.TokenToEthSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactTokenForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountIn\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.TokenToTokenSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"quoteSwapExactTokenForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasConsumed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerNonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"protocolFee\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.EthToTokenSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactEthForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountIn\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.TokenToEthSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"swapAggregatorMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amountIn\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountOutMin\",\"type\":\"uint112\"},{\"internalType\":\"uint16\",\"name\":\"affiliate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referrer\",\"type\":\"uint16\"}],\"internalType\":\"struct ConveyorRouterV1.TokenToTokenSwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenInDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ConveyorRouterV1.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConveyorRouterV1.SwapAggregatorMulticall\",\"name\":\"genericMulticall\",\"type\":\"tuple\"}],\"name\":\"swapExactTokenForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"upgradeMulticall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConveyorRouterV1", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}