{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/PositionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\n\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"./BasePositionManager.sol\\\";\\n\\ncontract PositionRouter is BasePositionManager, IPositionRouter {\\n\\n    struct IncreasePositionRequest {\\n        address account;\\n        address[] path;\\n        address indexToken;\\n        uint256 amountIn;\\n        uint256 minOut;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 blockNumber;\\n        uint256 blockTime;\\n        bool hasCollateralInETH;\\n    }\\n\\n    struct DecreasePositionRequest {\\n        address account;\\n        address[] path;\\n        address indexToken;\\n        uint256 collateralDelta;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        address receiver;\\n        uint256 acceptablePrice;\\n        uint256 minOut;\\n        uint256 executionFee;\\n        uint256 blockNumber;\\n        uint256 blockTime;\\n        bool withdrawETH;\\n    }\\n\\n    uint256 public minExecutionFee;\\n\\n    uint256 public minBlockDelayKeeper;\\n    uint256 public minTimeDelayPublic;\\n    uint256 public maxTimeDelay;\\n\\n    bool public isLeverageEnabled = true;\\n\\n    bytes32[] public increasePositionRequestKeys;\\n    bytes32[] public decreasePositionRequestKeys;\\n\\n    uint256 public increasePositionRequestKeysStart;\\n    uint256 public decreasePositionRequestKeysStart;\\n\\n    mapping (address => bool) public isPositionKeeper;\\n\\n    mapping (address => uint256) public increasePositionsIndex;\\n    mapping (bytes32 => IncreasePositionRequest) public increasePositionRequests;\\n\\n    mapping (address => uint256) public decreasePositionsIndex;\\n    mapping (bytes32 => DecreasePositionRequest) public decreasePositionRequests;\\n\\n    event CreateIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 index,\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        uint256 gasPrice\\n    );\\n\\n    event ExecuteIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CancelIncreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 acceptablePrice,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CreateDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 index,\\n        uint256 blockNumber,\\n        uint256 blockTime\\n    );\\n\\n    event ExecuteDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event CancelDecreasePosition(\\n        address indexed account,\\n        address[] path,\\n        address indexToken,\\n        uint256 collateralDelta,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        address receiver,\\n        uint256 acceptablePrice,\\n        uint256 minOut,\\n        uint256 executionFee,\\n        uint256 blockGap,\\n        uint256 timeGap\\n    );\\n\\n    event SetPositionKeeper(address indexed account, bool isActive);\\n    event SetMinExecutionFee(uint256 minExecutionFee);\\n    event SetIsLeverageEnabled(bool isLeverageEnabled);\\n    event SetDelayValues(uint256 minBlockDelayKeeper, uint256 minTimeDelayPublic, uint256 maxTimeDelay);\\n    event SetRequestKeysStartValues(uint256 increasePositionRequestKeysStart, uint256 decreasePositionRequestKeysStart);\\n\\n    modifier onlyPositionKeeper() {\\n        require(isPositionKeeper[msg.sender], \\\"PositionRouter: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _weth,\\n        uint256 _depositFee,\\n        uint256 _minExecutionFee\\n    ) public BasePositionManager(_vault, _router, _weth, _depositFee) {\\n        minExecutionFee = _minExecutionFee;\\n    }\\n\\n    function setPositionKeeper(address _account, bool _isActive) external onlyAdmin {\\n        isPositionKeeper[_account] = _isActive;\\n        emit SetPositionKeeper(_account, _isActive);\\n    }\\n\\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyAdmin {\\n        minExecutionFee = _minExecutionFee;\\n        emit SetMinExecutionFee(_minExecutionFee);\\n    }\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external onlyAdmin {\\n        isLeverageEnabled = _isLeverageEnabled;\\n        emit SetIsLeverageEnabled(_isLeverageEnabled);\\n    }\\n\\n    function setDelayValues(uint256 _minBlockDelayKeeper, uint256 _minTimeDelayPublic, uint256 _maxTimeDelay) external onlyAdmin {\\n        minBlockDelayKeeper = _minBlockDelayKeeper;\\n        minTimeDelayPublic = _minTimeDelayPublic;\\n        maxTimeDelay = _maxTimeDelay;\\n        emit SetDelayValues(_minBlockDelayKeeper, _minTimeDelayPublic, _maxTimeDelay);\\n    }\\n\\n    function setRequestKeysStartValues(uint256 _increasePositionRequestKeysStart, uint256 _decreasePositionRequestKeysStart) external onlyAdmin {\\n        increasePositionRequestKeysStart = _increasePositionRequestKeysStart;\\n        decreasePositionRequestKeysStart = _decreasePositionRequestKeysStart;\\n\\n        emit SetRequestKeysStartValues(_increasePositionRequestKeysStart, _decreasePositionRequestKeysStart);\\n    }\\n\\n    function executeIncreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\\n        uint256 index = increasePositionRequestKeysStart;\\n        uint256 length = increasePositionRequestKeys.length;\\n\\n        if (index >= length) { return; }\\n\\n        if (_endIndex > length) {\\n            _endIndex = length;\\n        }\\n\\n        while (index < _endIndex) {\\n            bytes32 key = increasePositionRequestKeys[index];\\n\\n            // if the request was executed then delete the key from the array\\n            // if the request was not executed then break from the loop, this can happen if the\\n            // minimum number of blocks has not yet passed\\n            // an error could be thrown if the request is too old or if the slippage is\\n            // higher than what the user specified, or if there is insufficient liquidity for the position\\n            // in case an error was thrown, cancel the request\\n            try this.executeIncreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\\n                if (!_wasExecuted) { break; }\\n            } catch {\\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\\n                try this.cancelIncreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\\n                    if (!_wasCancelled) { break; }\\n                } catch {}\\n            }\\n\\n            delete increasePositionRequestKeys[index];\\n            index++;\\n        }\\n\\n        increasePositionRequestKeysStart = index;\\n    }\\n\\n    function executeDecreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\\n        uint256 index = decreasePositionRequestKeysStart;\\n        uint256 length = decreasePositionRequestKeys.length;\\n\\n        if (index >= length) { return; }\\n\\n        if (_endIndex > length) {\\n            _endIndex = length;\\n        }\\n\\n        while (index < _endIndex) {\\n            bytes32 key = decreasePositionRequestKeys[index];\\n\\n            // if the request was executed then delete the key from the array\\n            // if the request was not executed then break from the loop, this can happen if the\\n            // minimum number of blocks has not yet passed\\n            // an error could be thrown if the request is too old\\n            // in case an error was thrown, cancel the request\\n            try this.executeDecreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\\n                if (!_wasExecuted) { break; }\\n            } catch {\\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\\n                try this.cancelDecreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\\n                    if (!_wasCancelled) { break; }\\n                } catch {}\\n            }\\n\\n            delete decreasePositionRequestKeys[index];\\n            index++;\\n        }\\n\\n        decreasePositionRequestKeysStart = index;\\n    }\\n\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value == _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n\\n        _transferInETH();\\n        _setTraderReferralCode(_referralCode);\\n\\n        if (_amountIn > 0) {\\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\\n        }\\n\\n        _createIncreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            false\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value >= _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n        require(_path[0] == weth, \\\"PositionRouter: invalid _path\\\");\\n\\n        _transferInETH();\\n        _setTraderReferralCode(_referralCode);\\n\\n        uint256 amountIn = msg.value.sub(_executionFee);\\n\\n        _createIncreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            true\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH\\n    ) external payable nonReentrant {\\n        require(_executionFee >= minExecutionFee, \\\"PositionRouter: invalid executionFee\\\");\\n        require(msg.value == _executionFee, \\\"PositionRouter: invalid msg.value\\\");\\n        require(_path.length == 1 || _path.length == 2, \\\"PositionRouter: invalid _path length\\\");\\n\\n        if (_withdrawETH) {\\n            require(_path[_path.length - 1] == weth, \\\"PositionRouter: invalid _path\\\");\\n        }\\n\\n        _transferInETH();\\n\\n        _createDecreasePosition(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH\\n        );\\n    }\\n\\n    function getRequestQueueLengths() external view returns (uint256, uint256, uint256, uint256) {\\n        return (\\n            increasePositionRequestKeysStart,\\n            increasePositionRequestKeys.length,\\n            decreasePositionRequestKeysStart,\\n            decreasePositionRequestKeys.length\\n        );\\n    }\\n\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldExecute) { return false; }\\n\\n        delete increasePositionRequests[_key];\\n\\n       if (request.amountIn > 0) {\\n           uint256 amountIn = request.amountIn;\\n\\n           if (request.path.length > 1) {\\n               IERC20(request.path[0]).safeTransfer(vault, request.amountIn);\\n               amountIn = _swap(request.path, request.minOut, address(this));\\n           }\\n\\n           uint256 afterFeeAmount = _collectFees(msg.sender, request.path, amountIn, request.indexToken, request.isLong, request.sizeDelta);\\n           IERC20(request.path[request.path.length - 1]).safeTransfer(vault, afterFeeAmount);\\n       }\\n\\n       _increasePosition(request.account, request.path[request.path.length - 1], request.indexToken, request.sizeDelta, request.isLong, request.acceptablePrice);\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit ExecuteIncreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.amountIn,\\n            request.minOut,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.acceptablePrice,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldCancel) { return false; }\\n\\n        delete increasePositionRequests[_key];\\n\\n        if (request.hasCollateralInETH) {\\n            _transferOutETHWithGasLimit(request.amountIn, payable(request.account));\\n        } else {\\n            IERC20(request.path[0]).safeTransfer(request.account, request.amountIn);\\n        }\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit CancelIncreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.amountIn,\\n            request.minOut,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.acceptablePrice,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldExecute) { return false; }\\n\\n        delete decreasePositionRequests[_key];\\n\\n        uint256 amountOut = _decreasePosition(request.account, request.path[0], request.indexToken, request.collateralDelta, request.sizeDelta, request.isLong, address(this), request.acceptablePrice);\\n\\n        if (request.path.length > 1) {\\n            IERC20(request.path[0]).safeTransfer(vault, amountOut);\\n            amountOut = _swap(request.path, request.minOut, address(this));\\n        }\\n\\n        if (request.withdrawETH) {\\n           _transferOutETHWithGasLimit(amountOut, payable(request.receiver));\\n        } else {\\n           IERC20(request.path[request.path.length - 1]).safeTransfer(request.receiver, amountOut);\\n        }\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit ExecuteDecreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.collateralDelta,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.receiver,\\n            request.acceptablePrice,\\n            request.minOut,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\\n        if (request.account == address(0)) { return true; }\\n\\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\\n        if (!shouldCancel) { return false; }\\n\\n        delete decreasePositionRequests[_key];\\n\\n       _transferOutETH(request.executionFee, _executionFeeReceiver);\\n\\n        emit CancelDecreasePosition(\\n            request.account,\\n            request.path,\\n            request.indexToken,\\n            request.collateralDelta,\\n            request.sizeDelta,\\n            request.isLong,\\n            request.receiver,\\n            request.acceptablePrice,\\n            request.minOut,\\n            request.executionFee,\\n            block.number.sub(request.blockNumber),\\n            block.timestamp.sub(request.blockTime)\\n        );\\n\\n        return true;\\n    }\\n\\n    function getRequestKey(address _account, uint256 _index) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _index));\\n    }\\n\\n    function getIncreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\\n        return request.path;\\n    }\\n\\n    function getDecreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\\n        return request.path;\\n    }\\n\\n    function _setTraderReferralCode(bytes32 _referralCode) internal {\\n        if (_referralCode != bytes32(0) && referralStorage != address(0)) {\\n            IReferralStorage(referralStorage).setTraderReferralCode(msg.sender, _referralCode);\\n        }\\n    }\\n\\n    function _validateExecution(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\\n        if (_positionBlockTime.add(maxTimeDelay) <= block.timestamp) {\\n            revert(\\\"PositionRouter: request has expired\\\");\\n        }\\n\\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\\n\\n        if (!isLeverageEnabled && !isKeeperCall) {\\n            revert(\\\"PositionRouter: forbidden\\\");\\n        }\\n\\n        if (isKeeperCall) {\\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\\n        }\\n\\n        require(msg.sender == _account, \\\"PositionRouter: forbidden\\\");\\n\\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \\\"PositionRouter: min delay not yet passed\\\");\\n\\n        return true;\\n    }\\n\\n    function _validateCancellation(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\\n\\n        if (!isLeverageEnabled && !isKeeperCall) {\\n            revert(\\\"PositionRouter: forbidden\\\");\\n        }\\n\\n        if (isKeeperCall) {\\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\\n        }\\n\\n        require(msg.sender == _account, \\\"PositionRouter: forbidden\\\");\\n\\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \\\"PositionRouter: min delay not yet passed\\\");\\n\\n        return true;\\n    }\\n\\n    function _createIncreasePosition(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bool _hasCollateralInETH\\n    ) internal {\\n        uint256 index = increasePositionsIndex[_account].add(1);\\n        increasePositionsIndex[_account] = index;\\n\\n        IncreasePositionRequest memory request = IncreasePositionRequest(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            block.number,\\n            block.timestamp,\\n            _hasCollateralInETH\\n        );\\n\\n        bytes32 key = getRequestKey(_account, index);\\n        increasePositionRequests[key] = request;\\n\\n        increasePositionRequestKeys.push(key);\\n\\n        emit CreateIncreasePosition(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            index,\\n            block.number,\\n            block.timestamp,\\n            tx.gasprice\\n        );\\n    }\\n\\n    function _createDecreasePosition(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH\\n    ) internal {\\n        uint256 index = decreasePositionsIndex[_account].add(1);\\n        decreasePositionsIndex[_account] = index;\\n\\n        DecreasePositionRequest memory request = DecreasePositionRequest(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            block.number,\\n            block.timestamp,\\n            _withdrawETH\\n        );\\n\\n        bytes32 key = getRequestKey(_account, index);\\n        decreasePositionRequests[key] = request;\\n\\n        decreasePositionRequestKeys.push(key);\\n\\n        emit CreateDecreasePosition(\\n            _account,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _receiver,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            index,\\n            block.number,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPositionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPositionRouter {\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/ITimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITimelock {\\n    function setAdmin(address _admin) external;\\n    function enableLeverage(address _vault) external;\\n    function disableLeverage(address _vault) external;\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\\n    function signalSetGov(address _target, address _gov) external;\\n    function managedSetHandler(address _target, address _handler, bool _isActive) external;\\n    function managedSetMinter(address _target, address _minter, bool _isActive) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/BasePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IBasePositionManager.sol\\\";\\n\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\n\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\n\\ncontract BasePositionManager is IBasePositionManager, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    address public admin;\\n\\n    address public vault;\\n    address public router;\\n    address public weth;\\n\\n    // to prevent using the deposit and withdrawal of collateral as a zero fee swap,\\n    // there is a small depositFee charged if a collateral deposit results in the decrease\\n    // of leverage for an existing position\\n    // increasePositionBufferBps allows for a small amount of decrease of leverage\\n    uint256 public depositFee;\\n    uint256 public increasePositionBufferBps = 100;\\n\\n    address public referralStorage;\\n\\n    mapping (address => uint256) public feeReserves;\\n\\n    mapping (address => uint256) public override maxGlobalLongSizes;\\n    mapping (address => uint256) public override maxGlobalShortSizes;\\n\\n    event SetDepositFee(uint256 depositFee);\\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\\n    event SetReferralStorage(address referralStorage);\\n    event SetAdmin(address admin);\\n    event WithdrawFees(address token, address receiver, uint256 amount);\\n\\n    event SetMaxGlobalSizes(\\n        address[] tokens,\\n        uint256[] longSizes,\\n        uint256[] shortSizes\\n    );\\n\\n    event IncreasePositionReferral(\\n        address account,\\n        uint256 sizeDelta,\\n        uint256 marginFeeBasisPoints,\\n        bytes32 referralCode,\\n        address referrer\\n    );\\n\\n    event DecreasePositionReferral(\\n        address account,\\n        uint256 sizeDelta,\\n        uint256 marginFeeBasisPoints,\\n        bytes32 referralCode,\\n        address referrer\\n    );\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"BasePositionManager: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _router,\\n        address _weth,\\n        uint256 _depositFee\\n    ) public {\\n        vault = _vault;\\n        router = _router;\\n        weth = _weth;\\n        depositFee = _depositFee;\\n\\n        admin = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"BasePositionManager: invalid sender\\\");\\n    }\\n\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n        emit SetAdmin(_admin);\\n    }\\n\\n    function setDepositFee(uint256 _depositFee) external onlyAdmin {\\n        depositFee = _depositFee;\\n        emit SetDepositFee(_depositFee);\\n    }\\n\\n    function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\\n        increasePositionBufferBps = _increasePositionBufferBps;\\n        emit SetIncreasePositionBufferBps(_increasePositionBufferBps);\\n    }\\n\\n    function setReferralStorage(address _referralStorage) external onlyAdmin {\\n        referralStorage = _referralStorage;\\n        emit SetReferralStorage(_referralStorage);\\n    }\\n\\n    function setMaxGlobalSizes(\\n        address[] memory _tokens,\\n        uint256[] memory _longSizes,\\n        uint256[] memory _shortSizes\\n    ) external onlyAdmin {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxGlobalLongSizes[token] = _longSizes[i];\\n            maxGlobalShortSizes[token] = _shortSizes[i];\\n        }\\n\\n        emit SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external onlyAdmin {\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) { return; }\\n\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n\\n        emit WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function approve(address _token, address _spender, uint256 _amount) external onlyGov {\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\\n        _receiver.sendValue(_amount);\\n    }\\n\\n    function _increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) internal {\\n        address _vault = vault;\\n\\n        if (_isLong) {\\n            require(IVault(_vault).getMaxPrice(_indexToken) <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n        } else {\\n            require(IVault(_vault).getMinPrice(_indexToken) >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n        }\\n\\n        if (_isLong) {\\n            uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\\n            if (maxGlobalLongSize > 0 && IVault(_vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize) {\\n                revert(\\\"BasePositionManager: max global longs exceeded\\\");\\n            }\\n        } else {\\n            uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\\n            if (maxGlobalShortSize > 0 && IVault(_vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize) {\\n                revert(\\\"BasePositionManager: max global shorts exceeded\\\");\\n            }\\n        }\\n\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        IRouter(router).pluginIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitIncreasePositionReferral(_account, _sizeDelta);\\n    }\\n\\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) internal returns (uint256) {\\n        address _vault = vault;\\n\\n        if (_isLong) {\\n            require(IVault(_vault).getMinPrice(_indexToken) >= _price, \\\"BasePositionManager: mark price lower than limit\\\");\\n        } else {\\n            require(IVault(_vault).getMaxPrice(_indexToken) <= _price, \\\"BasePositionManager: mark price higher than limit\\\");\\n        }\\n\\n        address timelock = IVault(_vault).gov();\\n\\n        ITimelock(timelock).enableLeverage(_vault);\\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\\n        ITimelock(timelock).disableLeverage(_vault);\\n\\n        _emitDecreasePositionReferral(_account, _sizeDelta);\\n\\n        return amountOut;\\n    }\\n\\n    function _emitIncreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n        emit IncreasePositionReferral(\\n            _account,\\n            _sizeDelta,\\n            IVault(vault).marginFeeBasisPoints(),\\n            referralCode,\\n            referrer\\n        );\\n    }\\n\\n    function _emitDecreasePositionReferral(address _account, uint256 _sizeDelta) internal {\\n        address _referralStorage = referralStorage;\\n        if (_referralStorage == address(0)) {\\n            return;\\n        }\\n\\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\\n\\n        if (referralCode == bytes32(0)) {\\n            return;\\n        }\\n\\n        emit DecreasePositionReferral(\\n            _account,\\n            _sizeDelta,\\n            IVault(vault).marginFeeBasisPoints(),\\n            referralCode,\\n            referrer\\n        );\\n    }\\n\\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        revert(\\\"BasePositionManager: invalid _path.length\\\");\\n    }\\n\\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\\n        uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n        require(amountOut >= _minOut, \\\"BasePositionManager: insufficient amountOut\\\");\\n        return amountOut;\\n    }\\n\\n    function _transferInETH() internal {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value: msg.value}();\\n        }\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n\\n    function _transferOutETHWithGasLimit(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.transfer(_amountOut);\\n    }\\n\\n    function _collectFees(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) internal returns (uint256) {\\n        bool shouldDeductFee = _shouldDeductFee(\\n            _account,\\n            _path,\\n            _amountIn,\\n            _indexToken,\\n            _isLong,\\n            _sizeDelta\\n        );\\n\\n        if (shouldDeductFee) {\\n            uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(BASIS_POINTS_DIVISOR);\\n            uint256 feeAmount = _amountIn.sub(afterFeeAmount);\\n            address feeToken = _path[_path.length - 1];\\n            feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\\n            return afterFeeAmount;\\n        }\\n\\n        return _amountIn;\\n    }\\n\\n    function _shouldDeductFee(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) internal view returns (bool) {\\n        // if the position is a short, do not charge a fee\\n        if (!_isLong) { return false; }\\n\\n        // if the position size is not increasing, this is a collateral deposit\\n        if (_sizeDelta == 0) { return true; }\\n\\n        address collateralToken = _path[_path.length - 1];\\n\\n        IVault _vault = IVault(vault);\\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, collateralToken, _indexToken, _isLong);\\n\\n        // if there is no existing position, do not charge a fee\\n        if (size == 0) { return false; }\\n\\n        uint256 nextSize = size.add(_sizeDelta);\\n        uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\\n        uint256 nextCollateral = collateral.add(collateralDelta);\\n\\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\\n        uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\\n\\n        // deduct a fee if the leverage is decreased\\n        return nextLeverage < prevLeverage;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function executeSwapOrder(address, uint256, address payable) external;\\n    function executeDecreaseOrder(address, uint256, address payable) external;\\n    function executeIncreaseOrder(address, uint256, address payable) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IBasePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBasePositionManager {\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/referrals/interfaces/IReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"CancelDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"CancelIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"CreateDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"CreateIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"DecreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"ExecuteDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"ExecuteIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"IncreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBlockDelayKeeper\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTimeDelayPublic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"SetDelayValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"SetDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"SetIncreasePositionBufferBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"SetIsLeverageEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"longSizes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"SetMaxGlobalSizes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"SetMinExecutionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetPositionKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralStorage\",\"type\":\"address\"}],\"name\":\"SetReferralStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePositionRequestKeysStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasePositionRequestKeysStart\",\"type\":\"uint256\"}],\"name\":\"SetRequestKeysStartValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"cancelDecreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"cancelIncreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"}],\"name\":\"createDecreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"}],\"name\":\"createIncreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"}],\"name\":\"createIncreasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreasePositionRequestKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreasePositionRequestKeysStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decreasePositionRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawETH\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreasePositionsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreasePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreasePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getDecreasePositionRequestPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getIncreasePositionRequestPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestQueueLengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionBufferBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increasePositionRequestKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionRequestKeysStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"increasePositionRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCollateralInETH\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increasePositionsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPositionKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalLongSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockDelayKeeper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeDelayPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockDelayKeeper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeDelayPublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"setDelayValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"setIncreasePositionBufferBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_longSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"setMaxGlobalSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPositionKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"}],\"name\":\"setReferralStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionRequestKeysStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreasePositionRequestKeysStart\",\"type\":\"uint256\"}],\"name\":\"setRequestKeysStartValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PositionRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000e990519f19dcc6c1589a544c331c4ec046593e7a000000000000000000000000a2508cc3185f4a9bb6fb5c5b8515e4ce05bec7850000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000110d9316ec000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}