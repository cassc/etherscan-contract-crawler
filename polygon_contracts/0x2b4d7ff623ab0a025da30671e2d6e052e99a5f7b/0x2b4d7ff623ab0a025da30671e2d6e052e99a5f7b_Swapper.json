{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Swapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.21;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ncontract Swapper {\\n    bool public paused;\\n\\n    address public constant TST = 0x25717b2fa0BEc614A44Ac132B85BA0EaeeaDaE01;\\n    address public constant CREPE = 0x5516d551Af482B4eef4B909138d5e48e05a7f50a;\\n    address public constant CRE = 0xe81432473290F4ffCFc5E823F8069Db83e8A677B;\\n\\n    // TST \ub610\ub294 CREPE \ud1a0\ud070 \uc2a4\uc651\uc744 \uc2dc\uc791\ud560 \uc2dc\uac04, 2023\ub144 10\uc6d4 1\uc77c \uc624\uc804 9\uc2dc(GMT+9)\\n    uint256 public constant START = 1696118400;\\n    // Governance \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\\n    address public gov;\\n    // TST \ucf54\uc778\uc744 \ubc1b\uc744 \uc9c0\uac11 \uc8fc\uc18c\\n    address public immutable receiver;\\n    // \uc2a4\uc651\ub41c TST / CREPE \ud1a0\ud070 \uc218\ub7c9\\n    mapping(address => uint256) public _swapped;\\n\\n    event Swap(\\n        address indexed account,\\n        address indexed token,\\n        uint256 indexed amount\\n    );\\n\\n    /// @param _receiver \uc2a4\uc651\uc5d0 \uc0ac\uc6a9\ub41c TST \ud1a0\ud070\uc744 \uc218\ub839\ud560 \uc9c0\uac11 \uc8fc\uc18c\\n    constructor(address _gov, address _receiver) {\\n        gov = _gov;\\n        receiver = _receiver;\\n    }\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"Swapper: paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Swapper: only gov\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n\\n    function pause() external onlyGov {\\n        paused = !paused;\\n    }\\n\\n    function deposit(uint256 amount) external onlyGov {\\n        IERC20(CRE).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyGov {\\n        require(\\n            IERC20(CRE).balanceOf(address(this)) >= amount,\\n            \\\"Swapper: not enough balance\\\"\\n        );\\n\\n        IERC20(CRE).transfer(msg.sender, amount);\\n    }\\n\\n    /// @notice TST \ub610\ub294 CREPE \ud1a0\ud070\uc744 CRE \ud1a0\ud070\uc744 1:1\ub85c \uad50\ud658\ud558\ub294 \ud568\uc218\\n    /// @param token swap \ud560 \ud1a0\ud070 \uc8fc\uc18c, TST \ub610\ub294 CREPE\ub9cc \uac00\ub2a5\\n    /// @param amount swap \ud560 \ud1a0\ud070 \uc218\ub7c9\\n    function swap(address token, uint256 amount) external notPaused {\\n        require(START <= block.timestamp, \\\"Swapper: not started yet\\\");\\n        require(token == CREPE || token == TST, \\\"Swapper: unsupported token\\\");\\n\\n        unchecked {\\n            _swapped[token] += amount;\\n        }\\n\\n        // CREPE \ud1a0\ud070\uc740 \uc18c\uac01\ud558\uace0, TST \ud1a0\ud070\uc740 \uc9c0\uc815\ub41c \uc9c0\uac11\uc73c\ub85c \uc804\uc1a1\\n        if (token == CREPE) {\\n            IERC20(token).transferFrom(\\n                msg.sender,\\n                0x000000000000000000000000000000000000dEaD,\\n                amount\\n            );\\n            IERC20(CRE).transfer(msg.sender, amount);\\n        } else {\\n            IERC20(token).transferFrom(msg.sender, receiver, amount);\\n            // TST \ucf54\uc778\uc740 decimals\uac00 6\uc774\ubbc0\ub85c 1e12\ub97c \uacf1\ud574\uc11c \uc804\uc1a1\\n            IERC20(CRE).transfer(msg.sender, amount * 1e12);\\n        }\\n\\n        emit Swap(msg.sender, token, amount);\\n    }\\n\\n    /// @notice \uc2a4\uc651\ub41c TST / CREPE \ud1a0\ud070 \uc218\ub7c9 \uc870\ud68c\\n    function stats() external view returns (uint256, uint256) {\\n        return (_swapped[TST], _swapped[CREPE]);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREPE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Swapper", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001337ef3cf8aebbac95b8e3b496cfcbb489cd72cc000000000000000000000000731bcca18b3527aa212c06de9e2fb6bd6db370de", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}