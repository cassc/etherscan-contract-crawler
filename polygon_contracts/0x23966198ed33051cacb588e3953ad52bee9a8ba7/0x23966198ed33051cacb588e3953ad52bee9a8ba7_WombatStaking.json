{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WombatStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\nimport \\\"../openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\npragma solidity 0.8.5;\\n\\n/**\\n * @dev Smart contract that allows staking a token. Staking means a user transfers an amount of a\\n *  token to the smart contract. The smart contract keeps track of the stakes. Tokens can be\\n *  unstaked and reclaimed after a cooldown period.\\n *\\n *  While the token is staked the user might get some benefit in applications. That benefit gets\\n *  lost as soon as the tokens are unstaked.\\n */\\ncontract WombatStaking is Ownable {\\n\\n    /**\\n     * @dev The maximum amount of seconds that can be set for the unstake time. This is 30 days\\n     *  (30 * 24 * 3600 seconds).\\n     */\\n    uint private constant MAX_UNSTAKE_TIME_SECONDS = 2592000;\\n\\n    /**\\n     * @dev A struct to describe how much and when someone unstaked tokens\\n     */\\n    struct Unstake {\\n        /**\\n         * @dev The amount of tokens unstaked\\n         */\\n        uint256 amount;\\n\\n        /**\\n         * @dev The timestamp at which the last unstake can be claimed. This is not updated when the unstakeTime is\\n         *  updated.\\n         */\\n        uint256 claimableAt;\\n    }\\n\\n    /**\\n     * @dev Event that is emitted when someone stakes tokens\\n     */\\n    event TokensStaked(address indexed from, uint256 value, uint256 totalStaked);\\n\\n    /**\\n     * @dev Event that is emitted when someone unstakes tokens\\n     */\\n    event TokensUnstaked(address indexed from, uint256 value, uint256 totalStaked);\\n\\n    /**\\n     * @dev Event that is emitted when someone claims unstaked tokens\\n     */\\n    event TokensClaimed(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Event that is emitted when the unstake time is updated\\n     */\\n    event UnstakeTimeSet(uint newValue);\\n\\n    /**\\n     * @dev Flag determining if staking is paused. When this is true, no one can stake anymore.\\n     */\\n    bool public stakingPaused;\\n\\n    /**\\n     * @dev The token that can be staked.\\n     */\\n    IERC20 public immutable token;\\n\\n    /**\\n     * @dev The time in seconds a user has to wait to reclaim their tokens after unstaking. Can be\\n     *  updated.\\n     */\\n    uint public unstakeTimeSeconds;\\n\\n    /**\\n     * @dev The total amount of tokens currently staked.\\n     */\\n    uint256 public totalStakedAmount;\\n\\n    /**\\n     * @dev Mapping of who staked how much\\n     */\\n    mapping(address => uint256) private _stakes;\\n\\n    /**\\n     * @dev Mapping of who unstaked how much and when\\n     */\\n    mapping(address => Unstake) private _unstakes;\\n\\n    /**\\n     * @param _token The address of the token that can be staked\\n     * @param _unstakeTimeSeconds The amount of seconds that has to be waited to claim tokens after\\n     *  unstaking\\n     * @param _newOwner An address that will be set as the owner of the smart contract.\\n     */\\n    constructor(address _token, uint _unstakeTimeSeconds, address _newOwner) Ownable() {\\n        require(_token != address(0), \\\"Token address must not be 0\\\");\\n        token = IERC20(_token);\\n        unstakeTimeSeconds = _unstakeTimeSeconds;\\n        stakingPaused = false;\\n        require(_newOwner != address(0), \\\"New owner must not be 0\\\");\\n        _transferOwnership(_newOwner);\\n        totalStakedAmount = 0;\\n    }\\n\\n    /**\\n     * @dev Owner function to update the unstake cooldown period. This will not change the unstake cooldown period for\\n     *  existing unstakes.\\n     * @param _seconds The new value to set\\n     */\\n    function setUnstakeTime(uint _seconds) external onlyOwner() {\\n        require(_seconds <= MAX_UNSTAKE_TIME_SECONDS, \\\"Must be less than 30 days\\\");\\n        unstakeTimeSeconds = _seconds;\\n        emit UnstakeTimeSet(_seconds);\\n    }\\n\\n    /**\\n     * @dev Owner function to pause staking. After this is called, no one can stake anymore unless\\n     *  resumeStaking is called.\\n     */\\n    function pauseStaking() external onlyOwner() {\\n        stakingPaused = true;\\n    }\\n\\n    /**\\n     * @dev Owner function to resume staking after pauseStaking has been called.\\n     */\\n    function resumeStaking() external onlyOwner() {\\n        stakingPaused = false;\\n    }\\n\\n    /**\\n     * @dev Stake an amount of tokens to the smart contract. Before this is called, the \\\"approve\\\"\\n     *  function of the token has to be called with at least the amount that should be staked.\\n     *  (Usually a user would be asked to approve a very high amount to this smart contract so it\\n     *  only has to be done once).\\n     *\\n     *  Staked tokens are locked in this smart contract. A release process can be initiated with\\n     *  unstake and then claim.\\n     */\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Must stake more than 0\\\");\\n        require(stakingPaused == false, \\\"Staking is paused\\\");\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"Token transfer failed\\\");\\n        _stakes[msg.sender] += amount;\\n        totalStakedAmount += amount;\\n        emit TokensStaked(msg.sender, amount, _stakes[msg.sender]);\\n    }\\n\\n    /**\\n     * @dev Unstake an amount of tokens. This \\\"moves\\\" them internally so they don't appear as staked\\n     *  anymore. The unstaked tokens can be claimed after unstakeTimeSeconds has passed. Afterwards\\n     *  they can be claimed via the claim function.\\n     *\\n     *  Unstaking multiple times resets the claimableAt timestamp.\\n     */\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Must unstake more than 0\\\");\\n        uint256 currentStake = _stakes[msg.sender];\\n        require(currentStake >= amount, \\\"Not enough staked\\\");\\n        _stakes[msg.sender] -= amount;\\n        totalStakedAmount -= amount;\\n\\n        // \\\"Transfer\\\" the tokens from staked to the unstake.\\n        Unstake storage _unstake = _unstakes[msg.sender];\\n        _unstake.amount += amount;\\n        // Also reset the claimable timestamp to the block time + the unstake time\\n        _unstake.claimableAt = block.timestamp + unstakeTimeSeconds;\\n\\n        emit TokensUnstaked(msg.sender, amount, _stakes[msg.sender]);\\n    }\\n\\n    /**\\n     * @dev Claim unstaked tokens. This transfers the tokens back to their original owner. Can only\\n     *  be called when the user has unstaked tokens and unstakeTimeSeconds has passed since they\\n     *  last unstaked.\\n     */\\n    function claim() external {\\n        Unstake storage _unstake = _unstakes[msg.sender];\\n        uint256 amount = _unstake.amount;\\n        require(amount > 0, \\\"No tokens claimable found\\\");\\n        require(\\n            block.timestamp >= _unstake.claimableAt,\\n            \\\"Claim too early\\\"\\n        );\\n        delete _unstakes[msg.sender];\\n\\n        require(token.transfer(msg.sender, amount), \\\"Token transfer failed\\\");\\n        emit TokensClaimed(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Get the amount of tokens staked by a user.\\n     * @param _address The address to get the stake for.\\n     */\\n    function getStake(address _address) external view returns (uint256) {\\n        return _stakes[_address];\\n    }\\n\\n    /**\\n     * @dev Get the unstake for a user\\n     * @param _address The address to get the unstake for.\\n     */\\n    function getUnstake(address _address) external view returns (Unstake memory) {\\n        return _unstakes[_address];\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UnstakeTimeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUnstake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAt\",\"type\":\"uint256\"}],\"internalType\":\"struct WombatStaking.Unstake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setUnstakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WombatStaking", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000c9c7712c83b3c70e7c5e11100d33d9401bdf9dd0000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000032060928490447f6934094223d350e646de148d1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}