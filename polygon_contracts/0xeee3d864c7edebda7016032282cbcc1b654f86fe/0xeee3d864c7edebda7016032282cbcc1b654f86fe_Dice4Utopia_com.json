{"SourceCode": "// SPDX-License-Identifier: The Kohelet Of Dao2Utopia In Blockchains\r\n\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@[\\]/[[]]]]/@@@\\]]]][[\\]/[@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@/\\/[]oooo@@@@@@@@@@@@@@@@@oooo][\\/\\@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@\\/\\/oo@@@@@@@@@@@@@@@@@@@@@@@@@@@@@oo\\/\\/@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@[/\\oo@@@@@@@@@@ooooo@@@@@@@ooooo@@@@@@@@@@oo/\\[@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@\\\\/o@@@@@@@@oo/\\]/[[`/oo@@@oo\\,[[\\]/\\oo@@@@@@@@o\\//@@@@@@@@@@@\r\n// @@@@@@@@@//\\oo@@@@@@oo/]/\\/@@@@@^@oo@@@oo@=@@@@@\\/\\]\\oo@@@@@@oo/\\\\@@@@@@@@\r\n// @@@@@@@@\\\\o@@@@@@oo//\\/@@@@@@@@@^@oo@@@oo@=@@@@@@@@@\\/\\\\oo@@@@@@o//@@@@@@@\r\n// @@@@@@\\//o@@@@@oo\\[/@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@\\[/oo@@@@@o\\\\/@@@@@\r\n// @@@@@\\\\o@@@@@oo\\\\@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@//oo@@@@@o//@@@@\r\n// @@@///o@@@@@o\\\\@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@//o@@@@@o\\\\\\@@\r\n// @@///o@@@@o///@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@\\\\\\o@@@@o\\\\\\@\r\n// @///o@@@@o///@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@\\\\\\o@@@@o\\\\\\\r\n// @==o@@@@o^//@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@\\\\=o@@@@o^^\r\n// \\^o@@@@o///@@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@@\\\\\\o@@@@o=\r\n// //o@@@@o==@@@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@@@^^o@@@@o\\\r\n// ^o@@@@o^^@@@@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@@@@==o@@@@o\r\n// =o@@@@o==@@@@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@@@@^^o@@@@o\r\n// =o@@@oo==@@@@@@@@@@@@@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@@@@@@@@@@@@@^^oo@@@o\r\n// @@@@@o\\@/@@@@@@@@@@@@@@@@@@@@@@/]\\@@@@@@@/]\\@@@@@@@@@@@@@@@@@@@@@@\\@/o@@@@\r\n// @@@@@o/@\\@@@@@@@@@@@@@@@@@@@@//\\o@@@@@@@@@o/\\\\@@@@@@@@@@@@@@@@@@@@/@\\o@@@@\r\n// =o@@@oo==@@@@@@@@@@@@@@@@@@//\\o@@@@@@@@@@@@@o/\\\\@@@@@@@@@@@@@@@@@@^^oo@@@o\r\n// =o@@@@o==@@@@@@@@@@@@@@@@//]o@@@@@@@@@@@@@@@@@o]\\\\@@@@@@@@@@@@@@@@^^o@@@@o\r\n// ^o@@@@o^^@@@@@@@@@@@@@@///o@@@@@@oo@@@@@oo@@@@@@o\\\\\\@@@@@@@@@@@@@@==o@@@@o\r\n// \\\\o@@@@o==@@@@@@@@@@@///o@@@@@@o///o@@@o\\\\\\o@@@@@@o\\\\\\@@@@@@@@@@@^^o@@@@o/\r\n// /^o@@@@o\\\\\\@@@@@@@@\\//o@@@@@@o//`@oo@@@oo@,\\\\o@@@@@@o\\\\/@@@@@@@@///o@@@@o=\r\n// @==o@@@@o^\\\\@@@@@\\//o@@@@@@o///@^@oo@@@oo@=@\\\\\\o@@@@@@o\\\\/@@@@@//=o@@@@o^^\r\n// @\\\\\\o@@@@o\\\\\\@@\\//o@@@@@@o///@@@^@oo@@@oo@=@@@\\\\\\o@@@@@@o\\\\/@@///o@@@@o///\r\n// @@\\\\\\o@@@@o\\\\\\\\oo@@@@@@o///@@@@@^@oo@@@oo@=@@@@@\\\\\\o@@@@@@oo////o@@@@o///@\r\n// @@@\\\\\\o@@@@@ooo@@@@@@o\\//@@@@@@@^@oo@@@oo@=@@@@@@@\\\\/o@@@@@@ooo@@@@@o///@@\r\n// @@@@@//o@@@@@@@@@@@o\\//@@@@@@@@@^@oo@@@oo@=@@@@@@@@@\\\\/o@@@@@@@@@@@o\\\\@@@@\r\n// @@@@@@/\\\\o@@@@@@@o\\[/@@@@@@@@@@@^@oo@@@oo@=@@@@@@@@@@@\\[/o@@@@@@@o//\\@@@@@\r\n// @@@@@@@@//o@@@@@@@o\\\\/\\@@@@@@@@@^@oo@@@oo@=@@@@@@@@@/\\//o@@@@@@@o\\\\@@@@@@@\r\n// @@@@@@@@@\\\\/oo@@@@@@oo\\[\\/\\@@@@@^@oo@@@oo@=@@@@@/\\/[/oo@@@@@@oo\\//@@@@@@@@\r\n// @@@@@@@@@@@@//\\o@@@@@@@@oo\\/[\\]]`\\oo@@@oo/,]]/[\\/oo@@@@@@@@o/\\\\@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@]\\/oo@@@@@@@@@@ooooo@@@@@@@ooooo@@@@@@@@@@oo\\/]@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@/\\/\\oo@@@@@@@@@@@@@@@@@@@@@@@@@@@@@oo/\\/\\@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@\\/\\][oooo@@@@@@@@@@@@@@@@@oooo[]/\\/@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\n\r\n// Please tell the world: All men are created equal\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IIDO {\r\n    function getEndTimestamp() external view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IAssassinCreed {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function burnFrom(address from, uint256 rawAmount) external;\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/utils/Address.sol\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/math/SafeMath.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/token/ERC20/IERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/token/ERC20/SafeERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/utils/ReentrancyGuard.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/GSN/Context.sol\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.1.0/contracts/access/Ownable.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/// @title Prevents delegatecall to a contract\r\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\r\nabstract contract NoDelegateCall {\r\n    /// @dev The original address of this contract\r\n    address private immutable original;\r\n\r\n    constructor() public {\r\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\r\n        // In other words, this variable won't change when it's checked at runtime.\r\n        original = address(this);\r\n    }\r\n\r\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\r\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\r\n    function checkNotDelegateCall() private view {\r\n        require(address(this) == original);\r\n    }\r\n\r\n    /// @notice Prevents delegatecall into the modified method\r\n    modifier noDelegateCall() {\r\n        checkNotDelegateCall();\r\n        _;\r\n    }\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/blob/0964ca290565587963cc4ad8f770274f5e0d9e9d/evm-contracts/src/v0.6/VRFRequestIDBase.sol\r\npragma solidity ^0.6.0;\r\n\r\ncontract VRFRequestIDBase {\r\n    /**\r\n     * @notice returns the seed which is actually input to the VRF coordinator\r\n     *\r\n     * @dev To prevent repetition of VRF output due to repetition of the\r\n     * @dev user-supplied seed, that seed is combined in a hash with the\r\n     * @dev user-specific nonce, and the address of the consuming contract. The\r\n     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n     * @dev the final seed, but the nonce does protect against repetition in\r\n     * @dev requests which are included in a single block.\r\n     *\r\n     * @param _userSeed VRF seed input provided by user\r\n     * @param _requester Address of the requesting contract\r\n     * @param _nonce User-specific nonce at the time of the request\r\n     */\r\n    function makeVRFInputSeed(\r\n        bytes32 _keyHash,\r\n        uint256 _userSeed,\r\n        address _requester,\r\n        uint256 _nonce\r\n    ) internal pure returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the id for this request\r\n     * @param _keyHash The serviceAgreement ID to be used for this request\r\n     * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n     * @return The id for this request\r\n     *\r\n     * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n     * @dev contract, but the one generated by makeVRFInputSeed\r\n     */\r\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n    }\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/blob/0964ca290565587963cc4ad8f770274f5e0d9e9d/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol\r\npragma solidity ^0.6.0;\r\n\r\ninterface LinkTokenInterface {\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n    function decreaseApproval(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool success);\r\n\r\n    function increaseApproval(address spender, uint256 subtractedValue)\r\n        external;\r\n\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool success);\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/blob/0964ca290565587963cc4ad8f770274f5e0d9e9d/evm-contracts/src/v0.6/vendor/SafeMathChainlink.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: https://github.com/smartcontractkit/chainlink/blob/0964ca290565587963cc4ad8f770274f5e0d9e9d/evm-contracts/src/v0.6/VRFConsumerBase.sol\r\npragma solidity ^0.6.0;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n    using SafeMathChainlink for uint256;\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomness the VRF output\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        virtual;\r\n\r\n    /**\r\n     * @notice requestRandomness initiates a request for VRF output given _seed\r\n     *\r\n     * @dev The fulfillRandomness method receives the output, once it's provided\r\n     * @dev by the Oracle, and verified by the vrfCoordinator.\r\n     *\r\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n     * @dev the _fee must exceed the fee specified during registration of the\r\n     * @dev _keyHash.\r\n     *\r\n     * @dev The _seed parameter is vestigial, and is kept only for API\r\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n     * @dev your own randomness, here, but it's not necessary because the VRF\r\n     * @dev oracle will mix the hash of the block containing your request into the\r\n     * @dev VRF seed it ultimately uses.\r\n     *\r\n     * @param _keyHash ID of public key against which randomness is generated\r\n     * @param _fee The amount of LINK to send with the request\r\n     * @param _seed seed mixed into the input of the VRF.\r\n     *\r\n     * @return requestId unique ID for this request\r\n     *\r\n     * @dev The returned requestId can be used to distinguish responses to\r\n     * @dev concurrent requests. It is passed as the first argument to\r\n     * @dev fulfillRandomness.\r\n     */\r\n    function requestRandomness(\r\n        bytes32 _keyHash,\r\n        uint256 _fee,\r\n        uint256 _seed\r\n    ) internal returns (bytes32 requestId) {\r\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n        // the hash of the block containing this request to obtain the seed/input\r\n        // which is finally passed to the VRF cryptographic machinery.\r\n        uint256 vRFSeed = makeVRFInputSeed(\r\n            _keyHash,\r\n            _seed,\r\n            address(this),\r\n            nonces[_keyHash]\r\n        );\r\n        // nonces[_keyHash] must stay in sync with\r\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n        // This provides protection against the user repeating their input seed,\r\n        // which would result in a predictable/duplicate output, if multiple such\r\n        // requests appeared in the same block.\r\n        nonces[_keyHash] = nonces[_keyHash].add(1);\r\n        return makeRequestId(_keyHash, vRFSeed);\r\n    }\r\n\r\n    LinkTokenInterface internal immutable LINK;\r\n    address private immutable vrfCoordinator;\r\n\r\n    // Nonces for each VRF key from which randomness has been requested.\r\n    //\r\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n        private nonces;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     * @param _link address of LINK token contract\r\n     *\r\n     * @dev https://docs.chain.link/docs/link-token-contracts\r\n     */\r\n    constructor(address _vrfCoordinator, address _link) public {\r\n        vrfCoordinator = _vrfCoordinator;\r\n        LINK = LinkTokenInterface(_link);\r\n    }\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        external\r\n    {\r\n        require(\r\n            msg.sender == vrfCoordinator,\r\n            \"Only VRFCoordinator can fulfill\"\r\n        );\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n}\r\n\r\n// File: contracts/Dice4Utopia_com.sol\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Dice4Utopia_com is the dealer of random number games at Dice4Utopia_com.org: Coin Flip, Dice Roll, Dice4Utopia_com, Roulette.\r\n/*\r\nv2 has the same logic as v1, with the following updates:\r\n- Transaction Mining: Contract is linked to TransactionMiner contract to award ROLL tokens to gamblers who lost bets.\r\n- Referral system: Contract is linked to TransactionMiner contract to record a gambler's referrer and distribute referral fees.\r\n- Automated risk management: Dynamically computes maxProfit based on contract balance and balance-to-maxProfit ratio.\r\n- Reward Computation: Calculates txn mining reward based on rewardPct, ROLL/MATIC price, bet amount, and probability of loss.\r\n- House edge and wealth tax are in basis points instead of percentage for fine adjustments.\r\n- betPlaced event log is more detailed to allow users to see their pending bets while waiting for settlement.\r\n- betSettled event log is less detailed to save gas fee paid by Chainlink VRF and speed up confirmation time by Polygon nodes.\r\n*/\r\ncontract Dice4Utopia_com is\r\n    VRFConsumerBase,\r\n    NoDelegateCall,\r\n    Ownable,\r\n    ReentrancyGuard\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Chainlink VRF related parameters\r\n    address public constant LINK_TOKEN =\r\n        0xb0897686c545045aFc77CF20eC7A532E3120E0F1; \r\n\r\n    address public constant VRF_COORDINATOR =\r\n        0x3d2341ADb2D31f1c5530cDC622016af293177AE0; \r\n    bytes32 public keyHash =\r\n        0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\r\n    uint256 public chainlinkFee = 100000000000000; // 0.0001 LINK\r\n\r\n    address public IDO_Address;\r\n    address public AssassinCreed_Address;\r\n\r\n    // Each bet is deducted 100 basis points (1%) in favor of the house\r\n    uint256 public houseEdgeBP = 100;\r\n\r\n    // Modulo is the number of equiprobable outcomes in a game:\r\n    //  2 for coin flip\r\n    //  6 for dice roll\r\n    //  36 for double dice roll\r\n    //  37 for roulette\r\n    //  100 for Dice4Utopia_com\r\n    uint256 constant MAX_MODULO = 100;\r\n\r\n    // Modulos below MAX_MASK_MODULO are checked against a bit mask, allowing betting on specific outcomes.\r\n    // For example in a dice roll (modolo = 6),\r\n    // 000001 mask means betting on 1. 000001 converted from binary to decimal becomes 1.\r\n    // 101000 mask means betting on 4 and 6. 101000 converted from binary to decimal becomes 40.\r\n    // The specific value is dictated by the fact that 256-bit intermediate\r\n    // multiplication result allows implementing population count efficiently\r\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of eight below 42.\r\n    uint256 constant MAX_MASK_MODULO = 40;\r\n\r\n    // This is a check on bet mask overflow. Maximum mask is equivalent to number of possible binary outcomes for maximum modulo.\r\n    uint256 constant MAX_BET_MASK = 2**MAX_MASK_MODULO;\r\n\r\n    // These are constants that make O(1) population count in placeBet possible.\r\n    uint256 constant POPCNT_MULT =\r\n        0x0000000000002000000000100000000008000000000400000000020000000001;\r\n    uint256 constant POPCNT_MASK =\r\n        0x0001041041041041041041041041041041041041041041041041041041041041;\r\n    uint256 constant POPCNT_MODULO = 0x3F;\r\n\r\n    // In addition to house edge, wealth tax is added for bet amount that exceeds a multiple of wealthTaxThreshold.\r\n    // For example, if wealthTaxThreshold = 200 ether and wealthTaxBP = 100,\r\n    // A bet amount of 200 ether will have a wealth tax of 1% in addition to house edge.\r\n    // A bet amount of 400 ether will have a wealth tax of 2% in addition to house edge.\r\n    uint256 public wealthTaxThreshold = 200 ether; // main network setted 500000000000000000000\r\n    uint256 public wealthTaxBP = 100;\r\n\r\n    // Minimum and maximum bet amounts.\r\n    uint256 public minBetAmount = 2 ether;\r\n    uint256 public maxBetAmount = 800 ether;\r\n\r\n    // Balance-to-maxProfit ratio. Used to dynamically adjusts maxProfit based on balance.\r\n    uint256 public balanceMaxProfitRatio = 12;\r\n\r\n    // Funds that are locked in potentially winning bets. Prevents contract from committing to new bets that it cannot pay out.\r\n    uint256 public lockedInBets;\r\n\r\n    uint256 public sharesDiceAll;\r\n\r\n    uint256 public Wall = 10e18;\r\n\r\n    uint256 public SatanDevil = 180;\r\n\r\n    // Info of each bet.\r\n    struct Bet {\r\n        // Wager amount in wei.\r\n        uint256 amount;\r\n        // Modulo of a game.\r\n        uint8 modulo;\r\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\r\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\r\n        uint8 rollUnder;\r\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\r\n        uint40 mask;\r\n        // Block number of placeBet tx.\r\n        uint256 placeBlockNumber;\r\n        // Address of a gambler, used to pay out winning bets.\r\n        address payable gambler;\r\n        // Status of bet settlement.\r\n        bool isSettled;\r\n        // Outcome of bet.\r\n        uint256 outcome;\r\n        // Win amount.\r\n        uint256 winAmount;\r\n    }\r\n\r\n    // Array of bets\r\n    Bet[] public bets;\r\n\r\n    // Mapping requestId returned by Chainlink VRF to bet Id.\r\n    mapping(bytes32 => uint256) public betMap;\r\n    mapping(address => uint256) public sharesDice;\r\n\r\n    function getBets() external view returns (Bet[] memory) {\r\n        return bets;\r\n    }\r\n\r\n    // Signed integer used for tracking house profit since inception.\r\n    uint256 public incomeProfit;\r\n    uint256 public outcomeProfit;\r\n\r\n    // 15% Of All Matic\r\n    uint256 public Exodus;\r\n\r\n    // Events\r\n    event BetPlaced(\r\n        uint256 indexed betId,\r\n        address indexed gambler,\r\n        uint256 amount,\r\n        uint8 indexed modulo,\r\n        uint8 rollUnder,\r\n        uint40 mask\r\n    );\r\n\r\n    event BetSettled(\r\n        uint256 indexed betId,\r\n        address indexed gambler,\r\n        uint256 amount,\r\n        uint8 indexed modulo,\r\n        uint8 rollUnder,\r\n        uint40 mask,\r\n        uint256 outcome,\r\n        uint256 winAmount\r\n    );\r\n    event BetRefunded(\r\n        uint256 indexed betId,\r\n        address indexed gambler,\r\n        uint256 amount\r\n    );\r\n    event Deposit(address user, uint256 investment);\r\n    event WithdrawalIncomeEvent(\r\n        address user,\r\n        uint256 burnACreed,\r\n        uint256 outMatic\r\n    );\r\n\r\n    // Constructor. Using Chainlink VRFConsumerBase constructor.\r\n    constructor(address AssassinCreed_Address_, address IDO_Address_)\r\n        public\r\n        VRFConsumerBase(VRF_COORDINATOR, LINK_TOKEN)\r\n    {\r\n        AssassinCreed_Address = AssassinCreed_Address_;\r\n        IDO_Address = IDO_Address_;\r\n    }\r\n\r\n    function balanceAddress(address _address_) external view returns (uint256) {\r\n        return address(_address_).balance;\r\n    }\r\n\r\n    // Returns link token balance.\r\n    function balanceLinkToken() external view returns (uint256) {\r\n        return LINK.balanceOf(address(this));\r\n    }\r\n\r\n    // Returns number of bets.\r\n    function betsLength() external view returns (uint256) {\r\n        return bets.length;\r\n    }\r\n\r\n    // Returns maximum profit allowed per bet. Prevents contract from accepting any bets with potential profit exceeding maxProfit.\r\n    function maxProfit() public view returns (uint256) {\r\n        return diceFreeMatic() / balanceMaxProfitRatio;\r\n    }\r\n\r\n    function setWall(uint256 wall) external onlyOwner {\r\n        Wall = wall;\r\n    }\r\n\r\n    // Set balance-to-maxProfit ratio.\r\n    function setBalanceMaxProfitRatio(uint256 _balanceMaxProfitRatio)\r\n        external\r\n        onlyOwner\r\n    {\r\n        balanceMaxProfitRatio = _balanceMaxProfitRatio;\r\n    }\r\n\r\n    // Update Chainlink fee.\r\n    function setChainlinkFee(uint256 _chainlinkFee) external onlyOwner {\r\n        chainlinkFee = _chainlinkFee;\r\n    }\r\n\r\n    // Update Chainlink keyHash. Currently using keyHash with 10 block waiting time config. May configure to 64 block waiting time for more security.\r\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n    // Set minimum bet amount. minBetAmount should be large enough such that its house edge fee can cover the Chainlink oracle fee.\r\n    function setMinBetAmount(uint256 _minBetAmount) external onlyOwner {\r\n        minBetAmount = _minBetAmount;\r\n    }\r\n\r\n    // Set maximum bet amount. Setting this to zero effectively disables betting.\r\n    function setMaxBetAmount(uint256 _maxBetAmount) external onlyOwner {\r\n        maxBetAmount = _maxBetAmount;\r\n    }\r\n\r\n    // Set house edge.\r\n    function setHouseEdgeBP(uint256 _houseEdgeBP) external onlyOwner {\r\n        houseEdgeBP = _houseEdgeBP;\r\n    }\r\n\r\n    // Set wealth tax. Setting this to zero effectively disables wealth tax.\r\n    function setWealthTaxBP(uint256 _wealthTaxBP) external onlyOwner {\r\n        wealthTaxBP = _wealthTaxBP;\r\n    }\r\n\r\n    // Set threshold to trigger wealth tax.\r\n    function setWealthTaxThreshold(uint256 _wealthTaxThreshold)\r\n        external\r\n        onlyOwner\r\n    {\r\n        wealthTaxThreshold = _wealthTaxThreshold;\r\n    }\r\n\r\n    // Place bet\r\n    function placeBet(uint256 betMask, uint256 modulo)\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        // Validate input data.\r\n        uint256 amount = msg.value;\r\n        require(\r\n            LINK.balanceOf(address(this)) >= chainlinkFee,\r\n            \"Insufficient LINK token\"\r\n        );\r\n        require(modulo > 1 && modulo <= MAX_MODULO, \"Modulo not within range\");\r\n        require(\r\n            amount >= minBetAmount && amount <= maxBetAmount,\r\n            \"Bet amount not within range\"\r\n        );\r\n        require(betMask > 0 && betMask < MAX_BET_MASK, \"Mask not within range\");\r\n\r\n        uint256 rollUnder;\r\n        uint256 mask;\r\n\r\n        if (modulo <= MAX_MASK_MODULO) {\r\n            // Small modulo games can specify exact bet outcomes via bit mask.\r\n            // rollUnder is a number of 1 bits in this mask (population count).\r\n            // This magic looking formula is an efficient way to compute population\r\n            // count on EVM for numbers below 2**40.\r\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\r\n            mask = betMask;\r\n        } else {\r\n            // Larger modulos games specify the right edge of half-open interval of winning bet outcomes.\r\n            require(\r\n                betMask > 0 && betMask <= modulo,\r\n                \"betMask larger than modulo\"\r\n            );\r\n            rollUnder = betMask;\r\n        }\r\n\r\n        // Winning amount.\r\n        uint256 possibleWinAmount = getWinAmount(amount, modulo, rollUnder);\r\n\r\n        // Enforce max profit limit. Bet will not be placed if condition is not met.\r\n        require(\r\n            possibleWinAmount <= amount + maxProfit(),\r\n            \"maxProfit violation\"\r\n        );\r\n\r\n        // Check whether contract has enough funds to accept this bet.\r\n        require(\r\n            lockedInBets + possibleWinAmount <= address(this).balance,\r\n            \"Insufficient funds\"\r\n        );\r\n\r\n        // Update lock funds.\r\n        lockedInBets += possibleWinAmount;\r\n\r\n        // Request random number from Chainlink VRF. Store requestId for validation checks later.\r\n        bytes32 requestId = requestRandomness(\r\n            keyHash,\r\n            chainlinkFee,\r\n            bets.length\r\n        );\r\n\r\n        // Map requestId to bet ID.\r\n        betMap[requestId] = bets.length;\r\n\r\n        // Record bet in event logs. Placed before pushing bet to array in order to get the correct bets.length.\r\n        emit BetPlaced(\r\n            bets.length,\r\n            msg.sender,\r\n            amount,\r\n            uint8(modulo),\r\n            uint8(rollUnder),\r\n            uint40(mask)\r\n        );\r\n\r\n        // Store bet in bet list.\r\n        bets.push(\r\n            Bet({\r\n                amount: amount,\r\n                modulo: uint8(modulo),\r\n                rollUnder: uint8(rollUnder),\r\n                mask: uint40(mask),\r\n                placeBlockNumber: block.number,\r\n                gambler: msg.sender,\r\n                isSettled: false,\r\n                outcome: 0,\r\n                winAmount: 0\r\n            })\r\n        );\r\n    }\r\n\r\n    // Returns the expected win amount.\r\n    function getWinAmount(\r\n        uint256 amount,\r\n        uint256 modulo,\r\n        uint256 rollUnder\r\n    ) private view returns (uint256 winAmount) {\r\n        require(\r\n            0 < rollUnder && rollUnder <= modulo,\r\n            \"Win probability out of range\"\r\n        );\r\n        uint256 houseEdgeFee = (amount *\r\n            (houseEdgeBP + getEffectiveWealthTaxBP(amount))) / 10000;\r\n        winAmount = ((amount - houseEdgeFee) * modulo) / rollUnder;\r\n    }\r\n\r\n    // Get effective wealth tax for a given bet size.\r\n    function getEffectiveWealthTaxBP(uint256 amount)\r\n        private\r\n        view\r\n        returns (uint256 effectiveWealthTaxBP)\r\n    {\r\n        effectiveWealthTaxBP = (amount / wealthTaxThreshold) * wealthTaxBP;\r\n    }\r\n\r\n    // Callback function called by Chainlink VRF coordinator.\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n        internal\r\n        override\r\n    {\r\n        settleBet(requestId, randomness);\r\n    }\r\n\r\n    // Settle bet. Function can only be called by fulfillRandomness function, which in turn can only be called by Chainlink VRF.\r\n    function settleBet(bytes32 requestId, uint256 randomNumber)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        uint256 betId = betMap[requestId];\r\n        Bet storage bet = bets[betId];\r\n        uint256 amount = bet.amount;\r\n\r\n        // Validation checks.\r\n        require(amount > 0, \"Bet does not exist\");\r\n        require(bet.isSettled == false, \"Bet is settled already\");\r\n\r\n        // Fetch bet parameters into local variables (to save gas).\r\n        uint256 modulo = bet.modulo;\r\n        uint256 rollUnder = bet.rollUnder;\r\n        address payable gambler = bet.gambler;\r\n\r\n        // Do a roll by taking a modulo of random number.\r\n        uint256 outcome = randomNumber % modulo;\r\n\r\n        // Win amount if gambler wins this bet\r\n        uint256 possibleWinAmount = getWinAmount(amount, modulo, rollUnder);\r\n\r\n        // Actual win amount by gambler.\r\n        uint256 winAmount = 0;\r\n\r\n        // Determine dice outcome.\r\n        if (modulo <= MAX_MASK_MODULO) {\r\n            // For small modulo games, check the outcome against a bit mask.\r\n            if ((2**outcome) & bet.mask != 0) {\r\n                winAmount = possibleWinAmount;\r\n            }\r\n        } else {\r\n            // For larger modulos, check inclusion into half-open interval.\r\n            if (outcome < rollUnder) {\r\n                winAmount = possibleWinAmount;\r\n            }\r\n        }\r\n\r\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\r\n        lockedInBets -= possibleWinAmount;\r\n\r\n        bet.isSettled = true;\r\n        bet.winAmount = winAmount;\r\n        bet.outcome = outcome;\r\n\r\n        // Send prize to winner\r\n        if (winAmount > 0) {\r\n            uint256 _outcomeProfit_ = winAmount.sub(amount);\r\n            outcomeProfit += _outcomeProfit_;\r\n\r\n            uint256 _Exodus_ = _outcomeProfit_.mul(15).div(100);\r\n            Exodus >= _Exodus_ ? Exodus -= _Exodus_ : Exodus = 0;\r\n\r\n            gambler.transfer(winAmount);\r\n        } else {\r\n            incomeProfit += amount;\r\n            Exodus += amount.mul(15).div(100);\r\n        }\r\n\r\n        // Record bet settlement in event log.\r\n        emit BetSettled(\r\n            betId,\r\n            gambler,\r\n            amount,\r\n            uint8(modulo),\r\n            uint8(rollUnder),\r\n            bet.mask,\r\n            outcome,\r\n            winAmount\r\n        );\r\n    }\r\n\r\n    // Owner can withdraw 85% funds not exceeding balance minus potential win amounts by open bets.\r\n    function withdrawFunds(address payable beneficiary, uint256 withdrawAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        // max 85 %\r\n        require(\r\n            withdrawAmount <= diceFreeMatic() - Exodus,\r\n            \"Withdrawal exceeds limit - Fair For Dao2Utopia.com \u262e !\"\r\n        );\r\n        beneficiary.transfer(withdrawAmount);\r\n    }\r\n\r\n    // Owner can withdraw non-MATIC tokens.\r\n    function withdrawToken(address tokenAddress) external onlyOwner {\r\n        IERC20(tokenAddress).safeTransfer(\r\n            owner(),\r\n            IERC20(tokenAddress).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    // Return the bet in the very unlikely scenario it was not settled by Chainlink VRF.\r\n    // In case you find yourself in a situation like this, just contact Dice4Utopia_com support.\r\n    // However, nothing precludes you from calling this method yourself.\r\n    function refundBet(uint256 betId) external nonReentrant {\r\n        Bet storage bet = bets[betId];\r\n        uint256 amount = bet.amount;\r\n\r\n        // Validation checks\r\n        require(amount > 0, \"Bet does not exist\");\r\n        require(bet.isSettled == false, \"Bet is settled already\");\r\n        require(\r\n            block.number > bet.placeBlockNumber + 21600,\r\n            \"Wait before requesting refund\"\r\n        );\r\n\r\n        uint256 possibleWinAmount = getWinAmount(\r\n            amount,\r\n            bet.modulo,\r\n            bet.rollUnder\r\n        );\r\n\r\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\r\n        lockedInBets -= possibleWinAmount;\r\n\r\n        // Update bet records\r\n        bet.isSettled = true;\r\n        bet.winAmount = amount;\r\n\r\n        // Send the refund.\r\n        bet.gambler.transfer(amount);\r\n\r\n        // Record refund in event logs\r\n        emit BetRefunded(betId, bet.gambler, amount);\r\n    }\r\n\r\n    function deposit(address user) external payable {\r\n        uint256 msgValue = msg.value;\r\n        require(\r\n            msgValue > 0 && msg.sender == IDO_Address,\r\n            \"deposit::Invalid investment\"\r\n        );\r\n\r\n        sharesDice[user] += msgValue;\r\n        sharesDiceAll += msgValue;\r\n\r\n        Exodus += msgValue.mul(15).div(100);\r\n        emit Deposit(user, msgValue);\r\n    }\r\n\r\n    // Work in the dark, but serve the light ! \u262e\r\n    // Assassin have to approve Assassin's Creed to this address before\r\n    function WithdrawalIncome(uint256 amount_burn_share)\r\n        external\r\n        nonReentrant\r\n        noDelegateCall\r\n    {\r\n        require(\r\n            msg.sender == tx.origin,\r\n            \"WithdrawalIncome::please be EOA account\"\r\n        );\r\n\r\n        address payable user = msg.sender;\r\n        uint256 share = sharesDice[user];\r\n        require(\r\n            share > 0 && sharesDiceAll > 0,\r\n            \"WithdrawalIncome::Sorry, you have not participated in the Initial Digital Assets Offering\"\r\n        );\r\n        require(\r\n            share >= amount_burn_share,\r\n            \"WithdrawalIncome::Shares to be destroyed exceeds your shares\"\r\n        );\r\n\r\n        uint256 userACreed = IAssassinCreed(AssassinCreed_Address).balanceOf(\r\n            user\r\n        );\r\n        require(\r\n            userACreed >= getSatanDevil(amount_burn_share),\r\n            \"WithdrawalIncome::Token Assassin's Creed to be destroyed exceeds your Assassin's Creed\"\r\n        );\r\n\r\n        // clear user shares\r\n        sharesDice[user] = share.sub(amount_burn_share);\r\n\r\n        IAssassinCreed(AssassinCreed_Address).burnFrom(\r\n            msg.sender,\r\n            getSatanDevil(amount_burn_share)\r\n        );\r\n\r\n        if (\r\n            block.timestamp > IIDO(IDO_Address).getEndTimestamp().add(182 days)\r\n        ) {\r\n            // 15% of All Matic\r\n            require(\r\n                Exodus > 0,\r\n                \"WithdrawalIncome::HouseBalance 15% less than 0 matic\"\r\n            );\r\n            uint256 For___Assassin = Exodus.mul(amount_burn_share).div(\r\n                sharesDiceAll\r\n            );\r\n            require(\r\n                For___Assassin <= Exodus,\r\n                \"WithdrawalIncome::Exodus Insufficient balance\"\r\n            );\r\n            // clear Exodus\r\n            Exodus -= For___Assassin;\r\n            user.transfer(For___Assassin);\r\n            emit WithdrawalIncomeEvent(user, amount_burn_share, For___Assassin);\r\n        } else {\r\n            // 10% of Profit Matic\r\n            require(\r\n                incomeProfit > outcomeProfit,\r\n                \"WithdrawalIncome::HouseProfit 10% less than 0 matic\"\r\n            );\r\n            uint256 Profit = incomeProfit.sub(outcomeProfit);\r\n\r\n            uint256 power = Profit.mul(10).div(100);\r\n            uint256 For___Assassin = power.mul(amount_burn_share).div(\r\n                sharesDiceAll\r\n            );\r\n            require(\r\n                For___Assassin <= power && For___Assassin <= incomeProfit,\r\n                \"WithdrawalIncome::IncomeProfit Insufficient balance\"\r\n            );\r\n            // clear incomeProfit\r\n            incomeProfit -= For___Assassin;\r\n            user.transfer(For___Assassin);\r\n            emit WithdrawalIncomeEvent(user, amount_burn_share, For___Assassin);\r\n        }\r\n\r\n        // clear sharesDiceAll\r\n        sharesDiceAll.sub(amount_burn_share);\r\n        require(\r\n            sharesDiceAll > 15000 ether,\r\n            \"WithdrawalIncome::Sorry, In order for shareholders to be sufficiently decentralized, the IDO must be larger than the minimum target of 30,000 Matic\"\r\n        );\r\n        MerlinMage(amount_burn_share);\r\n    }\r\n\r\n    // 15% of All\r\n    function FullRelease() external view returns (uint256) {\r\n        return\r\n            block.timestamp > IIDO(IDO_Address).getEndTimestamp().add(182 days)\r\n                ? Exodus\r\n                : 0;\r\n    }\r\n\r\n    // 10% of Profit\r\n    function ProfitRelease() external view returns (uint256) {\r\n        return\r\n            incomeProfit >= outcomeProfit\r\n                ? incomeProfit.sub(outcomeProfit).mul(10).div(100)\r\n                : 0;\r\n    }\r\n\r\n    function getSatanDevil(uint256 amount) private view returns (uint256) {\r\n        return amount.mul(SatanDevil).div(100);\r\n    }\r\n\r\n    function MerlinMage(uint256 amount_burn_share) private {\r\n        if(amount_burn_share >= Wall) { \r\n            SatanDevil < 1000 ? SatanDevil += 2 : SatanDevil = 1000;\r\n        } else { \r\n            SatanDevil += 6;\r\n        }\r\n        if (SatanDevil > 1000) {  SatanDevil = 1000; }\r\n    }\r\n\r\n    function diceFreeMatic() private view returns (uint256 HouseFreeMatic) {\r\n        uint256 HouseMatic = address(this).balance;\r\n        require(HouseMatic >= lockedInBets, \"diceFreeMatic::HouseMatic < lockedInBets\");\r\n        HouseFreeMatic = HouseMatic - lockedInBets;\r\n    }\r\n\r\n    // Fallback & receive payable function\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssassinCreed_Address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"IDO_Address_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnACreed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outMatic\",\"type\":\"uint256\"}],\"name\":\"WithdrawalIncomeEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AssassinCreed_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Exodus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FullRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDO_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProfitRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SatanDevil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_COORDINATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_burn_share\",\"type\":\"uint256\"}],\"name\":\"WithdrawalIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_\",\"type\":\"address\"}],\"name\":\"balanceAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLinkToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceMaxProfitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"betMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"gambler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"gambler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Dice4Utopia_com.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseEdgeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outcomeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceMaxProfitRatio\",\"type\":\"uint256\"}],\"name\":\"setBalanceMaxProfitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainlinkFee\",\"type\":\"uint256\"}],\"name\":\"setChainlinkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_houseEdgeBP\",\"type\":\"uint256\"}],\"name\":\"setHouseEdgeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wall\",\"type\":\"uint256\"}],\"name\":\"setWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wealthTaxBP\",\"type\":\"uint256\"}],\"name\":\"setWealthTaxBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wealthTaxThreshold\",\"type\":\"uint256\"}],\"name\":\"setWealthTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesDice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesDiceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wealthTaxBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wealthTaxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dice4Utopia_com", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ba8f01fbf928ad29d7c46f36bb9fe2cbcaf37c4000000000000000000000000865c5c2fbfd82a48101ec91a98ecbc8b1c3e34d0", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d4380dbfc0bf5df513825a3fc4c2293057b9eaf2b5505c5bac653b18c8dfcba"}