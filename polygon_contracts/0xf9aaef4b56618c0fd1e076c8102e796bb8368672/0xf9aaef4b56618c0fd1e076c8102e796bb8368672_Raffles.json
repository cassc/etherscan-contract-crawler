{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function getApproved(\r\n        uint256 tokenId\r\n    ) external view returns (address operator);\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ncontract Raffles is Ownable, IERC721Receiver {\r\n    struct Raffle {\r\n        IERC721 nft; // NFT contract address\r\n        uint nftId; // NFT token ID\r\n        uint256 price; // Price per ticket in 18 decimals\r\n        uint256 maxTickets; // Max tickets\r\n        uint256 ticketsSold; // Tickets sold\r\n        uint256 start; // Start time\r\n        uint256 end; // End time\r\n        uint winner; // Winning ticket\r\n        bool ended; // Has the raffle ended\r\n        bool isDrawn;\r\n        bool cancelled; // Has the raffle been cancelled\r\n        address[] participants; // List of participants\r\n        mapping(address => uint256) tickets; // Tickets per participant\r\n        address raffleWinner;\r\n        uint maxPerwallet;\r\n    }\r\n\r\n    uint256 public raffleCount;\r\n    mapping(uint256 => Raffle) public raffles;\r\n\r\n    IERC20 public token;\r\n\r\n    event RaffleCreated(\r\n        uint256 indexed raffleId,\r\n        address indexed nft,\r\n        uint256 indexed nftId,\r\n        uint256 price,\r\n        uint256 maxTickets,\r\n        uint256 start,\r\n        uint256 end\r\n    );\r\n\r\n    event RaffleEdited(\r\n        uint256 indexed raffleId,\r\n        address indexed nft,\r\n        uint256 indexed nftId,\r\n        uint256 price,\r\n        uint256 maxTickets,\r\n        uint256 start,\r\n        uint256 end\r\n    );\r\n\r\n    event RaffleCancelled(uint256 indexed raffleId);\r\n\r\n    event RaffleTicketPurchased(\r\n        uint256 indexed raffleId,\r\n        address indexed buyer,\r\n        uint256 amount\r\n    );\r\n\r\n    event RaffleDrawn(uint256 indexed raffleId, address indexed winner);\r\n\r\n    constructor(address _token) {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function createRaffle(\r\n        address nft,\r\n        uint nftId,\r\n        uint256 price,\r\n        uint256 maxTickets,\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 maxPerwallet\r\n    ) external onlyOwner {\r\n        require(start < end, \"Start time must be before end time\");\r\n        require(start > block.timestamp, \"Start time must be in the future\");\r\n        require(maxTickets > 0, \"Max tickets must be greater than 0\");\r\n        require(price > 0, \"Price must be greater than 0\");\r\n        require(maxPerwallet <= maxTickets, \"Invalid max per wallet.\");\r\n        IERC721 nftContract = IERC721(nft);\r\n        require(\r\n            nftContract.ownerOf(nftId) == address(this),\r\n            \"Raffle contract must own the NFT\"\r\n        );\r\n\r\n        raffleCount++;\r\n\r\n        Raffle storage raffle = raffles[raffleCount];\r\n\r\n        raffle.nft = nftContract;\r\n        raffle.nftId = nftId;\r\n        raffle.price = price;\r\n        raffle.maxTickets = maxTickets;\r\n        raffle.start = start;\r\n        raffle.end = end;\r\n        raffle.maxPerwallet = maxPerwallet;\r\n\r\n        emit RaffleCreated(\r\n            raffleCount,\r\n            nft,\r\n            nftId,\r\n            price,\r\n            maxTickets,\r\n            start,\r\n            end\r\n        );\r\n    }\r\n\r\n    function editRaffle(\r\n        uint raffleId,\r\n        address nft,\r\n        uint nftId,\r\n        uint256 price,\r\n        uint256 maxTickets,\r\n        uint256 start,\r\n        uint256 end,\r\n        uint maxPerwallet\r\n    ) external onlyOwner {\r\n        require(start < end, \"Start time must be before end time\");\r\n        require(start > block.timestamp, \"Start time must be in the future\");\r\n        require(maxTickets > 0, \"Max tickets must be greater than 0\");\r\n        require(price > 0, \"Price must be greater than 0\");\r\n        require(maxPerwallet <= maxTickets, \"Invalid max per wallet.\");\r\n        IERC721 nftContract = IERC721(nft);\r\n        require(\r\n            nftContract.ownerOf(nftId) == address(this),\r\n            \"Raffle contract must own the NFT\"\r\n        );\r\n        require(\r\n            raffleId <= raffleCount && raffleId > 0,\r\n            \"Raffle does not exist\"\r\n        );\r\n\r\n        raffleCount++;\r\n\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        raffle.nft = nftContract;\r\n        raffle.nftId = nftId;\r\n        raffle.price = price;\r\n        raffle.maxTickets = maxTickets;\r\n        raffle.start = start;\r\n        raffle.end = end;\r\n        raffle.maxPerwallet = maxPerwallet;\r\n\r\n        emit RaffleEdited(\r\n            raffleCount,\r\n            nft,\r\n            nftId,\r\n            price,\r\n            maxTickets,\r\n            start,\r\n            end\r\n        );\r\n    }\r\n\r\n    function buyTicket(uint raffleId, uint _amount) external {\r\n        require(\r\n            raffleId <= raffleCount && raffleId > 0,\r\n            \"Raffle does not exist\"\r\n        );\r\n\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        require(\r\n            raffle.maxPerwallet >= raffle.tickets[msg.sender] + _amount,\r\n            \"Max token/wallet exceeded\"\r\n        );\r\n\r\n        require(raffle.cancelled == false, \"Raffle has been cancelled\");\r\n        require(raffle.ended == false, \"Raffle has ended\");\r\n        require(block.timestamp >= raffle.start, \"Raffle has not started\");\r\n        require(block.timestamp <= raffle.end, \"Raffle has ended\");\r\n        require(raffle.ticketsSold <= raffle.maxTickets, \"Raffle is sold out\");\r\n        require(\r\n            token.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                ((_amount * raffle.price) * 10 ** token.decimals()) / 10 ** 18\r\n            ),\r\n            \"Transfer failed\"\r\n        );\r\n\r\n        raffle.ticketsSold = raffle.ticketsSold + _amount;\r\n        raffle.tickets[msg.sender] += _amount;\r\n        // raffle.participants.push(msg.sender);\r\n\r\n        // add to participants list\r\n        for (uint i = 0; i < _amount; i++) {\r\n            raffle.participants.push(msg.sender);\r\n        }\r\n\r\n        if (raffle.ticketsSold == raffle.maxTickets) {\r\n            raffle.ended = true;\r\n        }\r\n\r\n        emit RaffleTicketPurchased(raffleId, msg.sender, _amount);\r\n    }\r\n\r\n    function cancelRaffle(uint raffleId) external onlyOwner {\r\n        require(\r\n            raffleId <= raffleCount && raffleId > 0,\r\n            \"Raffle does not exist\"\r\n        );\r\n\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        require(raffle.cancelled == false, \"Raffle has been cancelled\");\r\n        require(raffle.ended == false, \"Raffle has ended\");\r\n        raffle.cancelled = true;\r\n        // return the cost of the tickets\r\n        for (uint i = 0; i < raffle.participants.length; i++) {\r\n            token.transfer(\r\n                raffle.participants[i],\r\n                (raffle.tickets[raffle.participants[i]] *\r\n                    raffle.price *\r\n                    10 ** token.decimals()) / 10 ** 18\r\n            );\r\n        }\r\n        raffle.nft.safeTransferFrom(address(this), owner(), raffle.nftId);\r\n\r\n        emit RaffleCancelled(raffleId);\r\n    }\r\n\r\n    function drawRaffle(uint raffleId) external {\r\n        require(\r\n            raffleId <= raffleCount && raffleId > 0,\r\n            \"Raffle does not exist\"\r\n        );\r\n\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        require(raffle.cancelled == false, \"Raffle has been cancelled\");\r\n        require(\r\n            raffle.raffleWinner == address(0),\r\n            \"Raffle has already been drawn\"\r\n        );\r\n\r\n        if (msg.sender != owner()) {\r\n            require(raffle.ended == true, \"Raffle has not ended\");\r\n        }\r\n\r\n        uint256 random = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.difficulty,\r\n                    block.timestamp,\r\n                    raffle.participants.length\r\n                )\r\n            )\r\n        );\r\n        uint256 winner = random % raffle.participants.length;\r\n        raffle.winner = winner;\r\n        raffle.raffleWinner = raffle.participants[winner];\r\n        // transfer the NFT\r\n        raffle.nft.safeTransferFrom(\r\n            address(this),\r\n            raffle.raffleWinner,\r\n            raffle.nftId\r\n        );\r\n\r\n        uint totalCollection = (raffle.ticketsSold *\r\n            raffle.price *\r\n            10 ** token.decimals()) / 10 ** 18;\r\n        raffle.isDrawn = true;\r\n        // send to owner\r\n        token.transfer(owner(), totalCollection);\r\n\r\n        emit RaffleDrawn(raffleId, raffle.raffleWinner);\r\n    }\r\n\r\n    function setToken(address _token) external onlyOwner {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function getRafflePerticipents(\r\n        uint raffleId\r\n    ) external view returns (address[] memory, uint[] memory) {\r\n        require(\r\n            raffleId <= raffleCount && raffleId > 0,\r\n            \"Raffle does not exist\"\r\n        );\r\n\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        uint[] memory tickets = new uint[](raffle.participants.length);\r\n\r\n        // perticipents tickets\r\n        for (uint i = 0; i < raffle.participants.length; i++) {\r\n            tickets[i] = (raffle.tickets[raffle.participants[i]]);\r\n        }\r\n\r\n        return (raffle.participants, tickets);\r\n    }\r\n\r\n    // The address of the NFT contract\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external pure override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"RaffleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RaffleDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"RaffleEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RaffleTicketPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerwallet\",\"type\":\"uint256\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"drawRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerwallet\",\"type\":\"uint256\"}],\"name\":\"editRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getRafflePerticipents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"raffleWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPerwallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Raffles", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000099100edced431f0b458cba4f9bfadef345e2edf0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e87e8ee883cebeeb32ec693a814ddf835d678674018e24e4de7cb5433ae6a33"}