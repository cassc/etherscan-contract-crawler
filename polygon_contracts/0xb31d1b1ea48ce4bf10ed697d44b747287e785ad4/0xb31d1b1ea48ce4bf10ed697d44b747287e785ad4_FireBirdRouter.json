{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IFireBirdFactory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function formula() external view returns (address);\r\n\r\n  function protocolFee() external view returns (uint256);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee\r\n  ) external view returns (address pair);\r\n\r\n  function allPairs(uint256) external view returns (address pair);\r\n\r\n  function isPair(address) external view returns (bool);\r\n\r\n  function allPairsLength() external view returns (uint256);\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee\r\n  ) external returns (address pair);\r\n\r\n  function getWeightsAndSwapFee(address pair)\r\n    external\r\n    view\r\n    returns (\r\n      uint32 tokenWeight0,\r\n      uint32 tokenWeight1,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n\r\n  function setProtocolFee(uint256) external;\r\n}\r\n\r\n/*\r\n    Bancor Formula interface\r\n*/\r\ninterface IFireBirdFormula {\r\n  function getFactoryReserveAndWeights(\r\n    address factory,\r\n    address pair,\r\n    address tokenA,\r\n    uint8 dexId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address tokenB,\r\n      uint256 reserveA,\r\n      uint256 reserveB,\r\n      uint32 tokenWeightA,\r\n      uint32 tokenWeightB,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function getFactoryWeightsAndSwapFee(\r\n    address factory,\r\n    address pair,\r\n    uint8 dexId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint32 tokenWeight0,\r\n      uint32 tokenWeight1,\r\n      uint32 swapFee\r\n    );\r\n\r\n  function getAmountIn(\r\n    uint256 amountOut,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut,\r\n    uint32 tokenWeightIn,\r\n    uint32 tokenWeightOut,\r\n    uint32 swapFee\r\n  ) external view returns (uint256 amountIn);\r\n\r\n  function getAmountOut(\r\n    uint256 amountIn,\r\n    uint256 reserveIn,\r\n    uint256 reserveOut,\r\n    uint32 tokenWeightIn,\r\n    uint32 tokenWeightOut,\r\n    uint32 swapFee\r\n  ) external view returns (uint256 amountOut);\r\n\r\n  function getFactoryAmountsIn(\r\n    address factory,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function getFactoryAmountsOut(\r\n    address factory,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds\r\n  ) external view returns (uint256[] memory amounts);\r\n\r\n  function ensureConstantValue(\r\n    uint256 reserve0,\r\n    uint256 reserve1,\r\n    uint256 balance0Adjusted,\r\n    uint256 balance1Adjusted,\r\n    uint32 tokenWeight0\r\n  ) external view returns (bool);\r\n\r\n  function getReserves(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB\r\n  ) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n  function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\r\n\r\n  function quote(\r\n    uint256 amountA,\r\n    uint256 reserveA,\r\n    uint256 reserveB\r\n  ) external pure returns (uint256 amountB);\r\n\r\n  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n  function mintLiquidityFee(\r\n    uint256 totalLiquidity,\r\n    uint112 reserve0,\r\n    uint112 reserve1,\r\n    uint32 tokenWeight0,\r\n    uint32 tokenWeight1,\r\n    uint112 collectedFee0,\r\n    uint112 collectedFee1\r\n  ) external view returns (uint256 amount);\r\n}\r\n\r\ninterface IFireBirdPair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n  function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n  function getSwapFee() external view returns (uint32);\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(\r\n    address,\r\n    address,\r\n    uint32,\r\n    uint32\r\n  ) external;\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n  function safeApprove(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n  }\r\n\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n  }\r\n\r\n  function safeTransferETH(address to, uint256 value) internal {\r\n    (bool success, ) = to.call{value: value}(new bytes(0));\r\n    require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IFireBirdRouter {\r\n  event Exchange(address pair, uint256 amountOut, address output);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function formula() external view returns (address);\r\n\r\n  function WETH() external view returns (address);\r\n\r\n  function swapFeeReward() external view returns (address);\r\n\r\n  function addLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function swapExactTokensForTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    address tokenIn,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable returns (uint256[] memory amounts);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountA,\r\n    uint256 amountB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee,\r\n    address to\r\n  ) external returns (uint256 liquidity);\r\n\r\n  function createPairETH(\r\n    address token,\r\n    uint256 amountToken,\r\n    uint32 tokenWeight,\r\n    uint32 swapFee,\r\n    address to\r\n  ) external payable returns (uint256 liquidity);\r\n\r\n  function removeLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256 amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint256 amountETH);\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n  }\r\n\r\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n  }\r\n\r\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b > 0, \"ds-math-division-by-zero\");\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function withdraw(uint256) external;\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IAggregationExecutor {\r\n  function callBytes(bytes calldata data, address srcSpender) external payable; // 0xd9c45357\r\n}\r\n\r\ninterface ISwapFeeReward {\r\n  function swap(\r\n    address account,\r\n    address input,\r\n    address output,\r\n    uint256 amount,\r\n    address pair\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Permit {\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n}\r\n\r\nlibrary RevertReasonParser {\r\n  function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\r\n    // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\r\n    // We assume that revert reason is abi-encoded as Error(string)\r\n\r\n    // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\r\n    if (data.length >= 68 && data[0] == \"\\x08\" && data[1] == \"\\xc3\" && data[2] == \"\\x79\" && data[3] == \"\\xa0\") {\r\n      string memory reason;\r\n      // solhint-disable no-inline-assembly\r\n      assembly {\r\n        // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\r\n        reason := add(data, 68)\r\n      }\r\n      /*\r\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\r\n                also sometimes there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can't check for equality and instead check\r\n                that string length + extra 68 bytes is less than overall data length\r\n            */\r\n      require(data.length >= 68 + bytes(reason).length, \"Invalid revert reason\");\r\n      return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\r\n    }\r\n    // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\r\n    else if (data.length == 36 && data[0] == \"\\x4e\" && data[1] == \"\\x48\" && data[2] == \"\\x7b\" && data[3] == \"\\x71\") {\r\n      uint256 code;\r\n      // solhint-disable no-inline-assembly\r\n      assembly {\r\n        // 36 = 32 bytes data length + 4-byte selector\r\n        code := mload(add(data, 36))\r\n      }\r\n      return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\r\n    }\r\n\r\n    return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\r\n  }\r\n\r\n  function _toHex(uint256 value) private pure returns (string memory) {\r\n    return _toHex(abi.encodePacked(value));\r\n  }\r\n\r\n  function _toHex(bytes memory data) private pure returns (string memory) {\r\n    bytes16 alphabet = 0x30313233343536373839616263646566;\r\n    bytes memory str = new bytes(2 + data.length * 2);\r\n    str[0] = \"0\";\r\n    str[1] = \"x\";\r\n    for (uint256 i = 0; i < data.length; i++) {\r\n      str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\r\n      str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\r\n    }\r\n    return string(str);\r\n  }\r\n}\r\n\r\ncontract Permitable {\r\n  event Error(string reason);\r\n\r\n  function _permit(\r\n    IERC20 token,\r\n    uint256 amount,\r\n    bytes calldata permit\r\n  ) internal {\r\n    if (permit.length == 32 * 7) {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\r\n      if (!success) {\r\n        string memory reason = RevertReasonParser.parse(result, \"Permit call failed: \");\r\n        if (token.allowance(msg.sender, address(this)) < amount) {\r\n          revert(reason);\r\n        } else {\r\n          emit Error(reason);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract FireBirdRouter is IFireBirdRouter, Ownable, Permitable {\r\n  using SafeMath for uint256;\r\n  address public immutable override factory;\r\n  address public immutable override formula;\r\n  address public immutable override WETH;\r\n  address public override swapFeeReward;\r\n  address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  uint256 private constant _PARTIAL_FILL = 0x01;\r\n  uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\r\n  uint256 private constant _SHOULD_CLAIM = 0x04;\r\n  uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\r\n  uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\r\n\r\n  struct SwapDescription {\r\n    IERC20 srcToken;\r\n    IERC20 dstToken;\r\n    address srcReceiver;\r\n    address dstReceiver;\r\n    uint256 amount;\r\n    uint256 minReturnAmount;\r\n    uint256 flags;\r\n    bytes permit;\r\n  }\r\n\r\n  event Swapped(address sender, IERC20 srcToken, IERC20 dstToken, address dstReceiver, uint256 spentAmount, uint256 returnAmount);\r\n\r\n  modifier ensure(uint256 deadline) {\r\n    require(deadline >= block.timestamp, \"Router: EXPIRED\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _factory,\r\n    address _formula,\r\n    address _WETH\r\n  ) public {\r\n    factory = _factory;\r\n    formula = _formula;\r\n    WETH = _WETH;\r\n  }\r\n\r\n  receive() external payable {\r\n    assert(msg.sender == WETH);\r\n    // only accept ETH via fallback from the WETH contract\r\n  }\r\n\r\n  function setSwapFeeReward(address _swapFeeReward) public onlyOwner {\r\n    swapFeeReward = _swapFeeReward;\r\n  }\r\n\r\n  // **** ADD LIQUIDITY ****\r\n  function _addLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin\r\n  ) internal virtual returns (uint256 amountA, uint256 amountB) {\r\n    (uint256 reserveA, uint256 reserveB) = IFireBirdFormula(formula).getReserves(pair, tokenA, tokenB);\r\n    if (reserveA == 0 && reserveB == 0) {\r\n      (amountA, amountB) = (amountADesired, amountBDesired);\r\n    } else {\r\n      uint256 amountBOptimal = IFireBirdFormula(formula).quote(amountADesired, reserveA, reserveB);\r\n      if (amountBOptimal <= amountBDesired) {\r\n        require(amountBOptimal >= amountBMin, \"Router: INSUFFICIENT_B_AMOUNT\");\r\n        (amountA, amountB) = (amountADesired, amountBOptimal);\r\n      } else {\r\n        uint256 amountAOptimal = IFireBirdFormula(formula).quote(amountBDesired, reserveB, reserveA);\r\n        assert(amountAOptimal <= amountADesired);\r\n        require(amountAOptimal >= amountAMin, \"Router: INSUFFICIENT_A_AMOUNT\");\r\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _addLiquidityToken(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin\r\n  ) internal returns (uint256 amountA, uint256 amountB) {\r\n    (amountA, amountB) = _addLiquidity(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\r\n    TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n    TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n  }\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountA,\r\n    uint256 amountB,\r\n    uint32 tokenWeightA,\r\n    uint32 swapFee,\r\n    address to\r\n  ) public virtual override returns (uint256 liquidity) {\r\n    address pair = IFireBirdFactory(factory).createPair(tokenA, tokenB, tokenWeightA, swapFee);\r\n    _addLiquidityToken(pair, tokenA, tokenB, amountA, amountB, 0, 0);\r\n    liquidity = IFireBirdPair(pair).mint(to);\r\n  }\r\n\r\n  function addLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    virtual\r\n    override\r\n    ensure(deadline)\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    )\r\n  {\r\n    (amountA, amountB) = _addLiquidityToken(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\r\n    liquidity = IFireBirdPair(pair).mint(to);\r\n  }\r\n\r\n  function _addLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to\r\n  )\r\n    internal\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    )\r\n  {\r\n    (amountToken, amountETH) = _addLiquidity(pair, token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin);\r\n    TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n    transferETHTo(amountETH, pair);\r\n    liquidity = IFireBirdPair(pair).mint(to);\r\n    // refund dust eth, if any\r\n    if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\r\n  }\r\n\r\n  function createPairETH(\r\n    address token,\r\n    uint256 amountToken,\r\n    uint32 tokenWeight,\r\n    uint32 swapFee,\r\n    address to\r\n  ) public payable virtual override returns (uint256 liquidity) {\r\n    address pair = IFireBirdFactory(factory).createPair(token, WETH, tokenWeight, swapFee);\r\n    (, , liquidity) = _addLiquidityETH(pair, token, amountToken, 0, 0, to);\r\n  }\r\n\r\n  function addLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    public\r\n    payable\r\n    virtual\r\n    override\r\n    ensure(deadline)\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    )\r\n  {\r\n    (amountToken, amountETH, liquidity) = _addLiquidityETH(pair, token, amountTokenDesired, amountTokenMin, amountETHMin, to);\r\n  }\r\n\r\n  // **** SWAP ****\r\n  // requires the initial amount to have already been sent to the first pair\r\n  function _swap(\r\n    address tokenIn,\r\n    uint256[] memory amounts,\r\n    address[] memory path,\r\n    address _to\r\n  ) internal virtual {\r\n    address input = tokenIn;\r\n    for (uint256 i = 0; i < path.length; i++) {\r\n      IFireBirdPair pairV2 = IFireBirdPair(path[i]);\r\n      address token0 = pairV2.token0();\r\n      uint256 amountOut = amounts[i + 1];\r\n      (uint256 amount0Out, uint256 amount1Out, address output) = input == token0 ? (uint256(0), amountOut, pairV2.token1()) : (amountOut, uint256(0), token0);\r\n      if (swapFeeReward != address(0)) {\r\n        ISwapFeeReward(swapFeeReward).swap(msg.sender, input, output, amountOut, path[i]);\r\n      }\r\n      address to = i < path.length - 1 ? path[i + 1] : _to;\r\n      pairV2.swap(amount0Out, amount1Out, to, new bytes(0));\r\n      emit Exchange(address(pairV2), amountOut, output);\r\n      input = output;\r\n    }\r\n  }\r\n\r\n  function swapExactTokensForTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] memory path,\r\n    uint8[] memory dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path, dexIds);\r\n\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\r\n    _swap(tokenIn, amounts, path, to);\r\n  }\r\n\r\n  function swapTokensForExactTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path, dexIds);\r\n\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\r\n    _swap(tokenIn, amounts, path, to);\r\n  }\r\n\r\n  function swapExactETHForTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path, dexIds);\r\n\r\n    transferETHTo(amounts[0], path[0]);\r\n    _swap(WETH, amounts, path, to);\r\n  }\r\n\r\n  function swapTokensForExactETH(\r\n    address tokenIn,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path, dexIds);\r\n\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\r\n    _swap(tokenIn, amounts, path, address(this));\r\n    transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\r\n  }\r\n\r\n  function swapExactTokensForETH(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path, dexIds);\r\n\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\r\n    _swap(tokenIn, amounts, path, address(this));\r\n    transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\r\n  }\r\n\r\n  function swapETHForExactTokens(\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\r\n    amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path, dexIds);\r\n\r\n    transferETHTo(amounts[0], path[0]);\r\n    _swap(WETH, amounts, path, to);\r\n    // refund dust eth, if any\r\n    if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\r\n  }\r\n\r\n  // **** SWAP (supporting fee-on-transfer tokens) ****\r\n  // requires the initial amount to have already been sent to the first pair\r\n  function _swapSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    address[] memory path,\r\n    uint8[] memory dexIds,\r\n    address _to\r\n  ) internal virtual {\r\n    for (uint256 i; i < path.length; i++) {\r\n      uint256 amountOutput;\r\n      address currentOutput;\r\n      {\r\n        (address output, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, , uint32 swapFee) =\r\n          IFireBirdFormula(formula).getFactoryReserveAndWeights(factory, path[i], tokenIn, dexIds[i]);\r\n        uint256 amountInput = IERC20(tokenIn).balanceOf(path[i]).sub(reserveInput);\r\n        amountOutput = IFireBirdFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, 100 - tokenWeightInput, swapFee);\r\n        currentOutput = output;\r\n      }\r\n\r\n      IFireBirdPair pair = IFireBirdPair(path[i]);\r\n      (uint256 amount0Out, uint256 amount1Out) = tokenIn == pair.token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\r\n      if (swapFeeReward != address(0)) {\r\n        ISwapFeeReward(swapFeeReward).swap(msg.sender, tokenIn, currentOutput, amountOutput, path[i]);\r\n      }\r\n      address to = i < path.length - 1 ? path[i + 1] : _to;\r\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n      emit Exchange(path[i], amountOutput, currentOutput);\r\n      tokenIn = currentOutput;\r\n    }\r\n  }\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external virtual override ensure(deadline) {\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\r\n    uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\r\n    _swapSupportingFeeOnTransferTokens(tokenIn, path, dexIds, to);\r\n    require(IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin, \"Router: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n  }\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    address tokenOut,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable virtual override ensure(deadline) {\r\n    //            require(path[0] == WETH, 'Router: INVALID_PATH');\r\n    uint256 amountIn = msg.value;\r\n    transferETHTo(amountIn, path[0]);\r\n    uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\r\n    _swapSupportingFeeOnTransferTokens(WETH, path, dexIds, to);\r\n    require(IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin, \"Router: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n  }\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    address tokenIn,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds,\r\n    address to,\r\n    uint256 deadline\r\n  ) external virtual override ensure(deadline) {\r\n    TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\r\n    _swapSupportingFeeOnTransferTokens(tokenIn, path, dexIds, address(this));\r\n    uint256 amountOut = IERC20(WETH).balanceOf(address(this));\r\n    require(amountOut >= amountOutMin, \"Router: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n    transferAll(ETH_ADDRESS, to, amountOut);\r\n  }\r\n\r\n  function swap(\r\n    IAggregationExecutor caller,\r\n    SwapDescription calldata desc,\r\n    bytes calldata data\r\n  ) external payable returns (uint256 returnAmount, uint256 gasLeft) {\r\n    require(desc.minReturnAmount > 0, \"Min return should not be 0\");\r\n    require(data.length > 0, \"data should be not zero\");\r\n\r\n    uint256 flags = desc.flags;\r\n    uint256 amount = desc.amount;\r\n    IERC20 srcToken = desc.srcToken;\r\n    IERC20 dstToken = desc.dstToken;\r\n\r\n    if (flags & _REQUIRES_EXTRA_ETH != 0) {\r\n      require(msg.value > (isETH(srcToken) ? amount : 0), \"Invalid msg.value\");\r\n    } else {\r\n      require(msg.value == (isETH(srcToken) ? amount : 0), \"Invalid msg.value\");\r\n    }\r\n\r\n    if (flags & _SHOULD_CLAIM != 0) {\r\n      require(!isETH(srcToken), \"Claim token is ETH\");\r\n      _permit(srcToken, amount, desc.permit);\r\n      TransferHelper.safeTransferFrom(address(srcToken), msg.sender, desc.srcReceiver, amount);\r\n    }\r\n\r\n    address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\r\n    uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? getBalance(srcToken, msg.sender) : 0;\r\n    uint256 initialDstBalance = getBalance(dstToken, dstReceiver);\r\n\r\n    {\r\n      // solhint-disable-next-line avoid-low-level-calls\r\n      (bool success, bytes memory result) = address(caller).call{value: msg.value}(abi.encodeWithSelector(caller.callBytes.selector, data, msg.sender));\r\n      if (!success) {\r\n        revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\r\n      }\r\n    }\r\n\r\n    uint256 spentAmount = amount;\r\n    returnAmount = getBalance(dstToken, dstReceiver).sub(initialDstBalance);\r\n\r\n    if (flags & _PARTIAL_FILL != 0) {\r\n      spentAmount = initialSrcBalance.add(amount).sub(getBalance(srcToken, msg.sender));\r\n      require(returnAmount.mul(amount) >= desc.minReturnAmount.mul(spentAmount), \"Return amount is not enough\");\r\n    } else {\r\n      require(returnAmount >= desc.minReturnAmount, \"Return amount is not enough\");\r\n    }\r\n\r\n    emit Swapped(msg.sender, srcToken, dstToken, dstReceiver, spentAmount, returnAmount);\r\n    emit Exchange(address(caller), returnAmount, isETH(dstToken) ? WETH : address(dstToken));\r\n\r\n    gasLeft = gasleft();\r\n  }\r\n\r\n  function getBalance(IERC20 token, address account) internal view returns (uint256) {\r\n    if (isETH(token)) {\r\n      return account.balance;\r\n    } else {\r\n      return token.balanceOf(account);\r\n    }\r\n  }\r\n\r\n  function _validateAmountOut(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] memory path,\r\n    uint8[] memory dexIds\r\n  ) internal view returns (uint256[] memory amounts) {\r\n    amounts = IFireBirdFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path, dexIds);\r\n    require(amounts[amounts.length - 1] >= amountOutMin, \"Router: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n  }\r\n\r\n  function _validateAmountIn(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint256 amountOut,\r\n    uint256 amountInMax,\r\n    address[] calldata path,\r\n    uint8[] calldata dexIds\r\n  ) internal view returns (uint256[] memory amounts) {\r\n    amounts = IFireBirdFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path, dexIds);\r\n    require(amounts[0] <= amountInMax, \"Router: EXCESSIVE_INPUT_AMOUNT\");\r\n  }\r\n\r\n  function transferETHTo(uint256 amount, address to) internal {\r\n    IWETH(WETH).deposit{value: amount}();\r\n    assert(IWETH(WETH).transfer(to, amount));\r\n  }\r\n\r\n  function transferAll(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    if (amount == 0) {\r\n      return true;\r\n    }\r\n\r\n    if (isETH(IERC20(token))) {\r\n      IWETH(WETH).withdraw(amount);\r\n      TransferHelper.safeTransferETH(to, amount);\r\n    } else {\r\n      TransferHelper.safeTransfer(token, to, amount);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function isETH(IERC20 token) internal pure returns (bool) {\r\n    return (address(token) == ETH_ADDRESS);\r\n  }\r\n\r\n  // **** REMOVE LIQUIDITY ****\r\n  function _removeLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to\r\n  ) internal returns (uint256 amountA, uint256 amountB) {\r\n    require(IFireBirdFactory(factory).isPair(pair), \"Router: Invalid pair\");\r\n    IFireBirdPair(pair).transferFrom(msg.sender, pair, liquidity);\r\n    // send liquidity to pair\r\n    (uint256 amount0, uint256 amount1) = IFireBirdPair(pair).burn(to);\r\n    (address token0, ) = IFireBirdFormula(formula).sortTokens(tokenA, tokenB);\r\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\r\n    require(amountA >= amountAMin, \"Router: INSUFFICIENT_A_AMOUNT\");\r\n    require(amountB >= amountBMin, \"Router: INSUFFICIENT_B_AMOUNT\");\r\n  }\r\n\r\n  function removeLiquidity(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\r\n    (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\r\n  }\r\n\r\n  function removeLiquidityETH(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\r\n    (amountToken, amountETH) = _removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\r\n    TransferHelper.safeTransfer(token, to, amountToken);\r\n    transferAll(ETH_ADDRESS, to, amountETH);\r\n  }\r\n\r\n  function removeLiquidityWithPermit(\r\n    address pair,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 liquidity,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\r\n    {\r\n      uint256 value = approveMax ? uint256(-1) : liquidity;\r\n      IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n    }\r\n    (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\r\n  }\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\r\n    uint256 value = approveMax ? uint256(-1) : liquidity;\r\n    IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n    (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n  }\r\n\r\n  // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  ) public virtual override ensure(deadline) returns (uint256 amountETH) {\r\n    (, amountETH) = removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\r\n    TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\r\n    transferAll(ETH_ADDRESS, to, amountETH);\r\n  }\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address pair,\r\n    address token,\r\n    uint256 liquidity,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual override returns (uint256 amountETH) {\r\n    uint256 value = approveMax ? uint256(-1) : liquidity;\r\n    IFireBirdPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\r\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\r\n  }\r\n\r\n  function rescueFunds(address token, uint256 amount) external onlyOwner {\r\n    if (isETH(IERC20(token))) {\r\n      TransferHelper.safeTransferETH(msg.sender, amount);\r\n    } else {\r\n      TransferHelper.safeTransfer(token, msg.sender, amount);\r\n    }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPairETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFeeReward\",\"type\":\"address\"}],\"name\":\"setSwapFeeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct FireBirdRouter.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dexIds\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FireBirdRouter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000005de74546d3b86c8df7feec30253865e1149818c8000000000000000000000000f8f007970cd7345a6bff4a0226f50feeb417378c0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3cd3454ba18ea99cb54a8288c3a41e68d2edf034c335dfac8a10fcb76a94d33a"}