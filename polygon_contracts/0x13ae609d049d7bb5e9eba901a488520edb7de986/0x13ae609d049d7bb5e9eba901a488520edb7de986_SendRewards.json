{"SourceCode": "contract IGameWallet {\r\n    function depositFundsFor(address _user, uint _amount) public;\r\n    function addFundsToWalletForUser(address _user, uint[] memory _amounts, bool _payingWithBplots) public;\r\n}\r\n\r\ncontract IToken {\r\n\r\n    function decimals() external view returns(uint8);\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param account The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address account) external  view returns (uint256);\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param recipient The address to transfer to.\r\n    * @param amount The amount to be transferred.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev function that mints an amount of the token and assigns it to\r\n    * an account.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    \r\n     /**\r\n    * @dev burns an amount of the tokens of the message sender\r\n    * account.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function burn(uint256 amount) external ;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param sender address The address which you want to send tokens from\r\n    * @param recipient address The address which you want to transfer to\r\n    * @param amount uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ncontract SendRewards {\r\n\r\n    // \r\n    IGameWallet public Igw;\r\n    address public owner;\r\n    mapping(uint=>bool) public _uniqueId;\r\n\r\n    constructor(address _igw) public {\r\n        Igw = IGameWallet(_igw);\r\n        owner = msg.sender;\r\n        whiteListUser(owner);\r\n    }\r\n\r\n    event DBPlotSent(address indexed _user, uint _amount, uint _timestamp,uint _id);\r\n\r\n    mapping(address => bool) public _allowed;\r\n\r\n    function whiteListUser(address _add) public {\r\n        require(msg.sender == owner);\r\n        _allowed[_add] = true;\r\n    }\r\n\r\n    function deWhiteListUser(address _add) public {\r\n        require(msg.sender == owner);\r\n        _allowed[_add] = false;\r\n    }\r\n\r\n    function giveApproval(address _token, address _spender, uint _amount) public {\r\n        require(_allowed[msg.sender],\"Not Allowed\");\r\n        IToken(_token).approve(_spender,_amount);\r\n    }\r\n\r\n    function transferRewards(address[] memory _users, uint[] memory _rewards, uint _id) public {\r\n        require(_allowed[msg.sender],\"Not Allowed\");\r\n        require(!_uniqueId[_id],\"Already distributed for this id\");\r\n        _uniqueId[_id] = true;\r\n        for(uint i=0;i<_users.length;i++) {\r\n            uint[] memory funds = new uint[](3);\r\n            funds[2] = _rewards[i];\r\n            Igw.addFundsToWalletForUser(_users[i],funds,false);\r\n            emit DBPlotSent(_users[i],_rewards[i],now,_id);\r\n        }        \r\n    } \r\n\r\n    function takeFundsOut(address _token, address _to, uint _amount) public {\r\n        require(_allowed[msg.sender],\"Not Allowed\");\r\n        IToken(_token).transfer(_to,_amount);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeFundsOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"whiteListUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"deWhiteListUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transferRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Igw\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_uniqueId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"giveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_igw\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DBPlotSent\",\"type\":\"event\"}]", "ContractName": "SendRewards", "CompilerVersion": "v0.5.7+commit.6da8b019", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e7d3c1342e8541e7c3fe40b122585024ebd8a40", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://605ea621eafb36c7573d4410d161ff76d56999d12dca4ed2d85bcfcf3085e524"}