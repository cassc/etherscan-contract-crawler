{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2023-09-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Netly_Swap is Ownable {\r\n\r\n    IERC20 private _icotoken = IERC20(0x0524aFaaD43ab0Ab8c2F396e3b4674fFAf0D5e71);\r\n    IERC20 private _staketoken = IERC20(0xAc020D90410103f579Bd67e46771f82E09517e31);\r\n    IERC20 private _netlytoken = IERC20(0x28De9AfaeA11d841AfC750cd8092B855864618AB);\r\n\r\n   mapping(address => uint256) private _lastWithdraw;\r\n\r\n   uint256 private maxWithdraw = 20;\r\n\r\n   bool isSwap = false;\r\n\r\n   uint256 private day = 86400;\r\n\r\n   uint256 trashhold = 1000000000000000;\r\n\r\n   constructor() {\r\n\r\n   }\r\n\r\n   function toggleSwap() public onlyOwner {\r\n       isSwap = !isSwap;\r\n   }\r\n\r\n   function swap() public {\r\n        require(isSwap, \"Gli scambi sono disabilitati!\");\r\n        require(block.timestamp > _lastWithdraw[_msgSender()] + day * 30, \"Puoi scambiare solo una volta ogni 30 giorni!\");\r\n        uint256 bal1 = _icotoken.balanceOf(_msgSender());\r\n        uint256 bal2 = _staketoken.balanceOf(_msgSender());\r\n        uint256 amount1 = 0;\r\n        uint256 amount2 = 0;\r\n        if(bal1 > trashhold) {\r\n              amount1 = bal1 * maxWithdraw / 100;\r\n        } else {\r\n              amount1 = bal1;\r\n        }\r\n\r\n        if(bal2 > trashhold) {\r\n            amount2 = bal2 * maxWithdraw / 100;\r\n        } else {\r\n            amount2 = bal2;\r\n        }\r\n\r\n        require(_netlytoken.balanceOf(address(this)) > amount1 + amount2, \"Non ci sono fondi sufficienti al momento!\");\r\n\r\n        bool tx1 = _icotoken.transferFrom(_msgSender(), address(this), amount1);\r\n        bool tx2 = _staketoken.transferFrom(_msgSender(), address(this), amount2);\r\n\r\n        require(tx1 && tx2, \"Qualcosa e andato storto!\");\r\n\r\n        _netlytoken.transfer(_msgSender(), amount1 + amount2);\r\n\r\n        _lastWithdraw[_msgSender()] = block.timestamp;\r\n\r\n   }\r\n\r\n   function rescueTokens() public onlyOwner{\r\n    _netlytoken.transfer(_msgSender(), _netlytoken.balanceOf(address(this)));\r\n   }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Netly_Swap", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20cdb7f76d81a44426971d47658335277ed4406e62720ac29695ad78dfa9205d"}