{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IUSDC{\r\n    function transferFrom(address, address, uint256) public pure returns (bool);\r\n    function transfer(address, uint256) public pure returns (bool);\r\n }\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Kichee is IERC20 {\r\n    using SafeMath for uint256;\r\n    address private _owner;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    //Supporting variables\r\n    uint256 public hardcap = 0;\r\n    uint256 public userHardCap = 0;\r\n    uint256 public minMint = 0;\r\n    uint256 public priceUsdc = 0;\r\n    uint256 public priceMatic = 0;\r\n    uint256 public totalMinted = 0;\r\n    uint256 public usdcViewPrice = 0;\r\n    uint256 public maticViewPrice = 0;\r\n    uint256 public unlockingTime = 0; \r\n    uint256 public KCHViewPrice = 0;\r\n    mapping (address => uint256) public userPurchase;\r\n    mapping (address => uint256) public userBurnTokens;\r\n\r\n    //Variables for claim functionality\r\n    mapping (address => uint256) public whitelistClaimUsers;\r\n    mapping (address => uint256) public claimedAmountByAddress;\r\n\r\n    IUSDC iUSDC;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => uint256) private time;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals, address owner) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _owner = owner;\r\n    }\r\n\r\n    //Owner set usdc address\r\n    function setUSDCAddress(address _iUSDCAddress) onlyOwner external returns(bool){\r\n        iUSDC = IUSDC(_iUSDCAddress);\r\n    }\r\n\r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to max hard cap\r\n    */\r\n    modifier checkHardCaps(uint256 _request, address _userAdd) {\r\n        require(hardcap >= totalMinted + _request,\"Hardcap reachedr\");\r\n        require(userHardCap >= userPurchase[_userAdd] + _request,\"User Hardcap reached\");\r\n        require(minMint <= userPurchase[_userAdd] + _request,\"Should be more than min\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) public onlyOwner returns (bool){\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * View only functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * Transfer, allow, mint and burn functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public  returns (bool) {\r\n            _transfer(msg.sender, to, value);\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n             _transfer(from, to, value);\r\n             _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n             return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint New tokens by Owner\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _mintNewTokens(address to, uint256 value) internal {\r\n        require(to != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += value;\r\n        _balances[to] += value;\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0),\"Invalid to address\");\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0),\"Invalid address\");\r\n        require(owner != address(0),\"Invalid address\");\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0),\"Invalid account\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public{\r\n        _burn(msg.sender, value);\r\n        userBurnTokens[msg.sender] += value;\r\n    }\r\n    \r\n\r\n    //Buy new tokens functions \r\n    function buyTokensByUSDC(uint256 valueUSDC, string) checkHardCaps((valueUSDC.mul(priceUsdc)).mul(1000000), msg.sender) public{\r\n        iUSDC.transferFrom(msg.sender,address(this),valueUSDC);\r\n        _mintNewTokens(msg.sender, (valueUSDC.mul(priceUsdc)).mul(1000000));\r\n        totalMinted += (valueUSDC.mul(priceUsdc)).mul(1000000);\r\n        userPurchase[msg.sender] += (valueUSDC.mul(priceUsdc)).mul(1000000);\r\n    }\r\n\r\n    //Buy new tokens functions \r\n    function buyTokensByMatic(string) payable checkHardCaps((priceMatic.mul(msg.value)).div(1000000), msg.sender) external {\r\n        _mintNewTokens(msg.sender, (priceMatic.mul(msg.value)).div(1000000));\r\n        totalMinted += (priceMatic.mul(msg.value)).div(1000000);\r\n        userPurchase[msg.sender] += (priceMatic.mul(msg.value)).div(1000000);\r\n    }\r\n\r\n    //Owner set price USDC\r\n    function setUSDCPrice(uint256 _price) onlyOwner public{\r\n        priceUsdc = _price;\r\n    }\r\n\r\n    //Owner set price Matic\r\n    function setMaticPrice(uint256 _MaticPrice) onlyOwner public{\r\n        priceMatic = _MaticPrice;\r\n    }\r\n    //Owner set hardCap \r\n    function setHardcap(uint256 _hardCap) onlyOwner public{\r\n        hardcap = _hardCap;\r\n    }\r\n\r\n    //Owner set userHardCapCheck\r\n    function setUserHardCap(uint256 _userMinCap, uint256 _userHardCap) onlyOwner public{\r\n        userHardCap = _userHardCap;\r\n        minMint = _userMinCap;\r\n    }\r\n\r\n    //Owner can withdraw the USDC\r\n    function withdrawUSDC(uint256 _amount) onlyOwner external returns(bool){\r\n        iUSDC.transfer( msg.sender,_amount);\r\n        return true;\r\n    }\r\n\r\n    //Ower can withdraw the Matic\r\n      function withdrawMatic(uint256 _amount) onlyOwner external {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    //Get purchased by user \r\n    function getUserTokens(address _userAddress) public view returns(uint256){\r\n        return userPurchase[_userAddress];\r\n    }\r\n\r\n\r\n    //Functions to manage claim for the users whitelisted by the admin \r\n    function whitelistForClaim(address[]  _userAddress, uint256[]  _amount) onlyOwner external returns(bool){\r\n        require(_userAddress.length == _amount.length,\"Invalid Array\");\r\n        require(_userAddress.length < 100, \"Array too long, transaction may fail\");\r\n        uint256 count = _userAddress.length;\r\n        for (uint256 i = 0; i < count; i++){\r\n        whitelistClaimUsers[_userAddress[i]] += _amount[i];\r\n        totalMinted += _amount[i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //whitelisted users can claim token \r\n    function claimTokens() external returns(bool){\r\n        require(whitelistClaimUsers[msg.sender] > 0, \"Not sufficient tokens to claim\");\r\n        require(unlockingTime < block.timestamp, \"Unlock time not reached\");\r\n        claimedAmountByAddress[msg.sender] = whitelistClaimUsers[msg.sender];\r\n        _mintNewTokens(msg.sender,whitelistClaimUsers[msg.sender]);\r\n        userPurchase[msg.sender] += whitelistClaimUsers[msg.sender];\r\n        whitelistClaimUsers[msg.sender] = 0;\r\n        return true;\r\n    }\r\n\r\n    //Get claim history by the user address \r\n    function getClaimHistory(address _userAddress) view external returns(uint256){\r\n        return claimedAmountByAddress[_userAddress];\r\n    }\r\n    \r\n    //Check the available amount of tokens to claim\r\n    function checkClaimabkleTokens(address _userAddress) view external returns(uint256){\r\n        return whitelistClaimUsers[_userAddress];\r\n    }\r\n\r\n    //set view price by admin\r\n    function addPrices(uint256 _usdc, uint256 _matic) onlyOwner external returns(bool){\r\n        usdcViewPrice = _usdc;\r\n        maticViewPrice = _matic;\r\n        return true;\r\n    }\r\n\r\n    //Additional functions for display purpose on the frontend application\r\n    //check price for USDC and MATIC\r\n    function checkPrice() view public returns(uint256 usdc, uint256 matic){\r\n        return (usdcViewPrice,maticViewPrice);\r\n    }\r\n\r\n    //Min and Max for purchase\r\n    function checkMinMaxToBuy() view public returns(uint256 min, uint256 max){\r\n        return (minMint, userHardCap);\r\n    }\r\n\r\n    //User burned tokens by address\r\n    function checkUserBurnTokens(address _userAddress) view public returns(uint256){\r\n        return userBurnTokens[_userAddress];\r\n    }\r\n\r\n    //Admin will set the unlocking time of claim functionality\r\n    function setClaimUnlockTime(uint256 _unlockingTime) external onlyOwner returns(bool){\r\n        unlockingTime = _unlockingTime;\r\n        return true;\r\n    }\r\n\r\n    function setKCHViewPrice(uint256 _KCHViewPrice) external onlyOwner returns(bool){\r\n        KCHViewPrice = _KCHViewPrice;\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unlockingTime\",\"type\":\"uint256\"}],\"name\":\"setClaimUnlockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceUsdc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceMatic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"buyTokensByMatic\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueUSDC\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"name\":\"buyTokensByUSDC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_KCHViewPrice\",\"type\":\"uint256\"}],\"name\":\"setKCHViewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setUSDCPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KCHViewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"whitelistForClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkUserBurnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userMinCap\",\"type\":\"uint256\"},{\"name\":\"_userHardCap\",\"type\":\"uint256\"}],\"name\":\"setUserHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkPrice\",\"outputs\":[{\"name\":\"usdc\",\"type\":\"uint256\"},{\"name\":\"matic\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdc\",\"type\":\"uint256\"},{\"name\":\"_matic\",\"type\":\"uint256\"}],\"name\":\"addPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmountByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getClaimHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_iUSDCAddress\",\"type\":\"address\"}],\"name\":\"setUSDCAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistClaimUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBurnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMatic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkClaimabkleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdcViewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkMinMaxToBuy\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maticViewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_MaticPrice\",\"type\":\"uint256\"}],\"name\":\"setMaticPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Kichee", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000162b475abe2baea51050fd403d71cc8b0212c59d00000000000000000000000000000000000000000000000000000000000000064b6963686565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b43480000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d348a80a3b32fe6740e661bc2e2c4f56da98e0fc53940ed6ef23d66b08edd0d9"}