{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Errors/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nerror AlreadyInitialized();\\r\\nerror CannotAuthoriseSelf();\\r\\nerror CannotBridgeToSameNetwork();\\r\\nerror ContractCallNotAllowed();\\r\\nerror CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount);\\r\\nerror ExternalCallFailed();\\r\\nerror InformationMismatch();\\r\\nerror InsufficientBalance(uint256 required, uint256 balance);\\r\\nerror InvalidAmount();\\r\\nerror InvalidCallData();\\r\\nerror InvalidConfig();\\r\\nerror InvalidContract();\\r\\nerror InvalidDestinationChain();\\r\\nerror InvalidFallbackAddress();\\r\\nerror InvalidReceiver();\\r\\nerror InvalidSendingToken();\\r\\nerror NativeAssetNotSupported();\\r\\nerror NativeAssetTransferFailed();\\r\\nerror NoSwapDataProvided();\\r\\nerror NoSwapFromZeroBalance();\\r\\nerror NotAContract();\\r\\nerror NotInitialized();\\r\\nerror NoTransferToNullAddress();\\r\\nerror NullAddrIsNotAnERC20Token();\\r\\nerror NullAddrIsNotAValidSpender();\\r\\nerror OnlyContractOwner();\\r\\nerror RecoveryAddressCannotBeZero();\\r\\nerror ReentrancyError();\\r\\nerror TokenNotSupported();\\r\\nerror UnAuthorized();\\r\\nerror UnsupportedChainId(uint256 chainId);\\r\\nerror ZeroAmount();\\r\\nerror TokenAddressIsZero();\\r\\nerror ZeroPostSwapBalance();\\r\\nerror NativeValueWithERC();\\r\\nerror InvalidBridgeConfigLength();\\r\\nerror InvalidCaller();\\r\\nerror CannotDepositNativeToken();\\r\\nerror NotEnoughBalance(uint256 requested, uint256 available);\\r\\nerror IsNotOwner();\\r\\n\"\r\n    },\r\n    \"src/Helpers/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title Reentrancy Guard\\r\\n/// @author LI.FI (https://li.fi)\\r\\n/// @notice Abstract contract to provide protection against reentrancy\\r\\nabstract contract ReentrancyGuard {\\r\\n\\t/// Storage ///\\r\\n\\r\\n\\tbytes32 private constant NAMESPACE = keccak256(\\\"com.kana.reentrancyguard\\\");\\r\\n\\r\\n\\t/// Types ///\\r\\n\\r\\n\\tstruct ReentrancyStorage {\\r\\n\\t\\tuint256 status;\\r\\n\\t}\\r\\n\\r\\n\\t/// Errors ///\\r\\n\\r\\n\\terror ReentrancyError();\\r\\n\\r\\n\\t/// Constants ///\\r\\n\\r\\n\\tuint256 private constant _NOT_ENTERED = 0;\\r\\n\\tuint256 private constant _ENTERED = 1;\\r\\n\\r\\n\\t/// Modifiers ///\\r\\n\\r\\n\\tmodifier nonReentrant() {\\r\\n\\t\\tReentrancyStorage storage s = reentrancyStorage();\\r\\n\\t\\tif (s.status == _ENTERED) revert ReentrancyError();\\r\\n\\t\\ts.status = _ENTERED;\\r\\n\\t\\t_;\\r\\n\\t\\ts.status = _NOT_ENTERED;\\r\\n\\t}\\r\\n\\r\\n\\t/// Private Methods ///\\r\\n\\r\\n\\t/// @dev fetch local storage\\r\\n\\tfunction reentrancyStorage() private pure returns (ReentrancyStorage storage data) {\\r\\n\\t\\tbytes32 position = NAMESPACE;\\r\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tdata.slot := position\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Helpers/TransferrableOwnership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {IERC173} from \\\"../Interfaces/IERC173.sol\\\";\\r\\nimport {LibAsset} from \\\"../Libraries/LibAsset.sol\\\";\\r\\n\\r\\ncontract TransferrableOwnership is IERC173 {\\r\\n\\taddress public owner;\\r\\n\\taddress public pendingOwner;\\r\\n\\r\\n\\t/// Errors ///\\r\\n\\terror UnAuthorized();\\r\\n\\terror NoNullOwner();\\r\\n\\terror NewOwnerMustNotBeSelf();\\r\\n\\terror NoPendingOwnershipTransfer();\\r\\n\\terror NotPendingOwner();\\r\\n\\r\\n\\t/// Events ///\\r\\n\\tevent OwnershipTransferRequested(address indexed _from, address indexed _to);\\r\\n\\r\\n\\tconstructor(address initialOwner) {\\r\\n\\t\\towner = initialOwner;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\tif (msg.sender != owner) revert UnAuthorized();\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Initiates transfer of ownership to a new address\\r\\n\\t/// @param _newOwner the address to transfer ownership to\\r\\n\\tfunction transferOwnership(address _newOwner) external onlyOwner {\\r\\n\\t\\tif (_newOwner == LibAsset.NULL_ADDRESS) revert NoNullOwner();\\r\\n\\t\\tif (_newOwner == msg.sender) revert NewOwnerMustNotBeSelf();\\r\\n\\t\\tpendingOwner = _newOwner;\\r\\n\\t\\temit OwnershipTransferRequested(msg.sender, pendingOwner);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Cancel transfer of ownership\\r\\n\\tfunction cancelOwnershipTransfer() external onlyOwner {\\r\\n\\t\\tif (pendingOwner == LibAsset.NULL_ADDRESS) revert NoPendingOwnershipTransfer();\\r\\n\\t\\tpendingOwner = LibAsset.NULL_ADDRESS;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Confirms transfer of ownership to the calling address (msg.sender)\\r\\n\\tfunction confirmOwnershipTransfer() external {\\r\\n\\t\\taddress _pendingOwner = pendingOwner;\\r\\n\\t\\tif (msg.sender != _pendingOwner) revert NotPendingOwner();\\r\\n\\t\\temit OwnershipTransferred(owner, _pendingOwner);\\r\\n\\t\\towner = _pendingOwner;\\r\\n\\t\\tpendingOwner = LibAsset.NULL_ADDRESS;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\n/* is ERC165 */\\r\\ninterface IERC173 {\\r\\n\\t/// @dev This emits when ownership of a contract changes.\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/// @notice Get the address of the owner\\r\\n\\t/// @return owner_ The address of the owner.\\r\\n\\tfunction owner() external view returns (address owner_);\\r\\n\\r\\n\\t/// @notice Set the address of the new owner of the contract\\r\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n\\t/// @param _newOwner The address of the new owner of the contract\\r\\n\\tfunction transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {LibSwap} from \\\"../Libraries/LibSwap.sol\\\";\\r\\n\\r\\n/// @title Interface for Executor\\r\\n/// @author KANA\\r\\ninterface IExecutor {\\r\\n\\t/// @notice Performs a swap before completing a cross-chain transaction\\r\\n\\t/// @param _transactionId the transaction id associated with the operation\\r\\n\\t/// @param _swapData array of data needed for swaps\\r\\n\\t/// @param transferredAssetId token received from the other chain\\r\\n\\t/// @param receiver address that will receive tokens in the end\\r\\n\\tfunction swapAndCompleteBridgeTokens(\\r\\n\\t\\tbytes32 _transactionId,\\r\\n\\t\\tLibSwap.SwapData[] calldata _swapData,\\r\\n\\t\\taddress transferredAssetId,\\r\\n\\t\\taddress payable receiver\\r\\n\\t) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/IKana.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IKana {\\n\\t/// Structs ///\\n\\n\\tstruct BridgeData {\\n\\t\\tbytes32 transactionId;\\n\\t\\tstring bridge;\\n\\t\\taddress integrator;\\n\\t\\taddress kanaWallet;\\n\\t\\taddress referrer;\\n\\t\\taddress sendingAssetId;\\n\\t\\taddress receiver;\\n\\t\\tuint256 minAmount;\\n\\t\\tuint256 destinationChainId;\\n\\t\\tbool hasSourceSwaps;\\n\\t\\tbool hasDestinationCall;\\n\\t\\tuint256 integratorFee;\\n\\t\\tuint256 kanaFee;\\n\\t}\\n\\n\\t/// Events ///\\n\\n\\tevent KanaTransferStarted(IKana.BridgeData bridgeData);\\n\\n\\tevent KanaTransferCompleted(\\n\\t\\tbytes32 indexed transactionId,\\n\\t\\taddress receivingAssetId,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tevent KanaTransferRecovered(\\n\\t\\tbytes32 indexed transactionId,\\n\\t\\taddress receivingAssetId,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\t\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/LZ/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IStargateReceiver {\\r\\n\\tfunction sgReceive(\\r\\n\\t\\tuint16 _srcChainId, // the remote chainId sending the tokens\\r\\n\\t\\tbytes memory _srcAddress, // the remote Bridge address\\r\\n\\t\\tuint256 _nonce,\\r\\n\\t\\taddress _token, // the token contract on the local chain\\r\\n\\t\\tuint256 amountLD, // the qty of local _token contract tokens\\r\\n\\t\\tbytes memory payload\\r\\n\\t) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/wormhole/ITokenBridge.sol\": {\r\n      \"content\": \"// contracts/Bridge.sol\\r\\n// SPDX-License-Identifier: Apache 2\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IWormhole.sol\\\";\\r\\n\\r\\ninterface ITokenBridge {\\r\\n\\tstruct Transfer {\\r\\n\\t\\tuint8 payloadID;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tbytes32 tokenAddress;\\r\\n\\t\\tuint16 tokenChain;\\r\\n\\t\\tbytes32 to;\\r\\n\\t\\tuint16 toChain;\\r\\n\\t\\tuint256 fee;\\r\\n\\t}\\r\\n\\r\\n\\tstruct TransferWithPayload {\\r\\n\\t\\tuint8 payloadID;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tbytes32 tokenAddress;\\r\\n\\t\\tuint16 tokenChain;\\r\\n\\t\\tbytes32 to;\\r\\n\\t\\tuint16 toChain;\\r\\n\\t\\tbytes32 fromAddress;\\r\\n\\t\\tbytes payload;\\r\\n\\t}\\r\\n\\r\\n\\tstruct AssetMeta {\\r\\n\\t\\tuint8 payloadID;\\r\\n\\t\\tbytes32 tokenAddress;\\r\\n\\t\\tuint16 tokenChain;\\r\\n\\t\\tuint8 decimals;\\r\\n\\t\\tbytes32 symbol;\\r\\n\\t\\tbytes32 name;\\r\\n\\t}\\r\\n\\r\\n\\tstruct RegisterChain {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chainId;\\r\\n\\t\\tuint16 emitterChainID;\\r\\n\\t\\tbytes32 emitterAddress;\\r\\n\\t}\\r\\n\\r\\n\\tstruct UpgradeContract {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chainId;\\r\\n\\t\\tbytes32 newContract;\\r\\n\\t}\\r\\n\\r\\n\\tstruct RecoverChainId {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint256 evmChainId;\\r\\n\\t\\tuint16 newChainId;\\r\\n\\t}\\r\\n\\r\\n\\tevent ContractUpgraded(address indexed oldContract, address indexed newContract);\\r\\n\\r\\n\\tfunction _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\\r\\n\\r\\n\\tfunction attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction wrapAndTransferETH(\\r\\n\\t\\tuint16 recipientChain,\\r\\n\\t\\tbytes32 recipient,\\r\\n\\t\\tuint256 arbiterFee,\\r\\n\\t\\tuint32 nonce\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction wrapAndTransferETHWithPayload(\\r\\n\\t\\tuint16 recipientChain,\\r\\n\\t\\tbytes32 recipient,\\r\\n\\t\\tuint32 nonce,\\r\\n\\t\\tbytes memory payload\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction transferTokens(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint16 recipientChain,\\r\\n\\t\\tbytes32 recipient,\\r\\n\\t\\tuint256 arbiterFee,\\r\\n\\t\\tuint32 nonce\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction transferTokensWithPayload(\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint16 recipientChain,\\r\\n\\t\\tbytes32 recipient,\\r\\n\\t\\tuint32 nonce,\\r\\n\\t\\tbytes memory payload\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction updateWrapped(bytes memory encodedVm) external returns (address token);\\r\\n\\r\\n\\tfunction createWrapped(bytes memory encodedVm) external returns (address token);\\r\\n\\r\\n\\tfunction completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\r\\n\\r\\n\\tfunction completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\\r\\n\\r\\n\\tfunction completeTransfer(bytes memory encodedVm) external;\\r\\n\\r\\n\\tfunction completeTransferAndUnwrapETH(bytes memory encodedVm) external;\\r\\n\\r\\n\\tfunction encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\\r\\n\\r\\n\\tfunction encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\\r\\n\\r\\n\\tfunction encodeTransferWithPayload(\\r\\n\\t\\tTransferWithPayload memory transfer\\r\\n\\t) external pure returns (bytes memory encoded);\\r\\n\\r\\n\\tfunction parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\\r\\n\\r\\n\\tfunction parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\\r\\n\\r\\n\\tfunction parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\\r\\n\\r\\n\\tfunction parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\\r\\n\\r\\n\\tfunction governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\r\\n\\r\\n\\tfunction isInitialized(address impl) external view returns (bool);\\r\\n\\r\\n\\tfunction isTransferCompleted(bytes32 hash) external view returns (bool);\\r\\n\\r\\n\\tfunction wormhole() external view returns (IWormhole);\\r\\n\\r\\n\\tfunction chainId() external view returns (uint16);\\r\\n\\r\\n\\tfunction evmChainId() external view returns (uint256);\\r\\n\\r\\n\\tfunction isFork() external view returns (bool);\\r\\n\\r\\n\\tfunction governanceChainId() external view returns (uint16);\\r\\n\\r\\n\\tfunction governanceContract() external view returns (bytes32);\\r\\n\\r\\n\\tfunction wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\r\\n\\r\\n\\tfunction bridgeContracts(uint16 chainId_) external view returns (bytes32);\\r\\n\\r\\n\\tfunction tokenImplementation() external view returns (address);\\r\\n\\r\\n\\tfunction WETH() external view returns (IWETH);\\r\\n\\r\\n\\tfunction outstandingBridged(address token) external view returns (uint256);\\r\\n\\r\\n\\tfunction isWrappedAsset(address token) external view returns (bool);\\r\\n\\r\\n\\tfunction finality() external view returns (uint8);\\r\\n\\r\\n\\tfunction implementation() external view returns (address);\\r\\n\\r\\n\\tfunction initialize() external;\\r\\n\\r\\n\\tfunction registerChain(bytes memory encodedVM) external;\\r\\n\\r\\n\\tfunction upgrade(bytes memory encodedVM) external;\\r\\n\\r\\n\\tfunction submitRecoverChainId(bytes memory encodedVM) external;\\r\\n\\r\\n\\tfunction parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\\r\\n\\r\\n\\tfunction parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\\r\\n\\r\\n\\tfunction parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/wormhole/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IWETH {\\r\\n\\tfunction deposit() external payable;\\r\\n\\r\\n\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n\\tfunction withdraw(uint) external;\\r\\n\\r\\n\\tfunction approve(address to, uint value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/wormhole/IWormhole.sol\": {\r\n      \"content\": \"// contracts/Messages.sol\\r\\n// SPDX-License-Identifier: Apache 2\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWormhole {\\r\\n\\tstruct GuardianSet {\\r\\n\\t\\taddress[] keys;\\r\\n\\t\\tuint32 expirationTime;\\r\\n\\t}\\r\\n\\r\\n\\tstruct Signature {\\r\\n\\t\\tbytes32 r;\\r\\n\\t\\tbytes32 s;\\r\\n\\t\\tuint8 v;\\r\\n\\t\\tuint8 guardianIndex;\\r\\n\\t}\\r\\n\\r\\n\\tstruct VM {\\r\\n\\t\\tuint8 version;\\r\\n\\t\\tuint32 timestamp;\\r\\n\\t\\tuint32 nonce;\\r\\n\\t\\tuint16 emitterChainId;\\r\\n\\t\\tbytes32 emitterAddress;\\r\\n\\t\\tuint64 sequence;\\r\\n\\t\\tuint8 consistencyLevel;\\r\\n\\t\\tbytes payload;\\r\\n\\t\\tuint32 guardianSetIndex;\\r\\n\\t\\tSignature[] signatures;\\r\\n\\t\\tbytes32 hash;\\r\\n\\t}\\r\\n\\r\\n\\tstruct ContractUpgrade {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chain;\\r\\n\\t\\taddress newContract;\\r\\n\\t}\\r\\n\\r\\n\\tstruct GuardianSetUpgrade {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chain;\\r\\n\\t\\tGuardianSet newGuardianSet;\\r\\n\\t\\tuint32 newGuardianSetIndex;\\r\\n\\t}\\r\\n\\r\\n\\tstruct SetMessageFee {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chain;\\r\\n\\t\\tuint256 messageFee;\\r\\n\\t}\\r\\n\\r\\n\\tstruct TransferFees {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint16 chain;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tbytes32 recipient;\\r\\n\\t}\\r\\n\\r\\n\\tstruct RecoverChainId {\\r\\n\\t\\tbytes32 module;\\r\\n\\t\\tuint8 action;\\r\\n\\t\\tuint256 evmChainId;\\r\\n\\t\\tuint16 newChainId;\\r\\n\\t}\\r\\n\\r\\n\\tevent LogMessagePublished(\\r\\n\\t\\taddress indexed sender,\\r\\n\\t\\tuint64 sequence,\\r\\n\\t\\tuint32 nonce,\\r\\n\\t\\tbytes payload,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t);\\r\\n\\tevent ContractUpgraded(address indexed oldContract, address indexed newContract);\\r\\n\\tevent GuardianSetAdded(uint32 indexed index);\\r\\n\\r\\n\\tfunction publishMessage(\\r\\n\\t\\tuint32 nonce,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction initialize() external;\\r\\n\\r\\n\\tfunction parseAndVerifyVM(\\r\\n\\t\\tbytes calldata encodedVM\\r\\n\\t) external view returns (VM memory vm, bool valid, string memory reason);\\r\\n\\r\\n\\tfunction verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\r\\n\\r\\n\\tfunction verifySignatures(\\r\\n\\t\\tbytes32 hash,\\r\\n\\t\\tSignature[] memory signatures,\\r\\n\\t\\tGuardianSet memory guardianSet\\r\\n\\t) external pure returns (bool valid, string memory reason);\\r\\n\\r\\n\\tfunction parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\r\\n\\r\\n\\tfunction quorum(uint256 numGuardians) external pure returns (uint256 numSignaturesRequiredForQuorum);\\r\\n\\r\\n\\tfunction getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\r\\n\\r\\n\\tfunction getCurrentGuardianSetIndex() external view returns (uint32);\\r\\n\\r\\n\\tfunction getGuardianSetExpiry() external view returns (uint32);\\r\\n\\r\\n\\tfunction governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\r\\n\\r\\n\\tfunction isInitialized(address impl) external view returns (bool);\\r\\n\\r\\n\\tfunction chainId() external view returns (uint16);\\r\\n\\r\\n\\tfunction isFork() external view returns (bool);\\r\\n\\r\\n\\tfunction governanceChainId() external view returns (uint16);\\r\\n\\r\\n\\tfunction governanceContract() external view returns (bytes32);\\r\\n\\r\\n\\tfunction messageFee() external view returns (uint256);\\r\\n\\r\\n\\tfunction evmChainId() external view returns (uint256);\\r\\n\\r\\n\\tfunction nextSequence(address emitter) external view returns (uint64);\\r\\n\\r\\n\\tfunction parseContractUpgrade(bytes memory encodedUpgrade) external pure returns (ContractUpgrade memory cu);\\r\\n\\r\\n\\tfunction parseGuardianSetUpgrade(bytes memory encodedUpgrade) external pure returns (GuardianSetUpgrade memory gsu);\\r\\n\\r\\n\\tfunction parseSetMessageFee(bytes memory encodedSetMessageFee) external pure returns (SetMessageFee memory smf);\\r\\n\\r\\n\\tfunction parseTransferFees(bytes memory encodedTransferFees) external pure returns (TransferFees memory tf);\\r\\n\\r\\n\\tfunction parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\r\\n\\r\\n\\tfunction submitContractUpgrade(bytes memory _vm) external;\\r\\n\\r\\n\\tfunction submitSetMessageFee(bytes memory _vm) external;\\r\\n\\r\\n\\tfunction submitNewGuardianSet(bytes memory _vm) external;\\r\\n\\r\\n\\tfunction submitTransferFees(bytes memory _vm) external;\\r\\n\\r\\n\\tfunction submitRecoverChainId(bytes memory _vm) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/wormhole/IWormholeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Interface for a contract which can receive Wormhole messages.\\r\\n */\\r\\ninterface IWormholeReceiver {\\r\\n\\t/**\\r\\n\\t * @notice When a `send` is performed with this contract as the target, this function will be\\r\\n\\t *     invoked.\\r\\n\\t *   To get the address that will invoke this contract, call the `getDeliveryAddress()` function\\r\\n\\t *     on this chain (the target chain)'s WormholeRelayer contract\\r\\n\\t *\\r\\n\\t * NOTE: This function should be restricted such that only `getDeliveryAddress()` can call it.\\r\\n\\t *\\r\\n\\t * We also recommend that this function:\\r\\n\\t *   - Stores all received `deliveryData.deliveryHash`s in a mapping `(bytes32 => bool)`, and\\r\\n\\t *       on every call, checks that deliveryData.deliveryHash has not already been stored in the\\r\\n\\t *       map (This is to prevent other users maliciously trying to relay the same message)\\r\\n\\t *   - Checks that `deliveryData.sourceChain` and `deliveryData.sourceAddress` are indeed who\\r\\n\\t *       you expect to have requested the calling of `send` or `forward` on the source chain\\r\\n\\t *\\r\\n\\t * The invocation of this function corresponding to the `send` request will have msg.value equal\\r\\n\\t *   to the receiverValue specified in the send request.\\r\\n\\t *\\r\\n\\t * If the invocation of this function reverts or exceeds the gas limit (`maxTransactionFee`)\\r\\n\\t *   specified by the send requester, this delivery will result in a `ReceiverFailure`.\\r\\n\\t *\\r\\n\\t * @param payload - an arbitrary message which was included in the delivery by the\\r\\n\\t *     requester.\\r\\n\\t * @param additionalVaas - Additional VAAs which were requested to be included in this delivery.\\r\\n\\t *   They are guaranteed to all be included and in the same order as was specified in the\\r\\n\\t *     delivery request.\\r\\n\\t * @param sourceAddress - the (wormhole format) address on the sending chain which requested\\r\\n\\t *     this delivery.\\r\\n\\t * @param sourceChain - the wormhole chain ID where this delivery was requested.\\r\\n\\t * @param deliveryHash - the VAA hash of the deliveryVAA.\\r\\n\\t *\\r\\n\\t * NOTE: These signedVaas are NOT verified by the Wormhole core contract prior to being provided\\r\\n\\t *     to this call. Always make sure `parseAndVerify()` is called on the Wormhole core contract\\r\\n\\t *     before trusting the content of a raw VAA, otherwise the VAA may be invalid or malicious.\\r\\n\\t */\\r\\n\\tfunction receiveWormholeMessages(\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tbytes[] memory additionalVaas,\\r\\n\\t\\tbytes32 sourceAddress,\\r\\n\\t\\tuint16 sourceChain,\\r\\n\\t\\tbytes32 deliveryHash\\r\\n\\t) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Interfaces/wormhole/IWormholeRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice VaaKey identifies a wormhole message\\r\\n *\\r\\n * @custom:member chainId - only specified if `infoType == VaaKeyType.EMITTER_SEQUENCE`\\r\\n * @custom:member emitterAddress - only specified if `infoType = VaaKeyType.EMITTER_SEQUENCE`\\r\\n * @custom:member sequence - only specified if `infoType = VaaKeyType.EMITTER_SEQUENCE`\\r\\n */\\r\\nstruct VaaKey {\\r\\n\\tuint16 chainId;\\r\\n\\tbytes32 emitterAddress;\\r\\n\\tuint64 sequence;\\r\\n}\\r\\n\\r\\ninterface IWormholeRelayerBase {\\r\\n\\tevent SendEvent(uint64 indexed sequence, uint256 deliveryQuote, uint256 paymentForExtraReceiverValue);\\r\\n\\r\\n\\tfunction getRegisteredWormholeRelayerContract(uint16 chainId) external view returns (bytes32);\\r\\n}\\r\\n\\r\\n/**\\r\\n * IWormholeRelayerSend\\r\\n * @notice Users may use this interface to have payloads and/or wormhole VAAs\\r\\n *   relayed to destination contract(s) of their choice.\\r\\n */\\r\\ninterface IWormholeRelayerSend is IWormholeRelayerBase {\\r\\n\\tfunction sendPayloadToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction sendPayloadToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\taddress refundAddress\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction sendVaasToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tVaaKey[] memory vaaKeys\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction sendVaasToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tVaaKey[] memory vaaKeys,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\taddress refundAddress\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction sendToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 paymentForExtraReceiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\taddress refundAddress,\\r\\n\\t\\taddress deliveryProviderAddress,\\r\\n\\t\\tVaaKey[] memory vaaKeys,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction send(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tbytes32 targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 paymentForExtraReceiverValue,\\r\\n\\t\\tbytes memory encodedExecutionParameters,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\tbytes32 refundAddress,\\r\\n\\t\\taddress deliveryProviderAddress,\\r\\n\\t\\tVaaKey[] memory vaaKeys,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction forwardPayloadToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction forwardVaasToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tVaaKey[] memory vaaKeys\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction forwardToEvm(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\taddress targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 paymentForExtraReceiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\taddress refundAddress,\\r\\n\\t\\taddress deliveryProviderAddress,\\r\\n\\t\\tVaaKey[] memory vaaKeys,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction forward(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tbytes32 targetAddress,\\r\\n\\t\\tbytes memory payload,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 paymentForExtraReceiverValue,\\r\\n\\t\\tbytes memory encodedExecutionParameters,\\r\\n\\t\\tuint16 refundChain,\\r\\n\\t\\tbytes32 refundAddress,\\r\\n\\t\\taddress deliveryProviderAddress,\\r\\n\\t\\tVaaKey[] memory vaaKeys,\\r\\n\\t\\tuint8 consistencyLevel\\r\\n\\t) external payable;\\r\\n\\r\\n\\tfunction resendToEvm(\\r\\n\\t\\tVaaKey memory deliveryVaaKey,\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 newReceiverValue,\\r\\n\\t\\tuint256 newGasLimit,\\r\\n\\t\\taddress newDeliveryProviderAddress\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction resend(\\r\\n\\t\\tVaaKey memory deliveryVaaKey,\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 newReceiverValue,\\r\\n\\t\\tbytes memory newEncodedExecutionParameters,\\r\\n\\t\\taddress newDeliveryProviderAddress\\r\\n\\t) external payable returns (uint64 sequence);\\r\\n\\r\\n\\tfunction quoteEVMDeliveryPrice(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit\\r\\n\\t) external view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\\r\\n\\r\\n\\tfunction quoteEVMDeliveryPrice(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tuint256 gasLimit,\\r\\n\\t\\taddress deliveryProviderAddress\\r\\n\\t) external view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused);\\r\\n\\r\\n\\tfunction quoteDeliveryPrice(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 receiverValue,\\r\\n\\t\\tbytes memory encodedExecutionParameters,\\r\\n\\t\\taddress deliveryProviderAddress\\r\\n\\t) external view returns (uint256 nativePriceQuote, bytes memory encodedExecutionInfo);\\r\\n\\r\\n\\tfunction quoteNativeForChain(\\r\\n\\t\\tuint16 targetChain,\\r\\n\\t\\tuint256 currentChainAmount,\\r\\n\\t\\taddress deliveryProviderAddress\\r\\n\\t) external view returns (uint256 targetChainAmount);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Returns the address of the current default delivery provider\\r\\n\\t * @return deliveryProvider The address of (the default delivery provider)'s contract on this source\\r\\n\\t *   chain. This must be a contract that implements IDeliveryProvider.\\r\\n\\t */\\r\\n\\tfunction getDefaultDeliveryProvider() external view returns (address deliveryProvider);\\r\\n}\\r\\n\\r\\ninterface IWormholeRelayerDelivery is IWormholeRelayerBase {\\r\\n\\tenum DeliveryStatus {\\r\\n\\t\\tSUCCESS,\\r\\n\\t\\tRECEIVER_FAILURE,\\r\\n\\t\\tFORWARD_REQUEST_FAILURE,\\r\\n\\t\\tFORWARD_REQUEST_SUCCESS\\r\\n\\t}\\r\\n\\r\\n\\tenum RefundStatus {\\r\\n\\t\\tREFUND_SENT,\\r\\n\\t\\tREFUND_FAIL,\\r\\n\\t\\tCROSS_CHAIN_REFUND_SENT,\\r\\n\\t\\tCROSS_CHAIN_REFUND_FAIL_PROVIDER_NOT_SUPPORTED,\\r\\n\\t\\tCROSS_CHAIN_REFUND_FAIL_NOT_ENOUGH\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @custom:member recipientContract - The target contract address\\r\\n\\t * @custom:member sourceChain - The chain which this delivery was requested from (in wormhole\\r\\n\\t *     ChainID format)\\r\\n\\t * @custom:member sequence - The wormhole sequence number of the delivery VAA on the source chain\\r\\n\\t *     corresponding to this delivery request\\r\\n\\t * @custom:member deliveryVaaHash - The hash of the delivery VAA corresponding to this delivery\\r\\n\\t *     request\\r\\n\\t * @custom:member gasUsed - The amount of gas that was used to call your target contract (and, if\\r\\n\\t *     there was a forward, to ensure that there were enough funds to complete the forward)\\r\\n\\t * @custom:member status:\\r\\n\\t *   - RECEIVER_FAILURE, if the target contract reverts\\r\\n\\t *   - SUCCESS, if the target contract doesn't revert and no forwards were requested\\r\\n\\t *   - FORWARD_REQUEST_FAILURE, if the target contract doesn't revert, forwards were requested,\\r\\n\\t *       but provided/leftover funds were not sufficient to cover them all\\r\\n\\t *   - FORWARD_REQUEST_SUCCESS, if the target contract doesn't revert and all forwards are covered\\r\\n\\t * @custom:member additionalStatusInfo:\\r\\n\\t *   - If status is SUCCESS or FORWARD_REQUEST_SUCCESS, then this is empty.\\r\\n\\t *   - If status is RECEIVER_FAILURE, this is `RETURNDATA_TRUNCATION_THRESHOLD` bytes of the\\r\\n\\t *       return data (i.e. potentially truncated revert reason information).\\r\\n\\t *   - If status is FORWARD_REQUEST_FAILURE, this is also the revert data - the reason the forward failed\\r\\n\\t *     will be either an encoded Cancelled, DeliveryProviderReverted, or DeliveryProviderPaymentFailed error\\r\\n\\t * @custom:member refundStatus - Result of the refund. REFUND_SUCCESS or REFUND_FAIL are for\\r\\n\\t *     refunds where targetChain=refundChain; the others are for targetChain!=refundChain,\\r\\n\\t *     where a cross chain refund is necessary\\r\\n\\t * @custom:member overridesInfo:\\r\\n\\t *   - If not an override: empty bytes array\\r\\n\\t *   - Otherwise: An encoded `DeliveryOverride`\\r\\n\\t */\\r\\n\\tevent Delivery(\\r\\n\\t\\taddress indexed recipientContract,\\r\\n\\t\\tuint16 indexed sourceChain,\\r\\n\\t\\tuint64 indexed sequence,\\r\\n\\t\\tbytes32 deliveryVaaHash,\\r\\n\\t\\tDeliveryStatus status,\\r\\n\\t\\tuint256 gasUsed,\\r\\n\\t\\tRefundStatus refundStatus,\\r\\n\\t\\tbytes additionalStatusInfo,\\r\\n\\t\\tbytes overridesInfo\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice The relay provider calls `deliver` to relay messages as described by one delivery instruction\\r\\n\\t *\\r\\n\\t * The relay provider must pass in the specified (by VaaKeys[]) signed wormhole messages (VAAs) from the source chain\\r\\n\\t * as well as the signed wormhole message with the delivery instructions (the delivery VAA)\\r\\n\\t *\\r\\n\\t * The messages will be relayed to the target address (with the specified gas limit and receiver value) iff the following checks are met:\\r\\n\\t * - the delivery VAA has a valid signature\\r\\n\\t * - the delivery VAA's emitter is one of these WormholeRelayer contracts\\r\\n\\t * - the delivery instruction container in the delivery VAA was fully funded\\r\\n\\t * - msg.sender is the permissioned address allowed to execute this instruction\\r\\n\\t * - the relay provider passed in at least enough of this chain's currency as msg.value (enough meaning the maximum possible refund)\\r\\n\\t * - the instruction's target chain is this chain\\r\\n\\t * - the relayed signed VAAs match the descriptions in container.messages (the VAA hashes match, or the emitter address, sequence number pair matches, depending on the description given)\\r\\n\\t *\\r\\n\\t * @param encodedVMs - An array of signed wormhole messages (all from the same source chain\\r\\n\\t *     transaction)\\r\\n\\t * @param encodedDeliveryVAA - Signed wormhole message from the source chain's WormholeRelayer\\r\\n\\t *     contract with payload being the encoded delivery instruction container\\r\\n\\t * @param relayerRefundAddress - The address to which any refunds to the relay provider\\r\\n\\t *     should be sent\\r\\n\\t * @param deliveryOverrides - Optional overrides field which must be either an empty bytes array or\\r\\n\\t *     an encoded DeliveryOverride struct\\r\\n\\t */\\r\\n\\tfunction deliver(\\r\\n\\t\\tbytes[] memory encodedVMs,\\r\\n\\t\\tbytes memory encodedDeliveryVAA,\\r\\n\\t\\taddress payable relayerRefundAddress,\\r\\n\\t\\tbytes memory deliveryOverrides\\r\\n\\t) external payable;\\r\\n}\\r\\n\\r\\ninterface IWormholeRelayer is IWormholeRelayerDelivery, IWormholeRelayerSend {}\\r\\n\\r\\n/*\\r\\n *  Errors thrown by IWormholeRelayer contract\\r\\n */\\r\\n\\r\\n// Bound chosen by the following formula: `memoryWord * 4 + selectorSize`.\\r\\n// This means that an error identifier plus four fixed size arguments should be available to developers.\\r\\n// In the case of a `require` revert with error message, this should provide 2 memory word's worth of data.\\r\\nuint256 constant RETURNDATA_TRUNCATION_THRESHOLD = 132;\\r\\n\\r\\n//When msg.value was not equal to (one wormhole message fee) + `maxTransactionFee` + `receiverValue`\\r\\nerror InvalidMsgValue(uint256 msgValue, uint256 totalFee);\\r\\n\\r\\nerror RequestedGasLimitTooLow();\\r\\n\\r\\nerror DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId);\\r\\nerror DeliveryProviderCannotReceivePayment();\\r\\n\\r\\n//When calling `forward()` on the WormholeRelayer if no delivery is in progress\\r\\nerror NoDeliveryInProgress();\\r\\n//When calling `delivery()` a second time even though a delivery is already in progress\\r\\nerror ReentrantDelivery(address msgSender, address lockedBy);\\r\\n//When any other contract but the delivery target calls `forward()` on the WormholeRelayer while a\\r\\n//  delivery is in progress\\r\\nerror ForwardRequestFromWrongAddress(address msgSender, address deliveryTarget);\\r\\n\\r\\nerror InvalidPayloadId(uint8 parsed, uint8 expected);\\r\\nerror InvalidPayloadLength(uint256 received, uint256 expected);\\r\\nerror InvalidVaaKeyType(uint8 parsed);\\r\\n\\r\\nerror InvalidDeliveryVaa(string reason);\\r\\n//When the delivery VAA (signed wormhole message with delivery instructions) was not emitted by the\\r\\n//  registered WormholeRelayer contract\\r\\nerror InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId);\\r\\nerror VaaKeysLengthDoesNotMatchVaasLength(uint256 keys, uint256 vaas);\\r\\nerror VaaKeysDoNotMatchVaas(uint8 index);\\r\\n//When someone tries to call an external function of the WormholeRelayer that is only intended to be\\r\\n//  called by the WormholeRelayer itself (to allow retroactive reverts for atomicity)\\r\\nerror RequesterNotWormholeRelayer();\\r\\n\\r\\n//When trying to relay a `DeliveryInstruction` to any other chain but the one it was specified for\\r\\nerror TargetChainIsNotThisChain(uint16 targetChain);\\r\\nerror ForwardNotSufficientlyFunded(uint256 amountOfFunds, uint256 amountOfFundsNeeded);\\r\\n//When a `DeliveryOverride` contains a gas limit that's less than the original\\r\\nerror InvalidOverrideGasLimit();\\r\\n//When a `DeliveryOverride` contains a receiver value that's less than the original\\r\\nerror InvalidOverrideReceiverValue();\\r\\n//When a `DeliveryOverride` contains a refund per gas unused that's less than the original\\r\\nerror InvalidOverrideRefundPerGasUnused();\\r\\n\\r\\n//When the relay provider doesn't pass in sufficient funds (i.e. msg.value does not cover the\\r\\n//  maximum possible refund to the user)\\r\\nerror InsufficientRelayerFunds(uint256 msgValue, uint256 minimum);\\r\\n\\r\\n//When a bytes32 field can't be converted into a 20 byte EVM address, because the 12 padding bytes\\r\\n//  are non-zero (duplicated from Utils.sol)\\r\\nerror NotAnEvmAddress(bytes32);\\r\\n\"\r\n    },\r\n    \"src/Libraries/LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\nimport {InsufficientBalance, NullAddrIsNotAnERC20Token, NullAddrIsNotAValidSpender, NoTransferToNullAddress, InvalidAmount, NativeValueWithERC, NativeAssetTransferFailed} from \\\"../Errors/GenericErrors.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {LibSwap} from \\\"./LibSwap.sol\\\";\\r\\n\\r\\n/// @title LibAsset\\r\\n/// @notice This library contains helpers for dealing with onchain transfers\\r\\n///         of assets, including accounting for the native asset `assetId`\\r\\n///         conventions and any noncompliant ERC20 transfers\\r\\nlibrary LibAsset {\\r\\n\\tuint256 private constant MAX_UINT = type(uint256).max;\\r\\n\\r\\n\\taddress internal constant NULL_ADDRESS = address(0);\\r\\n\\r\\n\\t/// @dev All native assets use the empty address for their asset id\\r\\n\\t///      by convention\\r\\n\\r\\n\\taddress internal constant NATIVE_ASSETID = NULL_ADDRESS; //address(0)\\r\\n\\r\\n\\t/// @notice Gets the balance of the inheriting contract for the given asset\\r\\n\\t/// @param assetId The asset identifier to get the balance of\\r\\n\\t/// @return Balance held by contracts using this library\\r\\n\\tfunction getOwnBalance(address assetId) internal view returns (uint256) {\\r\\n\\t\\treturn assetId == NATIVE_ASSETID ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfers ether from the inheriting contract to a given\\r\\n\\t///         recipient\\r\\n\\t/// @param recipient Address to send ether to\\r\\n\\t/// @param amount Amount to send to given recipient\\r\\n\\tfunction transferNativeAsset(address payable recipient, uint256 amount) private {\\r\\n\\t\\tif (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\\r\\n\\t\\tif (amount > address(this).balance) revert InsufficientBalance(amount, address(this).balance);\\r\\n\\t\\t// solhint-disable-next-line avoid-low-level-calls\\r\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n\\t\\tif (!success) revert NativeAssetTransferFailed();\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice If the current allowance is insufficient, the allowance for a given spender\\r\\n\\t/// is set to MAX_UINT.\\r\\n\\t/// @param assetId Token address to transfer\\r\\n\\t/// @param spender Address to give spend approval to\\r\\n\\t/// @param amount Amount to approve for spending\\r\\n\\tfunction maxApproveERC20(IERC20 assetId, address spender, uint256 amount) internal {\\r\\n\\t\\tif (address(assetId) == NATIVE_ASSETID) return;\\r\\n\\t\\tif (spender == NULL_ADDRESS) revert NullAddrIsNotAValidSpender();\\r\\n\\t\\tuint256 allowance = assetId.allowance(address(this), spender);\\r\\n\\r\\n\\t\\tif (allowance < amount) SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, MAX_UINT - allowance);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfers tokens from the inheriting contract to a given\\r\\n\\t///         recipient\\r\\n\\t/// @param assetId Token address to transfer\\r\\n\\t/// @param recipient Address to send token to\\r\\n\\t/// @param amount Amount to send to given recipient\\r\\n\\tfunction transferERC20(address assetId, address recipient, uint256 amount) private {\\r\\n\\t\\tif (isNativeAsset(assetId)) revert NullAddrIsNotAnERC20Token();\\r\\n\\t\\tuint256 assetBalance = IERC20(assetId).balanceOf(address(this));\\r\\n\\t\\tif (amount > assetBalance) revert InsufficientBalance(amount, assetBalance);\\r\\n\\t\\tSafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Transfers tokens from a sender to a given recipient\\r\\n\\t/// @param assetId Token address to transfer\\r\\n\\t/// @param from Address of sender/owner\\r\\n\\t/// @param to Address of recipient/spender\\r\\n\\t/// @param amount Amount to transfer from owner to spender\\r\\n\\tfunction transferFromERC20(address assetId, address from, address to, uint256 amount) internal {\\r\\n\\t\\tif (assetId == NATIVE_ASSETID) revert NullAddrIsNotAnERC20Token();\\r\\n\\t\\tif (to == NULL_ADDRESS) revert NoTransferToNullAddress();\\r\\n\\r\\n\\t\\tIERC20 asset = IERC20(assetId);\\r\\n\\t\\tuint256 prevBalance = asset.balanceOf(to);\\r\\n\\t\\tSafeERC20.safeTransferFrom(asset, from, to, amount);\\r\\n\\t\\tif (asset.balanceOf(to) - prevBalance != amount) revert InvalidAmount();\\r\\n\\t}\\r\\n\\r\\n\\tfunction depositAsset(address assetId, uint256 amount) internal {\\r\\n\\t\\tif (isNativeAsset(assetId)) {\\r\\n\\t\\t\\tif (msg.value < amount) revert InvalidAmount();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tif (amount == 0) revert InvalidAmount();\\r\\n\\t\\t\\tuint256 balance = IERC20(assetId).balanceOf(msg.sender);\\r\\n\\t\\t\\tif (balance < amount) revert InsufficientBalance(amount, balance);\\r\\n\\t\\t\\ttransferFromERC20(assetId, msg.sender, address(this), amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction depositAssets(LibSwap.SwapData[] calldata swaps) internal {\\r\\n\\t\\tfor (uint256 i = 0; i < swaps.length; ) {\\r\\n\\t\\t\\tLibSwap.SwapData memory swap = swaps[i];\\r\\n\\t\\t\\tif (swap.requiresDeposit) {\\r\\n\\t\\t\\t\\tdepositAsset(swap.sendingAssetId, swap.fromAmount);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tunchecked {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Determines whether the given assetId is the native asset\\r\\n\\t/// @param assetId The asset identifier to evaluate\\r\\n\\t/// @return Boolean indicating if the asset is the native asset\\r\\n\\tfunction isNativeAsset(address assetId) internal pure returns (bool) {\\r\\n\\t\\treturn assetId == NATIVE_ASSETID;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Wrapper function to transfer a given asset (native or erc20) to\\r\\n\\t///         some recipient. Should handle all non-compliant return value\\r\\n\\t///         tokens as well by using the SafeERC20 contract by open zeppelin.\\r\\n\\t/// @param assetId Asset id for transfer (address(0) for native asset,\\r\\n\\t///                token address for erc20s)\\r\\n\\t/// @param recipient Address to send asset to\\r\\n\\t/// @param amount Amount to send to given recipient\\r\\n\\tfunction transferAsset(address assetId, address payable recipient, uint256 amount) internal {\\r\\n\\t\\t(assetId == NATIVE_ASSETID)\\r\\n\\t\\t\\t? transferNativeAsset(recipient, amount)\\r\\n\\t\\t\\t: transferERC20(assetId, recipient, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Checks whether the given address is a contract and contains code\\r\\n\\tfunction isContract(address _contractAddr) internal view returns (bool) {\\r\\n\\t\\tuint256 size;\\r\\n\\t\\t// solhint-disable-next-line no-inline-assembly\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tsize := extcodesize(_contractAddr)\\r\\n\\t\\t}\\r\\n\\t\\treturn size > 0;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Libraries/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary LibBytes {\\r\\n\\t// solhint-disable no-inline-assembly\\r\\n\\r\\n\\t// LibBytes specific errors\\r\\n\\terror SliceOverflow();\\r\\n\\terror SliceOutOfBounds();\\r\\n\\terror AddressOutOfBounds();\\r\\n\\terror UintOutOfBounds();\\r\\n\\r\\n\\t// -------------------------\\r\\n\\r\\n\\tfunction concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\r\\n\\t\\tbytes memory tempBytes;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Get a location of some free memory and store it in tempBytes as\\r\\n\\t\\t\\t// Solidity does for memory variables.\\r\\n\\t\\t\\ttempBytes := mload(0x40)\\r\\n\\r\\n\\t\\t\\t// Store the length of the first bytes array at the beginning of\\r\\n\\t\\t\\t// the memory for tempBytes.\\r\\n\\t\\t\\tlet length := mload(_preBytes)\\r\\n\\t\\t\\tmstore(tempBytes, length)\\r\\n\\r\\n\\t\\t\\t// Maintain a memory counter for the current write location in the\\r\\n\\t\\t\\t// temp bytes array by adding the 32 bytes for the array length to\\r\\n\\t\\t\\t// the starting location.\\r\\n\\t\\t\\tlet mc := add(tempBytes, 0x20)\\r\\n\\t\\t\\t// Stop copying when the memory counter reaches the length of the\\r\\n\\t\\t\\t// first bytes array.\\r\\n\\t\\t\\tlet end := add(mc, length)\\r\\n\\r\\n\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t// Initialize a copy counter to the start of the _preBytes data,\\r\\n\\t\\t\\t\\t// 32 bytes into its memory.\\r\\n\\t\\t\\t\\tlet cc := add(_preBytes, 0x20)\\r\\n\\t\\t\\t} lt(mc, end) {\\r\\n\\t\\t\\t\\t// Increase both counters by 32 bytes each iteration.\\r\\n\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\tcc := add(cc, 0x20)\\r\\n\\t\\t\\t} {\\r\\n\\t\\t\\t\\t// Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n\\t\\t\\t\\t// at a time.\\r\\n\\t\\t\\t\\tmstore(mc, mload(cc))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Add the length of _postBytes to the current length of tempBytes\\r\\n\\t\\t\\t// and store it as the new length in the first 32 bytes of the\\r\\n\\t\\t\\t// tempBytes memory.\\r\\n\\t\\t\\tlength := mload(_postBytes)\\r\\n\\t\\t\\tmstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n\\t\\t\\t// Move the memory counter back from a multiple of 0x20 to the\\r\\n\\t\\t\\t// actual end of the _preBytes data.\\r\\n\\t\\t\\tmc := end\\r\\n\\t\\t\\t// Stop copying when the memory counter reaches the new combined\\r\\n\\t\\t\\t// length of the arrays.\\r\\n\\t\\t\\tend := add(mc, length)\\r\\n\\r\\n\\t\\t\\tfor {\\r\\n\\t\\t\\t\\tlet cc := add(_postBytes, 0x20)\\r\\n\\t\\t\\t} lt(mc, end) {\\r\\n\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\tcc := add(cc, 0x20)\\r\\n\\t\\t\\t} {\\r\\n\\t\\t\\t\\tmstore(mc, mload(cc))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// Update the free-memory pointer by padding our last write location\\r\\n\\t\\t\\t// to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n\\t\\t\\t// next 32 byte block, then round down to the nearest multiple of\\r\\n\\t\\t\\t// 32. If the sum of the length of the two arrays is zero then add\\r\\n\\t\\t\\t// one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n\\t\\t\\tmstore(\\r\\n\\t\\t\\t\\t0x40,\\r\\n\\t\\t\\t\\tand(\\r\\n\\t\\t\\t\\t\\tadd(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n\\t\\t\\t\\t\\tnot(31) // Round down to the nearest 32 bytes.\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempBytes;\\r\\n\\t}\\r\\n\\r\\n\\tfunction concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Read the first 32 bytes of _preBytes storage, which is the length\\r\\n\\t\\t\\t// of the array. (We don't need to use the offset into the slot\\r\\n\\t\\t\\t// because arrays use the entire slot.)\\r\\n\\t\\t\\tlet fslot := sload(_preBytes.slot)\\r\\n\\t\\t\\t// Arrays of 31 bytes or less have an even value in their slot,\\r\\n\\t\\t\\t// while longer arrays have an odd value. The actual length is\\r\\n\\t\\t\\t// the slot divided by two for odd values, and the lowest order\\r\\n\\t\\t\\t// byte divided by two for even values.\\r\\n\\t\\t\\t// If the slot is even, bitwise and the slot with 255 and divide by\\r\\n\\t\\t\\t// two to get the length. If the slot is odd, bitwise and the slot\\r\\n\\t\\t\\t// with -1 and divide by two.\\r\\n\\t\\t\\tlet slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n\\t\\t\\tlet mlength := mload(_postBytes)\\r\\n\\t\\t\\tlet newlength := add(slength, mlength)\\r\\n\\t\\t\\t// slength can contain both the length and contents of the array\\r\\n\\t\\t\\t// if length < 32 bytes so let's prepare for that\\r\\n\\t\\t\\t// v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n\\t\\t\\tswitch add(lt(slength, 32), lt(newlength, 32))\\r\\n\\t\\t\\tcase 2 {\\r\\n\\t\\t\\t\\t// Since the new array still fits in the slot, we just need to\\r\\n\\t\\t\\t\\t// update the contents of the slot.\\r\\n\\t\\t\\t\\t// uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n\\t\\t\\t\\tsstore(\\r\\n\\t\\t\\t\\t\\t_preBytes.slot,\\r\\n\\t\\t\\t\\t\\t// all the modifications to the slot are inside this\\r\\n\\t\\t\\t\\t\\t// next block\\r\\n\\t\\t\\t\\t\\tadd(\\r\\n\\t\\t\\t\\t\\t\\t// we can just add to the slot contents because the\\r\\n\\t\\t\\t\\t\\t\\t// bytes we want to change are the LSBs\\r\\n\\t\\t\\t\\t\\t\\tfslot,\\r\\n\\t\\t\\t\\t\\t\\tadd(\\r\\n\\t\\t\\t\\t\\t\\t\\tmul(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdiv(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// load the bytes from memory\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmload(add(_postBytes, 0x20)),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// zero all bytes to the right\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\texp(0x100, sub(32, mlength))\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// and now shift left the number of bytes to\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// leave space for the length in the slot\\r\\n\\t\\t\\t\\t\\t\\t\\t\\texp(0x100, sub(32, newlength))\\r\\n\\t\\t\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t\\t\\t\\t// increase length by the double of the memory\\r\\n\\t\\t\\t\\t\\t\\t\\t// bytes length\\r\\n\\t\\t\\t\\t\\t\\t\\tmul(mlength, 2)\\r\\n\\t\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcase 1 {\\r\\n\\t\\t\\t\\t// The stored value fits in the slot, but the combined value\\r\\n\\t\\t\\t\\t// will exceed it.\\r\\n\\t\\t\\t\\t// get the keccak hash to get the contents of the array\\r\\n\\t\\t\\t\\tmstore(0x0, _preBytes.slot)\\r\\n\\t\\t\\t\\tlet sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n\\t\\t\\t\\t// save new length\\r\\n\\t\\t\\t\\tsstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n\\t\\t\\t\\t// The contents of the _postBytes array start 32 bytes into\\r\\n\\t\\t\\t\\t// the structure. Our first read should obtain the `submod`\\r\\n\\t\\t\\t\\t// bytes that can fit into the unused space in the last word\\r\\n\\t\\t\\t\\t// of the stored array. To get this, we read 32 bytes starting\\r\\n\\t\\t\\t\\t// from `submod`, so the data we read overlaps with the array\\r\\n\\t\\t\\t\\t// contents by `submod` bytes. Masking the lowest-order\\r\\n\\t\\t\\t\\t// `submod` bytes allows us to add that value directly to the\\r\\n\\t\\t\\t\\t// stored value.\\r\\n\\r\\n\\t\\t\\t\\tlet submod := sub(32, slength)\\r\\n\\t\\t\\t\\tlet mc := add(_postBytes, submod)\\r\\n\\t\\t\\t\\tlet end := add(_postBytes, mlength)\\r\\n\\t\\t\\t\\tlet mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n\\t\\t\\t\\tsstore(\\r\\n\\t\\t\\t\\t\\tsc,\\r\\n\\t\\t\\t\\t\\tadd(\\r\\n\\t\\t\\t\\t\\t\\tand(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\r\\n\\t\\t\\t\\t\\t\\tand(mload(mc), mask)\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t)\\r\\n\\r\\n\\t\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t\\tsc := add(sc, 1)\\r\\n\\t\\t\\t\\t} lt(mc, end) {\\r\\n\\t\\t\\t\\t\\tsc := add(sc, 1)\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t} {\\r\\n\\t\\t\\t\\t\\tsstore(sc, mload(mc))\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmask := exp(0x100, sub(mc, end))\\r\\n\\r\\n\\t\\t\\t\\tsstore(sc, mul(div(mload(mc), mask), mask))\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\t// get the keccak hash to get the contents of the array\\r\\n\\t\\t\\t\\tmstore(0x0, _preBytes.slot)\\r\\n\\t\\t\\t\\t// Start copying to the last used word of the stored array.\\r\\n\\t\\t\\t\\tlet sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n\\t\\t\\t\\t// save new length\\r\\n\\t\\t\\t\\tsstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n\\t\\t\\t\\t// Copy over the first `submod` bytes of the new data as in\\r\\n\\t\\t\\t\\t// case 1 above.\\r\\n\\t\\t\\t\\tlet slengthmod := mod(slength, 32)\\r\\n\\t\\t\\t\\tlet submod := sub(32, slengthmod)\\r\\n\\t\\t\\t\\tlet mc := add(_postBytes, submod)\\r\\n\\t\\t\\t\\tlet end := add(_postBytes, mlength)\\r\\n\\t\\t\\t\\tlet mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n\\t\\t\\t\\tsstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n\\t\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t\\tsc := add(sc, 1)\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t} lt(mc, end) {\\r\\n\\t\\t\\t\\t\\tsc := add(sc, 1)\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t} {\\r\\n\\t\\t\\t\\t\\tsstore(sc, mload(mc))\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmask := exp(0x100, sub(mc, end))\\r\\n\\r\\n\\t\\t\\t\\tsstore(sc, mul(div(mload(mc), mask), mask))\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\r\\n\\t\\tif (_length + 31 < _length) revert SliceOverflow();\\r\\n\\t\\tif (_bytes.length < _start + _length) revert SliceOutOfBounds();\\r\\n\\r\\n\\t\\tbytes memory tempBytes;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tswitch iszero(_length)\\r\\n\\t\\t\\tcase 0 {\\r\\n\\t\\t\\t\\t// Get a location of some free memory and store it in tempBytes as\\r\\n\\t\\t\\t\\t// Solidity does for memory variables.\\r\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\r\\n\\r\\n\\t\\t\\t\\t// The first word of the slice result is potentially a partial\\r\\n\\t\\t\\t\\t// word read from the original array. To read it, we calculate\\r\\n\\t\\t\\t\\t// the length of that partial word and start copying that many\\r\\n\\t\\t\\t\\t// bytes into the array. The first word we copy will start with\\r\\n\\t\\t\\t\\t// data we don't care about, but the last `lengthmod` bytes will\\r\\n\\t\\t\\t\\t// land at the beginning of the contents of the new array. When\\r\\n\\t\\t\\t\\t// we're done copying, we overwrite the full first word with\\r\\n\\t\\t\\t\\t// the actual length of the slice.\\r\\n\\t\\t\\t\\tlet lengthmod := and(_length, 31)\\r\\n\\r\\n\\t\\t\\t\\t// The multiplication in the next line is necessary\\r\\n\\t\\t\\t\\t// because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n\\t\\t\\t\\t// the following copy loop was copying the origin's length\\r\\n\\t\\t\\t\\t// and then ending prematurely not copying everything it should.\\r\\n\\t\\t\\t\\tlet mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n\\t\\t\\t\\tlet end := add(mc, _length)\\r\\n\\r\\n\\t\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t\\t// The multiplication in the next line has the same exact purpose\\r\\n\\t\\t\\t\\t\\t// as the one above.\\r\\n\\t\\t\\t\\t\\tlet cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n\\t\\t\\t\\t} lt(mc, end) {\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t\\tcc := add(cc, 0x20)\\r\\n\\t\\t\\t\\t} {\\r\\n\\t\\t\\t\\t\\tmstore(mc, mload(cc))\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tmstore(tempBytes, _length)\\r\\n\\r\\n\\t\\t\\t\\t//update free-memory pointer\\r\\n\\t\\t\\t\\t//allocating the array padded to 32 bytes like the compiler does now\\r\\n\\t\\t\\t\\tmstore(0x40, and(add(mc, 31), not(31)))\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//if we want a zero-length slice let's just return a zero-length array\\r\\n\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\r\\n\\t\\t\\t\\t//zero out the 32 bytes slice we are about to return\\r\\n\\t\\t\\t\\t//we need to do it because Solidity does not garbage collect\\r\\n\\t\\t\\t\\tmstore(tempBytes, 0)\\r\\n\\r\\n\\t\\t\\t\\tmstore(0x40, add(tempBytes, 0x20))\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempBytes;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n\\t\\tif (_bytes.length < _start + 20) {\\r\\n\\t\\t\\trevert AddressOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\taddress tempAddress;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n\\t\\tif (_bytes.length < _start + 1) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint8 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n\\t\\tif (_bytes.length < _start + 2) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint16 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n\\t\\tif (_bytes.length < _start + 4) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint32 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n\\t\\tif (_bytes.length < _start + 8) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint64 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n\\t\\tif (_bytes.length < _start + 12) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint96 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n\\t\\tif (_bytes.length < _start + 16) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint128 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n\\t\\tif (_bytes.length < _start + 32) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tuint256 tempUint;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempUint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n\\t\\tif (_bytes.length < _start + 32) {\\r\\n\\t\\t\\trevert UintOutOfBounds();\\r\\n\\t\\t}\\r\\n\\t\\tbytes32 tempBytes32;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\ttempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn tempBytes32;\\r\\n\\t}\\r\\n\\r\\n\\tfunction equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n\\t\\tbool success = true;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tlet length := mload(_preBytes)\\r\\n\\r\\n\\t\\t\\t// if lengths don't match the arrays are not equal\\r\\n\\t\\t\\tswitch eq(length, mload(_postBytes))\\r\\n\\t\\t\\tcase 1 {\\r\\n\\t\\t\\t\\t// cb is a circuit breaker in the for loop since there's\\r\\n\\t\\t\\t\\t//  no said feature for inline assembly loops\\r\\n\\t\\t\\t\\t// cb = 1 - don't breaker\\r\\n\\t\\t\\t\\t// cb = 0 - break\\r\\n\\t\\t\\t\\tlet cb := 1\\r\\n\\r\\n\\t\\t\\t\\tlet mc := add(_preBytes, 0x20)\\r\\n\\t\\t\\t\\tlet end := add(mc, length)\\r\\n\\r\\n\\t\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t\\tlet cc := add(_postBytes, 0x20)\\r\\n\\t\\t\\t\\t\\t// the next line is the loop condition:\\r\\n\\t\\t\\t\\t\\t// while(uint256(mc < end) + cb == 2)\\r\\n\\t\\t\\t\\t} eq(add(lt(mc, end), cb), 2) {\\r\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t\\tcc := add(cc, 0x20)\\r\\n\\t\\t\\t\\t} {\\r\\n\\t\\t\\t\\t\\t// if any of these checks fails then arrays are not equal\\r\\n\\t\\t\\t\\t\\tif iszero(eq(mload(mc), mload(cc))) {\\r\\n\\t\\t\\t\\t\\t\\t// unsuccess:\\r\\n\\t\\t\\t\\t\\t\\tsuccess := 0\\r\\n\\t\\t\\t\\t\\t\\tcb := 0\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\t// unsuccess:\\r\\n\\t\\t\\t\\tsuccess := 0\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn success;\\r\\n\\t}\\r\\n\\r\\n\\tfunction equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\r\\n\\t\\tbool success = true;\\r\\n\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// we know _preBytes_offset is 0\\r\\n\\t\\t\\tlet fslot := sload(_preBytes.slot)\\r\\n\\t\\t\\t// Decode the length of the stored array like in concatStorage().\\r\\n\\t\\t\\tlet slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n\\t\\t\\tlet mlength := mload(_postBytes)\\r\\n\\r\\n\\t\\t\\t// if lengths don't match the arrays are not equal\\r\\n\\t\\t\\tswitch eq(slength, mlength)\\r\\n\\t\\t\\tcase 1 {\\r\\n\\t\\t\\t\\t// slength can contain both the length and contents of the array\\r\\n\\t\\t\\t\\t// if length < 32 bytes so let's prepare for that\\r\\n\\t\\t\\t\\t// v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n\\t\\t\\t\\tif iszero(iszero(slength)) {\\r\\n\\t\\t\\t\\t\\tswitch lt(slength, 32)\\r\\n\\t\\t\\t\\t\\tcase 1 {\\r\\n\\t\\t\\t\\t\\t\\t// blank the last byte which is the length\\r\\n\\t\\t\\t\\t\\t\\tfslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n\\t\\t\\t\\t\\t\\t\\t// unsuccess:\\r\\n\\t\\t\\t\\t\\t\\t\\tsuccess := 0\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\t\\t\\t// cb is a circuit breaker in the for loop since there's\\r\\n\\t\\t\\t\\t\\t\\t//  no said feature for inline assembly loops\\r\\n\\t\\t\\t\\t\\t\\t// cb = 1 - don't breaker\\r\\n\\t\\t\\t\\t\\t\\t// cb = 0 - break\\r\\n\\t\\t\\t\\t\\t\\tlet cb := 1\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// get the keccak hash to get the contents of the array\\r\\n\\t\\t\\t\\t\\t\\tmstore(0x0, _preBytes.slot)\\r\\n\\t\\t\\t\\t\\t\\tlet sc := keccak256(0x0, 0x20)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tlet mc := add(_postBytes, 0x20)\\r\\n\\t\\t\\t\\t\\t\\tlet end := add(mc, mlength)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// the next line is the loop condition:\\r\\n\\t\\t\\t\\t\\t\\t// while(uint256(mc < end) + cb == 2)\\r\\n\\t\\t\\t\\t\\t\\t// solhint-disable-next-line no-empty-blocks\\r\\n\\t\\t\\t\\t\\t\\tfor {\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t} eq(add(lt(mc, end), cb), 2) {\\r\\n\\t\\t\\t\\t\\t\\t\\tsc := add(sc, 1)\\r\\n\\t\\t\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\r\\n\\t\\t\\t\\t\\t\\t} {\\r\\n\\t\\t\\t\\t\\t\\t\\tif iszero(eq(sload(sc), mload(mc))) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t// unsuccess:\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tsuccess := 0\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcb := 0\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\t// unsuccess:\\r\\n\\t\\t\\t\\tsuccess := 0\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn success;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Libraries/LibSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {LibAsset} from \\\"./LibAsset.sol\\\";\\nimport {LibUtil} from \\\"./LibUtil.sol\\\";\\nimport {InvalidContract, NoSwapFromZeroBalance, InsufficientBalance} from \\\"../Errors/GenericErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary LibSwap {\\n\\tstruct SwapData {\\n\\t\\taddress callTo;\\n\\t\\taddress approveTo;\\n\\t\\taddress sendingAssetId;\\n\\t\\taddress receivingAssetId;\\n\\t\\tuint256 fromAmount;\\n\\t\\tbytes callData;\\n\\t\\tbool requiresDeposit;\\n\\t}\\n\\n\\tevent AssetSwapped(\\n\\t\\tbytes32 transactionId,\\n\\t\\taddress dex,\\n\\t\\taddress fromAssetId,\\n\\t\\taddress toAssetId,\\n\\t\\tuint256 fromAmount,\\n\\t\\tuint256 toAmount,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tfunction swap(bytes32 transactionId, SwapData calldata _swap) internal {\\n\\t\\tif (!LibAsset.isContract(_swap.callTo)) revert InvalidContract();\\n\\t\\tuint256 fromAmount = _swap.fromAmount;\\n\\t\\tif (fromAmount == 0) revert NoSwapFromZeroBalance();\\n\\t\\tuint256 nativeValue = LibAsset.isNativeAsset(_swap.sendingAssetId) ? _swap.fromAmount : 0;\\n\\t\\tuint256 initialSendingAssetBalance = LibAsset.getOwnBalance(_swap.sendingAssetId);\\n\\t\\tuint256 initialReceivingAssetBalance = LibAsset.getOwnBalance(_swap.receivingAssetId);\\n\\n\\t\\tif (nativeValue == 0) {\\n\\t\\t\\tLibAsset.maxApproveERC20(IERC20(_swap.sendingAssetId), _swap.approveTo, _swap.fromAmount);\\n\\t\\t}\\n\\n\\t\\tif (initialSendingAssetBalance < _swap.fromAmount) {\\n\\t\\t\\trevert InsufficientBalance(_swap.fromAmount, initialSendingAssetBalance);\\n\\t\\t}\\n\\n\\t\\t//solhint-disable-next-line avoid-low-level-calls\\n\\t\\t(bool success, bytes memory res) = _swap.callTo.call{value: nativeValue}(_swap.callData);\\n\\t\\tif (!success) {\\n\\t\\t\\tstring memory reason = LibUtil.getRevertMsg(res);\\n\\t\\t\\trevert(reason);\\n\\t\\t}\\n\\n\\t\\tuint256 newBalance = LibAsset.getOwnBalance(_swap.receivingAssetId);\\n\\n\\t\\temit AssetSwapped(\\n\\t\\t\\ttransactionId,\\n\\t\\t\\t_swap.callTo,\\n\\t\\t\\t_swap.sendingAssetId,\\n\\t\\t\\t_swap.receivingAssetId,\\n\\t\\t\\t_swap.fromAmount,\\n\\t\\t\\tnewBalance > initialReceivingAssetBalance ? newBalance - initialReceivingAssetBalance : newBalance,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBytes.sol\\\";\\r\\n\\r\\nlibrary LibUtil {\\r\\n\\tusing LibBytes for bytes;\\r\\n\\r\\n\\tfunction getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\r\\n\\t\\t// If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n\\t\\tif (_res.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\t\\tbytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\r\\n\\t\\treturn abi.decode(revertData, (string)); // All that remains is the revert string\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Determines whether the given address is the zero address\\r\\n\\t/// @param addr The address to verify\\r\\n\\t/// @return Boolean indicating if the address is the zero address\\r\\n\\tfunction isZeroAddress(address addr) internal pure returns (bool) {\\r\\n\\t\\treturn addr == address(0);\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Periphery/WormholeReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../Interfaces/wormhole/IWormholeRelayer.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"../Helpers/ReentrancyGuard.sol\\\";\\nimport {LibSwap} from \\\"../Libraries/LibSwap.sol\\\";\\nimport {LibAsset} from \\\"../Libraries/LibAsset.sol\\\";\\nimport {IKana} from \\\"../Interfaces/IKana.sol\\\";\\nimport {IExecutor} from \\\"../Interfaces/IExecutor.sol\\\";\\nimport {IStargateReceiver} from \\\"../Interfaces/LZ/IStargateReceiver.sol\\\";\\nimport {IWormholeReceiver} from \\\"../Interfaces/wormhole/IWormholeReceiver.sol\\\";\\nimport {IWormholeRelayer} from \\\"../Interfaces/wormhole/IWormholeRelayer.sol\\\";\\nimport {ITokenBridge} from \\\"../Interfaces/wormhole/ITokenBridge.sol\\\";\\nimport {IWormhole} from \\\"../Interfaces/wormhole/IWormhole.sol\\\";\\nimport {TransferrableOwnership} from \\\"../Helpers/TransferrableOwnership.sol\\\";\\nimport {ExternalCallFailed, UnAuthorized} from \\\"../Errors/GenericErrors.sol\\\";\\n\\n/// @title Executor\\n/// @author KANA\\n/// @notice Arbitrary execution contract used for cross-chain swaps and message passing\\n/// @custom:version 2.0.0\\ncontract WormholeReceiver is IKana, ReentrancyGuard, TransferrableOwnership {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// Storage ///\\n\\tIExecutor public executor;\\n\\tuint256 public recoverGas;\\n\\tITokenBridge private immutable wormholeRouter;\\n\\tIWormhole private immutable wormhole;\\n\\n\\taddress internal constant NON_EVM_ADDRESS = 0x11f111f111f111F111f111f111F111f111f111F1;\\n\\t/// Events ///\\n\\tevent WormholeSet(address indexed router, address indexed core);\\n\\tevent ExecutorSet(address indexed executor);\\n\\tevent RecoverGasSet(uint256 indexed recoverGas);\\n\\n\\t/// Constructor\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\taddress _wormhole,\\n\\t\\taddress _wormholeRouter,\\n\\t\\taddress _executor,\\n\\t\\tuint256 _recoverGas\\n\\t) TransferrableOwnership(_owner) {\\n\\t\\towner = _owner;\\n\\t\\texecutor = IExecutor(_executor);\\n\\t\\twormhole = IWormhole(_wormhole);\\n\\t\\twormholeRouter = ITokenBridge(_wormholeRouter);\\n\\t\\trecoverGas = _recoverGas;\\n\\t\\temit RecoverGasSet(_recoverGas);\\n\\t\\temit WormholeSet(address(wormholeRouter), address(wormhole));\\n\\t}\\n\\n\\t/// External Methods ///\\n\\tfunction claimTokens(address recipient, uint256 amount, bytes[] memory additionalVaas) external payable {\\n\\t\\tIWormhole.VM memory parsedVM = wormhole.parseVM(additionalVaas[0]);\\n\\t\\tITokenBridge.Transfer memory transfer = wormholeRouter.parseTransfer(parsedVM.payload);\\n\\t\\twormholeRouter.completeTransfer(additionalVaas[0]);\\n\\n\\t\\taddress wrappedTokenAddress = transfer.tokenChain == wormhole.chainId()\\n\\t\\t\\t? fromWormholeFormat(transfer.tokenAddress)\\n\\t\\t\\t: wormholeRouter.wrappedAsset(transfer.tokenChain, transfer.tokenAddress);\\n\\t\\tIERC20(wrappedTokenAddress).transfer(recipient, amount); //\\n\\t}\\n\\n\\tfunction claimAndSwapTokens(\\n\\t\\tbytes32 _transactionId,\\n\\t\\tbytes[] memory additionalVaas,\\n\\t\\tLibSwap.SwapData[] calldata _swapData,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount\\n\\t) external payable {\\n\\t\\twormholeRouter.completeTransfer(additionalVaas[0]);\\n\\t\\tIWormhole.VM memory parsedVM = wormhole.parseVM(additionalVaas[0]);\\n\\t\\tITokenBridge.Transfer memory transfer = wormholeRouter.parseTransfer(parsedVM.payload);\\n\\t\\taddress wrappedTokenAddress = transfer.tokenChain == wormhole.chainId()\\n\\t\\t\\t? fromWormholeFormat(transfer.tokenAddress)\\n\\t\\t\\t: wormholeRouter.wrappedAsset(transfer.tokenChain, transfer.tokenAddress);\\n\\t\\t_swapAndCompleteBridgeTokens(_transactionId, _swapData, wrappedTokenAddress, payable(receiver), amount, false);\\n\\t}\\n\\n\\t/// @notice Send remaining token to receiver\\n\\t/// @param assetId token received from the other chain\\n\\t/// @param receiver address that will receive tokens in the end\\n\\t/// @param amount amount of token\\n\\tfunction pullToken(address assetId, address payable receiver, uint256 amount) external onlyOwner {\\n\\t\\tif (LibAsset.isNativeAsset(assetId)) {\\n\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t(bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n\\t\\t\\tif (!success) revert ExternalCallFailed();\\n\\t\\t} else {\\n\\t\\t\\tIERC20(assetId).safeTransfer(receiver, amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/// Private Methods ///\\n\\n\\t/// @notice Performs a swap before completing a cross-chain transaction\\n\\t/// @param _transactionId the transaction id associated with the operation\\n\\t/// @param _swapData array of data needed for swaps\\n\\t/// @param assetId token received from the other chain\\n\\t/// @param receiver address that will receive tokens in the end\\n\\t/// @param amount amount of token\\n\\t/// @param reserveRecoverGas whether we need a gas buffer to recover\\n\\tfunction _swapAndCompleteBridgeTokens(\\n\\t\\tbytes32 _transactionId,\\n\\t\\tLibSwap.SwapData[] memory _swapData,\\n\\t\\taddress assetId,\\n\\t\\taddress payable receiver,\\n\\t\\tuint256 amount,\\n\\t\\tbool reserveRecoverGas\\n\\t) private {\\n\\t\\tuint256 _recoverGas = reserveRecoverGas ? recoverGas : 0;\\n\\n\\t\\tif (LibAsset.isNativeAsset(assetId)) {\\n\\t\\t\\t// case 1: native asset\\n\\t\\t\\tuint256 cacheGasLeft = gasleft();\\n\\t\\t\\tif (reserveRecoverGas && cacheGasLeft < _recoverGas) {\\n\\t\\t\\t\\t// case 1a: not enough gas left to execute calls\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ExternalCallFailed();\\n\\n\\t\\t\\t\\temit KanaTransferRecovered(_transactionId, assetId, receiver, amount, block.timestamp);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// case 1b: enough gas left to execute calls\\n\\t\\t\\t// solhint-disable no-empty-blocks\\n\\t\\t\\ttry\\n\\t\\t\\t\\texecutor.swapAndCompleteBridgeTokens{value: amount, gas: cacheGasLeft - _recoverGas}(\\n\\t\\t\\t\\t\\t_transactionId,\\n\\t\\t\\t\\t\\t_swapData,\\n\\t\\t\\t\\t\\tassetId,\\n\\t\\t\\t\\t\\treceiver\\n\\t\\t\\t\\t)\\n\\t\\t\\t{} catch {\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ExternalCallFailed();\\n\\n\\t\\t\\t\\temit KanaTransferRecovered(_transactionId, assetId, receiver, amount, block.timestamp);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// case 2: ERC20 asset\\n\\t\\t\\tuint256 cacheGasLeft = gasleft();\\n\\t\\t\\tIERC20 token = IERC20(assetId);\\n\\t\\t\\ttoken.safeApprove(address(executor), 0);\\n\\n\\t\\t\\t//false\\t\\t\\t\\t (387184 \\t<\\t100000) false\\n\\t\\t\\tif (reserveRecoverGas && cacheGasLeft < _recoverGas) {\\n\\t\\t\\t\\t// case 2a: not enough gas left to execute calls\\n\\t\\t\\t\\ttoken.safeTransfer(receiver, amount);\\n\\n\\t\\t\\t\\temit KanaTransferRecovered(_transactionId, assetId, receiver, amount, block.timestamp);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// case 2b: enough gas left to execute calls\\n\\t\\t\\ttoken.safeIncreaseAllowance(address(executor), amount);\\n\\t\\t\\ttry\\n\\t\\t\\t\\texecutor.swapAndCompleteBridgeTokens{gas: cacheGasLeft - _recoverGas}(\\n\\t\\t\\t\\t\\t_transactionId,\\n\\t\\t\\t\\t\\t_swapData,\\n\\t\\t\\t\\t\\tassetId,\\n\\t\\t\\t\\t\\treceiver\\n\\t\\t\\t\\t)\\n\\t\\t\\t{} catch {\\n\\t\\t\\t\\ttoken.safeTransfer(receiver, amount);\\n\\t\\t\\t\\temit KanaTransferRecovered(_transactionId, assetId, receiver, amount, block.timestamp);\\n\\t\\t\\t}\\n\\n\\t\\t\\ttoken.safeApprove(address(executor), 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Receive native asset directly.\\n\\t/// @dev Some bridges may send native asset before execute external calls.\\n\\t// solhint-disable-next-line no-empty-blocks\\n\\treceive() external payable {}\\n}\\n\\nfunction toWormholeFormat(address addr) pure returns (bytes32) {\\n\\treturn bytes32(uint256(uint160(addr)));\\n}\\n\\nfunction fromWormholeFormat(bytes32 whFormatAddress) pure returns (address) {\\n\\tif (uint256(whFormatAddress) >> 160 != 0) {\\n\\t\\trevert NotAnEvmAddress(whFormatAddress);\\n\\t}\\n\\treturn address(uint160(uint256(whFormatAddress)));\\n}\\n\\nfunction getDecimals(address tokenAddress) view returns (uint8 decimals) {\\n\\t// query decimals\\n\\t(, bytes memory queriedDecimals) = address(tokenAddress).staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n\\tdecimals = abi.decode(queriedDecimals, (uint8));\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormhole\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wormholeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_recoverGas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExternalCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerMustNotBeSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNullOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPendingOwnershipTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"NotAnEvmAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KanaTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KanaTransferRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"bridge\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"integrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kanaWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasSourceSwaps\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasDestinationCall\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"integratorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kanaFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IKana.BridgeData\",\"name\":\"bridgeData\",\"type\":\"tuple\"}],\"name\":\"KanaTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recoverGas\",\"type\":\"uint256\"}],\"name\":\"RecoverGasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"core\",\"type\":\"address\"}],\"name\":\"WormholeSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalVaas\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"requiresDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalVaas\",\"type\":\"bytes[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WormholeReceiver", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000001e6c37a730be3557cff6079f59c6fcf9274b3ba0000000000000000000000007a4b5a56256163f07b2c80a7ca55abe66c4ec4d70000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde00000000000000000000000026b5810fa86db4bde2987afa5f2508c0f7ee387600000000000000000000000000000000000000000000000000000000000186a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}