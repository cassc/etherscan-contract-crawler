{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridges/SwitchStargateSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../dexs/Switch.sol\\\";\\nimport { IStargateRouter, IFactory, IPool } from \\\"../interfaces/IStargateRouter.sol\\\";\\nimport { IStargateEthRouter } from \\\"../interfaces/IStargateEthRouter.sol\\\";\\nimport \\\"../lib/DataTypes.sol\\\";\\n\\ncontract SwitchStargateSender is Switch {\\n    using UniversalERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    address public stargateRouter;\\n    address public stargateEthRouter;\\n\\n    struct StargateSwapRequest {\\n        bytes32 id;\\n        bytes32 bridge;\\n        address srcToken;\\n        address bridgeToken;\\n        address dstToken;\\n        address recipient;\\n        uint256 srcAmount;\\n        uint256 bridgeDstAmount;\\n        uint256 estimatedDstAmount;\\n        uint256 minDstAmount;\\n        DataTypes.ParaswapUsageStatus paraswapUsageStatus;\\n        uint256[] dstDistribution;\\n        bytes dstParaswapData;\\n    }\\n\\n    struct SwapArgsStargate {\\n        DataTypes.SwapInfo srcSwap;\\n        DataTypes.SwapInfo dstSwap;\\n        address payable recipient;\\n        address partner;\\n        uint256 partnerFeeRate;\\n        DataTypes.ParaswapUsageStatus paraswapUsageStatus;\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        uint256 amount;\\n        uint256 minSrcReturn; // min return from swap on src chain\\n        uint256 minDstAmount;\\n        uint256 bridgeDstAmount;\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        uint256 estimatedDstTokenAmount;\\n        uint256[] srcDistribution;\\n        uint256[] dstDistribution;\\n        uint16  dstChainId;\\n        bytes32 id;\\n        bytes32 bridge;\\n        bytes callTo;\\n        bytes srcParaswapData;\\n        bytes dstParaswapData;\\n    }\\n\\n    struct TransferArgsStargate {\\n        address fromToken;\\n        address destToken;\\n        address payable recipient;\\n        address partner;\\n        uint256 partnerFeeRate;\\n        uint256 amount;\\n        uint256 minDstAmount;\\n        uint256 bridgeDstAmount;\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        uint16 dstChainId;\\n        bytes32 id;\\n        bytes32 bridge;\\n    }\\n\\n    event StargateRouterSet(address stargateRouter);\\n    event StargateEthRouterSet(address stargateEthRouter);\\n\\n    constructor(\\n        address _weth,\\n        address _otherToken,\\n        uint256[] memory _pathCountAndSplit,\\n        address[] memory _factories,\\n        address[] memory _switchViewAndEventAddresses,\\n        address _stargateRouter,\\n        address _stargateEthRouter,\\n        address _paraswapProxy,\\n        address _augustusSwapper,\\n        address _feeCollector\\n    ) Switch(_weth, _otherToken, _pathCountAndSplit[0], _pathCountAndSplit[1], _factories, _switchViewAndEventAddresses[0], _switchViewAndEventAddresses[1], _paraswapProxy, _augustusSwapper, _feeCollector)\\n        public\\n    {\\n        stargateRouter = _stargateRouter;\\n        stargateEthRouter = _stargateEthRouter;\\n    }\\n\\n    function setStargateRouter(address _newStargateRouter) external onlyOwner {\\n        stargateRouter = _newStargateRouter;\\n        emit StargateRouterSet(_newStargateRouter);\\n    }\\n\\n    function setStargateEthRouter(address _newStargateEthRouter) external onlyOwner {\\n        stargateEthRouter = _newStargateEthRouter;\\n        emit StargateEthRouterSet(_newStargateEthRouter);\\n    }\\n\\n    function getLayerZeroFee(\\n        StargateSwapRequest calldata request,\\n        uint16 dstChainId,\\n        uint256 dstGasForCall,\\n        uint256 dstNativeAmount,\\n        address receiver\\n    )\\n        public\\n        view\\n        returns(uint256, uint256)\\n    {\\n        bytes memory message = abi.encode(\\n            StargateSwapRequest({\\n                id: request.id,\\n                bridge: request.bridge,\\n                srcToken: request.srcToken,\\n                bridgeToken: request.bridgeToken,\\n                dstToken: request.dstToken,\\n                recipient: request.recipient,\\n                srcAmount: request.srcAmount,\\n                dstDistribution: request.dstDistribution,\\n                dstParaswapData: request.dstParaswapData,\\n                paraswapUsageStatus: request.paraswapUsageStatus,\\n                bridgeDstAmount: request.bridgeDstAmount,\\n                estimatedDstAmount: request.estimatedDstAmount,\\n                minDstAmount: request.minDstAmount\\n            })\\n        );\\n\\n        return IStargateRouter(stargateRouter).quoteLayerZeroFee(\\n            dstChainId,\\n            1,                  // TYPE_SWAP_REMOTE on Bridge\\n            abi.encodePacked(receiver),\\n            message,\\n            IStargateRouter.lzTxObj(\\n                dstGasForCall,\\n                dstNativeAmount,\\n                abi.encodePacked(receiver)\\n            )\\n        );\\n    }\\n\\n    function getLayerZeroFeeWithoutMessage(\\n        uint16 dstChainId,\\n        uint256 dstGasForCall,\\n        uint256 dstNativeAmount,\\n        address receiver\\n    )\\n        external\\n        view\\n        returns(uint256, uint256)\\n    {\\n\\n        return IStargateRouter(stargateRouter).quoteLayerZeroFee(\\n            dstChainId,\\n            1,                  // TYPE_SWAP_REMOTE on Bridge\\n            abi.encodePacked(receiver),\\n            \\\"0x\\\",\\n            IStargateRouter.lzTxObj(\\n                dstGasForCall,\\n                dstNativeAmount,\\n                abi.encodePacked(receiver)\\n            )\\n        );\\n    }\\n\\n    function transferByStargate(\\n        TransferArgsStargate calldata transferArgs\\n    )\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        IERC20(transferArgs.fromToken).universalTransferFrom(msg.sender, address(this), transferArgs.amount);\\n\\n        uint256 amountAfterFee = _getAmountAfterFee(IERC20(transferArgs.fromToken), transferArgs.amount, transferArgs.partner, transferArgs.partnerFeeRate);\\n\\n        (uint256 nativeFee, ) = _getLayerZeroFee(\\\"0x\\\", transferArgs.dstChainId, transferArgs.dstGasForCall, transferArgs.dstNativeAmount, abi.encodePacked(transferArgs.recipient));\\n        if (IERC20(transferArgs.fromToken).isETH()) {\\n            require(msg.value >= transferArgs.amount + nativeFee, 'native token is not enough');\\n\\n            IStargateEthRouter(stargateEthRouter).swapETH{value:msg.value}(\\n                transferArgs.dstChainId,                        // the minimum amount accepted out on destination\\n                transferArgs.recipient,                         // refund additional messageFee to this address\\n                abi.encodePacked(transferArgs.recipient),       // the receiver of the destination ETH\\n                amountAfterFee,                                 // the amount, in Local Decimals, to be swapped\\n                transferArgs.minDstAmount                       // the minimum amount accepted out on destination\\n            );\\n        } else {\\n            require(msg.value >= nativeFee, 'native token is not enough');\\n\\n            address token = getTokenFromPoolId(stargateRouter, transferArgs.srcPoolId);\\n            if (token != transferArgs.fromToken) {\\n                revert(\\\"invalid token address\\\");\\n            }\\n            IERC20(transferArgs.fromToken).safeApprove(stargateRouter, 0);\\n            IERC20(transferArgs.fromToken).safeApprove(stargateRouter, amountAfterFee);\\n\\n            IStargateRouter(stargateRouter).swap{value:msg.value}(\\n                transferArgs.dstChainId,\\n                transferArgs.srcPoolId,                         // source pool id\\n                transferArgs.dstPoolId,                         // dest pool id\\n                transferArgs.recipient,                         // refund adddress. extra gas (if any) is returned to this address\\n                amountAfterFee,                                 // quantity to swap\\n                transferArgs.minDstAmount,                      // the min qty you would accept on the destination\\n                IStargateRouter.lzTxObj(\\n                    transferArgs.dstGasForCall,\\n                    transferArgs.dstNativeAmount,\\n                    abi.encodePacked(transferArgs.recipient)\\n                ),\\n                abi.encodePacked(transferArgs.recipient),       // the address to send the tokens to on the destination\\n                \\\"0x\\\"                                            // bytes param, if you wish to send additional payload you can abi.encode() them here\\n            );\\n        }\\n\\n        _emitCrossChainTransferRequest(transferArgs, bytes32(0), amountAfterFee, msg.sender, DataTypes.SwapStatus.Succeeded);\\n    }\\n\\n    function swapByStargate(\\n        SwapArgsStargate calldata swapArgs\\n    )\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        IERC20(swapArgs.srcSwap.srcToken).universalTransferFrom(msg.sender, address(this), swapArgs.amount);\\n\\n        uint256 returnAmount = 0;\\n        uint256 amountAfterFee = _getAmountAfterFee(\\n            IERC20(swapArgs.srcSwap.srcToken),\\n            swapArgs.amount,\\n            swapArgs.partner,\\n            swapArgs.partnerFeeRate\\n        );\\n        if (swapArgs.srcSwap.srcToken == swapArgs.srcSwap.dstToken) {\\n            returnAmount = amountAfterFee;\\n        } else {\\n            if ((swapArgs.paraswapUsageStatus == DataTypes.ParaswapUsageStatus.OnSrcChain) ||\\n                (swapArgs.paraswapUsageStatus == DataTypes.ParaswapUsageStatus.Both))\\n            {\\n                returnAmount = _swapFromParaswap(swapArgs, amountAfterFee);\\n            } else {\\n                (returnAmount, ) = _swapBeforeStargate(swapArgs, amountAfterFee);\\n            }\\n            if (IERC20(swapArgs.srcSwap.dstToken).isETH()) {\\n                weth.deposit{value: returnAmount}();\\n                weth.approve(stargateRouter, returnAmount);\\n            }\\n        }\\n        require(returnAmount >= swapArgs.minSrcReturn, \\\"return amount was not enough\\\");\\n\\n        bytes memory message = abi.encode(\\n            StargateSwapRequest({\\n                id: swapArgs.id,\\n                bridge: swapArgs.bridge,\\n                srcToken: swapArgs.srcSwap.srcToken,\\n                bridgeToken: swapArgs.dstSwap.srcToken,\\n                dstToken: swapArgs.dstSwap.dstToken,\\n                recipient: swapArgs.recipient,\\n                srcAmount: returnAmount,\\n                dstDistribution: swapArgs.dstDistribution,\\n                dstParaswapData: swapArgs.dstParaswapData,\\n                paraswapUsageStatus: swapArgs.paraswapUsageStatus,\\n                bridgeDstAmount: swapArgs.bridgeDstAmount,\\n                estimatedDstAmount: swapArgs.estimatedDstTokenAmount,\\n                minDstAmount: swapArgs.minDstAmount\\n            })\\n        );\\n\\n        (uint256 nativeFee, ) = _getLayerZeroFee(\\n            message,\\n            swapArgs.dstChainId,\\n            swapArgs.dstGasForCall,\\n            swapArgs.dstNativeAmount,\\n            swapArgs.callTo\\n        );\\n\\n        if (IERC20(swapArgs.srcSwap.srcToken).isETH()) {\\n            require(msg.value >= swapArgs.amount + nativeFee, 'native token is not enough');\\n        } else {\\n            require(msg.value >= nativeFee, 'native token is not enough');\\n        }\\n\\n        if (!IERC20(swapArgs.srcSwap.dstToken).isETH()) {\\n            uint256 approvedAmount = IERC20(swapArgs.srcSwap.dstToken).allowance(address(this), stargateRouter);\\n            if (approvedAmount < returnAmount) {\\n                IERC20(swapArgs.srcSwap.dstToken).safeIncreaseAllowance(stargateRouter, returnAmount - approvedAmount);\\n            }\\n        }\\n\\n        IStargateRouter(stargateRouter).swap{value:nativeFee}(\\n            swapArgs.dstChainId,\\n            swapArgs.srcPoolId,                         // source pool id\\n            swapArgs.dstPoolId,                         // dest pool id\\n            swapArgs.recipient,                         // refund adddress. extra gas (if any) is returned to this address\\n            returnAmount,                                   // quantity to swap\\n            swapArgs.minDstAmount,                      // the min qty you would accept on the destination\\n            IStargateRouter.lzTxObj(\\n                swapArgs.dstGasForCall,\\n                swapArgs.dstNativeAmount,\\n                swapArgs.callTo\\n            ),\\n            swapArgs.callTo,                            // the address to send the tokens to on the destination\\n            message                                         // bytes param, if you wish to send additional payload you can abi.encode() them here\\n        );\\n\\n        _emitCrossChainSwapRequest(swapArgs, bytes32(0), returnAmount, msg.sender, DataTypes.SwapStatus.Succeeded);\\n    }\\n\\n    function getTokenFromPoolId(\\n        address _router,\\n        uint256 _poolId\\n    )\\n        private\\n        view\\n        returns (address)\\n    {\\n        address factory = IStargateRouter(_router).factory();\\n        address pool = IFactory(factory).getPool(_poolId);\\n        return IPool(pool).token();\\n    }\\n\\n    function _swapBeforeStargate(\\n        SwapArgsStargate calldata transferArgs,\\n        uint256 amount\\n    )\\n        private\\n        returns\\n    (\\n        uint256 returnAmount,\\n        uint256 parts\\n    )\\n    {\\n        parts = 0;\\n        uint256 lastNonZeroIndex = 0;\\n        for (uint i = 0; i < transferArgs.srcDistribution.length; i++) {\\n            if (transferArgs.srcDistribution[i] > 0) {\\n                parts += transferArgs.srcDistribution[i];\\n                lastNonZeroIndex = i;\\n            }\\n        }\\n\\n        require(parts > 0, \\\"invalid distribution param\\\");\\n\\n        // break function to avoid stack too deep error\\n        returnAmount = _swapInternalForSingleSwap(transferArgs.srcDistribution, amount, parts, lastNonZeroIndex, IERC20(transferArgs.srcSwap.srcToken), IERC20(transferArgs.srcSwap.dstToken));\\n        require(returnAmount > 0, \\\"Swap failed from dex\\\");\\n\\n        switchEvent.emitSwapped(msg.sender, address(this), IERC20(transferArgs.srcSwap.srcToken), IERC20(transferArgs.srcSwap.dstToken), amount, returnAmount, 0);\\n    }\\n\\n    function _swapFromParaswap(\\n        SwapArgsStargate calldata swapArgs,\\n        uint256 amount\\n    )\\n        private\\n        returns (uint256 returnAmount)\\n    {\\n        // break function to avoid stack too deep error\\n        returnAmount = _swapInternalWithParaSwap(IERC20(swapArgs.srcSwap.srcToken), IERC20(swapArgs.srcSwap.dstToken), amount, swapArgs.srcParaswapData);\\n    }\\n\\n    function _getLayerZeroFee(\\n        bytes memory message,\\n        uint16 dstChainId,\\n        uint256 dstGasForCall,\\n        uint256 dstNativeAmount,\\n        bytes memory receiver\\n    )\\n        internal\\n        view\\n        returns(uint256, uint256)\\n    {\\n\\n        return IStargateRouter(stargateRouter).quoteLayerZeroFee(\\n            dstChainId,\\n            1,                  // TYPE_SWAP_REMOTE on Bridge\\n            receiver,\\n            message,\\n            IStargateRouter.lzTxObj(\\n                dstGasForCall,\\n                dstNativeAmount,\\n                receiver\\n            )\\n        );\\n    }\\n\\n    function _emitCrossChainSwapRequest(\\n        SwapArgsStargate calldata transferArgs,\\n        bytes32 transferId,\\n        uint256 returnAmount,\\n        address sender,\\n        DataTypes.SwapStatus status\\n    )\\n        internal\\n    {\\n        switchEvent.emitCrosschainSwapRequest(\\n            transferArgs.id,\\n            transferId,\\n            transferArgs.bridge,\\n            sender,\\n            transferArgs.srcSwap.srcToken,\\n            transferArgs.srcSwap.dstToken,\\n            transferArgs.dstSwap.dstToken,\\n            transferArgs.amount,\\n            returnAmount,\\n            transferArgs.estimatedDstTokenAmount,\\n            status\\n        );\\n    }\\n\\n    function _emitCrossChainTransferRequest(\\n        TransferArgsStargate calldata transferArgs,\\n        bytes32 transferId,\\n        uint256 returnAmount,\\n        address sender,\\n        DataTypes.SwapStatus status\\n    )\\n        internal\\n    {\\n        switchEvent.emitCrosschainSwapRequest(\\n            transferArgs.id,\\n            transferId,\\n            transferArgs.bridge,\\n            sender,\\n            transferArgs.fromToken,\\n            transferArgs.fromToken,\\n            transferArgs.destToken,\\n            transferArgs.amount,\\n            returnAmount,\\n            transferArgs.bridgeDstAmount,\\n            status\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/ISwitchView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ISwitchView {\\n\\n    struct ReturnArgs {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        uint256 amount;\\n        uint256 parts;\\n    }\\n\\n    struct CalculateArgs {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        IUniswapFactory factory;\\n        uint256 amount;\\n        uint256 parts;\\n    }\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts\\n    )\\n        public\\n        virtual\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256[] memory distribution\\n        );\\n}\\n\\n\"\r\n    },\r\n    \"contracts/core/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) virtual external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/core/SwitchRoot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"./ISwitchView.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"../lib/DisableFlags.sol\\\";\\nimport \\\"../lib/UniversalERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"../lib/UniswapExchangeLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract SwitchRoot is Ownable, ISwitchView {\\n    using DisableFlags for uint256;\\n    using UniversalERC20 for IERC20;\\n    using UniversalERC20 for IWETH;\\n    using UniswapExchangeLib for IUniswapExchange;\\n\\n    address public ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    address public ZERO_ADDRESS = address(0);\\n\\n    uint256 public dexCount;\\n    uint256 public pathCount;\\n    uint256 public pathSplit;\\n    IWETH public weth; // chain's native token\\n    IWETH public otherToken; //could be weth on a non-eth chain or other mid token(like busd)\\n\\n    address[] public factories;\\n\\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\\n\\n    constructor(address _weth, address _otherToken, uint256 _pathCount, uint256 _pathSplit, address[] memory _factories) {\\n        weth = IWETH(_weth);\\n        otherToken = IWETH(_otherToken);\\n        pathCount = _pathCount;\\n        pathSplit = _pathSplit;\\n        dexCount = _factories.length;\\n        for (uint256 i = 0; i < _factories.length; i++) {\\n            factories.push(_factories[i]);\\n        }\\n    }\\n\\n    event WETHSet(address _weth);\\n    event OtherTokenSet(address _otherToken);\\n    event PathCountSet(uint256 _pathCount);\\n    event PathSplitSet(uint256 _pathSplit);\\n    event FactoriesSet(address[] _factories);\\n\\n    function setWETH(address _weth) external onlyOwner {\\n        weth = IWETH(_weth);\\n        emit WETHSet(_weth);\\n    }\\n\\n    function setOtherToken(address _otherToken) external onlyOwner {\\n        otherToken = IWETH(_otherToken);\\n        emit OtherTokenSet(_otherToken);\\n    }\\n\\n    function setPathCount(uint256 _pathCount) external onlyOwner {\\n        pathCount = _pathCount;\\n        emit PathCountSet(_pathCount);\\n    }\\n\\n    function setPathSplit(uint256 _pathSplit) external onlyOwner {\\n        pathSplit = _pathSplit;\\n        emit PathSplitSet(_pathSplit);\\n    }\\n\\n    function setFactories(address[] memory _factories) external onlyOwner {\\n        dexCount = _factories.length;\\n        for (uint256 i = 0; i < _factories.length; i++) {\\n            factories.push(_factories[i]);\\n        }\\n        emit FactoriesSet(_factories);\\n    }\\n\\n    function _findBestDistribution(\\n        uint256 s,                // parts\\n        int256[][] memory amounts // exchangesReturns\\n    )\\n        internal\\n        view\\n        returns (\\n            int256 returnAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        uint256 n = amounts.length;\\n\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\n\\n        for (uint i = 0; i < n; i++) {\\n            answer[i] = new int256[](s + 1);\\n            parent[i] = new uint256[](s + 1);\\n        }\\n\\n        for (uint j = 0; j <= s; j++) {\\n            answer[0][j] = amounts[0][j];\\n            for (uint i = 1; i < n; i++) {\\n                answer[i][j] = -1e72;\\n            }\\n            parent[0][j] = 0;\\n        }\\n\\n        for (uint i = 1; i < n; i++) {\\n            for (uint j = 0; j <= s; j++) {\\n                answer[i][j] = answer[i - 1][j];\\n                parent[i][j] = j;\\n\\n                for (uint k = 1; k <= j; k++) {\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\n                        parent[i][j] = j - k;\\n                    }\\n                }\\n            }\\n        }\\n\\n        distribution = new uint256[](dexCount*pathCount*pathSplit);\\n\\n        uint256 partsLeft = s;\\n        unchecked {\\n            for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\\n                distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\\n                partsLeft = parent[curExchange][partsLeft];\\n            }\\n        }\\n\\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE) ? int256(0) : answer[n - 1][s];\\n    }\\n\\n    function _linearInterpolation(\\n        uint256 value,\\n        uint256 parts\\n    )\\n        internal\\n        pure\\n        returns (uint256[] memory rets)\\n    {\\n        rets = new uint256[](parts);\\n        for (uint i = 0; i < parts; i++) {\\n            rets[i] = value * (i + 1) / parts;\\n        }\\n    }\\n\\n    function _tokensEqual(\\n        IERC20 tokenA,\\n        IERC20 tokenB\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dexs/Switch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../core/ISwitchView.sol\\\";\\nimport \\\"../core/SwitchRoot.sol\\\";\\nimport \\\"../interfaces/ISwitchEvent.sol\\\";\\nimport \\\"../interfaces/IFeeCollector.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Switch is Ownable, SwitchRoot, ReentrancyGuard {\\n    using UniswapExchangeLib for IUniswapExchange;\\n    using UniversalERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    ISwitchView public switchView;\\n    ISwitchEvent public switchEvent;\\n    address public reward;\\n    address public paraswapProxy;\\n    address public augustusSwapper;\\n\\n    address public feeCollector;\\n    uint256 public maxPartnerFeeRate = 1000; // max partner fee rate is 10%\\n    uint256 public swingCut = 1500; // swing takes a cut of 15% from partner fee\\n\\n    uint256 public constant FEE_BASE = 10000;\\n\\n    event RewardSet(address reward);\\n    event FeeCollectorSet(address feeCollector);\\n    event MaxPartnerFeeRateSet(uint256 maxPartnerFeeRate);\\n    event SwingCutSet(uint256 swingCut);\\n    event SwitchEventSet(ISwitchEvent switchEvent);\\n    event ParaswapProxySet(address paraswapProxy);\\n    event AugustusSwapperSet(address augustusSwapper);\\n\\n    constructor(\\n        address _weth,\\n        address _otherToken,\\n        uint256 _pathCount,\\n        uint256 _pathSplit,\\n        address[] memory _factories,\\n        address _switchViewAddress,\\n        address _switchEventAddress,\\n        address _paraswapProxy,\\n        address _augustusSwapper,\\n        address _feeCollector\\n    ) SwitchRoot(_weth, _otherToken, _pathCount, _pathSplit, _factories)\\n        public\\n    {\\n        switchView = ISwitchView(_switchViewAddress);\\n        switchEvent = ISwitchEvent(_switchEventAddress);\\n        paraswapProxy = _paraswapProxy;\\n        augustusSwapper = _augustusSwapper;\\n        feeCollector = _feeCollector;\\n        reward = msg.sender;\\n    }\\n\\n    fallback() external payable {\\n        // solium-disable-next-line security/no-tx-origin\\n        require(msg.sender != tx.origin);\\n    }\\n\\n    function setReward(address _reward) external onlyOwner {\\n        reward = _reward;\\n        emit RewardSet(_reward);\\n    }\\n\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        feeCollector = _feeCollector;\\n        emit FeeCollectorSet(_feeCollector);\\n    }\\n\\n    function setMaxPartnerFeeRate(uint256 _maxPartnerFeeRate) external onlyOwner {\\n        require(_maxPartnerFeeRate <= 5000, \\\"too large\\\");\\n        maxPartnerFeeRate = _maxPartnerFeeRate;\\n        emit MaxPartnerFeeRateSet(_maxPartnerFeeRate);\\n    }\\n\\n    function setSwingCut(uint256 _swingCut) external onlyOwner {\\n        swingCut = _swingCut;\\n        emit SwingCutSet(_swingCut);\\n    }\\n\\n    function setSwitchEvent(ISwitchEvent _switchEvent) external onlyOwner {\\n        switchEvent = _switchEvent;\\n        emit SwitchEventSet(_switchEvent);\\n    }\\n\\n    function setParaswapProxy(address _paraswapProxy) external onlyOwner {\\n        paraswapProxy = _paraswapProxy;\\n        emit ParaswapProxySet(_paraswapProxy);\\n    }\\n\\n    function setAugustusSwapper(address _augustusSwapper) external onlyOwner {\\n        augustusSwapper = _augustusSwapper;\\n        emit AugustusSwapperSet(_augustusSwapper);\\n    }\\n\\n    function getTokenBalance(address token) external view onlyOwner returns(uint256 amount) {\\n        amount = IERC20(token).universalBalanceOf(address(this));\\n    }\\n\\n    function transferToken(address token, uint256 amount, address recipient) external onlyOwner {\\n        IERC20(token).universalTransfer(recipient, amount);\\n    }\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts\\n    )\\n        public\\n        override\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        (returnAmount, distribution) = switchView.getExpectedReturn(fromToken, destToken, amount, parts);\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 expectedReturn,\\n        uint256 minReturn,\\n        address recipient,\\n        uint256[] memory distribution\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        returns (uint256 returnAmount)\\n    {\\n        require(expectedReturn >= minReturn, \\\"expectedReturn must be equal or larger than minReturn\\\");\\n        if (fromToken == destToken) {\\n            revert(\\\"it's not allowed to swap with same token\\\");\\n        }\\n\\n        uint256 parts = 0;\\n        uint256 lastNonZeroIndex = 0;\\n        for (uint i = 0; i < distribution.length; i++) {\\n            if (distribution[i] > 0) {\\n                parts += distribution[i];\\n                lastNonZeroIndex = i;\\n            }\\n        }\\n\\n        if (parts == 0) {\\n            if (fromToken.isETH()) {\\n                payable(msg.sender).transfer(msg.value);\\n                return msg.value;\\n            }\\n            return amount;\\n        }\\n\\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n        returnAmount = _swapInternalForSingleSwap(distribution, amount, parts, lastNonZeroIndex, fromToken, destToken);\\n        if (returnAmount > 0) {\\n            require(returnAmount >= minReturn, \\\"Switch: Return amount was not enough\\\");\\n\\n            if (returnAmount > expectedReturn) {\\n                destToken.universalTransfer(recipient, expectedReturn);\\n                destToken.universalTransfer(reward, returnAmount - expectedReturn);\\n                switchEvent.emitSwapped(msg.sender, recipient, fromToken, destToken, amount, expectedReturn, returnAmount - expectedReturn);\\n            } else {\\n                destToken.universalTransfer(recipient, returnAmount);\\n                switchEvent.emitSwapped(msg.sender, recipient, fromToken, destToken, amount, returnAmount, 0);\\n            }\\n        } else {\\n            if (fromToken.universalBalanceOf(address(this)) > amount) {\\n                fromToken.universalTransfer(msg.sender, amount);\\n            } else {\\n                fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    function swapWithParaswap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 destAmount,\\n        address recipient,\\n        bytes memory callData\\n    )\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        if (fromToken == destToken) {\\n            revert(\\\"it's not allowed to swap with same token\\\");\\n        }\\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n        _callParaswap(fromToken, amount, callData);\\n        switchEvent.emitSwapped(msg.sender, recipient, fromToken, destToken, amount, destAmount, 0);\\n    }\\n\\n\\n    function getFeeInfo(\\n        uint256 amount,\\n        address partner,\\n        uint256 partnerFeeRate\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 partnerFee,\\n            uint256 remainAmount\\n        )\\n    {\\n        partnerFee = partnerFeeRate * amount / FEE_BASE;\\n        remainAmount = amount - partnerFee;\\n    }\\n\\n    function _swapInternalWithParaSwap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        bytes memory callData\\n    )\\n        internal\\n        returns (\\n            uint256 totalAmount\\n        )\\n    {\\n        if (fromToken == destToken) {\\n            revert(\\\"it's not allowed to swap with same token\\\");\\n        }\\n\\n        _callParaswap(fromToken, amount, callData);\\n        totalAmount = destToken.universalBalanceOf(address(this));\\n        switchEvent.emitSwapped(msg.sender, address(this), fromToken, destToken, amount, totalAmount, 0);\\n    }\\n\\n    function _callParaswap(\\n        IERC20 token,\\n        uint256 amount,\\n        bytes memory callData\\n    )\\n        internal\\n    {\\n        uint256 ethAmountToTransfert = 0;\\n        if (token.isETH()) {\\n            require(address(this).balance >= amount, \\\"ETH balance is insufficient\\\");\\n            ethAmountToTransfert = amount;\\n        } else {\\n            token.universalApprove(paraswapProxy, amount);\\n        }\\n\\n        (bool success,) = augustusSwapper.call{ value: ethAmountToTransfert }(callData);\\n        require(success, \\\"Paraswap execution failed\\\");\\n    }\\n\\n    function _swapInternalForSingleSwap(\\n        uint256[] memory distribution,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 lastNonZeroIndex,\\n        IERC20 fromToken,\\n        IERC20 destToken\\n    )\\n        internal\\n        returns (\\n            uint256 totalAmount\\n        )\\n    {\\n        require(distribution.length <= dexCount*pathCount, \\\"Switch: Distribution array should not exceed factories array size\\\");\\n\\n        uint256 remainingAmount = amount;\\n        uint256 swappedAmount = 0;\\n        for (uint i = 0; i < distribution.length; i++) {\\n            if (distribution[i] == 0) {\\n                continue;\\n            }\\n            uint256 swapAmount = amount * distribution[i] / parts;\\n            if (i == lastNonZeroIndex) {\\n                swapAmount = remainingAmount;\\n            }\\n            remainingAmount -= swapAmount;\\n            if (i % pathCount == 0) {\\n                swappedAmount = _swap(fromToken, destToken, swapAmount, IUniswapFactory(factories[i/pathCount]));\\n            } else if (i % pathCount == 1) {\\n                swappedAmount = _swapETH(fromToken, destToken, swapAmount, IUniswapFactory(factories[i/pathCount]));\\n            } else {\\n                swappedAmount = _swapOtherToken(fromToken, destToken, swapAmount, IUniswapFactory(factories[i/pathCount]));\\n            }\\n            totalAmount += swappedAmount;\\n        }\\n    }\\n\\n    function _getAmountAfterFee(\\n        IERC20 token,\\n        uint256 amount,\\n        address partner,\\n        uint256 partnerFeeRate\\n    )\\n        internal\\n        returns (\\n            uint256 amountAfterFee\\n        )\\n    {\\n        require(partnerFeeRate <= maxPartnerFeeRate, \\\"partnerFeeRate too large\\\");\\n        amountAfterFee = amount;\\n        if (partnerFeeRate > 0) {\\n            uint256 swingFee = partnerFeeRate * amount * swingCut / (FEE_BASE * FEE_BASE);\\n            uint256 partnerFee = partnerFeeRate * amount / FEE_BASE - swingFee;\\n            if (IERC20(token).isETH()) {\\n                IFeeCollector(feeCollector).collectTokenFees{ value: partnerFee + swingFee }(address(token), partnerFee, swingFee, partner);\\n            } else {\\n                IERC20(token).safeApprove(feeCollector, 0);\\n                IERC20(token).safeApprove(feeCollector, partnerFee + swingFee);\\n                IFeeCollector(feeCollector).collectTokenFees(address(token), partnerFee, swingFee, partner);\\n            }\\n            amountAfterFee = amount - partnerFeeRate * amount / FEE_BASE;\\n        }\\n    }\\n\\n    // Swap helpers\\n    function _swapInternal(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    )\\n        internal\\n        returns (\\n            uint256 returnAmount\\n        )\\n    {\\n        if (fromToken.isETH()) {\\n            weth.deposit{value: amount}();\\n        }\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 toTokenReal = destToken.isETH() ? weth : destToken;\\n        IUniswapExchange exchange = factory.getPair(fromTokenReal, toTokenReal);\\n        bool needSync;\\n        bool needSkim;\\n        (returnAmount, needSync, needSkim) = exchange.getReturn(fromTokenReal, toTokenReal, amount);\\n        if (needSync) {\\n            exchange.sync();\\n        } else if (needSkim) {\\n            exchange.skim(0x46Fd07da395799F113a7584563b8cB886F33c2bc);\\n        }\\n\\n        fromTokenReal.universalTransfer(address(exchange), amount);\\n        if (uint160(address(fromTokenReal)) < uint160(address(toTokenReal))) {\\n            exchange.swap(0, returnAmount, address(this), \\\"\\\");\\n        } else {\\n            exchange.swap(returnAmount, 0, address(this), \\\"\\\");\\n        }\\n\\n        if (destToken.isETH()) {\\n            weth.withdraw(weth.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _swapOverMid(\\n        IERC20 fromToken,\\n        IERC20 midToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    )\\n        internal\\n        returns (\\n            uint256 returnAmount\\n        )\\n    {\\n        returnAmount = _swapInternal(\\n            midToken,\\n            destToken,\\n            _swapInternal(\\n                fromToken,\\n                midToken,\\n                amount,\\n                factory\\n            ),\\n            factory\\n        );\\n    }\\n\\n    function _swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    )\\n        internal\\n        returns (\\n            uint256 returnAmount\\n        )\\n    {\\n        returnAmount = _swapInternal(\\n            fromToken,\\n            destToken,\\n            amount,\\n            factory\\n        );\\n    }\\n\\n    function _swapETH(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    )\\n        internal\\n        returns (\\n            uint256 returnAmount\\n        )\\n    {\\n        returnAmount = _swapOverMid(\\n            fromToken,\\n            weth,\\n            destToken,\\n            amount,\\n            factory\\n        );\\n    }\\n\\n    function _swapOtherToken(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    )\\n        internal\\n        returns (\\n            uint256 returnAmount\\n        )\\n    {\\n        returnAmount = _swapOverMid(\\n            fromToken,\\n            otherToken,\\n            destToken,\\n            amount,\\n            factory\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IFeeCollector {\\n    function collectTokenFees(\\n        address tokenAddress,\\n        uint256 partnerFee,\\n        uint256 swingFee,\\n        address partnerAddress\\n    ) payable external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IStargateEthRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IStargateEthRouter {\\n    function swapETH(\\n        uint16 _dstChainId,                         // destination Stargate chainId\\n        address payable _refundAddress,             // refund additional messageFee to this address\\n        bytes calldata _toAddress,                  // the receiver of the destination ETH\\n        uint256 _amountLD,                          // the amount, in Local Decimals, to be swapped\\n        uint256 _minAmountLD                        // the minimum amount accepted out on destination\\n    ) external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 _dstGasForCall;\\n        uint256 _dstNativeAmount;\\n        bytes _dstNativeAddr;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\\ninterface IFactory {\\n    function getPool(uint256) external view returns (address);\\n}\\n\\ninterface IPool {\\n    function token() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISwitchEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../lib/DataTypes.sol\\\";\\n\\ninterface ISwitchEvent {\\n    function emitSwapped(\\n        address from,\\n        address recipient,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 fromAmount,\\n        uint256 destAmount,\\n        uint256 reward\\n    ) external;\\n\\n    function emitParaswapSwapped(\\n        address from,\\n        IERC20 fromToken,\\n        uint256 fromAmount\\n    ) external;\\n\\n    function emitCrosschainSwapRequest(\\n        bytes32 id,\\n        bytes32 bridgeTransferId,\\n        bytes32 bridge, // bridge slug\\n        address from, // user address\\n        address fromToken, // source token on sending chain\\n        address bridgeToken, // bridge token on sending chain\\n        address destToken, // dest token on receiving chain\\n        uint256 fromAmount, // source token amount on sending chain\\n        uint256 bridgeAmount, // swapped amount on sending chain\\n        uint256 dstAmount, // estimated amount of dest token on receiving chain\\n        DataTypes.SwapStatus status\\n    ) external;\\n\\n    function emitCrosschainContractCallRequest(\\n        bytes32 id,\\n        bytes32 bridgeTransferId,\\n        bytes32 bridge, // bridge slug\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address fromToken, // source token on sending chain\\n        address callToken, // contract call token on receiving chain\\n        uint256 fromAmount, // source token amount on sending chain\\n        uint256 estimatedCallAmount, // estimated amount of contract call token on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n\\n    function emitCrosschainSwapDone(\\n        bytes32 id,\\n        bytes32 bridge,\\n        address from, // user address\\n        address bridgeToken, // source token on receiving chain\\n        address destToken, // dest token on receiving chain\\n        uint256 bridgeAmount, // bridge token amount on receiving chain\\n        uint256 destAmount, //dest token amount on receiving chain\\n        DataTypes.SwapStatus status\\n    ) external;\\n\\n    function emitCrosschainContractCallDone(\\n        bytes32 id,\\n        bytes32 bridge,\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address bridgeToken, // source token on receiving chain\\n        address callToken, // call token on receiving chain\\n        uint256 bridgeAmount, // bridge token amount on receiving chain\\n        uint256 estimatedCallAmount, //dest token amount on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n\\n    function emitSingleChainContractCallDone(\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address fromToken, // source token on receiving chain\\n        address callToken, // call token on receiving chain\\n        uint256 fromAmount, // from token amount on receiving chain\\n        uint256 callAmount, //dest token amount on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IUniswapExchange {\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\ninterface IUniswapFactory {\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapExchange pair);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n/**\\n * @title DataTypes\\n * @dev Definition of shared types\\n */\\nlibrary DataTypes {\\n    /// @notice Type for representing a swapping status type\\n    enum SwapStatus {\\n        Null,\\n        Succeeded,\\n        Failed,\\n        Fallback\\n    }\\n\\n    enum ContractCallStatus {\\n        Null,\\n        Succeeded,\\n        Failed,\\n        Fallback\\n    }\\n\\n    /// @notice Type for representing a paraswap usage status\\n    enum ParaswapUsageStatus {\\n        None,\\n        OnSrcChain,\\n        OnDestChain,\\n        Both\\n    }\\n\\n    /// @notice Swap params\\n    struct SwapInfo {\\n        address srcToken;\\n        address dstToken;\\n    }\\n\\n    struct ContractCallInfo {\\n        address toContractAddress; // The address of the contract to interact with.\\n        address toApprovalAddress; // the approval address for contract call\\n        address contractOutputsToken; // Some contract interactions will output a token (e.g. staking)\\n        uint32 toContractGasLimit; // The estimated gas used by the destination call.\\n        bytes toContractCallData; // The callData to be sent to the contract for the interaction on the destination chain.\\n    }\\n\\n    struct ContractCallRequest {\\n        bytes32 id;\\n        bytes32 bridge;\\n        address srcToken;\\n        address bridgeToken;\\n        address callToken;\\n        address recipient;\\n        uint256 srcAmount;\\n        uint256 bridgeDstAmount;\\n        uint256 estimatedCallAmount;\\n        uint256[] dstDistribution;\\n        bytes dstParaswapData;\\n        ContractCallInfo callInfo;\\n        ParaswapUsageStatus paraswapUsageStatus;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DisableFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nlibrary DisableFlags {\\n    function check(\\n        uint256 flags,\\n        uint256 flag\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (flags & flag) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniswapExchangeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../interfaces/IUniswapExchange.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniswapExchangeLib {\\n    using Math for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    function getReturn(\\n        IUniswapExchange exchange,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint amountIn\\n    )\\n        internal\\n        view\\n        returns (uint256 result, bool needSync, bool needSkim)\\n    {\\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\n        if (fromToken > destToken) {\\n            (reserve0, reserve1) = (reserve1, reserve0);\\n        }\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\n\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * Math.min(reserveOut, reserve1);\\n        uint256 denominator = Math.min(reserveIn, reserve0) * 1000 + amountInWithFee;\\n        result = (denominator == 0) ? 0 : numerator / denominator;\\n    }\\n}\\n\\n\\n\\n\"\r\n    },\r\n    \"contracts/lib/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ZERO_ADDRESS = address(0x0000000000000000000000000000000000000000);\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n        returns (bool)\\n    {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        if (isETH(token)) {\\n            payable(to).transfer(amount);\\n            return true;\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                payable(to).transfer(amount);\\n            }\\n            // commented following lines for passing celer fee properly.\\n//            if (msg.value > amount) {\\n//                payable(msg.sender).transfer(msg.value - amount);\\n//            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(\\n        IERC20 token,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                payable(msg.sender).transfer(msg.value - amount);\\n            }\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (!isETH(token)) {\\n            if (amount == 0) {\\n                token.safeApprove(to, 0);\\n                return;\\n            }\\n\\n            uint256 approvedAmount = token.allowance(address(this), to);\\n            if (approvedAmount > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\\n    }\\n\\n    // function notExist(IERC20 token) internal pure returns(bool) {\\n    //     return (address(token) == address(-1));\\n    // }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_pathCountAndSplit\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_switchViewAndEventAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateEthRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paraswapProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_augustusSwapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"augustusSwapper\",\"type\":\"address\"}],\"name\":\"AugustusSwapperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"FactoriesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPartnerFeeRate\",\"type\":\"uint256\"}],\"name\":\"MaxPartnerFeeRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"OtherTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paraswapProxy\",\"type\":\"address\"}],\"name\":\"ParaswapProxySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pathCount\",\"type\":\"uint256\"}],\"name\":\"PathCountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pathSplit\",\"type\":\"uint256\"}],\"name\":\"PathSplitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"RewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stargateEthRouter\",\"type\":\"address\"}],\"name\":\"StargateEthRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stargateRouter\",\"type\":\"address\"}],\"name\":\"StargateRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swingCut\",\"type\":\"uint256\"}],\"name\":\"SwingCutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwitchEvent\",\"name\":\"switchEvent\",\"type\":\"address\"}],\"name\":\"SwitchEventSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"WETHSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"augustusSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerFeeRate\",\"type\":\"uint256\"}],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.ParaswapUsageStatus\",\"name\":\"paraswapUsageStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"dstDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"dstParaswapData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwitchStargateSender.StargateSwapRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getLayerZeroFeeWithoutMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPartnerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paraswapProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pathCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pathSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_augustusSwapper\",\"type\":\"address\"}],\"name\":\"setAugustusSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPartnerFeeRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPartnerFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"setOtherToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paraswapProxy\",\"type\":\"address\"}],\"name\":\"setParaswapProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pathCount\",\"type\":\"uint256\"}],\"name\":\"setPathCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pathSplit\",\"type\":\"uint256\"}],\"name\":\"setPathSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStargateEthRouter\",\"type\":\"address\"}],\"name\":\"setStargateEthRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStargateRouter\",\"type\":\"address\"}],\"name\":\"setStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swingCut\",\"type\":\"uint256\"}],\"name\":\"setSwingCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwitchEvent\",\"name\":\"_switchEvent\",\"type\":\"address\"}],\"name\":\"setSwitchEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateEthRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.SwapInfo\",\"name\":\"srcSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.SwapInfo\",\"name\":\"dstSwap\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"enum DataTypes.ParaswapUsageStatus\",\"name\":\"paraswapUsageStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSrcReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedDstTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"srcDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callTo\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"srcParaswapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dstParaswapData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwitchStargateSender.SwapArgsStargate\",\"name\":\"swapArgs\",\"type\":\"tuple\"}],\"name\":\"swapByStargate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"swapWithParaswap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swingCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchEvent\",\"outputs\":[{\"internalType\":\"contract ISwitchEvent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchView\",\"outputs\":[{\"internalType\":\"contract ISwitchView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeDstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bridge\",\"type\":\"bytes32\"}],\"internalType\":\"struct SwitchStargateSender.TransferArgsStargate\",\"name\":\"transferArgs\",\"type\":\"tuple\"}],\"name\":\"transferByStargate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwitchStargateSender", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000045a01e4e04f14f7a4a6702c74187c5f6222033cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000216b4b4ba9f3e719726886d34a177484278bfcae000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee5700000000000000000000000029836d3c83661f3d2fd35996d38cca9a43dbf69800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050000000000000000000000005757371414417b8c6caad45baef941abc7d3ab32000000000000000000000000c35dadb65012ec5796536bd9864ed8773abc74c4000000000000000000000000e7fb3e833efe5f9c441105eb65ef8b261266423b000000000000000000000000c35dadb65012ec5796536bd9864ed8773abc74c4000000000000000000000000cf083be4164828f00cae704ec15a36d711491284000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005d908d97819bb1653602e2ebd98c65efcfdb4c10000000000000000000000008099b48904ee4eaa4ced27f1281c60f7aad797cb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}