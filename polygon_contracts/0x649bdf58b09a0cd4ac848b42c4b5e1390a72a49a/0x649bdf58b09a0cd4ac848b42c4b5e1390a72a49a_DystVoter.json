{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/vote/DystVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../interface/IVe.sol\\\";\\r\\nimport \\\"../../interface/IVoter.sol\\\";\\r\\nimport \\\"../../interface/IERC20.sol\\\";\\r\\nimport \\\"../../interface/IERC721.sol\\\";\\r\\nimport \\\"../../interface/IGauge.sol\\\";\\r\\nimport \\\"../../interface/IFactory.sol\\\";\\r\\nimport \\\"../../interface/IPair.sol\\\";\\r\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\r\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\r\\nimport \\\"../../interface/IMinter.sol\\\";\\r\\nimport \\\"../../interface/IBribe.sol\\\";\\r\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\r\\nimport \\\"../Reentrancy.sol\\\";\\r\\nimport \\\"../../lib/SafeERC20.sol\\\";\\r\\n\\r\\ncontract DystVoter is IVoter, Reentrancy {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @dev The ve token that governs these contracts\\r\\n  address public immutable override ve;\\r\\n  /// @dev DystFactory\\r\\n  address public immutable factory;\\r\\n  address public immutable token;\\r\\n  address public immutable gaugeFactory;\\r\\n  address public immutable bribeFactory;\\r\\n  /// @dev Rewards are released over 7 days\\r\\n  uint internal constant DURATION = 7 days;\\r\\n  address public minter;\\r\\n\\r\\n  /// @dev Total voting weight\\r\\n  uint public totalWeight;\\r\\n\\r\\n  /// @dev All pools viable for incentives\\r\\n  address[] public pools;\\r\\n  /// @dev pool => gauge\\r\\n  mapping(address => address) public gauges;\\r\\n  /// @dev gauge => pool\\r\\n  mapping(address => address) public poolForGauge;\\r\\n  /// @dev gauge => bribe\\r\\n  mapping(address => address) public bribes;\\r\\n  /// @dev pool => weight\\r\\n  mapping(address => int256) public weights;\\r\\n  /// @dev nft => pool => votes\\r\\n  mapping(uint => mapping(address => int256)) public votes;\\r\\n  /// @dev nft => pools\\r\\n  mapping(uint => address[]) public poolVote;\\r\\n  /// @dev nft => total voting weight of user\\r\\n  mapping(uint => uint) public usedWeights;\\r\\n  mapping(address => bool) public isGauge;\\r\\n  mapping(address => bool) public isWhitelisted;\\r\\n\\r\\n  uint public index;\\r\\n  mapping(address => uint) public supplyIndex;\\r\\n  mapping(address => uint) public claimable;\\r\\n\\r\\n  event GaugeCreated(address indexed gauge, address creator, address indexed bribe, address indexed pool);\\r\\n  event Voted(address indexed voter, uint tokenId, int256 weight);\\r\\n  event Abstained(uint tokenId, int256 weight);\\r\\n  event Deposit(address indexed lp, address indexed gauge, uint tokenId, uint amount);\\r\\n  event Withdraw(address indexed lp, address indexed gauge, uint tokenId, uint amount);\\r\\n  event NotifyReward(address indexed sender, address indexed reward, uint amount);\\r\\n  event DistributeReward(address indexed sender, address indexed gauge, uint amount);\\r\\n  event Attach(address indexed owner, address indexed gauge, uint tokenId);\\r\\n  event Detach(address indexed owner, address indexed gauge, uint tokenId);\\r\\n  event Whitelisted(address indexed whitelister, address indexed token);\\r\\n\\r\\n  constructor(address _ve, address _factory, address _gaugeFactory, address _bribeFactory) {\\r\\n    ve = _ve;\\r\\n    factory = _factory;\\r\\n    token = IVe(_ve).token();\\r\\n    gaugeFactory = _gaugeFactory;\\r\\n    bribeFactory = _bribeFactory;\\r\\n    minter = msg.sender;\\r\\n  }\\r\\n\\r\\n  function initialize(address[] memory _tokens, address _minter) external {\\r\\n    require(msg.sender == minter, \\\"!minter\\\");\\r\\n    for (uint i = 0; i < _tokens.length; i++) {\\r\\n      _whitelist(_tokens[i]);\\r\\n    }\\r\\n    minter = _minter;\\r\\n  }\\r\\n\\r\\n  /// @dev Amount of tokens required to be hold for whitelisting.\\r\\n  function listingFee() external view returns (uint) {\\r\\n    return _listingFee();\\r\\n  }\\r\\n\\r\\n  /// @dev 20% of circulation supply.\\r\\n  function _listingFee() internal view returns (uint) {\\r\\n    return (IERC20(token).totalSupply() - IERC20(ve).totalSupply()) / 5;\\r\\n  }\\r\\n\\r\\n  /// @dev Remove all votes for given tokenId.\\r\\n  function reset(uint _tokenId) external {\\r\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\r\\n    _reset(_tokenId);\\r\\n    IVe(ve).abstain(_tokenId);\\r\\n  }\\r\\n\\r\\n  function _reset(uint _tokenId) internal {\\r\\n    address[] storage _poolVote = poolVote[_tokenId];\\r\\n    uint _poolVoteCnt = _poolVote.length;\\r\\n    int256 _totalWeight = 0;\\r\\n\\r\\n    for (uint i = 0; i < _poolVoteCnt; i ++) {\\r\\n      address _pool = _poolVote[i];\\r\\n      int256 _votes = votes[_tokenId][_pool];\\r\\n      _updateFor(gauges[_pool]);\\r\\n      weights[_pool] -= _votes;\\r\\n      votes[_tokenId][_pool] -= _votes;\\r\\n      if (_votes > 0) {\\r\\n        IBribe(bribes[gauges[_pool]])._withdraw(uint(_votes), _tokenId);\\r\\n        _totalWeight += _votes;\\r\\n      } else {\\r\\n        _totalWeight -= _votes;\\r\\n      }\\r\\n      emit Abstained(_tokenId, _votes);\\r\\n    }\\r\\n    totalWeight -= uint(_totalWeight);\\r\\n    usedWeights[_tokenId] = 0;\\r\\n    delete poolVote[_tokenId];\\r\\n  }\\r\\n\\r\\n  /// @dev Resubmit exist votes for given token. For internal purposes.\\r\\n  function poke(uint _tokenId) external {\\r\\n    address[] memory _poolVote = poolVote[_tokenId];\\r\\n    uint _poolCnt = _poolVote.length;\\r\\n    int256[] memory _weights = new int256[](_poolCnt);\\r\\n\\r\\n    for (uint i = 0; i < _poolCnt; i ++) {\\r\\n      _weights[i] = votes[_tokenId][_poolVote[i]];\\r\\n    }\\r\\n\\r\\n    _vote(_tokenId, _poolVote, _weights);\\r\\n  }\\r\\n\\r\\n  function _vote(uint _tokenId, address[] memory _poolVote, int256[] memory _weights) internal {\\r\\n    _reset(_tokenId);\\r\\n    uint _poolCnt = _poolVote.length;\\r\\n    int256 _weight = int256(IVe(ve).balanceOfNFT(_tokenId));\\r\\n    int256 _totalVoteWeight = 0;\\r\\n    int256 _totalWeight = 0;\\r\\n    int256 _usedWeight = 0;\\r\\n\\r\\n    for (uint i = 0; i < _poolCnt; i++) {\\r\\n      _totalVoteWeight += _weights[i] > 0 ? _weights[i] : - _weights[i];\\r\\n    }\\r\\n\\r\\n    for (uint i = 0; i < _poolCnt; i++) {\\r\\n      address _pool = _poolVote[i];\\r\\n      address _gauge = gauges[_pool];\\r\\n\\r\\n      int256 _poolWeight = _weights[i] * _weight / _totalVoteWeight;\\r\\n      require(votes[_tokenId][_pool] == 0, \\\"duplicate pool\\\");\\r\\n      require(_poolWeight != 0, \\\"zero power\\\");\\r\\n      _updateFor(_gauge);\\r\\n\\r\\n      poolVote[_tokenId].push(_pool);\\r\\n\\r\\n      weights[_pool] += _poolWeight;\\r\\n      votes[_tokenId][_pool] += _poolWeight;\\r\\n      if (_poolWeight > 0) {\\r\\n        IBribe(bribes[_gauge])._deposit(uint(_poolWeight), _tokenId);\\r\\n      } else {\\r\\n        _poolWeight = - _poolWeight;\\r\\n      }\\r\\n      _usedWeight += _poolWeight;\\r\\n      _totalWeight += _poolWeight;\\r\\n      emit Voted(msg.sender, _tokenId, _poolWeight);\\r\\n    }\\r\\n    if (_usedWeight > 0) IVe(ve).voting(_tokenId);\\r\\n    totalWeight += uint(_totalWeight);\\r\\n    usedWeights[_tokenId] = uint(_usedWeight);\\r\\n  }\\r\\n\\r\\n  /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\\r\\n  function vote(uint tokenId, address[] calldata _poolVote, int256[] calldata _weights) external {\\r\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\r\\n    require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\r\\n    _vote(tokenId, _poolVote, _weights);\\r\\n  }\\r\\n\\r\\n  /// @dev Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\\r\\n  function whitelist(address _token, uint _tokenId) external {\\r\\n    require(_tokenId > 0, \\\"!token\\\");\\r\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\r\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\r\\n    _whitelist(_token);\\r\\n  }\\r\\n\\r\\n  function _whitelist(address _token) internal {\\r\\n    require(!isWhitelisted[_token], \\\"already whitelisted\\\");\\r\\n    isWhitelisted[_token] = true;\\r\\n    emit Whitelisted(msg.sender, _token);\\r\\n  }\\r\\n\\r\\n  /// @dev Add a token to a gauge/bribe as possible reward.\\r\\n  function registerRewardToken(address _token, address _gaugeOrBribe, uint _tokenId) external {\\r\\n    require(_tokenId > 0, \\\"!token\\\");\\r\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\r\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\r\\n    IMultiRewardsPool(_gaugeOrBribe).registerRewardToken(_token);\\r\\n  }\\r\\n\\r\\n  /// @dev Remove a token from a gauge/bribe allowed rewards list.\\r\\n  function removeRewardToken(address _token, address _gaugeOrBribe, uint _tokenId) external {\\r\\n    require(_tokenId > 0, \\\"!token\\\");\\r\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\r\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\r\\n    IMultiRewardsPool(_gaugeOrBribe).removeRewardToken(_token);\\r\\n  }\\r\\n\\r\\n  /// @dev Create gauge for given pool. Only for a pool with whitelisted tokens.\\r\\n  function createGauge(address _pool) external returns (address) {\\r\\n    require(gauges[_pool] == address(0x0), \\\"exists\\\");\\r\\n    require(IFactory(factory).isPair(_pool), \\\"!pool\\\");\\r\\n    (address tokenA, address tokenB) = IPair(_pool).tokens();\\r\\n    require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\r\\n\\r\\n    address[] memory allowedRewards = new address[](3);\\r\\n    allowedRewards[0] = tokenA;\\r\\n    allowedRewards[1] = tokenB;\\r\\n    if (token != tokenA && token != tokenB) {\\r\\n      allowedRewards[2] = token;\\r\\n    }\\r\\n\\r\\n    address _bribe = IBribeFactory(bribeFactory).createBribe(allowedRewards);\\r\\n    address _gauge = IGaugeFactory(gaugeFactory).createGauge(_pool, _bribe, ve, allowedRewards);\\r\\n    IERC20(token).safeIncreaseAllowance(_gauge, type(uint).max);\\r\\n    bribes[_gauge] = _bribe;\\r\\n    gauges[_pool] = _gauge;\\r\\n    poolForGauge[_gauge] = _pool;\\r\\n    isGauge[_gauge] = true;\\r\\n    _updateFor(_gauge);\\r\\n    pools.push(_pool);\\r\\n    emit GaugeCreated(_gauge, msg.sender, _bribe, _pool);\\r\\n    return _gauge;\\r\\n  }\\r\\n\\r\\n  /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\\r\\n  function attachTokenToGauge(uint tokenId, address account) external override {\\r\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\r\\n    if (tokenId > 0) {\\r\\n      IVe(ve).attachToken(tokenId);\\r\\n    }\\r\\n    emit Attach(account, msg.sender, tokenId);\\r\\n  }\\r\\n\\r\\n  /// @dev Emit deposit event for easily handling external actions.\\r\\n  function emitDeposit(uint tokenId, address account, uint amount) external override {\\r\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\r\\n    emit Deposit(account, msg.sender, tokenId, amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Detach given token.\\r\\n  function detachTokenFromGauge(uint tokenId, address account) external override {\\r\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\r\\n    if (tokenId > 0) {\\r\\n      IVe(ve).detachToken(tokenId);\\r\\n    }\\r\\n    emit Detach(account, msg.sender, tokenId);\\r\\n  }\\r\\n\\r\\n  /// @dev Emit withdraw event for easily handling external actions.\\r\\n  function emitWithdraw(uint tokenId, address account, uint amount) external override {\\r\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\r\\n    emit Withdraw(account, msg.sender, tokenId, amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Length of pools\\r\\n  function poolsLength() external view returns (uint) {\\r\\n    return pools.length;\\r\\n  }\\r\\n\\r\\n  /// @dev Add rewards to this contract. Usually it is DystMinter.\\r\\n  function notifyRewardAmount(uint amount) external override {\\r\\n    require(amount != 0, \\\"zero amount\\\");\\r\\n    uint _totalWeight = totalWeight;\\r\\n    // without votes rewards can not be added\\r\\n    require(_totalWeight != 0, \\\"!weights\\\");\\r\\n    // transfer the distro in\\r\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    // 1e18 adjustment is removed during claim\\r\\n    uint _ratio = amount * 1e18 / _totalWeight;\\r\\n    if (_ratio > 0) {\\r\\n      index += _ratio;\\r\\n    }\\r\\n    emit NotifyReward(msg.sender, token, amount);\\r\\n  }\\r\\n\\r\\n  /// @dev Update given gauges.\\r\\n  function updateFor(address[] memory _gauges) external {\\r\\n    for (uint i = 0; i < _gauges.length; i++) {\\r\\n      _updateFor(_gauges[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Update gauges by indexes in a range.\\r\\n  function updateForRange(uint start, uint end) public {\\r\\n    for (uint i = start; i < end; i++) {\\r\\n      _updateFor(gauges[pools[i]]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Update all gauges.\\r\\n  function updateAll() external {\\r\\n    updateForRange(0, pools.length);\\r\\n  }\\r\\n\\r\\n  /// @dev Update reward info for given gauge.\\r\\n  function updateGauge(address _gauge) external {\\r\\n    _updateFor(_gauge);\\r\\n  }\\r\\n\\r\\n  function _updateFor(address _gauge) internal {\\r\\n    address _pool = poolForGauge[_gauge];\\r\\n    int256 _supplied = weights[_pool];\\r\\n    if (_supplied > 0) {\\r\\n      uint _supplyIndex = supplyIndex[_gauge];\\r\\n      // get global index for accumulated distro\\r\\n      uint _index = index;\\r\\n      // update _gauge current position to global position\\r\\n      supplyIndex[_gauge] = _index;\\r\\n      // see if there is any difference that need to be accrued\\r\\n      uint _delta = _index - _supplyIndex;\\r\\n      if (_delta > 0) {\\r\\n        // add accrued difference for each supplied token\\r\\n        uint _share = uint(_supplied) * _delta / 1e18;\\r\\n        claimable[_gauge] += _share;\\r\\n      }\\r\\n    } else {\\r\\n      // new users are set to the default global state\\r\\n      supplyIndex[_gauge] = index;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Batch claim rewards from given gauges.\\r\\n  function claimRewards(address[] memory _gauges, address[][] memory _tokens) external {\\r\\n    for (uint i = 0; i < _gauges.length; i++) {\\r\\n      IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Batch claim rewards from given bribe contracts for given tokenId.\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external {\\r\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\r\\n    for (uint i = 0; i < _bribes.length; i++) {\\r\\n      IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Claim fees from given bribes.\\r\\n  function claimFees(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external {\\r\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\r\\n    for (uint i = 0; i < _bribes.length; i++) {\\r\\n      IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Move fees from deposited pools to bribes for given gauges.\\r\\n  function distributeFees(address[] memory _gauges) external {\\r\\n    for (uint i = 0; i < _gauges.length; i++) {\\r\\n      IGauge(_gauges[i]).claimFees();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Get emission from minter and notify rewards for given gauge.\\r\\n  function distribute(address _gauge) external override {\\r\\n    _distribute(_gauge);\\r\\n  }\\r\\n\\r\\n  function _distribute(address _gauge) internal lock {\\r\\n    IMinter(minter).updatePeriod();\\r\\n    _updateFor(_gauge);\\r\\n    uint _claimable = claimable[_gauge];\\r\\n    if (_claimable > IMultiRewardsPool(_gauge).left(token) && _claimable / DURATION > 0) {\\r\\n      claimable[_gauge] = 0;\\r\\n      IGauge(_gauge).notifyRewardAmount(token, _claimable);\\r\\n      emit DistributeReward(msg.sender, _gauge, _claimable);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Distribute rewards for all pools.\\r\\n  function distributeAll() external {\\r\\n    uint length = pools.length;\\r\\n    for (uint x; x < length; x++) {\\r\\n      _distribute(gauges[pools[x]]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function distributeForPoolsInRange(uint start, uint finish) external {\\r\\n    for (uint x = start; x < finish; x++) {\\r\\n      _distribute(gauges[pools[x]]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function distributeForGauges(address[] memory _gauges) external {\\r\\n    for (uint x = 0; x < _gauges.length; x++) {\\r\\n      _distribute(_gauges[x]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IVe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IVe {\\r\\n\\r\\n  enum DepositType {\\r\\n    DEPOSIT_FOR_TYPE,\\r\\n    CREATE_LOCK_TYPE,\\r\\n    INCREASE_LOCK_AMOUNT,\\r\\n    INCREASE_UNLOCK_TIME,\\r\\n    MERGE_TYPE\\r\\n  }\\r\\n\\r\\n  struct Point {\\r\\n    int128 bias;\\r\\n    int128 slope; // # -dweight / dt\\r\\n    uint ts;\\r\\n    uint blk; // block\\r\\n  }\\r\\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\\r\\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\\r\\n  * What we can do is to extrapolate ***At functions */\\r\\n\\r\\n  struct LockedBalance {\\r\\n    int128 amount;\\r\\n    uint end;\\r\\n  }\\r\\n\\r\\n  function token() external view returns (address);\\r\\n\\r\\n  function balanceOfNFT(uint) external view returns (uint);\\r\\n\\r\\n  function isApprovedOrOwner(address, uint) external view returns (bool);\\r\\n\\r\\n  function createLockFor(uint, uint, address) external returns (uint);\\r\\n\\r\\n  function userPointEpoch(uint tokenId) external view returns (uint);\\r\\n\\r\\n  function epoch() external view returns (uint);\\r\\n\\r\\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\r\\n\\r\\n  function pointHistory(uint loc) external view returns (Point memory);\\r\\n\\r\\n  function checkpoint() external;\\r\\n\\r\\n  function depositFor(uint tokenId, uint value) external;\\r\\n\\r\\n  function attachToken(uint tokenId) external;\\r\\n\\r\\n  function detachToken(uint tokenId) external;\\r\\n\\r\\n  function voting(uint tokenId) external;\\r\\n\\r\\n  function abstain(uint tokenId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IVoter {\\r\\n\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  function attachTokenToGauge(uint _tokenId, address account) external;\\r\\n\\r\\n  function detachTokenFromGauge(uint _tokenId, address account) external;\\r\\n\\r\\n  function emitDeposit(uint _tokenId, address account, uint amount) external;\\r\\n\\r\\n  function emitWithdraw(uint _tokenId, address account, uint amount) external;\\r\\n\\r\\n  function distribute(address _gauge) external;\\r\\n\\r\\n  function notifyRewardAmount(uint amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n  /**\\r\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n   */\\r\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in ``owner``'s account.\\r\\n   */\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IGauge {\\r\\n\\r\\n  function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n  function getReward(address account, address[] memory tokens) external;\\r\\n\\r\\n  function claimFees() external returns (uint claimed0, uint claimed1);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFactory {\\r\\n  function treasury() external view returns (address);\\r\\n\\r\\n  function isPair(address pair) external view returns (bool);\\r\\n\\r\\n  function getInitializable() external view returns (address, address, bool);\\r\\n\\r\\n  function isPaused() external view returns (bool);\\r\\n\\r\\n  function pairCodeHash() external pure returns (bytes32);\\r\\n\\r\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n\\r\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n  struct Observation {\\r\\n    uint timestamp;\\r\\n    uint reserve0Cumulative;\\r\\n    uint reserve1Cumulative;\\r\\n  }\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n  function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n  function claimFees() external returns (uint, uint);\\r\\n\\r\\n  function tokens() external returns (address, address);\\r\\n\\r\\n  function token0() external returns (address);\\r\\n\\r\\n  function token1() external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IBribeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IBribeFactory {\\r\\n  function createBribe(address[] memory _allowedRewardTokens) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IGaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IGaugeFactory {\\r\\n  function createGauge(\\r\\n    address _pool,\\r\\n    address _bribe,\\r\\n    address _ve,\\r\\n    address[] memory _allowedRewardTokens\\r\\n  ) external returns (address);\\r\\n\\r\\n  function createGaugeSingle(\\r\\n    address _pool,\\r\\n    address _bribe,\\r\\n    address _ve,\\r\\n    address _voter,\\r\\n    address[] memory _allowedRewardTokens\\r\\n  ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMinter {\\r\\n\\r\\n  function updatePeriod() external returns (uint);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IBribe {\\r\\n\\r\\n  function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n  function _deposit(uint amount, uint tokenId) external;\\r\\n\\r\\n  function _withdraw(uint amount, uint tokenId) external;\\r\\n\\r\\n  function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMultiRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMultiRewardsPool {\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function derivedSupply() external view returns (uint);\\r\\n\\r\\n  function derivedBalances(address account) external view returns (uint);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n  function rewardTokens(uint id) external view returns (address);\\r\\n\\r\\n  function isRewardToken(address token) external view returns (bool);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint);\\r\\n\\r\\n  function derivedBalance(address account) external view returns (uint);\\r\\n\\r\\n  function left(address token) external view returns (uint);\\r\\n\\r\\n  function earned(address token, address account) external view returns (uint);\\r\\n\\r\\n  function registerRewardToken(address token) external;\\r\\n\\r\\n  function removeRewardToken(address token) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nabstract contract Reentrancy {\\r\\n\\r\\n  /// @dev simple re-entrancy check\\r\\n  uint internal _unlocked = 1;\\r\\n\\r\\n  modifier lock() {\\r\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\r\\n    _unlocked = 2;\\r\\n    _;\\r\\n    _unlocked = 1;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n    (bool success, bytes memory returndata) = target.call(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeForGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distributeForPoolsInRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DystVoter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000060fa7ad32c510f12550c7a967999810dafc56970000000000000000000000001d21db6cde1b18c7e47b0f7f42f4b3f68b9beec9000000000000000000000000719bfe5213af9c2523e9f46b86cc70eb8b7f530f0000000000000000000000007add42d9c53df14c1bc2507034f63b0ac924345f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}