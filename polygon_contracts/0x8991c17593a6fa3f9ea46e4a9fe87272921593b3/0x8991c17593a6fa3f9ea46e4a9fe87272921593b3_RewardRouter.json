{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reward/RewardRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/token/TransferHelper.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../core/interfaces/IMvlpManager.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ISwapRouter.sol\\\";\\n\\ncontract RewardRouter is ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    bool public isInitialized;\\n\\n    address public weth;\\n\\n\\n    ISwapRouter public immutable swapRouter;\\n\\n    address public vault;\\n    address public swapToken;\\n    address public mvx;\\n    address public esMvx;\\n    address public bnMvx;\\n\\n    address public mvlp; // MVX Liquidity Provider token\\n\\n    address public stakedMvxTracker;\\n    address public bonusMvxTracker;\\n    address public feeMvxTracker;\\n\\n    address public stakedMvlpTracker;\\n    address public feeMvlpTracker;\\n\\n    address public mvlpManager;\\n\\n    address public mvxVester;\\n    address public mvlpVester;\\n\\n    mapping(address => address) public pendingReceivers;\\n\\n    event StakeMvx(address account, address token, uint256 amount);\\n    event UnstakeMvx(address account, address token, uint256 amount);\\n\\n    event StakeMvlp(address account, uint256 amount);\\n    event UnstakeMvlp(address account, uint256 amount);\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    uint24 public swapPoolFee; //10000 %1\\n\\n    constructor(address _swapRouter,\\n        address _weth,\\n        address _mvx,\\n        address _esMvx,\\n        address _bnMvx,\\n        address _mvlp,       \\n        address _swapToken,\\n        address _vault,\\n        uint24  _swapPoolFee    \\n    ) public{\\n        swapRouter = ISwapRouter(_swapRouter);\\n        weth = _weth;\\n        mvx = _mvx;\\n        esMvx = _esMvx;\\n        bnMvx = _bnMvx;\\n        mvlp = _mvlp;        \\n        swapToken = _swapToken;\\n        vault = _vault;\\n        swapPoolFee = _swapPoolFee;\\n    }\\n\\n    function initialize(\\n        address _stakedMvxTracker,\\n        address _bonusMvxTracker,\\n        address _feeMvxTracker,\\n        address _feeMvlpTracker,\\n        address _stakedMvlpTracker,\\n        address _mvlpManager,\\n        address _mvxVester,\\n        address _mvlpVester\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"RewardRouter: already initialized\\\");\\n        isInitialized = true;\\n\\n        stakedMvxTracker = _stakedMvxTracker;\\n        bonusMvxTracker = _bonusMvxTracker;\\n        feeMvxTracker = _feeMvxTracker;\\n\\n        feeMvlpTracker = _feeMvlpTracker;\\n        stakedMvlpTracker = _stakedMvlpTracker;\\n\\n        mvlpManager = _mvlpManager;\\n\\n        mvxVester = _mvxVester;\\n        mvlpVester = _mvlpVester;\\n\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function setSwapToken(address _swapToken)external onlyGov  {\\n        swapToken = _swapToken;\\n    }\\n\\n    function setSwapPoolFee(uint24  _swapPoolFee)external onlyGov  {\\n        swapPoolFee = _swapPoolFee;\\n    }\\n\\n    function batchStakeMvxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\\n        address _mvx = mvx;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _stakeMvx(msg.sender, _accounts[i], _mvx, _amounts[i]);\\n        }\\n    }\\n\\n    function stakeMvxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n        _stakeMvx(msg.sender, _account, mvx, _amount);\\n    }\\n\\n    function stakeMvx(uint256 _amount) external nonReentrant {\\n        _stakeMvx(msg.sender, msg.sender, mvx, _amount);\\n    }\\n\\n    function stakeEsMvx(uint256 _amount) external nonReentrant {\\n        _stakeMvx(msg.sender, msg.sender, esMvx, _amount);\\n    }\\n\\n    function unstakeMvx(uint256 _amount) external nonReentrant {\\n        _unstakeMvx(msg.sender, mvx, _amount, true);\\n    }\\n\\n    function unstakeEsMvx(uint256 _amount) external nonReentrant {\\n        _unstakeMvx(msg.sender, esMvx, _amount, true);\\n    }\\n\\n    function mintAndStakeMvlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdm,\\n        uint256 _minMvlp\\n    ) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        address account = msg.sender;\\n        uint256 mvlpAmount = IMvlpManager(mvlpManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdm, _minMvlp);\\n        IRewardTracker(feeMvlpTracker).stakeForAccount(account, account, mvlp, mvlpAmount);\\n        IRewardTracker(stakedMvlpTracker).stakeForAccount(account, account, feeMvlpTracker, mvlpAmount);\\n\\n        emit StakeMvlp(account, mvlpAmount);\\n\\n        return mvlpAmount;\\n    }\\n\\n    function mintAndStakeMvlpETH(uint256 _minUsdm, uint256 _minMvlp) external payable nonReentrant returns (uint256) {\\n        require(msg.value > 0, \\\"RewardRouter: invalid msg.value\\\");\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n        return _mintAndStakeMvlpETH(msg.value,_minUsdm, _minMvlp);\\n    }\\n\\n    function _mintAndStakeMvlpETH(uint256 _amount,uint256 _minUsdm, uint256 _minMvlp) private returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IERC20(weth).approve(mvlpManager, _amount);\\n\\n        address account = msg.sender;\\n        uint256 mvlpAmount = IMvlpManager(mvlpManager).addLiquidityForAccount(address(this), account, weth, _amount, _minUsdm, _minMvlp);\\n\\n        IRewardTracker(feeMvlpTracker).stakeForAccount(account, account, mvlp, mvlpAmount);\\n        IRewardTracker(stakedMvlpTracker).stakeForAccount(account, account, feeMvlpTracker, mvlpAmount);\\n\\n        emit StakeMvlp(account, mvlpAmount);\\n\\n        return mvlpAmount;\\n    }\\n\\n    function unstakeAndRedeemMvlp(\\n        address _tokenOut,\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external nonReentrant returns (uint256) {\\n        require(_mvlpAmount > 0, \\\"RewardRouter: invalid _mvlpAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedMvlpTracker).unstakeForAccount(account, feeMvlpTracker, _mvlpAmount, account);\\n        IRewardTracker(feeMvlpTracker).unstakeForAccount(account, mvlp, _mvlpAmount, account);\\n        uint256 amountOut = IMvlpManager(mvlpManager).removeLiquidityForAccount(account, _tokenOut, _mvlpAmount, _minOut, _receiver);\\n\\n        emit UnstakeMvlp(account, _mvlpAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function unstakeAndRedeemMvlpETH(\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external nonReentrant returns (uint256) {\\n        require(_mvlpAmount > 0, \\\"RewardRouter: invalid _mvlpAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedMvlpTracker).unstakeForAccount(account, feeMvlpTracker, _mvlpAmount, account);\\n        IRewardTracker(feeMvlpTracker).unstakeForAccount(account, mvlp, _mvlpAmount, account);\\n        uint256 amountOut = IMvlpManager(mvlpManager).removeLiquidityForAccount(account, weth, _mvlpAmount, _minOut, address(this));\\n\\n        IWETH(weth).withdraw(amountOut);\\n\\n        _receiver.sendValue(amountOut);\\n\\n        emit UnstakeMvlp(account, _mvlpAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function claim() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n\\n        IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimEsMvx() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimFees() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function compound() external nonReentrant {\\n        _compound(msg.sender);\\n    }\\n\\n    function compoundForAccount(address _account) external nonReentrant onlyGov {\\n        _compound(_account);\\n    }\\n\\n    function handleRewards(\\n        bool _shouldClaimMvx,\\n        bool _shouldStakeMvx,\\n        bool _shouldClaimEsMvx,\\n        bool _shouldStakeEsMvx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth,\\n        bool _shouldAddIntoMVLP,\\n        bool _shouldConvertMvxAndStake\\n    ) external nonReentrant returns (uint256 amountOut) {\\n        address account = msg.sender;\\n\\n        uint256 mvxAmount = 0;\\n        if (_shouldClaimMvx) {\\n            uint256 mvxAmount0 = IVester(mvxVester).claimForAccount(account, account);\\n            uint256 mvxAmount1 = IVester(mvlpVester).claimForAccount(account, account);\\n            mvxAmount = mvxAmount0.add(mvxAmount1);\\n        }\\n\\n        if (_shouldStakeMvx && mvxAmount > 0) {\\n            _stakeMvx(account, account, mvx, mvxAmount);\\n        }\\n\\n        uint256 esMvxAmount = 0;\\n        if (_shouldClaimEsMvx) {\\n            uint256 esMvxAmount0 = IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n            uint256 esMvxAmount1 = IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n            esMvxAmount = esMvxAmount0.add(esMvxAmount1);\\n        }\\n\\n        if (_shouldStakeEsMvx && esMvxAmount > 0) {\\n            _stakeMvx(account, account, esMvx, esMvxAmount);\\n        }\\n\\n        if (_shouldStakeMultiplierPoints) {\\n            uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(account, account);\\n            if (bnMvxAmount > 0) {\\n                IRewardTracker(feeMvxTracker).stakeForAccount(account, account, bnMvx, bnMvxAmount);\\n            }\\n        }\\n\\n        if (_shouldClaimWeth) {\\n            if (_shouldConvertWethToEth || _shouldAddIntoMVLP || _shouldConvertMvxAndStake) {\\n                uint256 weth0 = IRewardTracker(feeMvxTracker).claimForAccount(account, address(this));\\n                uint256 weth1 = IRewardTracker(feeMvlpTracker).claimForAccount(account, address(this));\\n\\n                uint256 wethAmount = weth0.add(weth1);\\n                \\n\\n                if(_shouldAddIntoMVLP){\\n                    amountOut = _mintAndStakeMvlpETH(wethAmount,0,0);\\n                }else if(_shouldConvertMvxAndStake){\\n                    //convert weth->swapToken->mvx and stake\\n\\n                    IERC20(weth).safeTransfer(vault, wethAmount);\\n\\n                    //convert weth->swapToken via vault\\n                    uint256 swapAmountOut = IVault(vault).swap(weth, swapToken, address(this));\\n\\n                    //convert swapToken->mvx via uniswap\\n                     uint256 mvxAmountOut = _swapExactInputSingle(swapAmountOut);\\n\\n                    if (mvxAmountOut > 0) {\\n                        TransferHelper.safeApprove(mvx, stakedMvxTracker, mvxAmountOut);\\n                        _stakeMvx(address(this), account, mvx, mvxAmountOut);\\n                        amountOut = mvxAmountOut;\\n                    }\\n\\n                }else{\\n                    IWETH(weth).withdraw(wethAmount);\\n                    payable(account).sendValue(wethAmount);\\n                }\\n            } else {\\n                IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n                IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n            }\\n        }\\n    }\\n\\n    function _swapExactInputSingle(uint256 amountIn) private returns (uint256 amountOut) {\\n        TransferHelper.safeApprove(swapToken, address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: swapToken,\\n                tokenOut: mvx,\\n                fee: swapPoolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _compound(_accounts[i]);\\n        }\\n    }\\n\\n    function signalTransfer(address _receiver) external nonReentrant {\\n        require(IERC20(mvxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(mvlpVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        _validateReceiver(_receiver);\\n        pendingReceivers[msg.sender] = _receiver;\\n    }\\n\\n    function acceptTransfer(address _sender) external nonReentrant {\\n        require(IERC20(mvxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(mvlpVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        address receiver = msg.sender;\\n        require(pendingReceivers[_sender] == receiver, \\\"RewardRouter: transfer not signalled\\\");\\n        delete pendingReceivers[_sender];\\n\\n        _validateReceiver(receiver);\\n        _compound(_sender);\\n\\n        uint256 stakedMvx = IRewardTracker(stakedMvxTracker).depositBalances(_sender, mvx);\\n        if (stakedMvx > 0) {\\n            _unstakeMvx(_sender, mvx, stakedMvx, false);\\n            _stakeMvx(_sender, receiver, mvx, stakedMvx);\\n        }\\n\\n        uint256 stakedEsMvx = IRewardTracker(stakedMvxTracker).depositBalances(_sender, esMvx);\\n        if (stakedEsMvx > 0) {\\n            _unstakeMvx(_sender, esMvx, stakedEsMvx, false);\\n            _stakeMvx(_sender, receiver, esMvx, stakedEsMvx);\\n        }\\n\\n        uint256 stakedBnMvx = IRewardTracker(feeMvxTracker).depositBalances(_sender, bnMvx);\\n        if (stakedBnMvx > 0) {\\n            IRewardTracker(feeMvxTracker).unstakeForAccount(_sender, bnMvx, stakedBnMvx, _sender);\\n            IRewardTracker(feeMvxTracker).stakeForAccount(_sender, receiver, bnMvx, stakedBnMvx);\\n        }\\n\\n        uint256 esMvxBalance = IERC20(esMvx).balanceOf(_sender);\\n        if (esMvxBalance > 0) {\\n            IERC20(esMvx).transferFrom(_sender, receiver, esMvxBalance);\\n        }\\n\\n        uint256 mvlpAmount = IRewardTracker(feeMvlpTracker).depositBalances(_sender, mvlp);\\n        if (mvlpAmount > 0) {\\n            IRewardTracker(stakedMvlpTracker).unstakeForAccount(_sender, feeMvlpTracker, mvlpAmount, _sender);\\n            IRewardTracker(feeMvlpTracker).unstakeForAccount(_sender, mvlp, mvlpAmount, _sender);\\n\\n            IRewardTracker(feeMvlpTracker).stakeForAccount(_sender, receiver, mvlp, mvlpAmount);\\n            IRewardTracker(stakedMvlpTracker).stakeForAccount(receiver, receiver, feeMvlpTracker, mvlpAmount);\\n        }\\n\\n        IVester(mvxVester).transferStakeValues(_sender, receiver);\\n        IVester(mvlpVester).transferStakeValues(_sender, receiver);\\n    }\\n\\n    function _validateReceiver(address _receiver) private view {\\n        require(IRewardTracker(stakedMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(bonusMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: bonusMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(bonusMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: bonusMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(mvxVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(mvxVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(stakedMvlpTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedMvlpTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedMvlpTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedMvlpTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeMvlpTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeMvlpTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeMvlpTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeMvlpTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(mvlpVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(mvlpVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IERC20(mvxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: mvxVester.balance > 0\\\");\\n        require(IERC20(mvlpVester).balanceOf(_receiver) == 0, \\\"RewardRouter: mvlpVester.balance > 0\\\");\\n    }\\n\\n    function _compound(address _account) private {\\n        _compoundMvx(_account);\\n        _compoundMvlp(_account);\\n    }\\n\\n    function _compoundMvx(address _account) private {\\n        uint256 esMvxAmount = IRewardTracker(stakedMvxTracker).claimForAccount(_account, _account);\\n        if (esMvxAmount > 0) {\\n            _stakeMvx(_account, _account, esMvx, esMvxAmount);\\n        }\\n\\n        uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(_account, _account);\\n        if (bnMvxAmount > 0) {\\n            IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bnMvx, bnMvxAmount);\\n        }\\n    }\\n\\n    function _compoundMvlp(address _account) private {\\n        uint256 esMvxAmount = IRewardTracker(stakedMvlpTracker).claimForAccount(_account, _account);\\n        if (esMvxAmount > 0) {\\n            _stakeMvx(_account, _account, esMvx, esMvxAmount);\\n        }\\n    }\\n\\n    function _stakeMvx(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IRewardTracker(stakedMvxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n        IRewardTracker(bonusMvxTracker).stakeForAccount(_account, _account, stakedMvxTracker, _amount);\\n        IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bonusMvxTracker, _amount);\\n\\n        emit StakeMvx(_account, _token, _amount);\\n    }\\n\\n    function _unstakeMvx(\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        bool _shouldReduceBnMvx\\n    ) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        uint256 balance = IRewardTracker(stakedMvxTracker).stakedAmounts(_account);\\n\\n        IRewardTracker(feeMvxTracker).unstakeForAccount(_account, bonusMvxTracker, _amount, _account);\\n        IRewardTracker(bonusMvxTracker).unstakeForAccount(_account, stakedMvxTracker, _amount, _account);\\n        IRewardTracker(stakedMvxTracker).unstakeForAccount(_account, _token, _amount, _account);\\n\\n        if (_shouldReduceBnMvx) {\\n            uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(_account, _account);\\n            if (bnMvxAmount > 0) {\\n                IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bnMvx, bnMvxAmount);\\n            }\\n\\n            uint256 stakedBnMvx = IRewardTracker(feeMvxTracker).depositBalances(_account, bnMvx);\\n            if (stakedBnMvx > 0) {\\n                uint256 reductionAmount = stakedBnMvx.mul(_amount).div(balance);\\n                IRewardTracker(feeMvxTracker).unstakeForAccount(_account, bnMvx, reductionAmount, _account);\\n                IMintable(bnMvx).burn(_account, reductionAmount);\\n            }\\n        }\\n\\n        emit UnstakeMvx(_account, _token, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IVester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IMintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IMvlpManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IMvlpManager {\\n    function mvlp() external view returns (address);\\n    function usdm() external view returns (address);\\n    function vault() external view returns (IVault);\\n    function cooldownDuration() external returns (uint256);\\n    function getAumInUsdm(bool maximise) external view returns (uint256);\\n    function lastAddedAt(address _account) external returns (uint256);\\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdm, uint256 _minMvlp) external returns (uint256);\\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdm, uint256 _minMvlp) external returns (uint256);\\n    function removeLiquidity(address _tokenOut, uint256 _mvlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _mvlpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external;\\n    function setCooldownDuration(uint256 _cooldownDuration) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdm() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdmAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdmAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken,\\n        address _indexToken\\n    ) external returns (bool);\\n\\n    function validateIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external view;\\n\\n    function validateDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external view;\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function getEntryFundingRate(\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getPositionFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getFundingFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _usdmAmount\\n    ) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esMvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnMvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_swapPoolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMvlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMvx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeMvlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeMvx\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchCompoundForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeMvxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnMvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"compoundForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esMvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMvlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldClaimMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimEsMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeEsMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMultiplierPoints\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimWeth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertWethToEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldAddIntoMVLP\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertMvxAndStake\",\"type\":\"bool\"}],\"name\":\"handleRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMvlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedMvlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvxVester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlpVester\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMvlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMvlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMvlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMvlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlpVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvxVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_swapPoolFee\",\"type\":\"uint24\"}],\"name\":\"setSwapPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"}],\"name\":\"setSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"signalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMvxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMvlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPoolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mvlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMvlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mvlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMvlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000002760e46d9bb43dafcbecaad1f64b93207f9f0ed7000000000000000000000000d1b2f8dff8437be57430ee98767d512f252ead61000000000000000000000000b6bdd10a12286401c8dfac93fe933c7abbd6d0af0000000000000000000000009f4f8bc00f48663b7c204c96b932c29ccc43a2e80000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000032848e2d3aecfa7364595609fb050a301050a6b40000000000000000000000000000000000000000000000000000000000002710", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}