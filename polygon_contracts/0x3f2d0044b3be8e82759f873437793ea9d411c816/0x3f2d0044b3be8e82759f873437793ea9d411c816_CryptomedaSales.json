{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _setOwner(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _setOwner(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n// File: CMSale.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface ERC20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface Lootbox {\r\n  function getLootboxStatus(uint256 _lootboxId) external view returns (uint256);\r\n  function openLootbox(\r\n    uint256 _lootboxId,\r\n    address _buyer,\r\n    uint256 _quantity) external returns (uint256[] memory);\r\n}\r\n\r\ncontract CryptomedaSales is Ownable {\r\n\r\n  event AddCurrency(uint256 currencyID, string tokenName, address tokenAddress);\r\n  event RemoveCurrency(uint256 currencyID);\r\n  event CreateSale(uint256 saleID, uint256 startTime, uint256 endTime, uint256 cap, uint256 price, uint256 currencyID, uint256 sharedCapID, uint256 lootboxID);\r\n  event DeleteSale(uint256 saleID);\r\n  event CloseSale(uint256 saleID, uint256 closeTime, uint256 soldAmount, uint256 raisedAmount, address cmdWallet);\r\n  event AddSharedCap(uint256 sharedCapID, string name, uint256 cap, uint256 maxSalesCount);\r\n  event RemoveSharedCap(uint256 sharedCapID);\r\n  event Buy(uint256 saleID, uint256 quantity, uint256 serialNo, address indexed buyer, uint256[] lbAssetId);\r\n  event ToggleAdmin(address indexed account, bool isAdmin);\r\n  event ToggleSuperAdmin(address indexed account, bool isSuperAdmin);\r\n  event ChangeCmdWallet(address newCmdWallet);\r\n  event ChangeBurnWallet(address newCmdWallet);\r\n  event ChangeLootboxContractAddress(address newLootboxContractAddress);\r\n  event ChangeBurnPct(uint256 newBurnPct);\r\n  event ChangeMaxSaleID(uint256 newMaxSaleID);\r\n  event ChangeMaxSharedCapID(uint256 newMaxSharedCapID);\r\n  event ChangeMaxLbBuyQuantity(uint256 maxSharedCapID);\r\n  event ChangePrice(uint256 saleID, uint256 originalPrice, uint256 newPrice);\r\n  event IncreaseCapByAmount(uint256 saleID, uint256 addAmount, uint256 newCap);\r\n  event IncreaseEndTimeBySeconds(uint256 saleID, uint256 addSeconds, uint256 newEndTime);\r\n\r\n  struct Currency {\r\n    bytes12 currName;\r\n    address currAddress;\r\n  }\r\n  Currency[] currencies;\r\n\r\n  struct Sale {\r\n    uint256 price;\r\n    uint8 currencyID;\r\n    uint16 priceDeltaPerMille; \r\n    uint32 startTime;\r\n    uint32 endTime;\r\n    uint24 cap;\r\n    uint16 sharedCapID;\r\n    uint16 lootboxID;\r\n    bool isActive;\r\n    uint24 soldAmount;\r\n    uint256 raisedAmount; \r\n    uint256 originalPrice;\r\n  }\r\n  mapping (uint256 => Sale) public sales;\r\n\r\n  struct SharedCap {\r\n    uint24 cap;\r\n    uint8 maxSalesCnt;\r\n    uint8 salesCnt;\r\n    uint192 saleIDs;\r\n    uint24 soldAmount;\r\n  }\r\n  mapping (uint256 => SharedCap) public sharedCaps;\r\n\r\n  mapping (address => bool) public isAdmin;\r\n  mapping (address => bool) public isSuperAdmin;\r\n\r\n  ERC20 ERC20Interface;\r\n  Lootbox LootboxInterface;\r\n\r\n  address public lootboxContractAddress;\r\n  address public cmdWallet;\r\n  address public burnWallet;\r\n\r\n  uint16 public maxSaleID;\r\n  uint16 public maxSharedCapID;\r\n  uint8 public maxLbBuyQuantity;\r\n  uint8 public burnPct;\r\n\r\n  modifier onlyAdmin() {\r\n      require(isAdmin[msg.sender] || isSuperAdmin[msg.sender] || msg.sender == owner(), \"Not admin\");\r\n      _;\r\n  }\r\n  modifier onlySuperAdmin() {\r\n      require(isSuperAdmin[msg.sender] || msg.sender == owner(), \"Not superadmin\");\r\n      _;\r\n  }\r\n  modifier onlyValidAddress(address _recipient) {\r\n    require(_recipient != address(0) && _recipient != address(this), \"Invalid address\");\r\n    _;\r\n  }\r\n  modifier _positive(uint256 amount) {\r\n    require(amount > 0, \"Zero amount\");\r\n    _;\r\n  }\r\n  modifier _hasAllowance(address allower_, uint256 amount_, address tokenAddress_) {\r\n    // Make sure the allower has provided the right allowance.\r\n    ERC20Interface = ERC20(tokenAddress_);\r\n    uint256 ourAllowance = ERC20Interface.allowance(allower_, address(this));\r\n    require(\r\n      amount_ <= ourAllowance,\r\n      \"Not enough allowance\"\r\n    );\r\n    _;\r\n  }\r\n  modifier _realAddress(address addr) {\r\n    require(addr != address(0), \"Zero address\");\r\n    _;\r\n  }\r\n  modifier onlyValidSaleID(uint256 _saleID) {\r\n    require(_saleID > 0 && _saleID <= maxSaleID, \"Invalid saleID\");\r\n    _;\r\n  }\r\n  modifier onlyActiveSale(uint256 _saleID) {\r\n    require(sales[_saleID].isActive, \"Inactive sale\");\r\n    _;\r\n  }\r\n\r\n  constructor () {\r\n    burnPct = 5;\r\n    maxLbBuyQuantity = 30;\r\n    // Populate currencies with MATIC, TECH and USDC\r\n    currencies.push(Currency(bytes12(bytes(\"MATIC\")),address(0)));\r\n    currencies.push(Currency(bytes12(bytes(\"TECH\")),0x6286A9e6f7e745A6D884561D88F94542d6715698));\r\n    currencies.push(Currency(bytes12(bytes(\"USDC\")),0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174));\r\n  }\r\n\r\n  /// @notice add currency\r\n  function addCurrencies (string[] calldata _names, address[] calldata _addresses) external onlyAdmin {\r\n    uint256 count_ = _names.length;\r\n    require(count_ == _addresses.length,\"Names and addresses lengths don't match\");\r\n    uint256 currLength_ = currencies.length;\r\n    for (uint256 i=0; i<count_; i++) {\r\n      for (uint j=0; j<currLength_; j++) {\r\n        require(_addresses[i] != currencies[j].currAddress, \"Currency address already added\");\r\n      }\r\n      currencies.push(Currency(bytes12(bytes(_names[i])),_addresses[i]));\r\n      emit AddCurrency(currencies.length-1,string(abi.encodePacked(_names[i])),_addresses[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice remove last currency\r\n  function removeLastCurrency() external onlyAdmin {\r\n    uint256 currId_ = currencies.length-1;\r\n    require(currId_ > 2, \"Cannot remove default currencies (MATIC,TECH,USDC)\");\r\n    currencies.pop();\r\n    emit RemoveCurrency(currId_);\r\n  }\r\n\r\n  /// @notice create sale\r\n  function createSale(\r\n    uint256 _price,\r\n    uint256 _currencyID,\r\n    uint256 _priceDeltaPerMille,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _cap,\r\n    uint256 _sharedCapID,\r\n    uint256 _lootboxID\r\n  )\r\n    external\r\n    onlyAdmin\r\n  {\r\n    require(_currencyID < currencies.length, \"Invalid currencyID value\");\r\n    require(_price > 0 && _cap > 0, \"Invalid price or cap value\");\r\n    require(block.timestamp < _startTime && _startTime < _endTime, \"Invalid startTime or endTime value\");\r\n    require(_priceDeltaPerMille <= 1000, \"Invalid permille value\");\r\n    require(_sharedCapID <= maxSharedCapID, \"Invalid sharedCapID value\");\r\n    maxSaleID++;\r\n    if (_sharedCapID > 0) {\r\n      SharedCap storage sharedCap_ = sharedCaps[_sharedCapID];\r\n      require(sharedCap_.salesCnt < sharedCap_.maxSalesCnt, \"Cannot assign more sales to specified sharedCap\");\r\n      require(_cap <= sharedCap_.cap, \"Indiviual sale's cap cannot exceed shared cap\");\r\n      uint256 saleIDs_ = sharedCap_.saleIDs;\r\n      saleIDs_ |= uint256(maxSaleID) << (sharedCap_.salesCnt * 16);\r\n      sharedCap_.salesCnt++;\r\n      sharedCap_.saleIDs = uint192(saleIDs_);\r\n    }\r\n    if (_lootboxID > 0)\r\n      require(_getLootboxStatus(_lootboxID)==1, \"Invalid lootbox status\");\r\n    //\r\n    Sale memory sale_ = Sale({\r\n      price: _price,\r\n      currencyID: uint8(_currencyID),\r\n      priceDeltaPerMille: uint16(_priceDeltaPerMille),\r\n      startTime: uint32(_startTime),\r\n      endTime: uint32(_endTime),\r\n      cap: uint24(_cap),\r\n      sharedCapID: uint16(_sharedCapID),\r\n      lootboxID: uint16(_lootboxID),\r\n      isActive: true,\r\n      soldAmount: 0,\r\n      raisedAmount: 0,\r\n      originalPrice: _price});\r\n    sales[maxSaleID] = sale_;\r\n    //\r\n    emit CreateSale(\r\n      maxSaleID,\r\n      _startTime,\r\n      _endTime,\r\n      _cap,\r\n      _price,\r\n      _currencyID,\r\n      _sharedCapID,\r\n      _lootboxID);\r\n  }\r\n\r\n  function deleteSales(uint256[] calldata _saleId) external onlyAdmin {\r\n    uint256 count_ = _saleId.length;\r\n    for (uint256 i = 0; i < count_; i++) {\r\n      if (\r\n        sales[_saleId[i]].startTime > block.timestamp ||\r\n        sales[_saleId[i]].isActive == false)\r\n      {\r\n        delete sales[_saleId[i]];\r\n        emit DeleteSale(_saleId[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function closeSale(uint256 _saleID)\r\n    external\r\n    onlyAdmin\r\n    onlyActiveSale(_saleID)\r\n    onlyValidAddress(cmdWallet)\r\n    onlyValidAddress(burnWallet)\r\n  {\r\n    Sale storage sale_ = sales[_saleID];    \r\n    sale_.isActive = false;\r\n    uint256 amount_ = sale_.raisedAmount;\r\n    if (amount_ > 0) {\r\n      uint256 currencyID_ = sale_.currencyID;\r\n      if (currencyID_ == 0) {\r\n        //cmdWallet.transfer(amount_);\r\n        require(payable(cmdWallet).send(amount_), \"Matic transfer to cmdWallet failed\");\r\n      } else {\r\n        address currAddress_ = currencies[currencyID_].currAddress;\r\n        if (currencyID_ == 1 && burnPct > 0) {\r\n          uint256 burnAmount_ = amount_ * burnPct / 100;\r\n          require(_tokenTransfer(burnWallet, burnAmount_, currAddress_), \"Token transfer to burnWallet failed\");\r\n          amount_ -= burnAmount_;\r\n        }\r\n        require(_tokenTransfer(cmdWallet, amount_, currAddress_), \"Token transfer to cmdWallet failed\");\r\n      }\r\n    }\r\n    emit CloseSale(_saleID, block.timestamp, sale_.soldAmount, sale_.raisedAmount, cmdWallet);\r\n  }\r\n\r\n  /// @notice add shared cap\r\n  function addSharedCap (string calldata _name, uint256 _cap, uint256 _maxSalesCnt) external onlyAdmin {\r\n    require(_maxSalesCnt >= 2 && _maxSalesCnt <= currencies.length, \"Incorrect maxSalesCnt value\");\r\n    SharedCap memory sharedCap_ = SharedCap({\r\n      cap: uint24(_cap),\r\n      maxSalesCnt: uint8(_maxSalesCnt),\r\n      salesCnt: 0,\r\n      saleIDs: 0,\r\n      soldAmount: 0});\r\n    sharedCaps[++maxSharedCapID] = sharedCap_;\r\n    emit AddSharedCap(maxSharedCapID,string(abi.encodePacked(_name)),_cap, _maxSalesCnt);\r\n  }\r\n\r\n  /// @notice remove last shared cap\r\n  function removeLastSharedCap() external onlyAdmin {\r\n    if (_removeSharedCap(maxSharedCapID)) {\r\n      maxSharedCapID--;\r\n    }\r\n  }\r\n\r\n  /// @notice remove shared cap\r\n  function removeSharedCap(uint256[] calldata _sharedCapIds) external onlyAdmin {\r\n    uint256 count_ = _sharedCapIds.length;\r\n    for (uint256 i = 0; i < count_; i++) {\r\n      _removeSharedCap(_sharedCapIds[i]);\r\n    }\r\n  }\r\n\r\n  /// @notice buy item\r\n  function buy(uint256 _saleID, uint256 _quantity)\r\n    external\r\n    onlyActiveSale(_saleID)\r\n    _positive(_quantity)\r\n    payable\r\n  {\r\n    Sale storage sale_ = sales[_saleID];\r\n    require (block.timestamp >= sale_.startTime && block.timestamp <= sale_.endTime, \"Out of sale's timeframe\"); \r\n    require (sale_.soldAmount + _quantity <= sale_.cap, \"Cannot exceed sale's cap\");\r\n    if (sale_.sharedCapID > 0) {\r\n      SharedCap storage sharedCap_ = sharedCaps[sale_.sharedCapID];\r\n      require (sharedCap_.soldAmount + _quantity <= sharedCap_.cap, \"Cannot exceed shared cap\");\r\n      sharedCap_.soldAmount += uint24(_quantity);\r\n    }\r\n    address buyer_ = msg.sender;\r\n    uint256[] memory lbAssetId_; \r\n    if (sale_.lootboxID > 0) {\r\n      require(_quantity <= maxLbBuyQuantity, \"Max lootbox quantity per transaction exceeded\");\r\n      lbAssetId_ = _openLootbox(sale_.lootboxID, buyer_, _quantity);\r\n      require(lbAssetId_.length > 0, \"Error when opening lootbox\");\r\n    } else {\r\n      lbAssetId_ = new uint256[](0);\r\n    }\r\n    uint256 price_ = sale_.price * _quantity;\r\n    sale_.soldAmount += uint24(_quantity);\r\n    sale_.raisedAmount += price_;\r\n    if (sale_.currencyID == 0) {\r\n      require(msg.value == price_, \"Insufficient matic value\");\r\n    } else {\r\n      require(_tokenTransferFrom(buyer_, address(this), price_, currencies[sale_.currencyID].currAddress), \"Error with token tranfer\");\r\n    }\r\n    emit Buy(_saleID, _quantity, sale_.soldAmount, buyer_, lbAssetId_);\r\n  }\r\n\r\n  function changePrice(uint256[] calldata _saleID, uint256[] calldata _newPrice)\r\n    external\r\n    onlyAdmin\r\n  {\r\n    uint256 count_ = _saleID.length;\r\n    require(_newPrice.length == count_, \"saleID and newPrice lengths don't match\");\r\n    for (uint256 i=0; i<count_; i++) {\r\n      require(\r\n        sales[_saleID[i]].isActive &&\r\n        sales[_saleID[i]].priceDeltaPerMille > 0 &&\r\n        _newPrice[i] > 0, \"Invalid saleID or newPrice\");\r\n      _changePrice(_saleID[i], _newPrice[i]);\r\n    }\r\n  }\r\n\r\n  function toggleAdmin(address _account) external onlySuperAdmin {\r\n    bool isAdmin_ = !isAdmin[_account];\r\n    isAdmin[_account] = isAdmin_;\r\n    emit ToggleAdmin(_account, isAdmin_);\r\n  }\r\n\r\n  function toggleSuperAdmin(address _account) external onlyOwner {\r\n    bool isSuperAdmin_ = !isSuperAdmin[_account];\r\n    isSuperAdmin[_account] = isSuperAdmin_;\r\n    emit ToggleSuperAdmin(_account, isSuperAdmin_);\r\n  }\r\n\r\n  function withdrawStuckTokens(uint256 _amount, address _tokenAddress) external onlyAdmin {\r\n    uint256 balance_ = ERC20(_tokenAddress).balanceOf(address(this));\r\n    require(_amount <= balance_, \"Token balance too low\");\r\n    uint256 withdrawalAmount_ = (_amount == 0 ? balance_ : _amount);\r\n    require(_tokenTransfer(owner(), withdrawalAmount_, _tokenAddress), \"Withdrawing stuck tokens failed\");\r\n  }\r\n\r\n  function withdrawStuckMatic(uint256 _amount) external onlyAdmin {\r\n    uint256 balance_ = address(this).balance;\r\n    require(_amount <= balance_, \"Matic balance too low\");\r\n    uint256 withdrawalAmount_ = (_amount == 0 ? balance_ : _amount);\r\n    require(payable(owner()).send(withdrawalAmount_), \"Withdrawing stuck matic failed\");\r\n  }\r\n\r\n  function changeLootboxContractAddress(address _newLootboxContractAddress)\r\n    external\r\n    onlySuperAdmin\r\n    onlyValidAddress(_newLootboxContractAddress)\r\n  {\r\n    lootboxContractAddress = _newLootboxContractAddress;\r\n    emit ChangeLootboxContractAddress(_newLootboxContractAddress);\r\n  }\r\n\r\n  function changeCmdWallet(address _newCmdWallet)\r\n    external\r\n    onlySuperAdmin\r\n    onlyValidAddress(_newCmdWallet)\r\n  {\r\n    cmdWallet = _newCmdWallet;\r\n    emit ChangeCmdWallet(_newCmdWallet);\r\n  }\r\n\r\n  function changeBurnWallet(address _newBurnWallet)\r\n    external\r\n    onlySuperAdmin\r\n    onlyValidAddress(_newBurnWallet)\r\n  {\r\n    burnWallet = _newBurnWallet;\r\n    emit ChangeBurnWallet(_newBurnWallet);\r\n  }\r\n\r\n  function changeBurnPct(uint256 _newBurnPct)\r\n    external\r\n    onlySuperAdmin\r\n  {\r\n    require(_newBurnPct>0 && _newBurnPct<=100, \"Invalid percentage value\");\r\n    burnPct = uint8(_newBurnPct);\r\n    emit ChangeBurnPct(_newBurnPct);\r\n  }\r\n\r\n  function changeMaxSaleID(uint256 _newMaxSaleID) external onlySuperAdmin {\r\n    maxSaleID = uint16(_newMaxSaleID) ;\r\n    emit ChangeMaxSaleID(_newMaxSaleID);\r\n  }\r\n\r\n  function changeMaxSharedCapID(uint256 _newMaxSharedCapID) external onlySuperAdmin {\r\n    maxSharedCapID = uint16(_newMaxSharedCapID) ;\r\n    emit ChangeMaxSharedCapID(_newMaxSharedCapID);\r\n  }\r\n\r\n  function changeMaxLbMuyQuantity(uint256 _newMaxLbBuyQuantity) external onlySuperAdmin {\r\n    maxLbBuyQuantity = uint8(_newMaxLbBuyQuantity) ;\r\n    emit ChangeMaxLbBuyQuantity(_newMaxLbBuyQuantity);\r\n  }\r\n\r\n  function increaseCapByAmount(uint256 _saleID, uint256 _amount)\r\n    external\r\n    onlyActiveSale(_saleID)\r\n    _positive(_amount)\r\n    onlyAdmin\r\n  {\r\n    Sale storage sale_ = sales[_saleID];    \r\n    sale_.cap += uint24(_amount);\r\n    emit IncreaseCapByAmount(_saleID, _amount, sale_.cap);\r\n  }\r\n\r\n  function increaseEndTimeBySeconds(uint256 _saleID, uint256 _seconds)\r\n    external\r\n    onlyActiveSale(_saleID)\r\n    _positive(_seconds)\r\n    onlyAdmin\r\n  {\r\n    Sale storage sale_ = sales[_saleID];    \r\n    sale_.endTime += uint32(_seconds);\r\n    emit IncreaseEndTimeBySeconds(_saleID, _seconds, sale_.endTime);\r\n  }\r\n\r\n  //  This function allows you to clean up / delete contract\r\n  function kill(address payable _recipient) external onlyOwner {\r\n    uint256 currenciesLength_ = currencies.length;\r\n    for (uint256 i=1; i<currenciesLength_; i++) {\r\n      require(ERC20(currencies[i].currAddress).balanceOf(address(this)) == 0, \"Contract contains currency tokens\");\r\n    }\r\n    selfdestruct(_recipient);\r\n  }\r\n\r\n  function getCurrencyInfo(uint256 _currencyID)\r\n    external\r\n    view\r\n    returns (string memory, address)\r\n  {\r\n    return (\r\n      string(abi.encodePacked(currencies[_currencyID].currName)),\r\n      currencies[_currencyID].currAddress);\r\n  }\r\n\r\n\r\n  function getSharedCapSaleIDs(uint256 _scID) external view returns (uint256[] memory){\r\n    uint256 salesCount_ = sharedCaps[_scID].salesCnt;\r\n    if (salesCount_ == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result_ = new uint256[](salesCount_);\r\n      uint256 saleIDs_ = sharedCaps[_scID].saleIDs;\r\n      for (uint256 i = 0; i < salesCount_; i++) {\r\n        result_[i] = uint256(uint16(saleIDs_ >> 16*i));\r\n      }\r\n      return result_;\r\n    }\r\n  }\r\n\r\n  function getActiveSaleIDs() external view returns (uint256[] memory) {\r\n    uint256[] memory pom_ = new uint256[](maxSaleID);\r\n    uint256 i; uint256 j;\r\n    for (i=1; i<=maxSaleID; i++)\r\n      if (sales[i].isActive)\r\n        pom_[j++] = i;\r\n    uint256[] memory saleIDs_ = new uint256[](j);\r\n    for (i=0; i<j; i++){\r\n      saleIDs_[i] = pom_[i];\r\n    }\r\n    return saleIDs_;\r\n  }\r\n\r\n  function _removeSharedCap(uint256 _sharedCapID) private returns (bool) {\r\n    if (sharedCaps[_sharedCapID].salesCnt == 0) {\r\n      delete sharedCaps[_sharedCapID];\r\n      emit RemoveSharedCap(_sharedCapID);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function _changePrice(uint256 _saleID, uint256 _newPrice) private {\r\n    Sale storage sale_ = sales[_saleID];\r\n    uint256 price_ = sale_.price;\r\n    sale_.originalPrice = price_;\r\n    sale_.price = _newPrice;\r\n    emit ChangePrice(_saleID, sale_.originalPrice, sale_.price);\r\n  }\r\n\r\n  function _tokenTransferFrom(\r\n    address allower_,\r\n    address receiver_,\r\n    uint256 amount_,\r\n    address tokenAddress_\r\n  ) private returns (bool) {\r\n    ERC20Interface = ERC20(tokenAddress_);\r\n    return ERC20Interface.transferFrom(allower_, receiver_, amount_);\r\n  }\r\n\r\n  function _tokenTransfer(address to_, uint256 amount_, address tokenAddress_)\r\n    private\r\n    _realAddress(to_)\r\n    _positive(amount_)\r\n    returns (bool)\r\n  {\r\n    ERC20Interface = ERC20(tokenAddress_);\r\n    return ERC20Interface.transfer(to_, amount_);\r\n  }\r\n\r\n  function _openLootbox(uint256 _lootboxId, address _buyer, uint256 _quantity)\r\n    private\r\n    returns (uint256[] memory)\r\n  {\r\n    return Lootbox(lootboxContractAddress).openLootbox(_lootboxId, _buyer, _quantity);\r\n  }\r\n\r\n  function _getLootboxStatus(uint256 _lootboxId)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return Lootbox(lootboxContractAddress).getLootboxStatus(_lootboxId);\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AddCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharedCapID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSalesCount\",\"type\":\"uint256\"}],\"name\":\"AddSharedCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serialNo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"lbAssetId\",\"type\":\"uint256[]\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnPct\",\"type\":\"uint256\"}],\"name\":\"ChangeBurnPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCmdWallet\",\"type\":\"address\"}],\"name\":\"ChangeBurnWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCmdWallet\",\"type\":\"address\"}],\"name\":\"ChangeCmdWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLootboxContractAddress\",\"type\":\"address\"}],\"name\":\"ChangeLootboxContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSharedCapID\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxLbBuyQuantity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSaleID\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxSaleID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSharedCapID\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxSharedCapID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ChangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raisedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cmdWallet\",\"type\":\"address\"}],\"name\":\"CloseSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharedCapID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootboxID\",\"type\":\"uint256\"}],\"name\":\"CreateSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"}],\"name\":\"DeleteSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"IncreaseCapByAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"IncreaseEndTimeBySeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyID\",\"type\":\"uint256\"}],\"name\":\"RemoveCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharedCapID\",\"type\":\"uint256\"}],\"name\":\"RemoveSharedCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"ToggleAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuperAdmin\",\"type\":\"bool\"}],\"name\":\"ToggleSuperAdmin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSalesCnt\",\"type\":\"uint256\"}],\"name\":\"addSharedCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPct\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBurnPct\",\"type\":\"uint256\"}],\"name\":\"changeBurnPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBurnWallet\",\"type\":\"address\"}],\"name\":\"changeBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCmdWallet\",\"type\":\"address\"}],\"name\":\"changeCmdWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLootboxContractAddress\",\"type\":\"address\"}],\"name\":\"changeLootboxContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxLbBuyQuantity\",\"type\":\"uint256\"}],\"name\":\"changeMaxLbMuyQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSaleID\",\"type\":\"uint256\"}],\"name\":\"changeMaxSaleID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSharedCapID\",\"type\":\"uint256\"}],\"name\":\"changeMaxSharedCapID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_saleID\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPrice\",\"type\":\"uint256[]\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"}],\"name\":\"closeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cmdWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceDeltaPerMille\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharedCapID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lootboxID\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_saleId\",\"type\":\"uint256[]\"}],\"name\":\"deleteSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSaleIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyID\",\"type\":\"uint256\"}],\"name\":\"getCurrencyInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scID\",\"type\":\"uint256\"}],\"name\":\"getSharedCapSaleIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseCapByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"increaseEndTimeBySeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSuperAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootboxContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLbBuyQuantity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSaleID\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSharedCapID\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastSharedCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_sharedCapIds\",\"type\":\"uint256[]\"}],\"name\":\"removeSharedCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currencyID\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"priceDeltaPerMille\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"cap\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"sharedCapID\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lootboxID\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"soldAmount\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"raisedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sharedCaps\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"cap\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"maxSalesCnt\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"salesCnt\",\"type\":\"uint8\"},{\"internalType\":\"uint192\",\"name\":\"saleIDs\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"soldAmount\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"toggleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"toggleSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptomedaSales", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "333", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b61a5dc848bf813097cdcae82f3fe144ac0612659e869432bf4367d46a5922a6"}