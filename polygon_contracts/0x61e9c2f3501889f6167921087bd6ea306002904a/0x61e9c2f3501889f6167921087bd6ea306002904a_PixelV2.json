{"SourceCode": "// SPDX-License-Identifier: MIXED\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while(i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\ncontract BoringOwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract BoringOwnable is BoringOwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/Domain.sol@v1.2.3\r\n// License-Identifier: MIT\r\n// Based on code and smartness by Ross Campbell and Keno\r\n// Uses immutable to store the domain separator to reduce gas usage\r\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\r\npragma solidity 0.6.12;\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\ncontract Domain {\r\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    // See https://eips.ethereum.org/EIPS/eip-191\r\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\r\n\r\n    // solhint-disable var-name-mixedcase\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;    \r\n\r\n    /// @dev Calculate the DOMAIN_SEPARATOR\r\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                DOMAIN_SEPARATOR_SIGNATURE_HASH,\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    constructor() public {\r\n        uint256 chainId; assembly {chainId := chainid()}\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\r\n    }\r\n\r\n    /// @dev Return the DOMAIN_SEPARATOR\r\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\r\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _domainSeparator() internal view returns (bytes32) {\r\n        uint256 chainId; assembly {chainId := chainid()}\r\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\r\n    }\r\n\r\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\r\n        digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\r\n                    _domainSeparator(),\r\n                    dataHash\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/ERC20.sol@v1.2.3\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\n// solhint-disable no-inline-assembly\r\n// solhint-disable not-rely-on-time\r\n\r\n// Data part taken out for building of contracts that receive delegate calls\r\ncontract ERC20Data {\r\n    /// @notice owner > balance mapping.\r\n    mapping(address => uint256) public balanceOf;\r\n    /// @notice owner > spender > allowance mapping.\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    /// @notice owner > nonce mapping. Used in `permit`.\r\n    mapping(address => uint256) public nonces;\r\n}\r\n\r\nabstract contract ERC20 is IERC20, Domain {\r\n    /// @notice owner > balance mapping.\r\n    mapping(address => uint256) public override balanceOf;\r\n    /// @notice owner > spender > allowance mapping.\r\n    mapping(address => mapping(address => uint256)) public override allowance;\r\n    /// @notice owner > nonce mapping. Used in `permit`.\r\n    mapping(address => uint256) public nonces;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\r\n    /// @param to The address to move the tokens.\r\n    /// @param amount of the tokens to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\r\n        if (amount != 0 || msg.sender == to) {\r\n            uint256 srcBalance = balanceOf[msg.sender];\r\n            require(srcBalance >= amount, \"ERC20: balance too low\");\r\n            if (msg.sender != to) {\r\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so low balance calls safe some gas\r\n\r\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\r\n                balanceOf[to] += amount;\r\n            }\r\n        }\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\r\n    /// @param from Address to draw tokens from.\r\n    /// @param to The address to move the tokens.\r\n    /// @param amount The token amount to move.\r\n    /// @return (bool) Returns True if succeeded.\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        // If `amount` is 0, or `from` is `to` nothing happens\r\n        if (amount != 0) {\r\n            uint256 srcBalance = balanceOf[from];\r\n            require(srcBalance >= amount, \"ERC20: balance too low\");\r\n\r\n            if (from != to) {\r\n                uint256 spenderAllowance = allowance[from][msg.sender];\r\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\r\n                if (spenderAllowance != type(uint256).max) {\r\n                    require(spenderAllowance >= amount, \"ERC20: allowance too low\");\r\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\r\n                }\r\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so other failed calls safe some gas\r\n\r\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\r\n                balanceOf[to] += amount;\r\n            }\r\n        }\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Approves `amount` from sender to be spend by `spender`.\r\n    /// @param spender Address of the party that can draw from msg.sender's account.\r\n    /// @param amount The maximum collective amount that `spender` can draw.\r\n    /// @return (bool) Returns True if approved.\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n        return _domainSeparator();\r\n    }\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\r\n    /// @param owner_ Address of the owner.\r\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\r\n    /// @param value The maximum collective amount that `spender` can draw.\r\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\r\n    function permit(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        require(owner_ != address(0), \"ERC20: Owner cannot be 0\");\r\n        require(block.timestamp < deadline, \"ERC20: Expired\");\r\n        require(\r\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\r\n                owner_,\r\n            \"ERC20: Invalid Signature\"\r\n        );\r\n        allowance[owner_][spender] = value;\r\n        emit Approval(owner_, spender, value);\r\n    }\r\n}\r\n\r\ncontract ERC20WithSupply is IERC20, ERC20 {\r\n    uint256 public override totalSupply;\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        uint256 newTotalSupply = totalSupply + amount;\r\n        require(newTotalSupply >= totalSupply, \"Mint overflow\");\r\n        totalSupply = newTotalSupply;\r\n        balanceOf[user] += amount;\r\n        emit Transfer(address(0), user, amount);\r\n    }\r\n\r\n    function _burn(address user, uint256 amount) internal {\r\n        require(balanceOf[user] >= amount, \"Burn too much\");\r\n        totalSupply -= amount;\r\n        balanceOf[user] -= amount;\r\n        emit Transfer(user, address(0), amount);\r\n    }\r\n}\r\n\r\n// File contracts/Pixel.sol\r\n//License-Identifier: MIT\r\n//  _____ _          _   _____            \r\n// |  __ (_)        | | |_   _|           \r\n// | |__) |__  _____| |   | |  _ __   ___ \r\n// |  ___/ \\ \\/ / _ \\ |   | | | '_ \\ / __|\r\n// | |   | |>  <  __/ |  _| |_| | | | (__ \r\n// |_|   |_/_/\\_\\___|_| |_____|_| |_|\\___|\r\n//\r\n// Flung together by BoringCrypto during COVID-19 lockdown in 2021\r\n// Stay safe! \r\n\r\n// Alpha here https://bit.ly/3icxSru\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ninterface ISushiSwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface ISushiSwapRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (ISushiSwapFactory);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n// solhint-disable avoid-low-level-calls\r\n// solhint-disable\r\n\r\ninterface ERC721TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Return of other than the magic value MUST result in the\r\n    ///  transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract Canvas {\r\n    using BoringMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event Buy(address hodler, address buyer, uint256 price, uint256 hodler_share);\r\n\r\n    string public constant name = \"The Canvas of Pixels\";\r\n    string public constant symbol = \"CANVAS\";\r\n\r\n    address public hodler;\r\n    address public allowed;\r\n\r\n    uint256 public price;\r\n    IERC20 public immutable pixel;\r\n    string public info;\r\n\r\n    mapping(address => mapping(address => bool)) public operators;\r\n\r\n    constructor(IERC20 _pixel) public {\r\n        pixel = _pixel;\r\n        price = _pixel.totalSupply() / 10;\r\n        hodler = address(_pixel);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        return\r\n            interfaceID == this.supportsInterface.selector || // EIP-165\r\n            interfaceID == 0x80ac58cd; // EIP-721\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public pure returns (string memory) {\r\n        require(_tokenId == 0, \"Invalid token ID\");\r\n        return \"https://pixel.inc/canvas.json\";\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        require(_owner != address(0), \"No zero address\");\r\n        return _owner == hodler ? 1 : 0;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        require(_tokenId == 0, \"Invalid token ID\");\r\n        require(hodler != address(0), \"No owner\");\r\n        return hodler;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        require(_tokenId == 0, \"Invalid token ID\");\r\n        require(from == hodler, \"From not owner\");\r\n        require(from == msg.sender || from == allowed || operators[hodler][from], \"Transfer not allowed\");\r\n        require(to != address(0), \"No zero address\");\r\n        hodler = to;\r\n        allowed = address(0);\r\n        emit Transfer(from, to, _tokenId);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public payable {\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public payable {\r\n        _transfer(_from, _to, _tokenId);\r\n        if (isContract(_to)) {\r\n            require(\r\n                ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) ==\r\n                    bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")),\r\n                \"Wrong return value\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public payable {\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) public payable {\r\n        require(_tokenId == 0, \"Invalid token ID\");\r\n        require(msg.sender == hodler, \"Not hodler\");\r\n        allowed = _approved;\r\n        emit Approval(msg.sender, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public {\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        require(_tokenId == 0, \"Invalid token ID\");\r\n        return allowed;\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operators[_owner][_operator];\r\n    }\r\n\r\n    function totalSupply() external pure returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function buy() external payable {\r\n        require(msg.value == price, \"Value != price\");\r\n\r\n        // Send original price paid + 10% back to the hodler with max 20.000 gas. If this fails, continue anyway to prevent grieving/blocking attacks.\r\n        uint256 hodler_share = hodler == address(pixel) ? 0 : price.mul(110) / 150;\r\n        (bool success, ) = hodler.call{value: hodler_share, gas: 20000}(\"\");\r\n\r\n        // Send the remaining funds to the PIXEL token hodlers.\r\n        (success, ) = address(pixel).call{value: price.sub(hodler_share), gas: 20000}(\"\");\r\n        require(success, \"Funding pixel pool failed\");\r\n\r\n        emit Transfer(hodler, msg.sender, 0);\r\n        emit Buy(hodler, msg.sender, price, hodler_share);\r\n\r\n        price = price.mul(150) / 100; // Increase price by 50%\r\n        hodler = msg.sender;\r\n        allowed = address(0);\r\n    }\r\n\r\n    function setInfo(string memory info_) external {\r\n        require(msg.sender == hodler, \"Canvas: not hodler\");\r\n        info = info_;\r\n    }\r\n\r\n    function poll() public view returns(address hodler_, address allowed_, uint256 price_) {\r\n        hodler_ = hodler;\r\n        allowed_ = allowed;\r\n        price_ = price;\r\n    }\r\n}\r\n\r\n// Simple Multi Level Marketing contract with 3 tiers\r\ncontract MLM {\r\n    struct DownlineStats {\r\n        uint128 earnings1;\r\n        uint128 earnings2;\r\n        uint128 earnings3;\r\n        uint32 tier1;\r\n        uint32 tier2;\r\n        uint32 tier3;\r\n    }\r\n    mapping (address => address) public upline;\r\n    mapping (address => DownlineStats) public downline;\r\n\r\n    event MLMAddRep(address rep, address upline);\r\n    event MLMEarn(address rep, uint128 amount, uint8 lvl);\r\n\r\n    function _setUpline(address rep, address upline_) internal {\r\n        upline[rep] = upline_;\r\n    }\r\n\r\n    function _setDownline(address rep, uint128 earnings1, uint128 earnings2, uint128 earnings3, uint32 tier1, uint32 tier2, uint32 tier3) internal {\r\n        downline[rep] = DownlineStats({\r\n            earnings1: earnings1,\r\n            earnings2: earnings2,\r\n            earnings3: earnings3,\r\n            tier1: tier1,\r\n            tier2: tier2,\r\n            tier3: tier3\r\n        });\r\n    }\r\n\r\n    function _addRep(address rep, address upline_) internal {\r\n        if (upline_ == address(0) || upline[rep] != address(0)) { return; }\r\n        require(rep != upline_, \"MLM: Can't refer yourself\");\r\n        upline[rep] = upline_;\r\n        (address lvl1, address lvl2, address lvl3) = _getUpline(rep);\r\n        if (lvl1 != address(0)) { downline[lvl1].tier1++; downline[lvl1].tier2 += downline[rep].tier1; downline[lvl1].tier2 += downline[rep].tier3; }\r\n        if (lvl2 != address(0)) { downline[lvl2].tier2++; downline[lvl2].tier2 += downline[rep].tier3; }\r\n        if (lvl3 != address(0)) { downline[lvl3].tier3++; }\r\n        emit MLMAddRep(rep, upline_);\r\n    }\r\n\r\n    function _getUpline(address rep) internal view returns (address lvl1, address lvl2, address lvl3) {\r\n        lvl1 = upline[rep];\r\n        if (lvl1 != address(0)) {\r\n            lvl2 = upline[lvl1];\r\n            if (lvl2 != address(0)) {\r\n                lvl3 = upline[lvl2];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _recordEarnings(address lvl1, address lvl2, address lvl3, uint128 earnings1, uint128 earnings2, uint128 earnings3) internal {\r\n        if (lvl1 != address(0)) {\r\n            downline[lvl1].earnings1 += earnings1;\r\n            emit MLMEarn(lvl1, earnings1, 1);\r\n        }\r\n        if (lvl2 != address(0)) {\r\n            downline[lvl2].earnings2 += earnings2;\r\n            emit MLMEarn(lvl2, earnings1, 2);\r\n        }\r\n        if (lvl3 != address(0)) {\r\n            downline[lvl3].earnings3 += earnings3;\r\n            emit MLMEarn(lvl3, earnings1, 3);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract PixelV2 is ERC20WithSupply, MLM, BoringOwnable, ReentrancyGuard {\r\n    using BoringMath for uint256;\r\n    using BoringERC20 for IERC20;\r\n\r\n    event PixelBlockTransfer(address from, address to, uint256 pricePerPixel);\r\n\r\n    string public constant symbol = \"PIXEL\";\r\n    string public constant name = \"Pixel\";\r\n    uint8 public constant decimals = 18;\r\n    address public canvas;\r\n\r\n    uint256 private constant START_BLOCK_PRICE = 10e18; // Price starts at 0.1 MATIC/pixel = 10 MATIC/block\r\n    \r\n    // 50.000 PIXEL tokens will be minted for the initial AMM pool\r\n    // To keep this fair, we set the price at DOUBLE the cost (because the PIXEL tokens are free to the deployer)\r\n    // Cost of 1 PIXEL token at launch will be 0.1 MATIC / 1.4 (due to ambassador program) = 0.0714\r\n    // So price should be set at twice that: 0.1428\r\n    // For 50,000 PIXELs = 50,000 * 0.1428 \u2248 7000 (rounded down to the nearest thousand)\r\n    uint256 private constant SUSHI_PIXEL_BALANCE = 50000e18;\r\n    // uint256 private constant SUSHI_MATIC_BALANCE = 7000e18;\r\n    // Will be added manually to SushiSwap, ran out of time to put it in the contract\r\n\r\n    struct BlockLink {\r\n        string url; // url for this block (should be < 256 characters)\r\n        string description; // description for this block (should be < 256 characters)\r\n    }\r\n\r\n    struct Block {\r\n        address owner; // current owner of the block\r\n        uint128 lastPrice; // last sale price - 0 = never sold\r\n        uint32 link; // The BlockLink for this block\r\n        bytes pixels; // pixels as bytes\r\n    }\r\n\r\n    struct ExportBlock {\r\n        uint32 number;\r\n        address owner; // current owner of the block\r\n        uint128 lastPrice; // last sale price - 0 = never sold\r\n        string url; // url for this block (should be < 256 characters)\r\n        string description; // description for this block (should be < 256 characters)\r\n        bytes pixels; // pixels as bytes\r\n    }\r\n\r\n    BlockLink[] public link;\r\n    // data is organized in blocks of 10x10. There are 100x100 blocks. Base is 0 and counting goes left to right, then top to bottom.\r\n    Block[10000] public blk;\r\n    uint256 public constant START_TIMESTAMP = 1626500000;\r\n    uint256 public constant LOCK_TIMESTAMP = 1627578000;\r\n    uint256[] public updates;\r\n\r\n    constructor() public payable {\r\n        // Set link[0] to blank\r\n        link.push(BlockLink({\r\n            url: \"\",\r\n            description: \"\"\r\n        }));\r\n\r\n        // Balances that were in SushiSwap LP to restore in wallet\r\n        // MATIC - PIXEL\r\n        _mint(0x1EF5526ee1A6D8c596cce90e774A2c41372cC8cD, 2100910959916803821587);\r\n        _mint(0x4ef416AA741053b5F3968900379DF2e3d0229065, 828212788936684322556);\r\n        _mint(0x2B23D9B02FffA1F5441Ef951B4B95c09faa57EBA, 77234571546476346077);\r\n        // WETH - PIXEL\r\n        _mint(0x8f54C8c2df62c94772ac14CcFc85603742976312, 6725081405432150000);\r\n        \r\n        // On-chain token balances to be restored\r\n        _mint(0x000000000000000000000000000000000000dEaD, 100000000000000000000);\r\n        _mint(0x00A5af2D7DA07dF76073A6f478f0fB4942D2659a, 76993000000000000000000);\r\n        _mint(0x00e13f97e1980126cbe90F21B9C1b853878031Dd, 100000000000000000000);\r\n        _mint(0x012550D59aE4E7938830fA13C5D5791752ADc4a5, 100000000000000000000);\r\n        _mint(0x01485557C2BC6E26c7187ff4cC38d5d9474405D4, 600000000000000000000);\r\n        _mint(0x01C2bF2F59215A1AcAe7B485aa82A582d31fD613, 100000000000000000000);\r\n        _mint(0x05F0BA0f63b401BC9B86089265Cee2f79c955768, 100000000000000000000);\r\n        _mint(0x0655E4DEAA64b4C6da6b68Db283934a15d9AfC8D, 1000000000000000000);\r\n        _mint(0x069e85D4F1010DD961897dC8C095FBB5FF297434, 400000000000000000000);\r\n        _mint(0x070Ae2385DEdC927f821e75434E881cA5FD549fb, 2500000000000000000000);\r\n        _mint(0x092471cfFe4B941C896bfeC001fe8Bcc73a991D9, 20000000000000000000);\r\n        _mint(0x0b981d98e857C888E00D2C494D24DC16a12F8f3A, 2500000000000000000000);\r\n        _mint(0x0D35324061F620f66AF983Dee02076B2E45E57fc, 1000000000000000000);\r\n        _mint(0x0f278c56b52B4C0E2a69b30A0b591d237C783907, 7410838942006850000000);\r\n        _mint(0x1200b4a3A90dCDc504443130572e840c988eC13C, 4700000000000000000000);\r\n        _mint(0x157B6c44f47ecD30c0A2c428a6f35DBC606Aa81b, 97686009836727800000);\r\n        _mint(0x1F427A6FCdb95A7393C58552093e10A932890FA8, 200000000000000000000);\r\n        _mint(0x201b5Abfd44A8F9b75F0fE1BaE74CDaC7675E54B, 15700000000000000000000);\r\n        _mint(0x206971261B391763458134212FeEab2360874676, 108905833669697000000);\r\n        _mint(0x218d75b17f491793a96ab4326c7875950359a80C, 900000000000000000000);\r\n        _mint(0x22D16ED158722107F9B22B7346A65E193717c9e8, 1600000000000000000000);\r\n        _mint(0x235B5aC21eE516410300DeC89F9ed413cB5d948C, 1500000000000000000000);\r\n        _mint(0x2493C86B62E8ff26208399144817EF2898c59460, 12000000000000000000000);\r\n        _mint(0x251794fb2875c1f735c2983Af79BDeA28A81309b, 510349509928504000000);\r\n        _mint(0x256D49d87cbb877D26E2Bcf2bF0A40D26bdfB5d4, 7540000000000000000000);\r\n        _mint(0x25C89a394E37268c33628BD3cC54908B5F8D1Bd5, 34600000000000000000000);\r\n        _mint(0x27883c6bD1AEd855D020fA587ae6D841Adf0391D, 49070792707637400000);\r\n        _mint(0x28c24f2Da9B6E517968300Eb1A4F4aE1B235238E, 220000000000000000000);\r\n        _mint(0x29a4ea26AC9eEd2fBdCd649CFd707948B18F4c67, 800000000000000000000);\r\n        _mint(0x2B19fDE5d7377b48BE50a5D0A78398a496e8B15C, 135100000000000000000000);\r\n        _mint(0x30a0911731f6eC80c87C4b99f27c254639A3Abcd, 83071433783691100000000);\r\n        _mint(0x315388deb1608BDcF532CE0BF6fC130542f5132C, 1600000000000000000000);\r\n        _mint(0x357dfdC34F93388059D2eb09996d80F233037cBa, 8100000000000000000000);\r\n        _mint(0x36568Dd8A7C4B33cb21Bdfe595329133deFDf7c4, 805596835216419000);\r\n        _mint(0x3c0a3d1994C567Fd4BF17dc5858eC84fF1F87501, 900000000000000000000);\r\n        _mint(0x3c5Aac016EF2F178e8699D6208796A2D67557fe2, 20000000000000000000);\r\n        _mint(0x3D343914EB418F465401e617a19CC9dd072922E7, 400000000000000000000);\r\n        _mint(0x3D9B0A7ef1CcEAda457001A6d51F28FF61E39904, 855000000000000000000);\r\n        _mint(0x404e35fDB39AFdb77d8eA5b63bEcd6a5Ad50A6dE, 5000000000000000000000);\r\n        _mint(0x41381649B2231caFc8293F501Bb3dF422aeBA5E4, 1800000000000000000000);\r\n        _mint(0x43d20d5efA78Ff0e465DDa2e58109F9fb3A2becE, 100000000000000000000);\r\n        _mint(0x4757b9DFC3b8b685Dd227B0b4104B1Ca762f18b0, 200000000000000000000);\r\n        _mint(0x496ea957960Bf9A2BBC1D3c114EaA124e07D0543, 4587762750670830000000);\r\n        _mint(0x4cb1a8Bb524Ec318AAad1c63cA51b2189Df00560, 1000000000000000000);\r\n        _mint(0x4fD95c6FA765e64eC9313E465F4D2B88Cbf8dEaa, 1100000000000000000000);\r\n        _mint(0x528d4e4E0dbF071eC23013f06D8487BaD5A8a68B, 4400000000000000000000);\r\n        _mint(0x53033C9697339942256845dD4d428085eC7261B8, 100000000000000000000);\r\n        _mint(0x54D925F320400139f9F2925767F1ec68B027e7C0, 3624011874909200000000);\r\n        _mint(0x57d9b1E86A1f4a0b76bec742f8e9E6F70650E6B0, 6708775655099830000000);\r\n        _mint(0x58a5D0D2D5CDa76806f48A3b255D2b0238F965c5, 800000000000000000000);\r\n        _mint(0x592F1a037EB4CBE529E80CA0f855525e13993380, 100000000000000000000);\r\n        _mint(0x5b52bF12e7D8737ED61f06147fc655514679Ce72, 1000000000000000000);\r\n        _mint(0x5b7dCB8Ce882f3D4C953C9F9d79E08730EFe4939, 3285265451149960000000);\r\n        _mint(0x5bA8bE640c84e294BD7285b4d7a676ed8E1FF2ec, 5000000000000000000);\r\n        _mint(0x5E190617C7cfB30C3C87dd55920e117280D3F8E6, 300000000000000000000);\r\n        _mint(0x62b979923922045FB5A77bEd9E0753941B1DA52c, 100000000000000000000);\r\n        _mint(0x62c04cc455520708958C9ce3FAFfF51745e42189, 20968136766813700000000);\r\n        //_mint(0x65204c0183B29778d2b19513930ed8bDfDf044c0, 6725081405432150000); // SushiSwap PIXEL-ETH LP Pool\r\n        _mint(0x66AB3988D11B493cBe632C7d4471A68350a786e9, 400000000000000000000);\r\n        _mint(0x6b9C944DEB574Ed6f2A5b6B3e6c25165535b71DA, 200000000000000000000);\r\n        _mint(0x79b1A32EC97537486E75d99850BD56ECfA09D643, 1500000000000000000000);\r\n        _mint(0x7a4A8f7b3707Ecc86B50CAE33f83edc5F8c8F57E, 100000000000000000000);\r\n        _mint(0x7bf4d5E579a26dd09F1ddDB2391566e7BA575B5B, 16300000000000000000000);\r\n        _mint(0x7f3D32C56b94a9B7878fdfAC4F40Aaa2A6E11EdF, 34500000000000000000000);\r\n        _mint(0x81F185CB71A4b98777a5Ee50CA55e80608DB61c1, 200000000000000000000);\r\n        _mint(0x826a471055333505E596F424348983aF0Aa8411B, 200000000000000000000);\r\n        _mint(0x835f394f3D770B6FF818303f045e39f541B3d781, 100000000000000000000);\r\n        _mint(0x8469032c8B6F94E95c0659a9a3a34dE959999999, 150000000000000000000);\r\n        _mint(0x862c6f0373AC129fc66A324B234943139CA10c92, 10000000000000000000000);\r\n        _mint(0x897656B1Fb6C3688e48e1DD8259f7E092364754d, 20120000000000000000000);\r\n        _mint(0x8fB07b21383d331F3752A7590b0cfEAc85514A1F, 3900000000000000000000);\r\n        _mint(0x94E169525d86df638CC51d801eaC8D60275a8047, 2500000000000000000000);\r\n        _mint(0x97a2f4fa661c1898678cfb5C77B1CDC22816076B, 4074296045848550000000);\r\n        _mint(0x9a568bFeB8CB19e4bAfcB57ee69498D57D9591cA, 400000000000000000000);\r\n        _mint(0x9D0b92468Ef23D156F1bd5042Fe0B45C80a4418e, 100000000000000000000);\r\n        _mint(0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E, 17410000000000000000000);\r\n        _mint(0x9EFb6D49Fd5496626E80Ad0B07017744aE9A0efA, 100000000000000000000);\r\n        _mint(0x9f7F67699b6B35ee2C37E3c9BE43e437E2FA4bf7, 2400000000000000000000);\r\n        _mint(0xa03D1648Be58e6957C81C1C201236E189b6eE6AF, 10000000000000000000000);\r\n        _mint(0xA03DEE508d09Ba9401a661F154036B36328e0F0C, 401680275849628000000);\r\n        _mint(0xa0bf4E5640e5db6FA82967d2C160e35a9a28AE83, 14400000000000000000000);\r\n        _mint(0xa2db5F9313a553F572fA44AA1BA5B5871Ed68406, 100000000000000000000);\r\n        //_mint(0xa30B98148Ef97b6F6dCd911B129c7Dd68c0B09Ff, 3006358320399960000000); // SushiSwap PIXEL-MATIC LP Pool\r\n        _mint(0xA8Ec58Dd533E0cF82eC417bcA3C4dbCa48aE5a8B, 1);\r\n        _mint(0xAD2074361FC5a7D392B4b7b5b97B8C0a9ec3A1ED, 100000000000000000000);\r\n        _mint(0xaf1ca20615F84c48782F2f23b3cC737Db9c3514c, 100000000000000000000);\r\n        _mint(0xB11A0Ce3A6EA30D8aA906E0f84eB92be8aF5aFcb, 1000000000000000000);\r\n        _mint(0xb17524239b58963Cf2D9b9A7A92d4EfAE3dF1A3e, 100000000000000000000);\r\n        _mint(0xB2F6Be1d6c18514eABdc352B97B63273608af8FE, 5797867809847100000000);\r\n        _mint(0xB3160404ca9581784b3dec9e85bcd354397B8C72, 7500000000000000000000);\r\n        _mint(0xb3D1e41F84AcD0E77F83473aa62fc8560C2A3c0C, 100000000000000000000);\r\n        _mint(0xb4A3f907ec1611F22543219AE9Bb33ec5E96e116, 2500000000000000000000);\r\n        _mint(0xb5EDE9893FcCd62a110fd9D0CcE5C89418a8540b, 400000000000000000000);\r\n        _mint(0xB96863b5a9bb3783c5BA0665e4382b766746D6fa, 10000000000000000000000);\r\n        _mint(0xB9956c74639D8E11c64D8005dC0c2262945Af074, 100000000000000000000);\r\n        _mint(0xbcc1a3455BFE501cD163c3f1AE85e038253F252E, 600000000000000000000);\r\n        _mint(0xbf2116D0a79da0E5710Df8AB00eb20415bCA94C8, 409563635515185000000);\r\n        _mint(0xBF912CB4d1c3f93e51622fAe0bfa28be1B4b6C6c, 1600000000000000000000);\r\n        _mint(0xC16414AC1fedfDAC4F8A09674D994e1BbB9d7113, 603300000000000000000000);\r\n        _mint(0xC53f5a27021455293Aa34da308280abC4cAD210A, 100000000000000000000);\r\n        _mint(0xc572c95996653ae98Ec3A59d9a511eDA142b98C1, 3200000000000000000000);\r\n        _mint(0xc61a2Bb414a41ce492a94b5F59F5FD72f3a71C97, 900000000000000000000);\r\n        _mint(0xc70C99C1485eCcc693e434433edBF5C27f937499, 2200000000000000000000);\r\n        _mint(0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7, 4120000000000000000000);\r\n        _mint(0xc962Ba9a1a45B79C1228636db5a6eFA4a4b75D76, 200000000000000000000);\r\n        _mint(0xC9fD84728F98dF2820896DB89D7d47aC9998228c, 400000000000000000000);\r\n        _mint(0xce3C49dC6E0ee03cBd5fAB568CC638f09ac4a7D7, 2000000000000000000000);\r\n        _mint(0xcE3C9E357425c99cC27Dc9bF963d06E739811465, 15000000000000000000000);\r\n        _mint(0xD264da372aeFcd5269Ca212BFD3C56e8e95bcCca, 100000000000000000000);\r\n        _mint(0xd6e371526cdaeE04cd8AF225D42e37Bc14688D9E, 3000000000000000000000);\r\n        _mint(0xDf547EaB8944D9Ef06475dF8eEe372B9808f425E, 400000000000000000000);\r\n        _mint(0xE0878a84505A33e0beCE816F8d70A0c635CaEf00, 18090005479138400000000);\r\n        _mint(0xe0D62CC9233C7E2F1f23fE8C77D6b4D1a265D7Cd, 1600000000000000000000);\r\n        _mint(0xE5625a6EE4908f67B7024849daf95f8FaDCb89d5, 17494768321937100000000);\r\n        _mint(0xe61a0809eF3f1d2D695555413ac354284BF23915, 3400000000000000000000);\r\n        _mint(0xE744048f7D1B63B4e233A1D63c3153b913D7a2cc, 200000000000000000000);\r\n        _mint(0xe9f654994f1135eBFab3183f50603dA5C6aBD4C3, 3400000000000000000000);\r\n        _mint(0xEbaCA45c63BA3981B083064A8Dcf5D2999430bD6, 12677692062739300000000);\r\n        _mint(0xEd3C50209648e2b4794D47b0973E2b95E6B756Ce, 10000000000000000000000);\r\n        _mint(0xf07504A96601b35Dd702b07EcC57B2b169866f57, 4100000000000000000000);\r\n        _mint(0xf1228C34651348F12d05D138896DC6d2E946F970, 18600000000000000000000);\r\n        _mint(0xf58aA8E0832DeAc36550296Dc92fC091d5de2B7D, 3400000000000000000000);\r\n        _mint(0xF82a5d0168cc93e63dc217314AdB87f15891d124, 100000000000000000000);\r\n        _mint(0xfD5A25ef7396384C2D43645f32609BC869c36208, 97800000000000000000000);\r\n        _mint(0xfEdcBda26763eF4660d5204F4252f2A9B1276D4a, 200000000000000000000);\r\n\r\n        _setUpline(0x30a0911731f6eC80c87C4b99f27c254639A3Abcd, 0x256D49d87cbb877D26E2Bcf2bF0A40D26bdfB5d4);\r\n        _setDownline(0x30a0911731f6eC80c87C4b99f27c254639A3Abcd, 1960000000000000000000, 0, 0, 3, 0, 0);\r\n        _setDownline(0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7, 320000000000000000000, 0, 0, 8, 0, 0);\r\n        _setUpline(0xA03DEE508d09Ba9401a661F154036B36328e0F0C, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setDownline(0xA03DEE508d09Ba9401a661F154036B36328e0F0C, 4720000000000000000000, 0, 0, 6, 0, 0);\r\n        _setUpline(0x1E4135cF6E2B9feeBD52C6e90817fb19cFe294b9, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setDownline(0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E, 14480000000000000000000, 2440000000000000000000, 490000000000000000000, 7, 10, 3);\r\n        _setUpline(0xf07504A96601b35Dd702b07EcC57B2b169866f57, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setUpline(0xaf1ca20615F84c48782F2f23b3cC737Db9c3514c, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setUpline(0x7f3D32C56b94a9B7878fdfAC4F40Aaa2A6E11EdF, 0xe61a0809eF3f1d2D695555413ac354284BF23915);\r\n        _setUpline(0x256D49d87cbb877D26E2Bcf2bF0A40D26bdfB5d4, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setDownline(0x256D49d87cbb877D26E2Bcf2bF0A40D26bdfB5d4, 660000000000000000000, 980000000000000000000, 0, 1, 3, 0);\r\n        _setDownline(0x1EF5526ee1A6D8c596cce90e774A2c41372cC8cD, 1000000000000000000000, 0, 0, 1, 0, 0);\r\n        _setUpline(0x528d4e4E0dbF071eC23013f06D8487BaD5A8a68B, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setUpline(0xDf547EaB8944D9Ef06475dF8eEe372B9808f425E, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setUpline(0x51c25230335472236853676290062c8C7a0825b6, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0x91B12c04Ba95cede8E7cDD1a17D961cbdfd2e00b, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0x3D9B0A7ef1CcEAda457001A6d51F28FF61E39904, 0x496ea957960Bf9A2BBC1D3c114EaA124e07D0543);\r\n        _setDownline(0x3D9B0A7ef1CcEAda457001A6d51F28FF61E39904, 120000000000000000000, 10000000000000000000, 25000000000000000000, 1, 1, 0);\r\n        _setUpline(0x7bD8A74a0B06FA03A9C2275F58081a7CCf549f16, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setDownline(0x897656B1Fb6C3688e48e1DD8259f7E092364754d, 20000000000000000000, 0, 0, 1, 0, 0);\r\n        _setUpline(0xa0bf4E5640e5db6FA82967d2C160e35a9a28AE83, 0xe61a0809eF3f1d2D695555413ac354284BF23915);\r\n        _setDownline(0xe61a0809eF3f1d2D695555413ac354284BF23915, 3400000000000000000000, 0, 0, 2, 0, 0);\r\n        _setUpline(0x218d75b17f491793a96ab4326c7875950359a80C, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0xbf2116D0a79da0E5710Df8AB00eb20415bCA94C8, 0x131Ee3bE2E3803Bf9E8976dDf0306236f001B7F2);\r\n        _setUpline(0x131Ee3bE2E3803Bf9E8976dDf0306236f001B7F2, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setDownline(0x131Ee3bE2E3803Bf9E8976dDf0306236f001B7F2, 600000000000000000000, 0, 0, 3, 0, 0);\r\n        _setUpline(0x54D925F320400139f9F2925767F1ec68B027e7C0, 0x1EF5526ee1A6D8c596cce90e774A2c41372cC8cD);\r\n        _setUpline(0x1F427A6FCdb95A7393C58552093e10A932890FA8, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setUpline(0x43d20d5efA78Ff0e465DDa2e58109F9fb3A2becE, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setUpline(0xF82a5d0168cc93e63dc217314AdB87f15891d124, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setUpline(0xc572c95996653ae98Ec3A59d9a511eDA142b98C1, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setUpline(0x8fB07b21383d331F3752A7590b0cfEAc85514A1F, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0x0b981d98e857C888E00D2C494D24DC16a12F8f3A, 0x131Ee3bE2E3803Bf9E8976dDf0306236f001B7F2);\r\n        _setUpline(0x357dfdC34F93388059D2eb09996d80F233037cBa, 0x30a0911731f6eC80c87C4b99f27c254639A3Abcd);\r\n        _setUpline(0xBF912CB4d1c3f93e51622fAe0bfa28be1B4b6C6c, 0x30a0911731f6eC80c87C4b99f27c254639A3Abcd);\r\n        _setUpline(0x496ea957960Bf9A2BBC1D3c114EaA124e07D0543, 0x3D9B0A7ef1CcEAda457001A6d51F28FF61E39904);\r\n        _setDownline(0x496ea957960Bf9A2BBC1D3c114EaA124e07D0543, 20000000000000000000, 50000000000000000000, 5000000000000000000, 1, 1, 1);\r\n        _setUpline(0x9EFb6D49Fd5496626E80Ad0B07017744aE9A0efA, 0xC858Dd4F2a80a859D491A16BeEe6708a6743bfb7);\r\n        _setDownline(0x28c24f2Da9B6E517968300Eb1A4F4aE1B235238E, 20000000000000000000, 0, 0, 1, 0, 0);\r\n        _setUpline(0x2493C86B62E8ff26208399144817EF2898c59460, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0x4fD95c6FA765e64eC9313E465F4D2B88Cbf8dEaa, 0xA03DEE508d09Ba9401a661F154036B36328e0F0C);\r\n        _setUpline(0x66AB3988D11B493cBe632C7d4471A68350a786e9, 0x131Ee3bE2E3803Bf9E8976dDf0306236f001B7F2);\r\n        _setUpline(0xfEdcBda26763eF4660d5204F4252f2A9B1276D4a, 0x9e6e344f94305d36eA59912b0911fE2c9149Ed3E);\r\n        _setUpline(0xb3D1e41F84AcD0E77F83473aa62fc8560C2A3c0C, 0x28c24f2Da9B6E517968300Eb1A4F4aE1B235238E);\r\n        _setUpline(0x9D0b92468Ef23D156F1bd5042Fe0B45C80a4418e, 0x30a0911731f6eC80c87C4b99f27c254639A3Abcd);\r\n        _setUpline(0xa9f078B3b6DD6C04308f19DEF394b6D5a1B8b732, 0x897656B1Fb6C3688e48e1DD8259f7E092364754d);\r\n        _setUpline(0x53033C9697339942256845dD4d428085eC7261B8, 0x3c5Aac016EF2F178e8699D6208796A2D67557fe2);\r\n        _setDownline(0x3c5Aac016EF2F178e8699D6208796A2D67557fe2, 20000000000000000000, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    function mintCanvas() external {\r\n        // The canvas is final\r\n        require(block.timestamp >= LOCK_TIMESTAMP, \"Creation Phase not finished\");\r\n        // Send any funds left to the owner. If this fails, continue anyway to prevent blocking.\r\n        bool success;\r\n        (success, ) = owner.call{value: address(this).balance}(\"\");\r\n        // Create Canvas\r\n        canvas = address(new Canvas(this));\r\n    }\r\n\r\n    modifier onlyCreationPhase() {\r\n        require(block.timestamp >= START_TIMESTAMP && block.timestamp < LOCK_TIMESTAMP, \"Not in creation phase\");\r\n        _;\r\n    }\r\n\r\n    function getBlocks(uint256[] calldata blockNumbers) public view returns (ExportBlock[] memory blocks) {\r\n        blocks = new ExportBlock[](blockNumbers.length);\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            Block memory _blk = blk[blockNumbers[i]];\r\n            BlockLink memory _link = link[_blk.link];\r\n            blocks[i].number = blockNumbers[i].to32();\r\n            blocks[i].owner = _blk.owner;\r\n            blocks[i].lastPrice = _blk.lastPrice;\r\n            blocks[i].url = _link.url;\r\n            blocks[i].description = _link.description;\r\n            blocks[i].pixels = _blk.pixels;\r\n        }\r\n    }\r\n\r\n    function updatesCount() public view returns (uint256) {\r\n        return updates.length;\r\n    }\r\n\r\n    function getUpdates(uint256 since, uint256 max) public view returns (uint256[] memory updatesSince) {\r\n        uint256 length = updates.length - since;\r\n        if (length > max) { \r\n            length = max; \r\n        }\r\n        updatesSince = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            updatesSince[i] = updates[since + i];\r\n        }\r\n    }\r\n\r\n    function initBlocks(\r\n        uint256[] calldata blockNumbers,\r\n        string[] calldata url,\r\n        string[] calldata description,\r\n        bytes[] calldata pixels,\r\n        uint128[] calldata lastPrice,\r\n        address[] calldata blockOwner\r\n    ) public onlyOwner {\r\n        require(block.timestamp < START_TIMESTAMP, \"Already started\");\r\n\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            BlockLink memory newLink;\r\n            newLink.url = url[i];\r\n            newLink.description = description[i];\r\n            uint32 linkNumber = link.length.to32();\r\n            link.push(newLink);\r\n\r\n            uint256 blockNumber = blockNumbers[i];\r\n\r\n            Block memory newBlock;\r\n            newBlock.owner = blockOwner[i];\r\n            newBlock.link = linkNumber;\r\n            newBlock.pixels = pixels[i];\r\n            newBlock.lastPrice = lastPrice[i];\r\n            blk[blockNumber] = newBlock;\r\n            updates.push(blockNumber);\r\n        }\r\n    }\r\n\r\n    function setBlocks(\r\n        uint256[] calldata blockNumbers,\r\n        uint32 linkNumber,\r\n        bytes[] calldata pixels,\r\n        address referrer\r\n    ) public payable onlyCreationPhase() nonReentrant() {\r\n        // This error may happen when you calculate the correct cost, but someone buys one of your blocks before your transaction goes through\r\n        // This is tested first to reduce wasted gas in case of failure\r\n        uint256 cost = getCost(blockNumbers);\r\n        require(msg.value == cost, \"Pixel: not enough funds\");\r\n\r\n        _addRep(msg.sender, referrer);\r\n\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            uint256 blockNumber = blockNumbers[i];\r\n            // Forward a maximum of 20000 gas to the previous owner for accepting the refund to avoid griefing attacks\r\n            bool success;\r\n            address previousOwner = blk[blockNumber].owner;\r\n            (success, ) = previousOwner.call{value: blk[blockNumber].lastPrice, gas: 20000}(\"\");\r\n\r\n            Block memory newBlock;\r\n            newBlock.owner = msg.sender;\r\n            newBlock.lastPrice = getCost(blockNumber).to128();\r\n            newBlock.link = linkNumber;\r\n            newBlock.pixels = pixels[i];\r\n            blk[blockNumber] = newBlock;\r\n\r\n            updates.push(blockNumber);\r\n\r\n            emit PixelBlockTransfer(previousOwner, msg.sender, newBlock.lastPrice);\r\n        }\r\n\r\n        // Mint a PIXEL token for each pixel bought\r\n        uint256 blocks = blockNumbers.length;\r\n        _mint(msg.sender, blocks.mul(1e20));\r\n        (address lvl1, address lvl2, address lvl3) = _getUpline(msg.sender);\r\n        if (lvl1 != address(0)) { _mint(lvl1, blocks.mul(20e18)); }\r\n        if (lvl2 != address(0)) { _mint(lvl2, blocks.mul(10e18)); }\r\n        if (lvl3 != address(0)) { _mint(lvl3, blocks.mul(5e18)); }\r\n        _recordEarnings(lvl1, lvl2, lvl3, blocks.mul(20e18).to128(), blocks.mul(10e18).to128(), blocks.mul(5e18).to128());\r\n    }\r\n\r\n    function setBlocks(\r\n        uint256[] calldata blockNumbers,\r\n        string calldata url,\r\n        string calldata description,\r\n        bytes[] calldata pixels,\r\n        address referrer\r\n    ) public payable onlyCreationPhase() returns (uint32 linkNumber) {\r\n        BlockLink memory newLink;\r\n        newLink.url = url;\r\n        newLink.description = description;\r\n        linkNumber = link.length.to32();\r\n        link.push(newLink);\r\n\r\n        setBlocks(blockNumbers, linkNumber, pixels, referrer);\r\n    }\r\n\r\n    function getCost(uint256 blockNumber) public view returns (uint256 cost) {\r\n        uint256 last = blk[blockNumber].lastPrice;\r\n        cost = last == 0 ? START_BLOCK_PRICE : last.mul(2);\r\n    }\r\n\r\n    function getCost(uint256[] calldata blockNumbers) public view returns (uint256 cost) {\r\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\r\n            cost = cost.add(getCost(blockNumbers[i]));\r\n        }\r\n    }\r\n\r\n    function withdraw(IERC20 token) public onlyOwner {\r\n        if (token != IERC20(0)) {\r\n            // Withdraw any accidental token deposits\r\n            token.safeTransfer(owner, token.balanceOf(address(this)));\r\n        } else if (block.timestamp < LOCK_TIMESTAMP) {\r\n            // After canvas is created, funds go to PIXEL hodlers and can't be withdrawn by the owner\r\n            bool success;\r\n            (success, ) = owner.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n\r\n    function poll(address user) public view returns (address canvas_, uint256 updates_, uint256 balance, uint256 supply, address upline_, DownlineStats memory downline_) {\r\n        canvas_ = canvas;\r\n        updates_ = updates.length;\r\n        balance = balanceOf[user];\r\n        supply = totalSupply;\r\n        upline_ = upline[user];\r\n        downline_ = downline[user];\r\n    }\r\n\r\n    // Receive funds from NFT sales for all PIXEL hodlers\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rep\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"MLMAddRep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rep\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"MLMEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerPixel\",\"type\":\"uint256\"}],\"name\":\"PixelBlockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"link\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canvas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"downline\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"earnings1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"earnings2\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"earnings3\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tier3\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"getBlocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lastPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"}],\"internalType\":\"struct PixelV2.ExportBlock[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getUpdates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"updatesSince\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"url\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"description\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"pixels\",\"type\":\"bytes[]\"},{\"internalType\":\"uint128[]\",\"name\":\"lastPrice\",\"type\":\"uint128[]\"},{\"internalType\":\"address[]\",\"name\":\"blockOwner\",\"type\":\"address[]\"}],\"name\":\"initBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"poll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"canvas_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updates_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"earnings1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"earnings2\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"earnings3\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tier3\",\"type\":\"uint32\"}],\"internalType\":\"struct MLM.DownlineStats\",\"name\":\"downline_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"linkNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes[]\",\"name\":\"pixels\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setBlocks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"pixels\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"setBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"linkNumber\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PixelV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://adfa019ba5d91ac2ea670d0d2a0252658090975180151ad1e183c85d74038e23"}